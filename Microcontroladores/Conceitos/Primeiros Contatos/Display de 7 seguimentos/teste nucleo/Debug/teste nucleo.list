
teste nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001e38  08001e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e54  08001e54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001e54  08001e54  00011e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e5c  08001e5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e5c  08001e5c  00011e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e60  08001e60  00011e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001e70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001e70  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006d45  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001488  00000000  00000000  00026dbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c8  00000000  00000000  00028248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e6  00000000  00000000  00028a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012c57  00000000  00000000  00028ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008850  00000000  00000000  0003bc4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007601a  00000000  00000000  0004449d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ba4  00000000  00000000  000ba4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  000bc05c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001e20 	.word	0x08001e20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001e20 	.word	0x08001e20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 f9b8 	bl	8000820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f82a 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8c0 	bl	8000638 <MX_GPIO_Init>
  MX_TIM6_Init();
 80004b8:	f000 f882 	bl	80005c0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim6);
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <main+0x50>)
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fa82 	bl	80019c8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (milisegundos >= 100)
 80004c4:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <main+0x54>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b63      	cmp	r3, #99	; 0x63
 80004ca:	ddfb      	ble.n	80004c4 <main+0x1c>
	  {
		  milisegundos=0;
 80004cc:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <main+0x54>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
		  segundos++;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <main+0x58>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	1c5a      	adds	r2, r3, #1
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <main+0x58>)
 80004da:	601a      	str	r2, [r3, #0]
		  if(segundos >= 60)
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <main+0x58>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b3b      	cmp	r3, #59	; 0x3b
 80004e2:	ddef      	ble.n	80004c4 <main+0x1c>
		  {
			  segundos=0;
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <main+0x58>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
			  minutos++;
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <main+0x5c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <main+0x5c>)
 80004f2:	601a      	str	r2, [r3, #0]
	  if (milisegundos >= 100)
 80004f4:	e7e6      	b.n	80004c4 <main+0x1c>
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	20000028 	.word	0x20000028
 80004fc:	20000068 	.word	0x20000068
 8000500:	2000006c 	.word	0x2000006c
 8000504:	20000070 	.word	0x20000070

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b590      	push	{r4, r7, lr}
 800050a:	b095      	sub	sp, #84	; 0x54
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	2418      	movs	r4, #24
 8000510:	193b      	adds	r3, r7, r4
 8000512:	0018      	movs	r0, r3
 8000514:	2338      	movs	r3, #56	; 0x38
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f001 fc55 	bl	8001dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	0018      	movs	r0, r3
 8000522:	2314      	movs	r3, #20
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f001 fc4e 	bl	8001dc8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	4b22      	ldr	r3, [pc, #136]	; (80005b8 <SystemClock_Config+0xb0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a22      	ldr	r2, [pc, #136]	; (80005bc <SystemClock_Config+0xb4>)
 8000532:	401a      	ands	r2, r3
 8000534:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <SystemClock_Config+0xb0>)
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	0109      	lsls	r1, r1, #4
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2202      	movs	r2, #2
 8000544:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2210      	movs	r2, #16
 8000550:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2202      	movs	r2, #2
 8000556:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2280      	movs	r2, #128	; 0x80
 8000562:	02d2      	lsls	r2, r2, #11
 8000564:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	03d2      	lsls	r2, r2, #15
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	187b      	adds	r3, r7, r1
 8000570:	0018      	movs	r0, r3
 8000572:	f000 fc37 	bl	8000de4 <HAL_RCC_OscConfig>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800057a:	f000 f8c3 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	220f      	movs	r2, #15
 8000582:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2203      	movs	r2, #3
 8000588:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2101      	movs	r1, #1
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 ffe3 	bl	800156c <HAL_RCC_ClockConfig>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005aa:	f000 f8ab 	bl	8000704 <Error_Handler>
  }
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b015      	add	sp, #84	; 0x54
 80005b4:	bd90      	pop	{r4, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	40007000 	.word	0x40007000
 80005bc:	ffffe7ff 	.word	0xffffe7ff

080005c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c6:	003b      	movs	r3, r7
 80005c8:	0018      	movs	r0, r3
 80005ca:	2308      	movs	r3, #8
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f001 fbfa 	bl	8001dc8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_TIM6_Init+0x6c>)
 80005d6:	4a16      	ldr	r2, [pc, #88]	; (8000630 <MX_TIM6_Init+0x70>)
 80005d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32000-1;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_TIM6_Init+0x6c>)
 80005dc:	4a15      	ldr	r2, [pc, #84]	; (8000634 <MX_TIM6_Init+0x74>)
 80005de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_TIM6_Init+0x6c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_TIM6_Init+0x6c>)
 80005e8:	220a      	movs	r2, #10
 80005ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_TIM6_Init+0x6c>)
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_TIM6_Init+0x6c>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 f9a7 	bl	8001948 <HAL_TIM_Base_Init>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80005fe:	f000 f881 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000602:	003b      	movs	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000608:	003b      	movs	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800060e:	003a      	movs	r2, r7
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_TIM6_Init+0x6c>)
 8000612:	0011      	movs	r1, r2
 8000614:	0018      	movs	r0, r3
 8000616:	f001 fb7f 	bl	8001d18 <HAL_TIMEx_MasterConfigSynchronization>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800061e:	f000 f871 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	20000028 	.word	0x20000028
 8000630:	40001000 	.word	0x40001000
 8000634:	00007cff 	.word	0x00007cff

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	240c      	movs	r4, #12
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2314      	movs	r3, #20
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f001 fbbd 	bl	8001dc8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <MX_GPIO_Init+0xa4>)
 8000650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_GPIO_Init+0xa4>)
 8000654:	2104      	movs	r1, #4
 8000656:	430a      	orrs	r2, r1
 8000658:	62da      	str	r2, [r3, #44]	; 0x2c
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <MX_GPIO_Init+0xa4>)
 800065c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065e:	2204      	movs	r2, #4
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_GPIO_Init+0xa4>)
 8000668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_GPIO_Init+0xa4>)
 800066c:	2101      	movs	r1, #1
 800066e:	430a      	orrs	r2, r1
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_GPIO_Init+0xa4>)
 8000674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000676:	2201      	movs	r2, #1
 8000678:	4013      	ands	r3, r2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800067e:	23a0      	movs	r3, #160	; 0xa0
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	2200      	movs	r2, #0
 8000684:	2120      	movs	r1, #32
 8000686:	0018      	movs	r0, r3
 8000688:	f000 fb8e 	bl	8000da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_BLUE_Pin */
  GPIO_InitStruct.Pin = BTN_BLUE_Pin;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	0192      	lsls	r2, r2, #6
 8000692:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_BLUE_GPIO_Port, &GPIO_InitStruct);
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <MX_GPIO_Init+0xa8>)
 80006a4:	0019      	movs	r1, r3
 80006a6:	0010      	movs	r0, r2
 80006a8:	f000 fa08 	bl	8000abc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006ac:	0021      	movs	r1, r4
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2220      	movs	r2, #32
 80006b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2201      	movs	r2, #1
 80006b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	187b      	adds	r3, r7, r1
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80006c6:	187a      	adds	r2, r7, r1
 80006c8:	23a0      	movs	r3, #160	; 0xa0
 80006ca:	05db      	lsls	r3, r3, #23
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 f9f4 	bl	8000abc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b009      	add	sp, #36	; 0x24
 80006da:	bd90      	pop	{r4, r7, pc}
 80006dc:	40021000 	.word	0x40021000
 80006e0:	50000800 	.word	0x50000800

080006e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *TimHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	milisegundos++;
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	4b03      	ldr	r3, [pc, #12]	; (8000700 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80006f4:	601a      	str	r2, [r3, #0]
}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b002      	add	sp, #8
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	20000068 	.word	0x20000068

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <HAL_MspInit+0x24>)
 8000716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <HAL_MspInit+0x24>)
 800071a:	2101      	movs	r1, #1
 800071c:	430a      	orrs	r2, r1
 800071e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <HAL_MspInit+0x24>)
 8000722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_MspInit+0x24>)
 8000726:	2180      	movs	r1, #128	; 0x80
 8000728:	0549      	lsls	r1, r1, #21
 800072a:	430a      	orrs	r2, r1
 800072c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40021000 	.word	0x40021000

08000738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <HAL_TIM_Base_MspInit+0x38>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d10d      	bne.n	8000766 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <HAL_TIM_Base_MspInit+0x3c>)
 800074c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_TIM_Base_MspInit+0x3c>)
 8000750:	2110      	movs	r1, #16
 8000752:	430a      	orrs	r2, r1
 8000754:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2011      	movs	r0, #17
 800075c:	f000 f97c 	bl	8000a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000760:	2011      	movs	r0, #17
 8000762:	f000 f98e 	bl	8000a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b002      	add	sp, #8
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	40001000 	.word	0x40001000
 8000774:	40021000 	.word	0x40021000

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler+0x4>

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079c:	f000 f894 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <TIM6_DAC_IRQHandler+0x14>)
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 f956 	bl	8001a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	20000028 	.word	0x20000028

080007c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d0:	f7ff fff6 	bl	80007c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480c      	ldr	r0, [pc, #48]	; (8000808 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d6:	490d      	ldr	r1, [pc, #52]	; (800080c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <LoopForever+0xe>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ec:	4c0a      	ldr	r4, [pc, #40]	; (8000818 <LoopForever+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007fa:	f001 faed 	bl	8001dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007fe:	f7ff fe53 	bl	80004a8 <main>

08000802 <LoopForever>:

LoopForever:
    b LoopForever
 8000802:	e7fe      	b.n	8000802 <LoopForever>
  ldr   r0, =_estack
 8000804:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800080c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000810:	08001e64 	.word	0x08001e64
  ldr r2, =_sbss
 8000814:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000818:	20000078 	.word	0x20000078

0800081c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800081c:	e7fe      	b.n	800081c <ADC1_COMP_IRQHandler>
	...

08000820 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_Init+0x3c>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <HAL_Init+0x3c>)
 8000832:	2140      	movs	r1, #64	; 0x40
 8000834:	430a      	orrs	r2, r1
 8000836:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000838:	2000      	movs	r0, #0
 800083a:	f000 f811 	bl	8000860 <HAL_InitTick>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d003      	beq.n	800084a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
 8000848:	e001      	b.n	800084e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800084a:	f7ff ff61 	bl	8000710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
}
 8000852:	0018      	movs	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	b002      	add	sp, #8
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	40022000 	.word	0x40022000

08000860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_InitTick+0x5c>)
 800086a:	681c      	ldr	r4, [r3, #0]
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_InitTick+0x60>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	0019      	movs	r1, r3
 8000872:	23fa      	movs	r3, #250	; 0xfa
 8000874:	0098      	lsls	r0, r3, #2
 8000876:	f7ff fc47 	bl	8000108 <__udivsi3>
 800087a:	0003      	movs	r3, r0
 800087c:	0019      	movs	r1, r3
 800087e:	0020      	movs	r0, r4
 8000880:	f7ff fc42 	bl	8000108 <__udivsi3>
 8000884:	0003      	movs	r3, r0
 8000886:	0018      	movs	r0, r3
 8000888:	f000 f90b 	bl	8000aa2 <HAL_SYSTICK_Config>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000890:	2301      	movs	r3, #1
 8000892:	e00f      	b.n	80008b4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b03      	cmp	r3, #3
 8000898:	d80b      	bhi.n	80008b2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	2301      	movs	r3, #1
 800089e:	425b      	negs	r3, r3
 80008a0:	2200      	movs	r2, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 f8d8 	bl	8000a58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_InitTick+0x64>)
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e000      	b.n	80008b4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b003      	add	sp, #12
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000004 	.word	0x20000004

080008c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x1c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	001a      	movs	r2, r3
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x20>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	18d2      	adds	r2, r2, r3
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <HAL_IncTick+0x20>)
 80008da:	601a      	str	r2, [r3, #0]
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000074 	.word	0x20000074

080008ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <HAL_GetTick+0x10>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	20000074 	.word	0x20000074

08000900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	0002      	movs	r2, r0
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b7f      	cmp	r3, #127	; 0x7f
 8000912:	d809      	bhi.n	8000928 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	001a      	movs	r2, r3
 800091a:	231f      	movs	r3, #31
 800091c:	401a      	ands	r2, r3
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <__NVIC_EnableIRQ+0x30>)
 8000920:	2101      	movs	r1, #1
 8000922:	4091      	lsls	r1, r2
 8000924:	000a      	movs	r2, r1
 8000926:	601a      	str	r2, [r3, #0]
  }
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b002      	add	sp, #8
 800092e:	bd80      	pop	{r7, pc}
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	0002      	movs	r2, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b7f      	cmp	r3, #127	; 0x7f
 8000948:	d828      	bhi.n	800099c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800094a:	4a2f      	ldr	r2, [pc, #188]	; (8000a08 <__NVIC_SetPriority+0xd4>)
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b25b      	sxtb	r3, r3
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	33c0      	adds	r3, #192	; 0xc0
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	589b      	ldr	r3, [r3, r2]
 800095a:	1dfa      	adds	r2, r7, #7
 800095c:	7812      	ldrb	r2, [r2, #0]
 800095e:	0011      	movs	r1, r2
 8000960:	2203      	movs	r2, #3
 8000962:	400a      	ands	r2, r1
 8000964:	00d2      	lsls	r2, r2, #3
 8000966:	21ff      	movs	r1, #255	; 0xff
 8000968:	4091      	lsls	r1, r2
 800096a:	000a      	movs	r2, r1
 800096c:	43d2      	mvns	r2, r2
 800096e:	401a      	ands	r2, r3
 8000970:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	019b      	lsls	r3, r3, #6
 8000976:	22ff      	movs	r2, #255	; 0xff
 8000978:	401a      	ands	r2, r3
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	0018      	movs	r0, r3
 8000980:	2303      	movs	r3, #3
 8000982:	4003      	ands	r3, r0
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000988:	481f      	ldr	r0, [pc, #124]	; (8000a08 <__NVIC_SetPriority+0xd4>)
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b25b      	sxtb	r3, r3
 8000990:	089b      	lsrs	r3, r3, #2
 8000992:	430a      	orrs	r2, r1
 8000994:	33c0      	adds	r3, #192	; 0xc0
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800099a:	e031      	b.n	8000a00 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800099c:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <__NVIC_SetPriority+0xd8>)
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	0019      	movs	r1, r3
 80009a4:	230f      	movs	r3, #15
 80009a6:	400b      	ands	r3, r1
 80009a8:	3b08      	subs	r3, #8
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	3306      	adds	r3, #6
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	18d3      	adds	r3, r2, r3
 80009b2:	3304      	adds	r3, #4
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1dfa      	adds	r2, r7, #7
 80009b8:	7812      	ldrb	r2, [r2, #0]
 80009ba:	0011      	movs	r1, r2
 80009bc:	2203      	movs	r2, #3
 80009be:	400a      	ands	r2, r1
 80009c0:	00d2      	lsls	r2, r2, #3
 80009c2:	21ff      	movs	r1, #255	; 0xff
 80009c4:	4091      	lsls	r1, r2
 80009c6:	000a      	movs	r2, r1
 80009c8:	43d2      	mvns	r2, r2
 80009ca:	401a      	ands	r2, r3
 80009cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	019b      	lsls	r3, r3, #6
 80009d2:	22ff      	movs	r2, #255	; 0xff
 80009d4:	401a      	ands	r2, r3
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	0018      	movs	r0, r3
 80009dc:	2303      	movs	r3, #3
 80009de:	4003      	ands	r3, r0
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	4809      	ldr	r0, [pc, #36]	; (8000a0c <__NVIC_SetPriority+0xd8>)
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	001c      	movs	r4, r3
 80009ec:	230f      	movs	r3, #15
 80009ee:	4023      	ands	r3, r4
 80009f0:	3b08      	subs	r3, #8
 80009f2:	089b      	lsrs	r3, r3, #2
 80009f4:	430a      	orrs	r2, r1
 80009f6:	3306      	adds	r3, #6
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	18c3      	adds	r3, r0, r3
 80009fc:	3304      	adds	r3, #4
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b003      	add	sp, #12
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	1e5a      	subs	r2, r3, #1
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	045b      	lsls	r3, r3, #17
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d301      	bcc.n	8000a28 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a24:	2301      	movs	r3, #1
 8000a26:	e010      	b.n	8000a4a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <SysTick_Config+0x44>)
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	3a01      	subs	r2, #1
 8000a2e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a30:	2301      	movs	r3, #1
 8000a32:	425b      	negs	r3, r3
 8000a34:	2103      	movs	r1, #3
 8000a36:	0018      	movs	r0, r3
 8000a38:	f7ff ff7c 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <SysTick_Config+0x44>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <SysTick_Config+0x44>)
 8000a44:	2207      	movs	r2, #7
 8000a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	e000e010 	.word	0xe000e010

08000a58 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	210f      	movs	r1, #15
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	1c02      	adds	r2, r0, #0
 8000a68:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff ff5d 	bl	8000934 <__NVIC_SetPriority>
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b004      	add	sp, #16
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	0002      	movs	r2, r0
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ff33 	bl	8000900 <__NVIC_EnableIRQ>
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff ffaf 	bl	8000a10 <SysTick_Config>
 8000ab2:	0003      	movs	r3, r0
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ad2:	e14f      	b.n	8000d74 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	697a      	ldr	r2, [r7, #20]
 8000adc:	4091      	lsls	r1, r2
 8000ade:	000a      	movs	r2, r1
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d100      	bne.n	8000aec <HAL_GPIO_Init+0x30>
 8000aea:	e140      	b.n	8000d6e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2203      	movs	r2, #3
 8000af2:	4013      	ands	r3, r2
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d005      	beq.n	8000b04 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2203      	movs	r2, #3
 8000afe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d130      	bne.n	8000b66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	409a      	lsls	r2, r3
 8000b12:	0013      	movs	r3, r2
 8000b14:	43da      	mvns	r2, r3
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	409a      	lsls	r2, r3
 8000b26:	0013      	movs	r3, r2
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	43da      	mvns	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	2201      	movs	r2, #1
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d017      	beq.n	8000ba2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	0013      	movs	r3, r2
 8000b82:	43da      	mvns	r2, r3
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	4013      	ands	r3, r2
 8000b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	409a      	lsls	r2, r3
 8000b94:	0013      	movs	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d123      	bne.n	8000bf6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	0092      	lsls	r2, r2, #2
 8000bb8:	58d3      	ldr	r3, [r2, r3]
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	2207      	movs	r2, #7
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	220f      	movs	r2, #15
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	0013      	movs	r3, r2
 8000bca:	43da      	mvns	r2, r3
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	691a      	ldr	r2, [r3, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	2107      	movs	r1, #7
 8000bda:	400b      	ands	r3, r1
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	409a      	lsls	r2, r3
 8000be0:	0013      	movs	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	08da      	lsrs	r2, r3, #3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3208      	adds	r2, #8
 8000bf0:	0092      	lsls	r2, r2, #2
 8000bf2:	6939      	ldr	r1, [r7, #16]
 8000bf4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	2203      	movs	r2, #3
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	43da      	mvns	r2, r3
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2203      	movs	r2, #3
 8000c14:	401a      	ands	r2, r3
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	23c0      	movs	r3, #192	; 0xc0
 8000c30:	029b      	lsls	r3, r3, #10
 8000c32:	4013      	ands	r3, r2
 8000c34:	d100      	bne.n	8000c38 <HAL_GPIO_Init+0x17c>
 8000c36:	e09a      	b.n	8000d6e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c38:	4b54      	ldr	r3, [pc, #336]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c3c:	4b53      	ldr	r3, [pc, #332]	; (8000d8c <HAL_GPIO_Init+0x2d0>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	430a      	orrs	r2, r1
 8000c42:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c44:	4a52      	ldr	r2, [pc, #328]	; (8000d90 <HAL_GPIO_Init+0x2d4>)
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	589b      	ldr	r3, [r3, r2]
 8000c50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	2203      	movs	r2, #3
 8000c56:	4013      	ands	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	0013      	movs	r3, r2
 8000c60:	43da      	mvns	r2, r3
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	23a0      	movs	r3, #160	; 0xa0
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d019      	beq.n	8000ca6 <HAL_GPIO_Init+0x1ea>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a47      	ldr	r2, [pc, #284]	; (8000d94 <HAL_GPIO_Init+0x2d8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d013      	beq.n	8000ca2 <HAL_GPIO_Init+0x1e6>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a46      	ldr	r2, [pc, #280]	; (8000d98 <HAL_GPIO_Init+0x2dc>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d00d      	beq.n	8000c9e <HAL_GPIO_Init+0x1e2>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a45      	ldr	r2, [pc, #276]	; (8000d9c <HAL_GPIO_Init+0x2e0>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d007      	beq.n	8000c9a <HAL_GPIO_Init+0x1de>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a44      	ldr	r2, [pc, #272]	; (8000da0 <HAL_GPIO_Init+0x2e4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d101      	bne.n	8000c96 <HAL_GPIO_Init+0x1da>
 8000c92:	2305      	movs	r3, #5
 8000c94:	e008      	b.n	8000ca8 <HAL_GPIO_Init+0x1ec>
 8000c96:	2306      	movs	r3, #6
 8000c98:	e006      	b.n	8000ca8 <HAL_GPIO_Init+0x1ec>
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e004      	b.n	8000ca8 <HAL_GPIO_Init+0x1ec>
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	e002      	b.n	8000ca8 <HAL_GPIO_Init+0x1ec>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e000      	b.n	8000ca8 <HAL_GPIO_Init+0x1ec>
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	2103      	movs	r1, #3
 8000cac:	400a      	ands	r2, r1
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	4093      	lsls	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cb8:	4935      	ldr	r1, [pc, #212]	; (8000d90 <HAL_GPIO_Init+0x2d4>)
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	089b      	lsrs	r3, r3, #2
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cc6:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <HAL_GPIO_Init+0x2e8>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	035b      	lsls	r3, r3, #13
 8000cde:	4013      	ands	r3, r2
 8000ce0:	d003      	beq.n	8000cea <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cea:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <HAL_GPIO_Init+0x2e8>)
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <HAL_GPIO_Init+0x2e8>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	43da      	mvns	r2, r3
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	039b      	lsls	r3, r3, #14
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <HAL_GPIO_Init+0x2e8>)
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000d1a:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <HAL_GPIO_Init+0x2e8>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	43da      	mvns	r2, r3
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	2380      	movs	r3, #128	; 0x80
 8000d30:	029b      	lsls	r3, r3, #10
 8000d32:	4013      	ands	r3, r2
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <HAL_GPIO_Init+0x2e8>)
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_GPIO_Init+0x2e8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43da      	mvns	r2, r3
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685a      	ldr	r2, [r3, #4]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	025b      	lsls	r3, r3, #9
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_GPIO_Init+0x2e8>)
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	3301      	adds	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	40da      	lsrs	r2, r3
 8000d7c:	1e13      	subs	r3, r2, #0
 8000d7e:	d000      	beq.n	8000d82 <HAL_GPIO_Init+0x2c6>
 8000d80:	e6a8      	b.n	8000ad4 <HAL_GPIO_Init+0x18>
  }
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b006      	add	sp, #24
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010000 	.word	0x40010000
 8000d94:	50000400 	.word	0x50000400
 8000d98:	50000800 	.word	0x50000800
 8000d9c:	50000c00 	.word	0x50000c00
 8000da0:	50001c00 	.word	0x50001c00
 8000da4:	40010400 	.word	0x40010400

08000da8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	0008      	movs	r0, r1
 8000db2:	0011      	movs	r1, r2
 8000db4:	1cbb      	adds	r3, r7, #2
 8000db6:	1c02      	adds	r2, r0, #0
 8000db8:	801a      	strh	r2, [r3, #0]
 8000dba:	1c7b      	adds	r3, r7, #1
 8000dbc:	1c0a      	adds	r2, r1, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dc0:	1c7b      	adds	r3, r7, #1
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d004      	beq.n	8000dd2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dc8:	1cbb      	adds	r3, r7, #2
 8000dca:	881a      	ldrh	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000dd0:	e003      	b.n	8000dda <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000dd2:	1cbb      	adds	r3, r7, #2
 8000dd4:	881a      	ldrh	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b002      	add	sp, #8
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de4:	b5b0      	push	{r4, r5, r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	f000 fbaf 	bl	8001556 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000df8:	4bcf      	ldr	r3, [pc, #828]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	220c      	movs	r2, #12
 8000dfe:	4013      	ands	r3, r2
 8000e00:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e02:	4bcd      	ldr	r3, [pc, #820]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	025b      	lsls	r3, r3, #9
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2201      	movs	r2, #1
 8000e14:	4013      	ands	r3, r2
 8000e16:	d100      	bne.n	8000e1a <HAL_RCC_OscConfig+0x36>
 8000e18:	e07e      	b.n	8000f18 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e1a:	6a3b      	ldr	r3, [r7, #32]
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d007      	beq.n	8000e30 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	2b0c      	cmp	r3, #12
 8000e24:	d112      	bne.n	8000e4c <HAL_RCC_OscConfig+0x68>
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	025b      	lsls	r3, r3, #9
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d10d      	bne.n	8000e4c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e30:	4bc1      	ldr	r3, [pc, #772]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	029b      	lsls	r3, r3, #10
 8000e38:	4013      	ands	r3, r2
 8000e3a:	d100      	bne.n	8000e3e <HAL_RCC_OscConfig+0x5a>
 8000e3c:	e06b      	b.n	8000f16 <HAL_RCC_OscConfig+0x132>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d167      	bne.n	8000f16 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	f000 fb85 	bl	8001556 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	025b      	lsls	r3, r3, #9
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d107      	bne.n	8000e68 <HAL_RCC_OscConfig+0x84>
 8000e58:	4bb7      	ldr	r3, [pc, #732]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4bb6      	ldr	r3, [pc, #728]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	0249      	lsls	r1, r1, #9
 8000e62:	430a      	orrs	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	e027      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685a      	ldr	r2, [r3, #4]
 8000e6c:	23a0      	movs	r3, #160	; 0xa0
 8000e6e:	02db      	lsls	r3, r3, #11
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d10e      	bne.n	8000e92 <HAL_RCC_OscConfig+0xae>
 8000e74:	4bb0      	ldr	r3, [pc, #704]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4baf      	ldr	r3, [pc, #700]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	02c9      	lsls	r1, r1, #11
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	4bad      	ldr	r3, [pc, #692]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4bac      	ldr	r3, [pc, #688]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	0249      	lsls	r1, r1, #9
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	e012      	b.n	8000eb8 <HAL_RCC_OscConfig+0xd4>
 8000e92:	4ba9      	ldr	r3, [pc, #676]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4ba8      	ldr	r3, [pc, #672]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000e98:	49a8      	ldr	r1, [pc, #672]	; (800113c <HAL_RCC_OscConfig+0x358>)
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	4ba6      	ldr	r3, [pc, #664]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	025b      	lsls	r3, r3, #9
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4ba2      	ldr	r3, [pc, #648]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4ba1      	ldr	r3, [pc, #644]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000eb2:	49a3      	ldr	r1, [pc, #652]	; (8001140 <HAL_RCC_OscConfig+0x35c>)
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d015      	beq.n	8000eec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fd14 	bl	80008ec <HAL_GetTick>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ec8:	e009      	b.n	8000ede <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eca:	f7ff fd0f 	bl	80008ec <HAL_GetTick>
 8000ece:	0002      	movs	r2, r0
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b64      	cmp	r3, #100	; 0x64
 8000ed6:	d902      	bls.n	8000ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	f000 fb3c 	bl	8001556 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ede:	4b96      	ldr	r3, [pc, #600]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	029b      	lsls	r3, r3, #10
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d0ef      	beq.n	8000eca <HAL_RCC_OscConfig+0xe6>
 8000eea:	e015      	b.n	8000f18 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fcfe 	bl	80008ec <HAL_GetTick>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ef6:	f7ff fcf9 	bl	80008ec <HAL_GetTick>
 8000efa:	0002      	movs	r2, r0
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b64      	cmp	r3, #100	; 0x64
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e326      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f08:	4b8b      	ldr	r3, [pc, #556]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	029b      	lsls	r3, r3, #10
 8000f10:	4013      	ands	r3, r2
 8000f12:	d1f0      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x112>
 8000f14:	e000      	b.n	8000f18 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f16:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2202      	movs	r2, #2
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d100      	bne.n	8000f24 <HAL_RCC_OscConfig+0x140>
 8000f22:	e08b      	b.n	800103c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f2a:	6a3b      	ldr	r3, [r7, #32]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d005      	beq.n	8000f3c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f30:	6a3b      	ldr	r3, [r7, #32]
 8000f32:	2b0c      	cmp	r3, #12
 8000f34:	d13e      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x1d0>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d13b      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f3c:	4b7e      	ldr	r3, [pc, #504]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2204      	movs	r2, #4
 8000f42:	4013      	ands	r3, r2
 8000f44:	d004      	beq.n	8000f50 <HAL_RCC_OscConfig+0x16c>
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e302      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f50:	4b79      	ldr	r3, [pc, #484]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	4a7b      	ldr	r2, [pc, #492]	; (8001144 <HAL_RCC_OscConfig+0x360>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	0019      	movs	r1, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	021a      	lsls	r2, r3, #8
 8000f60:	4b75      	ldr	r3, [pc, #468]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000f62:	430a      	orrs	r2, r1
 8000f64:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f66:	4b74      	ldr	r3, [pc, #464]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2209      	movs	r2, #9
 8000f6c:	4393      	bics	r3, r2
 8000f6e:	0019      	movs	r1, r3
 8000f70:	4b71      	ldr	r3, [pc, #452]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f78:	f000 fc40 	bl	80017fc <HAL_RCC_GetSysClockFreq>
 8000f7c:	0001      	movs	r1, r0
 8000f7e:	4b6e      	ldr	r3, [pc, #440]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	220f      	movs	r2, #15
 8000f86:	4013      	ands	r3, r2
 8000f88:	4a6f      	ldr	r2, [pc, #444]	; (8001148 <HAL_RCC_OscConfig+0x364>)
 8000f8a:	5cd3      	ldrb	r3, [r2, r3]
 8000f8c:	000a      	movs	r2, r1
 8000f8e:	40da      	lsrs	r2, r3
 8000f90:	4b6e      	ldr	r3, [pc, #440]	; (800114c <HAL_RCC_OscConfig+0x368>)
 8000f92:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000f94:	4b6e      	ldr	r3, [pc, #440]	; (8001150 <HAL_RCC_OscConfig+0x36c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2513      	movs	r5, #19
 8000f9a:	197c      	adds	r4, r7, r5
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff fc5f 	bl	8000860 <HAL_InitTick>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000fa6:	197b      	adds	r3, r7, r5
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d046      	beq.n	800103c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000fae:	197b      	adds	r3, r7, r5
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	e2d0      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d027      	beq.n	800100a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fba:	4b5f      	ldr	r3, [pc, #380]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2209      	movs	r2, #9
 8000fc0:	4393      	bics	r3, r2
 8000fc2:	0019      	movs	r1, r3
 8000fc4:	4b5c      	ldr	r3, [pc, #368]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fc8e 	bl	80008ec <HAL_GetTick>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fc89 	bl	80008ec <HAL_GetTick>
 8000fda:	0002      	movs	r2, r0
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e2b6      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fe8:	4b53      	ldr	r3, [pc, #332]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2204      	movs	r2, #4
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d0f1      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff2:	4b51      	ldr	r3, [pc, #324]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	4a53      	ldr	r2, [pc, #332]	; (8001144 <HAL_RCC_OscConfig+0x360>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	021a      	lsls	r2, r3, #8
 8001002:	4b4d      	ldr	r3, [pc, #308]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8001004:	430a      	orrs	r2, r1
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	e018      	b.n	800103c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800100a:	4b4b      	ldr	r3, [pc, #300]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b4a      	ldr	r3, [pc, #296]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8001010:	2101      	movs	r1, #1
 8001012:	438a      	bics	r2, r1
 8001014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fc69 	bl	80008ec <HAL_GetTick>
 800101a:	0003      	movs	r3, r0
 800101c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001020:	f7ff fc64 	bl	80008ec <HAL_GetTick>
 8001024:	0002      	movs	r2, r0
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e291      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001032:	4b41      	ldr	r3, [pc, #260]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2204      	movs	r2, #4
 8001038:	4013      	ands	r3, r2
 800103a:	d1f1      	bne.n	8001020 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2210      	movs	r2, #16
 8001042:	4013      	ands	r3, r2
 8001044:	d100      	bne.n	8001048 <HAL_RCC_OscConfig+0x264>
 8001046:	e0a1      	b.n	800118c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d140      	bne.n	80010d0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800104e:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4013      	ands	r3, r2
 8001058:	d005      	beq.n	8001066 <HAL_RCC_OscConfig+0x282>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e277      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001066:	4b34      	ldr	r3, [pc, #208]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a3a      	ldr	r2, [pc, #232]	; (8001154 <HAL_RCC_OscConfig+0x370>)
 800106c:	4013      	ands	r3, r2
 800106e:	0019      	movs	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001074:	4b30      	ldr	r3, [pc, #192]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8001076:	430a      	orrs	r2, r1
 8001078:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800107a:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	0a19      	lsrs	r1, r3, #8
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	061a      	lsls	r2, r3, #24
 8001088:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 800108a:	430a      	orrs	r2, r1
 800108c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	0b5b      	lsrs	r3, r3, #13
 8001094:	3301      	adds	r3, #1
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	0212      	lsls	r2, r2, #8
 800109a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	210f      	movs	r1, #15
 80010a4:	400b      	ands	r3, r1
 80010a6:	4928      	ldr	r1, [pc, #160]	; (8001148 <HAL_RCC_OscConfig+0x364>)
 80010a8:	5ccb      	ldrb	r3, [r1, r3]
 80010aa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <HAL_RCC_OscConfig+0x368>)
 80010ae:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80010b0:	4b27      	ldr	r3, [pc, #156]	; (8001150 <HAL_RCC_OscConfig+0x36c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2513      	movs	r5, #19
 80010b6:	197c      	adds	r4, r7, r5
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff fbd1 	bl	8000860 <HAL_InitTick>
 80010be:	0003      	movs	r3, r0
 80010c0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80010c2:	197b      	adds	r3, r7, r5
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d060      	beq.n	800118c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80010ca:	197b      	adds	r3, r7, r5
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	e242      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d03f      	beq.n	8001158 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	0049      	lsls	r1, r1, #1
 80010e2:	430a      	orrs	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff fc01 	bl	80008ec <HAL_GetTick>
 80010ea:	0003      	movs	r3, r0
 80010ec:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010f0:	f7ff fbfc 	bl	80008ec <HAL_GetTick>
 80010f4:	0002      	movs	r2, r0
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e229      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4013      	ands	r3, r2
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <HAL_RCC_OscConfig+0x370>)
 8001114:	4013      	ands	r3, r2
 8001116:	0019      	movs	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 800111e:	430a      	orrs	r2, r1
 8001120:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	0a19      	lsrs	r1, r3, #8
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	061a      	lsls	r2, r3, #24
 8001130:	4b01      	ldr	r3, [pc, #4]	; (8001138 <HAL_RCC_OscConfig+0x354>)
 8001132:	430a      	orrs	r2, r1
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	e029      	b.n	800118c <HAL_RCC_OscConfig+0x3a8>
 8001138:	40021000 	.word	0x40021000
 800113c:	fffeffff 	.word	0xfffeffff
 8001140:	fffbffff 	.word	0xfffbffff
 8001144:	ffffe0ff 	.word	0xffffe0ff
 8001148:	08001e38 	.word	0x08001e38
 800114c:	20000000 	.word	0x20000000
 8001150:	20000004 	.word	0x20000004
 8001154:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001158:	4bbd      	ldr	r3, [pc, #756]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4bbc      	ldr	r3, [pc, #752]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 800115e:	49bd      	ldr	r1, [pc, #756]	; (8001454 <HAL_RCC_OscConfig+0x670>)
 8001160:	400a      	ands	r2, r1
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fbc2 	bl	80008ec <HAL_GetTick>
 8001168:	0003      	movs	r3, r0
 800116a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800116e:	f7ff fbbd 	bl	80008ec <HAL_GetTick>
 8001172:	0002      	movs	r2, r0
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e1ea      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001180:	4bb3      	ldr	r3, [pc, #716]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4013      	ands	r3, r2
 800118a:	d1f0      	bne.n	800116e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2208      	movs	r2, #8
 8001192:	4013      	ands	r3, r2
 8001194:	d036      	beq.n	8001204 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d019      	beq.n	80011d2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800119e:	4bac      	ldr	r3, [pc, #688]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80011a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011a2:	4bab      	ldr	r3, [pc, #684]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80011a4:	2101      	movs	r1, #1
 80011a6:	430a      	orrs	r2, r1
 80011a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011aa:	f7ff fb9f 	bl	80008ec <HAL_GetTick>
 80011ae:	0003      	movs	r3, r0
 80011b0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fb9a 	bl	80008ec <HAL_GetTick>
 80011b8:	0002      	movs	r2, r0
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1c7      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011c6:	4ba2      	ldr	r3, [pc, #648]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80011c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ca:	2202      	movs	r2, #2
 80011cc:	4013      	ands	r3, r2
 80011ce:	d0f1      	beq.n	80011b4 <HAL_RCC_OscConfig+0x3d0>
 80011d0:	e018      	b.n	8001204 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d2:	4b9f      	ldr	r3, [pc, #636]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80011d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80011d6:	4b9e      	ldr	r3, [pc, #632]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80011d8:	2101      	movs	r1, #1
 80011da:	438a      	bics	r2, r1
 80011dc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011de:	f7ff fb85 	bl	80008ec <HAL_GetTick>
 80011e2:	0003      	movs	r3, r0
 80011e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e8:	f7ff fb80 	bl	80008ec <HAL_GetTick>
 80011ec:	0002      	movs	r2, r0
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e1ad      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011fa:	4b95      	ldr	r3, [pc, #596]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80011fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fe:	2202      	movs	r2, #2
 8001200:	4013      	ands	r3, r2
 8001202:	d1f1      	bne.n	80011e8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2204      	movs	r2, #4
 800120a:	4013      	ands	r3, r2
 800120c:	d100      	bne.n	8001210 <HAL_RCC_OscConfig+0x42c>
 800120e:	e0ae      	b.n	800136e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001210:	2027      	movs	r0, #39	; 0x27
 8001212:	183b      	adds	r3, r7, r0
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001218:	4b8d      	ldr	r3, [pc, #564]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 800121a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	055b      	lsls	r3, r3, #21
 8001220:	4013      	ands	r3, r2
 8001222:	d109      	bne.n	8001238 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001224:	4b8a      	ldr	r3, [pc, #552]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 8001226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001228:	4b89      	ldr	r3, [pc, #548]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 800122a:	2180      	movs	r1, #128	; 0x80
 800122c:	0549      	lsls	r1, r1, #21
 800122e:	430a      	orrs	r2, r1
 8001230:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001232:	183b      	adds	r3, r7, r0
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001238:	4b87      	ldr	r3, [pc, #540]	; (8001458 <HAL_RCC_OscConfig+0x674>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4013      	ands	r3, r2
 8001242:	d11a      	bne.n	800127a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001244:	4b84      	ldr	r3, [pc, #528]	; (8001458 <HAL_RCC_OscConfig+0x674>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b83      	ldr	r3, [pc, #524]	; (8001458 <HAL_RCC_OscConfig+0x674>)
 800124a:	2180      	movs	r1, #128	; 0x80
 800124c:	0049      	lsls	r1, r1, #1
 800124e:	430a      	orrs	r2, r1
 8001250:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001252:	f7ff fb4b 	bl	80008ec <HAL_GetTick>
 8001256:	0003      	movs	r3, r0
 8001258:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125c:	f7ff fb46 	bl	80008ec <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	; 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e173      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126e:	4b7a      	ldr	r3, [pc, #488]	; (8001458 <HAL_RCC_OscConfig+0x674>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4013      	ands	r3, r2
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	429a      	cmp	r2, r3
 8001284:	d107      	bne.n	8001296 <HAL_RCC_OscConfig+0x4b2>
 8001286:	4b72      	ldr	r3, [pc, #456]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 8001288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800128a:	4b71      	ldr	r3, [pc, #452]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 800128c:	2180      	movs	r1, #128	; 0x80
 800128e:	0049      	lsls	r1, r1, #1
 8001290:	430a      	orrs	r2, r1
 8001292:	651a      	str	r2, [r3, #80]	; 0x50
 8001294:	e031      	b.n	80012fa <HAL_RCC_OscConfig+0x516>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x4d4>
 800129e:	4b6c      	ldr	r3, [pc, #432]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80012a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012a2:	4b6b      	ldr	r3, [pc, #428]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80012a4:	496b      	ldr	r1, [pc, #428]	; (8001454 <HAL_RCC_OscConfig+0x670>)
 80012a6:	400a      	ands	r2, r1
 80012a8:	651a      	str	r2, [r3, #80]	; 0x50
 80012aa:	4b69      	ldr	r3, [pc, #420]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80012ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012ae:	4b68      	ldr	r3, [pc, #416]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80012b0:	496a      	ldr	r1, [pc, #424]	; (800145c <HAL_RCC_OscConfig+0x678>)
 80012b2:	400a      	ands	r2, r1
 80012b4:	651a      	str	r2, [r3, #80]	; 0x50
 80012b6:	e020      	b.n	80012fa <HAL_RCC_OscConfig+0x516>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	23a0      	movs	r3, #160	; 0xa0
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d10e      	bne.n	80012e2 <HAL_RCC_OscConfig+0x4fe>
 80012c4:	4b62      	ldr	r3, [pc, #392]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80012c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012c8:	4b61      	ldr	r3, [pc, #388]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	00c9      	lsls	r1, r1, #3
 80012ce:	430a      	orrs	r2, r1
 80012d0:	651a      	str	r2, [r3, #80]	; 0x50
 80012d2:	4b5f      	ldr	r3, [pc, #380]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80012d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012d6:	4b5e      	ldr	r3, [pc, #376]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	0049      	lsls	r1, r1, #1
 80012dc:	430a      	orrs	r2, r1
 80012de:	651a      	str	r2, [r3, #80]	; 0x50
 80012e0:	e00b      	b.n	80012fa <HAL_RCC_OscConfig+0x516>
 80012e2:	4b5b      	ldr	r3, [pc, #364]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80012e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012e6:	4b5a      	ldr	r3, [pc, #360]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80012e8:	495a      	ldr	r1, [pc, #360]	; (8001454 <HAL_RCC_OscConfig+0x670>)
 80012ea:	400a      	ands	r2, r1
 80012ec:	651a      	str	r2, [r3, #80]	; 0x50
 80012ee:	4b58      	ldr	r3, [pc, #352]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80012f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012f2:	4b57      	ldr	r3, [pc, #348]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80012f4:	4959      	ldr	r1, [pc, #356]	; (800145c <HAL_RCC_OscConfig+0x678>)
 80012f6:	400a      	ands	r2, r1
 80012f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d015      	beq.n	800132e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001302:	f7ff faf3 	bl	80008ec <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800130a:	e009      	b.n	8001320 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800130c:	f7ff faee 	bl	80008ec <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	4a52      	ldr	r2, [pc, #328]	; (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e11a      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001320:	4b4b      	ldr	r3, [pc, #300]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 8001322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4013      	ands	r3, r2
 800132a:	d0ef      	beq.n	800130c <HAL_RCC_OscConfig+0x528>
 800132c:	e014      	b.n	8001358 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7ff fadd 	bl	80008ec <HAL_GetTick>
 8001332:	0003      	movs	r3, r0
 8001334:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001336:	e009      	b.n	800134c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f7ff fad8 	bl	80008ec <HAL_GetTick>
 800133c:	0002      	movs	r2, r0
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	4a47      	ldr	r2, [pc, #284]	; (8001460 <HAL_RCC_OscConfig+0x67c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e104      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800134c:	4b40      	ldr	r3, [pc, #256]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 800134e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4013      	ands	r3, r2
 8001356:	d1ef      	bne.n	8001338 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001358:	2327      	movs	r3, #39	; 0x27
 800135a:	18fb      	adds	r3, r7, r3
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d105      	bne.n	800136e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001362:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 8001364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 8001368:	493e      	ldr	r1, [pc, #248]	; (8001464 <HAL_RCC_OscConfig+0x680>)
 800136a:	400a      	ands	r2, r1
 800136c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2220      	movs	r2, #32
 8001374:	4013      	ands	r3, r2
 8001376:	d049      	beq.n	800140c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d026      	beq.n	80013ce <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001380:	4b33      	ldr	r3, [pc, #204]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	4b32      	ldr	r3, [pc, #200]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 8001386:	2101      	movs	r1, #1
 8001388:	430a      	orrs	r2, r1
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	4b30      	ldr	r3, [pc, #192]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 800138e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 8001392:	2101      	movs	r1, #1
 8001394:	430a      	orrs	r2, r1
 8001396:	635a      	str	r2, [r3, #52]	; 0x34
 8001398:	4b33      	ldr	r3, [pc, #204]	; (8001468 <HAL_RCC_OscConfig+0x684>)
 800139a:	6a1a      	ldr	r2, [r3, #32]
 800139c:	4b32      	ldr	r3, [pc, #200]	; (8001468 <HAL_RCC_OscConfig+0x684>)
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	0189      	lsls	r1, r1, #6
 80013a2:	430a      	orrs	r2, r1
 80013a4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a6:	f7ff faa1 	bl	80008ec <HAL_GetTick>
 80013aa:	0003      	movs	r3, r0
 80013ac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013b0:	f7ff fa9c 	bl	80008ec <HAL_GetTick>
 80013b4:	0002      	movs	r2, r0
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e0c9      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2202      	movs	r2, #2
 80013c8:	4013      	ands	r3, r2
 80013ca:	d0f1      	beq.n	80013b0 <HAL_RCC_OscConfig+0x5cc>
 80013cc:	e01e      	b.n	800140c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 80013d4:	2101      	movs	r1, #1
 80013d6:	438a      	bics	r2, r1
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <HAL_RCC_OscConfig+0x684>)
 80013dc:	6a1a      	ldr	r2, [r3, #32]
 80013de:	4b22      	ldr	r3, [pc, #136]	; (8001468 <HAL_RCC_OscConfig+0x684>)
 80013e0:	4922      	ldr	r1, [pc, #136]	; (800146c <HAL_RCC_OscConfig+0x688>)
 80013e2:	400a      	ands	r2, r1
 80013e4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fa81 	bl	80008ec <HAL_GetTick>
 80013ea:	0003      	movs	r3, r0
 80013ec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013f0:	f7ff fa7c 	bl	80008ec <HAL_GetTick>
 80013f4:	0002      	movs	r2, r0
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e0a9      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2202      	movs	r2, #2
 8001408:	4013      	ands	r3, r2
 800140a:	d1f1      	bne.n	80013f0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	2b00      	cmp	r3, #0
 8001412:	d100      	bne.n	8001416 <HAL_RCC_OscConfig+0x632>
 8001414:	e09e      	b.n	8001554 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001416:	6a3b      	ldr	r3, [r7, #32]
 8001418:	2b0c      	cmp	r3, #12
 800141a:	d100      	bne.n	800141e <HAL_RCC_OscConfig+0x63a>
 800141c:	e077      	b.n	800150e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001422:	2b02      	cmp	r3, #2
 8001424:	d158      	bne.n	80014d8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_RCC_OscConfig+0x66c>)
 800142c:	4910      	ldr	r1, [pc, #64]	; (8001470 <HAL_RCC_OscConfig+0x68c>)
 800142e:	400a      	ands	r2, r1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fa5b 	bl	80008ec <HAL_GetTick>
 8001436:	0003      	movs	r3, r0
 8001438:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800143a:	e01b      	b.n	8001474 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143c:	f7ff fa56 	bl	80008ec <HAL_GetTick>
 8001440:	0002      	movs	r2, r0
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d914      	bls.n	8001474 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e083      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	40021000 	.word	0x40021000
 8001454:	fffffeff 	.word	0xfffffeff
 8001458:	40007000 	.word	0x40007000
 800145c:	fffffbff 	.word	0xfffffbff
 8001460:	00001388 	.word	0x00001388
 8001464:	efffffff 	.word	0xefffffff
 8001468:	40010000 	.word	0x40010000
 800146c:	ffffdfff 	.word	0xffffdfff
 8001470:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001474:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_RCC_OscConfig+0x77c>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	049b      	lsls	r3, r3, #18
 800147c:	4013      	ands	r3, r2
 800147e:	d1dd      	bne.n	800143c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001480:	4b37      	ldr	r3, [pc, #220]	; (8001560 <HAL_RCC_OscConfig+0x77c>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	4a37      	ldr	r2, [pc, #220]	; (8001564 <HAL_RCC_OscConfig+0x780>)
 8001486:	4013      	ands	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001498:	431a      	orrs	r2, r3
 800149a:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_RCC_OscConfig+0x77c>)
 800149c:	430a      	orrs	r2, r1
 800149e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_RCC_OscConfig+0x77c>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <HAL_RCC_OscConfig+0x77c>)
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	0449      	lsls	r1, r1, #17
 80014aa:	430a      	orrs	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fa1d 	bl	80008ec <HAL_GetTick>
 80014b2:	0003      	movs	r3, r0
 80014b4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff fa18 	bl	80008ec <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e045      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_RCC_OscConfig+0x77c>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	049b      	lsls	r3, r3, #18
 80014d2:	4013      	ands	r3, r2
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x6d4>
 80014d6:	e03d      	b.n	8001554 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <HAL_RCC_OscConfig+0x77c>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b20      	ldr	r3, [pc, #128]	; (8001560 <HAL_RCC_OscConfig+0x77c>)
 80014de:	4922      	ldr	r1, [pc, #136]	; (8001568 <HAL_RCC_OscConfig+0x784>)
 80014e0:	400a      	ands	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fa02 	bl	80008ec <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff f9fd 	bl	80008ec <HAL_GetTick>
 80014f2:	0002      	movs	r2, r0
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e02a      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <HAL_RCC_OscConfig+0x77c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	049b      	lsls	r3, r3, #18
 8001508:	4013      	ands	r3, r2
 800150a:	d1f0      	bne.n	80014ee <HAL_RCC_OscConfig+0x70a>
 800150c:	e022      	b.n	8001554 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e01d      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_RCC_OscConfig+0x77c>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	025b      	lsls	r3, r3, #9
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152c:	429a      	cmp	r2, r3
 800152e:	d10f      	bne.n	8001550 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	23f0      	movs	r3, #240	; 0xf0
 8001534:	039b      	lsls	r3, r3, #14
 8001536:	401a      	ands	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153c:	429a      	cmp	r2, r3
 800153e:	d107      	bne.n	8001550 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	23c0      	movs	r3, #192	; 0xc0
 8001544:	041b      	lsls	r3, r3, #16
 8001546:	401a      	ands	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b00a      	add	sp, #40	; 0x28
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	40021000 	.word	0x40021000
 8001564:	ff02ffff 	.word	0xff02ffff
 8001568:	feffffff 	.word	0xfeffffff

0800156c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800156c:	b5b0      	push	{r4, r5, r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e128      	b.n	80017d2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001580:	4b96      	ldr	r3, [pc, #600]	; (80017dc <HAL_RCC_ClockConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2201      	movs	r2, #1
 8001586:	4013      	ands	r3, r2
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	429a      	cmp	r2, r3
 800158c:	d91e      	bls.n	80015cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158e:	4b93      	ldr	r3, [pc, #588]	; (80017dc <HAL_RCC_ClockConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2201      	movs	r2, #1
 8001594:	4393      	bics	r3, r2
 8001596:	0019      	movs	r1, r3
 8001598:	4b90      	ldr	r3, [pc, #576]	; (80017dc <HAL_RCC_ClockConfig+0x270>)
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015a0:	f7ff f9a4 	bl	80008ec <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a8:	e009      	b.n	80015be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015aa:	f7ff f99f 	bl	80008ec <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	4a8a      	ldr	r2, [pc, #552]	; (80017e0 <HAL_RCC_ClockConfig+0x274>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e109      	b.n	80017d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015be:	4b87      	ldr	r3, [pc, #540]	; (80017dc <HAL_RCC_ClockConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2201      	movs	r2, #1
 80015c4:	4013      	ands	r3, r2
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d1ee      	bne.n	80015aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2202      	movs	r2, #2
 80015d2:	4013      	ands	r3, r2
 80015d4:	d009      	beq.n	80015ea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d6:	4b83      	ldr	r3, [pc, #524]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	22f0      	movs	r2, #240	; 0xf0
 80015dc:	4393      	bics	r3, r2
 80015de:	0019      	movs	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	4b7f      	ldr	r3, [pc, #508]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 80015e6:	430a      	orrs	r2, r1
 80015e8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2201      	movs	r2, #1
 80015f0:	4013      	ands	r3, r2
 80015f2:	d100      	bne.n	80015f6 <HAL_RCC_ClockConfig+0x8a>
 80015f4:	e089      	b.n	800170a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015fe:	4b79      	ldr	r3, [pc, #484]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	029b      	lsls	r3, r3, #10
 8001606:	4013      	ands	r3, r2
 8001608:	d120      	bne.n	800164c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0e1      	b.n	80017d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001616:	4b73      	ldr	r3, [pc, #460]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	049b      	lsls	r3, r3, #18
 800161e:	4013      	ands	r3, r2
 8001620:	d114      	bne.n	800164c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e0d5      	b.n	80017d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d106      	bne.n	800163c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800162e:	4b6d      	ldr	r3, [pc, #436]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2204      	movs	r2, #4
 8001634:	4013      	ands	r3, r2
 8001636:	d109      	bne.n	800164c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0ca      	b.n	80017d2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800163c:	4b69      	ldr	r3, [pc, #420]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4013      	ands	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0c2      	b.n	80017d2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800164c:	4b65      	ldr	r3, [pc, #404]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2203      	movs	r2, #3
 8001652:	4393      	bics	r3, r2
 8001654:	0019      	movs	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4b62      	ldr	r3, [pc, #392]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 800165c:	430a      	orrs	r2, r1
 800165e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001660:	f7ff f944 	bl	80008ec <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d111      	bne.n	8001694 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001670:	e009      	b.n	8001686 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001672:	f7ff f93b 	bl	80008ec <HAL_GetTick>
 8001676:	0002      	movs	r2, r0
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	4a58      	ldr	r2, [pc, #352]	; (80017e0 <HAL_RCC_ClockConfig+0x274>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e0a5      	b.n	80017d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001686:	4b57      	ldr	r3, [pc, #348]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	220c      	movs	r2, #12
 800168c:	4013      	ands	r3, r2
 800168e:	2b08      	cmp	r3, #8
 8001690:	d1ef      	bne.n	8001672 <HAL_RCC_ClockConfig+0x106>
 8001692:	e03a      	b.n	800170a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d111      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800169c:	e009      	b.n	80016b2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169e:	f7ff f925 	bl	80008ec <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	4a4d      	ldr	r2, [pc, #308]	; (80017e0 <HAL_RCC_ClockConfig+0x274>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e08f      	b.n	80017d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b2:	4b4c      	ldr	r3, [pc, #304]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	220c      	movs	r2, #12
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d1ef      	bne.n	800169e <HAL_RCC_ClockConfig+0x132>
 80016be:	e024      	b.n	800170a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d11b      	bne.n	8001700 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016c8:	e009      	b.n	80016de <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ca:	f7ff f90f 	bl	80008ec <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	4a42      	ldr	r2, [pc, #264]	; (80017e0 <HAL_RCC_ClockConfig+0x274>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e079      	b.n	80017d2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	220c      	movs	r2, #12
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d1ef      	bne.n	80016ca <HAL_RCC_ClockConfig+0x15e>
 80016ea:	e00e      	b.n	800170a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ec:	f7ff f8fe 	bl	80008ec <HAL_GetTick>
 80016f0:	0002      	movs	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	4a3a      	ldr	r2, [pc, #232]	; (80017e0 <HAL_RCC_ClockConfig+0x274>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e068      	b.n	80017d2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001700:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	220c      	movs	r2, #12
 8001706:	4013      	ands	r3, r2
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800170a:	4b34      	ldr	r3, [pc, #208]	; (80017dc <HAL_RCC_ClockConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2201      	movs	r2, #1
 8001710:	4013      	ands	r3, r2
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d21e      	bcs.n	8001756 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001718:	4b30      	ldr	r3, [pc, #192]	; (80017dc <HAL_RCC_ClockConfig+0x270>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2201      	movs	r2, #1
 800171e:	4393      	bics	r3, r2
 8001720:	0019      	movs	r1, r3
 8001722:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <HAL_RCC_ClockConfig+0x270>)
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800172a:	f7ff f8df 	bl	80008ec <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001732:	e009      	b.n	8001748 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001734:	f7ff f8da 	bl	80008ec <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	4a28      	ldr	r2, [pc, #160]	; (80017e0 <HAL_RCC_ClockConfig+0x274>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e044      	b.n	80017d2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <HAL_RCC_ClockConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2201      	movs	r2, #1
 800174e:	4013      	ands	r3, r2
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d1ee      	bne.n	8001734 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2204      	movs	r2, #4
 800175c:	4013      	ands	r3, r2
 800175e:	d009      	beq.n	8001774 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001760:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <HAL_RCC_ClockConfig+0x27c>)
 8001766:	4013      	ands	r3, r2
 8001768:	0019      	movs	r1, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 8001770:	430a      	orrs	r2, r1
 8001772:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2208      	movs	r2, #8
 800177a:	4013      	ands	r3, r2
 800177c:	d00a      	beq.n	8001794 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800177e:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	4a1a      	ldr	r2, [pc, #104]	; (80017ec <HAL_RCC_ClockConfig+0x280>)
 8001784:	4013      	ands	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	00da      	lsls	r2, r3, #3
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 8001790:	430a      	orrs	r2, r1
 8001792:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001794:	f000 f832 	bl	80017fc <HAL_RCC_GetSysClockFreq>
 8001798:	0001      	movs	r1, r0
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_RCC_ClockConfig+0x278>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	220f      	movs	r2, #15
 80017a2:	4013      	ands	r3, r2
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <HAL_RCC_ClockConfig+0x284>)
 80017a6:	5cd3      	ldrb	r3, [r2, r3]
 80017a8:	000a      	movs	r2, r1
 80017aa:	40da      	lsrs	r2, r3
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_RCC_ClockConfig+0x288>)
 80017ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_RCC_ClockConfig+0x28c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	250b      	movs	r5, #11
 80017b6:	197c      	adds	r4, r7, r5
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff f851 	bl	8000860 <HAL_InitTick>
 80017be:	0003      	movs	r3, r0
 80017c0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80017c2:	197b      	adds	r3, r7, r5
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80017ca:	197b      	adds	r3, r7, r5
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b004      	add	sp, #16
 80017d8:	bdb0      	pop	{r4, r5, r7, pc}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	40022000 	.word	0x40022000
 80017e0:	00001388 	.word	0x00001388
 80017e4:	40021000 	.word	0x40021000
 80017e8:	fffff8ff 	.word	0xfffff8ff
 80017ec:	ffffc7ff 	.word	0xffffc7ff
 80017f0:	08001e38 	.word	0x08001e38
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017fc:	b5b0      	push	{r4, r5, r7, lr}
 80017fe:	b08e      	sub	sp, #56	; 0x38
 8001800:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001802:	4b4c      	ldr	r3, [pc, #304]	; (8001934 <HAL_RCC_GetSysClockFreq+0x138>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180a:	230c      	movs	r3, #12
 800180c:	4013      	ands	r3, r2
 800180e:	2b0c      	cmp	r3, #12
 8001810:	d014      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0x40>
 8001812:	d900      	bls.n	8001816 <HAL_RCC_GetSysClockFreq+0x1a>
 8001814:	e07b      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x112>
 8001816:	2b04      	cmp	r3, #4
 8001818:	d002      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0x24>
 800181a:	2b08      	cmp	r3, #8
 800181c:	d00b      	beq.n	8001836 <HAL_RCC_GetSysClockFreq+0x3a>
 800181e:	e076      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001820:	4b44      	ldr	r3, [pc, #272]	; (8001934 <HAL_RCC_GetSysClockFreq+0x138>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2210      	movs	r2, #16
 8001826:	4013      	ands	r3, r2
 8001828:	d002      	beq.n	8001830 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800182a:	4b43      	ldr	r3, [pc, #268]	; (8001938 <HAL_RCC_GetSysClockFreq+0x13c>)
 800182c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800182e:	e07c      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001830:	4b42      	ldr	r3, [pc, #264]	; (800193c <HAL_RCC_GetSysClockFreq+0x140>)
 8001832:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001834:	e079      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001836:	4b42      	ldr	r3, [pc, #264]	; (8001940 <HAL_RCC_GetSysClockFreq+0x144>)
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800183a:	e076      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800183c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183e:	0c9a      	lsrs	r2, r3, #18
 8001840:	230f      	movs	r3, #15
 8001842:	401a      	ands	r2, r3
 8001844:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <HAL_RCC_GetSysClockFreq+0x148>)
 8001846:	5c9b      	ldrb	r3, [r3, r2]
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	0d9a      	lsrs	r2, r3, #22
 800184e:	2303      	movs	r3, #3
 8001850:	4013      	ands	r3, r2
 8001852:	3301      	adds	r3, #1
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_RCC_GetSysClockFreq+0x138>)
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	025b      	lsls	r3, r3, #9
 800185e:	4013      	ands	r3, r2
 8001860:	d01a      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	4a35      	ldr	r2, [pc, #212]	; (8001940 <HAL_RCC_GetSysClockFreq+0x144>)
 800186c:	2300      	movs	r3, #0
 800186e:	69b8      	ldr	r0, [r7, #24]
 8001870:	69f9      	ldr	r1, [r7, #28]
 8001872:	f7fe fcf5 	bl	8000260 <__aeabi_lmul>
 8001876:	0002      	movs	r2, r0
 8001878:	000b      	movs	r3, r1
 800187a:	0010      	movs	r0, r2
 800187c:	0019      	movs	r1, r3
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f7fe fcc9 	bl	8000220 <__aeabi_uldivmod>
 800188e:	0002      	movs	r2, r0
 8001890:	000b      	movs	r3, r1
 8001892:	0013      	movs	r3, r2
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
 8001896:	e037      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001898:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_RCC_GetSysClockFreq+0x138>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2210      	movs	r2, #16
 800189e:	4013      	ands	r3, r2
 80018a0:	d01a      	beq.n	80018d8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80018a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4a23      	ldr	r2, [pc, #140]	; (8001938 <HAL_RCC_GetSysClockFreq+0x13c>)
 80018ac:	2300      	movs	r3, #0
 80018ae:	68b8      	ldr	r0, [r7, #8]
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	f7fe fcd5 	bl	8000260 <__aeabi_lmul>
 80018b6:	0002      	movs	r2, r0
 80018b8:	000b      	movs	r3, r1
 80018ba:	0010      	movs	r0, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	603b      	str	r3, [r7, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f7fe fca9 	bl	8000220 <__aeabi_uldivmod>
 80018ce:	0002      	movs	r2, r0
 80018d0:	000b      	movs	r3, r1
 80018d2:	0013      	movs	r3, r2
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
 80018d6:	e017      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018da:	0018      	movs	r0, r3
 80018dc:	2300      	movs	r3, #0
 80018de:	0019      	movs	r1, r3
 80018e0:	4a16      	ldr	r2, [pc, #88]	; (800193c <HAL_RCC_GetSysClockFreq+0x140>)
 80018e2:	2300      	movs	r3, #0
 80018e4:	f7fe fcbc 	bl	8000260 <__aeabi_lmul>
 80018e8:	0002      	movs	r2, r0
 80018ea:	000b      	movs	r3, r1
 80018ec:	0010      	movs	r0, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	001c      	movs	r4, r3
 80018f4:	2300      	movs	r3, #0
 80018f6:	001d      	movs	r5, r3
 80018f8:	0022      	movs	r2, r4
 80018fa:	002b      	movs	r3, r5
 80018fc:	f7fe fc90 	bl	8000220 <__aeabi_uldivmod>
 8001900:	0002      	movs	r2, r0
 8001902:	000b      	movs	r3, r1
 8001904:	0013      	movs	r3, r2
 8001906:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800190c:	e00d      	b.n	800192a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_RCC_GetSysClockFreq+0x138>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	0b5b      	lsrs	r3, r3, #13
 8001914:	2207      	movs	r2, #7
 8001916:	4013      	ands	r3, r2
 8001918:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	3301      	adds	r3, #1
 800191e:	2280      	movs	r2, #128	; 0x80
 8001920:	0212      	lsls	r2, r2, #8
 8001922:	409a      	lsls	r2, r3
 8001924:	0013      	movs	r3, r2
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001928:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800192c:	0018      	movs	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	b00e      	add	sp, #56	; 0x38
 8001932:	bdb0      	pop	{r4, r5, r7, pc}
 8001934:	40021000 	.word	0x40021000
 8001938:	003d0900 	.word	0x003d0900
 800193c:	00f42400 	.word	0x00f42400
 8001940:	007a1200 	.word	0x007a1200
 8001944:	08001e48 	.word	0x08001e48

08001948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e032      	b.n	80019c0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2239      	movs	r2, #57	; 0x39
 800195e:	5c9b      	ldrb	r3, [r3, r2]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d107      	bne.n	8001976 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2238      	movs	r2, #56	; 0x38
 800196a:	2100      	movs	r1, #0
 800196c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	0018      	movs	r0, r3
 8001972:	f7fe fee1 	bl	8000738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2239      	movs	r2, #57	; 0x39
 800197a:	2102      	movs	r1, #2
 800197c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3304      	adds	r3, #4
 8001986:	0019      	movs	r1, r3
 8001988:	0010      	movs	r0, r2
 800198a:	f000 f971 	bl	8001c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	223e      	movs	r2, #62	; 0x3e
 8001992:	2101      	movs	r1, #1
 8001994:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	223a      	movs	r2, #58	; 0x3a
 800199a:	2101      	movs	r1, #1
 800199c:	5499      	strb	r1, [r3, r2]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	223b      	movs	r2, #59	; 0x3b
 80019a2:	2101      	movs	r1, #1
 80019a4:	5499      	strb	r1, [r3, r2]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	223c      	movs	r2, #60	; 0x3c
 80019aa:	2101      	movs	r1, #1
 80019ac:	5499      	strb	r1, [r3, r2]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	223d      	movs	r2, #61	; 0x3d
 80019b2:	2101      	movs	r1, #1
 80019b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2239      	movs	r2, #57	; 0x39
 80019ba:	2101      	movs	r1, #1
 80019bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b002      	add	sp, #8
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2239      	movs	r2, #57	; 0x39
 80019d4:	5c9b      	ldrb	r3, [r3, r2]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d001      	beq.n	80019e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e036      	b.n	8001a4e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2239      	movs	r2, #57	; 0x39
 80019e4:	2102      	movs	r1, #2
 80019e6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2101      	movs	r1, #1
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	05db      	lsls	r3, r3, #23
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d009      	beq.n	8001a18 <HAL_TIM_Base_Start_IT+0x50>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <HAL_TIM_Base_Start_IT+0x90>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d004      	beq.n	8001a18 <HAL_TIM_Base_Start_IT+0x50>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <HAL_TIM_Base_Start_IT+0x94>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d111      	bne.n	8001a3c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2207      	movs	r2, #7
 8001a20:	4013      	ands	r3, r2
 8001a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d010      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a3a:	e007      	b.n	8001a4c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2101      	movs	r1, #1
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b004      	add	sp, #16
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	40010800 	.word	0x40010800
 8001a5c:	40011400 	.word	0x40011400

08001a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d124      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d11d      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4252      	negs	r2, r2
 8001a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2203      	movs	r2, #3
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d004      	beq.n	8001aaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 f8cc 	bl	8001c40 <HAL_TIM_IC_CaptureCallback>
 8001aa8:	e007      	b.n	8001aba <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 f8bf 	bl	8001c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f000 f8cb 	bl	8001c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d125      	bne.n	8001b1a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d11e      	bne.n	8001b1a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	4252      	negs	r2, r2
 8001ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2202      	movs	r2, #2
 8001aea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	23c0      	movs	r3, #192	; 0xc0
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4013      	ands	r3, r2
 8001af8:	d004      	beq.n	8001b04 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f000 f89f 	bl	8001c40 <HAL_TIM_IC_CaptureCallback>
 8001b02:	e007      	b.n	8001b14 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	0018      	movs	r0, r3
 8001b08:	f000 f892 	bl	8001c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 f89e 	bl	8001c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	2208      	movs	r2, #8
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d124      	bne.n	8001b72 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2208      	movs	r2, #8
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d11d      	bne.n	8001b72 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2209      	movs	r2, #9
 8001b3c:	4252      	negs	r2, r2
 8001b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2204      	movs	r2, #4
 8001b44:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	0018      	movs	r0, r3
 8001b56:	f000 f873 	bl	8001c40 <HAL_TIM_IC_CaptureCallback>
 8001b5a:	e007      	b.n	8001b6c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 f866 	bl	8001c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	0018      	movs	r0, r3
 8001b68:	f000 f872 	bl	8001c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	2210      	movs	r2, #16
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b10      	cmp	r3, #16
 8001b7e:	d125      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2210      	movs	r2, #16
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b10      	cmp	r3, #16
 8001b8c:	d11e      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2211      	movs	r2, #17
 8001b94:	4252      	negs	r2, r2
 8001b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	69da      	ldr	r2, [r3, #28]
 8001ba4:	23c0      	movs	r3, #192	; 0xc0
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d004      	beq.n	8001bb6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f000 f846 	bl	8001c40 <HAL_TIM_IC_CaptureCallback>
 8001bb4:	e007      	b.n	8001bc6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f000 f839 	bl	8001c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f000 f845 	bl	8001c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d10f      	bne.n	8001bfa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d108      	bne.n	8001bfa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2202      	movs	r2, #2
 8001bee:	4252      	negs	r2, r2
 8001bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7fe fd75 	bl	80006e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	2240      	movs	r2, #64	; 0x40
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b40      	cmp	r3, #64	; 0x40
 8001c06:	d10f      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2240      	movs	r2, #64	; 0x40
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b40      	cmp	r3, #64	; 0x40
 8001c14:	d108      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2241      	movs	r2, #65	; 0x41
 8001c1c:	4252      	negs	r2, r2
 8001c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	0018      	movs	r0, r3
 8001c24:	f000 f81c 	bl	8001c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b002      	add	sp, #8
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b002      	add	sp, #8
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b002      	add	sp, #8
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b002      	add	sp, #8
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	05db      	lsls	r3, r3, #23
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d007      	beq.n	8001c9a <TIM_Base_SetConfig+0x2a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <TIM_Base_SetConfig+0x9c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d003      	beq.n	8001c9a <TIM_Base_SetConfig+0x2a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <TIM_Base_SetConfig+0xa0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d108      	bne.n	8001cac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2270      	movs	r2, #112	; 0x70
 8001c9e:	4393      	bics	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	05db      	lsls	r3, r3, #23
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d007      	beq.n	8001cc6 <TIM_Base_SetConfig+0x56>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <TIM_Base_SetConfig+0x9c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d003      	beq.n	8001cc6 <TIM_Base_SetConfig+0x56>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <TIM_Base_SetConfig+0xa0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d108      	bne.n	8001cd8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <TIM_Base_SetConfig+0xa4>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	4393      	bics	r3, r2
 8001cde:	001a      	movs	r2, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	615a      	str	r2, [r3, #20]
}
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b004      	add	sp, #16
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40010800 	.word	0x40010800
 8001d10:	40011400 	.word	0x40011400
 8001d14:	fffffcff 	.word	0xfffffcff

08001d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2238      	movs	r2, #56	; 0x38
 8001d26:	5c9b      	ldrb	r3, [r3, r2]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d101      	bne.n	8001d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e042      	b.n	8001db6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2238      	movs	r2, #56	; 0x38
 8001d34:	2101      	movs	r1, #1
 8001d36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2239      	movs	r2, #57	; 0x39
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2270      	movs	r2, #112	; 0x70
 8001d54:	4393      	bics	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	05db      	lsls	r3, r3, #23
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d009      	beq.n	8001d8a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a11      	ldr	r2, [pc, #68]	; (8001dc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d004      	beq.n	8001d8a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d10c      	bne.n	8001da4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2280      	movs	r2, #128	; 0x80
 8001d8e:	4393      	bics	r3, r2
 8001d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2239      	movs	r2, #57	; 0x39
 8001da8:	2101      	movs	r1, #1
 8001daa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2238      	movs	r2, #56	; 0x38
 8001db0:	2100      	movs	r1, #0
 8001db2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b004      	add	sp, #16
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	40010800 	.word	0x40010800
 8001dc4:	40011400 	.word	0x40011400

08001dc8 <memset>:
 8001dc8:	0003      	movs	r3, r0
 8001dca:	1882      	adds	r2, r0, r2
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d100      	bne.n	8001dd2 <memset+0xa>
 8001dd0:	4770      	bx	lr
 8001dd2:	7019      	strb	r1, [r3, #0]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	e7f9      	b.n	8001dcc <memset+0x4>

08001dd8 <__libc_init_array>:
 8001dd8:	b570      	push	{r4, r5, r6, lr}
 8001dda:	2600      	movs	r6, #0
 8001ddc:	4c0c      	ldr	r4, [pc, #48]	; (8001e10 <__libc_init_array+0x38>)
 8001dde:	4d0d      	ldr	r5, [pc, #52]	; (8001e14 <__libc_init_array+0x3c>)
 8001de0:	1b64      	subs	r4, r4, r5
 8001de2:	10a4      	asrs	r4, r4, #2
 8001de4:	42a6      	cmp	r6, r4
 8001de6:	d109      	bne.n	8001dfc <__libc_init_array+0x24>
 8001de8:	2600      	movs	r6, #0
 8001dea:	f000 f819 	bl	8001e20 <_init>
 8001dee:	4c0a      	ldr	r4, [pc, #40]	; (8001e18 <__libc_init_array+0x40>)
 8001df0:	4d0a      	ldr	r5, [pc, #40]	; (8001e1c <__libc_init_array+0x44>)
 8001df2:	1b64      	subs	r4, r4, r5
 8001df4:	10a4      	asrs	r4, r4, #2
 8001df6:	42a6      	cmp	r6, r4
 8001df8:	d105      	bne.n	8001e06 <__libc_init_array+0x2e>
 8001dfa:	bd70      	pop	{r4, r5, r6, pc}
 8001dfc:	00b3      	lsls	r3, r6, #2
 8001dfe:	58eb      	ldr	r3, [r5, r3]
 8001e00:	4798      	blx	r3
 8001e02:	3601      	adds	r6, #1
 8001e04:	e7ee      	b.n	8001de4 <__libc_init_array+0xc>
 8001e06:	00b3      	lsls	r3, r6, #2
 8001e08:	58eb      	ldr	r3, [r5, r3]
 8001e0a:	4798      	blx	r3
 8001e0c:	3601      	adds	r6, #1
 8001e0e:	e7f2      	b.n	8001df6 <__libc_init_array+0x1e>
 8001e10:	08001e5c 	.word	0x08001e5c
 8001e14:	08001e5c 	.word	0x08001e5c
 8001e18:	08001e60 	.word	0x08001e60
 8001e1c:	08001e5c 	.word	0x08001e5c

08001e20 <_init>:
 8001e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e26:	bc08      	pop	{r3}
 8001e28:	469e      	mov	lr, r3
 8001e2a:	4770      	bx	lr

08001e2c <_fini>:
 8001e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e32:	bc08      	pop	{r3}
 8001e34:	469e      	mov	lr, r3
 8001e36:	4770      	bx	lr

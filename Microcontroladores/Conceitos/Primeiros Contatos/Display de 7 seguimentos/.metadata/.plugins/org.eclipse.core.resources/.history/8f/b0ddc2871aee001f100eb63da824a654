/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define DELAY_TIME 15
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
uint8_t count         = 0,
		count2        = 0,
		count3        = 0,
		auto_count    = 1,
		btn_zero      = 1,
		btn_one       = 1,
		btn_two       = 1,
		manual_count  = 0,
		aux           = 0,
		flag          = 0,
		status_pin    = 0,
		disp          = 1;

char numbers[10][7] = { {1, 1, 1, 1, 1, 1, 0},  // count = 0
						{0, 1, 1, 0, 0, 0, 0},  // count = 1
						{1, 1, 0, 1, 1, 0, 1},  // count = 2
						{1, 1, 1, 1, 0, 0, 1},  // count = 3
						{0, 1, 1, 0, 0, 1, 1},  // count = 4
						{1, 0, 1, 1, 0, 1, 1},  // count = 5
						{1, 0, 1, 1, 1, 1, 1},  // count = 6
						{1, 1, 1, 0, 0, 0, 0},  // count = 7
						{1, 1, 1, 1, 1, 1, 1},  // count = 8
						{1, 1, 1, 1, 0, 1, 1}}; // count = 9

int timers[4] = {500, 250, 1000, 1500},
	i = 0,
	tim = 250;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
void show_dsplay(uint8_t counter);
int altern_disp(uint8_t atual_display);
void btn_functions(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  altern_disp(disp);
	  count++;
	  HAL_Delay(15);


	  if (count > 9) {
		  count = 0;
		  count2++;

		  if (count2 > 9){
			  count2 = 0;
			  count3++;

			  if (count3 > 9){
				  count2 = 0;
				  count = 0;
				  count3 = 0;
			  }
		  }
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STATE_LED_2_Pin|PORT_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PORT_C_Pin|PORT_D_Pin|FIRST_DISP_Pin|PORT_G_Pin
                          |MANUAL_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SECOND_DISP_Pin|STATE_LED_1_Pin|AUTO_LED_Pin|PORT_E_Pin
                          |PORT_A_Pin|PORT_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : STATE_LED_2_Pin PORT_F_Pin */
  GPIO_InitStruct.Pin = STATE_LED_2_Pin|PORT_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PORT_C_Pin PORT_D_Pin FIRST_DISP_Pin PORT_G_Pin
                           MANUAL_LED_Pin */
  GPIO_InitStruct.Pin = PORT_C_Pin|PORT_D_Pin|FIRST_DISP_Pin|PORT_G_Pin
                          |MANUAL_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : BTN_ONE_Pin BTN_TWO_Pin */
  GPIO_InitStruct.Pin = BTN_ONE_Pin|BTN_TWO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : SECOND_DISP_Pin STATE_LED_1_Pin AUTO_LED_Pin PORT_E_Pin
                           PORT_A_Pin PORT_B_Pin */
  GPIO_InitStruct.Pin = SECOND_DISP_Pin|STATE_LED_1_Pin|AUTO_LED_Pin|PORT_E_Pin
                          |PORT_A_Pin|PORT_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : BTN_ZERO_Pin */
  GPIO_InitStruct.Pin = BTN_ZERO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BTN_ZERO_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void show_dsplay(uint8_t counter){
	HAL_GPIO_WritePin(PORT_A_GPIO_Port, PORT_A_Pin, numbers[counter][0]);
	HAL_GPIO_WritePin(PORT_B_GPIO_Port, PORT_B_Pin, numbers[counter][1]);
	HAL_GPIO_WritePin(PORT_C_GPIO_Port, PORT_C_Pin, numbers[counter][2]);
	HAL_GPIO_WritePin(PORT_D_GPIO_Port, PORT_D_Pin, numbers[counter][3]);
	HAL_GPIO_WritePin(PORT_E_GPIO_Port, PORT_E_Pin, numbers[counter][4]);
	HAL_GPIO_WritePin(PORT_F_GPIO_Port, PORT_F_Pin, numbers[counter][5]);
	HAL_GPIO_WritePin(PORT_G_GPIO_Port, PORT_G_Pin, numbers[counter][6]);
}

int altern_disp(uint8_t atual_display){
	HAL_GPIO_WritePin(FIRST_DISP_GPIO_Port, FIRST_DISP_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(SECOND_DISP_GPIO_Port, SECOND_DISP_Pin, GPIO_PIN_RESET);

	switch(atual_display){
		case 1:
			HAL_GPIO_WritePin(FIRST_DISP_GPIO_Port, FIRST_DISP_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(SECOND_DISP_GPIO_Port, SECOND_DISP_Pin, GPIO_PIN_RESET);
			show_dsplay(count3);
			disp = 2;
			break;

		case 2:
			HAL_GPIO_WritePin(SECOND_DISP_GPIO_Port, SECOND_DISP_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(FIRST_DISP_GPIO_Port, FIRST_DISP_Pin, GPIO_PIN_RESET);
			show_dsplay(count2);
			disp = 1;
			break;
	}
	return disp;
}

void btn_functions(void){
  	  /* STATE LED */
  	  HAL_GPIO_WritePin(AUTO_LED_GPIO_Port, AUTO_LED_Pin, auto_count);
  	  HAL_GPIO_WritePin(MANUAL_LED_GPIO_Port, MANUAL_LED_Pin, !auto_count);

	  /* STATE ALTERN */
	  btn_zero = HAL_GPIO_ReadPin(BTN_ZERO_GPIO_Port, BTN_ZERO_Pin);
	  btn_one  = HAL_GPIO_ReadPin(BTN_ONE_GPIO_Port, BTN_ONE_Pin);
	  btn_two  = HAL_GPIO_ReadPin(BTN_TWO_GPIO_Port, BTN_TWO_Pin);

	  /* AUTO COUNT */
	  if (auto_count){
		  ++count;

		  HAL_GPIO_TogglePin(STATE_LED_1_GPIO_Port, STATE_LED_1_Pin);
		  HAL_Delay(10);
		  HAL_GPIO_TogglePin(STATE_LED_1_GPIO_Port, STATE_LED_1_Pin);
		  HAL_Delay(tim);
	  }

	  /* LIMIT */
	  if (count > 9) {
		  count = 0;
		  count2++;

		  if (count2 > 9){
			  count2 = 0;
			  count = 0;
		  }
	  }

	  /* MANUAL COUNT */
	  if (!btn_zero && !flag){
		  HAL_Delay(250);
		  flag = 1;

		  if (!btn_zero){
	  		  aux = manual_count;
	  		  manual_count = auto_count;
	  		  auto_count = aux;
		  }

		  while(!btn_zero){
			  btn_zero = HAL_GPIO_ReadPin(BTN_ZERO_GPIO_Port, BTN_ZERO_Pin);
		  }
	  }

	  /* STATES */
	  if ((!btn_one) && (!auto_count) && (!flag)){
		  HAL_Delay(250);
		  flag = 1;

		  if (!btn_one){
	  		  count++;
		  }

		  while(!btn_one){
			  btn_one = HAL_GPIO_ReadPin(BTN_ONE_GPIO_Port, BTN_ONE_Pin);
		  }
	  }

	  /* PERIOD */
	  if (!btn_two && !flag){
		  HAL_Delay(250);
		  flag = 1;

		  if (!btn_two){
			  if (i <= 3) ++i;
			  else i = 0;

	  		  tim = timers[i];
		  }

		  while(!btn_two){
			  btn_two = HAL_GPIO_ReadPin(BTN_TWO_GPIO_Port, BTN_TWO_Pin);
		  }
	  }

	  if (((btn_zero || btn_one) || btn_two) && flag) flag = 0;
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

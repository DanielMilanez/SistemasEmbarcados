
DAC Simples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f34  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001ff4  08001ff4  00002ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002010  08002010  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002010  08002010  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002010  08002010  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002010  08002010  00003010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002014  08002014  00003014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002018  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08002024  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002024  000040dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000850a  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ef  00000000  00000000  0000c53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0000df30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000734  00000000  00000000  0000e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001368e  00000000  00000000  0000efec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab96  00000000  00000000  0002267a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007890c  00000000  00000000  0002d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5b1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000214c  00000000  00000000  000a5b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  000a7cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001fdc 	.word	0x08001fdc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001fdc 	.word	0x08001fdc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa2b 	bl	8000680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f83d 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f91d 	bl	800046c <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 f8fd 	bl	8000430 <MX_DMA_Init>
  MX_DAC_Init();
 8000236:	f000 f891 	bl	800035c <MX_DAC_Init>
  MX_TIM6_Init();
 800023a:	f000 f8bd 	bl	80003b8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 800023e:	4b17      	ldr	r3, [pc, #92]	@ (800029c <main+0x7c>)
 8000240:	0018      	movs	r0, r3
 8000242:	f001 fda9 	bl	8001d98 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *) sine, 6, DAC_ALIGN_8B_R);
 8000246:	4a16      	ldr	r2, [pc, #88]	@ (80002a0 <main+0x80>)
 8000248:	4816      	ldr	r0, [pc, #88]	@ (80002a4 <main+0x84>)
 800024a:	2308      	movs	r3, #8
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	2306      	movs	r3, #6
 8000250:	2100      	movs	r1, #0
 8000252:	f000 fbeb 	bl	8000a2c <HAL_DAC_Start_DMA>

  sine[0] = 20;
 8000256:	4b12      	ldr	r3, [pc, #72]	@ (80002a0 <main+0x80>)
 8000258:	2214      	movs	r2, #20
 800025a:	801a      	strh	r2, [r3, #0]
  sine[1] = 40;
 800025c:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <main+0x80>)
 800025e:	2228      	movs	r2, #40	@ 0x28
 8000260:	805a      	strh	r2, [r3, #2]
  sine[2] = 60;
 8000262:	4b0f      	ldr	r3, [pc, #60]	@ (80002a0 <main+0x80>)
 8000264:	223c      	movs	r2, #60	@ 0x3c
 8000266:	809a      	strh	r2, [r3, #4]
  sine[3] = 80;
 8000268:	4b0d      	ldr	r3, [pc, #52]	@ (80002a0 <main+0x80>)
 800026a:	2250      	movs	r2, #80	@ 0x50
 800026c:	80da      	strh	r2, [r3, #6]
  sine[4] = 100;
 800026e:	4b0c      	ldr	r3, [pc, #48]	@ (80002a0 <main+0x80>)
 8000270:	2264      	movs	r2, #100	@ 0x64
 8000272:	811a      	strh	r2, [r3, #8]
  sine[5] = 120;
 8000274:	4b0a      	ldr	r3, [pc, #40]	@ (80002a0 <main+0x80>)
 8000276:	2278      	movs	r2, #120	@ 0x78
 8000278:	815a      	strh	r2, [r3, #10]
  sine[6] = 140;
 800027a:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <main+0x80>)
 800027c:	228c      	movs	r2, #140	@ 0x8c
 800027e:	819a      	strh	r2, [r3, #12]
  sine[7] = 180;
 8000280:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <main+0x80>)
 8000282:	22b4      	movs	r2, #180	@ 0xb4
 8000284:	81da      	strh	r2, [r3, #14]
  sine[8] = 200;
 8000286:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <main+0x80>)
 8000288:	22c8      	movs	r2, #200	@ 0xc8
 800028a:	821a      	strh	r2, [r3, #16]
  sine[9] = 220;
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <main+0x80>)
 800028e:	22dc      	movs	r2, #220	@ 0xdc
 8000290:	825a      	strh	r2, [r3, #18]
  sine[10] = 240;
 8000292:	4b03      	ldr	r3, [pc, #12]	@ (80002a0 <main+0x80>)
 8000294:	22f0      	movs	r2, #240	@ 0xf0
 8000296:	829a      	strh	r2, [r3, #20]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000298:	46c0      	nop			@ (mov r8, r8)
 800029a:	e7fd      	b.n	8000298 <main+0x78>
 800029c:	20000080 	.word	0x20000080
 80002a0:	200000c0 	.word	0x200000c0
 80002a4:	20000028 	.word	0x20000028

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b095      	sub	sp, #84	@ 0x54
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2418      	movs	r4, #24
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2338      	movs	r3, #56	@ 0x38
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f001 fe63 	bl	8001f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	0018      	movs	r0, r3
 80002c2:	2314      	movs	r3, #20
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f001 fe5c 	bl	8001f84 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002cc:	4b21      	ldr	r3, [pc, #132]	@ (8000354 <SystemClock_Config+0xac>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a21      	ldr	r2, [pc, #132]	@ (8000358 <SystemClock_Config+0xb0>)
 80002d2:	401a      	ands	r2, r3
 80002d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000354 <SystemClock_Config+0xac>)
 80002d6:	2180      	movs	r1, #128	@ 0x80
 80002d8:	0109      	lsls	r1, r1, #4
 80002da:	430a      	orrs	r2, r1
 80002dc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002de:	0021      	movs	r1, r4
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2202      	movs	r2, #2
 80002e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2201      	movs	r2, #1
 80002ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2210      	movs	r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2202      	movs	r2, #2
 80002f6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2200      	movs	r2, #0
 80002fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2200      	movs	r2, #0
 8000302:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8000304:	187b      	adds	r3, r7, r1
 8000306:	2280      	movs	r2, #128	@ 0x80
 8000308:	0412      	lsls	r2, r2, #16
 800030a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030c:	187b      	adds	r3, r7, r1
 800030e:	0018      	movs	r0, r3
 8000310:	f000 ff70 	bl	80011f4 <HAL_RCC_OscConfig>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000318:	f000 f8be 	bl	8000498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	220f      	movs	r2, #15
 8000320:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2203      	movs	r2, #3
 8000326:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2280      	movs	r2, #128	@ 0x80
 800032c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2100      	movs	r1, #0
 800033e:	0018      	movs	r0, r3
 8000340:	f001 fb1c 	bl	800197c <HAL_RCC_ClockConfig>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000348:	f000 f8a6 	bl	8000498 <Error_Handler>
  }
}
 800034c:	46c0      	nop			@ (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	b015      	add	sp, #84	@ 0x54
 8000352:	bd90      	pop	{r4, r7, pc}
 8000354:	40007000 	.word	0x40007000
 8000358:	ffffe7ff 	.word	0xffffe7ff

0800035c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000362:	003b      	movs	r3, r7
 8000364:	0018      	movs	r0, r3
 8000366:	2308      	movs	r3, #8
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f001 fe0a 	bl	8001f84 <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000370:	4b0f      	ldr	r3, [pc, #60]	@ (80003b0 <MX_DAC_Init+0x54>)
 8000372:	4a10      	ldr	r2, [pc, #64]	@ (80003b4 <MX_DAC_Init+0x58>)
 8000374:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000376:	4b0e      	ldr	r3, [pc, #56]	@ (80003b0 <MX_DAC_Init+0x54>)
 8000378:	0018      	movs	r0, r3
 800037a:	f000 facf 	bl	800091c <HAL_DAC_Init>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8000382:	f000 f889 	bl	8000498 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000386:	003b      	movs	r3, r7
 8000388:	2204      	movs	r2, #4
 800038a:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800038c:	003b      	movs	r3, r7
 800038e:	2200      	movs	r2, #0
 8000390:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000392:	0039      	movs	r1, r7
 8000394:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <MX_DAC_Init+0x54>)
 8000396:	2200      	movs	r2, #0
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fafb 	bl	8000994 <HAL_DAC_ConfigChannel>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 80003a2:	f000 f879 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80003a6:	46c0      	nop			@ (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b002      	add	sp, #8
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	46c0      	nop			@ (mov r8, r8)
 80003b0:	20000028 	.word	0x20000028
 80003b4:	40007400 	.word	0x40007400

080003b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003be:	003b      	movs	r3, r7
 80003c0:	0018      	movs	r0, r3
 80003c2:	2308      	movs	r3, #8
 80003c4:	001a      	movs	r2, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	f001 fddc 	bl	8001f84 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80003cc:	4b15      	ldr	r3, [pc, #84]	@ (8000424 <MX_TIM6_Init+0x6c>)
 80003ce:	4a16      	ldr	r2, [pc, #88]	@ (8000428 <MX_TIM6_Init+0x70>)
 80003d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 80003d2:	4b14      	ldr	r3, [pc, #80]	@ (8000424 <MX_TIM6_Init+0x6c>)
 80003d4:	2207      	movs	r2, #7
 80003d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d8:	4b12      	ldr	r3, [pc, #72]	@ (8000424 <MX_TIM6_Init+0x6c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 80003de:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <MX_TIM6_Init+0x6c>)
 80003e0:	4a12      	ldr	r2, [pc, #72]	@ (800042c <MX_TIM6_Init+0x74>)
 80003e2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000424 <MX_TIM6_Init+0x6c>)
 80003e6:	2280      	movs	r2, #128	@ 0x80
 80003e8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80003ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <MX_TIM6_Init+0x6c>)
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 fc93 	bl	8001d18 <HAL_TIM_Base_Init>
 80003f2:	1e03      	subs	r3, r0, #0
 80003f4:	d001      	beq.n	80003fa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80003f6:	f000 f84f 	bl	8000498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003fa:	003b      	movs	r3, r7
 80003fc:	2220      	movs	r2, #32
 80003fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000400:	003b      	movs	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000406:	003a      	movs	r2, r7
 8000408:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <MX_TIM6_Init+0x6c>)
 800040a:	0011      	movs	r1, r2
 800040c:	0018      	movs	r0, r3
 800040e:	f001 fd61 	bl	8001ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000416:	f000 f83f 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b002      	add	sp, #8
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	20000080 	.word	0x20000080
 8000428:	40001000 	.word	0x40001000
 800042c:	000003e7 	.word	0x000003e7

08000430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000436:	4b0c      	ldr	r3, [pc, #48]	@ (8000468 <MX_DMA_Init+0x38>)
 8000438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800043a:	4b0b      	ldr	r3, [pc, #44]	@ (8000468 <MX_DMA_Init+0x38>)
 800043c:	2101      	movs	r1, #1
 800043e:	430a      	orrs	r2, r1
 8000440:	631a      	str	r2, [r3, #48]	@ 0x30
 8000442:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <MX_DMA_Init+0x38>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000446:	2201      	movs	r2, #1
 8000448:	4013      	ands	r3, r2
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	2100      	movs	r1, #0
 8000452:	200a      	movs	r0, #10
 8000454:	f000 fa30 	bl	80008b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000458:	200a      	movs	r0, #10
 800045a:	f000 fa42 	bl	80008e2 <HAL_NVIC_EnableIRQ>

}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b002      	add	sp, #8
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	40021000 	.word	0x40021000

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b08      	ldr	r3, [pc, #32]	@ (8000494 <MX_GPIO_Init+0x28>)
 8000474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000476:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <MX_GPIO_Init+0x28>)
 8000478:	2101      	movs	r1, #1
 800047a:	430a      	orrs	r2, r1
 800047c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800047e:	4b05      	ldr	r3, [pc, #20]	@ (8000494 <MX_GPIO_Init+0x28>)
 8000480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000482:	2201      	movs	r2, #1
 8000484:	4013      	ands	r3, r2
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	40021000 	.word	0x40021000

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
}
 800049e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a0:	46c0      	nop			@ (mov r8, r8)
 80004a2:	e7fd      	b.n	80004a0 <Error_Handler+0x8>

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a8:	4b07      	ldr	r3, [pc, #28]	@ (80004c8 <HAL_MspInit+0x24>)
 80004aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004ac:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <HAL_MspInit+0x24>)
 80004ae:	2101      	movs	r1, #1
 80004b0:	430a      	orrs	r2, r1
 80004b2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b4:	4b04      	ldr	r3, [pc, #16]	@ (80004c8 <HAL_MspInit+0x24>)
 80004b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80004b8:	4b03      	ldr	r3, [pc, #12]	@ (80004c8 <HAL_MspInit+0x24>)
 80004ba:	2180      	movs	r1, #128	@ 0x80
 80004bc:	0549      	lsls	r1, r1, #21
 80004be:	430a      	orrs	r2, r1
 80004c0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000

080004cc <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b089      	sub	sp, #36	@ 0x24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	240c      	movs	r4, #12
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	0018      	movs	r0, r3
 80004da:	2314      	movs	r3, #20
 80004dc:	001a      	movs	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f001 fd50 	bl	8001f84 <memset>
  if(hdac->Instance==DAC)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a2a      	ldr	r2, [pc, #168]	@ (8000594 <HAL_DAC_MspInit+0xc8>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d14d      	bne.n	800058a <HAL_DAC_MspInit+0xbe>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80004ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000598 <HAL_DAC_MspInit+0xcc>)
 80004f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80004f2:	4b29      	ldr	r3, [pc, #164]	@ (8000598 <HAL_DAC_MspInit+0xcc>)
 80004f4:	2180      	movs	r1, #128	@ 0x80
 80004f6:	0589      	lsls	r1, r1, #22
 80004f8:	430a      	orrs	r2, r1
 80004fa:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	4b26      	ldr	r3, [pc, #152]	@ (8000598 <HAL_DAC_MspInit+0xcc>)
 80004fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000500:	4b25      	ldr	r3, [pc, #148]	@ (8000598 <HAL_DAC_MspInit+0xcc>)
 8000502:	2101      	movs	r1, #1
 8000504:	430a      	orrs	r2, r1
 8000506:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000508:	4b23      	ldr	r3, [pc, #140]	@ (8000598 <HAL_DAC_MspInit+0xcc>)
 800050a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800050c:	2201      	movs	r2, #1
 800050e:	4013      	ands	r3, r2
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2210      	movs	r2, #16
 8000518:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2203      	movs	r2, #3
 800051e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	193b      	adds	r3, r7, r4
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000526:	193a      	adds	r2, r7, r4
 8000528:	23a0      	movs	r3, #160	@ 0xa0
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	0011      	movs	r1, r2
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fcea 	bl	8000f08 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel2;
 8000534:	4b19      	ldr	r3, [pc, #100]	@ (800059c <HAL_DAC_MspInit+0xd0>)
 8000536:	4a1a      	ldr	r2, [pc, #104]	@ (80005a0 <HAL_DAC_MspInit+0xd4>)
 8000538:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_9;
 800053a:	4b18      	ldr	r3, [pc, #96]	@ (800059c <HAL_DAC_MspInit+0xd0>)
 800053c:	2209      	movs	r2, #9
 800053e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000540:	4b16      	ldr	r3, [pc, #88]	@ (800059c <HAL_DAC_MspInit+0xd0>)
 8000542:	2210      	movs	r2, #16
 8000544:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000546:	4b15      	ldr	r3, [pc, #84]	@ (800059c <HAL_DAC_MspInit+0xd0>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800054c:	4b13      	ldr	r3, [pc, #76]	@ (800059c <HAL_DAC_MspInit+0xd0>)
 800054e:	2280      	movs	r2, #128	@ 0x80
 8000550:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000552:	4b12      	ldr	r3, [pc, #72]	@ (800059c <HAL_DAC_MspInit+0xd0>)
 8000554:	2280      	movs	r2, #128	@ 0x80
 8000556:	0052      	lsls	r2, r2, #1
 8000558:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <HAL_DAC_MspInit+0xd0>)
 800055c:	2280      	movs	r2, #128	@ 0x80
 800055e:	00d2      	lsls	r2, r2, #3
 8000560:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000562:	4b0e      	ldr	r3, [pc, #56]	@ (800059c <HAL_DAC_MspInit+0xd0>)
 8000564:	2220      	movs	r2, #32
 8000566:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000568:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <HAL_DAC_MspInit+0xd0>)
 800056a:	2200      	movs	r2, #0
 800056c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 800056e:	4b0b      	ldr	r3, [pc, #44]	@ (800059c <HAL_DAC_MspInit+0xd0>)
 8000570:	0018      	movs	r0, r3
 8000572:	f000 fb0f 	bl	8000b94 <HAL_DMA_Init>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 800057a:	f7ff ff8d 	bl	8000498 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a06      	ldr	r2, [pc, #24]	@ (800059c <HAL_DAC_MspInit+0xd0>)
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	4b05      	ldr	r3, [pc, #20]	@ (800059c <HAL_DAC_MspInit+0xd0>)
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END DAC_MspInit 1 */

  }

}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b009      	add	sp, #36	@ 0x24
 8000590:	bd90      	pop	{r4, r7, pc}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	40007400 	.word	0x40007400
 8000598:	40021000 	.word	0x40021000
 800059c:	20000038 	.word	0x20000038
 80005a0:	4002001c 	.word	0x4002001c

080005a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a06      	ldr	r2, [pc, #24]	@ (80005cc <HAL_TIM_Base_MspInit+0x28>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d105      	bne.n	80005c2 <HAL_TIM_Base_MspInit+0x1e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <HAL_TIM_Base_MspInit+0x2c>)
 80005b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <HAL_TIM_Base_MspInit+0x2c>)
 80005bc:	2110      	movs	r1, #16
 80005be:	430a      	orrs	r2, r1
 80005c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	40001000 	.word	0x40001000
 80005d0:	40021000 	.word	0x40021000

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d8:	46c0      	nop			@ (mov r8, r8)
 80005da:	e7fd      	b.n	80005d8 <NMI_Handler+0x4>

080005dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e0:	46c0      	nop			@ (mov r8, r8)
 80005e2:	e7fd      	b.n	80005e0 <HardFault_Handler+0x4>

080005e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005e8:	46c0      	nop			@ (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005fc:	f000 f894 	bl	8000728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800060c:	4b03      	ldr	r3, [pc, #12]	@ (800061c <DMA1_Channel2_3_IRQHandler+0x14>)
 800060e:	0018      	movs	r0, r3
 8000610:	f000 fb9e 	bl	8000d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000614:	46c0      	nop			@ (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	20000038 	.word	0x20000038

08000620 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800062c:	480d      	ldr	r0, [pc, #52]	@ (8000664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000630:	f7ff fff6 	bl	8000620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480c      	ldr	r0, [pc, #48]	@ (8000668 <LoopForever+0x6>)
  ldr r1, =_edata
 8000636:	490d      	ldr	r1, [pc, #52]	@ (800066c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000638:	4a0d      	ldr	r2, [pc, #52]	@ (8000670 <LoopForever+0xe>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a0a      	ldr	r2, [pc, #40]	@ (8000674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800064c:	4c0a      	ldr	r4, [pc, #40]	@ (8000678 <LoopForever+0x16>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800065a:	f001 fc9b 	bl	8001f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800065e:	f7ff fddf 	bl	8000220 <main>

08000662 <LoopForever>:

LoopForever:
    b LoopForever
 8000662:	e7fe      	b.n	8000662 <LoopForever>
  ldr   r0, =_estack
 8000664:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000670:	08002018 	.word	0x08002018
  ldr r2, =_sbss
 8000674:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000678:	200000dc 	.word	0x200000dc

0800067c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_COMP_IRQHandler>
	...

08000680 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800068c:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <HAL_Init+0x3c>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <HAL_Init+0x3c>)
 8000692:	2140      	movs	r1, #64	@ 0x40
 8000694:	430a      	orrs	r2, r1
 8000696:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000698:	2000      	movs	r0, #0
 800069a:	f000 f811 	bl	80006c0 <HAL_InitTick>
 800069e:	1e03      	subs	r3, r0, #0
 80006a0:	d003      	beq.n	80006aa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	2201      	movs	r2, #1
 80006a6:	701a      	strb	r2, [r3, #0]
 80006a8:	e001      	b.n	80006ae <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006aa:	f7ff fefb 	bl	80004a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
}
 80006b2:	0018      	movs	r0, r3
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b002      	add	sp, #8
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	40022000 	.word	0x40022000

080006c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c8:	4b14      	ldr	r3, [pc, #80]	@ (800071c <HAL_InitTick+0x5c>)
 80006ca:	681c      	ldr	r4, [r3, #0]
 80006cc:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <HAL_InitTick+0x60>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	0019      	movs	r1, r3
 80006d2:	23fa      	movs	r3, #250	@ 0xfa
 80006d4:	0098      	lsls	r0, r3, #2
 80006d6:	f7ff fd17 	bl	8000108 <__udivsi3>
 80006da:	0003      	movs	r3, r0
 80006dc:	0019      	movs	r1, r3
 80006de:	0020      	movs	r0, r4
 80006e0:	f7ff fd12 	bl	8000108 <__udivsi3>
 80006e4:	0003      	movs	r3, r0
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f90b 	bl	8000902 <HAL_SYSTICK_Config>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e00f      	b.n	8000714 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d80b      	bhi.n	8000712 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fa:	6879      	ldr	r1, [r7, #4]
 80006fc:	2301      	movs	r3, #1
 80006fe:	425b      	negs	r3, r3
 8000700:	2200      	movs	r2, #0
 8000702:	0018      	movs	r0, r3
 8000704:	f000 f8d8 	bl	80008b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <HAL_InitTick+0x64>)
 800070a:	687a      	ldr	r2, [r7, #4]
 800070c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800070e:	2300      	movs	r3, #0
 8000710:	e000      	b.n	8000714 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
}
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	b003      	add	sp, #12
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	20000000 	.word	0x20000000
 8000720:	20000008 	.word	0x20000008
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <HAL_IncTick+0x1c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	001a      	movs	r2, r3
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <HAL_IncTick+0x20>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	18d2      	adds	r2, r2, r3
 8000738:	4b03      	ldr	r3, [pc, #12]	@ (8000748 <HAL_IncTick+0x20>)
 800073a:	601a      	str	r2, [r3, #0]
}
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	20000008 	.word	0x20000008
 8000748:	200000d8 	.word	0x200000d8

0800074c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  return uwTick;
 8000750:	4b02      	ldr	r3, [pc, #8]	@ (800075c <HAL_GetTick+0x10>)
 8000752:	681b      	ldr	r3, [r3, #0]
}
 8000754:	0018      	movs	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	200000d8 	.word	0x200000d8

08000760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	0002      	movs	r2, r0
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b7f      	cmp	r3, #127	@ 0x7f
 8000772:	d809      	bhi.n	8000788 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	001a      	movs	r2, r3
 800077a:	231f      	movs	r3, #31
 800077c:	401a      	ands	r2, r3
 800077e:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <__NVIC_EnableIRQ+0x30>)
 8000780:	2101      	movs	r1, #1
 8000782:	4091      	lsls	r1, r2
 8000784:	000a      	movs	r2, r1
 8000786:	601a      	str	r2, [r3, #0]
  }
}
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b002      	add	sp, #8
 800078e:	bd80      	pop	{r7, pc}
 8000790:	e000e100 	.word	0xe000e100

08000794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	0002      	movs	r2, r0
 800079c:	6039      	str	r1, [r7, #0]
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80007a8:	d828      	bhi.n	80007fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000868 <__NVIC_SetPriority+0xd4>)
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b25b      	sxtb	r3, r3
 80007b2:	089b      	lsrs	r3, r3, #2
 80007b4:	33c0      	adds	r3, #192	@ 0xc0
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	589b      	ldr	r3, [r3, r2]
 80007ba:	1dfa      	adds	r2, r7, #7
 80007bc:	7812      	ldrb	r2, [r2, #0]
 80007be:	0011      	movs	r1, r2
 80007c0:	2203      	movs	r2, #3
 80007c2:	400a      	ands	r2, r1
 80007c4:	00d2      	lsls	r2, r2, #3
 80007c6:	21ff      	movs	r1, #255	@ 0xff
 80007c8:	4091      	lsls	r1, r2
 80007ca:	000a      	movs	r2, r1
 80007cc:	43d2      	mvns	r2, r2
 80007ce:	401a      	ands	r2, r3
 80007d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	019b      	lsls	r3, r3, #6
 80007d6:	22ff      	movs	r2, #255	@ 0xff
 80007d8:	401a      	ands	r2, r3
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	0018      	movs	r0, r3
 80007e0:	2303      	movs	r3, #3
 80007e2:	4003      	ands	r3, r0
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e8:	481f      	ldr	r0, [pc, #124]	@ (8000868 <__NVIC_SetPriority+0xd4>)
 80007ea:	1dfb      	adds	r3, r7, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b25b      	sxtb	r3, r3
 80007f0:	089b      	lsrs	r3, r3, #2
 80007f2:	430a      	orrs	r2, r1
 80007f4:	33c0      	adds	r3, #192	@ 0xc0
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007fa:	e031      	b.n	8000860 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007fc:	4a1b      	ldr	r2, [pc, #108]	@ (800086c <__NVIC_SetPriority+0xd8>)
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	0019      	movs	r1, r3
 8000804:	230f      	movs	r3, #15
 8000806:	400b      	ands	r3, r1
 8000808:	3b08      	subs	r3, #8
 800080a:	089b      	lsrs	r3, r3, #2
 800080c:	3306      	adds	r3, #6
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	18d3      	adds	r3, r2, r3
 8000812:	3304      	adds	r3, #4
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	1dfa      	adds	r2, r7, #7
 8000818:	7812      	ldrb	r2, [r2, #0]
 800081a:	0011      	movs	r1, r2
 800081c:	2203      	movs	r2, #3
 800081e:	400a      	ands	r2, r1
 8000820:	00d2      	lsls	r2, r2, #3
 8000822:	21ff      	movs	r1, #255	@ 0xff
 8000824:	4091      	lsls	r1, r2
 8000826:	000a      	movs	r2, r1
 8000828:	43d2      	mvns	r2, r2
 800082a:	401a      	ands	r2, r3
 800082c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	019b      	lsls	r3, r3, #6
 8000832:	22ff      	movs	r2, #255	@ 0xff
 8000834:	401a      	ands	r2, r3
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	0018      	movs	r0, r3
 800083c:	2303      	movs	r3, #3
 800083e:	4003      	ands	r3, r0
 8000840:	00db      	lsls	r3, r3, #3
 8000842:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <__NVIC_SetPriority+0xd8>)
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	001c      	movs	r4, r3
 800084c:	230f      	movs	r3, #15
 800084e:	4023      	ands	r3, r4
 8000850:	3b08      	subs	r3, #8
 8000852:	089b      	lsrs	r3, r3, #2
 8000854:	430a      	orrs	r2, r1
 8000856:	3306      	adds	r3, #6
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	18c3      	adds	r3, r0, r3
 800085c:	3304      	adds	r3, #4
 800085e:	601a      	str	r2, [r3, #0]
}
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b003      	add	sp, #12
 8000866:	bd90      	pop	{r4, r7, pc}
 8000868:	e000e100 	.word	0xe000e100
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	1e5a      	subs	r2, r3, #1
 800087c:	2380      	movs	r3, #128	@ 0x80
 800087e:	045b      	lsls	r3, r3, #17
 8000880:	429a      	cmp	r2, r3
 8000882:	d301      	bcc.n	8000888 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000884:	2301      	movs	r3, #1
 8000886:	e010      	b.n	80008aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <SysTick_Config+0x44>)
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	3a01      	subs	r2, #1
 800088e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000890:	2301      	movs	r3, #1
 8000892:	425b      	negs	r3, r3
 8000894:	2103      	movs	r1, #3
 8000896:	0018      	movs	r0, r3
 8000898:	f7ff ff7c 	bl	8000794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <SysTick_Config+0x44>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	4b04      	ldr	r3, [pc, #16]	@ (80008b4 <SysTick_Config+0x44>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	0018      	movs	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b002      	add	sp, #8
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
 80008c2:	210f      	movs	r1, #15
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	1c02      	adds	r2, r0, #0
 80008c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	0011      	movs	r1, r2
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff ff5d 	bl	8000794 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b004      	add	sp, #16
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	0002      	movs	r2, r0
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff ff33 	bl	8000760 <__NVIC_EnableIRQ>
}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	0018      	movs	r0, r3
 800090e:	f7ff ffaf 	bl	8000870 <SysTick_Config>
 8000912:	0003      	movs	r3, r0
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	b002      	add	sp, #8
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e015      	b.n	800095a <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	791b      	ldrb	r3, [r3, #4]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d106      	bne.n	8000946 <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff fdc3 	bl	80004cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2202      	movs	r2, #2
 800094a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2201      	movs	r2, #1
 8000956:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000958:	2300      	movs	r3, #0
}
 800095a:	0018      	movs	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	b002      	add	sp, #8
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b002      	add	sp, #8
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	795b      	ldrb	r3, [r3, #5]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d101      	bne.n	80009b4 <HAL_DAC_ConfigChannel+0x20>
 80009b0:	2302      	movs	r3, #2
 80009b2:	e035      	b.n	8000a20 <HAL_DAC_ConfigChannel+0x8c>
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2201      	movs	r2, #1
 80009b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2202      	movs	r2, #2
 80009be:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80009c8:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <HAL_DAC_ConfigChannel+0x94>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	409a      	lsls	r2, r3
 80009ce:	0013      	movs	r3, r2
 80009d0:	43da      	mvns	r2, r3
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	4013      	ands	r3, r2
 80009d6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	409a      	lsls	r2, r3
 80009ea:	0013      	movs	r3, r2
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	21c0      	movs	r1, #192	@ 0xc0
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4099      	lsls	r1, r3
 8000a06:	000b      	movs	r3, r1
 8000a08:	43d9      	mvns	r1, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	400a      	ands	r2, r1
 8000a10:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2201      	movs	r2, #1
 8000a16:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b006      	add	sp, #24
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	00000ffe 	.word	0x00000ffe

08000a2c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8000a2c:	b5b0      	push	{r4, r5, r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	795b      	ldrb	r3, [r3, #5]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d101      	bne.n	8000a4a <HAL_DAC_Start_DMA+0x1e>
 8000a46:	2302      	movs	r3, #2
 8000a48:	e05f      	b.n	8000b0a <HAL_DAC_Start_DMA+0xde>
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2202      	movs	r2, #2
 8000a54:	711a      	strb	r2, [r3, #4]

  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8000b14 <HAL_DAC_Start_DMA+0xe8>)
 8000a5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	4a2d      	ldr	r2, [pc, #180]	@ (8000b18 <HAL_DAC_Start_DMA+0xec>)
 8000a64:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8000b1c <HAL_DAC_Start_DMA+0xf0>)
 8000a6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2180      	movs	r1, #128	@ 0x80
 8000a7a:	0149      	lsls	r1, r1, #5
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]
     
  /* Case of use of channel 1 */
  switch(Alignment)
 8000a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_DAC_Start_DMA+0x62>
 8000a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a88:	2b04      	cmp	r3, #4
 8000a8a:	d005      	beq.n	8000a98 <HAL_DAC_Start_DMA+0x6c>
 8000a8c:	e009      	b.n	8000aa2 <HAL_DAC_Start_DMA+0x76>
  {
    case DAC_ALIGN_12B_R:
      /* Get DHR12R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3308      	adds	r3, #8
 8000a94:	617b      	str	r3, [r7, #20]
      break;
 8000a96:	e009      	b.n	8000aac <HAL_DAC_Start_DMA+0x80>
    case DAC_ALIGN_12B_L:
      /* Get DHR12L1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	330c      	adds	r3, #12
 8000a9e:	617b      	str	r3, [r7, #20]
      break;
 8000aa0:	e004      	b.n	8000aac <HAL_DAC_Start_DMA+0x80>
    default:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	3310      	adds	r3, #16
 8000aa8:	617b      	str	r3, [r7, #20]
      break;
 8000aaa:	46c0      	nop			@ (mov r8, r8)
  }
  UNUSED(tmpreg);   /* avoid warning on tmpreg affectation */

  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2180      	movs	r1, #128	@ 0x80
 8000ab8:	0189      	lsls	r1, r1, #6
 8000aba:	430a      	orrs	r2, r1
 8000abc:	601a      	str	r2, [r3, #0]
  
  /* Enable the DMA Stream */
  status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6898      	ldr	r0, [r3, #8]
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	2513      	movs	r5, #19
 8000ac6:	197c      	adds	r4, r7, r5
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	f000 f8da 	bl	8000c84 <HAL_DMA_Start_IT>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	7023      	strb	r3, [r4, #0]
  
  /* Enable the Peripharal */
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000ada:	197b      	adds	r3, r7, r5
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10a      	bne.n	8000af8 <HAL_DAC_Start_DMA+0xcc>
  {
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6819      	ldr	r1, [r3, #0]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	409a      	lsls	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	430a      	orrs	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	e005      	b.n	8000b04 <HAL_DAC_Start_DMA+0xd8>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	2204      	movs	r2, #4
 8000afe:	431a      	orrs	r2, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	60da      	str	r2, [r3, #12]
  }
  
  /* Return function status */
  return status;
 8000b04:	2313      	movs	r3, #19
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	781b      	ldrb	r3, [r3, #0]
}
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b006      	add	sp, #24
 8000b10:	bdb0      	pop	{r4, r5, r7, pc}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	08000b21 	.word	0x08000b21
 8000b18:	08000b45 	.word	0x08000b45
 8000b1c:	08000b63 	.word	0x08000b63

08000b20 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2c:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff ff16 	bl	8000962 <HAL_DAC_ConvCpltCallbackCh1>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	711a      	strb	r2, [r3, #4]
}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b004      	add	sp, #16
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff ff0c 	bl	8000972 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  
}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b004      	add	sp, #16
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b084      	sub	sp, #16
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b6e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	2204      	movs	r2, #4
 8000b76:	431a      	orrs	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	60da      	str	r2, [r3, #12]

  HAL_DAC_ErrorCallbackCh1(hdac);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff feff 	bl	8000982 <HAL_DAC_ErrorCallbackCh1>

  hdac->State= HAL_DAC_STATE_READY;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2201      	movs	r2, #1
 8000b88:	711a      	strb	r2, [r3, #4]
}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b004      	add	sp, #16
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e061      	b.n	8000c6a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a32      	ldr	r2, [pc, #200]	@ (8000c74 <HAL_DMA_Init+0xe0>)
 8000bac:	4694      	mov	ip, r2
 8000bae:	4463      	add	r3, ip
 8000bb0:	2114      	movs	r1, #20
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff faa8 	bl	8000108 <__udivsi3>
 8000bb8:	0003      	movs	r3, r0
 8000bba:	009a      	lsls	r2, r3, #2
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8000c78 <HAL_DMA_Init+0xe4>)
 8000bc4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2225      	movs	r2, #37	@ 0x25
 8000bca:	2102      	movs	r1, #2
 8000bcc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4a28      	ldr	r2, [pc, #160]	@ (8000c7c <HAL_DMA_Init+0xe8>)
 8000bda:	4013      	ands	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000be6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a1b      	ldr	r3, [r3, #32]
 8000c04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	2380      	movs	r3, #128	@ 0x80
 8000c1a:	01db      	lsls	r3, r3, #7
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d018      	beq.n	8000c52 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000c20:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <HAL_DMA_Init+0xec>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c28:	211c      	movs	r1, #28
 8000c2a:	400b      	ands	r3, r1
 8000c2c:	210f      	movs	r1, #15
 8000c2e:	4099      	lsls	r1, r3
 8000c30:	000b      	movs	r3, r1
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <HAL_DMA_Init+0xec>)
 8000c36:	400a      	ands	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <HAL_DMA_Init+0xec>)
 8000c3c:	6819      	ldr	r1, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	201c      	movs	r0, #28
 8000c48:	4003      	ands	r3, r0
 8000c4a:	409a      	lsls	r2, r3
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <HAL_DMA_Init+0xec>)
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2225      	movs	r2, #37	@ 0x25
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2224      	movs	r2, #36	@ 0x24
 8000c64:	2100      	movs	r1, #0
 8000c66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	bffdfff8 	.word	0xbffdfff8
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	ffff800f 	.word	0xffff800f
 8000c80:	400200a8 	.word	0x400200a8

08000c84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c92:	2317      	movs	r3, #23
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2224      	movs	r2, #36	@ 0x24
 8000c9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d101      	bne.n	8000ca8 <HAL_DMA_Start_IT+0x24>
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	e04f      	b.n	8000d48 <HAL_DMA_Start_IT+0xc4>
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2224      	movs	r2, #36	@ 0x24
 8000cac:	2101      	movs	r1, #1
 8000cae:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2225      	movs	r2, #37	@ 0x25
 8000cb4:	5c9b      	ldrb	r3, [r3, r2]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d13a      	bne.n	8000d32 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2225      	movs	r2, #37	@ 0x25
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	438a      	bics	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f000 f8e3 	bl	8000eac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d008      	beq.n	8000d00 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	210e      	movs	r1, #14
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	e00f      	b.n	8000d20 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2104      	movs	r1, #4
 8000d0c:	438a      	bics	r2, r1
 8000d0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	210a      	movs	r1, #10
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	e007      	b.n	8000d42 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2224      	movs	r2, #36	@ 0x24
 8000d36:	2100      	movs	r1, #0
 8000d38:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d3a:	2317      	movs	r3, #23
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	2202      	movs	r2, #2
 8000d40:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000d42:	2317      	movs	r3, #23
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	781b      	ldrb	r3, [r3, #0]
}
 8000d48:	0018      	movs	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b006      	add	sp, #24
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6c:	221c      	movs	r2, #28
 8000d6e:	4013      	ands	r3, r2
 8000d70:	2204      	movs	r2, #4
 8000d72:	409a      	lsls	r2, r3
 8000d74:	0013      	movs	r3, r2
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	d026      	beq.n	8000dca <HAL_DMA_IRQHandler+0x7a>
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	2204      	movs	r2, #4
 8000d80:	4013      	ands	r3, r2
 8000d82:	d022      	beq.n	8000dca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	d107      	bne.n	8000da0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	438a      	bics	r2, r1
 8000d9e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da4:	221c      	movs	r2, #28
 8000da6:	401a      	ands	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	2104      	movs	r1, #4
 8000dae:	4091      	lsls	r1, r2
 8000db0:	000a      	movs	r2, r1
 8000db2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d100      	bne.n	8000dbe <HAL_DMA_IRQHandler+0x6e>
 8000dbc:	e071      	b.n	8000ea2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	0010      	movs	r0, r2
 8000dc6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8000dc8:	e06b      	b.n	8000ea2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	221c      	movs	r2, #28
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	0013      	movs	r3, r2
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d02d      	beq.n	8000e3a <HAL_DMA_IRQHandler+0xea>
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	2202      	movs	r2, #2
 8000de2:	4013      	ands	r3, r2
 8000de4:	d029      	beq.n	8000e3a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2220      	movs	r2, #32
 8000dee:	4013      	ands	r3, r2
 8000df0:	d10b      	bne.n	8000e0a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	210a      	movs	r1, #10
 8000dfe:	438a      	bics	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2225      	movs	r2, #37	@ 0x25
 8000e06:	2101      	movs	r1, #1
 8000e08:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	221c      	movs	r2, #28
 8000e10:	401a      	ands	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	2102      	movs	r1, #2
 8000e18:	4091      	lsls	r1, r2
 8000e1a:	000a      	movs	r2, r1
 8000e1c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2224      	movs	r2, #36	@ 0x24
 8000e22:	2100      	movs	r1, #0
 8000e24:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d039      	beq.n	8000ea2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	0010      	movs	r0, r2
 8000e36:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e38:	e033      	b.n	8000ea2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3e:	221c      	movs	r2, #28
 8000e40:	4013      	ands	r3, r2
 8000e42:	2208      	movs	r2, #8
 8000e44:	409a      	lsls	r2, r3
 8000e46:	0013      	movs	r3, r2
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d02a      	beq.n	8000ea4 <HAL_DMA_IRQHandler+0x154>
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	2208      	movs	r2, #8
 8000e52:	4013      	ands	r3, r2
 8000e54:	d026      	beq.n	8000ea4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	210e      	movs	r1, #14
 8000e62:	438a      	bics	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6a:	221c      	movs	r2, #28
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	2101      	movs	r1, #1
 8000e74:	4091      	lsls	r1, r2
 8000e76:	000a      	movs	r2, r1
 8000e78:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2225      	movs	r2, #37	@ 0x25
 8000e84:	2101      	movs	r1, #1
 8000e86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2224      	movs	r2, #36	@ 0x24
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d005      	beq.n	8000ea4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	46c0      	nop			@ (mov r8, r8)
}
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b004      	add	sp, #16
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	221c      	movs	r2, #28
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	4091      	lsls	r1, r2
 8000eca:	000a      	movs	r2, r1
 8000ecc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	2b10      	cmp	r3, #16
 8000edc:	d108      	bne.n	8000ef0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000eee:	e007      	b.n	8000f00 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	60da      	str	r2, [r3, #12]
}
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b004      	add	sp, #16
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f1e:	e14f      	b.n	80011c0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2101      	movs	r1, #1
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	4091      	lsls	r1, r2
 8000f2a:	000a      	movs	r2, r1
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d100      	bne.n	8000f38 <HAL_GPIO_Init+0x30>
 8000f36:	e140      	b.n	80011ba <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d005      	beq.n	8000f50 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2203      	movs	r2, #3
 8000f4a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d130      	bne.n	8000fb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	0013      	movs	r3, r2
 8000f60:	43da      	mvns	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	409a      	lsls	r2, r3
 8000f72:	0013      	movs	r3, r2
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f86:	2201      	movs	r2, #1
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	091b      	lsrs	r3, r3, #4
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d017      	beq.n	8000fee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d123      	bne.n	8001042 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	0092      	lsls	r2, r2, #2
 8001004:	58d3      	ldr	r3, [r2, r3]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2207      	movs	r2, #7
 800100c:	4013      	ands	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	691a      	ldr	r2, [r3, #16]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2107      	movs	r1, #7
 8001026:	400b      	ands	r3, r1
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	08da      	lsrs	r2, r3, #3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3208      	adds	r2, #8
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	6939      	ldr	r1, [r7, #16]
 8001040:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	43da      	mvns	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2203      	movs	r2, #3
 8001060:	401a      	ands	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	409a      	lsls	r2, r3
 8001068:	0013      	movs	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	23c0      	movs	r3, #192	@ 0xc0
 800107c:	029b      	lsls	r3, r3, #10
 800107e:	4013      	ands	r3, r2
 8001080:	d100      	bne.n	8001084 <HAL_GPIO_Init+0x17c>
 8001082:	e09a      	b.n	80011ba <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001084:	4b54      	ldr	r3, [pc, #336]	@ (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001088:	4b53      	ldr	r3, [pc, #332]	@ (80011d8 <HAL_GPIO_Init+0x2d0>)
 800108a:	2101      	movs	r1, #1
 800108c:	430a      	orrs	r2, r1
 800108e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001090:	4a52      	ldr	r2, [pc, #328]	@ (80011dc <HAL_GPIO_Init+0x2d4>)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	589b      	ldr	r3, [r3, r2]
 800109c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2203      	movs	r2, #3
 80010a2:	4013      	ands	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	409a      	lsls	r2, r3
 80010aa:	0013      	movs	r3, r2
 80010ac:	43da      	mvns	r2, r3
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	23a0      	movs	r3, #160	@ 0xa0
 80010b8:	05db      	lsls	r3, r3, #23
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x1ea>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a47      	ldr	r2, [pc, #284]	@ (80011e0 <HAL_GPIO_Init+0x2d8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x1e6>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a46      	ldr	r2, [pc, #280]	@ (80011e4 <HAL_GPIO_Init+0x2dc>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x1e2>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a45      	ldr	r2, [pc, #276]	@ (80011e8 <HAL_GPIO_Init+0x2e0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x1de>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a44      	ldr	r2, [pc, #272]	@ (80011ec <HAL_GPIO_Init+0x2e4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x1da>
 80010de:	2305      	movs	r3, #5
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010e2:	2306      	movs	r3, #6
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010f2:	2300      	movs	r3, #0
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	2103      	movs	r1, #3
 80010f8:	400a      	ands	r2, r1
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001104:	4935      	ldr	r1, [pc, #212]	@ (80011dc <HAL_GPIO_Init+0x2d4>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001112:	4b37      	ldr	r3, [pc, #220]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	43da      	mvns	r2, r3
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	2380      	movs	r3, #128	@ 0x80
 8001128:	035b      	lsls	r3, r3, #13
 800112a:	4013      	ands	r3, r2
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001136:	4b2e      	ldr	r3, [pc, #184]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800113c:	4b2c      	ldr	r3, [pc, #176]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43da      	mvns	r2, r3
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	2380      	movs	r3, #128	@ 0x80
 8001152:	039b      	lsls	r3, r3, #14
 8001154:	4013      	ands	r3, r2
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001160:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001166:	4b22      	ldr	r3, [pc, #136]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43da      	mvns	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	029b      	lsls	r3, r3, #10
 800117e:	4013      	ands	r3, r2
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800118a:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001190:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43da      	mvns	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	2380      	movs	r3, #128	@ 0x80
 80011a6:	025b      	lsls	r3, r3, #9
 80011a8:	4013      	ands	r3, r2
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	40da      	lsrs	r2, r3
 80011c8:	1e13      	subs	r3, r2, #0
 80011ca:	d000      	beq.n	80011ce <HAL_GPIO_Init+0x2c6>
 80011cc:	e6a8      	b.n	8000f20 <HAL_GPIO_Init+0x18>
  }
}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	46c0      	nop			@ (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b006      	add	sp, #24
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000
 80011e0:	50000400 	.word	0x50000400
 80011e4:	50000800 	.word	0x50000800
 80011e8:	50000c00 	.word	0x50000c00
 80011ec:	50001c00 	.word	0x50001c00
 80011f0:	40010400 	.word	0x40010400

080011f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b5b0      	push	{r4, r5, r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d102      	bne.n	8001208 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	f000 fbaf 	bl	8001966 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001208:	4bcf      	ldr	r3, [pc, #828]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	220c      	movs	r2, #12
 800120e:	4013      	ands	r3, r2
 8001210:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001212:	4bcd      	ldr	r3, [pc, #820]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	2380      	movs	r3, #128	@ 0x80
 8001218:	025b      	lsls	r3, r3, #9
 800121a:	4013      	ands	r3, r2
 800121c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2201      	movs	r2, #1
 8001224:	4013      	ands	r3, r2
 8001226:	d100      	bne.n	800122a <HAL_RCC_OscConfig+0x36>
 8001228:	e07e      	b.n	8001328 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d007      	beq.n	8001240 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	2b0c      	cmp	r3, #12
 8001234:	d112      	bne.n	800125c <HAL_RCC_OscConfig+0x68>
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	2380      	movs	r3, #128	@ 0x80
 800123a:	025b      	lsls	r3, r3, #9
 800123c:	429a      	cmp	r2, r3
 800123e:	d10d      	bne.n	800125c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	4bc1      	ldr	r3, [pc, #772]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	029b      	lsls	r3, r3, #10
 8001248:	4013      	ands	r3, r2
 800124a:	d100      	bne.n	800124e <HAL_RCC_OscConfig+0x5a>
 800124c:	e06b      	b.n	8001326 <HAL_RCC_OscConfig+0x132>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d167      	bne.n	8001326 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	f000 fb85 	bl	8001966 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	2380      	movs	r3, #128	@ 0x80
 8001262:	025b      	lsls	r3, r3, #9
 8001264:	429a      	cmp	r2, r3
 8001266:	d107      	bne.n	8001278 <HAL_RCC_OscConfig+0x84>
 8001268:	4bb7      	ldr	r3, [pc, #732]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4bb6      	ldr	r3, [pc, #728]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 800126e:	2180      	movs	r1, #128	@ 0x80
 8001270:	0249      	lsls	r1, r1, #9
 8001272:	430a      	orrs	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e027      	b.n	80012c8 <HAL_RCC_OscConfig+0xd4>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	23a0      	movs	r3, #160	@ 0xa0
 800127e:	02db      	lsls	r3, r3, #11
 8001280:	429a      	cmp	r2, r3
 8001282:	d10e      	bne.n	80012a2 <HAL_RCC_OscConfig+0xae>
 8001284:	4bb0      	ldr	r3, [pc, #704]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4baf      	ldr	r3, [pc, #700]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 800128a:	2180      	movs	r1, #128	@ 0x80
 800128c:	02c9      	lsls	r1, r1, #11
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	4bad      	ldr	r3, [pc, #692]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4bac      	ldr	r3, [pc, #688]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001298:	2180      	movs	r1, #128	@ 0x80
 800129a:	0249      	lsls	r1, r1, #9
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e012      	b.n	80012c8 <HAL_RCC_OscConfig+0xd4>
 80012a2:	4ba9      	ldr	r3, [pc, #676]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4ba8      	ldr	r3, [pc, #672]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 80012a8:	49a8      	ldr	r1, [pc, #672]	@ (800154c <HAL_RCC_OscConfig+0x358>)
 80012aa:	400a      	ands	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	4ba6      	ldr	r3, [pc, #664]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2380      	movs	r3, #128	@ 0x80
 80012b4:	025b      	lsls	r3, r3, #9
 80012b6:	4013      	ands	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4ba2      	ldr	r3, [pc, #648]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4ba1      	ldr	r3, [pc, #644]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 80012c2:	49a3      	ldr	r1, [pc, #652]	@ (8001550 <HAL_RCC_OscConfig+0x35c>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d015      	beq.n	80012fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fa3c 	bl	800074c <HAL_GetTick>
 80012d4:	0003      	movs	r3, r0
 80012d6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012d8:	e009      	b.n	80012ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012da:	f7ff fa37 	bl	800074c <HAL_GetTick>
 80012de:	0002      	movs	r2, r0
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b64      	cmp	r3, #100	@ 0x64
 80012e6:	d902      	bls.n	80012ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	f000 fb3c 	bl	8001966 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ee:	4b96      	ldr	r3, [pc, #600]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	2380      	movs	r3, #128	@ 0x80
 80012f4:	029b      	lsls	r3, r3, #10
 80012f6:	4013      	ands	r3, r2
 80012f8:	d0ef      	beq.n	80012da <HAL_RCC_OscConfig+0xe6>
 80012fa:	e015      	b.n	8001328 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fa26 	bl	800074c <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001306:	f7ff fa21 	bl	800074c <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b64      	cmp	r3, #100	@ 0x64
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e326      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001318:	4b8b      	ldr	r3, [pc, #556]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	4013      	ands	r3, r2
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x112>
 8001324:	e000      	b.n	8001328 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2202      	movs	r2, #2
 800132e:	4013      	ands	r3, r2
 8001330:	d100      	bne.n	8001334 <HAL_RCC_OscConfig+0x140>
 8001332:	e08b      	b.n	800144c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	2b04      	cmp	r3, #4
 800133e:	d005      	beq.n	800134c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	2b0c      	cmp	r3, #12
 8001344:	d13e      	bne.n	80013c4 <HAL_RCC_OscConfig+0x1d0>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d13b      	bne.n	80013c4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800134c:	4b7e      	ldr	r3, [pc, #504]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2204      	movs	r2, #4
 8001352:	4013      	ands	r3, r2
 8001354:	d004      	beq.n	8001360 <HAL_RCC_OscConfig+0x16c>
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e302      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001360:	4b79      	ldr	r3, [pc, #484]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4a7b      	ldr	r2, [pc, #492]	@ (8001554 <HAL_RCC_OscConfig+0x360>)
 8001366:	4013      	ands	r3, r2
 8001368:	0019      	movs	r1, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	021a      	lsls	r2, r3, #8
 8001370:	4b75      	ldr	r3, [pc, #468]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001372:	430a      	orrs	r2, r1
 8001374:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001376:	4b74      	ldr	r3, [pc, #464]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2209      	movs	r2, #9
 800137c:	4393      	bics	r3, r2
 800137e:	0019      	movs	r1, r3
 8001380:	4b71      	ldr	r3, [pc, #452]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001388:	f000 fc40 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 800138c:	0001      	movs	r1, r0
 800138e:	4b6e      	ldr	r3, [pc, #440]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	220f      	movs	r2, #15
 8001396:	4013      	ands	r3, r2
 8001398:	4a6f      	ldr	r2, [pc, #444]	@ (8001558 <HAL_RCC_OscConfig+0x364>)
 800139a:	5cd3      	ldrb	r3, [r2, r3]
 800139c:	000a      	movs	r2, r1
 800139e:	40da      	lsrs	r2, r3
 80013a0:	4b6e      	ldr	r3, [pc, #440]	@ (800155c <HAL_RCC_OscConfig+0x368>)
 80013a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001560 <HAL_RCC_OscConfig+0x36c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2513      	movs	r5, #19
 80013aa:	197c      	adds	r4, r7, r5
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff f987 	bl	80006c0 <HAL_InitTick>
 80013b2:	0003      	movs	r3, r0
 80013b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013b6:	197b      	adds	r3, r7, r5
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d046      	beq.n	800144c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80013be:	197b      	adds	r3, r7, r5
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	e2d0      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d027      	beq.n	800141a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2209      	movs	r2, #9
 80013d0:	4393      	bics	r3, r2
 80013d2:	0019      	movs	r1, r3
 80013d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff f9b6 	bl	800074c <HAL_GetTick>
 80013e0:	0003      	movs	r3, r0
 80013e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e6:	f7ff f9b1 	bl	800074c <HAL_GetTick>
 80013ea:	0002      	movs	r2, r0
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e2b6      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013f8:	4b53      	ldr	r3, [pc, #332]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2204      	movs	r2, #4
 80013fe:	4013      	ands	r3, r2
 8001400:	d0f1      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001402:	4b51      	ldr	r3, [pc, #324]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a53      	ldr	r2, [pc, #332]	@ (8001554 <HAL_RCC_OscConfig+0x360>)
 8001408:	4013      	ands	r3, r2
 800140a:	0019      	movs	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	021a      	lsls	r2, r3, #8
 8001412:	4b4d      	ldr	r3, [pc, #308]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001414:	430a      	orrs	r2, r1
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	e018      	b.n	800144c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141a:	4b4b      	ldr	r3, [pc, #300]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b4a      	ldr	r3, [pc, #296]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001420:	2101      	movs	r1, #1
 8001422:	438a      	bics	r2, r1
 8001424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001426:	f7ff f991 	bl	800074c <HAL_GetTick>
 800142a:	0003      	movs	r3, r0
 800142c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001430:	f7ff f98c 	bl	800074c <HAL_GetTick>
 8001434:	0002      	movs	r2, r0
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e291      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001442:	4b41      	ldr	r3, [pc, #260]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2204      	movs	r2, #4
 8001448:	4013      	ands	r3, r2
 800144a:	d1f1      	bne.n	8001430 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2210      	movs	r2, #16
 8001452:	4013      	ands	r3, r2
 8001454:	d100      	bne.n	8001458 <HAL_RCC_OscConfig+0x264>
 8001456:	e0a1      	b.n	800159c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d140      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800145e:	4b3a      	ldr	r3, [pc, #232]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2380      	movs	r3, #128	@ 0x80
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4013      	ands	r3, r2
 8001468:	d005      	beq.n	8001476 <HAL_RCC_OscConfig+0x282>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e277      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001476:	4b34      	ldr	r3, [pc, #208]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4a3a      	ldr	r2, [pc, #232]	@ (8001564 <HAL_RCC_OscConfig+0x370>)
 800147c:	4013      	ands	r3, r2
 800147e:	0019      	movs	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001484:	4b30      	ldr	r3, [pc, #192]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800148a:	4b2f      	ldr	r3, [pc, #188]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	0a19      	lsrs	r1, r3, #8
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	061a      	lsls	r2, r3, #24
 8001498:	4b2b      	ldr	r3, [pc, #172]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 800149a:	430a      	orrs	r2, r1
 800149c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a2:	0b5b      	lsrs	r3, r3, #13
 80014a4:	3301      	adds	r3, #1
 80014a6:	2280      	movs	r2, #128	@ 0x80
 80014a8:	0212      	lsls	r2, r2, #8
 80014aa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014ac:	4b26      	ldr	r3, [pc, #152]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	210f      	movs	r1, #15
 80014b4:	400b      	ands	r3, r1
 80014b6:	4928      	ldr	r1, [pc, #160]	@ (8001558 <HAL_RCC_OscConfig+0x364>)
 80014b8:	5ccb      	ldrb	r3, [r1, r3]
 80014ba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014bc:	4b27      	ldr	r3, [pc, #156]	@ (800155c <HAL_RCC_OscConfig+0x368>)
 80014be:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014c0:	4b27      	ldr	r3, [pc, #156]	@ (8001560 <HAL_RCC_OscConfig+0x36c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2513      	movs	r5, #19
 80014c6:	197c      	adds	r4, r7, r5
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff f8f9 	bl	80006c0 <HAL_InitTick>
 80014ce:	0003      	movs	r3, r0
 80014d0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014d2:	197b      	adds	r3, r7, r5
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d060      	beq.n	800159c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80014da:	197b      	adds	r3, r7, r5
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	e242      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d03f      	beq.n	8001568 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014e8:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 80014ee:	2180      	movs	r1, #128	@ 0x80
 80014f0:	0049      	lsls	r1, r1, #1
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f6:	f7ff f929 	bl	800074c <HAL_GetTick>
 80014fa:	0003      	movs	r3, r0
 80014fc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001500:	f7ff f924 	bl	800074c <HAL_GetTick>
 8001504:	0002      	movs	r2, r0
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e229      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001512:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	2380      	movs	r3, #128	@ 0x80
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4013      	ands	r3, r2
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4a10      	ldr	r2, [pc, #64]	@ (8001564 <HAL_RCC_OscConfig+0x370>)
 8001524:	4013      	ands	r3, r2
 8001526:	0019      	movs	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 800152e:	430a      	orrs	r2, r1
 8001530:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001532:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	0a19      	lsrs	r1, r3, #8
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	061a      	lsls	r2, r3, #24
 8001540:	4b01      	ldr	r3, [pc, #4]	@ (8001548 <HAL_RCC_OscConfig+0x354>)
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	e029      	b.n	800159c <HAL_RCC_OscConfig+0x3a8>
 8001548:	40021000 	.word	0x40021000
 800154c:	fffeffff 	.word	0xfffeffff
 8001550:	fffbffff 	.word	0xfffbffff
 8001554:	ffffe0ff 	.word	0xffffe0ff
 8001558:	08001ff4 	.word	0x08001ff4
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004
 8001564:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001568:	4bbd      	ldr	r3, [pc, #756]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4bbc      	ldr	r3, [pc, #752]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 800156e:	49bd      	ldr	r1, [pc, #756]	@ (8001864 <HAL_RCC_OscConfig+0x670>)
 8001570:	400a      	ands	r2, r1
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff f8ea 	bl	800074c <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800157e:	f7ff f8e5 	bl	800074c <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e1ea      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001590:	4bb3      	ldr	r3, [pc, #716]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4013      	ands	r3, r2
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2208      	movs	r2, #8
 80015a2:	4013      	ands	r3, r2
 80015a4:	d036      	beq.n	8001614 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d019      	beq.n	80015e2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ae:	4bac      	ldr	r3, [pc, #688]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80015b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015b2:	4bab      	ldr	r3, [pc, #684]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80015b4:	2101      	movs	r1, #1
 80015b6:	430a      	orrs	r2, r1
 80015b8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ba:	f7ff f8c7 	bl	800074c <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c4:	f7ff f8c2 	bl	800074c <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e1c7      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015d6:	4ba2      	ldr	r3, [pc, #648]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80015d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015da:	2202      	movs	r2, #2
 80015dc:	4013      	ands	r3, r2
 80015de:	d0f1      	beq.n	80015c4 <HAL_RCC_OscConfig+0x3d0>
 80015e0:	e018      	b.n	8001614 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e2:	4b9f      	ldr	r3, [pc, #636]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80015e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015e6:	4b9e      	ldr	r3, [pc, #632]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80015e8:	2101      	movs	r1, #1
 80015ea:	438a      	bics	r2, r1
 80015ec:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ee:	f7ff f8ad 	bl	800074c <HAL_GetTick>
 80015f2:	0003      	movs	r3, r0
 80015f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff f8a8 	bl	800074c <HAL_GetTick>
 80015fc:	0002      	movs	r2, r0
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e1ad      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800160a:	4b95      	ldr	r3, [pc, #596]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 800160c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800160e:	2202      	movs	r2, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d1f1      	bne.n	80015f8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2204      	movs	r2, #4
 800161a:	4013      	ands	r3, r2
 800161c:	d100      	bne.n	8001620 <HAL_RCC_OscConfig+0x42c>
 800161e:	e0ae      	b.n	800177e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001620:	2027      	movs	r0, #39	@ 0x27
 8001622:	183b      	adds	r3, r7, r0
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001628:	4b8d      	ldr	r3, [pc, #564]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 800162a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	055b      	lsls	r3, r3, #21
 8001630:	4013      	ands	r3, r2
 8001632:	d109      	bne.n	8001648 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	4b8a      	ldr	r3, [pc, #552]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001638:	4b89      	ldr	r3, [pc, #548]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 800163a:	2180      	movs	r1, #128	@ 0x80
 800163c:	0549      	lsls	r1, r1, #21
 800163e:	430a      	orrs	r2, r1
 8001640:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001642:	183b      	adds	r3, r7, r0
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	4b87      	ldr	r3, [pc, #540]	@ (8001868 <HAL_RCC_OscConfig+0x674>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	4013      	ands	r3, r2
 8001652:	d11a      	bne.n	800168a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001654:	4b84      	ldr	r3, [pc, #528]	@ (8001868 <HAL_RCC_OscConfig+0x674>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b83      	ldr	r3, [pc, #524]	@ (8001868 <HAL_RCC_OscConfig+0x674>)
 800165a:	2180      	movs	r1, #128	@ 0x80
 800165c:	0049      	lsls	r1, r1, #1
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001662:	f7ff f873 	bl	800074c <HAL_GetTick>
 8001666:	0003      	movs	r3, r0
 8001668:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166c:	f7ff f86e 	bl	800074c <HAL_GetTick>
 8001670:	0002      	movs	r2, r0
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	@ 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e173      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167e:	4b7a      	ldr	r3, [pc, #488]	@ (8001868 <HAL_RCC_OscConfig+0x674>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	2380      	movs	r3, #128	@ 0x80
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4013      	ands	r3, r2
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	2380      	movs	r3, #128	@ 0x80
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	429a      	cmp	r2, r3
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_OscConfig+0x4b2>
 8001696:	4b72      	ldr	r3, [pc, #456]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001698:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800169a:	4b71      	ldr	r3, [pc, #452]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 800169c:	2180      	movs	r1, #128	@ 0x80
 800169e:	0049      	lsls	r1, r1, #1
 80016a0:	430a      	orrs	r2, r1
 80016a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80016a4:	e031      	b.n	800170a <HAL_RCC_OscConfig+0x516>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x4d4>
 80016ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80016b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80016b4:	496b      	ldr	r1, [pc, #428]	@ (8001864 <HAL_RCC_OscConfig+0x670>)
 80016b6:	400a      	ands	r2, r1
 80016b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80016ba:	4b69      	ldr	r3, [pc, #420]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80016bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016be:	4b68      	ldr	r3, [pc, #416]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80016c0:	496a      	ldr	r1, [pc, #424]	@ (800186c <HAL_RCC_OscConfig+0x678>)
 80016c2:	400a      	ands	r2, r1
 80016c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80016c6:	e020      	b.n	800170a <HAL_RCC_OscConfig+0x516>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	23a0      	movs	r3, #160	@ 0xa0
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d10e      	bne.n	80016f2 <HAL_RCC_OscConfig+0x4fe>
 80016d4:	4b62      	ldr	r3, [pc, #392]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80016d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016d8:	4b61      	ldr	r3, [pc, #388]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	00c9      	lsls	r1, r1, #3
 80016de:	430a      	orrs	r2, r1
 80016e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80016e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80016e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80016e8:	2180      	movs	r1, #128	@ 0x80
 80016ea:	0049      	lsls	r1, r1, #1
 80016ec:	430a      	orrs	r2, r1
 80016ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80016f0:	e00b      	b.n	800170a <HAL_RCC_OscConfig+0x516>
 80016f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80016f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80016f8:	495a      	ldr	r1, [pc, #360]	@ (8001864 <HAL_RCC_OscConfig+0x670>)
 80016fa:	400a      	ands	r2, r1
 80016fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80016fe:	4b58      	ldr	r3, [pc, #352]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001700:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001702:	4b57      	ldr	r3, [pc, #348]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001704:	4959      	ldr	r1, [pc, #356]	@ (800186c <HAL_RCC_OscConfig+0x678>)
 8001706:	400a      	ands	r2, r1
 8001708:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d015      	beq.n	800173e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff f81b 	bl	800074c <HAL_GetTick>
 8001716:	0003      	movs	r3, r0
 8001718:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800171a:	e009      	b.n	8001730 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171c:	f7ff f816 	bl	800074c <HAL_GetTick>
 8001720:	0002      	movs	r2, r0
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	4a52      	ldr	r2, [pc, #328]	@ (8001870 <HAL_RCC_OscConfig+0x67c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e11a      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001730:	4b4b      	ldr	r3, [pc, #300]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001732:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4013      	ands	r3, r2
 800173a:	d0ef      	beq.n	800171c <HAL_RCC_OscConfig+0x528>
 800173c:	e014      	b.n	8001768 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff f805 	bl	800074c <HAL_GetTick>
 8001742:	0003      	movs	r3, r0
 8001744:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001746:	e009      	b.n	800175c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001748:	f7ff f800 	bl	800074c <HAL_GetTick>
 800174c:	0002      	movs	r2, r0
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	4a47      	ldr	r2, [pc, #284]	@ (8001870 <HAL_RCC_OscConfig+0x67c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e104      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800175c:	4b40      	ldr	r3, [pc, #256]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 800175e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4013      	ands	r3, r2
 8001766:	d1ef      	bne.n	8001748 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001768:	2327      	movs	r3, #39	@ 0x27
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d105      	bne.n	800177e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001772:	4b3b      	ldr	r3, [pc, #236]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001774:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001776:	4b3a      	ldr	r3, [pc, #232]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001778:	493e      	ldr	r1, [pc, #248]	@ (8001874 <HAL_RCC_OscConfig+0x680>)
 800177a:	400a      	ands	r2, r1
 800177c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2220      	movs	r2, #32
 8001784:	4013      	ands	r3, r2
 8001786:	d049      	beq.n	800181c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d026      	beq.n	80017de <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001790:	4b33      	ldr	r3, [pc, #204]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	4b32      	ldr	r3, [pc, #200]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001796:	2101      	movs	r1, #1
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	4b30      	ldr	r3, [pc, #192]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 800179e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80017a2:	2101      	movs	r1, #1
 80017a4:	430a      	orrs	r2, r1
 80017a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80017a8:	4b33      	ldr	r3, [pc, #204]	@ (8001878 <HAL_RCC_OscConfig+0x684>)
 80017aa:	6a1a      	ldr	r2, [r3, #32]
 80017ac:	4b32      	ldr	r3, [pc, #200]	@ (8001878 <HAL_RCC_OscConfig+0x684>)
 80017ae:	2180      	movs	r1, #128	@ 0x80
 80017b0:	0189      	lsls	r1, r1, #6
 80017b2:	430a      	orrs	r2, r1
 80017b4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7fe ffc9 	bl	800074c <HAL_GetTick>
 80017ba:	0003      	movs	r3, r0
 80017bc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017c0:	f7fe ffc4 	bl	800074c <HAL_GetTick>
 80017c4:	0002      	movs	r2, r0
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0c9      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017d2:	4b23      	ldr	r3, [pc, #140]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2202      	movs	r2, #2
 80017d8:	4013      	ands	r3, r2
 80017da:	d0f1      	beq.n	80017c0 <HAL_RCC_OscConfig+0x5cc>
 80017dc:	e01e      	b.n	800181c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 80017e4:	2101      	movs	r1, #1
 80017e6:	438a      	bics	r2, r1
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	4b23      	ldr	r3, [pc, #140]	@ (8001878 <HAL_RCC_OscConfig+0x684>)
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_RCC_OscConfig+0x684>)
 80017f0:	4922      	ldr	r1, [pc, #136]	@ (800187c <HAL_RCC_OscConfig+0x688>)
 80017f2:	400a      	ands	r2, r1
 80017f4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f6:	f7fe ffa9 	bl	800074c <HAL_GetTick>
 80017fa:	0003      	movs	r3, r0
 80017fc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001800:	f7fe ffa4 	bl	800074c <HAL_GetTick>
 8001804:	0002      	movs	r2, r0
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e0a9      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2202      	movs	r2, #2
 8001818:	4013      	ands	r3, r2
 800181a:	d1f1      	bne.n	8001800 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d100      	bne.n	8001826 <HAL_RCC_OscConfig+0x632>
 8001824:	e09e      	b.n	8001964 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	2b0c      	cmp	r3, #12
 800182a:	d100      	bne.n	800182e <HAL_RCC_OscConfig+0x63a>
 800182c:	e077      	b.n	800191e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001832:	2b02      	cmp	r3, #2
 8001834:	d158      	bne.n	80018e8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <HAL_RCC_OscConfig+0x66c>)
 800183c:	4910      	ldr	r1, [pc, #64]	@ (8001880 <HAL_RCC_OscConfig+0x68c>)
 800183e:	400a      	ands	r2, r1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7fe ff83 	bl	800074c <HAL_GetTick>
 8001846:	0003      	movs	r3, r0
 8001848:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800184a:	e01b      	b.n	8001884 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800184c:	f7fe ff7e 	bl	800074c <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d914      	bls.n	8001884 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e083      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	40021000 	.word	0x40021000
 8001864:	fffffeff 	.word	0xfffffeff
 8001868:	40007000 	.word	0x40007000
 800186c:	fffffbff 	.word	0xfffffbff
 8001870:	00001388 	.word	0x00001388
 8001874:	efffffff 	.word	0xefffffff
 8001878:	40010000 	.word	0x40010000
 800187c:	ffffdfff 	.word	0xffffdfff
 8001880:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001884:	4b3a      	ldr	r3, [pc, #232]	@ (8001970 <HAL_RCC_OscConfig+0x77c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	049b      	lsls	r3, r3, #18
 800188c:	4013      	ands	r3, r2
 800188e:	d1dd      	bne.n	800184c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001890:	4b37      	ldr	r3, [pc, #220]	@ (8001970 <HAL_RCC_OscConfig+0x77c>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4a37      	ldr	r2, [pc, #220]	@ (8001974 <HAL_RCC_OscConfig+0x780>)
 8001896:	4013      	ands	r3, r2
 8001898:	0019      	movs	r1, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a8:	431a      	orrs	r2, r3
 80018aa:	4b31      	ldr	r3, [pc, #196]	@ (8001970 <HAL_RCC_OscConfig+0x77c>)
 80018ac:	430a      	orrs	r2, r1
 80018ae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001970 <HAL_RCC_OscConfig+0x77c>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001970 <HAL_RCC_OscConfig+0x77c>)
 80018b6:	2180      	movs	r1, #128	@ 0x80
 80018b8:	0449      	lsls	r1, r1, #17
 80018ba:	430a      	orrs	r2, r1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018be:	f7fe ff45 	bl	800074c <HAL_GetTick>
 80018c2:	0003      	movs	r3, r0
 80018c4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c8:	f7fe ff40 	bl	800074c <HAL_GetTick>
 80018cc:	0002      	movs	r2, r0
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e045      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018da:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <HAL_RCC_OscConfig+0x77c>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	049b      	lsls	r3, r3, #18
 80018e2:	4013      	ands	r3, r2
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x6d4>
 80018e6:	e03d      	b.n	8001964 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e8:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <HAL_RCC_OscConfig+0x77c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b20      	ldr	r3, [pc, #128]	@ (8001970 <HAL_RCC_OscConfig+0x77c>)
 80018ee:	4922      	ldr	r1, [pc, #136]	@ (8001978 <HAL_RCC_OscConfig+0x784>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7fe ff2a 	bl	800074c <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fe:	f7fe ff25 	bl	800074c <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e02a      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001910:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <HAL_RCC_OscConfig+0x77c>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	049b      	lsls	r3, r3, #18
 8001918:	4013      	ands	r3, r2
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x70a>
 800191c:	e022      	b.n	8001964 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e01d      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800192a:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_RCC_OscConfig+0x77c>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	2380      	movs	r3, #128	@ 0x80
 8001934:	025b      	lsls	r3, r3, #9
 8001936:	401a      	ands	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193c:	429a      	cmp	r2, r3
 800193e:	d10f      	bne.n	8001960 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	23f0      	movs	r3, #240	@ 0xf0
 8001944:	039b      	lsls	r3, r3, #14
 8001946:	401a      	ands	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d107      	bne.n	8001960 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	23c0      	movs	r3, #192	@ 0xc0
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	401a      	ands	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b00a      	add	sp, #40	@ 0x28
 800196c:	bdb0      	pop	{r4, r5, r7, pc}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	40021000 	.word	0x40021000
 8001974:	ff02ffff 	.word	0xff02ffff
 8001978:	feffffff 	.word	0xfeffffff

0800197c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e128      	b.n	8001be2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001990:	4b96      	ldr	r3, [pc, #600]	@ (8001bec <HAL_RCC_ClockConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2201      	movs	r2, #1
 8001996:	4013      	ands	r3, r2
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d91e      	bls.n	80019dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800199e:	4b93      	ldr	r3, [pc, #588]	@ (8001bec <HAL_RCC_ClockConfig+0x270>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	4393      	bics	r3, r2
 80019a6:	0019      	movs	r1, r3
 80019a8:	4b90      	ldr	r3, [pc, #576]	@ (8001bec <HAL_RCC_ClockConfig+0x270>)
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019b0:	f7fe fecc 	bl	800074c <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b8:	e009      	b.n	80019ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ba:	f7fe fec7 	bl	800074c <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	4a8a      	ldr	r2, [pc, #552]	@ (8001bf0 <HAL_RCC_ClockConfig+0x274>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e109      	b.n	8001be2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b87      	ldr	r3, [pc, #540]	@ (8001bec <HAL_RCC_ClockConfig+0x270>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4013      	ands	r3, r2
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d1ee      	bne.n	80019ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2202      	movs	r2, #2
 80019e2:	4013      	ands	r3, r2
 80019e4:	d009      	beq.n	80019fa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e6:	4b83      	ldr	r3, [pc, #524]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	22f0      	movs	r2, #240	@ 0xf0
 80019ec:	4393      	bics	r3, r2
 80019ee:	0019      	movs	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	4b7f      	ldr	r3, [pc, #508]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 80019f6:	430a      	orrs	r2, r1
 80019f8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2201      	movs	r2, #1
 8001a00:	4013      	ands	r3, r2
 8001a02:	d100      	bne.n	8001a06 <HAL_RCC_ClockConfig+0x8a>
 8001a04:	e089      	b.n	8001b1a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a0e:	4b79      	ldr	r3, [pc, #484]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2380      	movs	r3, #128	@ 0x80
 8001a14:	029b      	lsls	r3, r3, #10
 8001a16:	4013      	ands	r3, r2
 8001a18:	d120      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e0e1      	b.n	8001be2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a26:	4b73      	ldr	r3, [pc, #460]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	2380      	movs	r3, #128	@ 0x80
 8001a2c:	049b      	lsls	r3, r3, #18
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d114      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0d5      	b.n	8001be2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d106      	bne.n	8001a4c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2204      	movs	r2, #4
 8001a44:	4013      	ands	r3, r2
 8001a46:	d109      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0ca      	b.n	8001be2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a4c:	4b69      	ldr	r3, [pc, #420]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4013      	ands	r3, r2
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0c2      	b.n	8001be2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5c:	4b65      	ldr	r3, [pc, #404]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2203      	movs	r2, #3
 8001a62:	4393      	bics	r3, r2
 8001a64:	0019      	movs	r1, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	4b62      	ldr	r3, [pc, #392]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a70:	f7fe fe6c 	bl	800074c <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d111      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a80:	e009      	b.n	8001a96 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a82:	f7fe fe63 	bl	800074c <HAL_GetTick>
 8001a86:	0002      	movs	r2, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	4a58      	ldr	r2, [pc, #352]	@ (8001bf0 <HAL_RCC_ClockConfig+0x274>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e0a5      	b.n	8001be2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a96:	4b57      	ldr	r3, [pc, #348]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d1ef      	bne.n	8001a82 <HAL_RCC_ClockConfig+0x106>
 8001aa2:	e03a      	b.n	8001b1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d111      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aae:	f7fe fe4d 	bl	800074c <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	4a4d      	ldr	r2, [pc, #308]	@ (8001bf0 <HAL_RCC_ClockConfig+0x274>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e08f      	b.n	8001be2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac2:	4b4c      	ldr	r3, [pc, #304]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d1ef      	bne.n	8001aae <HAL_RCC_ClockConfig+0x132>
 8001ace:	e024      	b.n	8001b1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d11b      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ada:	f7fe fe37 	bl	800074c <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a42      	ldr	r2, [pc, #264]	@ (8001bf0 <HAL_RCC_ClockConfig+0x274>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e079      	b.n	8001be2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aee:	4b41      	ldr	r3, [pc, #260]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	220c      	movs	r2, #12
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d1ef      	bne.n	8001ada <HAL_RCC_ClockConfig+0x15e>
 8001afa:	e00e      	b.n	8001b1a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afc:	f7fe fe26 	bl	800074c <HAL_GetTick>
 8001b00:	0002      	movs	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	4a3a      	ldr	r2, [pc, #232]	@ (8001bf0 <HAL_RCC_ClockConfig+0x274>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e068      	b.n	8001be2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b10:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	220c      	movs	r2, #12
 8001b16:	4013      	ands	r3, r2
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1a:	4b34      	ldr	r3, [pc, #208]	@ (8001bec <HAL_RCC_ClockConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4013      	ands	r3, r2
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d21e      	bcs.n	8001b66 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b28:	4b30      	ldr	r3, [pc, #192]	@ (8001bec <HAL_RCC_ClockConfig+0x270>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4393      	bics	r3, r2
 8001b30:	0019      	movs	r1, r3
 8001b32:	4b2e      	ldr	r3, [pc, #184]	@ (8001bec <HAL_RCC_ClockConfig+0x270>)
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b3a:	f7fe fe07 	bl	800074c <HAL_GetTick>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	e009      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b44:	f7fe fe02 	bl	800074c <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	4a28      	ldr	r2, [pc, #160]	@ (8001bf0 <HAL_RCC_ClockConfig+0x274>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e044      	b.n	8001be2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b58:	4b24      	ldr	r3, [pc, #144]	@ (8001bec <HAL_RCC_ClockConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4013      	ands	r3, r2
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d1ee      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d009      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b70:	4b20      	ldr	r3, [pc, #128]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4a20      	ldr	r2, [pc, #128]	@ (8001bf8 <HAL_RCC_ClockConfig+0x27c>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	0019      	movs	r1, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001b80:	430a      	orrs	r2, r1
 8001b82:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2208      	movs	r2, #8
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d00a      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b8e:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	4a1a      	ldr	r2, [pc, #104]	@ (8001bfc <HAL_RCC_ClockConfig+0x280>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	0019      	movs	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	00da      	lsls	r2, r3, #3
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ba4:	f000 f832 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8001ba8:	0001      	movs	r1, r0
 8001baa:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_RCC_ClockConfig+0x278>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	4a12      	ldr	r2, [pc, #72]	@ (8001c00 <HAL_RCC_ClockConfig+0x284>)
 8001bb6:	5cd3      	ldrb	r3, [r2, r3]
 8001bb8:	000a      	movs	r2, r1
 8001bba:	40da      	lsrs	r2, r3
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <HAL_RCC_ClockConfig+0x288>)
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <HAL_RCC_ClockConfig+0x28c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	250b      	movs	r5, #11
 8001bc6:	197c      	adds	r4, r7, r5
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f7fe fd79 	bl	80006c0 <HAL_InitTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bd2:	197b      	adds	r3, r7, r5
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001bda:	197b      	adds	r3, r7, r5
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b004      	add	sp, #16
 8001be8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bea:	46c0      	nop			@ (mov r8, r8)
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	00001388 	.word	0x00001388
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	fffff8ff 	.word	0xfffff8ff
 8001bfc:	ffffc7ff 	.word	0xffffc7ff
 8001c00:	08001ff4 	.word	0x08001ff4
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c12:	4b3c      	ldr	r3, [pc, #240]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d013      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x3e>
 8001c22:	d85c      	bhi.n	8001cde <HAL_RCC_GetSysClockFreq+0xd2>
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d002      	beq.n	8001c2e <HAL_RCC_GetSysClockFreq+0x22>
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d00b      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x38>
 8001c2c:	e057      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c2e:	4b35      	ldr	r3, [pc, #212]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2210      	movs	r2, #16
 8001c34:	4013      	ands	r3, r2
 8001c36:	d002      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c38:	4b33      	ldr	r3, [pc, #204]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c3a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c3c:	e05d      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001c3e:	4b33      	ldr	r3, [pc, #204]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x100>)
 8001c40:	613b      	str	r3, [r7, #16]
      break;
 8001c42:	e05a      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c44:	4b32      	ldr	r3, [pc, #200]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c46:	613b      	str	r3, [r7, #16]
      break;
 8001c48:	e057      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0c9b      	lsrs	r3, r3, #18
 8001c4e:	220f      	movs	r2, #15
 8001c50:	4013      	ands	r3, r2
 8001c52:	4a30      	ldr	r2, [pc, #192]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c54:	5cd3      	ldrb	r3, [r2, r3]
 8001c56:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	0d9b      	lsrs	r3, r3, #22
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	4013      	ands	r3, r2
 8001c60:	3301      	adds	r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c64:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	025b      	lsls	r3, r3, #9
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d00f      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	000a      	movs	r2, r1
 8001c74:	0152      	lsls	r2, r2, #5
 8001c76:	1a52      	subs	r2, r2, r1
 8001c78:	0193      	lsls	r3, r2, #6
 8001c7a:	1a9b      	subs	r3, r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	185b      	adds	r3, r3, r1
 8001c80:	025b      	lsls	r3, r3, #9
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7fe fa3f 	bl	8000108 <__udivsi3>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e023      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c90:	4b1c      	ldr	r3, [pc, #112]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2210      	movs	r2, #16
 8001c96:	4013      	ands	r3, r2
 8001c98:	d00f      	beq.n	8001cba <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	000a      	movs	r2, r1
 8001c9e:	0152      	lsls	r2, r2, #5
 8001ca0:	1a52      	subs	r2, r2, r1
 8001ca2:	0193      	lsls	r3, r2, #6
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	185b      	adds	r3, r3, r1
 8001caa:	021b      	lsls	r3, r3, #8
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f7fe fa2a 	bl	8000108 <__udivsi3>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	e00e      	b.n	8001cd8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	000a      	movs	r2, r1
 8001cbe:	0152      	lsls	r2, r2, #5
 8001cc0:	1a52      	subs	r2, r2, r1
 8001cc2:	0193      	lsls	r3, r2, #6
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	185b      	adds	r3, r3, r1
 8001cca:	029b      	lsls	r3, r3, #10
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f7fe fa1a 	bl	8000108 <__udivsi3>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
      break;
 8001cdc:	e00d      	b.n	8001cfa <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0b5b      	lsrs	r3, r3, #13
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	3301      	adds	r3, #1
 8001cee:	2280      	movs	r2, #128	@ 0x80
 8001cf0:	0212      	lsls	r2, r2, #8
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	0013      	movs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
      break;
 8001cf8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cfa:	693b      	ldr	r3, [r7, #16]
}
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b006      	add	sp, #24
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	003d0900 	.word	0x003d0900
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	007a1200 	.word	0x007a1200
 8001d14:	08002004 	.word	0x08002004

08001d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e032      	b.n	8001d90 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2239      	movs	r2, #57	@ 0x39
 8001d2e:	5c9b      	ldrb	r3, [r3, r2]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d107      	bne.n	8001d46 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2238      	movs	r2, #56	@ 0x38
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7fe fc2f 	bl	80005a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2239      	movs	r2, #57	@ 0x39
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3304      	adds	r3, #4
 8001d56:	0019      	movs	r1, r3
 8001d58:	0010      	movs	r0, r2
 8001d5a:	f000 f861 	bl	8001e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	223e      	movs	r2, #62	@ 0x3e
 8001d62:	2101      	movs	r1, #1
 8001d64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	223a      	movs	r2, #58	@ 0x3a
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	223b      	movs	r2, #59	@ 0x3b
 8001d72:	2101      	movs	r1, #1
 8001d74:	5499      	strb	r1, [r3, r2]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	223c      	movs	r2, #60	@ 0x3c
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	223d      	movs	r2, #61	@ 0x3d
 8001d82:	2101      	movs	r1, #1
 8001d84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2239      	movs	r2, #57	@ 0x39
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b002      	add	sp, #8
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2239      	movs	r2, #57	@ 0x39
 8001da4:	5c9b      	ldrb	r3, [r3, r2]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d001      	beq.n	8001db0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e02e      	b.n	8001e0e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2239      	movs	r2, #57	@ 0x39
 8001db4:	2102      	movs	r1, #2
 8001db6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	05db      	lsls	r3, r3, #23
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d009      	beq.n	8001dd8 <HAL_TIM_Base_Start+0x40>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a13      	ldr	r2, [pc, #76]	@ (8001e18 <HAL_TIM_Base_Start+0x80>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_TIM_Base_Start+0x40>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a12      	ldr	r2, [pc, #72]	@ (8001e1c <HAL_TIM_Base_Start+0x84>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d111      	bne.n	8001dfc <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2207      	movs	r2, #7
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d010      	beq.n	8001e0c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2101      	movs	r1, #1
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfa:	e007      	b.n	8001e0c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2101      	movs	r1, #1
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b004      	add	sp, #16
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	40010800 	.word	0x40010800
 8001e1c:	40011400 	.word	0x40011400

08001e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	2380      	movs	r3, #128	@ 0x80
 8001e34:	05db      	lsls	r3, r3, #23
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d007      	beq.n	8001e4a <TIM_Base_SetConfig+0x2a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a22      	ldr	r2, [pc, #136]	@ (8001ec8 <TIM_Base_SetConfig+0xa8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d003      	beq.n	8001e4a <TIM_Base_SetConfig+0x2a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a21      	ldr	r2, [pc, #132]	@ (8001ecc <TIM_Base_SetConfig+0xac>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d108      	bne.n	8001e5c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2270      	movs	r2, #112	@ 0x70
 8001e4e:	4393      	bics	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	2380      	movs	r3, #128	@ 0x80
 8001e60:	05db      	lsls	r3, r3, #23
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d007      	beq.n	8001e76 <TIM_Base_SetConfig+0x56>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a17      	ldr	r2, [pc, #92]	@ (8001ec8 <TIM_Base_SetConfig+0xa8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d003      	beq.n	8001e76 <TIM_Base_SetConfig+0x56>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a16      	ldr	r2, [pc, #88]	@ (8001ecc <TIM_Base_SetConfig+0xac>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d108      	bne.n	8001e88 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4a15      	ldr	r2, [pc, #84]	@ (8001ed0 <TIM_Base_SetConfig+0xb0>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2280      	movs	r2, #128	@ 0x80
 8001e8c:	4393      	bics	r3, r2
 8001e8e:	001a      	movs	r2, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2204      	movs	r2, #4
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	601a      	str	r2, [r3, #0]
}
 8001ec0:	46c0      	nop			@ (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b004      	add	sp, #16
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40010800 	.word	0x40010800
 8001ecc:	40011400 	.word	0x40011400
 8001ed0:	fffffcff 	.word	0xfffffcff

08001ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2238      	movs	r2, #56	@ 0x38
 8001ee2:	5c9b      	ldrb	r3, [r3, r2]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e042      	b.n	8001f72 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2238      	movs	r2, #56	@ 0x38
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2239      	movs	r2, #57	@ 0x39
 8001ef8:	2102      	movs	r1, #2
 8001efa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2270      	movs	r2, #112	@ 0x70
 8001f10:	4393      	bics	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	2380      	movs	r3, #128	@ 0x80
 8001f2c:	05db      	lsls	r3, r3, #23
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d009      	beq.n	8001f46 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a11      	ldr	r2, [pc, #68]	@ (8001f7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d004      	beq.n	8001f46 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0f      	ldr	r2, [pc, #60]	@ (8001f80 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d10c      	bne.n	8001f60 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2280      	movs	r2, #128	@ 0x80
 8001f4a:	4393      	bics	r3, r2
 8001f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2239      	movs	r2, #57	@ 0x39
 8001f64:	2101      	movs	r1, #1
 8001f66:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2238      	movs	r2, #56	@ 0x38
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	0018      	movs	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	b004      	add	sp, #16
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	46c0      	nop			@ (mov r8, r8)
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	40011400 	.word	0x40011400

08001f84 <memset>:
 8001f84:	0003      	movs	r3, r0
 8001f86:	1882      	adds	r2, r0, r2
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d100      	bne.n	8001f8e <memset+0xa>
 8001f8c:	4770      	bx	lr
 8001f8e:	7019      	strb	r1, [r3, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	e7f9      	b.n	8001f88 <memset+0x4>

08001f94 <__libc_init_array>:
 8001f94:	b570      	push	{r4, r5, r6, lr}
 8001f96:	2600      	movs	r6, #0
 8001f98:	4c0c      	ldr	r4, [pc, #48]	@ (8001fcc <__libc_init_array+0x38>)
 8001f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8001fd0 <__libc_init_array+0x3c>)
 8001f9c:	1b64      	subs	r4, r4, r5
 8001f9e:	10a4      	asrs	r4, r4, #2
 8001fa0:	42a6      	cmp	r6, r4
 8001fa2:	d109      	bne.n	8001fb8 <__libc_init_array+0x24>
 8001fa4:	2600      	movs	r6, #0
 8001fa6:	f000 f819 	bl	8001fdc <_init>
 8001faa:	4c0a      	ldr	r4, [pc, #40]	@ (8001fd4 <__libc_init_array+0x40>)
 8001fac:	4d0a      	ldr	r5, [pc, #40]	@ (8001fd8 <__libc_init_array+0x44>)
 8001fae:	1b64      	subs	r4, r4, r5
 8001fb0:	10a4      	asrs	r4, r4, #2
 8001fb2:	42a6      	cmp	r6, r4
 8001fb4:	d105      	bne.n	8001fc2 <__libc_init_array+0x2e>
 8001fb6:	bd70      	pop	{r4, r5, r6, pc}
 8001fb8:	00b3      	lsls	r3, r6, #2
 8001fba:	58eb      	ldr	r3, [r5, r3]
 8001fbc:	4798      	blx	r3
 8001fbe:	3601      	adds	r6, #1
 8001fc0:	e7ee      	b.n	8001fa0 <__libc_init_array+0xc>
 8001fc2:	00b3      	lsls	r3, r6, #2
 8001fc4:	58eb      	ldr	r3, [r5, r3]
 8001fc6:	4798      	blx	r3
 8001fc8:	3601      	adds	r6, #1
 8001fca:	e7f2      	b.n	8001fb2 <__libc_init_array+0x1e>
 8001fcc:	08002010 	.word	0x08002010
 8001fd0:	08002010 	.word	0x08002010
 8001fd4:	08002014 	.word	0x08002014
 8001fd8:	08002010 	.word	0x08002010

08001fdc <_init>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe2:	bc08      	pop	{r3}
 8001fe4:	469e      	mov	lr, r3
 8001fe6:	4770      	bx	lr

08001fe8 <_fini>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fee:	bc08      	pop	{r3}
 8001ff0:	469e      	mov	lr, r3
 8001ff2:	4770      	bx	lr

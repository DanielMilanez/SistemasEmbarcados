
Projeto lembrete para prova.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000410c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080041cc  080041cc  000051cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e4  080042e4  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080042e4  080042e4  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080042e4  080042e4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e4  080042e4  000052e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042e8  080042e8  000052e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080042ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000005c  08004348  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004348  000062cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008af6  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018dc  00000000  00000000  0000eb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00010458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074d  00000000  00000000  00010df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014610  00000000  00000000  0001153d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9d5  00000000  00000000  00025b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f115  00000000  00000000  00030522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af637  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c0  00000000  00000000  000af67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  000b1d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080041b4 	.word	0x080041b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080041b4 	.word	0x080041b4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 ff3a 	bl	80010b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f824 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f9aa 	bl	8000598 <MX_GPIO_Init>
  MX_ADC_Init();
 8000244:	f000 f87a 	bl	800033c <MX_ADC_Init>
  MX_TIM2_Init();
 8000248:	f000 f8ea 	bl	8000420 <MX_TIM2_Init>
  MX_TIM6_Init();
 800024c:	f000 f968 	bl	8000520 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8000250:	4b0b      	ldr	r3, [pc, #44]	@ (8000280 <main+0x4c>)
 8000252:	0018      	movs	r0, r3
 8000254:	f002 fcac 	bl	8002bb0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000258:	4b0a      	ldr	r3, [pc, #40]	@ (8000284 <main+0x50>)
 800025a:	0018      	movs	r0, r3
 800025c:	f002 fcec 	bl	8002c38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000260:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <main+0x50>)
 8000262:	2100      	movs	r1, #0
 8000264:	0018      	movs	r0, r3
 8000266:	f002 fd7b 	bl	8002d60 <HAL_TIM_PWM_Start>

  StartLCD();
 800026a:	f000 faff 	bl	800086c <StartLCD>
  BUZ_Start();
 800026e:	f000 faab 	bl	80007c8 <BUZ_Start>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  VerifyJoycon();
 8000272:	f000 fd9b 	bl	8000dac <VerifyJoycon>
	  MenuManager();
 8000276:	f000 fcaf 	bl	8000bd8 <MenuManager>
	  VerifyJoycon();
 800027a:	46c0      	nop			@ (mov r8, r8)
 800027c:	e7f9      	b.n	8000272 <main+0x3e>
 800027e:	46c0      	nop			@ (mov r8, r8)
 8000280:	20000114 	.word	0x20000114
 8000284:	200000d4 	.word	0x200000d4

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b095      	sub	sp, #84	@ 0x54
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	2418      	movs	r4, #24
 8000290:	193b      	adds	r3, r7, r4
 8000292:	0018      	movs	r0, r3
 8000294:	2338      	movs	r3, #56	@ 0x38
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f003 fb11 	bl	80038c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	0018      	movs	r0, r3
 80002a2:	2314      	movs	r3, #20
 80002a4:	001a      	movs	r2, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	f003 fb0a 	bl	80038c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ac:	4b21      	ldr	r3, [pc, #132]	@ (8000334 <SystemClock_Config+0xac>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a21      	ldr	r2, [pc, #132]	@ (8000338 <SystemClock_Config+0xb0>)
 80002b2:	401a      	ands	r2, r3
 80002b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000334 <SystemClock_Config+0xac>)
 80002b6:	2180      	movs	r1, #128	@ 0x80
 80002b8:	0109      	lsls	r1, r1, #4
 80002ba:	430a      	orrs	r2, r1
 80002bc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002be:	0021      	movs	r1, r4
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2202      	movs	r2, #2
 80002c4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2201      	movs	r2, #1
 80002ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2210      	movs	r2, #16
 80002d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2202      	movs	r2, #2
 80002d6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2200      	movs	r2, #0
 80002e2:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2280      	movs	r2, #128	@ 0x80
 80002e8:	0412      	lsls	r2, r2, #16
 80002ea:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	0018      	movs	r0, r3
 80002f0:	f001 fe8c 	bl	800200c <HAL_RCC_OscConfig>
 80002f4:	1e03      	subs	r3, r0, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002f8:	f000 fd90 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	220f      	movs	r2, #15
 8000300:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2203      	movs	r2, #3
 8000306:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2280      	movs	r2, #128	@ 0x80
 800030c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2100      	movs	r1, #0
 800031e:	0018      	movs	r0, r3
 8000320:	f002 fa38 	bl	8002794 <HAL_RCC_ClockConfig>
 8000324:	1e03      	subs	r3, r0, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000328:	f000 fd78 	bl	8000e1c <Error_Handler>
  }
}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b015      	add	sp, #84	@ 0x54
 8000332:	bd90      	pop	{r4, r7, pc}
 8000334:	40007000 	.word	0x40007000
 8000338:	ffffe7ff 	.word	0xffffe7ff

0800033c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000342:	003b      	movs	r3, r7
 8000344:	0018      	movs	r0, r3
 8000346:	2308      	movs	r3, #8
 8000348:	001a      	movs	r2, r3
 800034a:	2100      	movs	r1, #0
 800034c:	f003 fab8 	bl	80038c0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000350:	4b30      	ldr	r3, [pc, #192]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000352:	4a31      	ldr	r2, [pc, #196]	@ (8000418 <MX_ADC_Init+0xdc>)
 8000354:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000356:	4b2f      	ldr	r3, [pc, #188]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000358:	2200      	movs	r2, #0
 800035a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800035c:	4b2d      	ldr	r3, [pc, #180]	@ (8000414 <MX_ADC_Init+0xd8>)
 800035e:	2280      	movs	r2, #128	@ 0x80
 8000360:	05d2      	lsls	r2, r2, #23
 8000362:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000364:	4b2b      	ldr	r3, [pc, #172]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800036a:	4b2a      	ldr	r3, [pc, #168]	@ (8000414 <MX_ADC_Init+0xd8>)
 800036c:	2207      	movs	r2, #7
 800036e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000370:	4b28      	ldr	r3, [pc, #160]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000372:	2201      	movs	r2, #1
 8000374:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000376:	4b27      	ldr	r3, [pc, #156]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800037c:	4b25      	ldr	r3, [pc, #148]	@ (8000414 <MX_ADC_Init+0xd8>)
 800037e:	2220      	movs	r2, #32
 8000380:	2101      	movs	r1, #1
 8000382:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000384:	4b23      	ldr	r3, [pc, #140]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000386:	2221      	movs	r2, #33	@ 0x21
 8000388:	2100      	movs	r1, #0
 800038a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800038c:	4b21      	ldr	r3, [pc, #132]	@ (8000414 <MX_ADC_Init+0xd8>)
 800038e:	2200      	movs	r2, #0
 8000390:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000392:	4b20      	ldr	r3, [pc, #128]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000394:	22c2      	movs	r2, #194	@ 0xc2
 8000396:	32ff      	adds	r2, #255	@ 0xff
 8000398:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800039a:	4b1e      	ldr	r3, [pc, #120]	@ (8000414 <MX_ADC_Init+0xd8>)
 800039c:	222c      	movs	r2, #44	@ 0x2c
 800039e:	2100      	movs	r1, #0
 80003a0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003a4:	2204      	movs	r2, #4
 80003a6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003ae:	4b19      	ldr	r3, [pc, #100]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80003b4:	4b17      	ldr	r3, [pc, #92]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003ba:	4b16      	ldr	r3, [pc, #88]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003bc:	2200      	movs	r2, #0
 80003be:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003c0:	4b14      	ldr	r3, [pc, #80]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 ff08 	bl	80011d8 <HAL_ADC_Init>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80003cc:	f000 fd26 	bl	8000e1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003d0:	003b      	movs	r3, r7
 80003d2:	2201      	movs	r2, #1
 80003d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003d6:	003b      	movs	r3, r7
 80003d8:	2280      	movs	r2, #128	@ 0x80
 80003da:	0152      	lsls	r2, r2, #5
 80003dc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003de:	003a      	movs	r2, r7
 80003e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003e2:	0011      	movs	r1, r2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 f9a7 	bl	8001738 <HAL_ADC_ConfigChannel>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80003ee:	f000 fd15 	bl	8000e1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003f2:	003b      	movs	r3, r7
 80003f4:	4a09      	ldr	r2, [pc, #36]	@ (800041c <MX_ADC_Init+0xe0>)
 80003f6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003f8:	003a      	movs	r2, r7
 80003fa:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003fc:	0011      	movs	r1, r2
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 f99a 	bl	8001738 <HAL_ADC_ConfigChannel>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000408:	f000 fd08 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b002      	add	sp, #8
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000078 	.word	0x20000078
 8000418:	40012400 	.word	0x40012400
 800041c:	04000002 	.word	0x04000002

08000420 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	@ 0x28
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000426:	2318      	movs	r3, #24
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	0018      	movs	r0, r3
 800042c:	2310      	movs	r3, #16
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f003 fa45 	bl	80038c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000436:	2310      	movs	r3, #16
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	0018      	movs	r0, r3
 800043c:	2308      	movs	r3, #8
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f003 fa3d 	bl	80038c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000446:	003b      	movs	r3, r7
 8000448:	0018      	movs	r0, r3
 800044a:	2310      	movs	r3, #16
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f003 fa36 	bl	80038c0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000454:	4b30      	ldr	r3, [pc, #192]	@ (8000518 <MX_TIM2_Init+0xf8>)
 8000456:	2280      	movs	r2, #128	@ 0x80
 8000458:	05d2      	lsls	r2, r2, #23
 800045a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800045c:	4b2e      	ldr	r3, [pc, #184]	@ (8000518 <MX_TIM2_Init+0xf8>)
 800045e:	2207      	movs	r2, #7
 8000460:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000462:	4b2d      	ldr	r3, [pc, #180]	@ (8000518 <MX_TIM2_Init+0xf8>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000468:	4b2b      	ldr	r3, [pc, #172]	@ (8000518 <MX_TIM2_Init+0xf8>)
 800046a:	4a2c      	ldr	r2, [pc, #176]	@ (800051c <MX_TIM2_Init+0xfc>)
 800046c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800046e:	4b2a      	ldr	r3, [pc, #168]	@ (8000518 <MX_TIM2_Init+0xf8>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000474:	4b28      	ldr	r3, [pc, #160]	@ (8000518 <MX_TIM2_Init+0xf8>)
 8000476:	2200      	movs	r2, #0
 8000478:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800047a:	4b27      	ldr	r3, [pc, #156]	@ (8000518 <MX_TIM2_Init+0xf8>)
 800047c:	0018      	movs	r0, r3
 800047e:	f002 fb57 	bl	8002b30 <HAL_TIM_Base_Init>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000486:	f000 fcc9 	bl	8000e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800048a:	2118      	movs	r1, #24
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2280      	movs	r2, #128	@ 0x80
 8000490:	0152      	lsls	r2, r2, #5
 8000492:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000494:	187a      	adds	r2, r7, r1
 8000496:	4b20      	ldr	r3, [pc, #128]	@ (8000518 <MX_TIM2_Init+0xf8>)
 8000498:	0011      	movs	r1, r2
 800049a:	0018      	movs	r0, r3
 800049c:	f002 fe7e 	bl	800319c <HAL_TIM_ConfigClockSource>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80004a4:	f000 fcba 	bl	8000e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000518 <MX_TIM2_Init+0xf8>)
 80004aa:	0018      	movs	r0, r3
 80004ac:	f002 fc10 	bl	8002cd0 <HAL_TIM_PWM_Init>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80004b4:	f000 fcb2 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b8:	2110      	movs	r1, #16
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004c6:	187a      	adds	r2, r7, r1
 80004c8:	4b13      	ldr	r3, [pc, #76]	@ (8000518 <MX_TIM2_Init+0xf8>)
 80004ca:	0011      	movs	r1, r2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f003 f97d 	bl	80037cc <HAL_TIMEx_MasterConfigSynchronization>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80004d6:	f000 fca1 	bl	8000e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004da:	003b      	movs	r3, r7
 80004dc:	2260      	movs	r2, #96	@ 0x60
 80004de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004e0:	003b      	movs	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004e6:	003b      	movs	r3, r7
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004ec:	003b      	movs	r3, r7
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f2:	0039      	movs	r1, r7
 80004f4:	4b08      	ldr	r3, [pc, #32]	@ (8000518 <MX_TIM2_Init+0xf8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	0018      	movs	r0, r3
 80004fa:	f002 fd89 	bl	8003010 <HAL_TIM_PWM_ConfigChannel>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000502:	f000 fc8b 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000506:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <MX_TIM2_Init+0xf8>)
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fd09 	bl	8000f20 <HAL_TIM_MspPostInit>

}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b00a      	add	sp, #40	@ 0x28
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	200000d4 	.word	0x200000d4
 800051c:	0000ffff 	.word	0x0000ffff

08000520 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000526:	003b      	movs	r3, r7
 8000528:	0018      	movs	r0, r3
 800052a:	2308      	movs	r3, #8
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f003 f9c6 	bl	80038c0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000534:	4b15      	ldr	r3, [pc, #84]	@ (800058c <MX_TIM6_Init+0x6c>)
 8000536:	4a16      	ldr	r2, [pc, #88]	@ (8000590 <MX_TIM6_Init+0x70>)
 8000538:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 800053a:	4b14      	ldr	r3, [pc, #80]	@ (800058c <MX_TIM6_Init+0x6c>)
 800053c:	2207      	movs	r2, #7
 800053e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000540:	4b12      	ldr	r3, [pc, #72]	@ (800058c <MX_TIM6_Init+0x6c>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000546:	4b11      	ldr	r3, [pc, #68]	@ (800058c <MX_TIM6_Init+0x6c>)
 8000548:	4a12      	ldr	r2, [pc, #72]	@ (8000594 <MX_TIM6_Init+0x74>)
 800054a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054c:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <MX_TIM6_Init+0x6c>)
 800054e:	2200      	movs	r2, #0
 8000550:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000552:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <MX_TIM6_Init+0x6c>)
 8000554:	0018      	movs	r0, r3
 8000556:	f002 faeb 	bl	8002b30 <HAL_TIM_Base_Init>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800055e:	f000 fc5d 	bl	8000e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000562:	003b      	movs	r3, r7
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000568:	003b      	movs	r3, r7
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800056e:	003a      	movs	r2, r7
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <MX_TIM6_Init+0x6c>)
 8000572:	0011      	movs	r1, r2
 8000574:	0018      	movs	r0, r3
 8000576:	f003 f929 	bl	80037cc <HAL_TIMEx_MasterConfigSynchronization>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800057e:	f000 fc4d 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	20000114 	.word	0x20000114
 8000590:	40001000 	.word	0x40001000
 8000594:	0000ffff 	.word	0x0000ffff

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b089      	sub	sp, #36	@ 0x24
 800059c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	240c      	movs	r4, #12
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	0018      	movs	r0, r3
 80005a4:	2314      	movs	r3, #20
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f003 f989 	bl	80038c0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b57      	ldr	r3, [pc, #348]	@ (800070c <MX_GPIO_Init+0x174>)
 80005b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005b2:	4b56      	ldr	r3, [pc, #344]	@ (800070c <MX_GPIO_Init+0x174>)
 80005b4:	2101      	movs	r1, #1
 80005b6:	430a      	orrs	r2, r1
 80005b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005ba:	4b54      	ldr	r3, [pc, #336]	@ (800070c <MX_GPIO_Init+0x174>)
 80005bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005be:	2201      	movs	r2, #1
 80005c0:	4013      	ands	r3, r2
 80005c2:	60bb      	str	r3, [r7, #8]
 80005c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b51      	ldr	r3, [pc, #324]	@ (800070c <MX_GPIO_Init+0x174>)
 80005c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005ca:	4b50      	ldr	r3, [pc, #320]	@ (800070c <MX_GPIO_Init+0x174>)
 80005cc:	2102      	movs	r1, #2
 80005ce:	430a      	orrs	r2, r1
 80005d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005d2:	4b4e      	ldr	r3, [pc, #312]	@ (800070c <MX_GPIO_Init+0x174>)
 80005d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005d6:	2202      	movs	r2, #2
 80005d8:	4013      	ands	r3, r2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	4b4b      	ldr	r3, [pc, #300]	@ (800070c <MX_GPIO_Init+0x174>)
 80005e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005e2:	4b4a      	ldr	r3, [pc, #296]	@ (800070c <MX_GPIO_Init+0x174>)
 80005e4:	2104      	movs	r1, #4
 80005e6:	430a      	orrs	r2, r1
 80005e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005ea:	4b48      	ldr	r3, [pc, #288]	@ (800070c <MX_GPIO_Init+0x174>)
 80005ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005ee:	2204      	movs	r2, #4
 80005f0:	4013      	ands	r3, r2
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|D4_Pin|D5_Pin|DHT11_Pin, GPIO_PIN_RESET);
 80005f6:	23b8      	movs	r3, #184	@ 0xb8
 80005f8:	0099      	lsls	r1, r3, #2
 80005fa:	23a0      	movs	r3, #160	@ 0xa0
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	2200      	movs	r2, #0
 8000600:	0018      	movs	r0, r3
 8000602:	f001 fce6 	bl	8001fd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000606:	4b42      	ldr	r3, [pc, #264]	@ (8000710 <MX_GPIO_Init+0x178>)
 8000608:	2200      	movs	r2, #0
 800060a:	2180      	movs	r1, #128	@ 0x80
 800060c:	0018      	movs	r0, r3
 800060e:	f001 fce0 	bl	8001fd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|RS_Pin|RW_Pin, GPIO_PIN_RESET);
 8000612:	23d0      	movs	r3, #208	@ 0xd0
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	483f      	ldr	r0, [pc, #252]	@ (8000714 <MX_GPIO_Init+0x17c>)
 8000618:	2200      	movs	r2, #0
 800061a:	0019      	movs	r1, r3
 800061c:	f001 fcd9 	bl	8001fd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_Pin D4_Pin D5_Pin */
  GPIO_InitStruct.Pin = EN_Pin|D4_Pin|D5_Pin;
 8000620:	193b      	adds	r3, r7, r4
 8000622:	22e0      	movs	r2, #224	@ 0xe0
 8000624:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	2201      	movs	r2, #1
 800062a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	193b      	adds	r3, r7, r4
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	193b      	adds	r3, r7, r4
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	193a      	adds	r2, r7, r4
 800063a:	23a0      	movs	r3, #160	@ 0xa0
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fb33 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_B_Pin */
  GPIO_InitStruct.Pin = BTN_B_Pin;
 8000646:	0021      	movs	r1, r4
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2280      	movs	r2, #128	@ 0x80
 800064c:	00d2      	lsls	r2, r2, #3
 800064e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	000c      	movs	r4, r1
 8000652:	193b      	adds	r3, r7, r4
 8000654:	2200      	movs	r2, #0
 8000656:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2201      	movs	r2, #1
 800065c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_B_GPIO_Port, &GPIO_InitStruct);
 800065e:	193b      	adds	r3, r7, r4
 8000660:	4a2c      	ldr	r2, [pc, #176]	@ (8000714 <MX_GPIO_Init+0x17c>)
 8000662:	0019      	movs	r1, r3
 8000664:	0010      	movs	r0, r2
 8000666:	f001 fb21 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_Pin;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	2280      	movs	r2, #128	@ 0x80
 800066e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2201      	movs	r2, #1
 8000674:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 8000682:	193b      	adds	r3, r7, r4
 8000684:	4a22      	ldr	r2, [pc, #136]	@ (8000710 <MX_GPIO_Init+0x178>)
 8000686:	0019      	movs	r1, r3
 8000688:	0010      	movs	r0, r2
 800068a:	f001 fb0f 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_A_Pin */
  GPIO_InitStruct.Pin = BTN_A_Pin;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2280      	movs	r2, #128	@ 0x80
 8000692:	0052      	lsls	r2, r2, #1
 8000694:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2201      	movs	r2, #1
 80006a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_A_GPIO_Port, &GPIO_InitStruct);
 80006a2:	193a      	adds	r2, r7, r4
 80006a4:	23a0      	movs	r3, #160	@ 0xa0
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 fafe 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80006b0:	0021      	movs	r1, r4
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2280      	movs	r2, #128	@ 0x80
 80006b6:	0092      	lsls	r2, r2, #2
 80006b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	000c      	movs	r4, r1
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2201      	movs	r2, #1
 80006c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2201      	movs	r2, #1
 80006c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2203      	movs	r2, #3
 80006cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80006ce:	193a      	adds	r2, r7, r4
 80006d0:	23a0      	movs	r3, #160	@ 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0011      	movs	r1, r2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 fae8 	bl	8001cac <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin RS_Pin RW_Pin */
  GPIO_InitStruct.Pin = D6_Pin|RS_Pin|RW_Pin;
 80006dc:	0021      	movs	r1, r4
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	22d0      	movs	r2, #208	@ 0xd0
 80006e2:	0092      	lsls	r2, r2, #2
 80006e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2201      	movs	r2, #1
 80006ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	4a06      	ldr	r2, [pc, #24]	@ (8000714 <MX_GPIO_Init+0x17c>)
 80006fc:	0019      	movs	r1, r3
 80006fe:	0010      	movs	r0, r2
 8000700:	f001 fad4 	bl	8001cac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b009      	add	sp, #36	@ 0x24
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	40021000 	.word	0x40021000
 8000710:	50000800 	.word	0x50000800
 8000714:	50000400 	.word	0x50000400

08000718 <NOTE_Controler>:

/* USER CODE BEGIN 4 */

// BUZZER MANIPULATIONS
void NOTE_Controler(uint32_t note){
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	uint16_t dc = note / 2;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	085a      	lsrs	r2, r3, #1
 8000724:	210e      	movs	r1, #14
 8000726:	187b      	adds	r3, r7, r1
 8000728:	801a      	strh	r2, [r3, #0]
	TIM2-> CCR1 = dc;
 800072a:	2380      	movs	r3, #128	@ 0x80
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	187a      	adds	r2, r7, r1
 8000730:	8812      	ldrh	r2, [r2, #0]
 8000732:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2-> ARR  = note;
 8000734:	2380      	movs	r3, #128	@ 0x80
 8000736:	05db      	lsls	r3, r3, #23
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b004      	add	sp, #16
 8000742:	bd80      	pop	{r7, pc}

08000744 <BUZ_Tone>:
void BUZ_Tone(uint32_t note){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	NOTE_Controler(note);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	0018      	movs	r0, r3
 8000750:	f7ff ffe2 	bl	8000718 <NOTE_Controler>
	HAL_Delay(TIME_NOTE);
 8000754:	2064      	movs	r0, #100	@ 0x64
 8000756:	f000 fd1b 	bl	8001190 <HAL_Delay>
	NOTE_Controler(10);
 800075a:	200a      	movs	r0, #10
 800075c:	f7ff ffdc 	bl	8000718 <NOTE_Controler>
}
 8000760:	46c0      	nop			@ (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	b002      	add	sp, #8
 8000766:	bd80      	pop	{r7, pc}

08000768 <BUZ_Altern_UP>:
void BUZ_Altern_UP(void){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	BUZ_Tone(DO);
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <BUZ_Altern_UP+0x24>)
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff ffe8 	bl	8000744 <BUZ_Tone>
	BUZ_Tone(RE);
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <BUZ_Altern_UP+0x28>)
 8000776:	0018      	movs	r0, r3
 8000778:	f7ff ffe4 	bl	8000744 <BUZ_Tone>
	BUZ_Tone(FA);
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <BUZ_Altern_UP+0x2c>)
 800077e:	0018      	movs	r0, r3
 8000780:	f7ff ffe0 	bl	8000744 <BUZ_Tone>
}
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	00000ed1 	.word	0x00000ed1
 8000790:	00000d4d 	.word	0x00000d4d
 8000794:	00000b2f 	.word	0x00000b2f

08000798 <BUZ_Altern_DOWN>:
void BUZ_Altern_DOWN(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	BUZ_Tone(FA);
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <BUZ_Altern_DOWN+0x24>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff ffd0 	bl	8000744 <BUZ_Tone>
	BUZ_Tone(RE);
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <BUZ_Altern_DOWN+0x28>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f7ff ffcc 	bl	8000744 <BUZ_Tone>
	BUZ_Tone(DO);
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <BUZ_Altern_DOWN+0x2c>)
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff ffc8 	bl	8000744 <BUZ_Tone>
}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	00000b2f 	.word	0x00000b2f
 80007c0:	00000d4d 	.word	0x00000d4d
 80007c4:	00000ed1 	.word	0x00000ed1

080007c8 <BUZ_Start>:
void BUZ_Start(void){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
	BUZ_Tone(SI);
 80007cc:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <BUZ_Start+0x4c>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff ffb8 	bl	8000744 <BUZ_Tone>
	BUZ_Tone(SI);
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <BUZ_Start+0x4c>)
 80007d6:	0018      	movs	r0, r3
 80007d8:	f7ff ffb4 	bl	8000744 <BUZ_Tone>

	BUZ_Tone(RE);
 80007dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <BUZ_Start+0x50>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f7ff ffb0 	bl	8000744 <BUZ_Tone>
	BUZ_Tone(RE);
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <BUZ_Start+0x50>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff ffac 	bl	8000744 <BUZ_Tone>

	BUZ_Tone(LA);
 80007ec:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <BUZ_Start+0x54>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff ffa8 	bl	8000744 <BUZ_Tone>
	BUZ_Tone(LA);
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <BUZ_Start+0x54>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff ffa4 	bl	8000744 <BUZ_Tone>

	BUZ_Tone(MI);
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <BUZ_Start+0x58>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff ffa0 	bl	8000744 <BUZ_Tone>
	BUZ_Tone(MI);
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <BUZ_Start+0x58>)
 8000806:	0018      	movs	r0, r3
 8000808:	f7ff ff9c 	bl	8000744 <BUZ_Tone>
}
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	000007d6 	.word	0x000007d6
 8000818:	00000d4d 	.word	0x00000d4d
 800081c:	000008cc 	.word	0x000008cc
 8000820:	00000bbf 	.word	0x00000bbf

08000824 <BUZ_Confirm>:
void BUZ_Confirm(void){
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	BUZ_Tone(LA);
 8000828:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <BUZ_Confirm+0x40>)
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff ff8a 	bl	8000744 <BUZ_Tone>
	BUZ_Tone(SI);
 8000830:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <BUZ_Confirm+0x44>)
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff ff86 	bl	8000744 <BUZ_Tone>
	BUZ_Tone(SOL);
 8000838:	239e      	movs	r3, #158	@ 0x9e
 800083a:	011b      	lsls	r3, r3, #4
 800083c:	0018      	movs	r0, r3
 800083e:	f7ff ff81 	bl	8000744 <BUZ_Tone>
	BUZ_Tone(LA);
 8000842:	4b08      	ldr	r3, [pc, #32]	@ (8000864 <BUZ_Confirm+0x40>)
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff ff7d 	bl	8000744 <BUZ_Tone>
	BUZ_Tone(SI);
 800084a:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <BUZ_Confirm+0x44>)
 800084c:	0018      	movs	r0, r3
 800084e:	f7ff ff79 	bl	8000744 <BUZ_Tone>
	BUZ_Tone(SOL);
 8000852:	239e      	movs	r3, #158	@ 0x9e
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	0018      	movs	r0, r3
 8000858:	f7ff ff74 	bl	8000744 <BUZ_Tone>
}
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	000008cc 	.word	0x000008cc
 8000868:	000007d6 	.word	0x000007d6

0800086c <StartLCD>:
	BUZ_Tone(DO);

}

// LCD CONTROLER
void StartLCD(void){
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 8000870:	2014      	movs	r0, #20
 8000872:	f000 fc8d 	bl	8001190 <HAL_Delay>
	DataManager(0x33, INSTRUCTION);
 8000876:	2100      	movs	r1, #0
 8000878:	2033      	movs	r0, #51	@ 0x33
 800087a:	f000 f81b 	bl	80008b4 <DataManager>
	DataManager(0x32, INSTRUCTION);
 800087e:	2100      	movs	r1, #0
 8000880:	2032      	movs	r0, #50	@ 0x32
 8000882:	f000 f817 	bl	80008b4 <DataManager>

	DataManager(0x28, INSTRUCTION);
 8000886:	2100      	movs	r1, #0
 8000888:	2028      	movs	r0, #40	@ 0x28
 800088a:	f000 f813 	bl	80008b4 <DataManager>

	DataManager(0x0C, INSTRUCTION);
 800088e:	2100      	movs	r1, #0
 8000890:	200c      	movs	r0, #12
 8000892:	f000 f80f 	bl	80008b4 <DataManager>
	DataManager(0x06, INSTRUCTION);
 8000896:	2100      	movs	r1, #0
 8000898:	2006      	movs	r0, #6
 800089a:	f000 f80b 	bl	80008b4 <DataManager>
	DataManager(0x01, INSTRUCTION);
 800089e:	2100      	movs	r1, #0
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 f807 	bl	80008b4 <DataManager>
	HAL_Delay(10);
 80008a6:	200a      	movs	r0, #10
 80008a8:	f000 fc72 	bl	8001190 <HAL_Delay>
}
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <DataManager>:
void DataManager(uint16_t data, uint8_t state){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	0002      	movs	r2, r0
 80008bc:	1dbb      	adds	r3, r7, #6
 80008be:	801a      	strh	r2, [r3, #0]
 80008c0:	1d7b      	adds	r3, r7, #5
 80008c2:	1c0a      	adds	r2, r1, #0
 80008c4:	701a      	strb	r2, [r3, #0]
	PORT.P0 = (data >> 0) & 1;
 80008c6:	1dbb      	adds	r3, r7, #6
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	1c1a      	adds	r2, r3, #0
 80008cc:	2301      	movs	r3, #1
 80008ce:	4013      	ands	r3, r2
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4b92      	ldr	r3, [pc, #584]	@ (8000b1c <DataManager+0x268>)
 80008d4:	2101      	movs	r1, #1
 80008d6:	400a      	ands	r2, r1
 80008d8:	0010      	movs	r0, r2
 80008da:	781a      	ldrb	r2, [r3, #0]
 80008dc:	2101      	movs	r1, #1
 80008de:	438a      	bics	r2, r1
 80008e0:	1c11      	adds	r1, r2, #0
 80008e2:	1c02      	adds	r2, r0, #0
 80008e4:	430a      	orrs	r2, r1
 80008e6:	701a      	strb	r2, [r3, #0]
	PORT.P1 = (data >> 1) & 1;
 80008e8:	1dbb      	adds	r3, r7, #6
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	1c1a      	adds	r2, r3, #0
 80008f2:	2301      	movs	r3, #1
 80008f4:	4013      	ands	r3, r2
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b88      	ldr	r3, [pc, #544]	@ (8000b1c <DataManager+0x268>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	400a      	ands	r2, r1
 80008fe:	1890      	adds	r0, r2, r2
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	2102      	movs	r1, #2
 8000904:	438a      	bics	r2, r1
 8000906:	1c11      	adds	r1, r2, #0
 8000908:	1c02      	adds	r2, r0, #0
 800090a:	430a      	orrs	r2, r1
 800090c:	701a      	strb	r2, [r3, #0]
	PORT.P2 = (data >> 2) & 1;
 800090e:	1dbb      	adds	r3, r7, #6
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	089b      	lsrs	r3, r3, #2
 8000914:	b29b      	uxth	r3, r3
 8000916:	1c1a      	adds	r2, r3, #0
 8000918:	2301      	movs	r3, #1
 800091a:	4013      	ands	r3, r2
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b7f      	ldr	r3, [pc, #508]	@ (8000b1c <DataManager+0x268>)
 8000920:	2101      	movs	r1, #1
 8000922:	400a      	ands	r2, r1
 8000924:	0090      	lsls	r0, r2, #2
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	2104      	movs	r1, #4
 800092a:	438a      	bics	r2, r1
 800092c:	1c11      	adds	r1, r2, #0
 800092e:	1c02      	adds	r2, r0, #0
 8000930:	430a      	orrs	r2, r1
 8000932:	701a      	strb	r2, [r3, #0]
	PORT.P3 = (data >> 3) & 1;
 8000934:	1dbb      	adds	r3, r7, #6
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	08db      	lsrs	r3, r3, #3
 800093a:	b29b      	uxth	r3, r3
 800093c:	1c1a      	adds	r2, r3, #0
 800093e:	2301      	movs	r3, #1
 8000940:	4013      	ands	r3, r2
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b75      	ldr	r3, [pc, #468]	@ (8000b1c <DataManager+0x268>)
 8000946:	2101      	movs	r1, #1
 8000948:	400a      	ands	r2, r1
 800094a:	00d0      	lsls	r0, r2, #3
 800094c:	781a      	ldrb	r2, [r3, #0]
 800094e:	2108      	movs	r1, #8
 8000950:	438a      	bics	r2, r1
 8000952:	1c11      	adds	r1, r2, #0
 8000954:	1c02      	adds	r2, r0, #0
 8000956:	430a      	orrs	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]
	PORT.P4 = (data >> 4) & 1;
 800095a:	1dbb      	adds	r3, r7, #6
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	091b      	lsrs	r3, r3, #4
 8000960:	b29b      	uxth	r3, r3
 8000962:	1c1a      	adds	r2, r3, #0
 8000964:	2301      	movs	r3, #1
 8000966:	4013      	ands	r3, r2
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b6c      	ldr	r3, [pc, #432]	@ (8000b1c <DataManager+0x268>)
 800096c:	2101      	movs	r1, #1
 800096e:	400a      	ands	r2, r1
 8000970:	0110      	lsls	r0, r2, #4
 8000972:	781a      	ldrb	r2, [r3, #0]
 8000974:	2110      	movs	r1, #16
 8000976:	438a      	bics	r2, r1
 8000978:	1c11      	adds	r1, r2, #0
 800097a:	1c02      	adds	r2, r0, #0
 800097c:	430a      	orrs	r2, r1
 800097e:	701a      	strb	r2, [r3, #0]
	PORT.P5 = (data >> 5) & 1;
 8000980:	1dbb      	adds	r3, r7, #6
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	095b      	lsrs	r3, r3, #5
 8000986:	b29b      	uxth	r3, r3
 8000988:	1c1a      	adds	r2, r3, #0
 800098a:	2301      	movs	r3, #1
 800098c:	4013      	ands	r3, r2
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b62      	ldr	r3, [pc, #392]	@ (8000b1c <DataManager+0x268>)
 8000992:	2101      	movs	r1, #1
 8000994:	400a      	ands	r2, r1
 8000996:	0150      	lsls	r0, r2, #5
 8000998:	781a      	ldrb	r2, [r3, #0]
 800099a:	2120      	movs	r1, #32
 800099c:	438a      	bics	r2, r1
 800099e:	1c11      	adds	r1, r2, #0
 80009a0:	1c02      	adds	r2, r0, #0
 80009a2:	430a      	orrs	r2, r1
 80009a4:	701a      	strb	r2, [r3, #0]
	PORT.P6 = (data >> 6) & 1;
 80009a6:	1dbb      	adds	r3, r7, #6
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	099b      	lsrs	r3, r3, #6
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	1c1a      	adds	r2, r3, #0
 80009b0:	2301      	movs	r3, #1
 80009b2:	4013      	ands	r3, r2
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b59      	ldr	r3, [pc, #356]	@ (8000b1c <DataManager+0x268>)
 80009b8:	2101      	movs	r1, #1
 80009ba:	400a      	ands	r2, r1
 80009bc:	0190      	lsls	r0, r2, #6
 80009be:	781a      	ldrb	r2, [r3, #0]
 80009c0:	2140      	movs	r1, #64	@ 0x40
 80009c2:	438a      	bics	r2, r1
 80009c4:	1c11      	adds	r1, r2, #0
 80009c6:	1c02      	adds	r2, r0, #0
 80009c8:	430a      	orrs	r2, r1
 80009ca:	701a      	strb	r2, [r3, #0]
	PORT.P7 = (data >> 7) & 1;
 80009cc:	1dbb      	adds	r3, r7, #6
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	09db      	lsrs	r3, r3, #7
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	1c1a      	adds	r2, r3, #0
 80009d6:	2301      	movs	r3, #1
 80009d8:	4013      	ands	r3, r2
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	4b4f      	ldr	r3, [pc, #316]	@ (8000b1c <DataManager+0x268>)
 80009de:	01d0      	lsls	r0, r2, #7
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	217f      	movs	r1, #127	@ 0x7f
 80009e4:	400a      	ands	r2, r1
 80009e6:	1c11      	adds	r1, r2, #0
 80009e8:	1c02      	adds	r2, r0, #0
 80009ea:	430a      	orrs	r2, r1
 80009ec:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, state);
 80009ee:	1d7b      	adds	r3, r7, #5
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	2380      	movs	r3, #128	@ 0x80
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	484a      	ldr	r0, [pc, #296]	@ (8000b20 <DataManager+0x26c>)
 80009f8:	0019      	movs	r1, r3
 80009fa:	f001 faea 	bl	8001fd2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 80009fe:	2380      	movs	r3, #128	@ 0x80
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4847      	ldr	r0, [pc, #284]	@ (8000b20 <DataManager+0x26c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	0019      	movs	r1, r3
 8000a08:	f001 fae3 	bl	8001fd2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P4);
 8000a0c:	4b43      	ldr	r3, [pc, #268]	@ (8000b1c <DataManager+0x268>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	06db      	lsls	r3, r3, #27
 8000a12:	0fdb      	lsrs	r3, r3, #31
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	001a      	movs	r2, r3
 8000a18:	23a0      	movs	r3, #160	@ 0xa0
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	2140      	movs	r1, #64	@ 0x40
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 fad7 	bl	8001fd2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P5);
 8000a24:	4b3d      	ldr	r3, [pc, #244]	@ (8000b1c <DataManager+0x268>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	069b      	lsls	r3, r3, #26
 8000a2a:	0fdb      	lsrs	r3, r3, #31
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	001a      	movs	r2, r3
 8000a30:	23a0      	movs	r3, #160	@ 0xa0
 8000a32:	05db      	lsls	r3, r3, #23
 8000a34:	2180      	movs	r1, #128	@ 0x80
 8000a36:	0018      	movs	r0, r3
 8000a38:	f001 facb 	bl	8001fd2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P6);
 8000a3c:	4b37      	ldr	r3, [pc, #220]	@ (8000b1c <DataManager+0x268>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	065b      	lsls	r3, r3, #25
 8000a42:	0fdb      	lsrs	r3, r3, #31
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	001a      	movs	r2, r3
 8000a48:	4b35      	ldr	r3, [pc, #212]	@ (8000b20 <DataManager+0x26c>)
 8000a4a:	2140      	movs	r1, #64	@ 0x40
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f001 fac0 	bl	8001fd2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P7);
 8000a52:	4b32      	ldr	r3, [pc, #200]	@ (8000b1c <DataManager+0x268>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	061b      	lsls	r3, r3, #24
 8000a58:	0fdb      	lsrs	r3, r3, #31
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	4b31      	ldr	r3, [pc, #196]	@ (8000b24 <DataManager+0x270>)
 8000a60:	2180      	movs	r1, #128	@ 0x80
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 fab5 	bl	8001fd2 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f000 fb91 	bl	8001190 <HAL_Delay>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000a6e:	23a0      	movs	r3, #160	@ 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2201      	movs	r2, #1
 8000a74:	2120      	movs	r1, #32
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 faab 	bl	8001fd2 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f000 fb87 	bl	8001190 <HAL_Delay>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000a82:	23a0      	movs	r3, #160	@ 0xa0
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	2200      	movs	r2, #0
 8000a88:	2120      	movs	r1, #32
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 faa1 	bl	8001fd2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P0);
 8000a90:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <DataManager+0x268>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	07db      	lsls	r3, r3, #31
 8000a96:	0fdb      	lsrs	r3, r3, #31
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	23a0      	movs	r3, #160	@ 0xa0
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	2140      	movs	r1, #64	@ 0x40
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f001 fa95 	bl	8001fd2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P1);
 8000aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <DataManager+0x268>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	079b      	lsls	r3, r3, #30
 8000aae:	0fdb      	lsrs	r3, r3, #31
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	23a0      	movs	r3, #160	@ 0xa0
 8000ab6:	05db      	lsls	r3, r3, #23
 8000ab8:	2180      	movs	r1, #128	@ 0x80
 8000aba:	0018      	movs	r0, r3
 8000abc:	f001 fa89 	bl	8001fd2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P2);
 8000ac0:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <DataManager+0x268>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	075b      	lsls	r3, r3, #29
 8000ac6:	0fdb      	lsrs	r3, r3, #31
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	001a      	movs	r2, r3
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <DataManager+0x26c>)
 8000ace:	2140      	movs	r1, #64	@ 0x40
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f001 fa7e 	bl	8001fd2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P3);
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <DataManager+0x268>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	071b      	lsls	r3, r3, #28
 8000adc:	0fdb      	lsrs	r3, r3, #31
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <DataManager+0x270>)
 8000ae4:	2180      	movs	r1, #128	@ 0x80
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f001 fa73 	bl	8001fd2 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8000aec:	2001      	movs	r0, #1
 8000aee:	f000 fb4f 	bl	8001190 <HAL_Delay>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000af2:	23a0      	movs	r3, #160	@ 0xa0
 8000af4:	05db      	lsls	r3, r3, #23
 8000af6:	2201      	movs	r2, #1
 8000af8:	2120      	movs	r1, #32
 8000afa:	0018      	movs	r0, r3
 8000afc:	f001 fa69 	bl	8001fd2 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f000 fb45 	bl	8001190 <HAL_Delay>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000b06:	23a0      	movs	r3, #160	@ 0xa0
 8000b08:	05db      	lsls	r3, r3, #23
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f001 fa5f 	bl	8001fd2 <HAL_GPIO_WritePin>
}
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000154 	.word	0x20000154
 8000b20:	50000400 	.word	0x50000400
 8000b24:	50000800 	.word	0x50000800

08000b28 <Message>:
void Message(char * message){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	for(int i = 0; message[i] != '\0'; ++i){
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	e00a      	b.n	8000b4c <Message+0x24>
		DataManager(message[i], DATA);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	18d3      	adds	r3, r2, r3
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2101      	movs	r1, #1
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff feb7 	bl	80008b4 <DataManager>
	for(int i = 0; message[i] != '\0'; ++i){
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	18d3      	adds	r3, r2, r3
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1ee      	bne.n	8000b36 <Message+0xe>
	}
}
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b004      	add	sp, #16
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <KeyboardCheck>:

// MENU SYSTEM
int KeyboardCheck(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	000a      	movs	r2, r1
 8000b6e:	1cbb      	adds	r3, r7, #2
 8000b70:	801a      	strh	r2, [r3, #0]
	uint16_t press = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000b72:	1cbb      	adds	r3, r7, #2
 8000b74:	881a      	ldrh	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 fa0c 	bl	8001f98 <HAL_GPIO_ReadPin>
 8000b80:	0003      	movs	r3, r0
 8000b82:	001a      	movs	r2, r3
 8000b84:	210c      	movs	r1, #12
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	801a      	strh	r2, [r3, #0]
	uint8_t response = 0;
 8000b8a:	240f      	movs	r4, #15
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]

	if (!press){
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d112      	bne.n	8000bc0 <KeyboardCheck+0x5c>
		atualTime = HAL_GetTick();
 8000b9a:	f000 faef 	bl	800117c <HAL_GetTick>
 8000b9e:	0002      	movs	r2, r0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <KeyboardCheck+0x6c>)
 8000ba2:	601a      	str	r2, [r3, #0]
		if ((atualTime - brefTime) > 10){
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <KeyboardCheck+0x6c>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <KeyboardCheck+0x70>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	2b0a      	cmp	r3, #10
 8000bb0:	d902      	bls.n	8000bb8 <KeyboardCheck+0x54>
			response = 1;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	701a      	strb	r2, [r3, #0]
		}
		brefTime = atualTime;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <KeyboardCheck+0x6c>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <KeyboardCheck+0x70>)
 8000bbe:	601a      	str	r2, [r3, #0]
	}

	return response;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	781b      	ldrb	r3, [r3, #0]
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b005      	add	sp, #20
 8000bcc:	bd90      	pop	{r4, r7, pc}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	2000015c 	.word	0x2000015c
 8000bd4:	20000158 	.word	0x20000158

08000bd8 <MenuManager>:
void MenuManager(void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
	uint16_t btn_bref    = KeyboardCheck(BTN_A_GPIO_Port, BTN_A_Pin),
 8000bde:	2380      	movs	r3, #128	@ 0x80
 8000be0:	005a      	lsls	r2, r3, #1
 8000be2:	23a0      	movs	r3, #160	@ 0xa0
 8000be4:	05db      	lsls	r3, r3, #23
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff ffbb 	bl	8000b64 <KeyboardCheck>
 8000bee:	0002      	movs	r2, r0
 8000bf0:	1dbb      	adds	r3, r7, #6
 8000bf2:	801a      	strh	r2, [r3, #0]
			 btn_after   = KeyboardCheck(BTN_B_GPIO_Port, BTN_B_Pin);
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	4a5b      	ldr	r2, [pc, #364]	@ (8000d68 <MenuManager+0x190>)
 8000bfa:	0019      	movs	r1, r3
 8000bfc:	0010      	movs	r0, r2
 8000bfe:	f7ff ffb1 	bl	8000b64 <KeyboardCheck>
 8000c02:	0002      	movs	r2, r0
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	801a      	strh	r2, [r3, #0]

	if (btn_bref) {
 8000c08:	1dbb      	adds	r3, r7, #6
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d008      	beq.n	8000c22 <MenuManager+0x4a>
		BUZ_Altern_DOWN();
 8000c10:	f7ff fdc2 	bl	8000798 <BUZ_Altern_DOWN>
		atualMenu--;
 8000c14:	4b55      	ldr	r3, [pc, #340]	@ (8000d6c <MenuManager+0x194>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	4b53      	ldr	r3, [pc, #332]	@ (8000d6c <MenuManager+0x194>)
 8000c1e:	801a      	strh	r2, [r3, #0]
 8000c20:	e00b      	b.n	8000c3a <MenuManager+0x62>
	}
	else if (btn_after){
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d007      	beq.n	8000c3a <MenuManager+0x62>
		BUZ_Altern_UP();
 8000c2a:	f7ff fd9d 	bl	8000768 <BUZ_Altern_UP>
		atualMenu++;
 8000c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d6c <MenuManager+0x194>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b4d      	ldr	r3, [pc, #308]	@ (8000d6c <MenuManager+0x194>)
 8000c38:	801a      	strh	r2, [r3, #0]
	}

	if (atualMenu >= LIMIT) atualMenu = 0;
 8000c3a:	4b4c      	ldr	r3, [pc, #304]	@ (8000d6c <MenuManager+0x194>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d903      	bls.n	8000c4a <MenuManager+0x72>
 8000c42:	4b4a      	ldr	r3, [pc, #296]	@ (8000d6c <MenuManager+0x194>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	801a      	strh	r2, [r3, #0]
 8000c48:	e006      	b.n	8000c58 <MenuManager+0x80>
	else if (atualMenu == 0) atualMenu  = LIMIT;
 8000c4a:	4b48      	ldr	r3, [pc, #288]	@ (8000d6c <MenuManager+0x194>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <MenuManager+0x80>
 8000c52:	4b46      	ldr	r3, [pc, #280]	@ (8000d6c <MenuManager+0x194>)
 8000c54:	2205      	movs	r2, #5
 8000c56:	801a      	strh	r2, [r3, #0]

	switch(atualMenu){
 8000c58:	4b44      	ldr	r3, [pc, #272]	@ (8000d6c <MenuManager+0x194>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	2b04      	cmp	r3, #4
 8000c5e:	d900      	bls.n	8000c62 <MenuManager+0x8a>
 8000c60:	e07d      	b.n	8000d5e <MenuManager+0x186>
 8000c62:	009a      	lsls	r2, r3, #2
 8000c64:	4b42      	ldr	r3, [pc, #264]	@ (8000d70 <MenuManager+0x198>)
 8000c66:	18d3      	adds	r3, r2, r3
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	469f      	mov	pc, r3
		case 0:
			Message("  SELETIVA  WS  ");
 8000c6c:	4b41      	ldr	r3, [pc, #260]	@ (8000d74 <MenuManager+0x19c>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f7ff ff5a 	bl	8000b28 <Message>
			DataManager(0xC0, INSTRUCTION);
 8000c74:	2100      	movs	r1, #0
 8000c76:	20c0      	movs	r0, #192	@ 0xc0
 8000c78:	f7ff fe1c 	bl	80008b4 <DataManager>
			Message(" #16  DANIEL-DF  ");
 8000c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d78 <MenuManager+0x1a0>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff ff52 	bl	8000b28 <Message>
			DataManager(0x80, INSTRUCTION);
 8000c84:	2100      	movs	r1, #0
 8000c86:	2080      	movs	r0, #128	@ 0x80
 8000c88:	f7ff fe14 	bl	80008b4 <DataManager>
			send = 0;
 8000c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d7c <MenuManager+0x1a4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
			break;
 8000c92:	e064      	b.n	8000d5e <MenuManager+0x186>

		case 1:
			Message("LEITOR  JOYSTICK");
 8000c94:	4b3a      	ldr	r3, [pc, #232]	@ (8000d80 <MenuManager+0x1a8>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff ff46 	bl	8000b28 <Message>
			DataManager(0xC0, INSTRUCTION);
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	20c0      	movs	r0, #192	@ 0xc0
 8000ca0:	f7ff fe08 	bl	80008b4 <DataManager>
			sprintf(buffer, "X: %lu Y: %lu   ", axisX, axisY);
 8000ca4:	4b37      	ldr	r3, [pc, #220]	@ (8000d84 <MenuManager+0x1ac>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b37      	ldr	r3, [pc, #220]	@ (8000d88 <MenuManager+0x1b0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4937      	ldr	r1, [pc, #220]	@ (8000d8c <MenuManager+0x1b4>)
 8000cae:	4838      	ldr	r0, [pc, #224]	@ (8000d90 <MenuManager+0x1b8>)
 8000cb0:	f002 fde4 	bl	800387c <siprintf>
			Message(buffer);
 8000cb4:	4b36      	ldr	r3, [pc, #216]	@ (8000d90 <MenuManager+0x1b8>)
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff ff36 	bl	8000b28 <Message>
			DataManager(0x80, INSTRUCTION);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2080      	movs	r0, #128	@ 0x80
 8000cc0:	f7ff fdf8 	bl	80008b4 <DataManager>
			send = 0;
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d7c <MenuManager+0x1a4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
			break;
 8000cca:	e048      	b.n	8000d5e <MenuManager+0x186>

		case 2:
			Message("   TEMPERATURA   ");
 8000ccc:	4b31      	ldr	r3, [pc, #196]	@ (8000d94 <MenuManager+0x1bc>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f7ff ff2a 	bl	8000b28 <Message>
			DataManager(0xC0, INSTRUCTION);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	20c0      	movs	r0, #192	@ 0xc0
 8000cd8:	f7ff fdec 	bl	80008b4 <DataManager>
			sprintf(buffer, "C %%:");
 8000cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8000d98 <MenuManager+0x1c0>)
 8000cde:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <MenuManager+0x1b8>)
 8000ce0:	0011      	movs	r1, r2
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f002 fdca 	bl	800387c <siprintf>
			Message(buffer);
 8000ce8:	4b29      	ldr	r3, [pc, #164]	@ (8000d90 <MenuManager+0x1b8>)
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff ff1c 	bl	8000b28 <Message>
			DataManager(0x80, INSTRUCTION);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2080      	movs	r0, #128	@ 0x80
 8000cf4:	f7ff fdde 	bl	80008b4 <DataManager>
			break;
 8000cf8:	e031      	b.n	8000d5e <MenuManager+0x186>

		case 3:
			Message(" DESEJA ENVIAR? ");
 8000cfa:	4b28      	ldr	r3, [pc, #160]	@ (8000d9c <MenuManager+0x1c4>)
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff13 	bl	8000b28 <Message>
			DataManager(0xC0, INSTRUCTION);
 8000d02:	2100      	movs	r1, #0
 8000d04:	20c0      	movs	r0, #192	@ 0xc0
 8000d06:	f7ff fdd5 	bl	80008b4 <DataManager>
			Message("B1:Sair B2:Envio");
 8000d0a:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <MenuManager+0x1c8>)
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff ff0b 	bl	8000b28 <Message>
			DataManager(0x80, INSTRUCTION);
 8000d12:	2100      	movs	r1, #0
 8000d14:	2080      	movs	r0, #128	@ 0x80
 8000d16:	f7ff fdcd 	bl	80008b4 <DataManager>
			send = 1;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <MenuManager+0x1a4>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
			break;
 8000d20:	e01d      	b.n	8000d5e <MenuManager+0x186>

		case 4:
			BUZ_Confirm();
 8000d22:	f7ff fd7f 	bl	8000824 <BUZ_Confirm>
			Message("ENVIO REALIZADO");
 8000d26:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <MenuManager+0x1cc>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff fefd 	bl	8000b28 <Message>
			DataManager(0xC0, INSTRUCTION);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	20c0      	movs	r0, #192	@ 0xc0
 8000d32:	f7ff fdbf 	bl	80008b4 <DataManager>
			Message("  COM SUCESSO!  ");
 8000d36:	4b1c      	ldr	r3, [pc, #112]	@ (8000da8 <MenuManager+0x1d0>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff fef5 	bl	8000b28 <Message>
			DataManager(0x80, INSTRUCTION);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2080      	movs	r0, #128	@ 0x80
 8000d42:	f7ff fdb7 	bl	80008b4 <DataManager>
			HAL_Delay(1000);
 8000d46:	23fa      	movs	r3, #250	@ 0xfa
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 fa20 	bl	8001190 <HAL_Delay>
			atualMenu = 0;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MenuManager+0x194>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	801a      	strh	r2, [r3, #0]
			send = 0;
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <MenuManager+0x1a4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
			break;
 8000d5c:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	50000400 	.word	0x50000400
 8000d6c:	20000168 	.word	0x20000168
 8000d70:	08004284 	.word	0x08004284
 8000d74:	080041cc 	.word	0x080041cc
 8000d78:	080041e0 	.word	0x080041e0
 8000d7c:	2000016a 	.word	0x2000016a
 8000d80:	080041f4 	.word	0x080041f4
 8000d84:	20000160 	.word	0x20000160
 8000d88:	20000164 	.word	0x20000164
 8000d8c:	08004208 	.word	0x08004208
 8000d90:	2000016c 	.word	0x2000016c
 8000d94:	0800421c 	.word	0x0800421c
 8000d98:	08004230 	.word	0x08004230
 8000d9c:	08004238 	.word	0x08004238
 8000da0:	0800424c 	.word	0x0800424c
 8000da4:	08004260 	.word	0x08004260
 8000da8:	08004270 	.word	0x08004270

08000dac <VerifyJoycon>:
void VerifyJoycon(void){
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc);
 8000db2:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <VerifyJoycon+0x64>)
 8000db4:	0018      	movs	r0, r3
 8000db6:	f000 fb83 	bl	80014c0 <HAL_ADC_Start>
		for (int i = 0; i < 3; ++i){
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	e01c      	b.n	8000dfa <VerifyJoycon+0x4e>
			HAL_ADC_PollForConversion(&hadc, 100);
 8000dc0:	4b13      	ldr	r3, [pc, #76]	@ (8000e10 <VerifyJoycon+0x64>)
 8000dc2:	2164      	movs	r1, #100	@ 0x64
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 fc0f 	bl	80015e8 <HAL_ADC_PollForConversion>
			if (i == 0) axisY = HAL_ADC_GetValue(&hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d107      	bne.n	8000de0 <VerifyJoycon+0x34>
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <VerifyJoycon+0x64>)
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 fca4 	bl	8001720 <HAL_ADC_GetValue>
 8000dd8:	0002      	movs	r2, r0
 8000dda:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <VerifyJoycon+0x68>)
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e009      	b.n	8000df4 <VerifyJoycon+0x48>
			else if (i == 1) axisX = HAL_ADC_GetValue(&hadc);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d106      	bne.n	8000df4 <VerifyJoycon+0x48>
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <VerifyJoycon+0x64>)
 8000de8:	0018      	movs	r0, r3
 8000dea:	f000 fc99 	bl	8001720 <HAL_ADC_GetValue>
 8000dee:	0002      	movs	r2, r0
 8000df0:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <VerifyJoycon+0x6c>)
 8000df2:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < 3; ++i){
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3301      	adds	r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	dddf      	ble.n	8000dc0 <VerifyJoycon+0x14>
		}
	HAL_ADC_Stop(&hadc);
 8000e00:	4b03      	ldr	r3, [pc, #12]	@ (8000e10 <VerifyJoycon+0x64>)
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 fbb0 	bl	8001568 <HAL_ADC_Stop>
}
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000078 	.word	0x20000078
 8000e14:	20000164 	.word	0x20000164
 8000e18:	20000160 	.word	0x20000160

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	e7fd      	b.n	8000e24 <Error_Handler+0x8>

08000e28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2c:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <HAL_MspInit+0x24>)
 8000e2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_MspInit+0x24>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	430a      	orrs	r2, r1
 8000e36:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <HAL_MspInit+0x24>)
 8000e3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e3c:	4b03      	ldr	r3, [pc, #12]	@ (8000e4c <HAL_MspInit+0x24>)
 8000e3e:	2180      	movs	r1, #128	@ 0x80
 8000e40:	0549      	lsls	r1, r1, #21
 8000e42:	430a      	orrs	r2, r1
 8000e44:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	240c      	movs	r4, #12
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	2314      	movs	r3, #20
 8000e60:	001a      	movs	r2, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	f002 fd2c 	bl	80038c0 <memset>
  if(hadc->Instance==ADC1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ec0 <HAL_ADC_MspInit+0x70>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d122      	bne.n	8000eb8 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e72:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <HAL_ADC_MspInit+0x74>)
 8000e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <HAL_ADC_MspInit+0x74>)
 8000e78:	2180      	movs	r1, #128	@ 0x80
 8000e7a:	0089      	lsls	r1, r1, #2
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <HAL_ADC_MspInit+0x74>)
 8000e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <HAL_ADC_MspInit+0x74>)
 8000e86:	2101      	movs	r1, #1
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <HAL_ADC_MspInit+0x74>)
 8000e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e90:	2201      	movs	r2, #1
 8000e92:	4013      	ands	r3, r2
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	193a      	adds	r2, r7, r4
 8000eac:	23a0      	movs	r3, #160	@ 0xa0
 8000eae:	05db      	lsls	r3, r3, #23
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 fefa 	bl	8001cac <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000eb8:	46c0      	nop			@ (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b009      	add	sp, #36	@ 0x24
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	40012400 	.word	0x40012400
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	2380      	movs	r3, #128	@ 0x80
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d10e      	bne.n	8000efa <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_TIM_Base_MspInit+0x50>)
 8000ede:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <HAL_TIM_Base_MspInit+0x50>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	200f      	movs	r0, #15
 8000eee:	f000 feab 	bl	8001c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f000 febd 	bl	8001c72 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM6_MspInit 1 */

    /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ef8:	e00a      	b.n	8000f10 <HAL_TIM_Base_MspInit+0x48>
  else if(htim_base->Instance==TIM6)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <HAL_TIM_Base_MspInit+0x54>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d105      	bne.n	8000f10 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f04:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <HAL_TIM_Base_MspInit+0x50>)
 8000f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <HAL_TIM_Base_MspInit+0x50>)
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f10:	46c0      	nop			@ (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b002      	add	sp, #8
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40001000 	.word	0x40001000

08000f20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	240c      	movs	r4, #12
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	2314      	movs	r3, #20
 8000f30:	001a      	movs	r2, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	f002 fcc4 	bl	80038c0 <memset>
  if(htim->Instance==TIM2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2380      	movs	r3, #128	@ 0x80
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d123      	bne.n	8000f8c <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <HAL_TIM_MspPostInit+0x74>)
 8000f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_TIM_MspPostInit+0x74>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f50:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <HAL_TIM_MspPostInit+0x74>)
 8000f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f54:	2201      	movs	r2, #1
 8000f56:	4013      	ands	r3, r2
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	2280      	movs	r2, #128	@ 0x80
 8000f60:	0212      	lsls	r2, r2, #8
 8000f62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	0021      	movs	r1, r4
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2202      	movs	r2, #2
 8000f6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2205      	movs	r2, #5
 8000f7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	187a      	adds	r2, r7, r1
 8000f80:	23a0      	movs	r3, #160	@ 0xa0
 8000f82:	05db      	lsls	r3, r3, #23
 8000f84:	0011      	movs	r1, r2
 8000f86:	0018      	movs	r0, r3
 8000f88:	f000 fe90 	bl	8001cac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b009      	add	sp, #36	@ 0x24
 8000f92:	bd90      	pop	{r4, r7, pc}
 8000f94:	40021000 	.word	0x40021000

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f9c:	46c0      	nop			@ (mov r8, r8)
 8000f9e:	e7fd      	b.n	8000f9c <NMI_Handler+0x4>

08000fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa4:	46c0      	nop			@ (mov r8, r8)
 8000fa6:	e7fd      	b.n	8000fa4 <HardFault_Handler+0x4>

08000fa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fac:	46c0      	nop			@ (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc0:	f000 f8ca 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd0:	4b03      	ldr	r3, [pc, #12]	@ (8000fe0 <TIM2_IRQHandler+0x14>)
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f001 ff50 	bl	8002e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	200000d4 	.word	0x200000d4

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f002 fc5c 	bl	80038d0 <__errno>
 8001018:	0003      	movs	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	2301      	movs	r3, #1
 8001020:	425b      	negs	r3, r3
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	18d2      	adds	r2, r2, r3
 8001032:	4b05      	ldr	r3, [pc, #20]	@ (8001048 <_sbrk+0x64>)
 8001034:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	0018      	movs	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	b006      	add	sp, #24
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20002000 	.word	0x20002000
 8001044:	00000400 	.word	0x00000400
 8001048:	2000017c 	.word	0x2000017c
 800104c:	200002d0 	.word	0x200002d0

08001050 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	46c0      	nop			@ (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800105c:	480d      	ldr	r0, [pc, #52]	@ (8001094 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800105e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001060:	f7ff fff6 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	480c      	ldr	r0, [pc, #48]	@ (8001098 <LoopForever+0x6>)
  ldr r1, =_edata
 8001066:	490d      	ldr	r1, [pc, #52]	@ (800109c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001068:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <LoopForever+0xe>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0a      	ldr	r2, [pc, #40]	@ (80010a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800107c:	4c0a      	ldr	r4, [pc, #40]	@ (80010a8 <LoopForever+0x16>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108a:	f002 fc27 	bl	80038dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108e:	f7ff f8d1 	bl	8000234 <main>

08001092 <LoopForever>:

LoopForever:
    b LoopForever
 8001092:	e7fe      	b.n	8001092 <LoopForever>
  ldr   r0, =_estack
 8001094:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800109c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010a0:	080042ec 	.word	0x080042ec
  ldr r2, =_sbss
 80010a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010a8:	200002cc 	.word	0x200002cc

080010ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC1_COMP_IRQHandler>
	...

080010b0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <HAL_Init+0x3c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_Init+0x3c>)
 80010c2:	2140      	movs	r1, #64	@ 0x40
 80010c4:	430a      	orrs	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c8:	2000      	movs	r0, #0
 80010ca:	f000 f811 	bl	80010f0 <HAL_InitTick>
 80010ce:	1e03      	subs	r3, r0, #0
 80010d0:	d003      	beq.n	80010da <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e001      	b.n	80010de <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010da:	f7ff fea5 	bl	8000e28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010de:	1dfb      	adds	r3, r7, #7
 80010e0:	781b      	ldrb	r3, [r3, #0]
}
 80010e2:	0018      	movs	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	40022000 	.word	0x40022000

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <HAL_InitTick+0x5c>)
 80010fa:	681c      	ldr	r4, [r3, #0]
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <HAL_InitTick+0x60>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	0019      	movs	r1, r3
 8001102:	23fa      	movs	r3, #250	@ 0xfa
 8001104:	0098      	lsls	r0, r3, #2
 8001106:	f7ff f809 	bl	800011c <__udivsi3>
 800110a:	0003      	movs	r3, r0
 800110c:	0019      	movs	r1, r3
 800110e:	0020      	movs	r0, r4
 8001110:	f7ff f804 	bl	800011c <__udivsi3>
 8001114:	0003      	movs	r3, r0
 8001116:	0018      	movs	r0, r3
 8001118:	f000 fdbb 	bl	8001c92 <HAL_SYSTICK_Config>
 800111c:	1e03      	subs	r3, r0, #0
 800111e:	d001      	beq.n	8001124 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e00f      	b.n	8001144 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d80b      	bhi.n	8001142 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	2301      	movs	r3, #1
 800112e:	425b      	negs	r3, r3
 8001130:	2200      	movs	r2, #0
 8001132:	0018      	movs	r0, r3
 8001134:	f000 fd88 	bl	8001c48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_InitTick+0x64>)
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b003      	add	sp, #12
 800114a:	bd90      	pop	{r4, r7, pc}
 800114c:	20000000 	.word	0x20000000
 8001150:	20000008 	.word	0x20000008
 8001154:	20000004 	.word	0x20000004

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <HAL_IncTick+0x1c>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	001a      	movs	r2, r3
 8001162:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <HAL_IncTick+0x20>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	18d2      	adds	r2, r2, r3
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <HAL_IncTick+0x20>)
 800116a:	601a      	str	r2, [r3, #0]
}
 800116c:	46c0      	nop			@ (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	20000008 	.word	0x20000008
 8001178:	20000180 	.word	0x20000180

0800117c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  return uwTick;
 8001180:	4b02      	ldr	r3, [pc, #8]	@ (800118c <HAL_GetTick+0x10>)
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	0018      	movs	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	20000180 	.word	0x20000180

08001190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff fff0 	bl	800117c <HAL_GetTick>
 800119c:	0003      	movs	r3, r0
 800119e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3301      	adds	r3, #1
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <HAL_Delay+0x44>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	001a      	movs	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	189b      	adds	r3, r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	f7ff ffe0 	bl	800117c <HAL_GetTick>
 80011bc:	0002      	movs	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	46c0      	nop			@ (mov r8, r8)
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b004      	add	sp, #16
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	20000008 	.word	0x20000008

080011d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e159      	b.n	800149e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10a      	bne.n	8001208 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2250      	movs	r2, #80	@ 0x50
 80011fc:	2100      	movs	r1, #0
 80011fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	0018      	movs	r0, r3
 8001204:	f7ff fe24 	bl	8000e50 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800120c:	2210      	movs	r2, #16
 800120e:	4013      	ands	r3, r2
 8001210:	2b10      	cmp	r3, #16
 8001212:	d005      	beq.n	8001220 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2204      	movs	r2, #4
 800121c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800121e:	d00b      	beq.n	8001238 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001224:	2210      	movs	r2, #16
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2250      	movs	r2, #80	@ 0x50
 8001230:	2100      	movs	r1, #0
 8001232:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e132      	b.n	800149e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800123c:	4a9a      	ldr	r2, [pc, #616]	@ (80014a8 <HAL_ADC_Init+0x2d0>)
 800123e:	4013      	ands	r3, r2
 8001240:	2202      	movs	r2, #2
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2203      	movs	r2, #3
 8001250:	4013      	ands	r3, r2
 8001252:	2b01      	cmp	r3, #1
 8001254:	d108      	bne.n	8001268 <HAL_ADC_Init+0x90>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2201      	movs	r2, #1
 800125e:	4013      	ands	r3, r2
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_ADC_Init+0x90>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_ADC_Init+0x92>
 8001268:	2300      	movs	r3, #0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d149      	bne.n	8001302 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	23c0      	movs	r3, #192	@ 0xc0
 8001274:	061b      	lsls	r3, r3, #24
 8001276:	429a      	cmp	r2, r3
 8001278:	d00b      	beq.n	8001292 <HAL_ADC_Init+0xba>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685a      	ldr	r2, [r3, #4]
 800127e:	2380      	movs	r3, #128	@ 0x80
 8001280:	05db      	lsls	r3, r3, #23
 8001282:	429a      	cmp	r2, r3
 8001284:	d005      	beq.n	8001292 <HAL_ADC_Init+0xba>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	061b      	lsls	r3, r3, #24
 800128e:	429a      	cmp	r2, r3
 8001290:	d111      	bne.n	80012b6 <HAL_ADC_Init+0xde>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	0892      	lsrs	r2, r2, #2
 80012a0:	611a      	str	r2, [r3, #16]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6919      	ldr	r1, [r3, #16]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	e014      	b.n	80012e0 <HAL_ADC_Init+0x108>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	0892      	lsrs	r2, r2, #2
 80012c4:	611a      	str	r2, [r3, #16]
 80012c6:	4b79      	ldr	r3, [pc, #484]	@ (80014ac <HAL_ADC_Init+0x2d4>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b78      	ldr	r3, [pc, #480]	@ (80014ac <HAL_ADC_Init+0x2d4>)
 80012cc:	4978      	ldr	r1, [pc, #480]	@ (80014b0 <HAL_ADC_Init+0x2d8>)
 80012ce:	400a      	ands	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	4b76      	ldr	r3, [pc, #472]	@ (80014ac <HAL_ADC_Init+0x2d4>)
 80012d4:	6819      	ldr	r1, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4b74      	ldr	r3, [pc, #464]	@ (80014ac <HAL_ADC_Init+0x2d4>)
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2118      	movs	r1, #24
 80012ec:	438a      	bics	r2, r1
 80012ee:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68d9      	ldr	r1, [r3, #12]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001302:	4b6a      	ldr	r3, [pc, #424]	@ (80014ac <HAL_ADC_Init+0x2d4>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b69      	ldr	r3, [pc, #420]	@ (80014ac <HAL_ADC_Init+0x2d4>)
 8001308:	496a      	ldr	r1, [pc, #424]	@ (80014b4 <HAL_ADC_Init+0x2dc>)
 800130a:	400a      	ands	r2, r1
 800130c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800130e:	4b67      	ldr	r3, [pc, #412]	@ (80014ac <HAL_ADC_Init+0x2d4>)
 8001310:	6819      	ldr	r1, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001316:	065a      	lsls	r2, r3, #25
 8001318:	4b64      	ldr	r3, [pc, #400]	@ (80014ac <HAL_ADC_Init+0x2d4>)
 800131a:	430a      	orrs	r2, r1
 800131c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	055b      	lsls	r3, r3, #21
 8001328:	4013      	ands	r3, r2
 800132a:	d108      	bne.n	800133e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2180      	movs	r1, #128	@ 0x80
 8001338:	0549      	lsls	r1, r1, #21
 800133a:	430a      	orrs	r2, r1
 800133c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	495b      	ldr	r1, [pc, #364]	@ (80014b8 <HAL_ADC_Init+0x2e0>)
 800134a:	400a      	ands	r2, r1
 800134c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68d9      	ldr	r1, [r3, #12]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d101      	bne.n	8001364 <HAL_ADC_Init+0x18c>
 8001360:	2304      	movs	r3, #4
 8001362:	e000      	b.n	8001366 <HAL_ADC_Init+0x18e>
 8001364:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001366:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2020      	movs	r0, #32
 800136c:	5c1b      	ldrb	r3, [r3, r0]
 800136e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001370:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	202c      	movs	r0, #44	@ 0x2c
 8001376:	5c1b      	ldrb	r3, [r3, r0]
 8001378:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800137a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001380:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001388:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001390:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800139e:	23c2      	movs	r3, #194	@ 0xc2
 80013a0:	33ff      	adds	r3, #255	@ 0xff
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d00b      	beq.n	80013be <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68d9      	ldr	r1, [r3, #12]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2221      	movs	r2, #33	@ 0x21
 80013c2:	5c9b      	ldrb	r3, [r3, r2]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d11a      	bne.n	80013fe <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2220      	movs	r2, #32
 80013cc:	5c9b      	ldrb	r3, [r3, r2]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d109      	bne.n	80013e6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2180      	movs	r1, #128	@ 0x80
 80013de:	0249      	lsls	r1, r1, #9
 80013e0:	430a      	orrs	r2, r1
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	e00b      	b.n	80013fe <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ea:	2220      	movs	r2, #32
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f6:	2201      	movs	r2, #1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001402:	2b01      	cmp	r3, #1
 8001404:	d11f      	bne.n	8001446 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	492a      	ldr	r1, [pc, #168]	@ (80014bc <HAL_ADC_Init+0x2e4>)
 8001412:	400a      	ands	r2, r1
 8001414:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6919      	ldr	r1, [r3, #16]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001424:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800142a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	430a      	orrs	r2, r1
 8001432:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	691a      	ldr	r2, [r3, #16]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2101      	movs	r1, #1
 8001440:	430a      	orrs	r2, r1
 8001442:	611a      	str	r2, [r3, #16]
 8001444:	e00e      	b.n	8001464 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	2201      	movs	r2, #1
 800144e:	4013      	ands	r3, r2
 8001450:	2b01      	cmp	r3, #1
 8001452:	d107      	bne.n	8001464 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	691a      	ldr	r2, [r3, #16]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2101      	movs	r1, #1
 8001460:	438a      	bics	r2, r1
 8001462:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2107      	movs	r1, #7
 8001470:	438a      	bics	r2, r1
 8001472:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6959      	ldr	r1, [r3, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001490:	2203      	movs	r2, #3
 8001492:	4393      	bics	r3, r2
 8001494:	2201      	movs	r2, #1
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	0018      	movs	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b002      	add	sp, #8
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			@ (mov r8, r8)
 80014a8:	fffffefd 	.word	0xfffffefd
 80014ac:	40012708 	.word	0x40012708
 80014b0:	ffc3ffff 	.word	0xffc3ffff
 80014b4:	fdffffff 	.word	0xfdffffff
 80014b8:	fffe0219 	.word	0xfffe0219
 80014bc:	fffffc03 	.word	0xfffffc03

080014c0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c8:	230f      	movs	r3, #15
 80014ca:	18fb      	adds	r3, r7, r3
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2204      	movs	r2, #4
 80014d8:	4013      	ands	r3, r2
 80014da:	d138      	bne.n	800154e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2250      	movs	r2, #80	@ 0x50
 80014e0:	5c9b      	ldrb	r3, [r3, r2]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Start+0x2a>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e038      	b.n	800155c <HAL_ADC_Start+0x9c>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2250      	movs	r2, #80	@ 0x50
 80014ee:	2101      	movs	r1, #1
 80014f0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d007      	beq.n	800150a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80014fa:	230f      	movs	r3, #15
 80014fc:	18fc      	adds	r4, r7, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	0018      	movs	r0, r3
 8001502:	f000 f9b9 	bl	8001878 <ADC_Enable>
 8001506:	0003      	movs	r3, r0
 8001508:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800150a:	230f      	movs	r3, #15
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d120      	bne.n	8001556 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001518:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <HAL_ADC_Start+0xa4>)
 800151a:	4013      	ands	r3, r2
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	0052      	lsls	r2, r2, #1
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2250      	movs	r2, #80	@ 0x50
 8001530:	2100      	movs	r1, #0
 8001532:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	221c      	movs	r2, #28
 800153a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2104      	movs	r1, #4
 8001548:	430a      	orrs	r2, r1
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	e003      	b.n	8001556 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800154e:	230f      	movs	r3, #15
 8001550:	18fb      	adds	r3, r7, r3
 8001552:	2202      	movs	r2, #2
 8001554:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001556:	230f      	movs	r3, #15
 8001558:	18fb      	adds	r3, r7, r3
 800155a:	781b      	ldrb	r3, [r3, #0]
}
 800155c:	0018      	movs	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	b005      	add	sp, #20
 8001562:	bd90      	pop	{r4, r7, pc}
 8001564:	fffff0fe 	.word	0xfffff0fe

08001568 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001570:	230f      	movs	r3, #15
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2250      	movs	r2, #80	@ 0x50
 800157c:	5c9b      	ldrb	r3, [r3, r2]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_ADC_Stop+0x1e>
 8001582:	2302      	movs	r3, #2
 8001584:	e029      	b.n	80015da <HAL_ADC_Stop+0x72>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2250      	movs	r2, #80	@ 0x50
 800158a:	2101      	movs	r1, #1
 800158c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800158e:	250f      	movs	r5, #15
 8001590:	197c      	adds	r4, r7, r5
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	f000 fa3e 	bl	8001a16 <ADC_ConversionStop>
 800159a:	0003      	movs	r3, r0
 800159c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800159e:	197b      	adds	r3, r7, r5
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d112      	bne.n	80015cc <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80015a6:	197c      	adds	r4, r7, r5
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	0018      	movs	r0, r3
 80015ac:	f000 f9cc 	bl	8001948 <ADC_Disable>
 80015b0:	0003      	movs	r3, r0
 80015b2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80015b4:	197b      	adds	r3, r7, r5
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d107      	bne.n	80015cc <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <HAL_ADC_Stop+0x7c>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	2201      	movs	r2, #1
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2250      	movs	r2, #80	@ 0x50
 80015d0:	2100      	movs	r1, #0
 80015d2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80015d4:	230f      	movs	r3, #15
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	781b      	ldrb	r3, [r3, #0]
}
 80015da:	0018      	movs	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	b004      	add	sp, #16
 80015e0:	bdb0      	pop	{r4, r5, r7, pc}
 80015e2:	46c0      	nop			@ (mov r8, r8)
 80015e4:	fffffefe 	.word	0xfffffefe

080015e8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d102      	bne.n	8001608 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001602:	2308      	movs	r3, #8
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	e014      	b.n	8001632 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2201      	movs	r2, #1
 8001610:	4013      	ands	r3, r2
 8001612:	2b01      	cmp	r3, #1
 8001614:	d10b      	bne.n	800162e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800161a:	2220      	movs	r2, #32
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2250      	movs	r2, #80	@ 0x50
 8001626:	2100      	movs	r1, #0
 8001628:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e072      	b.n	8001714 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800162e:	230c      	movs	r3, #12
 8001630:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001632:	f7ff fda3 	bl	800117c <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800163a:	e01f      	b.n	800167c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	d01c      	beq.n	800167c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <HAL_ADC_PollForConversion+0x70>
 8001648:	f7ff fd98 	bl	800117c <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d211      	bcs.n	800167c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4013      	ands	r3, r2
 8001662:	d10b      	bne.n	800167c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001668:	2204      	movs	r2, #4
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2250      	movs	r2, #80	@ 0x50
 8001674:	2100      	movs	r1, #0
 8001676:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e04b      	b.n	8001714 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	4013      	ands	r3, r2
 8001686:	d0d9      	beq.n	800163c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800168c:	2280      	movs	r2, #128	@ 0x80
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	23c0      	movs	r3, #192	@ 0xc0
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4013      	ands	r3, r2
 80016a2:	d12e      	bne.n	8001702 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2220      	movs	r2, #32
 80016a8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d129      	bne.n	8001702 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2208      	movs	r2, #8
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d122      	bne.n	8001702 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2204      	movs	r2, #4
 80016c4:	4013      	ands	r3, r2
 80016c6:	d110      	bne.n	80016ea <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	210c      	movs	r1, #12
 80016d4:	438a      	bics	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016dc:	4a0f      	ldr	r2, [pc, #60]	@ (800171c <HAL_ADC_PollForConversion+0x134>)
 80016de:	4013      	ands	r3, r2
 80016e0:	2201      	movs	r2, #1
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80016e8:	e00b      	b.n	8001702 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ee:	2220      	movs	r2, #32
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	2201      	movs	r2, #1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	220c      	movs	r2, #12
 8001710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b004      	add	sp, #16
 800171a:	bd80      	pop	{r7, pc}
 800171c:	fffffefe 	.word	0xfffffefe

08001720 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800172e:	0018      	movs	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2250      	movs	r2, #80	@ 0x50
 8001746:	5c9b      	ldrb	r3, [r3, r2]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_ADC_ConfigChannel+0x18>
 800174c:	2302      	movs	r3, #2
 800174e:	e085      	b.n	800185c <HAL_ADC_ConfigChannel+0x124>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2250      	movs	r2, #80	@ 0x50
 8001754:	2101      	movs	r1, #1
 8001756:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2204      	movs	r2, #4
 8001760:	4013      	ands	r3, r2
 8001762:	d00b      	beq.n	800177c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001768:	2220      	movs	r2, #32
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2250      	movs	r2, #80	@ 0x50
 8001774:	2100      	movs	r1, #0
 8001776:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e06f      	b.n	800185c <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a38      	ldr	r2, [pc, #224]	@ (8001864 <HAL_ADC_ConfigChannel+0x12c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d035      	beq.n	80017f2 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	035b      	lsls	r3, r3, #13
 8001792:	0b5a      	lsrs	r2, r3, #13
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	@ 0x80
 80017a2:	02db      	lsls	r3, r3, #11
 80017a4:	4013      	ands	r3, r2
 80017a6:	d009      	beq.n	80017bc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80017a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <HAL_ADC_ConfigChannel+0x130>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001868 <HAL_ADC_ConfigChannel+0x130>)
 80017ae:	2180      	movs	r1, #128	@ 0x80
 80017b0:	0409      	lsls	r1, r1, #16
 80017b2:	430a      	orrs	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80017b6:	200a      	movs	r0, #10
 80017b8:	f000 f97a 	bl	8001ab0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2380      	movs	r3, #128	@ 0x80
 80017c2:	029b      	lsls	r3, r3, #10
 80017c4:	4013      	ands	r3, r2
 80017c6:	d006      	beq.n	80017d6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80017c8:	4b27      	ldr	r3, [pc, #156]	@ (8001868 <HAL_ADC_ConfigChannel+0x130>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b26      	ldr	r3, [pc, #152]	@ (8001868 <HAL_ADC_ConfigChannel+0x130>)
 80017ce:	2180      	movs	r1, #128	@ 0x80
 80017d0:	03c9      	lsls	r1, r1, #15
 80017d2:	430a      	orrs	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	2380      	movs	r3, #128	@ 0x80
 80017dc:	025b      	lsls	r3, r3, #9
 80017de:	4013      	ands	r3, r2
 80017e0:	d037      	beq.n	8001852 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80017e2:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <HAL_ADC_ConfigChannel+0x130>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b20      	ldr	r3, [pc, #128]	@ (8001868 <HAL_ADC_ConfigChannel+0x130>)
 80017e8:	2180      	movs	r1, #128	@ 0x80
 80017ea:	0449      	lsls	r1, r1, #17
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e02f      	b.n	8001852 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	035b      	lsls	r3, r3, #13
 80017fe:	0b5b      	lsrs	r3, r3, #13
 8001800:	43d9      	mvns	r1, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	400a      	ands	r2, r1
 8001808:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	2380      	movs	r3, #128	@ 0x80
 8001810:	02db      	lsls	r3, r3, #11
 8001812:	4013      	ands	r3, r2
 8001814:	d005      	beq.n	8001822 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001816:	4b14      	ldr	r3, [pc, #80]	@ (8001868 <HAL_ADC_ConfigChannel+0x130>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <HAL_ADC_ConfigChannel+0x130>)
 800181c:	4913      	ldr	r1, [pc, #76]	@ (800186c <HAL_ADC_ConfigChannel+0x134>)
 800181e:	400a      	ands	r2, r1
 8001820:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	2380      	movs	r3, #128	@ 0x80
 8001828:	029b      	lsls	r3, r3, #10
 800182a:	4013      	ands	r3, r2
 800182c:	d005      	beq.n	800183a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800182e:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <HAL_ADC_ConfigChannel+0x130>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <HAL_ADC_ConfigChannel+0x130>)
 8001834:	490e      	ldr	r1, [pc, #56]	@ (8001870 <HAL_ADC_ConfigChannel+0x138>)
 8001836:	400a      	ands	r2, r1
 8001838:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	@ 0x80
 8001840:	025b      	lsls	r3, r3, #9
 8001842:	4013      	ands	r3, r2
 8001844:	d005      	beq.n	8001852 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001846:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <HAL_ADC_ConfigChannel+0x130>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <HAL_ADC_ConfigChannel+0x130>)
 800184c:	4909      	ldr	r1, [pc, #36]	@ (8001874 <HAL_ADC_ConfigChannel+0x13c>)
 800184e:	400a      	ands	r2, r1
 8001850:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2250      	movs	r2, #80	@ 0x50
 8001856:	2100      	movs	r1, #0
 8001858:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}
 8001864:	00001001 	.word	0x00001001
 8001868:	40012708 	.word	0x40012708
 800186c:	ff7fffff 	.word	0xff7fffff
 8001870:	ffbfffff 	.word	0xffbfffff
 8001874:	feffffff 	.word	0xfeffffff

08001878 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2203      	movs	r2, #3
 800188c:	4013      	ands	r3, r2
 800188e:	2b01      	cmp	r3, #1
 8001890:	d108      	bne.n	80018a4 <ADC_Enable+0x2c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2201      	movs	r2, #1
 800189a:	4013      	ands	r3, r2
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <ADC_Enable+0x2c>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <ADC_Enable+0x2e>
 80018a4:	2300      	movs	r3, #0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d146      	bne.n	8001938 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a24      	ldr	r2, [pc, #144]	@ (8001944 <ADC_Enable+0xcc>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ba:	2210      	movs	r2, #16
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c6:	2201      	movs	r2, #1
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e033      	b.n	800193a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	430a      	orrs	r2, r1
 80018e0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f000 f8e4 	bl	8001ab0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80018e8:	f7ff fc48 	bl	800117c <HAL_GetTick>
 80018ec:	0003      	movs	r3, r0
 80018ee:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018f0:	e01b      	b.n	800192a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018f2:	f7ff fc43 	bl	800117c <HAL_GetTick>
 80018f6:	0002      	movs	r2, r0
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b0a      	cmp	r3, #10
 80018fe:	d914      	bls.n	800192a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	4013      	ands	r3, r2
 800190a:	2b01      	cmp	r3, #1
 800190c:	d00d      	beq.n	800192a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001912:	2210      	movs	r2, #16
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191e:	2201      	movs	r2, #1
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e007      	b.n	800193a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2201      	movs	r2, #1
 8001932:	4013      	ands	r3, r2
 8001934:	2b01      	cmp	r3, #1
 8001936:	d1dc      	bne.n	80018f2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	0018      	movs	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	b004      	add	sp, #16
 8001940:	bd80      	pop	{r7, pc}
 8001942:	46c0      	nop			@ (mov r8, r8)
 8001944:	80000017 	.word	0x80000017

08001948 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2203      	movs	r2, #3
 800195c:	4013      	ands	r3, r2
 800195e:	2b01      	cmp	r3, #1
 8001960:	d108      	bne.n	8001974 <ADC_Disable+0x2c>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	4013      	ands	r3, r2
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <ADC_Disable+0x2c>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <ADC_Disable+0x2e>
 8001974:	2300      	movs	r3, #0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d048      	beq.n	8001a0c <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2205      	movs	r2, #5
 8001982:	4013      	ands	r3, r2
 8001984:	2b01      	cmp	r3, #1
 8001986:	d110      	bne.n	80019aa <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2102      	movs	r1, #2
 8001994:	430a      	orrs	r2, r1
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2203      	movs	r2, #3
 800199e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019a0:	f7ff fbec 	bl	800117c <HAL_GetTick>
 80019a4:	0003      	movs	r3, r0
 80019a6:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019a8:	e029      	b.n	80019fe <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ae:	2210      	movs	r2, #16
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ba:	2201      	movs	r2, #1
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e023      	b.n	8001a0e <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019c6:	f7ff fbd9 	bl	800117c <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b0a      	cmp	r3, #10
 80019d2:	d914      	bls.n	80019fe <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2201      	movs	r2, #1
 80019dc:	4013      	ands	r3, r2
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d10d      	bne.n	80019fe <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e6:	2210      	movs	r2, #16
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f2:	2201      	movs	r2, #1
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e007      	b.n	8001a0e <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d0dc      	beq.n	80019c6 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b004      	add	sp, #16
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2204      	movs	r2, #4
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d03a      	beq.n	8001aa4 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2204      	movs	r2, #4
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d10d      	bne.n	8001a58 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2202      	movs	r2, #2
 8001a44:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8001a46:	d107      	bne.n	8001a58 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2110      	movs	r1, #16
 8001a54:	430a      	orrs	r2, r1
 8001a56:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a58:	f7ff fb90 	bl	800117c <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001a60:	e01a      	b.n	8001a98 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001a62:	f7ff fb8b 	bl	800117c <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b0a      	cmp	r3, #10
 8001a6e:	d913      	bls.n	8001a98 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2204      	movs	r2, #4
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d00d      	beq.n	8001a98 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a80:	2210      	movs	r2, #16
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e006      	b.n	8001aa6 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d1de      	bne.n	8001a62 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b004      	add	sp, #16
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <ADC_DelayMicroSecond+0x38>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	490b      	ldr	r1, [pc, #44]	@ (8001aec <ADC_DelayMicroSecond+0x3c>)
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f7fe fb2c 	bl	800011c <__udivsi3>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	001a      	movs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4353      	muls	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001ace:	e002      	b.n	8001ad6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f9      	bne.n	8001ad0 <ADC_DelayMicroSecond+0x20>
  }
}
 8001adc:	46c0      	nop			@ (mov r8, r8)
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	b004      	add	sp, #16
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	000f4240 	.word	0x000f4240

08001af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	0002      	movs	r2, r0
 8001af8:	1dfb      	adds	r3, r7, #7
 8001afa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	1dfb      	adds	r3, r7, #7
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b02:	d809      	bhi.n	8001b18 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b04:	1dfb      	adds	r3, r7, #7
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	001a      	movs	r2, r3
 8001b0a:	231f      	movs	r3, #31
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <__NVIC_EnableIRQ+0x30>)
 8001b10:	2101      	movs	r1, #1
 8001b12:	4091      	lsls	r1, r2
 8001b14:	000a      	movs	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
  }
}
 8001b18:	46c0      	nop			@ (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b002      	add	sp, #8
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	e000e100 	.word	0xe000e100

08001b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	1dfb      	adds	r3, r7, #7
 8001b30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	1dfb      	adds	r3, r7, #7
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b38:	d828      	bhi.n	8001b8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001bf8 <__NVIC_SetPriority+0xd4>)
 8001b3c:	1dfb      	adds	r3, r7, #7
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	b25b      	sxtb	r3, r3
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	33c0      	adds	r3, #192	@ 0xc0
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	589b      	ldr	r3, [r3, r2]
 8001b4a:	1dfa      	adds	r2, r7, #7
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	0011      	movs	r1, r2
 8001b50:	2203      	movs	r2, #3
 8001b52:	400a      	ands	r2, r1
 8001b54:	00d2      	lsls	r2, r2, #3
 8001b56:	21ff      	movs	r1, #255	@ 0xff
 8001b58:	4091      	lsls	r1, r2
 8001b5a:	000a      	movs	r2, r1
 8001b5c:	43d2      	mvns	r2, r2
 8001b5e:	401a      	ands	r2, r3
 8001b60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	019b      	lsls	r3, r3, #6
 8001b66:	22ff      	movs	r2, #255	@ 0xff
 8001b68:	401a      	ands	r2, r3
 8001b6a:	1dfb      	adds	r3, r7, #7
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	0018      	movs	r0, r3
 8001b70:	2303      	movs	r3, #3
 8001b72:	4003      	ands	r3, r0
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b78:	481f      	ldr	r0, [pc, #124]	@ (8001bf8 <__NVIC_SetPriority+0xd4>)
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b25b      	sxtb	r3, r3
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	430a      	orrs	r2, r1
 8001b84:	33c0      	adds	r3, #192	@ 0xc0
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b8a:	e031      	b.n	8001bf0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bfc <__NVIC_SetPriority+0xd8>)
 8001b8e:	1dfb      	adds	r3, r7, #7
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	0019      	movs	r1, r3
 8001b94:	230f      	movs	r3, #15
 8001b96:	400b      	ands	r3, r1
 8001b98:	3b08      	subs	r3, #8
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3306      	adds	r3, #6
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	18d3      	adds	r3, r2, r3
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	1dfa      	adds	r2, r7, #7
 8001ba8:	7812      	ldrb	r2, [r2, #0]
 8001baa:	0011      	movs	r1, r2
 8001bac:	2203      	movs	r2, #3
 8001bae:	400a      	ands	r2, r1
 8001bb0:	00d2      	lsls	r2, r2, #3
 8001bb2:	21ff      	movs	r1, #255	@ 0xff
 8001bb4:	4091      	lsls	r1, r2
 8001bb6:	000a      	movs	r2, r1
 8001bb8:	43d2      	mvns	r2, r2
 8001bba:	401a      	ands	r2, r3
 8001bbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	019b      	lsls	r3, r3, #6
 8001bc2:	22ff      	movs	r2, #255	@ 0xff
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	0018      	movs	r0, r3
 8001bcc:	2303      	movs	r3, #3
 8001bce:	4003      	ands	r3, r0
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bd4:	4809      	ldr	r0, [pc, #36]	@ (8001bfc <__NVIC_SetPriority+0xd8>)
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	001c      	movs	r4, r3
 8001bdc:	230f      	movs	r3, #15
 8001bde:	4023      	ands	r3, r4
 8001be0:	3b08      	subs	r3, #8
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	430a      	orrs	r2, r1
 8001be6:	3306      	adds	r3, #6
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	18c3      	adds	r3, r0, r3
 8001bec:	3304      	adds	r3, #4
 8001bee:	601a      	str	r2, [r3, #0]
}
 8001bf0:	46c0      	nop			@ (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b003      	add	sp, #12
 8001bf6:	bd90      	pop	{r4, r7, pc}
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	1e5a      	subs	r2, r3, #1
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	045b      	lsls	r3, r3, #17
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d301      	bcc.n	8001c18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c14:	2301      	movs	r3, #1
 8001c16:	e010      	b.n	8001c3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c18:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <SysTick_Config+0x44>)
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	3a01      	subs	r2, #1
 8001c1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c20:	2301      	movs	r3, #1
 8001c22:	425b      	negs	r3, r3
 8001c24:	2103      	movs	r1, #3
 8001c26:	0018      	movs	r0, r3
 8001c28:	f7ff ff7c 	bl	8001b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <SysTick_Config+0x44>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <SysTick_Config+0x44>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b002      	add	sp, #8
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	210f      	movs	r1, #15
 8001c54:	187b      	adds	r3, r7, r1
 8001c56:	1c02      	adds	r2, r0, #0
 8001c58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	0011      	movs	r1, r2
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7ff ff5d 	bl	8001b24 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001c6a:	46c0      	nop			@ (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b004      	add	sp, #16
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	0002      	movs	r2, r0
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c7e:	1dfb      	adds	r3, r7, #7
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7ff ff33 	bl	8001af0 <__NVIC_EnableIRQ>
}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b002      	add	sp, #8
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7ff ffaf 	bl	8001c00 <SysTick_Config>
 8001ca2:	0003      	movs	r3, r0
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b002      	add	sp, #8
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cc2:	e14f      	b.n	8001f64 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2101      	movs	r1, #1
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4091      	lsls	r1, r2
 8001cce:	000a      	movs	r2, r1
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d100      	bne.n	8001cdc <HAL_GPIO_Init+0x30>
 8001cda:	e140      	b.n	8001f5e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d005      	beq.n	8001cf4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2203      	movs	r2, #3
 8001cee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d130      	bne.n	8001d56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	409a      	lsls	r2, r3
 8001d02:	0013      	movs	r3, r2
 8001d04:	43da      	mvns	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	409a      	lsls	r2, r3
 8001d16:	0013      	movs	r3, r2
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	0013      	movs	r3, r2
 8001d32:	43da      	mvns	r2, r3
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	091b      	lsrs	r3, r3, #4
 8001d40:	2201      	movs	r2, #1
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
 8001d48:	0013      	movs	r3, r2
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d017      	beq.n	8001d92 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	0013      	movs	r3, r2
 8001d72:	43da      	mvns	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	409a      	lsls	r2, r3
 8001d84:	0013      	movs	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2203      	movs	r2, #3
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d123      	bne.n	8001de6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	0092      	lsls	r2, r2, #2
 8001da8:	58d3      	ldr	r3, [r2, r3]
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2207      	movs	r2, #7
 8001db0:	4013      	ands	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	220f      	movs	r2, #15
 8001db6:	409a      	lsls	r2, r3
 8001db8:	0013      	movs	r3, r2
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2107      	movs	r1, #7
 8001dca:	400b      	ands	r3, r1
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	6939      	ldr	r1, [r7, #16]
 8001de4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	2203      	movs	r2, #3
 8001df2:	409a      	lsls	r2, r3
 8001df4:	0013      	movs	r3, r2
 8001df6:	43da      	mvns	r2, r3
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2203      	movs	r2, #3
 8001e04:	401a      	ands	r2, r3
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	0013      	movs	r3, r2
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	23c0      	movs	r3, #192	@ 0xc0
 8001e20:	029b      	lsls	r3, r3, #10
 8001e22:	4013      	ands	r3, r2
 8001e24:	d100      	bne.n	8001e28 <HAL_GPIO_Init+0x17c>
 8001e26:	e09a      	b.n	8001f5e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e28:	4b54      	ldr	r3, [pc, #336]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e2c:	4b53      	ldr	r3, [pc, #332]	@ (8001f7c <HAL_GPIO_Init+0x2d0>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	430a      	orrs	r2, r1
 8001e32:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e34:	4a52      	ldr	r2, [pc, #328]	@ (8001f80 <HAL_GPIO_Init+0x2d4>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	589b      	ldr	r3, [r3, r2]
 8001e40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2203      	movs	r2, #3
 8001e46:	4013      	ands	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	220f      	movs	r2, #15
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	0013      	movs	r3, r2
 8001e50:	43da      	mvns	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	23a0      	movs	r3, #160	@ 0xa0
 8001e5c:	05db      	lsls	r3, r3, #23
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d019      	beq.n	8001e96 <HAL_GPIO_Init+0x1ea>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a47      	ldr	r2, [pc, #284]	@ (8001f84 <HAL_GPIO_Init+0x2d8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0x1e6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a46      	ldr	r2, [pc, #280]	@ (8001f88 <HAL_GPIO_Init+0x2dc>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00d      	beq.n	8001e8e <HAL_GPIO_Init+0x1e2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a45      	ldr	r2, [pc, #276]	@ (8001f8c <HAL_GPIO_Init+0x2e0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <HAL_GPIO_Init+0x1de>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a44      	ldr	r2, [pc, #272]	@ (8001f90 <HAL_GPIO_Init+0x2e4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d101      	bne.n	8001e86 <HAL_GPIO_Init+0x1da>
 8001e82:	2305      	movs	r3, #5
 8001e84:	e008      	b.n	8001e98 <HAL_GPIO_Init+0x1ec>
 8001e86:	2306      	movs	r3, #6
 8001e88:	e006      	b.n	8001e98 <HAL_GPIO_Init+0x1ec>
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e004      	b.n	8001e98 <HAL_GPIO_Init+0x1ec>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e002      	b.n	8001e98 <HAL_GPIO_Init+0x1ec>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x1ec>
 8001e96:	2300      	movs	r3, #0
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	2103      	movs	r1, #3
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	0092      	lsls	r2, r2, #2
 8001ea0:	4093      	lsls	r3, r2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea8:	4935      	ldr	r1, [pc, #212]	@ (8001f80 <HAL_GPIO_Init+0x2d4>)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb6:	4b37      	ldr	r3, [pc, #220]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	2380      	movs	r3, #128	@ 0x80
 8001ecc:	035b      	lsls	r3, r3, #13
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001eda:	4b2e      	ldr	r3, [pc, #184]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	43da      	mvns	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	2380      	movs	r3, #128	@ 0x80
 8001ef6:	039b      	lsls	r3, r3, #14
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f04:	4b23      	ldr	r3, [pc, #140]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001f0a:	4b22      	ldr	r3, [pc, #136]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43da      	mvns	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	029b      	lsls	r3, r3, #10
 8001f22:	4013      	ands	r3, r2
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f2e:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f34:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	025b      	lsls	r3, r3, #9
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f58:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <HAL_GPIO_Init+0x2e8>)
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	40da      	lsrs	r2, r3
 8001f6c:	1e13      	subs	r3, r2, #0
 8001f6e:	d000      	beq.n	8001f72 <HAL_GPIO_Init+0x2c6>
 8001f70:	e6a8      	b.n	8001cc4 <HAL_GPIO_Init+0x18>
  }
}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	46c0      	nop			@ (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b006      	add	sp, #24
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000
 8001f84:	50000400 	.word	0x50000400
 8001f88:	50000800 	.word	0x50000800
 8001f8c:	50000c00 	.word	0x50000c00
 8001f90:	50001c00 	.word	0x50001c00
 8001f94:	40010400 	.word	0x40010400

08001f98 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	000a      	movs	r2, r1
 8001fa2:	1cbb      	adds	r3, r7, #2
 8001fa4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	1cba      	adds	r2, r7, #2
 8001fac:	8812      	ldrh	r2, [r2, #0]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d004      	beq.n	8001fbc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb2:	230f      	movs	r3, #15
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
 8001fba:	e003      	b.n	8001fc4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fbc:	230f      	movs	r3, #15
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	781b      	ldrb	r3, [r3, #0]
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b004      	add	sp, #16
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	0008      	movs	r0, r1
 8001fdc:	0011      	movs	r1, r2
 8001fde:	1cbb      	adds	r3, r7, #2
 8001fe0:	1c02      	adds	r2, r0, #0
 8001fe2:	801a      	strh	r2, [r3, #0]
 8001fe4:	1c7b      	adds	r3, r7, #1
 8001fe6:	1c0a      	adds	r2, r1, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fea:	1c7b      	adds	r3, r7, #1
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff2:	1cbb      	adds	r3, r7, #2
 8001ff4:	881a      	ldrh	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ffa:	e003      	b.n	8002004 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ffc:	1cbb      	adds	r3, r7, #2
 8001ffe:	881a      	ldrh	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002004:	46c0      	nop			@ (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b5b0      	push	{r4, r5, r7, lr}
 800200e:	b08a      	sub	sp, #40	@ 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	f000 fbaf 	bl	800277e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002020:	4bcf      	ldr	r3, [pc, #828]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	220c      	movs	r2, #12
 8002026:	4013      	ands	r3, r2
 8002028:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800202a:	4bcd      	ldr	r3, [pc, #820]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	2380      	movs	r3, #128	@ 0x80
 8002030:	025b      	lsls	r3, r3, #9
 8002032:	4013      	ands	r3, r2
 8002034:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2201      	movs	r2, #1
 800203c:	4013      	ands	r3, r2
 800203e:	d100      	bne.n	8002042 <HAL_RCC_OscConfig+0x36>
 8002040:	e07e      	b.n	8002140 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d007      	beq.n	8002058 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d112      	bne.n	8002074 <HAL_RCC_OscConfig+0x68>
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	025b      	lsls	r3, r3, #9
 8002054:	429a      	cmp	r2, r3
 8002056:	d10d      	bne.n	8002074 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002058:	4bc1      	ldr	r3, [pc, #772]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	029b      	lsls	r3, r3, #10
 8002060:	4013      	ands	r3, r2
 8002062:	d100      	bne.n	8002066 <HAL_RCC_OscConfig+0x5a>
 8002064:	e06b      	b.n	800213e <HAL_RCC_OscConfig+0x132>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d167      	bne.n	800213e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	f000 fb85 	bl	800277e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	2380      	movs	r3, #128	@ 0x80
 800207a:	025b      	lsls	r3, r3, #9
 800207c:	429a      	cmp	r2, r3
 800207e:	d107      	bne.n	8002090 <HAL_RCC_OscConfig+0x84>
 8002080:	4bb7      	ldr	r3, [pc, #732]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4bb6      	ldr	r3, [pc, #728]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002086:	2180      	movs	r1, #128	@ 0x80
 8002088:	0249      	lsls	r1, r1, #9
 800208a:	430a      	orrs	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e027      	b.n	80020e0 <HAL_RCC_OscConfig+0xd4>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	23a0      	movs	r3, #160	@ 0xa0
 8002096:	02db      	lsls	r3, r3, #11
 8002098:	429a      	cmp	r2, r3
 800209a:	d10e      	bne.n	80020ba <HAL_RCC_OscConfig+0xae>
 800209c:	4bb0      	ldr	r3, [pc, #704]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4baf      	ldr	r3, [pc, #700]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80020a2:	2180      	movs	r1, #128	@ 0x80
 80020a4:	02c9      	lsls	r1, r1, #11
 80020a6:	430a      	orrs	r2, r1
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	4bad      	ldr	r3, [pc, #692]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4bac      	ldr	r3, [pc, #688]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80020b0:	2180      	movs	r1, #128	@ 0x80
 80020b2:	0249      	lsls	r1, r1, #9
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e012      	b.n	80020e0 <HAL_RCC_OscConfig+0xd4>
 80020ba:	4ba9      	ldr	r3, [pc, #676]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4ba8      	ldr	r3, [pc, #672]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80020c0:	49a8      	ldr	r1, [pc, #672]	@ (8002364 <HAL_RCC_OscConfig+0x358>)
 80020c2:	400a      	ands	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	4ba6      	ldr	r3, [pc, #664]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	2380      	movs	r3, #128	@ 0x80
 80020cc:	025b      	lsls	r3, r3, #9
 80020ce:	4013      	ands	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4ba2      	ldr	r3, [pc, #648]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4ba1      	ldr	r3, [pc, #644]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80020da:	49a3      	ldr	r1, [pc, #652]	@ (8002368 <HAL_RCC_OscConfig+0x35c>)
 80020dc:	400a      	ands	r2, r1
 80020de:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d015      	beq.n	8002114 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff f848 	bl	800117c <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020f0:	e009      	b.n	8002106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f2:	f7ff f843 	bl	800117c <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b64      	cmp	r3, #100	@ 0x64
 80020fe:	d902      	bls.n	8002106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	f000 fb3c 	bl	800277e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002106:	4b96      	ldr	r3, [pc, #600]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	@ 0x80
 800210c:	029b      	lsls	r3, r3, #10
 800210e:	4013      	ands	r3, r2
 8002110:	d0ef      	beq.n	80020f2 <HAL_RCC_OscConfig+0xe6>
 8002112:	e015      	b.n	8002140 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff f832 	bl	800117c <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800211e:	f7ff f82d 	bl	800117c <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b64      	cmp	r3, #100	@ 0x64
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e326      	b.n	800277e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002130:	4b8b      	ldr	r3, [pc, #556]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	029b      	lsls	r3, r3, #10
 8002138:	4013      	ands	r3, r2
 800213a:	d1f0      	bne.n	800211e <HAL_RCC_OscConfig+0x112>
 800213c:	e000      	b.n	8002140 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d100      	bne.n	800214c <HAL_RCC_OscConfig+0x140>
 800214a:	e08b      	b.n	8002264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d005      	beq.n	8002164 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d13e      	bne.n	80021dc <HAL_RCC_OscConfig+0x1d0>
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d13b      	bne.n	80021dc <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002164:	4b7e      	ldr	r3, [pc, #504]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2204      	movs	r2, #4
 800216a:	4013      	ands	r3, r2
 800216c:	d004      	beq.n	8002178 <HAL_RCC_OscConfig+0x16c>
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e302      	b.n	800277e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b79      	ldr	r3, [pc, #484]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	4a7b      	ldr	r2, [pc, #492]	@ (800236c <HAL_RCC_OscConfig+0x360>)
 800217e:	4013      	ands	r3, r2
 8002180:	0019      	movs	r1, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	021a      	lsls	r2, r3, #8
 8002188:	4b75      	ldr	r3, [pc, #468]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800218e:	4b74      	ldr	r3, [pc, #464]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2209      	movs	r2, #9
 8002194:	4393      	bics	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	4b71      	ldr	r3, [pc, #452]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021a0:	f000 fc40 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80021a4:	0001      	movs	r1, r0
 80021a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	220f      	movs	r2, #15
 80021ae:	4013      	ands	r3, r2
 80021b0:	4a6f      	ldr	r2, [pc, #444]	@ (8002370 <HAL_RCC_OscConfig+0x364>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	000a      	movs	r2, r1
 80021b6:	40da      	lsrs	r2, r3
 80021b8:	4b6e      	ldr	r3, [pc, #440]	@ (8002374 <HAL_RCC_OscConfig+0x368>)
 80021ba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80021bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002378 <HAL_RCC_OscConfig+0x36c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2513      	movs	r5, #19
 80021c2:	197c      	adds	r4, r7, r5
 80021c4:	0018      	movs	r0, r3
 80021c6:	f7fe ff93 	bl	80010f0 <HAL_InitTick>
 80021ca:	0003      	movs	r3, r0
 80021cc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80021ce:	197b      	adds	r3, r7, r5
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d046      	beq.n	8002264 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80021d6:	197b      	adds	r3, r7, r5
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	e2d0      	b.n	800277e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d027      	beq.n	8002232 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2209      	movs	r2, #9
 80021e8:	4393      	bics	r3, r2
 80021ea:	0019      	movs	r1, r3
 80021ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe ffc2 	bl	800117c <HAL_GetTick>
 80021f8:	0003      	movs	r3, r0
 80021fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fe:	f7fe ffbd 	bl	800117c <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e2b6      	b.n	800277e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002210:	4b53      	ldr	r3, [pc, #332]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2204      	movs	r2, #4
 8002216:	4013      	ands	r3, r2
 8002218:	d0f1      	beq.n	80021fe <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221a:	4b51      	ldr	r3, [pc, #324]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4a53      	ldr	r2, [pc, #332]	@ (800236c <HAL_RCC_OscConfig+0x360>)
 8002220:	4013      	ands	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	021a      	lsls	r2, r3, #8
 800222a:	4b4d      	ldr	r3, [pc, #308]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 800222c:	430a      	orrs	r2, r1
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	e018      	b.n	8002264 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002232:	4b4b      	ldr	r3, [pc, #300]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4b4a      	ldr	r3, [pc, #296]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002238:	2101      	movs	r1, #1
 800223a:	438a      	bics	r2, r1
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7fe ff9d 	bl	800117c <HAL_GetTick>
 8002242:	0003      	movs	r3, r0
 8002244:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002248:	f7fe ff98 	bl	800117c <HAL_GetTick>
 800224c:	0002      	movs	r2, r0
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e291      	b.n	800277e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800225a:	4b41      	ldr	r3, [pc, #260]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2204      	movs	r2, #4
 8002260:	4013      	ands	r3, r2
 8002262:	d1f1      	bne.n	8002248 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2210      	movs	r2, #16
 800226a:	4013      	ands	r3, r2
 800226c:	d100      	bne.n	8002270 <HAL_RCC_OscConfig+0x264>
 800226e:	e0a1      	b.n	80023b4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d140      	bne.n	80022f8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002276:	4b3a      	ldr	r3, [pc, #232]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	@ 0x80
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4013      	ands	r3, r2
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x282>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e277      	b.n	800277e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800228e:	4b34      	ldr	r3, [pc, #208]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4a3a      	ldr	r2, [pc, #232]	@ (800237c <HAL_RCC_OscConfig+0x370>)
 8002294:	4013      	ands	r3, r2
 8002296:	0019      	movs	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800229c:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 800229e:	430a      	orrs	r2, r1
 80022a0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	0a19      	lsrs	r1, r3, #8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	061a      	lsls	r2, r3, #24
 80022b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ba:	0b5b      	lsrs	r3, r3, #13
 80022bc:	3301      	adds	r3, #1
 80022be:	2280      	movs	r2, #128	@ 0x80
 80022c0:	0212      	lsls	r2, r2, #8
 80022c2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80022c4:	4b26      	ldr	r3, [pc, #152]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	210f      	movs	r1, #15
 80022cc:	400b      	ands	r3, r1
 80022ce:	4928      	ldr	r1, [pc, #160]	@ (8002370 <HAL_RCC_OscConfig+0x364>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022d4:	4b27      	ldr	r3, [pc, #156]	@ (8002374 <HAL_RCC_OscConfig+0x368>)
 80022d6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80022d8:	4b27      	ldr	r3, [pc, #156]	@ (8002378 <HAL_RCC_OscConfig+0x36c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2513      	movs	r5, #19
 80022de:	197c      	adds	r4, r7, r5
 80022e0:	0018      	movs	r0, r3
 80022e2:	f7fe ff05 	bl	80010f0 <HAL_InitTick>
 80022e6:	0003      	movs	r3, r0
 80022e8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80022ea:	197b      	adds	r3, r7, r5
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d060      	beq.n	80023b4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80022f2:	197b      	adds	r3, r7, r5
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	e242      	b.n	800277e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03f      	beq.n	8002380 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002300:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b16      	ldr	r3, [pc, #88]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002306:	2180      	movs	r1, #128	@ 0x80
 8002308:	0049      	lsls	r1, r1, #1
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe ff35 	bl	800117c <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002318:	f7fe ff30 	bl	800117c <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e229      	b.n	800277e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800232a:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	2380      	movs	r3, #128	@ 0x80
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4013      	ands	r3, r2
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4a10      	ldr	r2, [pc, #64]	@ (800237c <HAL_RCC_OscConfig+0x370>)
 800233c:	4013      	ands	r3, r2
 800233e:	0019      	movs	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 8002346:	430a      	orrs	r2, r1
 8002348:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800234a:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	0a19      	lsrs	r1, r3, #8
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	061a      	lsls	r2, r3, #24
 8002358:	4b01      	ldr	r3, [pc, #4]	@ (8002360 <HAL_RCC_OscConfig+0x354>)
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	e029      	b.n	80023b4 <HAL_RCC_OscConfig+0x3a8>
 8002360:	40021000 	.word	0x40021000
 8002364:	fffeffff 	.word	0xfffeffff
 8002368:	fffbffff 	.word	0xfffbffff
 800236c:	ffffe0ff 	.word	0xffffe0ff
 8002370:	08004298 	.word	0x08004298
 8002374:	20000000 	.word	0x20000000
 8002378:	20000004 	.word	0x20000004
 800237c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002380:	4bbd      	ldr	r3, [pc, #756]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4bbc      	ldr	r3, [pc, #752]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 8002386:	49bd      	ldr	r1, [pc, #756]	@ (800267c <HAL_RCC_OscConfig+0x670>)
 8002388:	400a      	ands	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fef6 	bl	800117c <HAL_GetTick>
 8002390:	0003      	movs	r3, r0
 8002392:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002396:	f7fe fef1 	bl	800117c <HAL_GetTick>
 800239a:	0002      	movs	r2, r0
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1ea      	b.n	800277e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023a8:	4bb3      	ldr	r3, [pc, #716]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2208      	movs	r2, #8
 80023ba:	4013      	ands	r3, r2
 80023bc:	d036      	beq.n	800242c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d019      	beq.n	80023fa <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c6:	4bac      	ldr	r3, [pc, #688]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80023c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023ca:	4bab      	ldr	r3, [pc, #684]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80023cc:	2101      	movs	r1, #1
 80023ce:	430a      	orrs	r2, r1
 80023d0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7fe fed3 	bl	800117c <HAL_GetTick>
 80023d6:	0003      	movs	r3, r0
 80023d8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe fece 	bl	800117c <HAL_GetTick>
 80023e0:	0002      	movs	r2, r0
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1c7      	b.n	800277e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023ee:	4ba2      	ldr	r3, [pc, #648]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80023f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f2:	2202      	movs	r2, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	d0f1      	beq.n	80023dc <HAL_RCC_OscConfig+0x3d0>
 80023f8:	e018      	b.n	800242c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fa:	4b9f      	ldr	r3, [pc, #636]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80023fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023fe:	4b9e      	ldr	r3, [pc, #632]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 8002400:	2101      	movs	r1, #1
 8002402:	438a      	bics	r2, r1
 8002404:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7fe feb9 	bl	800117c <HAL_GetTick>
 800240a:	0003      	movs	r3, r0
 800240c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002410:	f7fe feb4 	bl	800117c <HAL_GetTick>
 8002414:	0002      	movs	r2, r0
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1ad      	b.n	800277e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002422:	4b95      	ldr	r3, [pc, #596]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 8002424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002426:	2202      	movs	r2, #2
 8002428:	4013      	ands	r3, r2
 800242a:	d1f1      	bne.n	8002410 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2204      	movs	r2, #4
 8002432:	4013      	ands	r3, r2
 8002434:	d100      	bne.n	8002438 <HAL_RCC_OscConfig+0x42c>
 8002436:	e0ae      	b.n	8002596 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002438:	2027      	movs	r0, #39	@ 0x27
 800243a:	183b      	adds	r3, r7, r0
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002440:	4b8d      	ldr	r3, [pc, #564]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 8002442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	055b      	lsls	r3, r3, #21
 8002448:	4013      	ands	r3, r2
 800244a:	d109      	bne.n	8002460 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244c:	4b8a      	ldr	r3, [pc, #552]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 800244e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002450:	4b89      	ldr	r3, [pc, #548]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 8002452:	2180      	movs	r1, #128	@ 0x80
 8002454:	0549      	lsls	r1, r1, #21
 8002456:	430a      	orrs	r2, r1
 8002458:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800245a:	183b      	adds	r3, r7, r0
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b87      	ldr	r3, [pc, #540]	@ (8002680 <HAL_RCC_OscConfig+0x674>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4013      	ands	r3, r2
 800246a:	d11a      	bne.n	80024a2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800246c:	4b84      	ldr	r3, [pc, #528]	@ (8002680 <HAL_RCC_OscConfig+0x674>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b83      	ldr	r3, [pc, #524]	@ (8002680 <HAL_RCC_OscConfig+0x674>)
 8002472:	2180      	movs	r1, #128	@ 0x80
 8002474:	0049      	lsls	r1, r1, #1
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800247a:	f7fe fe7f 	bl	800117c <HAL_GetTick>
 800247e:	0003      	movs	r3, r0
 8002480:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002484:	f7fe fe7a 	bl	800117c <HAL_GetTick>
 8002488:	0002      	movs	r2, r0
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	@ 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e173      	b.n	800277e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b7a      	ldr	r3, [pc, #488]	@ (8002680 <HAL_RCC_OscConfig+0x674>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4013      	ands	r3, r2
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	2380      	movs	r3, #128	@ 0x80
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d107      	bne.n	80024be <HAL_RCC_OscConfig+0x4b2>
 80024ae:	4b72      	ldr	r3, [pc, #456]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80024b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024b2:	4b71      	ldr	r3, [pc, #452]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80024b4:	2180      	movs	r1, #128	@ 0x80
 80024b6:	0049      	lsls	r1, r1, #1
 80024b8:	430a      	orrs	r2, r1
 80024ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80024bc:	e031      	b.n	8002522 <HAL_RCC_OscConfig+0x516>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x4d4>
 80024c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80024c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024ca:	4b6b      	ldr	r3, [pc, #428]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80024cc:	496b      	ldr	r1, [pc, #428]	@ (800267c <HAL_RCC_OscConfig+0x670>)
 80024ce:	400a      	ands	r2, r1
 80024d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80024d2:	4b69      	ldr	r3, [pc, #420]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80024d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024d6:	4b68      	ldr	r3, [pc, #416]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80024d8:	496a      	ldr	r1, [pc, #424]	@ (8002684 <HAL_RCC_OscConfig+0x678>)
 80024da:	400a      	ands	r2, r1
 80024dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80024de:	e020      	b.n	8002522 <HAL_RCC_OscConfig+0x516>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	23a0      	movs	r3, #160	@ 0xa0
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d10e      	bne.n	800250a <HAL_RCC_OscConfig+0x4fe>
 80024ec:	4b62      	ldr	r3, [pc, #392]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80024ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024f0:	4b61      	ldr	r3, [pc, #388]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80024f2:	2180      	movs	r1, #128	@ 0x80
 80024f4:	00c9      	lsls	r1, r1, #3
 80024f6:	430a      	orrs	r2, r1
 80024f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80024fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80024fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024fe:	4b5e      	ldr	r3, [pc, #376]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 8002500:	2180      	movs	r1, #128	@ 0x80
 8002502:	0049      	lsls	r1, r1, #1
 8002504:	430a      	orrs	r2, r1
 8002506:	651a      	str	r2, [r3, #80]	@ 0x50
 8002508:	e00b      	b.n	8002522 <HAL_RCC_OscConfig+0x516>
 800250a:	4b5b      	ldr	r3, [pc, #364]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 800250c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800250e:	4b5a      	ldr	r3, [pc, #360]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 8002510:	495a      	ldr	r1, [pc, #360]	@ (800267c <HAL_RCC_OscConfig+0x670>)
 8002512:	400a      	ands	r2, r1
 8002514:	651a      	str	r2, [r3, #80]	@ 0x50
 8002516:	4b58      	ldr	r3, [pc, #352]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 8002518:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800251a:	4b57      	ldr	r3, [pc, #348]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 800251c:	4959      	ldr	r1, [pc, #356]	@ (8002684 <HAL_RCC_OscConfig+0x678>)
 800251e:	400a      	ands	r2, r1
 8002520:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d015      	beq.n	8002556 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7fe fe27 	bl	800117c <HAL_GetTick>
 800252e:	0003      	movs	r3, r0
 8002530:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002532:	e009      	b.n	8002548 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7fe fe22 	bl	800117c <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	4a52      	ldr	r2, [pc, #328]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e11a      	b.n	800277e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002548:	4b4b      	ldr	r3, [pc, #300]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 800254a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4013      	ands	r3, r2
 8002552:	d0ef      	beq.n	8002534 <HAL_RCC_OscConfig+0x528>
 8002554:	e014      	b.n	8002580 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7fe fe11 	bl	800117c <HAL_GetTick>
 800255a:	0003      	movs	r3, r0
 800255c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800255e:	e009      	b.n	8002574 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002560:	f7fe fe0c 	bl	800117c <HAL_GetTick>
 8002564:	0002      	movs	r2, r0
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	4a47      	ldr	r2, [pc, #284]	@ (8002688 <HAL_RCC_OscConfig+0x67c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e104      	b.n	800277e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002574:	4b40      	ldr	r3, [pc, #256]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 8002576:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002578:	2380      	movs	r3, #128	@ 0x80
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4013      	ands	r3, r2
 800257e:	d1ef      	bne.n	8002560 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002580:	2327      	movs	r3, #39	@ 0x27
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d105      	bne.n	8002596 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258a:	4b3b      	ldr	r3, [pc, #236]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 800258c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800258e:	4b3a      	ldr	r3, [pc, #232]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 8002590:	493e      	ldr	r1, [pc, #248]	@ (800268c <HAL_RCC_OscConfig+0x680>)
 8002592:	400a      	ands	r2, r1
 8002594:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2220      	movs	r2, #32
 800259c:	4013      	ands	r3, r2
 800259e:	d049      	beq.n	8002634 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d026      	beq.n	80025f6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80025a8:	4b33      	ldr	r3, [pc, #204]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	4b32      	ldr	r3, [pc, #200]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80025ae:	2101      	movs	r1, #1
 80025b0:	430a      	orrs	r2, r1
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	4b30      	ldr	r3, [pc, #192]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80025b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80025ba:	2101      	movs	r1, #1
 80025bc:	430a      	orrs	r2, r1
 80025be:	635a      	str	r2, [r3, #52]	@ 0x34
 80025c0:	4b33      	ldr	r3, [pc, #204]	@ (8002690 <HAL_RCC_OscConfig+0x684>)
 80025c2:	6a1a      	ldr	r2, [r3, #32]
 80025c4:	4b32      	ldr	r3, [pc, #200]	@ (8002690 <HAL_RCC_OscConfig+0x684>)
 80025c6:	2180      	movs	r1, #128	@ 0x80
 80025c8:	0189      	lsls	r1, r1, #6
 80025ca:	430a      	orrs	r2, r1
 80025cc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe fdd5 	bl	800117c <HAL_GetTick>
 80025d2:	0003      	movs	r3, r0
 80025d4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d8:	f7fe fdd0 	bl	800117c <HAL_GetTick>
 80025dc:	0002      	movs	r2, r0
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e0c9      	b.n	800277e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025ea:	4b23      	ldr	r3, [pc, #140]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d0f1      	beq.n	80025d8 <HAL_RCC_OscConfig+0x5cc>
 80025f4:	e01e      	b.n	8002634 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80025f6:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 80025fc:	2101      	movs	r1, #1
 80025fe:	438a      	bics	r2, r1
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <HAL_RCC_OscConfig+0x684>)
 8002604:	6a1a      	ldr	r2, [r3, #32]
 8002606:	4b22      	ldr	r3, [pc, #136]	@ (8002690 <HAL_RCC_OscConfig+0x684>)
 8002608:	4922      	ldr	r1, [pc, #136]	@ (8002694 <HAL_RCC_OscConfig+0x688>)
 800260a:	400a      	ands	r2, r1
 800260c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe fdb5 	bl	800117c <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002618:	f7fe fdb0 	bl	800117c <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e0a9      	b.n	800277e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800262a:	4b13      	ldr	r3, [pc, #76]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2202      	movs	r2, #2
 8002630:	4013      	ands	r3, r2
 8002632:	d1f1      	bne.n	8002618 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	d100      	bne.n	800263e <HAL_RCC_OscConfig+0x632>
 800263c:	e09e      	b.n	800277c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	2b0c      	cmp	r3, #12
 8002642:	d100      	bne.n	8002646 <HAL_RCC_OscConfig+0x63a>
 8002644:	e077      	b.n	8002736 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264a:	2b02      	cmp	r3, #2
 800264c:	d158      	bne.n	8002700 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264e:	4b0a      	ldr	r3, [pc, #40]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4b09      	ldr	r3, [pc, #36]	@ (8002678 <HAL_RCC_OscConfig+0x66c>)
 8002654:	4910      	ldr	r1, [pc, #64]	@ (8002698 <HAL_RCC_OscConfig+0x68c>)
 8002656:	400a      	ands	r2, r1
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe fd8f 	bl	800117c <HAL_GetTick>
 800265e:	0003      	movs	r3, r0
 8002660:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002662:	e01b      	b.n	800269c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe fd8a 	bl	800117c <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d914      	bls.n	800269c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e083      	b.n	800277e <HAL_RCC_OscConfig+0x772>
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	40021000 	.word	0x40021000
 800267c:	fffffeff 	.word	0xfffffeff
 8002680:	40007000 	.word	0x40007000
 8002684:	fffffbff 	.word	0xfffffbff
 8002688:	00001388 	.word	0x00001388
 800268c:	efffffff 	.word	0xefffffff
 8002690:	40010000 	.word	0x40010000
 8002694:	ffffdfff 	.word	0xffffdfff
 8002698:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800269c:	4b3a      	ldr	r3, [pc, #232]	@ (8002788 <HAL_RCC_OscConfig+0x77c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2380      	movs	r3, #128	@ 0x80
 80026a2:	049b      	lsls	r3, r3, #18
 80026a4:	4013      	ands	r3, r2
 80026a6:	d1dd      	bne.n	8002664 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a8:	4b37      	ldr	r3, [pc, #220]	@ (8002788 <HAL_RCC_OscConfig+0x77c>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a37      	ldr	r2, [pc, #220]	@ (800278c <HAL_RCC_OscConfig+0x780>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	0019      	movs	r1, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c0:	431a      	orrs	r2, r3
 80026c2:	4b31      	ldr	r3, [pc, #196]	@ (8002788 <HAL_RCC_OscConfig+0x77c>)
 80026c4:	430a      	orrs	r2, r1
 80026c6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002788 <HAL_RCC_OscConfig+0x77c>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002788 <HAL_RCC_OscConfig+0x77c>)
 80026ce:	2180      	movs	r1, #128	@ 0x80
 80026d0:	0449      	lsls	r1, r1, #17
 80026d2:	430a      	orrs	r2, r1
 80026d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7fe fd51 	bl	800117c <HAL_GetTick>
 80026da:	0003      	movs	r3, r0
 80026dc:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fe fd4c 	bl	800117c <HAL_GetTick>
 80026e4:	0002      	movs	r2, r0
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e045      	b.n	800277e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80026f2:	4b25      	ldr	r3, [pc, #148]	@ (8002788 <HAL_RCC_OscConfig+0x77c>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	2380      	movs	r3, #128	@ 0x80
 80026f8:	049b      	lsls	r3, r3, #18
 80026fa:	4013      	ands	r3, r2
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x6d4>
 80026fe:	e03d      	b.n	800277c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b21      	ldr	r3, [pc, #132]	@ (8002788 <HAL_RCC_OscConfig+0x77c>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <HAL_RCC_OscConfig+0x77c>)
 8002706:	4922      	ldr	r1, [pc, #136]	@ (8002790 <HAL_RCC_OscConfig+0x784>)
 8002708:	400a      	ands	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe fd36 	bl	800117c <HAL_GetTick>
 8002710:	0003      	movs	r3, r0
 8002712:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002716:	f7fe fd31 	bl	800117c <HAL_GetTick>
 800271a:	0002      	movs	r2, r0
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e02a      	b.n	800277e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002728:	4b17      	ldr	r3, [pc, #92]	@ (8002788 <HAL_RCC_OscConfig+0x77c>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2380      	movs	r3, #128	@ 0x80
 800272e:	049b      	lsls	r3, r3, #18
 8002730:	4013      	ands	r3, r2
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x70a>
 8002734:	e022      	b.n	800277c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e01d      	b.n	800277e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002742:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <HAL_RCC_OscConfig+0x77c>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	025b      	lsls	r3, r3, #9
 800274e:	401a      	ands	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002754:	429a      	cmp	r2, r3
 8002756:	d10f      	bne.n	8002778 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	23f0      	movs	r3, #240	@ 0xf0
 800275c:	039b      	lsls	r3, r3, #14
 800275e:	401a      	ands	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d107      	bne.n	8002778 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	23c0      	movs	r3, #192	@ 0xc0
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	401a      	ands	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	0018      	movs	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	b00a      	add	sp, #40	@ 0x28
 8002784:	bdb0      	pop	{r4, r5, r7, pc}
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	40021000 	.word	0x40021000
 800278c:	ff02ffff 	.word	0xff02ffff
 8002790:	feffffff 	.word	0xfeffffff

08002794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b5b0      	push	{r4, r5, r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e128      	b.n	80029fa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b96      	ldr	r3, [pc, #600]	@ (8002a04 <HAL_RCC_ClockConfig+0x270>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	4013      	ands	r3, r2
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d91e      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b93      	ldr	r3, [pc, #588]	@ (8002a04 <HAL_RCC_ClockConfig+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2201      	movs	r2, #1
 80027bc:	4393      	bics	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	4b90      	ldr	r3, [pc, #576]	@ (8002a04 <HAL_RCC_ClockConfig+0x270>)
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027c8:	f7fe fcd8 	bl	800117c <HAL_GetTick>
 80027cc:	0003      	movs	r3, r0
 80027ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d0:	e009      	b.n	80027e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d2:	f7fe fcd3 	bl	800117c <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	4a8a      	ldr	r2, [pc, #552]	@ (8002a08 <HAL_RCC_ClockConfig+0x274>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e109      	b.n	80029fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b87      	ldr	r3, [pc, #540]	@ (8002a04 <HAL_RCC_ClockConfig+0x270>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2201      	movs	r2, #1
 80027ec:	4013      	ands	r3, r2
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d1ee      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2202      	movs	r2, #2
 80027fa:	4013      	ands	r3, r2
 80027fc:	d009      	beq.n	8002812 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fe:	4b83      	ldr	r3, [pc, #524]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	22f0      	movs	r2, #240	@ 0xf0
 8002804:	4393      	bics	r3, r2
 8002806:	0019      	movs	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 800280e:	430a      	orrs	r2, r1
 8002810:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2201      	movs	r2, #1
 8002818:	4013      	ands	r3, r2
 800281a:	d100      	bne.n	800281e <HAL_RCC_ClockConfig+0x8a>
 800281c:	e089      	b.n	8002932 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002826:	4b79      	ldr	r3, [pc, #484]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	2380      	movs	r3, #128	@ 0x80
 800282c:	029b      	lsls	r3, r3, #10
 800282e:	4013      	ands	r3, r2
 8002830:	d120      	bne.n	8002874 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e0e1      	b.n	80029fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b03      	cmp	r3, #3
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800283e:	4b73      	ldr	r3, [pc, #460]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	2380      	movs	r3, #128	@ 0x80
 8002844:	049b      	lsls	r3, r3, #18
 8002846:	4013      	ands	r3, r2
 8002848:	d114      	bne.n	8002874 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0d5      	b.n	80029fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d106      	bne.n	8002864 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002856:	4b6d      	ldr	r3, [pc, #436]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2204      	movs	r2, #4
 800285c:	4013      	ands	r3, r2
 800285e:	d109      	bne.n	8002874 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0ca      	b.n	80029fa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002864:	4b69      	ldr	r3, [pc, #420]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2380      	movs	r3, #128	@ 0x80
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4013      	ands	r3, r2
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0c2      	b.n	80029fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002874:	4b65      	ldr	r3, [pc, #404]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2203      	movs	r2, #3
 800287a:	4393      	bics	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	4b62      	ldr	r3, [pc, #392]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 8002884:	430a      	orrs	r2, r1
 8002886:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002888:	f7fe fc78 	bl	800117c <HAL_GetTick>
 800288c:	0003      	movs	r3, r0
 800288e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d111      	bne.n	80028bc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002898:	e009      	b.n	80028ae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289a:	f7fe fc6f 	bl	800117c <HAL_GetTick>
 800289e:	0002      	movs	r2, r0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	4a58      	ldr	r2, [pc, #352]	@ (8002a08 <HAL_RCC_ClockConfig+0x274>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0a5      	b.n	80029fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ae:	4b57      	ldr	r3, [pc, #348]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	220c      	movs	r2, #12
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d1ef      	bne.n	800289a <HAL_RCC_ClockConfig+0x106>
 80028ba:	e03a      	b.n	8002932 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d111      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c4:	e009      	b.n	80028da <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c6:	f7fe fc59 	bl	800117c <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002a08 <HAL_RCC_ClockConfig+0x274>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e08f      	b.n	80029fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028da:	4b4c      	ldr	r3, [pc, #304]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	220c      	movs	r2, #12
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d1ef      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x132>
 80028e6:	e024      	b.n	8002932 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d11b      	bne.n	8002928 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80028f0:	e009      	b.n	8002906 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f2:	f7fe fc43 	bl	800117c <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	4a42      	ldr	r2, [pc, #264]	@ (8002a08 <HAL_RCC_ClockConfig+0x274>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e079      	b.n	80029fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002906:	4b41      	ldr	r3, [pc, #260]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	220c      	movs	r2, #12
 800290c:	4013      	ands	r3, r2
 800290e:	2b04      	cmp	r3, #4
 8002910:	d1ef      	bne.n	80028f2 <HAL_RCC_ClockConfig+0x15e>
 8002912:	e00e      	b.n	8002932 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7fe fc32 	bl	800117c <HAL_GetTick>
 8002918:	0002      	movs	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a08 <HAL_RCC_ClockConfig+0x274>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e068      	b.n	80029fa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002928:	4b38      	ldr	r3, [pc, #224]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	220c      	movs	r2, #12
 800292e:	4013      	ands	r3, r2
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002932:	4b34      	ldr	r3, [pc, #208]	@ (8002a04 <HAL_RCC_ClockConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2201      	movs	r2, #1
 8002938:	4013      	ands	r3, r2
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d21e      	bcs.n	800297e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002940:	4b30      	ldr	r3, [pc, #192]	@ (8002a04 <HAL_RCC_ClockConfig+0x270>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2201      	movs	r2, #1
 8002946:	4393      	bics	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a04 <HAL_RCC_ClockConfig+0x270>)
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002952:	f7fe fc13 	bl	800117c <HAL_GetTick>
 8002956:	0003      	movs	r3, r0
 8002958:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	e009      	b.n	8002970 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295c:	f7fe fc0e 	bl	800117c <HAL_GetTick>
 8002960:	0002      	movs	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	4a28      	ldr	r2, [pc, #160]	@ (8002a08 <HAL_RCC_ClockConfig+0x274>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e044      	b.n	80029fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002970:	4b24      	ldr	r3, [pc, #144]	@ (8002a04 <HAL_RCC_ClockConfig+0x270>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2201      	movs	r2, #1
 8002976:	4013      	ands	r3, r2
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d1ee      	bne.n	800295c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2204      	movs	r2, #4
 8002984:	4013      	ands	r3, r2
 8002986:	d009      	beq.n	800299c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002988:	4b20      	ldr	r3, [pc, #128]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a20      	ldr	r2, [pc, #128]	@ (8002a10 <HAL_RCC_ClockConfig+0x27c>)
 800298e:	4013      	ands	r3, r2
 8002990:	0019      	movs	r1, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	4b1d      	ldr	r3, [pc, #116]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 8002998:	430a      	orrs	r2, r1
 800299a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2208      	movs	r2, #8
 80029a2:	4013      	ands	r3, r2
 80029a4:	d00a      	beq.n	80029bc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029a6:	4b19      	ldr	r3, [pc, #100]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002a14 <HAL_RCC_ClockConfig+0x280>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	00da      	lsls	r2, r3, #3
 80029b6:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 80029b8:	430a      	orrs	r2, r1
 80029ba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029bc:	f000 f832 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80029c0:	0001      	movs	r1, r0
 80029c2:	4b12      	ldr	r3, [pc, #72]	@ (8002a0c <HAL_RCC_ClockConfig+0x278>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	220f      	movs	r2, #15
 80029ca:	4013      	ands	r3, r2
 80029cc:	4a12      	ldr	r2, [pc, #72]	@ (8002a18 <HAL_RCC_ClockConfig+0x284>)
 80029ce:	5cd3      	ldrb	r3, [r2, r3]
 80029d0:	000a      	movs	r2, r1
 80029d2:	40da      	lsrs	r2, r3
 80029d4:	4b11      	ldr	r3, [pc, #68]	@ (8002a1c <HAL_RCC_ClockConfig+0x288>)
 80029d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029d8:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <HAL_RCC_ClockConfig+0x28c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	250b      	movs	r5, #11
 80029de:	197c      	adds	r4, r7, r5
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7fe fb85 	bl	80010f0 <HAL_InitTick>
 80029e6:	0003      	movs	r3, r0
 80029e8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80029ea:	197b      	adds	r3, r7, r5
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80029f2:	197b      	adds	r3, r7, r5
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	e000      	b.n	80029fa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	0018      	movs	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b004      	add	sp, #16
 8002a00:	bdb0      	pop	{r4, r5, r7, pc}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	40022000 	.word	0x40022000
 8002a08:	00001388 	.word	0x00001388
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	fffff8ff 	.word	0xfffff8ff
 8002a14:	ffffc7ff 	.word	0xffffc7ff
 8002a18:	08004298 	.word	0x08004298
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	20000004 	.word	0x20000004

08002a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002a2a:	4b3c      	ldr	r3, [pc, #240]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	220c      	movs	r2, #12
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b0c      	cmp	r3, #12
 8002a38:	d013      	beq.n	8002a62 <HAL_RCC_GetSysClockFreq+0x3e>
 8002a3a:	d85c      	bhi.n	8002af6 <HAL_RCC_GetSysClockFreq+0xd2>
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d002      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0x22>
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d00b      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0x38>
 8002a44:	e057      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002a46:	4b35      	ldr	r3, [pc, #212]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2210      	movs	r2, #16
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d002      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002a50:	4b33      	ldr	r3, [pc, #204]	@ (8002b20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a52:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002a54:	e05d      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002a56:	4b33      	ldr	r3, [pc, #204]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a58:	613b      	str	r3, [r7, #16]
      break;
 8002a5a:	e05a      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a5c:	4b32      	ldr	r3, [pc, #200]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a5e:	613b      	str	r3, [r7, #16]
      break;
 8002a60:	e057      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	0c9b      	lsrs	r3, r3, #18
 8002a66:	220f      	movs	r2, #15
 8002a68:	4013      	ands	r3, r2
 8002a6a:	4a30      	ldr	r2, [pc, #192]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6c:	5cd3      	ldrb	r3, [r2, r3]
 8002a6e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	0d9b      	lsrs	r3, r3, #22
 8002a74:	2203      	movs	r2, #3
 8002a76:	4013      	ands	r3, r2
 8002a78:	3301      	adds	r3, #1
 8002a7a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7c:	4b27      	ldr	r3, [pc, #156]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	2380      	movs	r3, #128	@ 0x80
 8002a82:	025b      	lsls	r3, r3, #9
 8002a84:	4013      	ands	r3, r2
 8002a86:	d00f      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	000a      	movs	r2, r1
 8002a8c:	0152      	lsls	r2, r2, #5
 8002a8e:	1a52      	subs	r2, r2, r1
 8002a90:	0193      	lsls	r3, r2, #6
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	185b      	adds	r3, r3, r1
 8002a98:	025b      	lsls	r3, r3, #9
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7fd fb3d 	bl	800011c <__udivsi3>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	e023      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2210      	movs	r2, #16
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d00f      	beq.n	8002ad2 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	000a      	movs	r2, r1
 8002ab6:	0152      	lsls	r2, r2, #5
 8002ab8:	1a52      	subs	r2, r2, r1
 8002aba:	0193      	lsls	r3, r2, #6
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	185b      	adds	r3, r3, r1
 8002ac2:	021b      	lsls	r3, r3, #8
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f7fd fb28 	bl	800011c <__udivsi3>
 8002acc:	0003      	movs	r3, r0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e00e      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	000a      	movs	r2, r1
 8002ad6:	0152      	lsls	r2, r2, #5
 8002ad8:	1a52      	subs	r2, r2, r1
 8002ada:	0193      	lsls	r3, r2, #6
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	185b      	adds	r3, r3, r1
 8002ae2:	029b      	lsls	r3, r3, #10
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7fd fb18 	bl	800011c <__udivsi3>
 8002aec:	0003      	movs	r3, r0
 8002aee:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	613b      	str	r3, [r7, #16]
      break;
 8002af4:	e00d      	b.n	8002b12 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002af6:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	0b5b      	lsrs	r3, r3, #13
 8002afc:	2207      	movs	r2, #7
 8002afe:	4013      	ands	r3, r2
 8002b00:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	2280      	movs	r2, #128	@ 0x80
 8002b08:	0212      	lsls	r2, r2, #8
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	0013      	movs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
      break;
 8002b10:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002b12:	693b      	ldr	r3, [r7, #16]
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b006      	add	sp, #24
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	003d0900 	.word	0x003d0900
 8002b24:	00f42400 	.word	0x00f42400
 8002b28:	007a1200 	.word	0x007a1200
 8002b2c:	080042a8 	.word	0x080042a8

08002b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e032      	b.n	8002ba8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2239      	movs	r2, #57	@ 0x39
 8002b46:	5c9b      	ldrb	r3, [r3, r2]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d107      	bne.n	8002b5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2238      	movs	r2, #56	@ 0x38
 8002b52:	2100      	movs	r1, #0
 8002b54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7fe f9b5 	bl	8000ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2239      	movs	r2, #57	@ 0x39
 8002b62:	2102      	movs	r1, #2
 8002b64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	0019      	movs	r1, r3
 8002b70:	0010      	movs	r0, r2
 8002b72:	f000 fc0f 	bl	8003394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	223e      	movs	r2, #62	@ 0x3e
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	223a      	movs	r2, #58	@ 0x3a
 8002b82:	2101      	movs	r1, #1
 8002b84:	5499      	strb	r1, [r3, r2]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	223b      	movs	r2, #59	@ 0x3b
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	5499      	strb	r1, [r3, r2]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	223c      	movs	r2, #60	@ 0x3c
 8002b92:	2101      	movs	r1, #1
 8002b94:	5499      	strb	r1, [r3, r2]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	223d      	movs	r2, #61	@ 0x3d
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2239      	movs	r2, #57	@ 0x39
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2239      	movs	r2, #57	@ 0x39
 8002bbc:	5c9b      	ldrb	r3, [r3, r2]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d001      	beq.n	8002bc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e02e      	b.n	8002c26 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2239      	movs	r2, #57	@ 0x39
 8002bcc:	2102      	movs	r1, #2
 8002bce:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	@ 0x80
 8002bd6:	05db      	lsls	r3, r3, #23
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d009      	beq.n	8002bf0 <HAL_TIM_Base_Start+0x40>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a13      	ldr	r2, [pc, #76]	@ (8002c30 <HAL_TIM_Base_Start+0x80>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_TIM_Base_Start+0x40>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <HAL_TIM_Base_Start+0x84>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d111      	bne.n	8002c14 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d010      	beq.n	8002c24 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c12:	e007      	b.n	8002c24 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b004      	add	sp, #16
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	40010800 	.word	0x40010800
 8002c34:	40011400 	.word	0x40011400

08002c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2239      	movs	r2, #57	@ 0x39
 8002c44:	5c9b      	ldrb	r3, [r3, r2]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d001      	beq.n	8002c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e036      	b.n	8002cbe <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2239      	movs	r2, #57	@ 0x39
 8002c54:	2102      	movs	r1, #2
 8002c56:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2101      	movs	r1, #1
 8002c64:	430a      	orrs	r2, r1
 8002c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	05db      	lsls	r3, r3, #23
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d009      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x50>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a13      	ldr	r2, [pc, #76]	@ (8002cc8 <HAL_TIM_Base_Start_IT+0x90>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x50>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a12      	ldr	r2, [pc, #72]	@ (8002ccc <HAL_TIM_Base_Start_IT+0x94>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d111      	bne.n	8002cac <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2207      	movs	r2, #7
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d010      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002caa:	e007      	b.n	8002cbc <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b004      	add	sp, #16
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	40010800 	.word	0x40010800
 8002ccc:	40011400 	.word	0x40011400

08002cd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e032      	b.n	8002d48 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2239      	movs	r2, #57	@ 0x39
 8002ce6:	5c9b      	ldrb	r3, [r3, r2]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2238      	movs	r2, #56	@ 0x38
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f829 	bl	8002d50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2239      	movs	r2, #57	@ 0x39
 8002d02:	2102      	movs	r1, #2
 8002d04:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	0019      	movs	r1, r3
 8002d10:	0010      	movs	r0, r2
 8002d12:	f000 fb3f 	bl	8003394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	223e      	movs	r2, #62	@ 0x3e
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	223a      	movs	r2, #58	@ 0x3a
 8002d22:	2101      	movs	r1, #1
 8002d24:	5499      	strb	r1, [r3, r2]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	223b      	movs	r2, #59	@ 0x3b
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	5499      	strb	r1, [r3, r2]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	223c      	movs	r2, #60	@ 0x3c
 8002d32:	2101      	movs	r1, #1
 8002d34:	5499      	strb	r1, [r3, r2]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	223d      	movs	r2, #61	@ 0x3d
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2239      	movs	r2, #57	@ 0x39
 8002d42:	2101      	movs	r1, #1
 8002d44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d58:	46c0      	nop			@ (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d108      	bne.n	8002d82 <HAL_TIM_PWM_Start+0x22>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	223a      	movs	r2, #58	@ 0x3a
 8002d74:	5c9b      	ldrb	r3, [r3, r2]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	1e5a      	subs	r2, r3, #1
 8002d7c:	4193      	sbcs	r3, r2
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	e01f      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x62>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d108      	bne.n	8002d9a <HAL_TIM_PWM_Start+0x3a>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	223b      	movs	r2, #59	@ 0x3b
 8002d8c:	5c9b      	ldrb	r3, [r3, r2]
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	1e5a      	subs	r2, r3, #1
 8002d94:	4193      	sbcs	r3, r2
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	e013      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x62>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d108      	bne.n	8002db2 <HAL_TIM_PWM_Start+0x52>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	223c      	movs	r2, #60	@ 0x3c
 8002da4:	5c9b      	ldrb	r3, [r3, r2]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	1e5a      	subs	r2, r3, #1
 8002dac:	4193      	sbcs	r3, r2
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	e007      	b.n	8002dc2 <HAL_TIM_PWM_Start+0x62>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	223d      	movs	r2, #61	@ 0x3d
 8002db6:	5c9b      	ldrb	r3, [r3, r2]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	1e5a      	subs	r2, r3, #1
 8002dbe:	4193      	sbcs	r3, r2
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e04d      	b.n	8002e66 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_PWM_Start+0x7a>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	223a      	movs	r2, #58	@ 0x3a
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	5499      	strb	r1, [r3, r2]
 8002dd8:	e013      	b.n	8002e02 <HAL_TIM_PWM_Start+0xa2>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_PWM_Start+0x8a>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	223b      	movs	r2, #59	@ 0x3b
 8002de4:	2102      	movs	r1, #2
 8002de6:	5499      	strb	r1, [r3, r2]
 8002de8:	e00b      	b.n	8002e02 <HAL_TIM_PWM_Start+0xa2>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_PWM_Start+0x9a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	223c      	movs	r2, #60	@ 0x3c
 8002df4:	2102      	movs	r1, #2
 8002df6:	5499      	strb	r1, [r3, r2]
 8002df8:	e003      	b.n	8002e02 <HAL_TIM_PWM_Start+0xa2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	223d      	movs	r2, #61	@ 0x3d
 8002dfe:	2102      	movs	r1, #2
 8002e00:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6839      	ldr	r1, [r7, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 fcba 	bl	8003784 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	2380      	movs	r3, #128	@ 0x80
 8002e16:	05db      	lsls	r3, r3, #23
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d009      	beq.n	8002e30 <HAL_TIM_PWM_Start+0xd0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a13      	ldr	r2, [pc, #76]	@ (8002e70 <HAL_TIM_PWM_Start+0x110>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_TIM_PWM_Start+0xd0>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a12      	ldr	r2, [pc, #72]	@ (8002e74 <HAL_TIM_PWM_Start+0x114>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d111      	bne.n	8002e54 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2207      	movs	r2, #7
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d010      	beq.n	8002e64 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e52:	e007      	b.n	8002e64 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2101      	movs	r1, #1
 8002e60:	430a      	orrs	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b004      	add	sp, #16
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	40010800 	.word	0x40010800
 8002e74:	40011400 	.word	0x40011400

08002e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2202      	movs	r2, #2
 8002e94:	4013      	ands	r3, r2
 8002e96:	d021      	beq.n	8002edc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d01d      	beq.n	8002edc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	4252      	negs	r2, r2
 8002ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d004      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f000 fa50 	bl	8003364 <HAL_TIM_IC_CaptureCallback>
 8002ec4:	e007      	b.n	8002ed6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 fa43 	bl	8003354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f000 fa4f 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d022      	beq.n	8002f2a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d01e      	beq.n	8002f2a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2205      	movs	r2, #5
 8002ef2:	4252      	negs	r2, r2
 8002ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	23c0      	movs	r3, #192	@ 0xc0
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4013      	ands	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 fa29 	bl	8003364 <HAL_TIM_IC_CaptureCallback>
 8002f12:	e007      	b.n	8002f24 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f000 fa1c 	bl	8003354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 fa28 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d021      	beq.n	8002f76 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2208      	movs	r2, #8
 8002f36:	4013      	ands	r3, r2
 8002f38:	d01d      	beq.n	8002f76 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2209      	movs	r2, #9
 8002f40:	4252      	negs	r2, r2
 8002f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2204      	movs	r2, #4
 8002f48:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	2203      	movs	r2, #3
 8002f52:	4013      	ands	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f000 fa03 	bl	8003364 <HAL_TIM_IC_CaptureCallback>
 8002f5e:	e007      	b.n	8002f70 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 f9f6 	bl	8003354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f000 fa02 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2210      	movs	r2, #16
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d022      	beq.n	8002fc4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2210      	movs	r2, #16
 8002f82:	4013      	ands	r3, r2
 8002f84:	d01e      	beq.n	8002fc4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2211      	movs	r2, #17
 8002f8c:	4252      	negs	r2, r2
 8002f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2208      	movs	r2, #8
 8002f94:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	23c0      	movs	r3, #192	@ 0xc0
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d004      	beq.n	8002fae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 f9dc 	bl	8003364 <HAL_TIM_IC_CaptureCallback>
 8002fac:	e007      	b.n	8002fbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 f9cf 	bl	8003354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 f9db 	bl	8003374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d00c      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d008      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	4252      	negs	r2, r2
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f000 f9af 	bl	8003344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2240      	movs	r2, #64	@ 0x40
 8002fea:	4013      	ands	r3, r2
 8002fec:	d00c      	beq.n	8003008 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2240      	movs	r2, #64	@ 0x40
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d008      	beq.n	8003008 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2241      	movs	r2, #65	@ 0x41
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0018      	movs	r0, r3
 8003004:	f000 f9be 	bl	8003384 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003008:	46c0      	nop			@ (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	b004      	add	sp, #16
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	2317      	movs	r3, #23
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2238      	movs	r2, #56	@ 0x38
 8003028:	5c9b      	ldrb	r3, [r3, r2]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_TIM_PWM_ConfigChannel+0x22>
 800302e:	2302      	movs	r3, #2
 8003030:	e0ad      	b.n	800318e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2238      	movs	r2, #56	@ 0x38
 8003036:	2101      	movs	r1, #1
 8003038:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b0c      	cmp	r3, #12
 800303e:	d100      	bne.n	8003042 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003040:	e076      	b.n	8003130 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b0c      	cmp	r3, #12
 8003046:	d900      	bls.n	800304a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003048:	e095      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x166>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d04e      	beq.n	80030ee <HAL_TIM_PWM_ConfigChannel+0xde>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b08      	cmp	r3, #8
 8003054:	d900      	bls.n	8003058 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003056:	e08e      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_PWM_ConfigChannel+0x56>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b04      	cmp	r3, #4
 8003062:	d021      	beq.n	80030a8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003064:	e087      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	0011      	movs	r1, r2
 800306e:	0018      	movs	r0, r3
 8003070:	f000 f9ea 	bl	8003448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2108      	movs	r1, #8
 8003080:	430a      	orrs	r2, r1
 8003082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2104      	movs	r1, #4
 8003090:	438a      	bics	r2, r1
 8003092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6999      	ldr	r1, [r3, #24]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	619a      	str	r2, [r3, #24]
      break;
 80030a6:	e06b      	b.n	8003180 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	0011      	movs	r1, r2
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 fa05 	bl	80034c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2180      	movs	r1, #128	@ 0x80
 80030c2:	0109      	lsls	r1, r1, #4
 80030c4:	430a      	orrs	r2, r1
 80030c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4931      	ldr	r1, [pc, #196]	@ (8003198 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6999      	ldr	r1, [r3, #24]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	021a      	lsls	r2, r3, #8
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	619a      	str	r2, [r3, #24]
      break;
 80030ec:	e048      	b.n	8003180 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	0011      	movs	r1, r2
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 fa24 	bl	8003544 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2108      	movs	r1, #8
 8003108:	430a      	orrs	r2, r1
 800310a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2104      	movs	r1, #4
 8003118:	438a      	bics	r2, r1
 800311a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69d9      	ldr	r1, [r3, #28]
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	61da      	str	r2, [r3, #28]
      break;
 800312e:	e027      	b.n	8003180 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	0011      	movs	r1, r2
 8003138:	0018      	movs	r0, r3
 800313a:	f000 fa43 	bl	80035c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2180      	movs	r1, #128	@ 0x80
 800314a:	0109      	lsls	r1, r1, #4
 800314c:	430a      	orrs	r2, r1
 800314e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69da      	ldr	r2, [r3, #28]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	490f      	ldr	r1, [pc, #60]	@ (8003198 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800315c:	400a      	ands	r2, r1
 800315e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69d9      	ldr	r1, [r3, #28]
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	021a      	lsls	r2, r3, #8
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	61da      	str	r2, [r3, #28]
      break;
 8003174:	e004      	b.n	8003180 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003176:	2317      	movs	r3, #23
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
      break;
 800317e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2238      	movs	r2, #56	@ 0x38
 8003184:	2100      	movs	r1, #0
 8003186:	5499      	strb	r1, [r3, r2]

  return status;
 8003188:	2317      	movs	r3, #23
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	781b      	ldrb	r3, [r3, #0]
}
 800318e:	0018      	movs	r0, r3
 8003190:	46bd      	mov	sp, r7
 8003192:	b006      	add	sp, #24
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	fffffbff 	.word	0xfffffbff

0800319c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031a6:	230f      	movs	r3, #15
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2238      	movs	r2, #56	@ 0x38
 80031b2:	5c9b      	ldrb	r3, [r3, r2]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_TIM_ConfigClockSource+0x20>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e0bc      	b.n	8003336 <HAL_TIM_ConfigClockSource+0x19a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2238      	movs	r2, #56	@ 0x38
 80031c0:	2101      	movs	r1, #1
 80031c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2239      	movs	r2, #57	@ 0x39
 80031c8:	2102      	movs	r1, #2
 80031ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2277      	movs	r2, #119	@ 0x77
 80031d8:	4393      	bics	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4a58      	ldr	r2, [pc, #352]	@ (8003340 <HAL_TIM_ConfigClockSource+0x1a4>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2280      	movs	r2, #128	@ 0x80
 80031f2:	0192      	lsls	r2, r2, #6
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d040      	beq.n	800327a <HAL_TIM_ConfigClockSource+0xde>
 80031f8:	2280      	movs	r2, #128	@ 0x80
 80031fa:	0192      	lsls	r2, r2, #6
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d900      	bls.n	8003202 <HAL_TIM_ConfigClockSource+0x66>
 8003200:	e088      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x178>
 8003202:	2280      	movs	r2, #128	@ 0x80
 8003204:	0152      	lsls	r2, r2, #5
 8003206:	4293      	cmp	r3, r2
 8003208:	d100      	bne.n	800320c <HAL_TIM_ConfigClockSource+0x70>
 800320a:	e088      	b.n	800331e <HAL_TIM_ConfigClockSource+0x182>
 800320c:	2280      	movs	r2, #128	@ 0x80
 800320e:	0152      	lsls	r2, r2, #5
 8003210:	4293      	cmp	r3, r2
 8003212:	d900      	bls.n	8003216 <HAL_TIM_ConfigClockSource+0x7a>
 8003214:	e07e      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x178>
 8003216:	2b70      	cmp	r3, #112	@ 0x70
 8003218:	d018      	beq.n	800324c <HAL_TIM_ConfigClockSource+0xb0>
 800321a:	d900      	bls.n	800321e <HAL_TIM_ConfigClockSource+0x82>
 800321c:	e07a      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x178>
 800321e:	2b60      	cmp	r3, #96	@ 0x60
 8003220:	d04f      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x126>
 8003222:	d900      	bls.n	8003226 <HAL_TIM_ConfigClockSource+0x8a>
 8003224:	e076      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x178>
 8003226:	2b50      	cmp	r3, #80	@ 0x50
 8003228:	d03b      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x106>
 800322a:	d900      	bls.n	800322e <HAL_TIM_ConfigClockSource+0x92>
 800322c:	e072      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x178>
 800322e:	2b40      	cmp	r3, #64	@ 0x40
 8003230:	d057      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x146>
 8003232:	d900      	bls.n	8003236 <HAL_TIM_ConfigClockSource+0x9a>
 8003234:	e06e      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x178>
 8003236:	2b30      	cmp	r3, #48	@ 0x30
 8003238:	d063      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x166>
 800323a:	d86b      	bhi.n	8003314 <HAL_TIM_ConfigClockSource+0x178>
 800323c:	2b20      	cmp	r3, #32
 800323e:	d060      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x166>
 8003240:	d868      	bhi.n	8003314 <HAL_TIM_ConfigClockSource+0x178>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d05d      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x166>
 8003246:	2b10      	cmp	r3, #16
 8003248:	d05b      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x166>
 800324a:	e063      	b.n	8003314 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800325c:	f000 fa72 	bl	8003744 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2277      	movs	r2, #119	@ 0x77
 800326c:	4313      	orrs	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	609a      	str	r2, [r3, #8]
      break;
 8003278:	e052      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800328a:	f000 fa5b 	bl	8003744 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2180      	movs	r1, #128	@ 0x80
 800329a:	01c9      	lsls	r1, r1, #7
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
      break;
 80032a0:	e03e      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ae:	001a      	movs	r2, r3
 80032b0:	f000 f9ce 	bl	8003650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2150      	movs	r1, #80	@ 0x50
 80032ba:	0018      	movs	r0, r3
 80032bc:	f000 fa28 	bl	8003710 <TIM_ITRx_SetConfig>
      break;
 80032c0:	e02e      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ce:	001a      	movs	r2, r3
 80032d0:	f000 f9ec 	bl	80036ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2160      	movs	r1, #96	@ 0x60
 80032da:	0018      	movs	r0, r3
 80032dc:	f000 fa18 	bl	8003710 <TIM_ITRx_SetConfig>
      break;
 80032e0:	e01e      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ee:	001a      	movs	r2, r3
 80032f0:	f000 f9ae 	bl	8003650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2140      	movs	r1, #64	@ 0x40
 80032fa:	0018      	movs	r0, r3
 80032fc:	f000 fa08 	bl	8003710 <TIM_ITRx_SetConfig>
      break;
 8003300:	e00e      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	0019      	movs	r1, r3
 800330c:	0010      	movs	r0, r2
 800330e:	f000 f9ff 	bl	8003710 <TIM_ITRx_SetConfig>
      break;
 8003312:	e005      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003314:	230f      	movs	r3, #15
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	2201      	movs	r2, #1
 800331a:	701a      	strb	r2, [r3, #0]
      break;
 800331c:	e000      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800331e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2239      	movs	r2, #57	@ 0x39
 8003324:	2101      	movs	r1, #1
 8003326:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2238      	movs	r2, #56	@ 0x38
 800332c:	2100      	movs	r1, #0
 800332e:	5499      	strb	r1, [r3, r2]

  return status;
 8003330:	230f      	movs	r3, #15
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	781b      	ldrb	r3, [r3, #0]
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b004      	add	sp, #16
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	ffff00ff 	.word	0xffff00ff

08003344 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800334c:	46c0      	nop			@ (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800335c:	46c0      	nop			@ (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800336c:	46c0      	nop			@ (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b002      	add	sp, #8
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800337c:	46c0      	nop			@ (mov r8, r8)
 800337e:	46bd      	mov	sp, r7
 8003380:	b002      	add	sp, #8
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b002      	add	sp, #8
 8003392:	bd80      	pop	{r7, pc}

08003394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	2380      	movs	r3, #128	@ 0x80
 80033a8:	05db      	lsls	r3, r3, #23
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d007      	beq.n	80033be <TIM_Base_SetConfig+0x2a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a22      	ldr	r2, [pc, #136]	@ (800343c <TIM_Base_SetConfig+0xa8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d003      	beq.n	80033be <TIM_Base_SetConfig+0x2a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a21      	ldr	r2, [pc, #132]	@ (8003440 <TIM_Base_SetConfig+0xac>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d108      	bne.n	80033d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2270      	movs	r2, #112	@ 0x70
 80033c2:	4393      	bics	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	2380      	movs	r3, #128	@ 0x80
 80033d4:	05db      	lsls	r3, r3, #23
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d007      	beq.n	80033ea <TIM_Base_SetConfig+0x56>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a17      	ldr	r2, [pc, #92]	@ (800343c <TIM_Base_SetConfig+0xa8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d003      	beq.n	80033ea <TIM_Base_SetConfig+0x56>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a16      	ldr	r2, [pc, #88]	@ (8003440 <TIM_Base_SetConfig+0xac>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d108      	bne.n	80033fc <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a15      	ldr	r2, [pc, #84]	@ (8003444 <TIM_Base_SetConfig+0xb0>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2280      	movs	r2, #128	@ 0x80
 8003400:	4393      	bics	r3, r2
 8003402:	001a      	movs	r2, r3
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2204      	movs	r2, #4
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]
}
 8003434:	46c0      	nop			@ (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b004      	add	sp, #16
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40010800 	.word	0x40010800
 8003440:	40011400 	.word	0x40011400
 8003444:	fffffcff 	.word	0xfffffcff

08003448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	2201      	movs	r2, #1
 800345e:	4393      	bics	r3, r2
 8003460:	001a      	movs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2270      	movs	r2, #112	@ 0x70
 8003476:	4393      	bics	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2203      	movs	r2, #3
 800347e:	4393      	bics	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2202      	movs	r2, #2
 8003490:	4393      	bics	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	4313      	orrs	r3, r2
 800349c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	621a      	str	r2, [r3, #32]
}
 80034b8:	46c0      	nop			@ (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b006      	add	sp, #24
 80034be:	bd80      	pop	{r7, pc}

080034c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	2210      	movs	r2, #16
 80034d6:	4393      	bics	r3, r2
 80034d8:	001a      	movs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a13      	ldr	r2, [pc, #76]	@ (800353c <TIM_OC2_SetConfig+0x7c>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a12      	ldr	r2, [pc, #72]	@ (8003540 <TIM_OC2_SetConfig+0x80>)
 80034f6:	4013      	ands	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2220      	movs	r2, #32
 800350a:	4393      	bics	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	621a      	str	r2, [r3, #32]
}
 8003534:	46c0      	nop			@ (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	b006      	add	sp, #24
 800353a:	bd80      	pop	{r7, pc}
 800353c:	ffff8fff 	.word	0xffff8fff
 8003540:	fffffcff 	.word	0xfffffcff

08003544 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	4a18      	ldr	r2, [pc, #96]	@ (80035bc <TIM_OC3_SetConfig+0x78>)
 800355a:	401a      	ands	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2270      	movs	r2, #112	@ 0x70
 8003570:	4393      	bics	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2203      	movs	r2, #3
 8003578:	4393      	bics	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	4a0d      	ldr	r2, [pc, #52]	@ (80035c0 <TIM_OC3_SetConfig+0x7c>)
 800358a:	4013      	ands	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	621a      	str	r2, [r3, #32]
}
 80035b4:	46c0      	nop			@ (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b006      	add	sp, #24
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	fffffeff 	.word	0xfffffeff
 80035c0:	fffffdff 	.word	0xfffffdff

080035c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4a19      	ldr	r2, [pc, #100]	@ (8003640 <TIM_OC4_SetConfig+0x7c>)
 80035da:	401a      	ands	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a15      	ldr	r2, [pc, #84]	@ (8003644 <TIM_OC4_SetConfig+0x80>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4a14      	ldr	r2, [pc, #80]	@ (8003648 <TIM_OC4_SetConfig+0x84>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4a10      	ldr	r2, [pc, #64]	@ (800364c <TIM_OC4_SetConfig+0x88>)
 800360c:	4013      	ands	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	031b      	lsls	r3, r3, #12
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b006      	add	sp, #24
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	ffffefff 	.word	0xffffefff
 8003644:	ffff8fff 	.word	0xffff8fff
 8003648:	fffffcff 	.word	0xfffffcff
 800364c:	ffffdfff 	.word	0xffffdfff

08003650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	2201      	movs	r2, #1
 8003668:	4393      	bics	r3, r2
 800366a:	001a      	movs	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	22f0      	movs	r2, #240	@ 0xf0
 800367a:	4393      	bics	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	220a      	movs	r2, #10
 800368c:	4393      	bics	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	621a      	str	r2, [r3, #32]
}
 80036a4:	46c0      	nop			@ (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b006      	add	sp, #24
 80036aa:	bd80      	pop	{r7, pc}

080036ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	2210      	movs	r2, #16
 80036c4:	4393      	bics	r3, r2
 80036c6:	001a      	movs	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4a0d      	ldr	r2, [pc, #52]	@ (800370c <TIM_TI2_ConfigInputStage+0x60>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	031b      	lsls	r3, r3, #12
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	22a0      	movs	r2, #160	@ 0xa0
 80036e8:	4393      	bics	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	b006      	add	sp, #24
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	ffff0fff 	.word	0xffff0fff

08003710 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2270      	movs	r2, #112	@ 0x70
 8003724:	4393      	bics	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	2207      	movs	r2, #7
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	609a      	str	r2, [r3, #8]
}
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b004      	add	sp, #16
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	4a09      	ldr	r2, [pc, #36]	@ (8003780 <TIM_ETR_SetConfig+0x3c>)
 800375c:	4013      	ands	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	021a      	lsls	r2, r3, #8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	431a      	orrs	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4313      	orrs	r3, r2
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	46c0      	nop			@ (mov r8, r8)
 800377a:	46bd      	mov	sp, r7
 800377c:	b006      	add	sp, #24
 800377e:	bd80      	pop	{r7, pc}
 8003780:	ffff00ff 	.word	0xffff00ff

08003784 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	221f      	movs	r2, #31
 8003794:	4013      	ands	r3, r2
 8003796:	2201      	movs	r2, #1
 8003798:	409a      	lsls	r2, r3
 800379a:	0013      	movs	r3, r2
 800379c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	43d2      	mvns	r2, r2
 80037a6:	401a      	ands	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1a      	ldr	r2, [r3, #32]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	211f      	movs	r1, #31
 80037b4:	400b      	ands	r3, r1
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4099      	lsls	r1, r3
 80037ba:	000b      	movs	r3, r1
 80037bc:	431a      	orrs	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b006      	add	sp, #24
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2238      	movs	r2, #56	@ 0x38
 80037da:	5c9b      	ldrb	r3, [r3, r2]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e042      	b.n	800386a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2238      	movs	r2, #56	@ 0x38
 80037e8:	2101      	movs	r1, #1
 80037ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2239      	movs	r2, #57	@ 0x39
 80037f0:	2102      	movs	r1, #2
 80037f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2270      	movs	r2, #112	@ 0x70
 8003808:	4393      	bics	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	2380      	movs	r3, #128	@ 0x80
 8003824:	05db      	lsls	r3, r3, #23
 8003826:	429a      	cmp	r2, r3
 8003828:	d009      	beq.n	800383e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a11      	ldr	r2, [pc, #68]	@ (8003874 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d004      	beq.n	800383e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d10c      	bne.n	8003858 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2280      	movs	r2, #128	@ 0x80
 8003842:	4393      	bics	r3, r2
 8003844:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	4313      	orrs	r3, r2
 800384e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2239      	movs	r2, #57	@ 0x39
 800385c:	2101      	movs	r1, #1
 800385e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2238      	movs	r2, #56	@ 0x38
 8003864:	2100      	movs	r1, #0
 8003866:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	0018      	movs	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	b004      	add	sp, #16
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	40010800 	.word	0x40010800
 8003878:	40011400 	.word	0x40011400

0800387c <siprintf>:
 800387c:	b40e      	push	{r1, r2, r3}
 800387e:	b510      	push	{r4, lr}
 8003880:	2400      	movs	r4, #0
 8003882:	490c      	ldr	r1, [pc, #48]	@ (80038b4 <siprintf+0x38>)
 8003884:	b09d      	sub	sp, #116	@ 0x74
 8003886:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003888:	9002      	str	r0, [sp, #8]
 800388a:	9006      	str	r0, [sp, #24]
 800388c:	9107      	str	r1, [sp, #28]
 800388e:	9104      	str	r1, [sp, #16]
 8003890:	4809      	ldr	r0, [pc, #36]	@ (80038b8 <siprintf+0x3c>)
 8003892:	490a      	ldr	r1, [pc, #40]	@ (80038bc <siprintf+0x40>)
 8003894:	cb04      	ldmia	r3!, {r2}
 8003896:	9105      	str	r1, [sp, #20]
 8003898:	6800      	ldr	r0, [r0, #0]
 800389a:	a902      	add	r1, sp, #8
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	941b      	str	r4, [sp, #108]	@ 0x6c
 80038a0:	f000 f99e 	bl	8003be0 <_svfiprintf_r>
 80038a4:	9b02      	ldr	r3, [sp, #8]
 80038a6:	701c      	strb	r4, [r3, #0]
 80038a8:	b01d      	add	sp, #116	@ 0x74
 80038aa:	bc10      	pop	{r4}
 80038ac:	bc08      	pop	{r3}
 80038ae:	b003      	add	sp, #12
 80038b0:	4718      	bx	r3
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	7fffffff 	.word	0x7fffffff
 80038b8:	2000000c 	.word	0x2000000c
 80038bc:	ffff0208 	.word	0xffff0208

080038c0 <memset>:
 80038c0:	0003      	movs	r3, r0
 80038c2:	1882      	adds	r2, r0, r2
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d100      	bne.n	80038ca <memset+0xa>
 80038c8:	4770      	bx	lr
 80038ca:	7019      	strb	r1, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	e7f9      	b.n	80038c4 <memset+0x4>

080038d0 <__errno>:
 80038d0:	4b01      	ldr	r3, [pc, #4]	@ (80038d8 <__errno+0x8>)
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	4770      	bx	lr
 80038d6:	46c0      	nop			@ (mov r8, r8)
 80038d8:	2000000c 	.word	0x2000000c

080038dc <__libc_init_array>:
 80038dc:	b570      	push	{r4, r5, r6, lr}
 80038de:	2600      	movs	r6, #0
 80038e0:	4c0c      	ldr	r4, [pc, #48]	@ (8003914 <__libc_init_array+0x38>)
 80038e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003918 <__libc_init_array+0x3c>)
 80038e4:	1b64      	subs	r4, r4, r5
 80038e6:	10a4      	asrs	r4, r4, #2
 80038e8:	42a6      	cmp	r6, r4
 80038ea:	d109      	bne.n	8003900 <__libc_init_array+0x24>
 80038ec:	2600      	movs	r6, #0
 80038ee:	f000 fc61 	bl	80041b4 <_init>
 80038f2:	4c0a      	ldr	r4, [pc, #40]	@ (800391c <__libc_init_array+0x40>)
 80038f4:	4d0a      	ldr	r5, [pc, #40]	@ (8003920 <__libc_init_array+0x44>)
 80038f6:	1b64      	subs	r4, r4, r5
 80038f8:	10a4      	asrs	r4, r4, #2
 80038fa:	42a6      	cmp	r6, r4
 80038fc:	d105      	bne.n	800390a <__libc_init_array+0x2e>
 80038fe:	bd70      	pop	{r4, r5, r6, pc}
 8003900:	00b3      	lsls	r3, r6, #2
 8003902:	58eb      	ldr	r3, [r5, r3]
 8003904:	4798      	blx	r3
 8003906:	3601      	adds	r6, #1
 8003908:	e7ee      	b.n	80038e8 <__libc_init_array+0xc>
 800390a:	00b3      	lsls	r3, r6, #2
 800390c:	58eb      	ldr	r3, [r5, r3]
 800390e:	4798      	blx	r3
 8003910:	3601      	adds	r6, #1
 8003912:	e7f2      	b.n	80038fa <__libc_init_array+0x1e>
 8003914:	080042e4 	.word	0x080042e4
 8003918:	080042e4 	.word	0x080042e4
 800391c:	080042e8 	.word	0x080042e8
 8003920:	080042e4 	.word	0x080042e4

08003924 <__retarget_lock_acquire_recursive>:
 8003924:	4770      	bx	lr

08003926 <__retarget_lock_release_recursive>:
 8003926:	4770      	bx	lr

08003928 <_free_r>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	0005      	movs	r5, r0
 800392c:	1e0c      	subs	r4, r1, #0
 800392e:	d010      	beq.n	8003952 <_free_r+0x2a>
 8003930:	3c04      	subs	r4, #4
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	da00      	bge.n	800393a <_free_r+0x12>
 8003938:	18e4      	adds	r4, r4, r3
 800393a:	0028      	movs	r0, r5
 800393c:	f000 f8e0 	bl	8003b00 <__malloc_lock>
 8003940:	4a1d      	ldr	r2, [pc, #116]	@ (80039b8 <_free_r+0x90>)
 8003942:	6813      	ldr	r3, [r2, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d105      	bne.n	8003954 <_free_r+0x2c>
 8003948:	6063      	str	r3, [r4, #4]
 800394a:	6014      	str	r4, [r2, #0]
 800394c:	0028      	movs	r0, r5
 800394e:	f000 f8df 	bl	8003b10 <__malloc_unlock>
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	42a3      	cmp	r3, r4
 8003956:	d908      	bls.n	800396a <_free_r+0x42>
 8003958:	6820      	ldr	r0, [r4, #0]
 800395a:	1821      	adds	r1, r4, r0
 800395c:	428b      	cmp	r3, r1
 800395e:	d1f3      	bne.n	8003948 <_free_r+0x20>
 8003960:	6819      	ldr	r1, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	1809      	adds	r1, r1, r0
 8003966:	6021      	str	r1, [r4, #0]
 8003968:	e7ee      	b.n	8003948 <_free_r+0x20>
 800396a:	001a      	movs	r2, r3
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <_free_r+0x4e>
 8003972:	42a3      	cmp	r3, r4
 8003974:	d9f9      	bls.n	800396a <_free_r+0x42>
 8003976:	6811      	ldr	r1, [r2, #0]
 8003978:	1850      	adds	r0, r2, r1
 800397a:	42a0      	cmp	r0, r4
 800397c:	d10b      	bne.n	8003996 <_free_r+0x6e>
 800397e:	6820      	ldr	r0, [r4, #0]
 8003980:	1809      	adds	r1, r1, r0
 8003982:	1850      	adds	r0, r2, r1
 8003984:	6011      	str	r1, [r2, #0]
 8003986:	4283      	cmp	r3, r0
 8003988:	d1e0      	bne.n	800394c <_free_r+0x24>
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	1841      	adds	r1, r0, r1
 8003990:	6011      	str	r1, [r2, #0]
 8003992:	6053      	str	r3, [r2, #4]
 8003994:	e7da      	b.n	800394c <_free_r+0x24>
 8003996:	42a0      	cmp	r0, r4
 8003998:	d902      	bls.n	80039a0 <_free_r+0x78>
 800399a:	230c      	movs	r3, #12
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	e7d5      	b.n	800394c <_free_r+0x24>
 80039a0:	6820      	ldr	r0, [r4, #0]
 80039a2:	1821      	adds	r1, r4, r0
 80039a4:	428b      	cmp	r3, r1
 80039a6:	d103      	bne.n	80039b0 <_free_r+0x88>
 80039a8:	6819      	ldr	r1, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	1809      	adds	r1, r1, r0
 80039ae:	6021      	str	r1, [r4, #0]
 80039b0:	6063      	str	r3, [r4, #4]
 80039b2:	6054      	str	r4, [r2, #4]
 80039b4:	e7ca      	b.n	800394c <_free_r+0x24>
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	200002c8 	.word	0x200002c8

080039bc <sbrk_aligned>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4e0f      	ldr	r6, [pc, #60]	@ (80039fc <sbrk_aligned+0x40>)
 80039c0:	000d      	movs	r5, r1
 80039c2:	6831      	ldr	r1, [r6, #0]
 80039c4:	0004      	movs	r4, r0
 80039c6:	2900      	cmp	r1, #0
 80039c8:	d102      	bne.n	80039d0 <sbrk_aligned+0x14>
 80039ca:	f000 fb95 	bl	80040f8 <_sbrk_r>
 80039ce:	6030      	str	r0, [r6, #0]
 80039d0:	0029      	movs	r1, r5
 80039d2:	0020      	movs	r0, r4
 80039d4:	f000 fb90 	bl	80040f8 <_sbrk_r>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	d103      	bne.n	80039e4 <sbrk_aligned+0x28>
 80039dc:	2501      	movs	r5, #1
 80039de:	426d      	negs	r5, r5
 80039e0:	0028      	movs	r0, r5
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	2303      	movs	r3, #3
 80039e6:	1cc5      	adds	r5, r0, #3
 80039e8:	439d      	bics	r5, r3
 80039ea:	42a8      	cmp	r0, r5
 80039ec:	d0f8      	beq.n	80039e0 <sbrk_aligned+0x24>
 80039ee:	1a29      	subs	r1, r5, r0
 80039f0:	0020      	movs	r0, r4
 80039f2:	f000 fb81 	bl	80040f8 <_sbrk_r>
 80039f6:	3001      	adds	r0, #1
 80039f8:	d1f2      	bne.n	80039e0 <sbrk_aligned+0x24>
 80039fa:	e7ef      	b.n	80039dc <sbrk_aligned+0x20>
 80039fc:	200002c4 	.word	0x200002c4

08003a00 <_malloc_r>:
 8003a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a02:	2203      	movs	r2, #3
 8003a04:	1ccb      	adds	r3, r1, #3
 8003a06:	4393      	bics	r3, r2
 8003a08:	3308      	adds	r3, #8
 8003a0a:	0005      	movs	r5, r0
 8003a0c:	001f      	movs	r7, r3
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d234      	bcs.n	8003a7c <_malloc_r+0x7c>
 8003a12:	270c      	movs	r7, #12
 8003a14:	42b9      	cmp	r1, r7
 8003a16:	d833      	bhi.n	8003a80 <_malloc_r+0x80>
 8003a18:	0028      	movs	r0, r5
 8003a1a:	f000 f871 	bl	8003b00 <__malloc_lock>
 8003a1e:	4e37      	ldr	r6, [pc, #220]	@ (8003afc <_malloc_r+0xfc>)
 8003a20:	6833      	ldr	r3, [r6, #0]
 8003a22:	001c      	movs	r4, r3
 8003a24:	2c00      	cmp	r4, #0
 8003a26:	d12f      	bne.n	8003a88 <_malloc_r+0x88>
 8003a28:	0039      	movs	r1, r7
 8003a2a:	0028      	movs	r0, r5
 8003a2c:	f7ff ffc6 	bl	80039bc <sbrk_aligned>
 8003a30:	0004      	movs	r4, r0
 8003a32:	1c43      	adds	r3, r0, #1
 8003a34:	d15f      	bne.n	8003af6 <_malloc_r+0xf6>
 8003a36:	6834      	ldr	r4, [r6, #0]
 8003a38:	9400      	str	r4, [sp, #0]
 8003a3a:	9b00      	ldr	r3, [sp, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d14a      	bne.n	8003ad6 <_malloc_r+0xd6>
 8003a40:	2c00      	cmp	r4, #0
 8003a42:	d052      	beq.n	8003aea <_malloc_r+0xea>
 8003a44:	6823      	ldr	r3, [r4, #0]
 8003a46:	0028      	movs	r0, r5
 8003a48:	18e3      	adds	r3, r4, r3
 8003a4a:	9900      	ldr	r1, [sp, #0]
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	f000 fb53 	bl	80040f8 <_sbrk_r>
 8003a52:	9b01      	ldr	r3, [sp, #4]
 8003a54:	4283      	cmp	r3, r0
 8003a56:	d148      	bne.n	8003aea <_malloc_r+0xea>
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	0028      	movs	r0, r5
 8003a5c:	1aff      	subs	r7, r7, r3
 8003a5e:	0039      	movs	r1, r7
 8003a60:	f7ff ffac 	bl	80039bc <sbrk_aligned>
 8003a64:	3001      	adds	r0, #1
 8003a66:	d040      	beq.n	8003aea <_malloc_r+0xea>
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	19db      	adds	r3, r3, r7
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	6833      	ldr	r3, [r6, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	2a00      	cmp	r2, #0
 8003a74:	d133      	bne.n	8003ade <_malloc_r+0xde>
 8003a76:	9b00      	ldr	r3, [sp, #0]
 8003a78:	6033      	str	r3, [r6, #0]
 8003a7a:	e019      	b.n	8003ab0 <_malloc_r+0xb0>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	dac9      	bge.n	8003a14 <_malloc_r+0x14>
 8003a80:	230c      	movs	r3, #12
 8003a82:	602b      	str	r3, [r5, #0]
 8003a84:	2000      	movs	r0, #0
 8003a86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a88:	6821      	ldr	r1, [r4, #0]
 8003a8a:	1bc9      	subs	r1, r1, r7
 8003a8c:	d420      	bmi.n	8003ad0 <_malloc_r+0xd0>
 8003a8e:	290b      	cmp	r1, #11
 8003a90:	d90a      	bls.n	8003aa8 <_malloc_r+0xa8>
 8003a92:	19e2      	adds	r2, r4, r7
 8003a94:	6027      	str	r7, [r4, #0]
 8003a96:	42a3      	cmp	r3, r4
 8003a98:	d104      	bne.n	8003aa4 <_malloc_r+0xa4>
 8003a9a:	6032      	str	r2, [r6, #0]
 8003a9c:	6863      	ldr	r3, [r4, #4]
 8003a9e:	6011      	str	r1, [r2, #0]
 8003aa0:	6053      	str	r3, [r2, #4]
 8003aa2:	e005      	b.n	8003ab0 <_malloc_r+0xb0>
 8003aa4:	605a      	str	r2, [r3, #4]
 8003aa6:	e7f9      	b.n	8003a9c <_malloc_r+0x9c>
 8003aa8:	6862      	ldr	r2, [r4, #4]
 8003aaa:	42a3      	cmp	r3, r4
 8003aac:	d10e      	bne.n	8003acc <_malloc_r+0xcc>
 8003aae:	6032      	str	r2, [r6, #0]
 8003ab0:	0028      	movs	r0, r5
 8003ab2:	f000 f82d 	bl	8003b10 <__malloc_unlock>
 8003ab6:	0020      	movs	r0, r4
 8003ab8:	2207      	movs	r2, #7
 8003aba:	300b      	adds	r0, #11
 8003abc:	1d23      	adds	r3, r4, #4
 8003abe:	4390      	bics	r0, r2
 8003ac0:	1ac2      	subs	r2, r0, r3
 8003ac2:	4298      	cmp	r0, r3
 8003ac4:	d0df      	beq.n	8003a86 <_malloc_r+0x86>
 8003ac6:	1a1b      	subs	r3, r3, r0
 8003ac8:	50a3      	str	r3, [r4, r2]
 8003aca:	e7dc      	b.n	8003a86 <_malloc_r+0x86>
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	e7ef      	b.n	8003ab0 <_malloc_r+0xb0>
 8003ad0:	0023      	movs	r3, r4
 8003ad2:	6864      	ldr	r4, [r4, #4]
 8003ad4:	e7a6      	b.n	8003a24 <_malloc_r+0x24>
 8003ad6:	9c00      	ldr	r4, [sp, #0]
 8003ad8:	6863      	ldr	r3, [r4, #4]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	e7ad      	b.n	8003a3a <_malloc_r+0x3a>
 8003ade:	001a      	movs	r2, r3
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	42a3      	cmp	r3, r4
 8003ae4:	d1fb      	bne.n	8003ade <_malloc_r+0xde>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e7da      	b.n	8003aa0 <_malloc_r+0xa0>
 8003aea:	230c      	movs	r3, #12
 8003aec:	0028      	movs	r0, r5
 8003aee:	602b      	str	r3, [r5, #0]
 8003af0:	f000 f80e 	bl	8003b10 <__malloc_unlock>
 8003af4:	e7c6      	b.n	8003a84 <_malloc_r+0x84>
 8003af6:	6007      	str	r7, [r0, #0]
 8003af8:	e7da      	b.n	8003ab0 <_malloc_r+0xb0>
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	200002c8 	.word	0x200002c8

08003b00 <__malloc_lock>:
 8003b00:	b510      	push	{r4, lr}
 8003b02:	4802      	ldr	r0, [pc, #8]	@ (8003b0c <__malloc_lock+0xc>)
 8003b04:	f7ff ff0e 	bl	8003924 <__retarget_lock_acquire_recursive>
 8003b08:	bd10      	pop	{r4, pc}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	200002c0 	.word	0x200002c0

08003b10 <__malloc_unlock>:
 8003b10:	b510      	push	{r4, lr}
 8003b12:	4802      	ldr	r0, [pc, #8]	@ (8003b1c <__malloc_unlock+0xc>)
 8003b14:	f7ff ff07 	bl	8003926 <__retarget_lock_release_recursive>
 8003b18:	bd10      	pop	{r4, pc}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	200002c0 	.word	0x200002c0

08003b20 <__ssputs_r>:
 8003b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b22:	688e      	ldr	r6, [r1, #8]
 8003b24:	b085      	sub	sp, #20
 8003b26:	001f      	movs	r7, r3
 8003b28:	000c      	movs	r4, r1
 8003b2a:	680b      	ldr	r3, [r1, #0]
 8003b2c:	9002      	str	r0, [sp, #8]
 8003b2e:	9203      	str	r2, [sp, #12]
 8003b30:	42be      	cmp	r6, r7
 8003b32:	d830      	bhi.n	8003b96 <__ssputs_r+0x76>
 8003b34:	210c      	movs	r1, #12
 8003b36:	5e62      	ldrsh	r2, [r4, r1]
 8003b38:	2190      	movs	r1, #144	@ 0x90
 8003b3a:	00c9      	lsls	r1, r1, #3
 8003b3c:	420a      	tst	r2, r1
 8003b3e:	d028      	beq.n	8003b92 <__ssputs_r+0x72>
 8003b40:	2003      	movs	r0, #3
 8003b42:	6921      	ldr	r1, [r4, #16]
 8003b44:	1a5b      	subs	r3, r3, r1
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	6963      	ldr	r3, [r4, #20]
 8003b4a:	4343      	muls	r3, r0
 8003b4c:	9801      	ldr	r0, [sp, #4]
 8003b4e:	0fdd      	lsrs	r5, r3, #31
 8003b50:	18ed      	adds	r5, r5, r3
 8003b52:	1c7b      	adds	r3, r7, #1
 8003b54:	181b      	adds	r3, r3, r0
 8003b56:	106d      	asrs	r5, r5, #1
 8003b58:	42ab      	cmp	r3, r5
 8003b5a:	d900      	bls.n	8003b5e <__ssputs_r+0x3e>
 8003b5c:	001d      	movs	r5, r3
 8003b5e:	0552      	lsls	r2, r2, #21
 8003b60:	d528      	bpl.n	8003bb4 <__ssputs_r+0x94>
 8003b62:	0029      	movs	r1, r5
 8003b64:	9802      	ldr	r0, [sp, #8]
 8003b66:	f7ff ff4b 	bl	8003a00 <_malloc_r>
 8003b6a:	1e06      	subs	r6, r0, #0
 8003b6c:	d02c      	beq.n	8003bc8 <__ssputs_r+0xa8>
 8003b6e:	9a01      	ldr	r2, [sp, #4]
 8003b70:	6921      	ldr	r1, [r4, #16]
 8003b72:	f000 fade 	bl	8004132 <memcpy>
 8003b76:	89a2      	ldrh	r2, [r4, #12]
 8003b78:	4b18      	ldr	r3, [pc, #96]	@ (8003bdc <__ssputs_r+0xbc>)
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	2380      	movs	r3, #128	@ 0x80
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	81a3      	strh	r3, [r4, #12]
 8003b82:	9b01      	ldr	r3, [sp, #4]
 8003b84:	6126      	str	r6, [r4, #16]
 8003b86:	18f6      	adds	r6, r6, r3
 8003b88:	6026      	str	r6, [r4, #0]
 8003b8a:	003e      	movs	r6, r7
 8003b8c:	6165      	str	r5, [r4, #20]
 8003b8e:	1aed      	subs	r5, r5, r3
 8003b90:	60a5      	str	r5, [r4, #8]
 8003b92:	42be      	cmp	r6, r7
 8003b94:	d900      	bls.n	8003b98 <__ssputs_r+0x78>
 8003b96:	003e      	movs	r6, r7
 8003b98:	0032      	movs	r2, r6
 8003b9a:	9903      	ldr	r1, [sp, #12]
 8003b9c:	6820      	ldr	r0, [r4, #0]
 8003b9e:	f000 fa99 	bl	80040d4 <memmove>
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	68a3      	ldr	r3, [r4, #8]
 8003ba6:	1b9b      	subs	r3, r3, r6
 8003ba8:	60a3      	str	r3, [r4, #8]
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	199b      	adds	r3, r3, r6
 8003bae:	6023      	str	r3, [r4, #0]
 8003bb0:	b005      	add	sp, #20
 8003bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bb4:	002a      	movs	r2, r5
 8003bb6:	9802      	ldr	r0, [sp, #8]
 8003bb8:	f000 fac4 	bl	8004144 <_realloc_r>
 8003bbc:	1e06      	subs	r6, r0, #0
 8003bbe:	d1e0      	bne.n	8003b82 <__ssputs_r+0x62>
 8003bc0:	6921      	ldr	r1, [r4, #16]
 8003bc2:	9802      	ldr	r0, [sp, #8]
 8003bc4:	f7ff feb0 	bl	8003928 <_free_r>
 8003bc8:	230c      	movs	r3, #12
 8003bca:	2001      	movs	r0, #1
 8003bcc:	9a02      	ldr	r2, [sp, #8]
 8003bce:	4240      	negs	r0, r0
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	89a2      	ldrh	r2, [r4, #12]
 8003bd4:	3334      	adds	r3, #52	@ 0x34
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	81a3      	strh	r3, [r4, #12]
 8003bda:	e7e9      	b.n	8003bb0 <__ssputs_r+0x90>
 8003bdc:	fffffb7f 	.word	0xfffffb7f

08003be0 <_svfiprintf_r>:
 8003be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be2:	b0a1      	sub	sp, #132	@ 0x84
 8003be4:	9003      	str	r0, [sp, #12]
 8003be6:	001d      	movs	r5, r3
 8003be8:	898b      	ldrh	r3, [r1, #12]
 8003bea:	000f      	movs	r7, r1
 8003bec:	0016      	movs	r6, r2
 8003bee:	061b      	lsls	r3, r3, #24
 8003bf0:	d511      	bpl.n	8003c16 <_svfiprintf_r+0x36>
 8003bf2:	690b      	ldr	r3, [r1, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10e      	bne.n	8003c16 <_svfiprintf_r+0x36>
 8003bf8:	2140      	movs	r1, #64	@ 0x40
 8003bfa:	f7ff ff01 	bl	8003a00 <_malloc_r>
 8003bfe:	6038      	str	r0, [r7, #0]
 8003c00:	6138      	str	r0, [r7, #16]
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d105      	bne.n	8003c12 <_svfiprintf_r+0x32>
 8003c06:	230c      	movs	r3, #12
 8003c08:	9a03      	ldr	r2, [sp, #12]
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	4240      	negs	r0, r0
 8003c10:	e0cf      	b.n	8003db2 <_svfiprintf_r+0x1d2>
 8003c12:	2340      	movs	r3, #64	@ 0x40
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	2300      	movs	r3, #0
 8003c18:	ac08      	add	r4, sp, #32
 8003c1a:	6163      	str	r3, [r4, #20]
 8003c1c:	3320      	adds	r3, #32
 8003c1e:	7663      	strb	r3, [r4, #25]
 8003c20:	3310      	adds	r3, #16
 8003c22:	76a3      	strb	r3, [r4, #26]
 8003c24:	9507      	str	r5, [sp, #28]
 8003c26:	0035      	movs	r5, r6
 8003c28:	782b      	ldrb	r3, [r5, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <_svfiprintf_r+0x52>
 8003c2e:	2b25      	cmp	r3, #37	@ 0x25
 8003c30:	d148      	bne.n	8003cc4 <_svfiprintf_r+0xe4>
 8003c32:	1bab      	subs	r3, r5, r6
 8003c34:	9305      	str	r3, [sp, #20]
 8003c36:	42b5      	cmp	r5, r6
 8003c38:	d00b      	beq.n	8003c52 <_svfiprintf_r+0x72>
 8003c3a:	0032      	movs	r2, r6
 8003c3c:	0039      	movs	r1, r7
 8003c3e:	9803      	ldr	r0, [sp, #12]
 8003c40:	f7ff ff6e 	bl	8003b20 <__ssputs_r>
 8003c44:	3001      	adds	r0, #1
 8003c46:	d100      	bne.n	8003c4a <_svfiprintf_r+0x6a>
 8003c48:	e0ae      	b.n	8003da8 <_svfiprintf_r+0x1c8>
 8003c4a:	6963      	ldr	r3, [r4, #20]
 8003c4c:	9a05      	ldr	r2, [sp, #20]
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	6163      	str	r3, [r4, #20]
 8003c52:	782b      	ldrb	r3, [r5, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d100      	bne.n	8003c5a <_svfiprintf_r+0x7a>
 8003c58:	e0a6      	b.n	8003da8 <_svfiprintf_r+0x1c8>
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	4252      	negs	r2, r2
 8003c60:	6062      	str	r2, [r4, #4]
 8003c62:	a904      	add	r1, sp, #16
 8003c64:	3254      	adds	r2, #84	@ 0x54
 8003c66:	1852      	adds	r2, r2, r1
 8003c68:	1c6e      	adds	r6, r5, #1
 8003c6a:	6023      	str	r3, [r4, #0]
 8003c6c:	60e3      	str	r3, [r4, #12]
 8003c6e:	60a3      	str	r3, [r4, #8]
 8003c70:	7013      	strb	r3, [r2, #0]
 8003c72:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003c74:	4b54      	ldr	r3, [pc, #336]	@ (8003dc8 <_svfiprintf_r+0x1e8>)
 8003c76:	2205      	movs	r2, #5
 8003c78:	0018      	movs	r0, r3
 8003c7a:	7831      	ldrb	r1, [r6, #0]
 8003c7c:	9305      	str	r3, [sp, #20]
 8003c7e:	f000 fa4d 	bl	800411c <memchr>
 8003c82:	1c75      	adds	r5, r6, #1
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d11f      	bne.n	8003cc8 <_svfiprintf_r+0xe8>
 8003c88:	6822      	ldr	r2, [r4, #0]
 8003c8a:	06d3      	lsls	r3, r2, #27
 8003c8c:	d504      	bpl.n	8003c98 <_svfiprintf_r+0xb8>
 8003c8e:	2353      	movs	r3, #83	@ 0x53
 8003c90:	a904      	add	r1, sp, #16
 8003c92:	185b      	adds	r3, r3, r1
 8003c94:	2120      	movs	r1, #32
 8003c96:	7019      	strb	r1, [r3, #0]
 8003c98:	0713      	lsls	r3, r2, #28
 8003c9a:	d504      	bpl.n	8003ca6 <_svfiprintf_r+0xc6>
 8003c9c:	2353      	movs	r3, #83	@ 0x53
 8003c9e:	a904      	add	r1, sp, #16
 8003ca0:	185b      	adds	r3, r3, r1
 8003ca2:	212b      	movs	r1, #43	@ 0x2b
 8003ca4:	7019      	strb	r1, [r3, #0]
 8003ca6:	7833      	ldrb	r3, [r6, #0]
 8003ca8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003caa:	d016      	beq.n	8003cda <_svfiprintf_r+0xfa>
 8003cac:	0035      	movs	r5, r6
 8003cae:	2100      	movs	r1, #0
 8003cb0:	200a      	movs	r0, #10
 8003cb2:	68e3      	ldr	r3, [r4, #12]
 8003cb4:	782a      	ldrb	r2, [r5, #0]
 8003cb6:	1c6e      	adds	r6, r5, #1
 8003cb8:	3a30      	subs	r2, #48	@ 0x30
 8003cba:	2a09      	cmp	r2, #9
 8003cbc:	d950      	bls.n	8003d60 <_svfiprintf_r+0x180>
 8003cbe:	2900      	cmp	r1, #0
 8003cc0:	d111      	bne.n	8003ce6 <_svfiprintf_r+0x106>
 8003cc2:	e017      	b.n	8003cf4 <_svfiprintf_r+0x114>
 8003cc4:	3501      	adds	r5, #1
 8003cc6:	e7af      	b.n	8003c28 <_svfiprintf_r+0x48>
 8003cc8:	9b05      	ldr	r3, [sp, #20]
 8003cca:	6822      	ldr	r2, [r4, #0]
 8003ccc:	1ac0      	subs	r0, r0, r3
 8003cce:	2301      	movs	r3, #1
 8003cd0:	4083      	lsls	r3, r0
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	002e      	movs	r6, r5
 8003cd6:	6023      	str	r3, [r4, #0]
 8003cd8:	e7cc      	b.n	8003c74 <_svfiprintf_r+0x94>
 8003cda:	9b07      	ldr	r3, [sp, #28]
 8003cdc:	1d19      	adds	r1, r3, #4
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	9107      	str	r1, [sp, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	db01      	blt.n	8003cea <_svfiprintf_r+0x10a>
 8003ce6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ce8:	e004      	b.n	8003cf4 <_svfiprintf_r+0x114>
 8003cea:	425b      	negs	r3, r3
 8003cec:	60e3      	str	r3, [r4, #12]
 8003cee:	2302      	movs	r3, #2
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	6023      	str	r3, [r4, #0]
 8003cf4:	782b      	ldrb	r3, [r5, #0]
 8003cf6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cf8:	d10c      	bne.n	8003d14 <_svfiprintf_r+0x134>
 8003cfa:	786b      	ldrb	r3, [r5, #1]
 8003cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cfe:	d134      	bne.n	8003d6a <_svfiprintf_r+0x18a>
 8003d00:	9b07      	ldr	r3, [sp, #28]
 8003d02:	3502      	adds	r5, #2
 8003d04:	1d1a      	adds	r2, r3, #4
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	9207      	str	r2, [sp, #28]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	da01      	bge.n	8003d12 <_svfiprintf_r+0x132>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	425b      	negs	r3, r3
 8003d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d14:	4e2d      	ldr	r6, [pc, #180]	@ (8003dcc <_svfiprintf_r+0x1ec>)
 8003d16:	2203      	movs	r2, #3
 8003d18:	0030      	movs	r0, r6
 8003d1a:	7829      	ldrb	r1, [r5, #0]
 8003d1c:	f000 f9fe 	bl	800411c <memchr>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d006      	beq.n	8003d32 <_svfiprintf_r+0x152>
 8003d24:	2340      	movs	r3, #64	@ 0x40
 8003d26:	1b80      	subs	r0, r0, r6
 8003d28:	4083      	lsls	r3, r0
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	3501      	adds	r5, #1
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	6023      	str	r3, [r4, #0]
 8003d32:	7829      	ldrb	r1, [r5, #0]
 8003d34:	2206      	movs	r2, #6
 8003d36:	4826      	ldr	r0, [pc, #152]	@ (8003dd0 <_svfiprintf_r+0x1f0>)
 8003d38:	1c6e      	adds	r6, r5, #1
 8003d3a:	7621      	strb	r1, [r4, #24]
 8003d3c:	f000 f9ee 	bl	800411c <memchr>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d038      	beq.n	8003db6 <_svfiprintf_r+0x1d6>
 8003d44:	4b23      	ldr	r3, [pc, #140]	@ (8003dd4 <_svfiprintf_r+0x1f4>)
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d122      	bne.n	8003d90 <_svfiprintf_r+0x1b0>
 8003d4a:	2207      	movs	r2, #7
 8003d4c:	9b07      	ldr	r3, [sp, #28]
 8003d4e:	3307      	adds	r3, #7
 8003d50:	4393      	bics	r3, r2
 8003d52:	3308      	adds	r3, #8
 8003d54:	9307      	str	r3, [sp, #28]
 8003d56:	6963      	ldr	r3, [r4, #20]
 8003d58:	9a04      	ldr	r2, [sp, #16]
 8003d5a:	189b      	adds	r3, r3, r2
 8003d5c:	6163      	str	r3, [r4, #20]
 8003d5e:	e762      	b.n	8003c26 <_svfiprintf_r+0x46>
 8003d60:	4343      	muls	r3, r0
 8003d62:	0035      	movs	r5, r6
 8003d64:	2101      	movs	r1, #1
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	e7a4      	b.n	8003cb4 <_svfiprintf_r+0xd4>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	200a      	movs	r0, #10
 8003d6e:	0019      	movs	r1, r3
 8003d70:	3501      	adds	r5, #1
 8003d72:	6063      	str	r3, [r4, #4]
 8003d74:	782a      	ldrb	r2, [r5, #0]
 8003d76:	1c6e      	adds	r6, r5, #1
 8003d78:	3a30      	subs	r2, #48	@ 0x30
 8003d7a:	2a09      	cmp	r2, #9
 8003d7c:	d903      	bls.n	8003d86 <_svfiprintf_r+0x1a6>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0c8      	beq.n	8003d14 <_svfiprintf_r+0x134>
 8003d82:	9109      	str	r1, [sp, #36]	@ 0x24
 8003d84:	e7c6      	b.n	8003d14 <_svfiprintf_r+0x134>
 8003d86:	4341      	muls	r1, r0
 8003d88:	0035      	movs	r5, r6
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	1889      	adds	r1, r1, r2
 8003d8e:	e7f1      	b.n	8003d74 <_svfiprintf_r+0x194>
 8003d90:	aa07      	add	r2, sp, #28
 8003d92:	9200      	str	r2, [sp, #0]
 8003d94:	0021      	movs	r1, r4
 8003d96:	003a      	movs	r2, r7
 8003d98:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd8 <_svfiprintf_r+0x1f8>)
 8003d9a:	9803      	ldr	r0, [sp, #12]
 8003d9c:	e000      	b.n	8003da0 <_svfiprintf_r+0x1c0>
 8003d9e:	bf00      	nop
 8003da0:	9004      	str	r0, [sp, #16]
 8003da2:	9b04      	ldr	r3, [sp, #16]
 8003da4:	3301      	adds	r3, #1
 8003da6:	d1d6      	bne.n	8003d56 <_svfiprintf_r+0x176>
 8003da8:	89bb      	ldrh	r3, [r7, #12]
 8003daa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003dac:	065b      	lsls	r3, r3, #25
 8003dae:	d500      	bpl.n	8003db2 <_svfiprintf_r+0x1d2>
 8003db0:	e72c      	b.n	8003c0c <_svfiprintf_r+0x2c>
 8003db2:	b021      	add	sp, #132	@ 0x84
 8003db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003db6:	aa07      	add	r2, sp, #28
 8003db8:	9200      	str	r2, [sp, #0]
 8003dba:	0021      	movs	r1, r4
 8003dbc:	003a      	movs	r2, r7
 8003dbe:	4b06      	ldr	r3, [pc, #24]	@ (8003dd8 <_svfiprintf_r+0x1f8>)
 8003dc0:	9803      	ldr	r0, [sp, #12]
 8003dc2:	f000 f87b 	bl	8003ebc <_printf_i>
 8003dc6:	e7eb      	b.n	8003da0 <_svfiprintf_r+0x1c0>
 8003dc8:	080042b1 	.word	0x080042b1
 8003dcc:	080042b7 	.word	0x080042b7
 8003dd0:	080042bb 	.word	0x080042bb
 8003dd4:	00000000 	.word	0x00000000
 8003dd8:	08003b21 	.word	0x08003b21

08003ddc <_printf_common>:
 8003ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dde:	0016      	movs	r6, r2
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	688a      	ldr	r2, [r1, #8]
 8003de4:	690b      	ldr	r3, [r1, #16]
 8003de6:	000c      	movs	r4, r1
 8003de8:	9000      	str	r0, [sp, #0]
 8003dea:	4293      	cmp	r3, r2
 8003dec:	da00      	bge.n	8003df0 <_printf_common+0x14>
 8003dee:	0013      	movs	r3, r2
 8003df0:	0022      	movs	r2, r4
 8003df2:	6033      	str	r3, [r6, #0]
 8003df4:	3243      	adds	r2, #67	@ 0x43
 8003df6:	7812      	ldrb	r2, [r2, #0]
 8003df8:	2a00      	cmp	r2, #0
 8003dfa:	d001      	beq.n	8003e00 <_printf_common+0x24>
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	6033      	str	r3, [r6, #0]
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	069b      	lsls	r3, r3, #26
 8003e04:	d502      	bpl.n	8003e0c <_printf_common+0x30>
 8003e06:	6833      	ldr	r3, [r6, #0]
 8003e08:	3302      	adds	r3, #2
 8003e0a:	6033      	str	r3, [r6, #0]
 8003e0c:	6822      	ldr	r2, [r4, #0]
 8003e0e:	2306      	movs	r3, #6
 8003e10:	0015      	movs	r5, r2
 8003e12:	401d      	ands	r5, r3
 8003e14:	421a      	tst	r2, r3
 8003e16:	d027      	beq.n	8003e68 <_printf_common+0x8c>
 8003e18:	0023      	movs	r3, r4
 8003e1a:	3343      	adds	r3, #67	@ 0x43
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	1e5a      	subs	r2, r3, #1
 8003e20:	4193      	sbcs	r3, r2
 8003e22:	6822      	ldr	r2, [r4, #0]
 8003e24:	0692      	lsls	r2, r2, #26
 8003e26:	d430      	bmi.n	8003e8a <_printf_common+0xae>
 8003e28:	0022      	movs	r2, r4
 8003e2a:	9901      	ldr	r1, [sp, #4]
 8003e2c:	9800      	ldr	r0, [sp, #0]
 8003e2e:	9d08      	ldr	r5, [sp, #32]
 8003e30:	3243      	adds	r2, #67	@ 0x43
 8003e32:	47a8      	blx	r5
 8003e34:	3001      	adds	r0, #1
 8003e36:	d025      	beq.n	8003e84 <_printf_common+0xa8>
 8003e38:	2206      	movs	r2, #6
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	2500      	movs	r5, #0
 8003e3e:	4013      	ands	r3, r2
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d105      	bne.n	8003e50 <_printf_common+0x74>
 8003e44:	6833      	ldr	r3, [r6, #0]
 8003e46:	68e5      	ldr	r5, [r4, #12]
 8003e48:	1aed      	subs	r5, r5, r3
 8003e4a:	43eb      	mvns	r3, r5
 8003e4c:	17db      	asrs	r3, r3, #31
 8003e4e:	401d      	ands	r5, r3
 8003e50:	68a3      	ldr	r3, [r4, #8]
 8003e52:	6922      	ldr	r2, [r4, #16]
 8003e54:	4293      	cmp	r3, r2
 8003e56:	dd01      	ble.n	8003e5c <_printf_common+0x80>
 8003e58:	1a9b      	subs	r3, r3, r2
 8003e5a:	18ed      	adds	r5, r5, r3
 8003e5c:	2600      	movs	r6, #0
 8003e5e:	42b5      	cmp	r5, r6
 8003e60:	d120      	bne.n	8003ea4 <_printf_common+0xc8>
 8003e62:	2000      	movs	r0, #0
 8003e64:	e010      	b.n	8003e88 <_printf_common+0xac>
 8003e66:	3501      	adds	r5, #1
 8003e68:	68e3      	ldr	r3, [r4, #12]
 8003e6a:	6832      	ldr	r2, [r6, #0]
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	42ab      	cmp	r3, r5
 8003e70:	ddd2      	ble.n	8003e18 <_printf_common+0x3c>
 8003e72:	0022      	movs	r2, r4
 8003e74:	2301      	movs	r3, #1
 8003e76:	9901      	ldr	r1, [sp, #4]
 8003e78:	9800      	ldr	r0, [sp, #0]
 8003e7a:	9f08      	ldr	r7, [sp, #32]
 8003e7c:	3219      	adds	r2, #25
 8003e7e:	47b8      	blx	r7
 8003e80:	3001      	adds	r0, #1
 8003e82:	d1f0      	bne.n	8003e66 <_printf_common+0x8a>
 8003e84:	2001      	movs	r0, #1
 8003e86:	4240      	negs	r0, r0
 8003e88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e8a:	2030      	movs	r0, #48	@ 0x30
 8003e8c:	18e1      	adds	r1, r4, r3
 8003e8e:	3143      	adds	r1, #67	@ 0x43
 8003e90:	7008      	strb	r0, [r1, #0]
 8003e92:	0021      	movs	r1, r4
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	3145      	adds	r1, #69	@ 0x45
 8003e98:	7809      	ldrb	r1, [r1, #0]
 8003e9a:	18a2      	adds	r2, r4, r2
 8003e9c:	3243      	adds	r2, #67	@ 0x43
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	7011      	strb	r1, [r2, #0]
 8003ea2:	e7c1      	b.n	8003e28 <_printf_common+0x4c>
 8003ea4:	0022      	movs	r2, r4
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	9901      	ldr	r1, [sp, #4]
 8003eaa:	9800      	ldr	r0, [sp, #0]
 8003eac:	9f08      	ldr	r7, [sp, #32]
 8003eae:	321a      	adds	r2, #26
 8003eb0:	47b8      	blx	r7
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d0e6      	beq.n	8003e84 <_printf_common+0xa8>
 8003eb6:	3601      	adds	r6, #1
 8003eb8:	e7d1      	b.n	8003e5e <_printf_common+0x82>
	...

08003ebc <_printf_i>:
 8003ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ebe:	b08b      	sub	sp, #44	@ 0x2c
 8003ec0:	9206      	str	r2, [sp, #24]
 8003ec2:	000a      	movs	r2, r1
 8003ec4:	3243      	adds	r2, #67	@ 0x43
 8003ec6:	9307      	str	r3, [sp, #28]
 8003ec8:	9005      	str	r0, [sp, #20]
 8003eca:	9203      	str	r2, [sp, #12]
 8003ecc:	7e0a      	ldrb	r2, [r1, #24]
 8003ece:	000c      	movs	r4, r1
 8003ed0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003ed2:	2a78      	cmp	r2, #120	@ 0x78
 8003ed4:	d809      	bhi.n	8003eea <_printf_i+0x2e>
 8003ed6:	2a62      	cmp	r2, #98	@ 0x62
 8003ed8:	d80b      	bhi.n	8003ef2 <_printf_i+0x36>
 8003eda:	2a00      	cmp	r2, #0
 8003edc:	d100      	bne.n	8003ee0 <_printf_i+0x24>
 8003ede:	e0ba      	b.n	8004056 <_printf_i+0x19a>
 8003ee0:	497a      	ldr	r1, [pc, #488]	@ (80040cc <_printf_i+0x210>)
 8003ee2:	9104      	str	r1, [sp, #16]
 8003ee4:	2a58      	cmp	r2, #88	@ 0x58
 8003ee6:	d100      	bne.n	8003eea <_printf_i+0x2e>
 8003ee8:	e08e      	b.n	8004008 <_printf_i+0x14c>
 8003eea:	0025      	movs	r5, r4
 8003eec:	3542      	adds	r5, #66	@ 0x42
 8003eee:	702a      	strb	r2, [r5, #0]
 8003ef0:	e022      	b.n	8003f38 <_printf_i+0x7c>
 8003ef2:	0010      	movs	r0, r2
 8003ef4:	3863      	subs	r0, #99	@ 0x63
 8003ef6:	2815      	cmp	r0, #21
 8003ef8:	d8f7      	bhi.n	8003eea <_printf_i+0x2e>
 8003efa:	f7fc f905 	bl	8000108 <__gnu_thumb1_case_shi>
 8003efe:	0016      	.short	0x0016
 8003f00:	fff6001f 	.word	0xfff6001f
 8003f04:	fff6fff6 	.word	0xfff6fff6
 8003f08:	001ffff6 	.word	0x001ffff6
 8003f0c:	fff6fff6 	.word	0xfff6fff6
 8003f10:	fff6fff6 	.word	0xfff6fff6
 8003f14:	0036009f 	.word	0x0036009f
 8003f18:	fff6007e 	.word	0xfff6007e
 8003f1c:	00b0fff6 	.word	0x00b0fff6
 8003f20:	0036fff6 	.word	0x0036fff6
 8003f24:	fff6fff6 	.word	0xfff6fff6
 8003f28:	0082      	.short	0x0082
 8003f2a:	0025      	movs	r5, r4
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	3542      	adds	r5, #66	@ 0x42
 8003f30:	1d11      	adds	r1, r2, #4
 8003f32:	6019      	str	r1, [r3, #0]
 8003f34:	6813      	ldr	r3, [r2, #0]
 8003f36:	702b      	strb	r3, [r5, #0]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e09e      	b.n	800407a <_printf_i+0x1be>
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	6809      	ldr	r1, [r1, #0]
 8003f40:	1d02      	adds	r2, r0, #4
 8003f42:	060d      	lsls	r5, r1, #24
 8003f44:	d50b      	bpl.n	8003f5e <_printf_i+0xa2>
 8003f46:	6806      	ldr	r6, [r0, #0]
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	2e00      	cmp	r6, #0
 8003f4c:	da03      	bge.n	8003f56 <_printf_i+0x9a>
 8003f4e:	232d      	movs	r3, #45	@ 0x2d
 8003f50:	9a03      	ldr	r2, [sp, #12]
 8003f52:	4276      	negs	r6, r6
 8003f54:	7013      	strb	r3, [r2, #0]
 8003f56:	4b5d      	ldr	r3, [pc, #372]	@ (80040cc <_printf_i+0x210>)
 8003f58:	270a      	movs	r7, #10
 8003f5a:	9304      	str	r3, [sp, #16]
 8003f5c:	e018      	b.n	8003f90 <_printf_i+0xd4>
 8003f5e:	6806      	ldr	r6, [r0, #0]
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	0649      	lsls	r1, r1, #25
 8003f64:	d5f1      	bpl.n	8003f4a <_printf_i+0x8e>
 8003f66:	b236      	sxth	r6, r6
 8003f68:	e7ef      	b.n	8003f4a <_printf_i+0x8e>
 8003f6a:	6808      	ldr	r0, [r1, #0]
 8003f6c:	6819      	ldr	r1, [r3, #0]
 8003f6e:	c940      	ldmia	r1!, {r6}
 8003f70:	0605      	lsls	r5, r0, #24
 8003f72:	d402      	bmi.n	8003f7a <_printf_i+0xbe>
 8003f74:	0640      	lsls	r0, r0, #25
 8003f76:	d500      	bpl.n	8003f7a <_printf_i+0xbe>
 8003f78:	b2b6      	uxth	r6, r6
 8003f7a:	6019      	str	r1, [r3, #0]
 8003f7c:	4b53      	ldr	r3, [pc, #332]	@ (80040cc <_printf_i+0x210>)
 8003f7e:	270a      	movs	r7, #10
 8003f80:	9304      	str	r3, [sp, #16]
 8003f82:	2a6f      	cmp	r2, #111	@ 0x6f
 8003f84:	d100      	bne.n	8003f88 <_printf_i+0xcc>
 8003f86:	3f02      	subs	r7, #2
 8003f88:	0023      	movs	r3, r4
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	3343      	adds	r3, #67	@ 0x43
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	6863      	ldr	r3, [r4, #4]
 8003f92:	60a3      	str	r3, [r4, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	db06      	blt.n	8003fa6 <_printf_i+0xea>
 8003f98:	2104      	movs	r1, #4
 8003f9a:	6822      	ldr	r2, [r4, #0]
 8003f9c:	9d03      	ldr	r5, [sp, #12]
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	6022      	str	r2, [r4, #0]
 8003fa2:	4333      	orrs	r3, r6
 8003fa4:	d00c      	beq.n	8003fc0 <_printf_i+0x104>
 8003fa6:	9d03      	ldr	r5, [sp, #12]
 8003fa8:	0030      	movs	r0, r6
 8003faa:	0039      	movs	r1, r7
 8003fac:	f7fc f93c 	bl	8000228 <__aeabi_uidivmod>
 8003fb0:	9b04      	ldr	r3, [sp, #16]
 8003fb2:	3d01      	subs	r5, #1
 8003fb4:	5c5b      	ldrb	r3, [r3, r1]
 8003fb6:	702b      	strb	r3, [r5, #0]
 8003fb8:	0033      	movs	r3, r6
 8003fba:	0006      	movs	r6, r0
 8003fbc:	429f      	cmp	r7, r3
 8003fbe:	d9f3      	bls.n	8003fa8 <_printf_i+0xec>
 8003fc0:	2f08      	cmp	r7, #8
 8003fc2:	d109      	bne.n	8003fd8 <_printf_i+0x11c>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	07db      	lsls	r3, r3, #31
 8003fc8:	d506      	bpl.n	8003fd8 <_printf_i+0x11c>
 8003fca:	6862      	ldr	r2, [r4, #4]
 8003fcc:	6923      	ldr	r3, [r4, #16]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	dc02      	bgt.n	8003fd8 <_printf_i+0x11c>
 8003fd2:	2330      	movs	r3, #48	@ 0x30
 8003fd4:	3d01      	subs	r5, #1
 8003fd6:	702b      	strb	r3, [r5, #0]
 8003fd8:	9b03      	ldr	r3, [sp, #12]
 8003fda:	1b5b      	subs	r3, r3, r5
 8003fdc:	6123      	str	r3, [r4, #16]
 8003fde:	9b07      	ldr	r3, [sp, #28]
 8003fe0:	0021      	movs	r1, r4
 8003fe2:	9300      	str	r3, [sp, #0]
 8003fe4:	9805      	ldr	r0, [sp, #20]
 8003fe6:	9b06      	ldr	r3, [sp, #24]
 8003fe8:	aa09      	add	r2, sp, #36	@ 0x24
 8003fea:	f7ff fef7 	bl	8003ddc <_printf_common>
 8003fee:	3001      	adds	r0, #1
 8003ff0:	d148      	bne.n	8004084 <_printf_i+0x1c8>
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	4240      	negs	r0, r0
 8003ff6:	b00b      	add	sp, #44	@ 0x2c
 8003ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	6809      	ldr	r1, [r1, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	6022      	str	r2, [r4, #0]
 8004002:	2278      	movs	r2, #120	@ 0x78
 8004004:	4932      	ldr	r1, [pc, #200]	@ (80040d0 <_printf_i+0x214>)
 8004006:	9104      	str	r1, [sp, #16]
 8004008:	0021      	movs	r1, r4
 800400a:	3145      	adds	r1, #69	@ 0x45
 800400c:	700a      	strb	r2, [r1, #0]
 800400e:	6819      	ldr	r1, [r3, #0]
 8004010:	6822      	ldr	r2, [r4, #0]
 8004012:	c940      	ldmia	r1!, {r6}
 8004014:	0610      	lsls	r0, r2, #24
 8004016:	d402      	bmi.n	800401e <_printf_i+0x162>
 8004018:	0650      	lsls	r0, r2, #25
 800401a:	d500      	bpl.n	800401e <_printf_i+0x162>
 800401c:	b2b6      	uxth	r6, r6
 800401e:	6019      	str	r1, [r3, #0]
 8004020:	07d3      	lsls	r3, r2, #31
 8004022:	d502      	bpl.n	800402a <_printf_i+0x16e>
 8004024:	2320      	movs	r3, #32
 8004026:	4313      	orrs	r3, r2
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	2e00      	cmp	r6, #0
 800402c:	d001      	beq.n	8004032 <_printf_i+0x176>
 800402e:	2710      	movs	r7, #16
 8004030:	e7aa      	b.n	8003f88 <_printf_i+0xcc>
 8004032:	2220      	movs	r2, #32
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	4393      	bics	r3, r2
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	e7f8      	b.n	800402e <_printf_i+0x172>
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	680d      	ldr	r5, [r1, #0]
 8004040:	1d10      	adds	r0, r2, #4
 8004042:	6949      	ldr	r1, [r1, #20]
 8004044:	6018      	str	r0, [r3, #0]
 8004046:	6813      	ldr	r3, [r2, #0]
 8004048:	062e      	lsls	r6, r5, #24
 800404a:	d501      	bpl.n	8004050 <_printf_i+0x194>
 800404c:	6019      	str	r1, [r3, #0]
 800404e:	e002      	b.n	8004056 <_printf_i+0x19a>
 8004050:	066d      	lsls	r5, r5, #25
 8004052:	d5fb      	bpl.n	800404c <_printf_i+0x190>
 8004054:	8019      	strh	r1, [r3, #0]
 8004056:	2300      	movs	r3, #0
 8004058:	9d03      	ldr	r5, [sp, #12]
 800405a:	6123      	str	r3, [r4, #16]
 800405c:	e7bf      	b.n	8003fde <_printf_i+0x122>
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	1d11      	adds	r1, r2, #4
 8004062:	6019      	str	r1, [r3, #0]
 8004064:	6815      	ldr	r5, [r2, #0]
 8004066:	2100      	movs	r1, #0
 8004068:	0028      	movs	r0, r5
 800406a:	6862      	ldr	r2, [r4, #4]
 800406c:	f000 f856 	bl	800411c <memchr>
 8004070:	2800      	cmp	r0, #0
 8004072:	d001      	beq.n	8004078 <_printf_i+0x1bc>
 8004074:	1b40      	subs	r0, r0, r5
 8004076:	6060      	str	r0, [r4, #4]
 8004078:	6863      	ldr	r3, [r4, #4]
 800407a:	6123      	str	r3, [r4, #16]
 800407c:	2300      	movs	r3, #0
 800407e:	9a03      	ldr	r2, [sp, #12]
 8004080:	7013      	strb	r3, [r2, #0]
 8004082:	e7ac      	b.n	8003fde <_printf_i+0x122>
 8004084:	002a      	movs	r2, r5
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	9906      	ldr	r1, [sp, #24]
 800408a:	9805      	ldr	r0, [sp, #20]
 800408c:	9d07      	ldr	r5, [sp, #28]
 800408e:	47a8      	blx	r5
 8004090:	3001      	adds	r0, #1
 8004092:	d0ae      	beq.n	8003ff2 <_printf_i+0x136>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	079b      	lsls	r3, r3, #30
 8004098:	d415      	bmi.n	80040c6 <_printf_i+0x20a>
 800409a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800409c:	68e0      	ldr	r0, [r4, #12]
 800409e:	4298      	cmp	r0, r3
 80040a0:	daa9      	bge.n	8003ff6 <_printf_i+0x13a>
 80040a2:	0018      	movs	r0, r3
 80040a4:	e7a7      	b.n	8003ff6 <_printf_i+0x13a>
 80040a6:	0022      	movs	r2, r4
 80040a8:	2301      	movs	r3, #1
 80040aa:	9906      	ldr	r1, [sp, #24]
 80040ac:	9805      	ldr	r0, [sp, #20]
 80040ae:	9e07      	ldr	r6, [sp, #28]
 80040b0:	3219      	adds	r2, #25
 80040b2:	47b0      	blx	r6
 80040b4:	3001      	adds	r0, #1
 80040b6:	d09c      	beq.n	8003ff2 <_printf_i+0x136>
 80040b8:	3501      	adds	r5, #1
 80040ba:	68e3      	ldr	r3, [r4, #12]
 80040bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	42ab      	cmp	r3, r5
 80040c2:	dcf0      	bgt.n	80040a6 <_printf_i+0x1ea>
 80040c4:	e7e9      	b.n	800409a <_printf_i+0x1de>
 80040c6:	2500      	movs	r5, #0
 80040c8:	e7f7      	b.n	80040ba <_printf_i+0x1fe>
 80040ca:	46c0      	nop			@ (mov r8, r8)
 80040cc:	080042c2 	.word	0x080042c2
 80040d0:	080042d3 	.word	0x080042d3

080040d4 <memmove>:
 80040d4:	b510      	push	{r4, lr}
 80040d6:	4288      	cmp	r0, r1
 80040d8:	d902      	bls.n	80040e0 <memmove+0xc>
 80040da:	188b      	adds	r3, r1, r2
 80040dc:	4298      	cmp	r0, r3
 80040de:	d308      	bcc.n	80040f2 <memmove+0x1e>
 80040e0:	2300      	movs	r3, #0
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d007      	beq.n	80040f6 <memmove+0x22>
 80040e6:	5ccc      	ldrb	r4, [r1, r3]
 80040e8:	54c4      	strb	r4, [r0, r3]
 80040ea:	3301      	adds	r3, #1
 80040ec:	e7f9      	b.n	80040e2 <memmove+0xe>
 80040ee:	5c8b      	ldrb	r3, [r1, r2]
 80040f0:	5483      	strb	r3, [r0, r2]
 80040f2:	3a01      	subs	r2, #1
 80040f4:	d2fb      	bcs.n	80040ee <memmove+0x1a>
 80040f6:	bd10      	pop	{r4, pc}

080040f8 <_sbrk_r>:
 80040f8:	2300      	movs	r3, #0
 80040fa:	b570      	push	{r4, r5, r6, lr}
 80040fc:	4d06      	ldr	r5, [pc, #24]	@ (8004118 <_sbrk_r+0x20>)
 80040fe:	0004      	movs	r4, r0
 8004100:	0008      	movs	r0, r1
 8004102:	602b      	str	r3, [r5, #0]
 8004104:	f7fc ff6e 	bl	8000fe4 <_sbrk>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d103      	bne.n	8004114 <_sbrk_r+0x1c>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d000      	beq.n	8004114 <_sbrk_r+0x1c>
 8004112:	6023      	str	r3, [r4, #0]
 8004114:	bd70      	pop	{r4, r5, r6, pc}
 8004116:	46c0      	nop			@ (mov r8, r8)
 8004118:	200002bc 	.word	0x200002bc

0800411c <memchr>:
 800411c:	b2c9      	uxtb	r1, r1
 800411e:	1882      	adds	r2, r0, r2
 8004120:	4290      	cmp	r0, r2
 8004122:	d101      	bne.n	8004128 <memchr+0xc>
 8004124:	2000      	movs	r0, #0
 8004126:	4770      	bx	lr
 8004128:	7803      	ldrb	r3, [r0, #0]
 800412a:	428b      	cmp	r3, r1
 800412c:	d0fb      	beq.n	8004126 <memchr+0xa>
 800412e:	3001      	adds	r0, #1
 8004130:	e7f6      	b.n	8004120 <memchr+0x4>

08004132 <memcpy>:
 8004132:	2300      	movs	r3, #0
 8004134:	b510      	push	{r4, lr}
 8004136:	429a      	cmp	r2, r3
 8004138:	d100      	bne.n	800413c <memcpy+0xa>
 800413a:	bd10      	pop	{r4, pc}
 800413c:	5ccc      	ldrb	r4, [r1, r3]
 800413e:	54c4      	strb	r4, [r0, r3]
 8004140:	3301      	adds	r3, #1
 8004142:	e7f8      	b.n	8004136 <memcpy+0x4>

08004144 <_realloc_r>:
 8004144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004146:	0006      	movs	r6, r0
 8004148:	000c      	movs	r4, r1
 800414a:	0015      	movs	r5, r2
 800414c:	2900      	cmp	r1, #0
 800414e:	d105      	bne.n	800415c <_realloc_r+0x18>
 8004150:	0011      	movs	r1, r2
 8004152:	f7ff fc55 	bl	8003a00 <_malloc_r>
 8004156:	0004      	movs	r4, r0
 8004158:	0020      	movs	r0, r4
 800415a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800415c:	2a00      	cmp	r2, #0
 800415e:	d103      	bne.n	8004168 <_realloc_r+0x24>
 8004160:	f7ff fbe2 	bl	8003928 <_free_r>
 8004164:	002c      	movs	r4, r5
 8004166:	e7f7      	b.n	8004158 <_realloc_r+0x14>
 8004168:	f000 f81c 	bl	80041a4 <_malloc_usable_size_r>
 800416c:	0007      	movs	r7, r0
 800416e:	4285      	cmp	r5, r0
 8004170:	d802      	bhi.n	8004178 <_realloc_r+0x34>
 8004172:	0843      	lsrs	r3, r0, #1
 8004174:	42ab      	cmp	r3, r5
 8004176:	d3ef      	bcc.n	8004158 <_realloc_r+0x14>
 8004178:	0029      	movs	r1, r5
 800417a:	0030      	movs	r0, r6
 800417c:	f7ff fc40 	bl	8003a00 <_malloc_r>
 8004180:	9001      	str	r0, [sp, #4]
 8004182:	2800      	cmp	r0, #0
 8004184:	d101      	bne.n	800418a <_realloc_r+0x46>
 8004186:	9c01      	ldr	r4, [sp, #4]
 8004188:	e7e6      	b.n	8004158 <_realloc_r+0x14>
 800418a:	002a      	movs	r2, r5
 800418c:	42bd      	cmp	r5, r7
 800418e:	d900      	bls.n	8004192 <_realloc_r+0x4e>
 8004190:	003a      	movs	r2, r7
 8004192:	0021      	movs	r1, r4
 8004194:	9801      	ldr	r0, [sp, #4]
 8004196:	f7ff ffcc 	bl	8004132 <memcpy>
 800419a:	0021      	movs	r1, r4
 800419c:	0030      	movs	r0, r6
 800419e:	f7ff fbc3 	bl	8003928 <_free_r>
 80041a2:	e7f0      	b.n	8004186 <_realloc_r+0x42>

080041a4 <_malloc_usable_size_r>:
 80041a4:	1f0b      	subs	r3, r1, #4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	1f18      	subs	r0, r3, #4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	da01      	bge.n	80041b2 <_malloc_usable_size_r+0xe>
 80041ae:	580b      	ldr	r3, [r1, r0]
 80041b0:	18c0      	adds	r0, r0, r3
 80041b2:	4770      	bx	lr

080041b4 <_init>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr

080041c0 <_fini>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	46c0      	nop			@ (mov r8, r8)
 80041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c6:	bc08      	pop	{r3}
 80041c8:	469e      	mov	lr, r3
 80041ca:	4770      	bx	lr

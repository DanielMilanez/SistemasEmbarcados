
Projeto inputcapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026bc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800277c  0800277c  0000377c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a0  080027a0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080027a0  080027a0  000037a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027a8  080027a8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027a8  080027a8  000037a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027ac  080027ac  000037ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080027b0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080027bc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080027bc  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ee3  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014d5  00000000  00000000  0000af17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000c3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e8  00000000  00000000  0000cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c78  00000000  00000000  0000d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089cc  00000000  00000000  0001fe18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000760e4  00000000  00000000  000287e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009e8c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ba4  00000000  00000000  0009e90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  000a04b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002764 	.word	0x08002764

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002764 	.word	0x08002764

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fa0c 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f80e 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8d8 	bl	8000668 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004b8:	f000 f85a 	bl	8000570 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80004bc:	4b03      	ldr	r3, [pc, #12]	@ (80004cc <main+0x24>)
 80004be:	2100      	movs	r1, #0
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 fb1f 	bl	8001b04 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	e7fd      	b.n	80004c6 <main+0x1e>
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	20000028 	.word	0x20000028

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b095      	sub	sp, #84	@ 0x54
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	2418      	movs	r4, #24
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2338      	movs	r3, #56	@ 0x38
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f002 f913 	bl	800270c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	0018      	movs	r0, r3
 80004ea:	2314      	movs	r3, #20
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f002 f90c 	bl	800270c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000568 <SystemClock_Config+0x98>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a1c      	ldr	r2, [pc, #112]	@ (800056c <SystemClock_Config+0x9c>)
 80004fa:	401a      	ands	r2, r3
 80004fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <SystemClock_Config+0x98>)
 80004fe:	2180      	movs	r1, #128	@ 0x80
 8000500:	0109      	lsls	r1, r1, #4
 8000502:	430a      	orrs	r2, r1
 8000504:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000506:	0021      	movs	r1, r4
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2202      	movs	r2, #2
 800050c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2201      	movs	r2, #1
 8000512:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2210      	movs	r2, #16
 8000518:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2200      	movs	r2, #0
 800051e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000520:	187b      	adds	r3, r7, r1
 8000522:	0018      	movs	r0, r3
 8000524:	f000 fc94 	bl	8000e50 <HAL_RCC_OscConfig>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800052c:	f000 f912 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	220f      	movs	r2, #15
 8000534:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2201      	movs	r2, #1
 800053a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2100      	movs	r1, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f001 f840 	bl	80015d8 <HAL_RCC_ClockConfig>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800055c:	f000 f8fa 	bl	8000754 <Error_Handler>
  }
}
 8000560:	46c0      	nop			@ (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b015      	add	sp, #84	@ 0x54
 8000566:	bd90      	pop	{r4, r7, pc}
 8000568:	40007000 	.word	0x40007000
 800056c:	ffffe7ff 	.word	0xffffe7ff

08000570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000576:	2318      	movs	r3, #24
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	0018      	movs	r0, r3
 800057c:	2310      	movs	r3, #16
 800057e:	001a      	movs	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f002 f8c3 	bl	800270c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000586:	2310      	movs	r3, #16
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	0018      	movs	r0, r3
 800058c:	2308      	movs	r3, #8
 800058e:	001a      	movs	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	f002 f8bb 	bl	800270c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000596:	003b      	movs	r3, r7
 8000598:	0018      	movs	r0, r3
 800059a:	2310      	movs	r3, #16
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f002 f8b4 	bl	800270c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000660 <MX_TIM2_Init+0xf0>)
 80005a6:	2280      	movs	r2, #128	@ 0x80
 80005a8:	05d2      	lsls	r2, r2, #23
 80005aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80005ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000660 <MX_TIM2_Init+0xf0>)
 80005ae:	2207      	movs	r2, #7
 80005b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000660 <MX_TIM2_Init+0xf0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005b8:	4b29      	ldr	r3, [pc, #164]	@ (8000660 <MX_TIM2_Init+0xf0>)
 80005ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000664 <MX_TIM2_Init+0xf4>)
 80005bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005be:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <MX_TIM2_Init+0xf0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	4b26      	ldr	r3, [pc, #152]	@ (8000660 <MX_TIM2_Init+0xf0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005ca:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <MX_TIM2_Init+0xf0>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fa11 	bl	80019f4 <HAL_TIM_Base_Init>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80005d6:	f000 f8bd 	bl	8000754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005da:	2118      	movs	r1, #24
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2280      	movs	r2, #128	@ 0x80
 80005e0:	0152      	lsls	r2, r2, #5
 80005e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005e4:	187a      	adds	r2, r7, r1
 80005e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <MX_TIM2_Init+0xf0>)
 80005e8:	0011      	movs	r1, r2
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fcde 	bl	8001fac <HAL_TIM_ConfigClockSource>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80005f4:	f000 f8ae 	bl	8000754 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <MX_TIM2_Init+0xf0>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f001 fa3a 	bl	8001a74 <HAL_TIM_IC_Init>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000604:	f000 f8a6 	bl	8000754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000608:	2110      	movs	r1, #16
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000616:	187a      	adds	r2, r7, r1
 8000618:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_TIM2_Init+0xf0>)
 800061a:	0011      	movs	r1, r2
 800061c:	0018      	movs	r0, r3
 800061e:	f002 f81d 	bl	800265c <HAL_TIMEx_MasterConfigSynchronization>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000626:	f000 f895 	bl	8000754 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800062a:	003b      	movs	r3, r7
 800062c:	2202      	movs	r2, #2
 800062e:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000630:	003b      	movs	r3, r7
 8000632:	2201      	movs	r2, #1
 8000634:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000636:	003b      	movs	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800063c:	003b      	movs	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000642:	0039      	movs	r1, r7
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_TIM2_Init+0xf0>)
 8000646:	2200      	movs	r2, #0
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fc0b 	bl	8001e64 <HAL_TIM_IC_ConfigChannel>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000652:	f000 f87f 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b00a      	add	sp, #40	@ 0x28
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	20000028 	.word	0x20000028
 8000664:	0000ffff 	.word	0x0000ffff

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <MX_GPIO_Init+0x28>)
 8000670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000672:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <MX_GPIO_Init+0x28>)
 8000674:	2101      	movs	r1, #1
 8000676:	430a      	orrs	r2, r1
 8000678:	62da      	str	r2, [r3, #44]	@ 0x2c
 800067a:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <MX_GPIO_Init+0x28>)
 800067c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800067e:	2201      	movs	r2, #1
 8000680:	4013      	ands	r3, r2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	4b29      	ldr	r3, [pc, #164]	@ (8000744 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d14a      	bne.n	800073a <HAL_TIM_IC_CaptureCallback+0xa6>
		uint32_t timer_clock = HAL_RCC_GetPCLK1Freq();
 80006a4:	f001 f990 	bl	80019c8 <HAL_RCC_GetPCLK1Freq>
 80006a8:	0003      	movs	r3, r0
 80006aa:	617b      	str	r3, [r7, #20]
		uint32_t prescaler = htim2.Instance->PSC + 1;
 80006ac:	4b25      	ldr	r3, [pc, #148]	@ (8000744 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006b2:	3301      	adds	r3, #1
 80006b4:	613b      	str	r3, [r7, #16]
		uint32_t generated_clock = timer_clock / prescaler;
 80006b6:	6939      	ldr	r1, [r7, #16]
 80006b8:	6978      	ldr	r0, [r7, #20]
 80006ba:	f7ff fd25 	bl	8000108 <__udivsi3>
 80006be:	0003      	movs	r3, r0
 80006c0:	60fb      	str	r3, [r7, #12]

		if (set == 2){
 80006c2:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d117      	bne.n	80006fa <HAL_TIM_IC_CaptureCallback+0x66>
			leitura[2] = leitura[1] - leitura[0];
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80006cc:	685a      	ldr	r2, [r3, #4]
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	1ad2      	subs	r2, r2, r3
 80006d4:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80006d6:	609a      	str	r2, [r3, #8]
			if (leitura[2] > 0) frequencia = (generated_clock / leitura[2]);
 80006d8:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	dd09      	ble.n	80006f4 <HAL_TIM_IC_CaptureCallback+0x60>
 80006e0:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <HAL_TIM_IC_CaptureCallback+0xb8>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	0019      	movs	r1, r3
 80006e6:	68f8      	ldr	r0, [r7, #12]
 80006e8:	f7ff fd0e 	bl	8000108 <__udivsi3>
 80006ec:	0003      	movs	r3, r0
 80006ee:	001a      	movs	r2, r3
 80006f0:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80006f2:	601a      	str	r2, [r3, #0]
			set = 0;
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
		}

		if (set == 1){
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d10b      	bne.n	800071a <HAL_TIM_IC_CaptureCallback+0x86>
			leitura[1] = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000704:	2100      	movs	r1, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f001 fd24 	bl	8002154 <HAL_TIM_ReadCapturedValue>
 800070c:	0003      	movs	r3, r0
 800070e:	001a      	movs	r2, r3
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000712:	605a      	str	r2, [r3, #4]
			set = 2;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000716:	2202      	movs	r2, #2
 8000718:	701a      	strb	r2, [r3, #0]
		}

		if (set == 0){
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d10b      	bne.n	800073a <HAL_TIM_IC_CaptureCallback+0xa6>
			leitura[0] = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fd14 	bl	8002154 <HAL_TIM_ReadCapturedValue>
 800072c:	0003      	movs	r3, r0
 800072e:	001a      	movs	r2, r3
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000732:	601a      	str	r2, [r3, #0]
			set = 1;
 8000734:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b006      	add	sp, #24
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	20000028 	.word	0x20000028
 8000748:	20000078 	.word	0x20000078
 800074c:	20000068 	.word	0x20000068
 8000750:	20000074 	.word	0x20000074

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <HAL_MspInit+0x24>)
 8000766:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_MspInit+0x24>)
 800076a:	2101      	movs	r1, #1
 800076c:	430a      	orrs	r2, r1
 800076e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <HAL_MspInit+0x24>)
 8000772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000774:	4b03      	ldr	r3, [pc, #12]	@ (8000784 <HAL_MspInit+0x24>)
 8000776:	2180      	movs	r1, #128	@ 0x80
 8000778:	0549      	lsls	r1, r1, #21
 800077a:	430a      	orrs	r2, r1
 800077c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b089      	sub	sp, #36	@ 0x24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	240c      	movs	r4, #12
 8000792:	193b      	adds	r3, r7, r4
 8000794:	0018      	movs	r0, r3
 8000796:	2314      	movs	r3, #20
 8000798:	001a      	movs	r2, r3
 800079a:	2100      	movs	r1, #0
 800079c:	f001 ffb6 	bl	800270c <memset>
  if(htim_base->Instance==TIM2)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	2380      	movs	r3, #128	@ 0x80
 80007a6:	05db      	lsls	r3, r3, #23
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d130      	bne.n	800080e <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <HAL_TIM_Base_MspInit+0x90>)
 80007ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <HAL_TIM_Base_MspInit+0x90>)
 80007b2:	2101      	movs	r1, #1
 80007b4:	430a      	orrs	r2, r1
 80007b6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <HAL_TIM_Base_MspInit+0x90>)
 80007ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <HAL_TIM_Base_MspInit+0x90>)
 80007be:	2101      	movs	r1, #1
 80007c0:	430a      	orrs	r2, r1
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <HAL_TIM_Base_MspInit+0x90>)
 80007c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007c8:	2201      	movs	r2, #1
 80007ca:	4013      	ands	r3, r2
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007d0:	0021      	movs	r1, r4
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2201      	movs	r2, #1
 80007d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2202      	movs	r2, #2
 80007dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2202      	movs	r2, #2
 80007ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	187a      	adds	r2, r7, r1
 80007f2:	23a0      	movs	r3, #160	@ 0xa0
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	0011      	movs	r1, r2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 f9b3 	bl	8000b64 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	200f      	movs	r0, #15
 8000804:	f000 f97c 	bl	8000b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000808:	200f      	movs	r0, #15
 800080a:	f000 f98e 	bl	8000b2a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b009      	add	sp, #36	@ 0x24
 8000814:	bd90      	pop	{r4, r7, pc}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	40021000 	.word	0x40021000

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000820:	46c0      	nop			@ (mov r8, r8)
 8000822:	e7fd      	b.n	8000820 <NMI_Handler+0x4>

08000824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	e7fd      	b.n	8000828 <HardFault_Handler+0x4>

0800082c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000830:	46c0      	nop			@ (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 f894 	bl	8000970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000854:	4b03      	ldr	r3, [pc, #12]	@ (8000864 <TIM2_IRQHandler+0x14>)
 8000856:	0018      	movs	r0, r3
 8000858:	f001 fa1c 	bl	8001c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	20000028 	.word	0x20000028

08000868 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000874:	480d      	ldr	r0, [pc, #52]	@ (80008ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000876:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000878:	f7ff fff6 	bl	8000868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	@ (80008b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <LoopForever+0xe>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	@ (80008c0 <LoopForever+0x16>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008a2:	f001 ff3b 	bl	800271c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a6:	f7ff fdff 	bl	80004a8 <main>

080008aa <LoopForever>:

LoopForever:
    b LoopForever
 80008aa:	e7fe      	b.n	80008aa <LoopForever>
  ldr   r0, =_estack
 80008ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b8:	080027b0 	.word	0x080027b0
  ldr r2, =_sbss
 80008bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c0:	20000080 	.word	0x20000080

080008c4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_COMP_IRQHandler>
	...

080008c8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <HAL_Init+0x3c>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <HAL_Init+0x3c>)
 80008da:	2140      	movs	r1, #64	@ 0x40
 80008dc:	430a      	orrs	r2, r1
 80008de:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e0:	2000      	movs	r0, #0
 80008e2:	f000 f811 	bl	8000908 <HAL_InitTick>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d003      	beq.n	80008f2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	e001      	b.n	80008f6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008f2:	f7ff ff35 	bl	8000760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	781b      	ldrb	r3, [r3, #0]
}
 80008fa:	0018      	movs	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	40022000 	.word	0x40022000

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000910:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <HAL_InitTick+0x5c>)
 8000912:	681c      	ldr	r4, [r3, #0]
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_InitTick+0x60>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	0019      	movs	r1, r3
 800091a:	23fa      	movs	r3, #250	@ 0xfa
 800091c:	0098      	lsls	r0, r3, #2
 800091e:	f7ff fbf3 	bl	8000108 <__udivsi3>
 8000922:	0003      	movs	r3, r0
 8000924:	0019      	movs	r1, r3
 8000926:	0020      	movs	r0, r4
 8000928:	f7ff fbee 	bl	8000108 <__udivsi3>
 800092c:	0003      	movs	r3, r0
 800092e:	0018      	movs	r0, r3
 8000930:	f000 f90b 	bl	8000b4a <HAL_SYSTICK_Config>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	e00f      	b.n	800095c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b03      	cmp	r3, #3
 8000940:	d80b      	bhi.n	800095a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	2301      	movs	r3, #1
 8000946:	425b      	negs	r3, r3
 8000948:	2200      	movs	r2, #0
 800094a:	0018      	movs	r0, r3
 800094c:	f000 f8d8 	bl	8000b00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_InitTick+0x64>)
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
 8000958:	e000      	b.n	800095c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b003      	add	sp, #12
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	20000000 	.word	0x20000000
 8000968:	20000008 	.word	0x20000008
 800096c:	20000004 	.word	0x20000004

08000970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000974:	4b05      	ldr	r3, [pc, #20]	@ (800098c <HAL_IncTick+0x1c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	001a      	movs	r2, r3
 800097a:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <HAL_IncTick+0x20>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	18d2      	adds	r2, r2, r3
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <HAL_IncTick+0x20>)
 8000982:	601a      	str	r2, [r3, #0]
}
 8000984:	46c0      	nop			@ (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	20000008 	.word	0x20000008
 8000990:	2000007c 	.word	0x2000007c

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b02      	ldr	r3, [pc, #8]	@ (80009a4 <HAL_GetTick+0x10>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			@ (mov r8, r8)
 80009a4:	2000007c 	.word	0x2000007c

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	0002      	movs	r2, r0
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80009ba:	d809      	bhi.n	80009d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	001a      	movs	r2, r3
 80009c2:	231f      	movs	r3, #31
 80009c4:	401a      	ands	r2, r3
 80009c6:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <__NVIC_EnableIRQ+0x30>)
 80009c8:	2101      	movs	r1, #1
 80009ca:	4091      	lsls	r1, r2
 80009cc:	000a      	movs	r2, r1
 80009ce:	601a      	str	r2, [r3, #0]
  }
}
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b002      	add	sp, #8
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	e000e100 	.word	0xe000e100

080009dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	0002      	movs	r2, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80009f0:	d828      	bhi.n	8000a44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f2:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab0 <__NVIC_SetPriority+0xd4>)
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	33c0      	adds	r3, #192	@ 0xc0
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	589b      	ldr	r3, [r3, r2]
 8000a02:	1dfa      	adds	r2, r7, #7
 8000a04:	7812      	ldrb	r2, [r2, #0]
 8000a06:	0011      	movs	r1, r2
 8000a08:	2203      	movs	r2, #3
 8000a0a:	400a      	ands	r2, r1
 8000a0c:	00d2      	lsls	r2, r2, #3
 8000a0e:	21ff      	movs	r1, #255	@ 0xff
 8000a10:	4091      	lsls	r1, r2
 8000a12:	000a      	movs	r2, r1
 8000a14:	43d2      	mvns	r2, r2
 8000a16:	401a      	ands	r2, r3
 8000a18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	019b      	lsls	r3, r3, #6
 8000a1e:	22ff      	movs	r2, #255	@ 0xff
 8000a20:	401a      	ands	r2, r3
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	0018      	movs	r0, r3
 8000a28:	2303      	movs	r3, #3
 8000a2a:	4003      	ands	r3, r0
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a30:	481f      	ldr	r0, [pc, #124]	@ (8000ab0 <__NVIC_SetPriority+0xd4>)
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b25b      	sxtb	r3, r3
 8000a38:	089b      	lsrs	r3, r3, #2
 8000a3a:	430a      	orrs	r2, r1
 8000a3c:	33c0      	adds	r3, #192	@ 0xc0
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a42:	e031      	b.n	8000aa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a44:	4a1b      	ldr	r2, [pc, #108]	@ (8000ab4 <__NVIC_SetPriority+0xd8>)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	0019      	movs	r1, r3
 8000a4c:	230f      	movs	r3, #15
 8000a4e:	400b      	ands	r3, r1
 8000a50:	3b08      	subs	r3, #8
 8000a52:	089b      	lsrs	r3, r3, #2
 8000a54:	3306      	adds	r3, #6
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	18d3      	adds	r3, r2, r3
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	1dfa      	adds	r2, r7, #7
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	0011      	movs	r1, r2
 8000a64:	2203      	movs	r2, #3
 8000a66:	400a      	ands	r2, r1
 8000a68:	00d2      	lsls	r2, r2, #3
 8000a6a:	21ff      	movs	r1, #255	@ 0xff
 8000a6c:	4091      	lsls	r1, r2
 8000a6e:	000a      	movs	r2, r1
 8000a70:	43d2      	mvns	r2, r2
 8000a72:	401a      	ands	r2, r3
 8000a74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	019b      	lsls	r3, r3, #6
 8000a7a:	22ff      	movs	r2, #255	@ 0xff
 8000a7c:	401a      	ands	r2, r3
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	0018      	movs	r0, r3
 8000a84:	2303      	movs	r3, #3
 8000a86:	4003      	ands	r3, r0
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8c:	4809      	ldr	r0, [pc, #36]	@ (8000ab4 <__NVIC_SetPriority+0xd8>)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	001c      	movs	r4, r3
 8000a94:	230f      	movs	r3, #15
 8000a96:	4023      	ands	r3, r4
 8000a98:	3b08      	subs	r3, #8
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	3306      	adds	r3, #6
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	18c3      	adds	r3, r0, r3
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b003      	add	sp, #12
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	1e5a      	subs	r2, r3, #1
 8000ac4:	2380      	movs	r3, #128	@ 0x80
 8000ac6:	045b      	lsls	r3, r3, #17
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d301      	bcc.n	8000ad0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000acc:	2301      	movs	r3, #1
 8000ace:	e010      	b.n	8000af2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <SysTick_Config+0x44>)
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	3a01      	subs	r2, #1
 8000ad6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad8:	2301      	movs	r3, #1
 8000ada:	425b      	negs	r3, r3
 8000adc:	2103      	movs	r1, #3
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff ff7c 	bl	80009dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <SysTick_Config+0x44>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <SysTick_Config+0x44>)
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	0018      	movs	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b002      	add	sp, #8
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	1c02      	adds	r2, r0, #0
 8000b10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b25b      	sxtb	r3, r3
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff ff5d 	bl	80009dc <__NVIC_SetPriority>
}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b004      	add	sp, #16
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	0002      	movs	r2, r0
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b25b      	sxtb	r3, r3
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff ff33 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	0018      	movs	r0, r3
 8000b56:	f7ff ffaf 	bl	8000ab8 <SysTick_Config>
 8000b5a:	0003      	movs	r3, r0
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b7a:	e14f      	b.n	8000e1c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	4091      	lsls	r1, r2
 8000b86:	000a      	movs	r2, r1
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d100      	bne.n	8000b94 <HAL_GPIO_Init+0x30>
 8000b92:	e140      	b.n	8000e16 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	2203      	movs	r2, #3
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d005      	beq.n	8000bac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d130      	bne.n	8000c0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	0013      	movs	r3, r2
 8000bbc:	43da      	mvns	r2, r3
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	409a      	lsls	r2, r3
 8000bce:	0013      	movs	r3, r2
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be2:	2201      	movs	r2, #1
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	43da      	mvns	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	091b      	lsrs	r3, r3, #4
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	0013      	movs	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2203      	movs	r2, #3
 8000c14:	4013      	ands	r3, r2
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d017      	beq.n	8000c4a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	2203      	movs	r2, #3
 8000c26:	409a      	lsls	r2, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	0013      	movs	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2203      	movs	r2, #3
 8000c50:	4013      	ands	r3, r2
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d123      	bne.n	8000c9e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	08da      	lsrs	r2, r3, #3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3208      	adds	r2, #8
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	58d3      	ldr	r3, [r2, r3]
 8000c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	2207      	movs	r2, #7
 8000c68:	4013      	ands	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	220f      	movs	r2, #15
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	0013      	movs	r3, r2
 8000c72:	43da      	mvns	r2, r3
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	691a      	ldr	r2, [r3, #16]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	2107      	movs	r1, #7
 8000c82:	400b      	ands	r3, r1
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	409a      	lsls	r2, r3
 8000c88:	0013      	movs	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	08da      	lsrs	r2, r3, #3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3208      	adds	r2, #8
 8000c98:	0092      	lsls	r2, r2, #2
 8000c9a:	6939      	ldr	r1, [r7, #16]
 8000c9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	2203      	movs	r2, #3
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685a      	ldr	r2, [r3, #4]
 8000cd6:	23c0      	movs	r3, #192	@ 0xc0
 8000cd8:	029b      	lsls	r3, r3, #10
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d100      	bne.n	8000ce0 <HAL_GPIO_Init+0x17c>
 8000cde:	e09a      	b.n	8000e16 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce0:	4b54      	ldr	r3, [pc, #336]	@ (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ce4:	4b53      	ldr	r3, [pc, #332]	@ (8000e34 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cec:	4a52      	ldr	r2, [pc, #328]	@ (8000e38 <HAL_GPIO_Init+0x2d4>)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	589b      	ldr	r3, [r3, r2]
 8000cf8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4013      	ands	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	409a      	lsls	r2, r3
 8000d06:	0013      	movs	r3, r2
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	23a0      	movs	r3, #160	@ 0xa0
 8000d14:	05db      	lsls	r3, r3, #23
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d019      	beq.n	8000d4e <HAL_GPIO_Init+0x1ea>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a47      	ldr	r2, [pc, #284]	@ (8000e3c <HAL_GPIO_Init+0x2d8>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0x1e6>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a46      	ldr	r2, [pc, #280]	@ (8000e40 <HAL_GPIO_Init+0x2dc>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d00d      	beq.n	8000d46 <HAL_GPIO_Init+0x1e2>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a45      	ldr	r2, [pc, #276]	@ (8000e44 <HAL_GPIO_Init+0x2e0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d007      	beq.n	8000d42 <HAL_GPIO_Init+0x1de>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a44      	ldr	r2, [pc, #272]	@ (8000e48 <HAL_GPIO_Init+0x2e4>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_GPIO_Init+0x1da>
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	e008      	b.n	8000d50 <HAL_GPIO_Init+0x1ec>
 8000d3e:	2306      	movs	r3, #6
 8000d40:	e006      	b.n	8000d50 <HAL_GPIO_Init+0x1ec>
 8000d42:	2303      	movs	r3, #3
 8000d44:	e004      	b.n	8000d50 <HAL_GPIO_Init+0x1ec>
 8000d46:	2302      	movs	r3, #2
 8000d48:	e002      	b.n	8000d50 <HAL_GPIO_Init+0x1ec>
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <HAL_GPIO_Init+0x1ec>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	2103      	movs	r1, #3
 8000d54:	400a      	ands	r2, r1
 8000d56:	0092      	lsls	r2, r2, #2
 8000d58:	4093      	lsls	r3, r2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d60:	4935      	ldr	r1, [pc, #212]	@ (8000e38 <HAL_GPIO_Init+0x2d4>)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	3302      	adds	r3, #2
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d6e:	4b37      	ldr	r3, [pc, #220]	@ (8000e4c <HAL_GPIO_Init+0x2e8>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	43da      	mvns	r2, r3
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685a      	ldr	r2, [r3, #4]
 8000d82:	2380      	movs	r3, #128	@ 0x80
 8000d84:	035b      	lsls	r3, r3, #13
 8000d86:	4013      	ands	r3, r2
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d92:	4b2e      	ldr	r3, [pc, #184]	@ (8000e4c <HAL_GPIO_Init+0x2e8>)
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d98:	4b2c      	ldr	r3, [pc, #176]	@ (8000e4c <HAL_GPIO_Init+0x2e8>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43da      	mvns	r2, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	2380      	movs	r3, #128	@ 0x80
 8000dae:	039b      	lsls	r3, r3, #14
 8000db0:	4013      	ands	r3, r2
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dbc:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <HAL_GPIO_Init+0x2e8>)
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000dc2:	4b22      	ldr	r3, [pc, #136]	@ (8000e4c <HAL_GPIO_Init+0x2e8>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	2380      	movs	r3, #128	@ 0x80
 8000dd8:	029b      	lsls	r3, r3, #10
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <HAL_GPIO_Init+0x2e8>)
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dec:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <HAL_GPIO_Init+0x2e8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	43da      	mvns	r2, r3
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685a      	ldr	r2, [r3, #4]
 8000e00:	2380      	movs	r3, #128	@ 0x80
 8000e02:	025b      	lsls	r3, r3, #9
 8000e04:	4013      	ands	r3, r2
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <HAL_GPIO_Init+0x2e8>)
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	40da      	lsrs	r2, r3
 8000e24:	1e13      	subs	r3, r2, #0
 8000e26:	d000      	beq.n	8000e2a <HAL_GPIO_Init+0x2c6>
 8000e28:	e6a8      	b.n	8000b7c <HAL_GPIO_Init+0x18>
  }
}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b006      	add	sp, #24
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	50000400 	.word	0x50000400
 8000e40:	50000800 	.word	0x50000800
 8000e44:	50000c00 	.word	0x50000c00
 8000e48:	50001c00 	.word	0x50001c00
 8000e4c:	40010400 	.word	0x40010400

08000e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	b08a      	sub	sp, #40	@ 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	f000 fbaf 	bl	80015c2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e64:	4bcf      	ldr	r3, [pc, #828]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	220c      	movs	r2, #12
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e6e:	4bcd      	ldr	r3, [pc, #820]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	2380      	movs	r3, #128	@ 0x80
 8000e74:	025b      	lsls	r3, r3, #9
 8000e76:	4013      	ands	r3, r2
 8000e78:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4013      	ands	r3, r2
 8000e82:	d100      	bne.n	8000e86 <HAL_RCC_OscConfig+0x36>
 8000e84:	e07e      	b.n	8000f84 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e86:	6a3b      	ldr	r3, [r7, #32]
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	d007      	beq.n	8000e9c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
 8000e8e:	2b0c      	cmp	r3, #12
 8000e90:	d112      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x68>
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	2380      	movs	r3, #128	@ 0x80
 8000e96:	025b      	lsls	r3, r3, #9
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d10d      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	4bc1      	ldr	r3, [pc, #772]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	029b      	lsls	r3, r3, #10
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <HAL_RCC_OscConfig+0x5a>
 8000ea8:	e06b      	b.n	8000f82 <HAL_RCC_OscConfig+0x132>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d167      	bne.n	8000f82 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f000 fb85 	bl	80015c2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	2380      	movs	r3, #128	@ 0x80
 8000ebe:	025b      	lsls	r3, r3, #9
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d107      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x84>
 8000ec4:	4bb7      	ldr	r3, [pc, #732]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4bb6      	ldr	r3, [pc, #728]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000eca:	2180      	movs	r1, #128	@ 0x80
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e027      	b.n	8000f24 <HAL_RCC_OscConfig+0xd4>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	23a0      	movs	r3, #160	@ 0xa0
 8000eda:	02db      	lsls	r3, r3, #11
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d10e      	bne.n	8000efe <HAL_RCC_OscConfig+0xae>
 8000ee0:	4bb0      	ldr	r3, [pc, #704]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4baf      	ldr	r3, [pc, #700]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000ee6:	2180      	movs	r1, #128	@ 0x80
 8000ee8:	02c9      	lsls	r1, r1, #11
 8000eea:	430a      	orrs	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	4bad      	ldr	r3, [pc, #692]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4bac      	ldr	r3, [pc, #688]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000ef4:	2180      	movs	r1, #128	@ 0x80
 8000ef6:	0249      	lsls	r1, r1, #9
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e012      	b.n	8000f24 <HAL_RCC_OscConfig+0xd4>
 8000efe:	4ba9      	ldr	r3, [pc, #676]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4ba8      	ldr	r3, [pc, #672]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000f04:	49a8      	ldr	r1, [pc, #672]	@ (80011a8 <HAL_RCC_OscConfig+0x358>)
 8000f06:	400a      	ands	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	4ba6      	ldr	r3, [pc, #664]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	2380      	movs	r3, #128	@ 0x80
 8000f10:	025b      	lsls	r3, r3, #9
 8000f12:	4013      	ands	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4ba2      	ldr	r3, [pc, #648]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4ba1      	ldr	r3, [pc, #644]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000f1e:	49a3      	ldr	r1, [pc, #652]	@ (80011ac <HAL_RCC_OscConfig+0x35c>)
 8000f20:	400a      	ands	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d015      	beq.n	8000f58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fd32 	bl	8000994 <HAL_GetTick>
 8000f30:	0003      	movs	r3, r0
 8000f32:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f34:	e009      	b.n	8000f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f36:	f7ff fd2d 	bl	8000994 <HAL_GetTick>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b64      	cmp	r3, #100	@ 0x64
 8000f42:	d902      	bls.n	8000f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	f000 fb3c 	bl	80015c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f4a:	4b96      	ldr	r3, [pc, #600]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	2380      	movs	r3, #128	@ 0x80
 8000f50:	029b      	lsls	r3, r3, #10
 8000f52:	4013      	ands	r3, r2
 8000f54:	d0ef      	beq.n	8000f36 <HAL_RCC_OscConfig+0xe6>
 8000f56:	e015      	b.n	8000f84 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fd1c 	bl	8000994 <HAL_GetTick>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f62:	f7ff fd17 	bl	8000994 <HAL_GetTick>
 8000f66:	0002      	movs	r2, r0
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b64      	cmp	r3, #100	@ 0x64
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e326      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f74:	4b8b      	ldr	r3, [pc, #556]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2380      	movs	r3, #128	@ 0x80
 8000f7a:	029b      	lsls	r3, r3, #10
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d1f0      	bne.n	8000f62 <HAL_RCC_OscConfig+0x112>
 8000f80:	e000      	b.n	8000f84 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f82:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2202      	movs	r2, #2
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	d100      	bne.n	8000f90 <HAL_RCC_OscConfig+0x140>
 8000f8e:	e08b      	b.n	80010a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f96:	6a3b      	ldr	r3, [r7, #32]
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d005      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	2b0c      	cmp	r3, #12
 8000fa0:	d13e      	bne.n	8001020 <HAL_RCC_OscConfig+0x1d0>
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d13b      	bne.n	8001020 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000fa8:	4b7e      	ldr	r3, [pc, #504]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2204      	movs	r2, #4
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d004      	beq.n	8000fbc <HAL_RCC_OscConfig+0x16c>
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e302      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fbc:	4b79      	ldr	r3, [pc, #484]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	4a7b      	ldr	r2, [pc, #492]	@ (80011b0 <HAL_RCC_OscConfig+0x360>)
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	021a      	lsls	r2, r3, #8
 8000fcc:	4b75      	ldr	r3, [pc, #468]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fd2:	4b74      	ldr	r3, [pc, #464]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2209      	movs	r2, #9
 8000fd8:	4393      	bics	r3, r2
 8000fda:	0019      	movs	r1, r3
 8000fdc:	4b71      	ldr	r3, [pc, #452]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000fe4:	f000 fc40 	bl	8001868 <HAL_RCC_GetSysClockFreq>
 8000fe8:	0001      	movs	r1, r0
 8000fea:	4b6e      	ldr	r3, [pc, #440]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	091b      	lsrs	r3, r3, #4
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	4a6f      	ldr	r2, [pc, #444]	@ (80011b4 <HAL_RCC_OscConfig+0x364>)
 8000ff6:	5cd3      	ldrb	r3, [r2, r3]
 8000ff8:	000a      	movs	r2, r1
 8000ffa:	40da      	lsrs	r2, r3
 8000ffc:	4b6e      	ldr	r3, [pc, #440]	@ (80011b8 <HAL_RCC_OscConfig+0x368>)
 8000ffe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001000:	4b6e      	ldr	r3, [pc, #440]	@ (80011bc <HAL_RCC_OscConfig+0x36c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2513      	movs	r5, #19
 8001006:	197c      	adds	r4, r7, r5
 8001008:	0018      	movs	r0, r3
 800100a:	f7ff fc7d 	bl	8000908 <HAL_InitTick>
 800100e:	0003      	movs	r3, r0
 8001010:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001012:	197b      	adds	r3, r7, r5
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d046      	beq.n	80010a8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800101a:	197b      	adds	r3, r7, r5
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	e2d0      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d027      	beq.n	8001076 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001026:	4b5f      	ldr	r3, [pc, #380]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2209      	movs	r2, #9
 800102c:	4393      	bics	r3, r2
 800102e:	0019      	movs	r1, r3
 8001030:	4b5c      	ldr	r3, [pc, #368]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	430a      	orrs	r2, r1
 8001036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fcac 	bl	8000994 <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001042:	f7ff fca7 	bl	8000994 <HAL_GetTick>
 8001046:	0002      	movs	r2, r0
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e2b6      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001054:	4b53      	ldr	r3, [pc, #332]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2204      	movs	r2, #4
 800105a:	4013      	ands	r3, r2
 800105c:	d0f1      	beq.n	8001042 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105e:	4b51      	ldr	r3, [pc, #324]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	4a53      	ldr	r2, [pc, #332]	@ (80011b0 <HAL_RCC_OscConfig+0x360>)
 8001064:	4013      	ands	r3, r2
 8001066:	0019      	movs	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	021a      	lsls	r2, r3, #8
 800106e:	4b4d      	ldr	r3, [pc, #308]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8001070:	430a      	orrs	r2, r1
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	e018      	b.n	80010a8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001076:	4b4b      	ldr	r3, [pc, #300]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b4a      	ldr	r3, [pc, #296]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 800107c:	2101      	movs	r1, #1
 800107e:	438a      	bics	r2, r1
 8001080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001082:	f7ff fc87 	bl	8000994 <HAL_GetTick>
 8001086:	0003      	movs	r3, r0
 8001088:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108c:	f7ff fc82 	bl	8000994 <HAL_GetTick>
 8001090:	0002      	movs	r2, r0
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e291      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800109e:	4b41      	ldr	r3, [pc, #260]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2204      	movs	r2, #4
 80010a4:	4013      	ands	r3, r2
 80010a6:	d1f1      	bne.n	800108c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2210      	movs	r2, #16
 80010ae:	4013      	ands	r3, r2
 80010b0:	d100      	bne.n	80010b4 <HAL_RCC_OscConfig+0x264>
 80010b2:	e0a1      	b.n	80011f8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010b4:	6a3b      	ldr	r3, [r7, #32]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d140      	bne.n	800113c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010ba:	4b3a      	ldr	r3, [pc, #232]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	2380      	movs	r3, #128	@ 0x80
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4013      	ands	r3, r2
 80010c4:	d005      	beq.n	80010d2 <HAL_RCC_OscConfig+0x282>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e277      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d2:	4b34      	ldr	r3, [pc, #208]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a3a      	ldr	r2, [pc, #232]	@ (80011c0 <HAL_RCC_OscConfig+0x370>)
 80010d8:	4013      	ands	r3, r2
 80010da:	0019      	movs	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010e0:	4b30      	ldr	r3, [pc, #192]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 80010e2:	430a      	orrs	r2, r1
 80010e4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010e6:	4b2f      	ldr	r3, [pc, #188]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	0a19      	lsrs	r1, r3, #8
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	061a      	lsls	r2, r3, #24
 80010f4:	4b2b      	ldr	r3, [pc, #172]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 80010f6:	430a      	orrs	r2, r1
 80010f8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fe:	0b5b      	lsrs	r3, r3, #13
 8001100:	3301      	adds	r3, #1
 8001102:	2280      	movs	r2, #128	@ 0x80
 8001104:	0212      	lsls	r2, r2, #8
 8001106:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001108:	4b26      	ldr	r3, [pc, #152]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	210f      	movs	r1, #15
 8001110:	400b      	ands	r3, r1
 8001112:	4928      	ldr	r1, [pc, #160]	@ (80011b4 <HAL_RCC_OscConfig+0x364>)
 8001114:	5ccb      	ldrb	r3, [r1, r3]
 8001116:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001118:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <HAL_RCC_OscConfig+0x368>)
 800111a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800111c:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <HAL_RCC_OscConfig+0x36c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2513      	movs	r5, #19
 8001122:	197c      	adds	r4, r7, r5
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff fbef 	bl	8000908 <HAL_InitTick>
 800112a:	0003      	movs	r3, r0
 800112c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800112e:	197b      	adds	r3, r7, r5
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d060      	beq.n	80011f8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001136:	197b      	adds	r3, r7, r5
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	e242      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d03f      	beq.n	80011c4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001144:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 800114a:	2180      	movs	r1, #128	@ 0x80
 800114c:	0049      	lsls	r1, r1, #1
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fc1f 	bl	8000994 <HAL_GetTick>
 8001156:	0003      	movs	r3, r0
 8001158:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800115c:	f7ff fc1a 	bl	8000994 <HAL_GetTick>
 8001160:	0002      	movs	r2, r0
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e229      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800116e:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	2380      	movs	r3, #128	@ 0x80
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4013      	ands	r3, r2
 8001178:	d0f0      	beq.n	800115c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800117a:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a10      	ldr	r2, [pc, #64]	@ (80011c0 <HAL_RCC_OscConfig+0x370>)
 8001180:	4013      	ands	r3, r2
 8001182:	0019      	movs	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 800118a:	430a      	orrs	r2, r1
 800118c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800118e:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	0a19      	lsrs	r1, r3, #8
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	061a      	lsls	r2, r3, #24
 800119c:	4b01      	ldr	r3, [pc, #4]	@ (80011a4 <HAL_RCC_OscConfig+0x354>)
 800119e:	430a      	orrs	r2, r1
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	e029      	b.n	80011f8 <HAL_RCC_OscConfig+0x3a8>
 80011a4:	40021000 	.word	0x40021000
 80011a8:	fffeffff 	.word	0xfffeffff
 80011ac:	fffbffff 	.word	0xfffbffff
 80011b0:	ffffe0ff 	.word	0xffffe0ff
 80011b4:	0800277c 	.word	0x0800277c
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004
 80011c0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011c4:	4bbd      	ldr	r3, [pc, #756]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4bbc      	ldr	r3, [pc, #752]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 80011ca:	49bd      	ldr	r1, [pc, #756]	@ (80014c0 <HAL_RCC_OscConfig+0x670>)
 80011cc:	400a      	ands	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fbe0 	bl	8000994 <HAL_GetTick>
 80011d4:	0003      	movs	r3, r0
 80011d6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011da:	f7ff fbdb 	bl	8000994 <HAL_GetTick>
 80011de:	0002      	movs	r2, r0
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e1ea      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011ec:	4bb3      	ldr	r3, [pc, #716]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	@ 0x80
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	d1f0      	bne.n	80011da <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2208      	movs	r2, #8
 80011fe:	4013      	ands	r3, r2
 8001200:	d036      	beq.n	8001270 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d019      	beq.n	800123e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120a:	4bac      	ldr	r3, [pc, #688]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 800120c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800120e:	4bab      	ldr	r3, [pc, #684]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001210:	2101      	movs	r1, #1
 8001212:	430a      	orrs	r2, r1
 8001214:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fbbd 	bl	8000994 <HAL_GetTick>
 800121a:	0003      	movs	r3, r0
 800121c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001220:	f7ff fbb8 	bl	8000994 <HAL_GetTick>
 8001224:	0002      	movs	r2, r0
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e1c7      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001232:	4ba2      	ldr	r3, [pc, #648]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001236:	2202      	movs	r2, #2
 8001238:	4013      	ands	r3, r2
 800123a:	d0f1      	beq.n	8001220 <HAL_RCC_OscConfig+0x3d0>
 800123c:	e018      	b.n	8001270 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800123e:	4b9f      	ldr	r3, [pc, #636]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001240:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001242:	4b9e      	ldr	r3, [pc, #632]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001244:	2101      	movs	r1, #1
 8001246:	438a      	bics	r2, r1
 8001248:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7ff fba3 	bl	8000994 <HAL_GetTick>
 800124e:	0003      	movs	r3, r0
 8001250:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fb9e 	bl	8000994 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e1ad      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001266:	4b95      	ldr	r3, [pc, #596]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800126a:	2202      	movs	r2, #2
 800126c:	4013      	ands	r3, r2
 800126e:	d1f1      	bne.n	8001254 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2204      	movs	r2, #4
 8001276:	4013      	ands	r3, r2
 8001278:	d100      	bne.n	800127c <HAL_RCC_OscConfig+0x42c>
 800127a:	e0ae      	b.n	80013da <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800127c:	2027      	movs	r0, #39	@ 0x27
 800127e:	183b      	adds	r3, r7, r0
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001284:	4b8d      	ldr	r3, [pc, #564]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001286:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001288:	2380      	movs	r3, #128	@ 0x80
 800128a:	055b      	lsls	r3, r3, #21
 800128c:	4013      	ands	r3, r2
 800128e:	d109      	bne.n	80012a4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001290:	4b8a      	ldr	r3, [pc, #552]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001294:	4b89      	ldr	r3, [pc, #548]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001296:	2180      	movs	r1, #128	@ 0x80
 8001298:	0549      	lsls	r1, r1, #21
 800129a:	430a      	orrs	r2, r1
 800129c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800129e:	183b      	adds	r3, r7, r0
 80012a0:	2201      	movs	r2, #1
 80012a2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	4b87      	ldr	r3, [pc, #540]	@ (80014c4 <HAL_RCC_OscConfig+0x674>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	2380      	movs	r3, #128	@ 0x80
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4013      	ands	r3, r2
 80012ae:	d11a      	bne.n	80012e6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b0:	4b84      	ldr	r3, [pc, #528]	@ (80014c4 <HAL_RCC_OscConfig+0x674>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b83      	ldr	r3, [pc, #524]	@ (80014c4 <HAL_RCC_OscConfig+0x674>)
 80012b6:	2180      	movs	r1, #128	@ 0x80
 80012b8:	0049      	lsls	r1, r1, #1
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012be:	f7ff fb69 	bl	8000994 <HAL_GetTick>
 80012c2:	0003      	movs	r3, r0
 80012c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c8:	f7ff fb64 	bl	8000994 <HAL_GetTick>
 80012cc:	0002      	movs	r2, r0
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	@ 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e173      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012da:	4b7a      	ldr	r3, [pc, #488]	@ (80014c4 <HAL_RCC_OscConfig+0x674>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	2380      	movs	r3, #128	@ 0x80
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4013      	ands	r3, r2
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	2380      	movs	r3, #128	@ 0x80
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_OscConfig+0x4b2>
 80012f2:	4b72      	ldr	r3, [pc, #456]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 80012f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012f6:	4b71      	ldr	r3, [pc, #452]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 80012f8:	2180      	movs	r1, #128	@ 0x80
 80012fa:	0049      	lsls	r1, r1, #1
 80012fc:	430a      	orrs	r2, r1
 80012fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001300:	e031      	b.n	8001366 <HAL_RCC_OscConfig+0x516>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x4d4>
 800130a:	4b6c      	ldr	r3, [pc, #432]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 800130c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800130e:	4b6b      	ldr	r3, [pc, #428]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001310:	496b      	ldr	r1, [pc, #428]	@ (80014c0 <HAL_RCC_OscConfig+0x670>)
 8001312:	400a      	ands	r2, r1
 8001314:	651a      	str	r2, [r3, #80]	@ 0x50
 8001316:	4b69      	ldr	r3, [pc, #420]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001318:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800131a:	4b68      	ldr	r3, [pc, #416]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 800131c:	496a      	ldr	r1, [pc, #424]	@ (80014c8 <HAL_RCC_OscConfig+0x678>)
 800131e:	400a      	ands	r2, r1
 8001320:	651a      	str	r2, [r3, #80]	@ 0x50
 8001322:	e020      	b.n	8001366 <HAL_RCC_OscConfig+0x516>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	23a0      	movs	r3, #160	@ 0xa0
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	429a      	cmp	r2, r3
 800132e:	d10e      	bne.n	800134e <HAL_RCC_OscConfig+0x4fe>
 8001330:	4b62      	ldr	r3, [pc, #392]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001332:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001334:	4b61      	ldr	r3, [pc, #388]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001336:	2180      	movs	r1, #128	@ 0x80
 8001338:	00c9      	lsls	r1, r1, #3
 800133a:	430a      	orrs	r2, r1
 800133c:	651a      	str	r2, [r3, #80]	@ 0x50
 800133e:	4b5f      	ldr	r3, [pc, #380]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001340:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001342:	4b5e      	ldr	r3, [pc, #376]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001344:	2180      	movs	r1, #128	@ 0x80
 8001346:	0049      	lsls	r1, r1, #1
 8001348:	430a      	orrs	r2, r1
 800134a:	651a      	str	r2, [r3, #80]	@ 0x50
 800134c:	e00b      	b.n	8001366 <HAL_RCC_OscConfig+0x516>
 800134e:	4b5b      	ldr	r3, [pc, #364]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001350:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001352:	4b5a      	ldr	r3, [pc, #360]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001354:	495a      	ldr	r1, [pc, #360]	@ (80014c0 <HAL_RCC_OscConfig+0x670>)
 8001356:	400a      	ands	r2, r1
 8001358:	651a      	str	r2, [r3, #80]	@ 0x50
 800135a:	4b58      	ldr	r3, [pc, #352]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 800135c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800135e:	4b57      	ldr	r3, [pc, #348]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001360:	4959      	ldr	r1, [pc, #356]	@ (80014c8 <HAL_RCC_OscConfig+0x678>)
 8001362:	400a      	ands	r2, r1
 8001364:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d015      	beq.n	800139a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136e:	f7ff fb11 	bl	8000994 <HAL_GetTick>
 8001372:	0003      	movs	r3, r0
 8001374:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001376:	e009      	b.n	800138c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001378:	f7ff fb0c 	bl	8000994 <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	4a52      	ldr	r2, [pc, #328]	@ (80014cc <HAL_RCC_OscConfig+0x67c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e11a      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800138c:	4b4b      	ldr	r3, [pc, #300]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 800138e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001390:	2380      	movs	r3, #128	@ 0x80
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4013      	ands	r3, r2
 8001396:	d0ef      	beq.n	8001378 <HAL_RCC_OscConfig+0x528>
 8001398:	e014      	b.n	80013c4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139a:	f7ff fafb 	bl	8000994 <HAL_GetTick>
 800139e:	0003      	movs	r3, r0
 80013a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013a2:	e009      	b.n	80013b8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff faf6 	bl	8000994 <HAL_GetTick>
 80013a8:	0002      	movs	r2, r0
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	4a47      	ldr	r2, [pc, #284]	@ (80014cc <HAL_RCC_OscConfig+0x67c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e104      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013b8:	4b40      	ldr	r3, [pc, #256]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 80013ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d1ef      	bne.n	80013a4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013c4:	2327      	movs	r3, #39	@ 0x27
 80013c6:	18fb      	adds	r3, r7, r3
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d105      	bne.n	80013da <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ce:	4b3b      	ldr	r3, [pc, #236]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 80013d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013d2:	4b3a      	ldr	r3, [pc, #232]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 80013d4:	493e      	ldr	r1, [pc, #248]	@ (80014d0 <HAL_RCC_OscConfig+0x680>)
 80013d6:	400a      	ands	r2, r1
 80013d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2220      	movs	r2, #32
 80013e0:	4013      	ands	r3, r2
 80013e2:	d049      	beq.n	8001478 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d026      	beq.n	800143a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80013ec:	4b33      	ldr	r3, [pc, #204]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 80013fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013fc:	4b2f      	ldr	r3, [pc, #188]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 80013fe:	2101      	movs	r1, #1
 8001400:	430a      	orrs	r2, r1
 8001402:	635a      	str	r2, [r3, #52]	@ 0x34
 8001404:	4b33      	ldr	r3, [pc, #204]	@ (80014d4 <HAL_RCC_OscConfig+0x684>)
 8001406:	6a1a      	ldr	r2, [r3, #32]
 8001408:	4b32      	ldr	r3, [pc, #200]	@ (80014d4 <HAL_RCC_OscConfig+0x684>)
 800140a:	2180      	movs	r1, #128	@ 0x80
 800140c:	0189      	lsls	r1, r1, #6
 800140e:	430a      	orrs	r2, r1
 8001410:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001412:	f7ff fabf 	bl	8000994 <HAL_GetTick>
 8001416:	0003      	movs	r3, r0
 8001418:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800141c:	f7ff faba 	bl	8000994 <HAL_GetTick>
 8001420:	0002      	movs	r2, r0
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e0c9      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800142e:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2202      	movs	r2, #2
 8001434:	4013      	ands	r3, r2
 8001436:	d0f1      	beq.n	800141c <HAL_RCC_OscConfig+0x5cc>
 8001438:	e01e      	b.n	8001478 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	4b1f      	ldr	r3, [pc, #124]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001440:	2101      	movs	r1, #1
 8001442:	438a      	bics	r2, r1
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <HAL_RCC_OscConfig+0x684>)
 8001448:	6a1a      	ldr	r2, [r3, #32]
 800144a:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <HAL_RCC_OscConfig+0x684>)
 800144c:	4922      	ldr	r1, [pc, #136]	@ (80014d8 <HAL_RCC_OscConfig+0x688>)
 800144e:	400a      	ands	r2, r1
 8001450:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fa9f 	bl	8000994 <HAL_GetTick>
 8001456:	0003      	movs	r3, r0
 8001458:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800145c:	f7ff fa9a 	bl	8000994 <HAL_GetTick>
 8001460:	0002      	movs	r2, r0
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e0a9      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2202      	movs	r2, #2
 8001474:	4013      	ands	r3, r2
 8001476:	d1f1      	bne.n	800145c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147c:	2b00      	cmp	r3, #0
 800147e:	d100      	bne.n	8001482 <HAL_RCC_OscConfig+0x632>
 8001480:	e09e      	b.n	80015c0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001482:	6a3b      	ldr	r3, [r7, #32]
 8001484:	2b0c      	cmp	r3, #12
 8001486:	d100      	bne.n	800148a <HAL_RCC_OscConfig+0x63a>
 8001488:	e077      	b.n	800157a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148e:	2b02      	cmp	r3, #2
 8001490:	d158      	bne.n	8001544 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001492:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <HAL_RCC_OscConfig+0x66c>)
 8001498:	4910      	ldr	r1, [pc, #64]	@ (80014dc <HAL_RCC_OscConfig+0x68c>)
 800149a:	400a      	ands	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fa79 	bl	8000994 <HAL_GetTick>
 80014a2:	0003      	movs	r3, r0
 80014a4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014a6:	e01b      	b.n	80014e0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff fa74 	bl	8000994 <HAL_GetTick>
 80014ac:	0002      	movs	r2, r0
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d914      	bls.n	80014e0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e083      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	40021000 	.word	0x40021000
 80014c0:	fffffeff 	.word	0xfffffeff
 80014c4:	40007000 	.word	0x40007000
 80014c8:	fffffbff 	.word	0xfffffbff
 80014cc:	00001388 	.word	0x00001388
 80014d0:	efffffff 	.word	0xefffffff
 80014d4:	40010000 	.word	0x40010000
 80014d8:	ffffdfff 	.word	0xffffdfff
 80014dc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014e0:	4b3a      	ldr	r3, [pc, #232]	@ (80015cc <HAL_RCC_OscConfig+0x77c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	049b      	lsls	r3, r3, #18
 80014e8:	4013      	ands	r3, r2
 80014ea:	d1dd      	bne.n	80014a8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ec:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <HAL_RCC_OscConfig+0x77c>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4a37      	ldr	r2, [pc, #220]	@ (80015d0 <HAL_RCC_OscConfig+0x780>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001504:	431a      	orrs	r2, r3
 8001506:	4b31      	ldr	r3, [pc, #196]	@ (80015cc <HAL_RCC_OscConfig+0x77c>)
 8001508:	430a      	orrs	r2, r1
 800150a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150c:	4b2f      	ldr	r3, [pc, #188]	@ (80015cc <HAL_RCC_OscConfig+0x77c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b2e      	ldr	r3, [pc, #184]	@ (80015cc <HAL_RCC_OscConfig+0x77c>)
 8001512:	2180      	movs	r1, #128	@ 0x80
 8001514:	0449      	lsls	r1, r1, #17
 8001516:	430a      	orrs	r2, r1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fa3b 	bl	8000994 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001524:	f7ff fa36 	bl	8000994 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e045      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001536:	4b25      	ldr	r3, [pc, #148]	@ (80015cc <HAL_RCC_OscConfig+0x77c>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	@ 0x80
 800153c:	049b      	lsls	r3, r3, #18
 800153e:	4013      	ands	r3, r2
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0x6d4>
 8001542:	e03d      	b.n	80015c0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001544:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <HAL_RCC_OscConfig+0x77c>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <HAL_RCC_OscConfig+0x77c>)
 800154a:	4922      	ldr	r1, [pc, #136]	@ (80015d4 <HAL_RCC_OscConfig+0x784>)
 800154c:	400a      	ands	r2, r1
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fa20 	bl	8000994 <HAL_GetTick>
 8001554:	0003      	movs	r3, r0
 8001556:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff fa1b 	bl	8000994 <HAL_GetTick>
 800155e:	0002      	movs	r2, r0
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e02a      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800156c:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <HAL_RCC_OscConfig+0x77c>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	049b      	lsls	r3, r3, #18
 8001574:	4013      	ands	r3, r2
 8001576:	d1f0      	bne.n	800155a <HAL_RCC_OscConfig+0x70a>
 8001578:	e022      	b.n	80015c0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e01d      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <HAL_RCC_OscConfig+0x77c>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158c:	69fa      	ldr	r2, [r7, #28]
 800158e:	2380      	movs	r3, #128	@ 0x80
 8001590:	025b      	lsls	r3, r3, #9
 8001592:	401a      	ands	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001598:	429a      	cmp	r2, r3
 800159a:	d10f      	bne.n	80015bc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	23f0      	movs	r3, #240	@ 0xf0
 80015a0:	039b      	lsls	r3, r3, #14
 80015a2:	401a      	ands	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d107      	bne.n	80015bc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	23c0      	movs	r3, #192	@ 0xc0
 80015b0:	041b      	lsls	r3, r3, #16
 80015b2:	401a      	ands	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	0018      	movs	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b00a      	add	sp, #40	@ 0x28
 80015c8:	bdb0      	pop	{r4, r5, r7, pc}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	40021000 	.word	0x40021000
 80015d0:	ff02ffff 	.word	0xff02ffff
 80015d4:	feffffff 	.word	0xfeffffff

080015d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d101      	bne.n	80015ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e128      	b.n	800183e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015ec:	4b96      	ldr	r3, [pc, #600]	@ (8001848 <HAL_RCC_ClockConfig+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2201      	movs	r2, #1
 80015f2:	4013      	ands	r3, r2
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d91e      	bls.n	8001638 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fa:	4b93      	ldr	r3, [pc, #588]	@ (8001848 <HAL_RCC_ClockConfig+0x270>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2201      	movs	r2, #1
 8001600:	4393      	bics	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	4b90      	ldr	r3, [pc, #576]	@ (8001848 <HAL_RCC_ClockConfig+0x270>)
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800160c:	f7ff f9c2 	bl	8000994 <HAL_GetTick>
 8001610:	0003      	movs	r3, r0
 8001612:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001614:	e009      	b.n	800162a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001616:	f7ff f9bd 	bl	8000994 <HAL_GetTick>
 800161a:	0002      	movs	r2, r0
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	4a8a      	ldr	r2, [pc, #552]	@ (800184c <HAL_RCC_ClockConfig+0x274>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e109      	b.n	800183e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b87      	ldr	r3, [pc, #540]	@ (8001848 <HAL_RCC_ClockConfig+0x270>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2201      	movs	r2, #1
 8001630:	4013      	ands	r3, r2
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d1ee      	bne.n	8001616 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d009      	beq.n	8001656 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001642:	4b83      	ldr	r3, [pc, #524]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	22f0      	movs	r2, #240	@ 0xf0
 8001648:	4393      	bics	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	4b7f      	ldr	r3, [pc, #508]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 8001652:	430a      	orrs	r2, r1
 8001654:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2201      	movs	r2, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d100      	bne.n	8001662 <HAL_RCC_ClockConfig+0x8a>
 8001660:	e089      	b.n	8001776 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800166a:	4b79      	ldr	r3, [pc, #484]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	2380      	movs	r3, #128	@ 0x80
 8001670:	029b      	lsls	r3, r3, #10
 8001672:	4013      	ands	r3, r2
 8001674:	d120      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e0e1      	b.n	800183e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d107      	bne.n	8001692 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001682:	4b73      	ldr	r3, [pc, #460]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2380      	movs	r3, #128	@ 0x80
 8001688:	049b      	lsls	r3, r3, #18
 800168a:	4013      	ands	r3, r2
 800168c:	d114      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0d5      	b.n	800183e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d106      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800169a:	4b6d      	ldr	r3, [pc, #436]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2204      	movs	r2, #4
 80016a0:	4013      	ands	r3, r2
 80016a2:	d109      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0ca      	b.n	800183e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016a8:	4b69      	ldr	r3, [pc, #420]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4013      	ands	r3, r2
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0c2      	b.n	800183e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b8:	4b65      	ldr	r3, [pc, #404]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2203      	movs	r2, #3
 80016be:	4393      	bics	r3, r2
 80016c0:	0019      	movs	r1, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4b62      	ldr	r3, [pc, #392]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 80016c8:	430a      	orrs	r2, r1
 80016ca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016cc:	f7ff f962 	bl	8000994 <HAL_GetTick>
 80016d0:	0003      	movs	r3, r0
 80016d2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d111      	bne.n	8001700 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016dc:	e009      	b.n	80016f2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016de:	f7ff f959 	bl	8000994 <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	4a58      	ldr	r2, [pc, #352]	@ (800184c <HAL_RCC_ClockConfig+0x274>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e0a5      	b.n	800183e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f2:	4b57      	ldr	r3, [pc, #348]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	220c      	movs	r2, #12
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d1ef      	bne.n	80016de <HAL_RCC_ClockConfig+0x106>
 80016fe:	e03a      	b.n	8001776 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b03      	cmp	r3, #3
 8001706:	d111      	bne.n	800172c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001708:	e009      	b.n	800171e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170a:	f7ff f943 	bl	8000994 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	4a4d      	ldr	r2, [pc, #308]	@ (800184c <HAL_RCC_ClockConfig+0x274>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e08f      	b.n	800183e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800171e:	4b4c      	ldr	r3, [pc, #304]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	220c      	movs	r2, #12
 8001724:	4013      	ands	r3, r2
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d1ef      	bne.n	800170a <HAL_RCC_ClockConfig+0x132>
 800172a:	e024      	b.n	8001776 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d11b      	bne.n	800176c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001734:	e009      	b.n	800174a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001736:	f7ff f92d 	bl	8000994 <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	4a42      	ldr	r2, [pc, #264]	@ (800184c <HAL_RCC_ClockConfig+0x274>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e079      	b.n	800183e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800174a:	4b41      	ldr	r3, [pc, #260]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	220c      	movs	r2, #12
 8001750:	4013      	ands	r3, r2
 8001752:	2b04      	cmp	r3, #4
 8001754:	d1ef      	bne.n	8001736 <HAL_RCC_ClockConfig+0x15e>
 8001756:	e00e      	b.n	8001776 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7ff f91c 	bl	8000994 <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	4a3a      	ldr	r2, [pc, #232]	@ (800184c <HAL_RCC_ClockConfig+0x274>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e068      	b.n	800183e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800176c:	4b38      	ldr	r3, [pc, #224]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	220c      	movs	r2, #12
 8001772:	4013      	ands	r3, r2
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001776:	4b34      	ldr	r3, [pc, #208]	@ (8001848 <HAL_RCC_ClockConfig+0x270>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2201      	movs	r2, #1
 800177c:	4013      	ands	r3, r2
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d21e      	bcs.n	80017c2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001784:	4b30      	ldr	r3, [pc, #192]	@ (8001848 <HAL_RCC_ClockConfig+0x270>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2201      	movs	r2, #1
 800178a:	4393      	bics	r3, r2
 800178c:	0019      	movs	r1, r3
 800178e:	4b2e      	ldr	r3, [pc, #184]	@ (8001848 <HAL_RCC_ClockConfig+0x270>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001796:	f7ff f8fd 	bl	8000994 <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	e009      	b.n	80017b4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a0:	f7ff f8f8 	bl	8000994 <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	4a28      	ldr	r2, [pc, #160]	@ (800184c <HAL_RCC_ClockConfig+0x274>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e044      	b.n	800183e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b4:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <HAL_RCC_ClockConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2201      	movs	r2, #1
 80017ba:	4013      	ands	r3, r2
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d1ee      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2204      	movs	r2, #4
 80017c8:	4013      	ands	r3, r2
 80017ca:	d009      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017cc:	4b20      	ldr	r3, [pc, #128]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4a20      	ldr	r2, [pc, #128]	@ (8001854 <HAL_RCC_ClockConfig+0x27c>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 80017dc:	430a      	orrs	r2, r1
 80017de:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2208      	movs	r2, #8
 80017e6:	4013      	ands	r3, r2
 80017e8:	d00a      	beq.n	8001800 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ea:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001858 <HAL_RCC_ClockConfig+0x280>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	0019      	movs	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	00da      	lsls	r2, r3, #3
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001800:	f000 f832 	bl	8001868 <HAL_RCC_GetSysClockFreq>
 8001804:	0001      	movs	r1, r0
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_RCC_ClockConfig+0x278>)
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	220f      	movs	r2, #15
 800180e:	4013      	ands	r3, r2
 8001810:	4a12      	ldr	r2, [pc, #72]	@ (800185c <HAL_RCC_ClockConfig+0x284>)
 8001812:	5cd3      	ldrb	r3, [r2, r3]
 8001814:	000a      	movs	r2, r1
 8001816:	40da      	lsrs	r2, r3
 8001818:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <HAL_RCC_ClockConfig+0x288>)
 800181a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800181c:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <HAL_RCC_ClockConfig+0x28c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	250b      	movs	r5, #11
 8001822:	197c      	adds	r4, r7, r5
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff f86f 	bl	8000908 <HAL_InitTick>
 800182a:	0003      	movs	r3, r0
 800182c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800182e:	197b      	adds	r3, r7, r5
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001836:	197b      	adds	r3, r7, r5
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	e000      	b.n	800183e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	b004      	add	sp, #16
 8001844:	bdb0      	pop	{r4, r5, r7, pc}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	40022000 	.word	0x40022000
 800184c:	00001388 	.word	0x00001388
 8001850:	40021000 	.word	0x40021000
 8001854:	fffff8ff 	.word	0xfffff8ff
 8001858:	ffffc7ff 	.word	0xffffc7ff
 800185c:	0800277c 	.word	0x0800277c
 8001860:	20000000 	.word	0x20000000
 8001864:	20000004 	.word	0x20000004

08001868 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b08e      	sub	sp, #56	@ 0x38
 800186c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800186e:	4b4c      	ldr	r3, [pc, #304]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001876:	230c      	movs	r3, #12
 8001878:	4013      	ands	r3, r2
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d014      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x40>
 800187e:	d900      	bls.n	8001882 <HAL_RCC_GetSysClockFreq+0x1a>
 8001880:	e07b      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x112>
 8001882:	2b04      	cmp	r3, #4
 8001884:	d002      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x24>
 8001886:	2b08      	cmp	r3, #8
 8001888:	d00b      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800188a:	e076      	b.n	800197a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800188c:	4b44      	ldr	r3, [pc, #272]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2210      	movs	r2, #16
 8001892:	4013      	ands	r3, r2
 8001894:	d002      	beq.n	800189c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001896:	4b43      	ldr	r3, [pc, #268]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001898:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800189a:	e07c      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800189c:	4b42      	ldr	r3, [pc, #264]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800189e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80018a0:	e079      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018a2:	4b42      	ldr	r3, [pc, #264]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x144>)
 80018a4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80018a6:	e076      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018aa:	0c9a      	lsrs	r2, r3, #18
 80018ac:	230f      	movs	r3, #15
 80018ae:	401a      	ands	r2, r3
 80018b0:	4b3f      	ldr	r3, [pc, #252]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x148>)
 80018b2:	5c9b      	ldrb	r3, [r3, r2]
 80018b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b8:	0d9a      	lsrs	r2, r3, #22
 80018ba:	2303      	movs	r3, #3
 80018bc:	4013      	ands	r3, r2
 80018be:	3301      	adds	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018c2:	4b37      	ldr	r3, [pc, #220]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0x138>)
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	2380      	movs	r3, #128	@ 0x80
 80018c8:	025b      	lsls	r3, r3, #9
 80018ca:	4013      	ands	r3, r2
 80018cc:	d01a      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80018ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	4a35      	ldr	r2, [pc, #212]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x144>)
 80018d8:	2300      	movs	r3, #0
 80018da:	69b8      	ldr	r0, [r7, #24]
 80018dc:	69f9      	ldr	r1, [r7, #28]
 80018de:	f7fe fcbf 	bl	8000260 <__aeabi_lmul>
 80018e2:	0002      	movs	r2, r0
 80018e4:	000b      	movs	r3, r1
 80018e6:	0010      	movs	r0, r2
 80018e8:	0019      	movs	r1, r3
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f7fe fc93 	bl	8000220 <__aeabi_uldivmod>
 80018fa:	0002      	movs	r2, r0
 80018fc:	000b      	movs	r3, r1
 80018fe:	0013      	movs	r3, r2
 8001900:	637b      	str	r3, [r7, #52]	@ 0x34
 8001902:	e037      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001904:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2210      	movs	r2, #16
 800190a:	4013      	ands	r3, r2
 800190c:	d01a      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800190e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4a23      	ldr	r2, [pc, #140]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001918:	2300      	movs	r3, #0
 800191a:	68b8      	ldr	r0, [r7, #8]
 800191c:	68f9      	ldr	r1, [r7, #12]
 800191e:	f7fe fc9f 	bl	8000260 <__aeabi_lmul>
 8001922:	0002      	movs	r2, r0
 8001924:	000b      	movs	r3, r1
 8001926:	0010      	movs	r0, r2
 8001928:	0019      	movs	r1, r3
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f7fe fc73 	bl	8000220 <__aeabi_uldivmod>
 800193a:	0002      	movs	r2, r0
 800193c:	000b      	movs	r3, r1
 800193e:	0013      	movs	r3, r2
 8001940:	637b      	str	r3, [r7, #52]	@ 0x34
 8001942:	e017      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001946:	0018      	movs	r0, r3
 8001948:	2300      	movs	r3, #0
 800194a:	0019      	movs	r1, r3
 800194c:	4a16      	ldr	r2, [pc, #88]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800194e:	2300      	movs	r3, #0
 8001950:	f7fe fc86 	bl	8000260 <__aeabi_lmul>
 8001954:	0002      	movs	r2, r0
 8001956:	000b      	movs	r3, r1
 8001958:	0010      	movs	r0, r2
 800195a:	0019      	movs	r1, r3
 800195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195e:	001c      	movs	r4, r3
 8001960:	2300      	movs	r3, #0
 8001962:	001d      	movs	r5, r3
 8001964:	0022      	movs	r2, r4
 8001966:	002b      	movs	r3, r5
 8001968:	f7fe fc5a 	bl	8000220 <__aeabi_uldivmod>
 800196c:	0002      	movs	r2, r0
 800196e:	000b      	movs	r3, r1
 8001970:	0013      	movs	r3, r2
 8001972:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001976:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001978:	e00d      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	0b5b      	lsrs	r3, r3, #13
 8001980:	2207      	movs	r2, #7
 8001982:	4013      	ands	r3, r2
 8001984:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	3301      	adds	r3, #1
 800198a:	2280      	movs	r2, #128	@ 0x80
 800198c:	0212      	lsls	r2, r2, #8
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001994:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b00e      	add	sp, #56	@ 0x38
 800199e:	bdb0      	pop	{r4, r5, r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	003d0900 	.word	0x003d0900
 80019a8:	00f42400 	.word	0x00f42400
 80019ac:	007a1200 	.word	0x007a1200
 80019b0:	08002794 	.word	0x08002794

080019b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b8:	4b02      	ldr	r3, [pc, #8]	@ (80019c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			@ (mov r8, r8)
 80019c4:	20000000 	.word	0x20000000

080019c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019cc:	f7ff fff2 	bl	80019b4 <HAL_RCC_GetHCLKFreq>
 80019d0:	0001      	movs	r1, r0
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	2207      	movs	r2, #7
 80019da:	4013      	ands	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019de:	5cd3      	ldrb	r3, [r2, r3]
 80019e0:	40d9      	lsrs	r1, r3
 80019e2:	000b      	movs	r3, r1
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	40021000 	.word	0x40021000
 80019f0:	0800278c 	.word	0x0800278c

080019f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d101      	bne.n	8001a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e032      	b.n	8001a6c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2239      	movs	r2, #57	@ 0x39
 8001a0a:	5c9b      	ldrb	r3, [r3, r2]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d107      	bne.n	8001a22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2238      	movs	r2, #56	@ 0x38
 8001a16:	2100      	movs	r1, #0
 8001a18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7fe feb3 	bl	8000788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2239      	movs	r2, #57	@ 0x39
 8001a26:	2102      	movs	r1, #2
 8001a28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3304      	adds	r3, #4
 8001a32:	0019      	movs	r1, r3
 8001a34:	0010      	movs	r0, r2
 8001a36:	f000 fbe1 	bl	80021fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	223e      	movs	r2, #62	@ 0x3e
 8001a3e:	2101      	movs	r1, #1
 8001a40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	223a      	movs	r2, #58	@ 0x3a
 8001a46:	2101      	movs	r1, #1
 8001a48:	5499      	strb	r1, [r3, r2]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	223b      	movs	r2, #59	@ 0x3b
 8001a4e:	2101      	movs	r1, #1
 8001a50:	5499      	strb	r1, [r3, r2]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	223c      	movs	r2, #60	@ 0x3c
 8001a56:	2101      	movs	r1, #1
 8001a58:	5499      	strb	r1, [r3, r2]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	223d      	movs	r2, #61	@ 0x3d
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2239      	movs	r2, #57	@ 0x39
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b002      	add	sp, #8
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e032      	b.n	8001aec <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2239      	movs	r2, #57	@ 0x39
 8001a8a:	5c9b      	ldrb	r3, [r3, r2]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d107      	bne.n	8001aa2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2238      	movs	r2, #56	@ 0x38
 8001a96:	2100      	movs	r1, #0
 8001a98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f000 f829 	bl	8001af4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2239      	movs	r2, #57	@ 0x39
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	0010      	movs	r0, r2
 8001ab6:	f000 fba1 	bl	80021fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	223e      	movs	r2, #62	@ 0x3e
 8001abe:	2101      	movs	r1, #1
 8001ac0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	223a      	movs	r2, #58	@ 0x3a
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	5499      	strb	r1, [r3, r2]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	223b      	movs	r2, #59	@ 0x3b
 8001ace:	2101      	movs	r1, #1
 8001ad0:	5499      	strb	r1, [r3, r2]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	223c      	movs	r2, #60	@ 0x3c
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	5499      	strb	r1, [r3, r2]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	223d      	movs	r2, #61	@ 0x3d
 8001ade:	2101      	movs	r1, #1
 8001ae0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2239      	movs	r2, #57	@ 0x39
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001afc:	46c0      	nop			@ (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b0e:	230f      	movs	r3, #15
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d104      	bne.n	8001b26 <HAL_TIM_IC_Start_IT+0x22>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	223a      	movs	r2, #58	@ 0x3a
 8001b20:	5c9b      	ldrb	r3, [r3, r2]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	e013      	b.n	8001b4e <HAL_TIM_IC_Start_IT+0x4a>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d104      	bne.n	8001b36 <HAL_TIM_IC_Start_IT+0x32>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	223b      	movs	r2, #59	@ 0x3b
 8001b30:	5c9b      	ldrb	r3, [r3, r2]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	e00b      	b.n	8001b4e <HAL_TIM_IC_Start_IT+0x4a>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d104      	bne.n	8001b46 <HAL_TIM_IC_Start_IT+0x42>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	223c      	movs	r2, #60	@ 0x3c
 8001b40:	5c9b      	ldrb	r3, [r3, r2]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	e003      	b.n	8001b4e <HAL_TIM_IC_Start_IT+0x4a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	223d      	movs	r2, #61	@ 0x3d
 8001b4a:	5c9b      	ldrb	r3, [r3, r2]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	210e      	movs	r1, #14
 8001b50:	187a      	adds	r2, r7, r1
 8001b52:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d001      	beq.n	8001b60 <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e090      	b.n	8001c82 <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d104      	bne.n	8001b70 <HAL_TIM_IC_Start_IT+0x6c>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	223a      	movs	r2, #58	@ 0x3a
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	5499      	strb	r1, [r3, r2]
 8001b6e:	e013      	b.n	8001b98 <HAL_TIM_IC_Start_IT+0x94>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d104      	bne.n	8001b80 <HAL_TIM_IC_Start_IT+0x7c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	223b      	movs	r2, #59	@ 0x3b
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	5499      	strb	r1, [r3, r2]
 8001b7e:	e00b      	b.n	8001b98 <HAL_TIM_IC_Start_IT+0x94>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d104      	bne.n	8001b90 <HAL_TIM_IC_Start_IT+0x8c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	223c      	movs	r2, #60	@ 0x3c
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	5499      	strb	r1, [r3, r2]
 8001b8e:	e003      	b.n	8001b98 <HAL_TIM_IC_Start_IT+0x94>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	223d      	movs	r2, #61	@ 0x3d
 8001b94:	2102      	movs	r1, #2
 8001b96:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2b0c      	cmp	r3, #12
 8001b9c:	d02a      	beq.n	8001bf4 <HAL_TIM_IC_Start_IT+0xf0>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d830      	bhi.n	8001c06 <HAL_TIM_IC_Start_IT+0x102>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d01b      	beq.n	8001be2 <HAL_TIM_IC_Start_IT+0xde>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d82a      	bhi.n	8001c06 <HAL_TIM_IC_Start_IT+0x102>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_TIM_IC_Start_IT+0xba>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d009      	beq.n	8001bd0 <HAL_TIM_IC_Start_IT+0xcc>
 8001bbc:	e023      	b.n	8001c06 <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2102      	movs	r1, #2
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	60da      	str	r2, [r3, #12]
      break;
 8001bce:	e01f      	b.n	8001c10 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2104      	movs	r1, #4
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	60da      	str	r2, [r3, #12]
      break;
 8001be0:	e016      	b.n	8001c10 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2108      	movs	r1, #8
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	60da      	str	r2, [r3, #12]
      break;
 8001bf2:	e00d      	b.n	8001c10 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2110      	movs	r1, #16
 8001c00:	430a      	orrs	r2, r1
 8001c02:	60da      	str	r2, [r3, #12]
      break;
 8001c04:	e004      	b.n	8001c10 <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 8001c06:	230f      	movs	r3, #15
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
      break;
 8001c0e:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8001c10:	230f      	movs	r3, #15
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d130      	bne.n	8001c7c <HAL_TIM_IC_Start_IT+0x178>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6839      	ldr	r1, [r7, #0]
 8001c20:	2201      	movs	r2, #1
 8001c22:	0018      	movs	r0, r3
 8001c24:	f000 fcf6 	bl	8002614 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	05db      	lsls	r3, r3, #23
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d009      	beq.n	8001c48 <HAL_TIM_IC_Start_IT+0x144>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a14      	ldr	r2, [pc, #80]	@ (8001c8c <HAL_TIM_IC_Start_IT+0x188>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d004      	beq.n	8001c48 <HAL_TIM_IC_Start_IT+0x144>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a13      	ldr	r2, [pc, #76]	@ (8001c90 <HAL_TIM_IC_Start_IT+0x18c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d111      	bne.n	8001c6c <HAL_TIM_IC_Start_IT+0x168>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2207      	movs	r2, #7
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d010      	beq.n	8001c7c <HAL_TIM_IC_Start_IT+0x178>
      {
        __HAL_TIM_ENABLE(htim);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2101      	movs	r1, #1
 8001c66:	430a      	orrs	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c6a:	e007      	b.n	8001c7c <HAL_TIM_IC_Start_IT+0x178>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2101      	movs	r1, #1
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	781b      	ldrb	r3, [r3, #0]
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b004      	add	sp, #16
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	40010800 	.word	0x40010800
 8001c90:	40011400 	.word	0x40011400

08001c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d124      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d11d      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	4252      	negs	r2, r2
 8001cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2203      	movs	r2, #3
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d004      	beq.n	8001cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f7fe fcdc 	bl	8000694 <HAL_TIM_IC_CaptureCallback>
 8001cdc:	e007      	b.n	8001cee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 fa73 	bl	80021cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f000 fa77 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d125      	bne.n	8001d4e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2204      	movs	r2, #4
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d11e      	bne.n	8001d4e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2205      	movs	r2, #5
 8001d16:	4252      	negs	r2, r2
 8001d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699a      	ldr	r2, [r3, #24]
 8001d26:	23c0      	movs	r3, #192	@ 0xc0
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d004      	beq.n	8001d38 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7fe fcaf 	bl	8000694 <HAL_TIM_IC_CaptureCallback>
 8001d36:	e007      	b.n	8001d48 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f000 fa46 	bl	80021cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 fa4a 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2208      	movs	r2, #8
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d124      	bne.n	8001da6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2208      	movs	r2, #8
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d11d      	bne.n	8001da6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2209      	movs	r2, #9
 8001d70:	4252      	negs	r2, r2
 8001d72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2203      	movs	r2, #3
 8001d82:	4013      	ands	r3, r2
 8001d84:	d004      	beq.n	8001d90 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7fe fc83 	bl	8000694 <HAL_TIM_IC_CaptureCallback>
 8001d8e:	e007      	b.n	8001da0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	0018      	movs	r0, r3
 8001d94:	f000 fa1a 	bl	80021cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 fa1e 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2210      	movs	r2, #16
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b10      	cmp	r3, #16
 8001db2:	d125      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2210      	movs	r2, #16
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b10      	cmp	r3, #16
 8001dc0:	d11e      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2211      	movs	r2, #17
 8001dc8:	4252      	negs	r2, r2
 8001dca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2208      	movs	r2, #8
 8001dd0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69da      	ldr	r2, [r3, #28]
 8001dd8:	23c0      	movs	r3, #192	@ 0xc0
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d004      	beq.n	8001dea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f7fe fc56 	bl	8000694 <HAL_TIM_IC_CaptureCallback>
 8001de8:	e007      	b.n	8001dfa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 f9ed 	bl	80021cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f000 f9f1 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2201      	movs	r2, #1
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10f      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2201      	movs	r2, #1
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d108      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2202      	movs	r2, #2
 8001e22:	4252      	negs	r2, r2
 8001e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 f9c7 	bl	80021bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	2240      	movs	r2, #64	@ 0x40
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b40      	cmp	r3, #64	@ 0x40
 8001e3a:	d10f      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2240      	movs	r2, #64	@ 0x40
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b40      	cmp	r3, #64	@ 0x40
 8001e48:	d108      	bne.n	8001e5c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2241      	movs	r2, #65	@ 0x41
 8001e50:	4252      	negs	r2, r2
 8001e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	0018      	movs	r0, r3
 8001e58:	f000 f9c8 	bl	80021ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e5c:	46c0      	nop			@ (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b002      	add	sp, #8
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e70:	2317      	movs	r3, #23
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2238      	movs	r2, #56	@ 0x38
 8001e7c:	5c9b      	ldrb	r3, [r3, r2]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_TIM_IC_ConfigChannel+0x22>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e08c      	b.n	8001fa0 <HAL_TIM_IC_ConfigChannel+0x13c>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2238      	movs	r2, #56	@ 0x38
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d11b      	bne.n	8001ecc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8001ea4:	f000 f9fe 	bl	80022a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699a      	ldr	r2, [r3, #24]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	210c      	movs	r1, #12
 8001eb4:	438a      	bics	r2, r1
 8001eb6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6999      	ldr	r1, [r3, #24]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	619a      	str	r2, [r3, #24]
 8001eca:	e062      	b.n	8001f92 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d11c      	bne.n	8001f0c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8001ee2:	f000 fa63 	bl	80023ac <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	492d      	ldr	r1, [pc, #180]	@ (8001fa8 <HAL_TIM_IC_ConfigChannel+0x144>)
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6999      	ldr	r1, [r3, #24]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	021a      	lsls	r2, r3, #8
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	619a      	str	r2, [r3, #24]
 8001f0a:	e042      	b.n	8001f92 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d11b      	bne.n	8001f4a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8001f22:	f000 fab7 	bl	8002494 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	210c      	movs	r1, #12
 8001f32:	438a      	bics	r2, r1
 8001f34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69d9      	ldr	r1, [r3, #28]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	61da      	str	r2, [r3, #28]
 8001f48:	e023      	b.n	8001f92 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b0c      	cmp	r3, #12
 8001f4e:	d11c      	bne.n	8001f8a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8001f60:	f000 fad8 	bl	8002514 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69da      	ldr	r2, [r3, #28]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	490e      	ldr	r1, [pc, #56]	@ (8001fa8 <HAL_TIM_IC_ConfigChannel+0x144>)
 8001f70:	400a      	ands	r2, r1
 8001f72:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	69d9      	ldr	r1, [r3, #28]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	021a      	lsls	r2, r3, #8
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	61da      	str	r2, [r3, #28]
 8001f88:	e003      	b.n	8001f92 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8001f8a:	2317      	movs	r3, #23
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2238      	movs	r2, #56	@ 0x38
 8001f96:	2100      	movs	r1, #0
 8001f98:	5499      	strb	r1, [r3, r2]

  return status;
 8001f9a:	2317      	movs	r3, #23
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	781b      	ldrb	r3, [r3, #0]
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b006      	add	sp, #24
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	fffff3ff 	.word	0xfffff3ff

08001fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb6:	230f      	movs	r3, #15
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2238      	movs	r2, #56	@ 0x38
 8001fc2:	5c9b      	ldrb	r3, [r3, r2]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_TIM_ConfigClockSource+0x20>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0bc      	b.n	8002146 <HAL_TIM_ConfigClockSource+0x19a>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2238      	movs	r2, #56	@ 0x38
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2239      	movs	r2, #57	@ 0x39
 8001fd8:	2102      	movs	r1, #2
 8001fda:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2277      	movs	r2, #119	@ 0x77
 8001fe8:	4393      	bics	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4a58      	ldr	r2, [pc, #352]	@ (8002150 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2280      	movs	r2, #128	@ 0x80
 8002002:	0192      	lsls	r2, r2, #6
 8002004:	4293      	cmp	r3, r2
 8002006:	d040      	beq.n	800208a <HAL_TIM_ConfigClockSource+0xde>
 8002008:	2280      	movs	r2, #128	@ 0x80
 800200a:	0192      	lsls	r2, r2, #6
 800200c:	4293      	cmp	r3, r2
 800200e:	d900      	bls.n	8002012 <HAL_TIM_ConfigClockSource+0x66>
 8002010:	e088      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x178>
 8002012:	2280      	movs	r2, #128	@ 0x80
 8002014:	0152      	lsls	r2, r2, #5
 8002016:	4293      	cmp	r3, r2
 8002018:	d100      	bne.n	800201c <HAL_TIM_ConfigClockSource+0x70>
 800201a:	e088      	b.n	800212e <HAL_TIM_ConfigClockSource+0x182>
 800201c:	2280      	movs	r2, #128	@ 0x80
 800201e:	0152      	lsls	r2, r2, #5
 8002020:	4293      	cmp	r3, r2
 8002022:	d900      	bls.n	8002026 <HAL_TIM_ConfigClockSource+0x7a>
 8002024:	e07e      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x178>
 8002026:	2b70      	cmp	r3, #112	@ 0x70
 8002028:	d018      	beq.n	800205c <HAL_TIM_ConfigClockSource+0xb0>
 800202a:	d900      	bls.n	800202e <HAL_TIM_ConfigClockSource+0x82>
 800202c:	e07a      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x178>
 800202e:	2b60      	cmp	r3, #96	@ 0x60
 8002030:	d04f      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0x126>
 8002032:	d900      	bls.n	8002036 <HAL_TIM_ConfigClockSource+0x8a>
 8002034:	e076      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x178>
 8002036:	2b50      	cmp	r3, #80	@ 0x50
 8002038:	d03b      	beq.n	80020b2 <HAL_TIM_ConfigClockSource+0x106>
 800203a:	d900      	bls.n	800203e <HAL_TIM_ConfigClockSource+0x92>
 800203c:	e072      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x178>
 800203e:	2b40      	cmp	r3, #64	@ 0x40
 8002040:	d057      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x146>
 8002042:	d900      	bls.n	8002046 <HAL_TIM_ConfigClockSource+0x9a>
 8002044:	e06e      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x178>
 8002046:	2b30      	cmp	r3, #48	@ 0x30
 8002048:	d063      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x166>
 800204a:	d86b      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x178>
 800204c:	2b20      	cmp	r3, #32
 800204e:	d060      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x166>
 8002050:	d868      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x178>
 8002052:	2b00      	cmp	r3, #0
 8002054:	d05d      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x166>
 8002056:	2b10      	cmp	r3, #16
 8002058:	d05b      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x166>
 800205a:	e063      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800206c:	f000 fab2 	bl	80025d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2277      	movs	r2, #119	@ 0x77
 800207c:	4313      	orrs	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	609a      	str	r2, [r3, #8]
      break;
 8002088:	e052      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800209a:	f000 fa9b 	bl	80025d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2180      	movs	r1, #128	@ 0x80
 80020aa:	01c9      	lsls	r1, r1, #7
 80020ac:	430a      	orrs	r2, r1
 80020ae:	609a      	str	r2, [r3, #8]
      break;
 80020b0:	e03e      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020be:	001a      	movs	r2, r3
 80020c0:	f000 f946 	bl	8002350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2150      	movs	r1, #80	@ 0x50
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 fa68 	bl	80025a0 <TIM_ITRx_SetConfig>
      break;
 80020d0:	e02e      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020de:	001a      	movs	r2, r3
 80020e0:	f000 f9a6 	bl	8002430 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2160      	movs	r1, #96	@ 0x60
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 fa58 	bl	80025a0 <TIM_ITRx_SetConfig>
      break;
 80020f0:	e01e      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020fe:	001a      	movs	r2, r3
 8002100:	f000 f926 	bl	8002350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2140      	movs	r1, #64	@ 0x40
 800210a:	0018      	movs	r0, r3
 800210c:	f000 fa48 	bl	80025a0 <TIM_ITRx_SetConfig>
      break;
 8002110:	e00e      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	0019      	movs	r1, r3
 800211c:	0010      	movs	r0, r2
 800211e:	f000 fa3f 	bl	80025a0 <TIM_ITRx_SetConfig>
      break;
 8002122:	e005      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002124:	230f      	movs	r3, #15
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
      break;
 800212c:	e000      	b.n	8002130 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800212e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2239      	movs	r2, #57	@ 0x39
 8002134:	2101      	movs	r1, #1
 8002136:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2238      	movs	r2, #56	@ 0x38
 800213c:	2100      	movs	r1, #0
 800213e:	5499      	strb	r1, [r3, r2]

  return status;
 8002140:	230f      	movs	r3, #15
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	781b      	ldrb	r3, [r3, #0]
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b004      	add	sp, #16
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	ffff00ff 	.word	0xffff00ff

08002154 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b0c      	cmp	r3, #12
 8002166:	d01e      	beq.n	80021a6 <HAL_TIM_ReadCapturedValue+0x52>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b0c      	cmp	r3, #12
 800216c:	d820      	bhi.n	80021b0 <HAL_TIM_ReadCapturedValue+0x5c>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d013      	beq.n	800219c <HAL_TIM_ReadCapturedValue+0x48>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2b08      	cmp	r3, #8
 8002178:	d81a      	bhi.n	80021b0 <HAL_TIM_ReadCapturedValue+0x5c>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_TIM_ReadCapturedValue+0x34>
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2b04      	cmp	r3, #4
 8002184:	d005      	beq.n	8002192 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8002186:	e013      	b.n	80021b0 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218e:	60fb      	str	r3, [r7, #12]
      break;
 8002190:	e00f      	b.n	80021b2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002198:	60fb      	str	r3, [r7, #12]
      break;
 800219a:	e00a      	b.n	80021b2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a2:	60fb      	str	r3, [r7, #12]
      break;
 80021a4:	e005      	b.n	80021b2 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	60fb      	str	r3, [r7, #12]
      break;
 80021ae:	e000      	b.n	80021b2 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80021b0:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b004      	add	sp, #16
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021c4:	46c0      	nop			@ (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b002      	add	sp, #8
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021d4:	46c0      	nop			@ (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b002      	add	sp, #8
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021e4:	46c0      	nop			@ (mov r8, r8)
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b002      	add	sp, #8
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021f4:	46c0      	nop			@ (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b002      	add	sp, #8
 80021fa:	bd80      	pop	{r7, pc}

080021fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	05db      	lsls	r3, r3, #23
 8002212:	429a      	cmp	r2, r3
 8002214:	d007      	beq.n	8002226 <TIM_Base_SetConfig+0x2a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a1f      	ldr	r2, [pc, #124]	@ (8002298 <TIM_Base_SetConfig+0x9c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d003      	beq.n	8002226 <TIM_Base_SetConfig+0x2a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a1e      	ldr	r2, [pc, #120]	@ (800229c <TIM_Base_SetConfig+0xa0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d108      	bne.n	8002238 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2270      	movs	r2, #112	@ 0x70
 800222a:	4393      	bics	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	2380      	movs	r3, #128	@ 0x80
 800223c:	05db      	lsls	r3, r3, #23
 800223e:	429a      	cmp	r2, r3
 8002240:	d007      	beq.n	8002252 <TIM_Base_SetConfig+0x56>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a14      	ldr	r2, [pc, #80]	@ (8002298 <TIM_Base_SetConfig+0x9c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d003      	beq.n	8002252 <TIM_Base_SetConfig+0x56>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a13      	ldr	r2, [pc, #76]	@ (800229c <TIM_Base_SetConfig+0xa0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d108      	bne.n	8002264 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <TIM_Base_SetConfig+0xa4>)
 8002256:	4013      	ands	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2280      	movs	r2, #128	@ 0x80
 8002268:	4393      	bics	r3, r2
 800226a:	001a      	movs	r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	615a      	str	r2, [r3, #20]
}
 8002290:	46c0      	nop			@ (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	b004      	add	sp, #16
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40010800 	.word	0x40010800
 800229c:	40011400 	.word	0x40011400
 80022a0:	fffffcff 	.word	0xfffffcff

080022a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	2201      	movs	r2, #1
 80022b8:	4393      	bics	r3, r2
 80022ba:	001a      	movs	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	2380      	movs	r3, #128	@ 0x80
 80022d0:	05db      	lsls	r3, r3, #23
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d007      	beq.n	80022e6 <TIM_TI1_SetConfig+0x42>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002348 <TIM_TI1_SetConfig+0xa4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d003      	beq.n	80022e6 <TIM_TI1_SetConfig+0x42>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4a1a      	ldr	r2, [pc, #104]	@ (800234c <TIM_TI1_SetConfig+0xa8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d101      	bne.n	80022ea <TIM_TI1_SetConfig+0x46>
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <TIM_TI1_SetConfig+0x48>
 80022ea:	2300      	movs	r3, #0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2203      	movs	r2, #3
 80022f4:	4393      	bics	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e003      	b.n	800230a <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2201      	movs	r2, #1
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	22f0      	movs	r2, #240	@ 0xf0
 800230e:	4393      	bics	r3, r2
 8002310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	22ff      	movs	r2, #255	@ 0xff
 8002318:	4013      	ands	r3, r2
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	220a      	movs	r2, #10
 8002324:	4393      	bics	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	220a      	movs	r2, #10
 800232c:	4013      	ands	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	621a      	str	r2, [r3, #32]
}
 8002340:	46c0      	nop			@ (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b006      	add	sp, #24
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40010800 	.word	0x40010800
 800234c:	40011400 	.word	0x40011400

08002350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	2201      	movs	r2, #1
 8002368:	4393      	bics	r3, r2
 800236a:	001a      	movs	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	22f0      	movs	r2, #240	@ 0xf0
 800237a:	4393      	bics	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	220a      	movs	r2, #10
 800238c:	4393      	bics	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	621a      	str	r2, [r3, #32]
}
 80023a4:	46c0      	nop			@ (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b006      	add	sp, #24
 80023aa:	bd80      	pop	{r7, pc}

080023ac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	2210      	movs	r2, #16
 80023c0:	4393      	bics	r3, r2
 80023c2:	001a      	movs	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	4a14      	ldr	r2, [pc, #80]	@ (8002428 <TIM_TI2_SetConfig+0x7c>)
 80023d8:	4013      	ands	r3, r2
 80023da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	021b      	lsls	r3, r3, #8
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	4a10      	ldr	r2, [pc, #64]	@ (800242c <TIM_TI2_SetConfig+0x80>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	031b      	lsls	r3, r3, #12
 80023f2:	041b      	lsls	r3, r3, #16
 80023f4:	0c1b      	lsrs	r3, r3, #16
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	22a0      	movs	r2, #160	@ 0xa0
 8002400:	4393      	bics	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	22a0      	movs	r2, #160	@ 0xa0
 800240a:	4013      	ands	r3, r2
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	621a      	str	r2, [r3, #32]
}
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	46bd      	mov	sp, r7
 8002422:	b006      	add	sp, #24
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	fffffcff 	.word	0xfffffcff
 800242c:	ffff0fff 	.word	0xffff0fff

08002430 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	2210      	movs	r2, #16
 8002442:	4393      	bics	r3, r2
 8002444:	001a      	movs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	4a0d      	ldr	r2, [pc, #52]	@ (8002490 <TIM_TI2_ConfigInputStage+0x60>)
 800245a:	4013      	ands	r3, r2
 800245c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	031b      	lsls	r3, r3, #12
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	22a0      	movs	r2, #160	@ 0xa0
 800246c:	4393      	bics	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	621a      	str	r2, [r3, #32]
}
 8002486:	46c0      	nop			@ (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	b006      	add	sp, #24
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	ffff0fff 	.word	0xffff0fff

08002494 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a19      	ldr	r2, [pc, #100]	@ (800250c <TIM_TI3_SetConfig+0x78>)
 80024a8:	401a      	ands	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2203      	movs	r2, #3
 80024be:	4393      	bics	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	22f0      	movs	r2, #240	@ 0xf0
 80024ce:	4393      	bics	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	22ff      	movs	r2, #255	@ 0xff
 80024d8:	4013      	ands	r3, r2
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002510 <TIM_TI3_SetConfig+0x7c>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	021a      	lsls	r2, r3, #8
 80024ec:	23a0      	movs	r3, #160	@ 0xa0
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	4013      	ands	r3, r2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	621a      	str	r2, [r3, #32]
}
 8002504:	46c0      	nop			@ (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b006      	add	sp, #24
 800250a:	bd80      	pop	{r7, pc}
 800250c:	fffffeff 	.word	0xfffffeff
 8002510:	fffff5ff 	.word	0xfffff5ff

08002514 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a1a      	ldr	r2, [pc, #104]	@ (8002590 <TIM_TI4_SetConfig+0x7c>)
 8002528:	401a      	ands	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	4a15      	ldr	r2, [pc, #84]	@ (8002594 <TIM_TI4_SetConfig+0x80>)
 800253e:	4013      	ands	r3, r2
 8002540:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	021b      	lsls	r3, r3, #8
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	4a12      	ldr	r2, [pc, #72]	@ (8002598 <TIM_TI4_SetConfig+0x84>)
 8002550:	4013      	ands	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	031b      	lsls	r3, r3, #12
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	0c1b      	lsrs	r3, r3, #16
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <TIM_TI4_SetConfig+0x88>)
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	031a      	lsls	r2, r3, #12
 800256e:	23a0      	movs	r3, #160	@ 0xa0
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	4013      	ands	r3, r2
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	621a      	str	r2, [r3, #32]
}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	b006      	add	sp, #24
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	ffffefff 	.word	0xffffefff
 8002594:	fffffcff 	.word	0xfffffcff
 8002598:	ffff0fff 	.word	0xffff0fff
 800259c:	ffff5fff 	.word	0xffff5fff

080025a0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2270      	movs	r2, #112	@ 0x70
 80025b4:	4393      	bics	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	2207      	movs	r2, #7
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	609a      	str	r2, [r3, #8]
}
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b004      	add	sp, #16
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	4a09      	ldr	r2, [pc, #36]	@ (8002610 <TIM_ETR_SetConfig+0x3c>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	021a      	lsls	r2, r3, #8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	609a      	str	r2, [r3, #8]
}
 8002608:	46c0      	nop			@ (mov r8, r8)
 800260a:	46bd      	mov	sp, r7
 800260c:	b006      	add	sp, #24
 800260e:	bd80      	pop	{r7, pc}
 8002610:	ffff00ff 	.word	0xffff00ff

08002614 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	221f      	movs	r2, #31
 8002624:	4013      	ands	r3, r2
 8002626:	2201      	movs	r2, #1
 8002628:	409a      	lsls	r2, r3
 800262a:	0013      	movs	r3, r2
 800262c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	43d2      	mvns	r2, r2
 8002636:	401a      	ands	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a1a      	ldr	r2, [r3, #32]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	211f      	movs	r1, #31
 8002644:	400b      	ands	r3, r1
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4099      	lsls	r1, r3
 800264a:	000b      	movs	r3, r1
 800264c:	431a      	orrs	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	621a      	str	r2, [r3, #32]
}
 8002652:	46c0      	nop			@ (mov r8, r8)
 8002654:	46bd      	mov	sp, r7
 8002656:	b006      	add	sp, #24
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2238      	movs	r2, #56	@ 0x38
 800266a:	5c9b      	ldrb	r3, [r3, r2]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002670:	2302      	movs	r3, #2
 8002672:	e042      	b.n	80026fa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2238      	movs	r2, #56	@ 0x38
 8002678:	2101      	movs	r1, #1
 800267a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2239      	movs	r2, #57	@ 0x39
 8002680:	2102      	movs	r1, #2
 8002682:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2270      	movs	r2, #112	@ 0x70
 8002698:	4393      	bics	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	2380      	movs	r3, #128	@ 0x80
 80026b4:	05db      	lsls	r3, r3, #23
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d009      	beq.n	80026ce <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a11      	ldr	r2, [pc, #68]	@ (8002704 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d004      	beq.n	80026ce <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002708 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d10c      	bne.n	80026e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2280      	movs	r2, #128	@ 0x80
 80026d2:	4393      	bics	r3, r2
 80026d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2239      	movs	r2, #57	@ 0x39
 80026ec:	2101      	movs	r1, #1
 80026ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2238      	movs	r2, #56	@ 0x38
 80026f4:	2100      	movs	r1, #0
 80026f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b004      	add	sp, #16
 8002700:	bd80      	pop	{r7, pc}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	40010800 	.word	0x40010800
 8002708:	40011400 	.word	0x40011400

0800270c <memset>:
 800270c:	0003      	movs	r3, r0
 800270e:	1882      	adds	r2, r0, r2
 8002710:	4293      	cmp	r3, r2
 8002712:	d100      	bne.n	8002716 <memset+0xa>
 8002714:	4770      	bx	lr
 8002716:	7019      	strb	r1, [r3, #0]
 8002718:	3301      	adds	r3, #1
 800271a:	e7f9      	b.n	8002710 <memset+0x4>

0800271c <__libc_init_array>:
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	2600      	movs	r6, #0
 8002720:	4c0c      	ldr	r4, [pc, #48]	@ (8002754 <__libc_init_array+0x38>)
 8002722:	4d0d      	ldr	r5, [pc, #52]	@ (8002758 <__libc_init_array+0x3c>)
 8002724:	1b64      	subs	r4, r4, r5
 8002726:	10a4      	asrs	r4, r4, #2
 8002728:	42a6      	cmp	r6, r4
 800272a:	d109      	bne.n	8002740 <__libc_init_array+0x24>
 800272c:	2600      	movs	r6, #0
 800272e:	f000 f819 	bl	8002764 <_init>
 8002732:	4c0a      	ldr	r4, [pc, #40]	@ (800275c <__libc_init_array+0x40>)
 8002734:	4d0a      	ldr	r5, [pc, #40]	@ (8002760 <__libc_init_array+0x44>)
 8002736:	1b64      	subs	r4, r4, r5
 8002738:	10a4      	asrs	r4, r4, #2
 800273a:	42a6      	cmp	r6, r4
 800273c:	d105      	bne.n	800274a <__libc_init_array+0x2e>
 800273e:	bd70      	pop	{r4, r5, r6, pc}
 8002740:	00b3      	lsls	r3, r6, #2
 8002742:	58eb      	ldr	r3, [r5, r3]
 8002744:	4798      	blx	r3
 8002746:	3601      	adds	r6, #1
 8002748:	e7ee      	b.n	8002728 <__libc_init_array+0xc>
 800274a:	00b3      	lsls	r3, r6, #2
 800274c:	58eb      	ldr	r3, [r5, r3]
 800274e:	4798      	blx	r3
 8002750:	3601      	adds	r6, #1
 8002752:	e7f2      	b.n	800273a <__libc_init_array+0x1e>
 8002754:	080027a8 	.word	0x080027a8
 8002758:	080027a8 	.word	0x080027a8
 800275c:	080027ac 	.word	0x080027ac
 8002760:	080027a8 	.word	0x080027a8

08002764 <_init>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	469e      	mov	lr, r3
 800276e:	4770      	bx	lr

08002770 <_fini>:
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002776:	bc08      	pop	{r3}
 8002778:	469e      	mov	lr, r3
 800277a:	4770      	bx	lr

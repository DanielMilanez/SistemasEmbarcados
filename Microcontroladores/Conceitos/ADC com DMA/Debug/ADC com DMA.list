
ADC com DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003008  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080030c8  080030c8  000040c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030e4  080030e4  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080030e4  080030e4  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080030e4  080030e4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030e4  080030e4  000040e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030e8  080030e8  000040e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030ec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  080030f8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080030f8  00005118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bb4  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019eb  00000000  00000000  0000dbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0000f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000760  00000000  00000000  0000ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000138c1  00000000  00000000  000106e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab8e  00000000  00000000  00023fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b31d  00000000  00000000  0002eb2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9e4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002214  00000000  00000000  000a9e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  000ac0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080030b0 	.word	0x080030b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080030b0 	.word	0x080030b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <HAL_ADC_ConvCpltCallback>:
void StartUP(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (ConversionADC[0] >= 4095) able = 1;
 8000228:	4b07      	ldr	r3, [pc, #28]	@ (8000248 <HAL_ADC_ConvCpltCallback+0x28>)
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	@ (800024c <HAL_ADC_ConvCpltCallback+0x2c>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d903      	bls.n	800023a <HAL_ADC_ConvCpltCallback+0x1a>
 8000232:	4b07      	ldr	r3, [pc, #28]	@ (8000250 <HAL_ADC_ConvCpltCallback+0x30>)
 8000234:	2201      	movs	r2, #1
 8000236:	701a      	strb	r2, [r3, #0]
	else able = 0;
}
 8000238:	e002      	b.n	8000240 <HAL_ADC_ConvCpltCallback+0x20>
	else able = 0;
 800023a:	4b05      	ldr	r3, [pc, #20]	@ (8000250 <HAL_ADC_ConvCpltCallback+0x30>)
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
}
 8000240:	46c0      	nop			@ (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}
 8000248:	2000010c 	.word	0x2000010c
 800024c:	00000ffe 	.word	0x00000ffe
 8000250:	20000110 	.word	0x20000110

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000258:	f000 fb40 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025c:	f000 f824 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000260:	f000 f982 	bl	8000568 <MX_GPIO_Init>
  MX_DMA_Init();
 8000264:	f000 f962 	bl	800052c <MX_DMA_Init>
  MX_ADC_Init();
 8000268:	f000 f86e 	bl	8000348 <MX_ADC_Init>
  MX_TIM2_Init();
 800026c:	f000 f8e0 	bl	8000430 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, (uint32_t *) ConversionADC, 2);
 8000270:	4909      	ldr	r1, [pc, #36]	@ (8000298 <main+0x44>)
 8000272:	4b0a      	ldr	r3, [pc, #40]	@ (800029c <main+0x48>)
 8000274:	2202      	movs	r2, #2
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fd38 	bl	8000cec <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800027c:	4b08      	ldr	r3, [pc, #32]	@ (80002a0 <main+0x4c>)
 800027e:	2100      	movs	r1, #0
 8000280:	0018      	movs	r0, r3
 8000282:	f002 fa4f 	bl	8002724 <HAL_TIM_PWM_Start>

  StartUP();
 8000286:	f000 f9a9 	bl	80005dc <StartUP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (able == 1) RightConversion();
 800028a:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <main+0x50>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b01      	cmp	r3, #1
 8000290:	d1fb      	bne.n	800028a <main+0x36>
 8000292:	f000 f9c3 	bl	800061c <RightConversion>
 8000296:	e7f8      	b.n	800028a <main+0x36>
 8000298:	2000010c 	.word	0x2000010c
 800029c:	20000028 	.word	0x20000028
 80002a0:	200000cc 	.word	0x200000cc
 80002a4:	20000110 	.word	0x20000110

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b095      	sub	sp, #84	@ 0x54
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2418      	movs	r4, #24
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	2338      	movs	r3, #56	@ 0x38
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f002 fecd 	bl	8003058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	0018      	movs	r0, r3
 80002c2:	2314      	movs	r3, #20
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f002 fec6 	bl	8003058 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000340 <SystemClock_Config+0x98>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000344 <SystemClock_Config+0x9c>)
 80002d2:	401a      	ands	r2, r3
 80002d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000340 <SystemClock_Config+0x98>)
 80002d6:	2180      	movs	r1, #128	@ 0x80
 80002d8:	0109      	lsls	r1, r1, #4
 80002da:	430a      	orrs	r2, r1
 80002dc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002de:	0021      	movs	r1, r4
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2202      	movs	r2, #2
 80002e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2201      	movs	r2, #1
 80002ea:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2210      	movs	r2, #16
 80002f0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2200      	movs	r2, #0
 80002f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 fbf8 	bl	8001af0 <HAL_RCC_OscConfig>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000304:	f000 f9a8 	bl	8000658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	220f      	movs	r2, #15
 800030c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2201      	movs	r2, #1
 8000312:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2280      	movs	r2, #128	@ 0x80
 8000318:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2100      	movs	r1, #0
 800032a:	0018      	movs	r0, r3
 800032c:	f001 ffa4 	bl	8002278 <HAL_RCC_ClockConfig>
 8000330:	1e03      	subs	r3, r0, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000334:	f000 f990 	bl	8000658 <Error_Handler>
  }
}
 8000338:	46c0      	nop			@ (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b015      	add	sp, #84	@ 0x54
 800033e:	bd90      	pop	{r4, r7, pc}
 8000340:	40007000 	.word	0x40007000
 8000344:	ffffe7ff 	.word	0xffffe7ff

08000348 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800034e:	003b      	movs	r3, r7
 8000350:	0018      	movs	r0, r3
 8000352:	2308      	movs	r3, #8
 8000354:	001a      	movs	r2, r3
 8000356:	2100      	movs	r1, #0
 8000358:	f002 fe7e 	bl	8003058 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800035c:	4b30      	ldr	r3, [pc, #192]	@ (8000420 <MX_ADC_Init+0xd8>)
 800035e:	4a31      	ldr	r2, [pc, #196]	@ (8000424 <MX_ADC_Init+0xdc>)
 8000360:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000362:	4b2f      	ldr	r3, [pc, #188]	@ (8000420 <MX_ADC_Init+0xd8>)
 8000364:	2200      	movs	r2, #0
 8000366:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000368:	4b2d      	ldr	r3, [pc, #180]	@ (8000420 <MX_ADC_Init+0xd8>)
 800036a:	2280      	movs	r2, #128	@ 0x80
 800036c:	05d2      	lsls	r2, r2, #23
 800036e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000370:	4b2b      	ldr	r3, [pc, #172]	@ (8000420 <MX_ADC_Init+0xd8>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000376:	4b2a      	ldr	r3, [pc, #168]	@ (8000420 <MX_ADC_Init+0xd8>)
 8000378:	2207      	movs	r2, #7
 800037a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800037c:	4b28      	ldr	r3, [pc, #160]	@ (8000420 <MX_ADC_Init+0xd8>)
 800037e:	2201      	movs	r2, #1
 8000380:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000382:	4b27      	ldr	r3, [pc, #156]	@ (8000420 <MX_ADC_Init+0xd8>)
 8000384:	2200      	movs	r2, #0
 8000386:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000388:	4b25      	ldr	r3, [pc, #148]	@ (8000420 <MX_ADC_Init+0xd8>)
 800038a:	2220      	movs	r2, #32
 800038c:	2101      	movs	r1, #1
 800038e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000390:	4b23      	ldr	r3, [pc, #140]	@ (8000420 <MX_ADC_Init+0xd8>)
 8000392:	2221      	movs	r2, #33	@ 0x21
 8000394:	2100      	movs	r1, #0
 8000396:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000398:	4b21      	ldr	r3, [pc, #132]	@ (8000420 <MX_ADC_Init+0xd8>)
 800039a:	2200      	movs	r2, #0
 800039c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800039e:	4b20      	ldr	r3, [pc, #128]	@ (8000420 <MX_ADC_Init+0xd8>)
 80003a0:	22c2      	movs	r2, #194	@ 0xc2
 80003a2:	32ff      	adds	r2, #255	@ 0xff
 80003a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80003a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000420 <MX_ADC_Init+0xd8>)
 80003a8:	222c      	movs	r2, #44	@ 0x2c
 80003aa:	2101      	movs	r1, #1
 80003ac:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000420 <MX_ADC_Init+0xd8>)
 80003b0:	2204      	movs	r2, #4
 80003b2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000420 <MX_ADC_Init+0xd8>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003ba:	4b19      	ldr	r3, [pc, #100]	@ (8000420 <MX_ADC_Init+0xd8>)
 80003bc:	2200      	movs	r2, #0
 80003be:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80003c0:	4b17      	ldr	r3, [pc, #92]	@ (8000420 <MX_ADC_Init+0xd8>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003c6:	4b16      	ldr	r3, [pc, #88]	@ (8000420 <MX_ADC_Init+0xd8>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003cc:	4b14      	ldr	r3, [pc, #80]	@ (8000420 <MX_ADC_Init+0xd8>)
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 fb18 	bl	8000a04 <HAL_ADC_Init>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80003d8:	f000 f93e 	bl	8000658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80003dc:	003b      	movs	r3, r7
 80003de:	4a12      	ldr	r2, [pc, #72]	@ (8000428 <MX_ADC_Init+0xe0>)
 80003e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003e2:	003b      	movs	r3, r7
 80003e4:	2280      	movs	r2, #128	@ 0x80
 80003e6:	0152      	lsls	r2, r2, #5
 80003e8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ea:	003a      	movs	r2, r7
 80003ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000420 <MX_ADC_Init+0xd8>)
 80003ee:	0011      	movs	r1, r2
 80003f0:	0018      	movs	r0, r3
 80003f2:	f000 fdc3 	bl	8000f7c <HAL_ADC_ConfigChannel>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80003fa:	f000 f92d 	bl	8000658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003fe:	003b      	movs	r3, r7
 8000400:	4a0a      	ldr	r2, [pc, #40]	@ (800042c <MX_ADC_Init+0xe4>)
 8000402:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000404:	003a      	movs	r2, r7
 8000406:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <MX_ADC_Init+0xd8>)
 8000408:	0011      	movs	r1, r2
 800040a:	0018      	movs	r0, r3
 800040c:	f000 fdb6 	bl	8000f7c <HAL_ADC_ConfigChannel>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000414:	f000 f920 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000418:	46c0      	nop			@ (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000028 	.word	0x20000028
 8000424:	40012400 	.word	0x40012400
 8000428:	10000010 	.word	0x10000010
 800042c:	14000020 	.word	0x14000020

08000430 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	@ 0x28
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000436:	2318      	movs	r3, #24
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	0018      	movs	r0, r3
 800043c:	2310      	movs	r3, #16
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f002 fe09 	bl	8003058 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000446:	2310      	movs	r3, #16
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	0018      	movs	r0, r3
 800044c:	2308      	movs	r3, #8
 800044e:	001a      	movs	r2, r3
 8000450:	2100      	movs	r1, #0
 8000452:	f002 fe01 	bl	8003058 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000456:	003b      	movs	r3, r7
 8000458:	0018      	movs	r0, r3
 800045a:	2310      	movs	r3, #16
 800045c:	001a      	movs	r2, r3
 800045e:	2100      	movs	r1, #0
 8000460:	f002 fdfa 	bl	8003058 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000464:	4b30      	ldr	r3, [pc, #192]	@ (8000528 <MX_TIM2_Init+0xf8>)
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	05d2      	lsls	r2, r2, #23
 800046a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800046c:	4b2e      	ldr	r3, [pc, #184]	@ (8000528 <MX_TIM2_Init+0xf8>)
 800046e:	2207      	movs	r2, #7
 8000470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000472:	4b2d      	ldr	r3, [pc, #180]	@ (8000528 <MX_TIM2_Init+0xf8>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8000478:	4b2b      	ldr	r3, [pc, #172]	@ (8000528 <MX_TIM2_Init+0xf8>)
 800047a:	22f4      	movs	r2, #244	@ 0xf4
 800047c:	32ff      	adds	r2, #255	@ 0xff
 800047e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000480:	4b29      	ldr	r3, [pc, #164]	@ (8000528 <MX_TIM2_Init+0xf8>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000486:	4b28      	ldr	r3, [pc, #160]	@ (8000528 <MX_TIM2_Init+0xf8>)
 8000488:	2280      	movs	r2, #128	@ 0x80
 800048a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800048c:	4b26      	ldr	r3, [pc, #152]	@ (8000528 <MX_TIM2_Init+0xf8>)
 800048e:	0018      	movs	r0, r3
 8000490:	f002 f8c0 	bl	8002614 <HAL_TIM_Base_Init>
 8000494:	1e03      	subs	r3, r0, #0
 8000496:	d001      	beq.n	800049c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000498:	f000 f8de 	bl	8000658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800049c:	2118      	movs	r1, #24
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2280      	movs	r2, #128	@ 0x80
 80004a2:	0152      	lsls	r2, r2, #5
 80004a4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004a6:	187a      	adds	r2, r7, r1
 80004a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000528 <MX_TIM2_Init+0xf8>)
 80004aa:	0011      	movs	r1, r2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 fa8b 	bl	80029c8 <HAL_TIM_ConfigClockSource>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80004b6:	f000 f8cf 	bl	8000658 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000528 <MX_TIM2_Init+0xf8>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f002 f8e9 	bl	8002694 <HAL_TIM_PWM_Init>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80004c6:	f000 f8c7 	bl	8000658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ca:	2110      	movs	r1, #16
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004d8:	187a      	adds	r2, r7, r1
 80004da:	4b13      	ldr	r3, [pc, #76]	@ (8000528 <MX_TIM2_Init+0xf8>)
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f002 fd62 	bl	8002fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80004e8:	f000 f8b6 	bl	8000658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ec:	003b      	movs	r3, r7
 80004ee:	2260      	movs	r2, #96	@ 0x60
 80004f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10-1;
 80004f2:	003b      	movs	r3, r7
 80004f4:	2209      	movs	r2, #9
 80004f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f8:	003b      	movs	r3, r7
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004fe:	003b      	movs	r3, r7
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000504:	0039      	movs	r1, r7
 8000506:	4b08      	ldr	r3, [pc, #32]	@ (8000528 <MX_TIM2_Init+0xf8>)
 8000508:	2200      	movs	r2, #0
 800050a:	0018      	movs	r0, r3
 800050c:	f002 f996 	bl	800283c <HAL_TIM_PWM_ConfigChannel>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000514:	f000 f8a0 	bl	8000658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000518:	4b03      	ldr	r3, [pc, #12]	@ (8000528 <MX_TIM2_Init+0xf8>)
 800051a:	0018      	movs	r0, r3
 800051c:	f000 f940 	bl	80007a0 <HAL_TIM_MspPostInit>

}
 8000520:	46c0      	nop			@ (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b00a      	add	sp, #40	@ 0x28
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200000cc 	.word	0x200000cc

0800052c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000532:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <MX_DMA_Init+0x38>)
 8000534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000536:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <MX_DMA_Init+0x38>)
 8000538:	2101      	movs	r1, #1
 800053a:	430a      	orrs	r2, r1
 800053c:	631a      	str	r2, [r3, #48]	@ 0x30
 800053e:	4b09      	ldr	r3, [pc, #36]	@ (8000564 <MX_DMA_Init+0x38>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	2201      	movs	r2, #1
 8000544:	4013      	ands	r3, r2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	2009      	movs	r0, #9
 8000550:	f000 ff6c 	bl	800142c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000554:	2009      	movs	r0, #9
 8000556:	f000 ff7e 	bl	8001456 <HAL_NVIC_EnableIRQ>

}
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	40021000 	.word	0x40021000

08000568 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <MX_GPIO_Init+0x28>)
 8000570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000572:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <MX_GPIO_Init+0x28>)
 8000574:	2101      	movs	r1, #1
 8000576:	430a      	orrs	r2, r1
 8000578:	62da      	str	r2, [r3, #44]	@ 0x2c
 800057a:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <MX_GPIO_Init+0x28>)
 800057c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800057e:	2201      	movs	r2, #1
 8000580:	4013      	ands	r3, r2
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b002      	add	sp, #8
 800058c:	bd80      	pop	{r7, pc}
 800058e:	46c0      	nop			@ (mov r8, r8)
 8000590:	40021000 	.word	0x40021000

08000594 <NoteTone>:

/* USER CODE BEGIN 4 */
void NoteTone(uint32_t frequency){
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	TIM2->CCR1 = frequency / 2;
 800059c:	2380      	movs	r3, #128	@ 0x80
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	0852      	lsrs	r2, r2, #1
 80005a4:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->ARR = frequency;
 80005a6:	2380      	movs	r3, #128	@ 0x80
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <NoteManager>:

void NoteManager(uint32_t frequency){
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
	NoteTone(frequency);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	0018      	movs	r0, r3
 80005c2:	f7ff ffe7 	bl	8000594 <NoteTone>
	HAL_Delay(100);
 80005c6:	2064      	movs	r0, #100	@ 0x64
 80005c8:	f000 f9f8 	bl	80009bc <HAL_Delay>
	NoteTone(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f7ff ffe1 	bl	8000594 <NoteTone>
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b002      	add	sp, #8
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <StartUP>:

void StartUP(void){
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	NoteManager(DO);
 80005e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <StartUP+0x38>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f7ff ffe7 	bl	80005b6 <NoteManager>
	HAL_Delay(10);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f000 f9e7 	bl	80009bc <HAL_Delay>
	NoteManager(RE);
 80005ee:	23d3      	movs	r3, #211	@ 0xd3
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f7ff ffdf 	bl	80005b6 <NoteManager>
	HAL_Delay(10);
 80005f8:	200a      	movs	r0, #10
 80005fa:	f000 f9df 	bl	80009bc <HAL_Delay>
	NoteManager(MI);
 80005fe:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <StartUP+0x3c>)
 8000600:	0018      	movs	r0, r3
 8000602:	f7ff ffd8 	bl	80005b6 <NoteManager>
	HAL_Delay(10);
 8000606:	200a      	movs	r0, #10
 8000608:	f000 f9d8 	bl	80009bc <HAL_Delay>
}
 800060c:	46c0      	nop			@ (mov r8, r8)
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	000003b2 	.word	0x000003b2
 8000618:	000002ef 	.word	0x000002ef

0800061c <RightConversion>:

void RightConversion(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	NoteManager(DO);
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <RightConversion+0x38>)
 8000622:	0018      	movs	r0, r3
 8000624:	f7ff ffc7 	bl	80005b6 <NoteManager>
	HAL_Delay(10);
 8000628:	200a      	movs	r0, #10
 800062a:	f000 f9c7 	bl	80009bc <HAL_Delay>
	NoteManager(RE);
 800062e:	23d3      	movs	r3, #211	@ 0xd3
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	0018      	movs	r0, r3
 8000634:	f7ff ffbf 	bl	80005b6 <NoteManager>
	HAL_Delay(10);
 8000638:	200a      	movs	r0, #10
 800063a:	f000 f9bf 	bl	80009bc <HAL_Delay>
	NoteManager(DO);
 800063e:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <RightConversion+0x38>)
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff ffb8 	bl	80005b6 <NoteManager>
	HAL_Delay(10);
 8000646:	200a      	movs	r0, #10
 8000648:	f000 f9b8 	bl	80009bc <HAL_Delay>
}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	000003b2 	.word	0x000003b2

08000658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065c:	b672      	cpsid	i
}
 800065e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	e7fd      	b.n	8000660 <Error_Handler+0x8>

08000664 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <HAL_MspInit+0x24>)
 800066a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <HAL_MspInit+0x24>)
 800066e:	2101      	movs	r1, #1
 8000670:	430a      	orrs	r2, r1
 8000672:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	4b04      	ldr	r3, [pc, #16]	@ (8000688 <HAL_MspInit+0x24>)
 8000676:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000678:	4b03      	ldr	r3, [pc, #12]	@ (8000688 <HAL_MspInit+0x24>)
 800067a:	2180      	movs	r1, #128	@ 0x80
 800067c:	0549      	lsls	r1, r1, #21
 800067e:	430a      	orrs	r2, r1
 8000680:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b089      	sub	sp, #36	@ 0x24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	240c      	movs	r4, #12
 8000696:	193b      	adds	r3, r7, r4
 8000698:	0018      	movs	r0, r3
 800069a:	2314      	movs	r3, #20
 800069c:	001a      	movs	r2, r3
 800069e:	2100      	movs	r1, #0
 80006a0:	f002 fcda 	bl	8003058 <memset>
  if(hadc->Instance==ADC1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a2e      	ldr	r2, [pc, #184]	@ (8000764 <HAL_ADC_MspInit+0xd8>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d155      	bne.n	800075a <HAL_ADC_MspInit+0xce>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000768 <HAL_ADC_MspInit+0xdc>)
 80006b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <HAL_ADC_MspInit+0xdc>)
 80006b4:	2180      	movs	r1, #128	@ 0x80
 80006b6:	0089      	lsls	r1, r1, #2
 80006b8:	430a      	orrs	r2, r1
 80006ba:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <HAL_ADC_MspInit+0xdc>)
 80006be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006c0:	4b29      	ldr	r3, [pc, #164]	@ (8000768 <HAL_ADC_MspInit+0xdc>)
 80006c2:	2101      	movs	r1, #1
 80006c4:	430a      	orrs	r2, r1
 80006c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <HAL_ADC_MspInit+0xdc>)
 80006ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006cc:	2201      	movs	r2, #1
 80006ce:	4013      	ands	r3, r2
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2230      	movs	r2, #48	@ 0x30
 80006d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2203      	movs	r2, #3
 80006de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	193a      	adds	r2, r7, r4
 80006e8:	23a0      	movs	r3, #160	@ 0xa0
 80006ea:	05db      	lsls	r3, r3, #23
 80006ec:	0011      	movs	r1, r2
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 f888 	bl	8001804 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <HAL_ADC_MspInit+0xe0>)
 80006f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000770 <HAL_ADC_MspInit+0xe4>)
 80006f8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <HAL_ADC_MspInit+0xe0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000700:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <HAL_ADC_MspInit+0xe0>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000706:	4b19      	ldr	r3, [pc, #100]	@ (800076c <HAL_ADC_MspInit+0xe0>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800070c:	4b17      	ldr	r3, [pc, #92]	@ (800076c <HAL_ADC_MspInit+0xe0>)
 800070e:	2280      	movs	r2, #128	@ 0x80
 8000710:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <HAL_ADC_MspInit+0xe0>)
 8000714:	2280      	movs	r2, #128	@ 0x80
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <HAL_ADC_MspInit+0xe0>)
 800071c:	2280      	movs	r2, #128	@ 0x80
 800071e:	00d2      	lsls	r2, r2, #3
 8000720:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <HAL_ADC_MspInit+0xe0>)
 8000724:	2220      	movs	r2, #32
 8000726:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000728:	4b10      	ldr	r3, [pc, #64]	@ (800076c <HAL_ADC_MspInit+0xe0>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <HAL_ADC_MspInit+0xe0>)
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fead 	bl	8001490 <HAL_DMA_Init>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800073a:	f7ff ff8d 	bl	8000658 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a0a      	ldr	r2, [pc, #40]	@ (800076c <HAL_ADC_MspInit+0xe0>)
 8000742:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <HAL_ADC_MspInit+0xe0>)
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	200c      	movs	r0, #12
 8000750:	f000 fe6c 	bl	800142c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000754:	200c      	movs	r0, #12
 8000756:	f000 fe7e 	bl	8001456 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b009      	add	sp, #36	@ 0x24
 8000760:	bd90      	pop	{r4, r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	40012400 	.word	0x40012400
 8000768:	40021000 	.word	0x40021000
 800076c:	20000084 	.word	0x20000084
 8000770:	40020008 	.word	0x40020008

08000774 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	2380      	movs	r3, #128	@ 0x80
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	429a      	cmp	r2, r3
 8000786:	d105      	bne.n	8000794 <HAL_TIM_Base_MspInit+0x20>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000788:	4b04      	ldr	r3, [pc, #16]	@ (800079c <HAL_TIM_Base_MspInit+0x28>)
 800078a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800078c:	4b03      	ldr	r3, [pc, #12]	@ (800079c <HAL_TIM_Base_MspInit+0x28>)
 800078e:	2101      	movs	r1, #1
 8000790:	430a      	orrs	r2, r1
 8000792:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000794:	46c0      	nop			@ (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b002      	add	sp, #8
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000

080007a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b089      	sub	sp, #36	@ 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	240c      	movs	r4, #12
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	0018      	movs	r0, r3
 80007ae:	2314      	movs	r3, #20
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f002 fc50 	bl	8003058 <memset>
  if(htim->Instance==TIM2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	2380      	movs	r3, #128	@ 0x80
 80007be:	05db      	lsls	r3, r3, #23
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d122      	bne.n	800080a <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <HAL_TIM_MspPostInit+0x74>)
 80007c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <HAL_TIM_MspPostInit+0x74>)
 80007ca:	2101      	movs	r1, #1
 80007cc:	430a      	orrs	r2, r1
 80007ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007d0:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <HAL_TIM_MspPostInit+0x74>)
 80007d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007d4:	2201      	movs	r2, #1
 80007d6:	4013      	ands	r3, r2
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007dc:	0021      	movs	r1, r4
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2202      	movs	r2, #2
 80007e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2202      	movs	r2, #2
 80007fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	187a      	adds	r2, r7, r1
 80007fe:	23a0      	movs	r3, #160	@ 0xa0
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f000 fffd 	bl	8001804 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b009      	add	sp, #36	@ 0x24
 8000810:	bd90      	pop	{r4, r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	40021000 	.word	0x40021000

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	e7fd      	b.n	800081c <NMI_Handler+0x4>

08000820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	e7fd      	b.n	8000824 <HardFault_Handler+0x4>

08000828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000840:	f000 f8a0 	bl	8000984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000850:	4b03      	ldr	r3, [pc, #12]	@ (8000860 <DMA1_Channel1_IRQHandler+0x14>)
 8000852:	0018      	movs	r0, r3
 8000854:	f000 fefa 	bl	800164c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	20000084 	.word	0x20000084

08000864 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <ADC1_COMP_IRQHandler+0x14>)
 800086a:	0018      	movs	r0, r3
 800086c:	f000 fac4 	bl	8000df8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	20000028 	.word	0x20000028

0800087c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000888:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800088c:	f7ff fff6 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000892:	490d      	ldr	r1, [pc, #52]	@ (80008c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000894:	4a0d      	ldr	r2, [pc, #52]	@ (80008cc <LoopForever+0xe>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a8:	4c0a      	ldr	r4, [pc, #40]	@ (80008d4 <LoopForever+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b6:	f002 fbd7 	bl	8003068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ba:	f7ff fccb 	bl	8000254 <main>

080008be <LoopForever>:

LoopForever:
    b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
  ldr   r0, =_estack
 80008c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008cc:	080030ec 	.word	0x080030ec
  ldr r2, =_sbss
 80008d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008d4:	20000118 	.word	0x20000118

080008d8 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <DMA1_Channel2_3_IRQHandler>
	...

080008dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <HAL_Init+0x3c>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000918 <HAL_Init+0x3c>)
 80008ee:	2140      	movs	r1, #64	@ 0x40
 80008f0:	430a      	orrs	r2, r1
 80008f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 f811 	bl	800091c <HAL_InitTick>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d003      	beq.n	8000906 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	e001      	b.n	800090a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000906:	f7ff fead 	bl	8000664 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781b      	ldrb	r3, [r3, #0]
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	b002      	add	sp, #8
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <HAL_InitTick+0x5c>)
 8000926:	681c      	ldr	r4, [r3, #0]
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <HAL_InitTick+0x60>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	0019      	movs	r1, r3
 800092e:	23fa      	movs	r3, #250	@ 0xfa
 8000930:	0098      	lsls	r0, r3, #2
 8000932:	f7ff fbe9 	bl	8000108 <__udivsi3>
 8000936:	0003      	movs	r3, r0
 8000938:	0019      	movs	r1, r3
 800093a:	0020      	movs	r0, r4
 800093c:	f7ff fbe4 	bl	8000108 <__udivsi3>
 8000940:	0003      	movs	r3, r0
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fd97 	bl	8001476 <HAL_SYSTICK_Config>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e00f      	b.n	8000970 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d80b      	bhi.n	800096e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	2301      	movs	r3, #1
 800095a:	425b      	negs	r3, r3
 800095c:	2200      	movs	r2, #0
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fd64 	bl	800142c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <HAL_InitTick+0x64>)
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	e000      	b.n	8000970 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b003      	add	sp, #12
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	20000000 	.word	0x20000000
 800097c:	20000008 	.word	0x20000008
 8000980:	20000004 	.word	0x20000004

08000984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000988:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <HAL_IncTick+0x1c>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	001a      	movs	r2, r3
 800098e:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <HAL_IncTick+0x20>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	18d2      	adds	r2, r2, r3
 8000994:	4b03      	ldr	r3, [pc, #12]	@ (80009a4 <HAL_IncTick+0x20>)
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	20000008 	.word	0x20000008
 80009a4:	20000114 	.word	0x20000114

080009a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b02      	ldr	r3, [pc, #8]	@ (80009b8 <HAL_GetTick+0x10>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	0018      	movs	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	20000114 	.word	0x20000114

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c4:	f7ff fff0 	bl	80009a8 <HAL_GetTick>
 80009c8:	0003      	movs	r3, r0
 80009ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	d005      	beq.n	80009e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <HAL_Delay+0x44>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	001a      	movs	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	189b      	adds	r3, r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	f7ff ffe0 	bl	80009a8 <HAL_GetTick>
 80009e8:	0002      	movs	r2, r0
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d8f7      	bhi.n	80009e4 <HAL_Delay+0x28>
  {
  }
}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b004      	add	sp, #16
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	20000008 	.word	0x20000008

08000a04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d101      	bne.n	8000a16 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e159      	b.n	8000cca <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d10a      	bne.n	8000a34 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2250      	movs	r2, #80	@ 0x50
 8000a28:	2100      	movs	r1, #0
 8000a2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff fe2c 	bl	800068c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a38:	2210      	movs	r2, #16
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	2b10      	cmp	r3, #16
 8000a3e:	d005      	beq.n	8000a4c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	2204      	movs	r2, #4
 8000a48:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000a4a:	d00b      	beq.n	8000a64 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a50:	2210      	movs	r2, #16
 8000a52:	431a      	orrs	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2250      	movs	r2, #80	@ 0x50
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e132      	b.n	8000cca <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a68:	4a9a      	ldr	r2, [pc, #616]	@ (8000cd4 <HAL_ADC_Init+0x2d0>)
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d108      	bne.n	8000a94 <HAL_ADC_Init+0x90>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d101      	bne.n	8000a94 <HAL_ADC_Init+0x90>
 8000a90:	2301      	movs	r3, #1
 8000a92:	e000      	b.n	8000a96 <HAL_ADC_Init+0x92>
 8000a94:	2300      	movs	r3, #0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d149      	bne.n	8000b2e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	23c0      	movs	r3, #192	@ 0xc0
 8000aa0:	061b      	lsls	r3, r3, #24
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d00b      	beq.n	8000abe <HAL_ADC_Init+0xba>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	2380      	movs	r3, #128	@ 0x80
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d005      	beq.n	8000abe <HAL_ADC_Init+0xba>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	2380      	movs	r3, #128	@ 0x80
 8000ab8:	061b      	lsls	r3, r3, #24
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d111      	bne.n	8000ae2 <HAL_ADC_Init+0xde>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	691a      	ldr	r2, [r3, #16]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	0092      	lsls	r2, r2, #2
 8000aca:	0892      	lsrs	r2, r2, #2
 8000acc:	611a      	str	r2, [r3, #16]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6919      	ldr	r1, [r3, #16]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	430a      	orrs	r2, r1
 8000ade:	611a      	str	r2, [r3, #16]
 8000ae0:	e014      	b.n	8000b0c <HAL_ADC_Init+0x108>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	691a      	ldr	r2, [r3, #16]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	0092      	lsls	r2, r2, #2
 8000aee:	0892      	lsrs	r2, r2, #2
 8000af0:	611a      	str	r2, [r3, #16]
 8000af2:	4b79      	ldr	r3, [pc, #484]	@ (8000cd8 <HAL_ADC_Init+0x2d4>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	4b78      	ldr	r3, [pc, #480]	@ (8000cd8 <HAL_ADC_Init+0x2d4>)
 8000af8:	4978      	ldr	r1, [pc, #480]	@ (8000cdc <HAL_ADC_Init+0x2d8>)
 8000afa:	400a      	ands	r2, r1
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	4b76      	ldr	r3, [pc, #472]	@ (8000cd8 <HAL_ADC_Init+0x2d4>)
 8000b00:	6819      	ldr	r1, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	4b74      	ldr	r3, [pc, #464]	@ (8000cd8 <HAL_ADC_Init+0x2d4>)
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	68da      	ldr	r2, [r3, #12]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2118      	movs	r1, #24
 8000b18:	438a      	bics	r2, r1
 8000b1a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	68d9      	ldr	r1, [r3, #12]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8000cd8 <HAL_ADC_Init+0x2d4>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	4b69      	ldr	r3, [pc, #420]	@ (8000cd8 <HAL_ADC_Init+0x2d4>)
 8000b34:	496a      	ldr	r1, [pc, #424]	@ (8000ce0 <HAL_ADC_Init+0x2dc>)
 8000b36:	400a      	ands	r2, r1
 8000b38:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000b3a:	4b67      	ldr	r3, [pc, #412]	@ (8000cd8 <HAL_ADC_Init+0x2d4>)
 8000b3c:	6819      	ldr	r1, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b42:	065a      	lsls	r2, r3, #25
 8000b44:	4b64      	ldr	r3, [pc, #400]	@ (8000cd8 <HAL_ADC_Init+0x2d4>)
 8000b46:	430a      	orrs	r2, r1
 8000b48:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	2380      	movs	r3, #128	@ 0x80
 8000b52:	055b      	lsls	r3, r3, #21
 8000b54:	4013      	ands	r3, r2
 8000b56:	d108      	bne.n	8000b6a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689a      	ldr	r2, [r3, #8]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	0549      	lsls	r1, r1, #21
 8000b66:	430a      	orrs	r2, r1
 8000b68:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	68da      	ldr	r2, [r3, #12]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	495b      	ldr	r1, [pc, #364]	@ (8000ce4 <HAL_ADC_Init+0x2e0>)
 8000b76:	400a      	ands	r2, r1
 8000b78:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68d9      	ldr	r1, [r3, #12]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	691b      	ldr	r3, [r3, #16]
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d101      	bne.n	8000b90 <HAL_ADC_Init+0x18c>
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	e000      	b.n	8000b92 <HAL_ADC_Init+0x18e>
 8000b90:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000b92:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2020      	movs	r0, #32
 8000b98:	5c1b      	ldrb	r3, [r3, r0]
 8000b9a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000b9c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	202c      	movs	r0, #44	@ 0x2c
 8000ba2:	5c1b      	ldrb	r3, [r3, r0]
 8000ba4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ba6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000bac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000bb4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000bbc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bca:	23c2      	movs	r3, #194	@ 0xc2
 8000bcc:	33ff      	adds	r3, #255	@ 0xff
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d00b      	beq.n	8000bea <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	68d9      	ldr	r1, [r3, #12]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000be0:	431a      	orrs	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2221      	movs	r2, #33	@ 0x21
 8000bee:	5c9b      	ldrb	r3, [r3, r2]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d11a      	bne.n	8000c2a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2220      	movs	r2, #32
 8000bf8:	5c9b      	ldrb	r3, [r3, r2]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d109      	bne.n	8000c12 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	68da      	ldr	r2, [r3, #12]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	0249      	lsls	r1, r1, #9
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	e00b      	b.n	8000c2a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c16:	2220      	movs	r2, #32
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c22:	2201      	movs	r2, #1
 8000c24:	431a      	orrs	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d11f      	bne.n	8000c72 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	691a      	ldr	r2, [r3, #16]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	492a      	ldr	r1, [pc, #168]	@ (8000ce8 <HAL_ADC_Init+0x2e4>)
 8000c3e:	400a      	ands	r2, r1
 8000c40:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6919      	ldr	r1, [r3, #16]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000c50:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000c56:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	691a      	ldr	r2, [r3, #16]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	611a      	str	r2, [r3, #16]
 8000c70:	e00e      	b.n	8000c90 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d107      	bne.n	8000c90 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	691a      	ldr	r2, [r3, #16]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	438a      	bics	r2, r1
 8000c8e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	695a      	ldr	r2, [r3, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2107      	movs	r1, #7
 8000c9c:	438a      	bics	r2, r1
 8000c9e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6959      	ldr	r1, [r3, #20]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	4393      	bics	r3, r2
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	fffffefd 	.word	0xfffffefd
 8000cd8:	40012708 	.word	0x40012708
 8000cdc:	ffc3ffff 	.word	0xffc3ffff
 8000ce0:	fdffffff 	.word	0xfdffffff
 8000ce4:	fffe0219 	.word	0xfffe0219
 8000ce8:	fffffc03 	.word	0xfffffc03

08000cec <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cf8:	2317      	movs	r3, #23
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2204      	movs	r2, #4
 8000d08:	4013      	ands	r3, r2
 8000d0a:	d161      	bne.n	8000dd0 <HAL_ADC_Start_DMA+0xe4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2250      	movs	r2, #80	@ 0x50
 8000d10:	5c9b      	ldrb	r3, [r3, r2]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d101      	bne.n	8000d1a <HAL_ADC_Start_DMA+0x2e>
 8000d16:	2302      	movs	r3, #2
 8000d18:	e061      	b.n	8000dde <HAL_ADC_Start_DMA+0xf2>
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	2250      	movs	r2, #80	@ 0x50
 8000d1e:	2101      	movs	r1, #1
 8000d20:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d007      	beq.n	8000d4a <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000d3a:	2317      	movs	r3, #23
 8000d3c:	18fc      	adds	r4, r7, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	0018      	movs	r0, r3
 8000d42:	f000 f9bb 	bl	80010bc <ADC_Enable>
 8000d46:	0003      	movs	r3, r0
 8000d48:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d4a:	2417      	movs	r4, #23
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d141      	bne.n	8000dd8 <HAL_ADC_Start_DMA+0xec>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d58:	4a23      	ldr	r2, [pc, #140]	@ (8000de8 <HAL_ADC_Start_DMA+0xfc>)
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2280      	movs	r2, #128	@ 0x80
 8000d5e:	0052      	lsls	r2, r2, #1
 8000d60:	431a      	orrs	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2250      	movs	r2, #80	@ 0x50
 8000d70:	2100      	movs	r1, #0
 8000d72:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d78:	4a1c      	ldr	r2, [pc, #112]	@ (8000dec <HAL_ADC_Start_DMA+0x100>)
 8000d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d80:	4a1b      	ldr	r2, [pc, #108]	@ (8000df0 <HAL_ADC_Start_DMA+0x104>)
 8000d82:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d88:	4a1a      	ldr	r2, [pc, #104]	@ (8000df4 <HAL_ADC_Start_DMA+0x108>)
 8000d8a:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	221c      	movs	r2, #28
 8000d92:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2110      	movs	r1, #16
 8000da0:	430a      	orrs	r2, r1
 8000da2:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3340      	adds	r3, #64	@ 0x40
 8000dae:	0019      	movs	r1, r3
 8000db0:	68ba      	ldr	r2, [r7, #8]
 8000db2:	193c      	adds	r4, r7, r4
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f000 fbe3 	bl	8001580 <HAL_DMA_Start_IT>
 8000dba:	0003      	movs	r3, r0
 8000dbc:	7023      	strb	r3, [r4, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2104      	movs	r1, #4
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	e003      	b.n	8000dd8 <HAL_ADC_Start_DMA+0xec>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000dd0:	2317      	movs	r3, #23
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000dd8:	2317      	movs	r3, #23
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	781b      	ldrb	r3, [r3, #0]
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b007      	add	sp, #28
 8000de4:	bd90      	pop	{r4, r7, pc}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	fffff0fe 	.word	0xfffff0fe
 8000dec:	0800118d 	.word	0x0800118d
 8000df0:	08001241 	.word	0x08001241
 8000df4:	0800125f 	.word	0x0800125f

08000df8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2204      	movs	r2, #4
 8000e14:	4013      	ands	r3, r2
 8000e16:	d003      	beq.n	8000e20 <HAL_ADC_IRQHandler+0x28>
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d107      	bne.n	8000e30 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2208      	movs	r2, #8
 8000e24:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000e26:	d04e      	beq.n	8000ec6 <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d04a      	beq.n	8000ec6 <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e34:	2210      	movs	r2, #16
 8000e36:	4013      	ands	r3, r2
 8000e38:	d106      	bne.n	8000e48 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e3e:	2280      	movs	r2, #128	@ 0x80
 8000e40:	0092      	lsls	r2, r2, #2
 8000e42:	431a      	orrs	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	23c0      	movs	r3, #192	@ 0xc0
 8000e50:	011b      	lsls	r3, r3, #4
 8000e52:	4013      	ands	r3, r2
 8000e54:	d12b      	bne.n	8000eae <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2220      	movs	r2, #32
 8000e5a:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d126      	bne.n	8000eae <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2208      	movs	r2, #8
 8000e64:	4013      	ands	r3, r2
 8000e66:	d022      	beq.n	8000eae <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	2204      	movs	r2, #4
 8000e70:	4013      	ands	r3, r2
 8000e72:	d110      	bne.n	8000e96 <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	210c      	movs	r1, #12
 8000e80:	438a      	bics	r2, r1
 8000e82:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e88:	4a2f      	ldr	r2, [pc, #188]	@ (8000f48 <HAL_ADC_IRQHandler+0x150>)
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	431a      	orrs	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e94:	e00b      	b.n	8000eae <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff f9b5 	bl	8000220 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d003      	beq.n	8000ec6 <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2280      	movs	r2, #128	@ 0x80
 8000eca:	4013      	ands	r3, r2
 8000ecc:	d012      	beq.n	8000ef4 <HAL_ADC_IRQHandler+0xfc>
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	2280      	movs	r2, #128	@ 0x80
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d00e      	beq.n	8000ef4 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eda:	2280      	movs	r2, #128	@ 0x80
 8000edc:	0252      	lsls	r2, r2, #9
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	655a      	str	r2, [r3, #84]	@ 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 f838 	bl	8000f5c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2280      	movs	r2, #128	@ 0x80
 8000ef2:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2210      	movs	r2, #16
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d020      	beq.n	8000f3e <HAL_ADC_IRQHandler+0x146>
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	2210      	movs	r2, #16
 8000f00:	4013      	ands	r3, r2
 8000f02:	d01c      	beq.n	8000f3e <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	2201      	movs	r2, #1
 8000f14:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d10d      	bne.n	8000f36 <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1e:	2202      	movs	r2, #2
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	0018      	movs	r0, r3
 8000f32:	f000 f81b 	bl	8000f6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2210      	movs	r2, #16
 8000f3c:	601a      	str	r2, [r3, #0]
  }

}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b004      	add	sp, #16
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	fffffefe 	.word	0xfffffefe

08000f4c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b002      	add	sp, #8
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f74:	46c0      	nop			@ (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b002      	add	sp, #8
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2250      	movs	r2, #80	@ 0x50
 8000f8a:	5c9b      	ldrb	r3, [r3, r2]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d101      	bne.n	8000f94 <HAL_ADC_ConfigChannel+0x18>
 8000f90:	2302      	movs	r3, #2
 8000f92:	e085      	b.n	80010a0 <HAL_ADC_ConfigChannel+0x124>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2250      	movs	r2, #80	@ 0x50
 8000f98:	2101      	movs	r1, #1
 8000f9a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d00b      	beq.n	8000fc0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fac:	2220      	movs	r2, #32
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2250      	movs	r2, #80	@ 0x50
 8000fb8:	2100      	movs	r1, #0
 8000fba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e06f      	b.n	80010a0 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4a38      	ldr	r2, [pc, #224]	@ (80010a8 <HAL_ADC_ConfigChannel+0x12c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d035      	beq.n	8001036 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	035b      	lsls	r3, r3, #13
 8000fd6:	0b5a      	lsrs	r2, r3, #13
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2380      	movs	r3, #128	@ 0x80
 8000fe6:	02db      	lsls	r3, r3, #11
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d009      	beq.n	8001000 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8000fec:	4b2f      	ldr	r3, [pc, #188]	@ (80010ac <HAL_ADC_ConfigChannel+0x130>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80010ac <HAL_ADC_ConfigChannel+0x130>)
 8000ff2:	2180      	movs	r1, #128	@ 0x80
 8000ff4:	0409      	lsls	r1, r1, #16
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000ffa:	200a      	movs	r0, #10
 8000ffc:	f000 f94a 	bl	8001294 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	2380      	movs	r3, #128	@ 0x80
 8001006:	029b      	lsls	r3, r3, #10
 8001008:	4013      	ands	r3, r2
 800100a:	d006      	beq.n	800101a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800100c:	4b27      	ldr	r3, [pc, #156]	@ (80010ac <HAL_ADC_ConfigChannel+0x130>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <HAL_ADC_ConfigChannel+0x130>)
 8001012:	2180      	movs	r1, #128	@ 0x80
 8001014:	03c9      	lsls	r1, r1, #15
 8001016:	430a      	orrs	r2, r1
 8001018:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	2380      	movs	r3, #128	@ 0x80
 8001020:	025b      	lsls	r3, r3, #9
 8001022:	4013      	ands	r3, r2
 8001024:	d037      	beq.n	8001096 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8001026:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <HAL_ADC_ConfigChannel+0x130>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4b20      	ldr	r3, [pc, #128]	@ (80010ac <HAL_ADC_ConfigChannel+0x130>)
 800102c:	2180      	movs	r1, #128	@ 0x80
 800102e:	0449      	lsls	r1, r1, #17
 8001030:	430a      	orrs	r2, r1
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e02f      	b.n	8001096 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	035b      	lsls	r3, r3, #13
 8001042:	0b5b      	lsrs	r3, r3, #13
 8001044:	43d9      	mvns	r1, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	400a      	ands	r2, r1
 800104c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	2380      	movs	r3, #128	@ 0x80
 8001054:	02db      	lsls	r3, r3, #11
 8001056:	4013      	ands	r3, r2
 8001058:	d005      	beq.n	8001066 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_ADC_ConfigChannel+0x130>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <HAL_ADC_ConfigChannel+0x130>)
 8001060:	4913      	ldr	r1, [pc, #76]	@ (80010b0 <HAL_ADC_ConfigChannel+0x134>)
 8001062:	400a      	ands	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	2380      	movs	r3, #128	@ 0x80
 800106c:	029b      	lsls	r3, r3, #10
 800106e:	4013      	ands	r3, r2
 8001070:	d005      	beq.n	800107e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001072:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_ADC_ConfigChannel+0x130>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <HAL_ADC_ConfigChannel+0x130>)
 8001078:	490e      	ldr	r1, [pc, #56]	@ (80010b4 <HAL_ADC_ConfigChannel+0x138>)
 800107a:	400a      	ands	r2, r1
 800107c:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	2380      	movs	r3, #128	@ 0x80
 8001084:	025b      	lsls	r3, r3, #9
 8001086:	4013      	ands	r3, r2
 8001088:	d005      	beq.n	8001096 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <HAL_ADC_ConfigChannel+0x130>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <HAL_ADC_ConfigChannel+0x130>)
 8001090:	4909      	ldr	r1, [pc, #36]	@ (80010b8 <HAL_ADC_ConfigChannel+0x13c>)
 8001092:	400a      	ands	r2, r1
 8001094:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2250      	movs	r2, #80	@ 0x50
 800109a:	2100      	movs	r1, #0
 800109c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	00001001 	.word	0x00001001
 80010ac:	40012708 	.word	0x40012708
 80010b0:	ff7fffff 	.word	0xff7fffff
 80010b4:	ffbfffff 	.word	0xffbfffff
 80010b8:	feffffff 	.word	0xfeffffff

080010bc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2203      	movs	r2, #3
 80010d0:	4013      	ands	r3, r2
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d108      	bne.n	80010e8 <ADC_Enable+0x2c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2201      	movs	r2, #1
 80010de:	4013      	ands	r3, r2
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d101      	bne.n	80010e8 <ADC_Enable+0x2c>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <ADC_Enable+0x2e>
 80010e8:	2300      	movs	r3, #0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d146      	bne.n	800117c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <ADC_Enable+0xcc>)
 80010f6:	4013      	ands	r3, r2
 80010f8:	d00d      	beq.n	8001116 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010fe:	2210      	movs	r2, #16
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110a:	2201      	movs	r2, #1
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e033      	b.n	800117e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2101      	movs	r1, #1
 8001122:	430a      	orrs	r2, r1
 8001124:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001126:	2001      	movs	r0, #1
 8001128:	f000 f8b4 	bl	8001294 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800112c:	f7ff fc3c 	bl	80009a8 <HAL_GetTick>
 8001130:	0003      	movs	r3, r0
 8001132:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001134:	e01b      	b.n	800116e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001136:	f7ff fc37 	bl	80009a8 <HAL_GetTick>
 800113a:	0002      	movs	r2, r0
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b0a      	cmp	r3, #10
 8001142:	d914      	bls.n	800116e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2201      	movs	r2, #1
 800114c:	4013      	ands	r3, r2
 800114e:	2b01      	cmp	r3, #1
 8001150:	d00d      	beq.n	800116e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001156:	2210      	movs	r2, #16
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001162:	2201      	movs	r2, #1
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e007      	b.n	800117e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2201      	movs	r2, #1
 8001176:	4013      	ands	r3, r2
 8001178:	2b01      	cmp	r3, #1
 800117a:	d1dc      	bne.n	8001136 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b004      	add	sp, #16
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	80000017 	.word	0x80000017

0800118c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001198:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800119e:	2250      	movs	r2, #80	@ 0x50
 80011a0:	4013      	ands	r3, r2
 80011a2:	d141      	bne.n	8001228 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011a8:	2280      	movs	r2, #128	@ 0x80
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	431a      	orrs	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	23c0      	movs	r3, #192	@ 0xc0
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	4013      	ands	r3, r2
 80011be:	d12e      	bne.n	800121e <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2220      	movs	r2, #32
 80011c4:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d129      	bne.n	800121e <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2208      	movs	r2, #8
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d122      	bne.n	800121e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2204      	movs	r2, #4
 80011e0:	4013      	ands	r3, r2
 80011e2:	d110      	bne.n	8001206 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	210c      	movs	r1, #12
 80011f0:	438a      	bics	r2, r1
 80011f2:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011f8:	4a10      	ldr	r2, [pc, #64]	@ (800123c <ADC_DMAConvCplt+0xb0>)
 80011fa:	4013      	ands	r3, r2
 80011fc:	2201      	movs	r2, #1
 80011fe:	431a      	orrs	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	655a      	str	r2, [r3, #84]	@ 0x54
 8001204:	e00b      	b.n	800121e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800120a:	2220      	movs	r2, #32
 800120c:	431a      	orrs	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001216:	2201      	movs	r2, #1
 8001218:	431a      	orrs	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	0018      	movs	r0, r3
 8001222:	f7fe fffd 	bl	8000220 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001226:	e005      	b.n	8001234 <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	0010      	movs	r0, r2
 8001232:	4798      	blx	r3
}
 8001234:	46c0      	nop			@ (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	b004      	add	sp, #16
 800123a:	bd80      	pop	{r7, pc}
 800123c:	fffffefe 	.word	0xfffffefe

08001240 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff fe7b 	bl	8000f4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bd80      	pop	{r7, pc}

0800125e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001270:	2240      	movs	r2, #64	@ 0x40
 8001272:	431a      	orrs	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127c:	2204      	movs	r2, #4
 800127e:	431a      	orrs	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff fe70 	bl	8000f6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800128c:	46c0      	nop			@ (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b004      	add	sp, #16
 8001292:	bd80      	pop	{r7, pc}

08001294 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <ADC_DelayMicroSecond+0x38>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	490b      	ldr	r1, [pc, #44]	@ (80012d0 <ADC_DelayMicroSecond+0x3c>)
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7fe ff30 	bl	8000108 <__udivsi3>
 80012a8:	0003      	movs	r3, r0
 80012aa:	001a      	movs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4353      	muls	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80012b2:	e002      	b.n	80012ba <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f9      	bne.n	80012b4 <ADC_DelayMicroSecond+0x20>
  }
}
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b004      	add	sp, #16
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	20000000 	.word	0x20000000
 80012d0:	000f4240 	.word	0x000f4240

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	0002      	movs	r2, r0
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	1dfb      	adds	r3, r7, #7
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80012e6:	d809      	bhi.n	80012fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e8:	1dfb      	adds	r3, r7, #7
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	001a      	movs	r2, r3
 80012ee:	231f      	movs	r3, #31
 80012f0:	401a      	ands	r2, r3
 80012f2:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <__NVIC_EnableIRQ+0x30>)
 80012f4:	2101      	movs	r1, #1
 80012f6:	4091      	lsls	r1, r2
 80012f8:	000a      	movs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
  }
}
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b002      	add	sp, #8
 8001302:	bd80      	pop	{r7, pc}
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	0002      	movs	r2, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	1dfb      	adds	r3, r7, #7
 8001314:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b7f      	cmp	r3, #127	@ 0x7f
 800131c:	d828      	bhi.n	8001370 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800131e:	4a2f      	ldr	r2, [pc, #188]	@ (80013dc <__NVIC_SetPriority+0xd4>)
 8001320:	1dfb      	adds	r3, r7, #7
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b25b      	sxtb	r3, r3
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	33c0      	adds	r3, #192	@ 0xc0
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	589b      	ldr	r3, [r3, r2]
 800132e:	1dfa      	adds	r2, r7, #7
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	0011      	movs	r1, r2
 8001334:	2203      	movs	r2, #3
 8001336:	400a      	ands	r2, r1
 8001338:	00d2      	lsls	r2, r2, #3
 800133a:	21ff      	movs	r1, #255	@ 0xff
 800133c:	4091      	lsls	r1, r2
 800133e:	000a      	movs	r2, r1
 8001340:	43d2      	mvns	r2, r2
 8001342:	401a      	ands	r2, r3
 8001344:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	019b      	lsls	r3, r3, #6
 800134a:	22ff      	movs	r2, #255	@ 0xff
 800134c:	401a      	ands	r2, r3
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	0018      	movs	r0, r3
 8001354:	2303      	movs	r3, #3
 8001356:	4003      	ands	r3, r0
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135c:	481f      	ldr	r0, [pc, #124]	@ (80013dc <__NVIC_SetPriority+0xd4>)
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b25b      	sxtb	r3, r3
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	430a      	orrs	r2, r1
 8001368:	33c0      	adds	r3, #192	@ 0xc0
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800136e:	e031      	b.n	80013d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001370:	4a1b      	ldr	r2, [pc, #108]	@ (80013e0 <__NVIC_SetPriority+0xd8>)
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	0019      	movs	r1, r3
 8001378:	230f      	movs	r3, #15
 800137a:	400b      	ands	r3, r1
 800137c:	3b08      	subs	r3, #8
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3306      	adds	r3, #6
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	18d3      	adds	r3, r2, r3
 8001386:	3304      	adds	r3, #4
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	1dfa      	adds	r2, r7, #7
 800138c:	7812      	ldrb	r2, [r2, #0]
 800138e:	0011      	movs	r1, r2
 8001390:	2203      	movs	r2, #3
 8001392:	400a      	ands	r2, r1
 8001394:	00d2      	lsls	r2, r2, #3
 8001396:	21ff      	movs	r1, #255	@ 0xff
 8001398:	4091      	lsls	r1, r2
 800139a:	000a      	movs	r2, r1
 800139c:	43d2      	mvns	r2, r2
 800139e:	401a      	ands	r2, r3
 80013a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	019b      	lsls	r3, r3, #6
 80013a6:	22ff      	movs	r2, #255	@ 0xff
 80013a8:	401a      	ands	r2, r3
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	0018      	movs	r0, r3
 80013b0:	2303      	movs	r3, #3
 80013b2:	4003      	ands	r3, r0
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b8:	4809      	ldr	r0, [pc, #36]	@ (80013e0 <__NVIC_SetPriority+0xd8>)
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	001c      	movs	r4, r3
 80013c0:	230f      	movs	r3, #15
 80013c2:	4023      	ands	r3, r4
 80013c4:	3b08      	subs	r3, #8
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	430a      	orrs	r2, r1
 80013ca:	3306      	adds	r3, #6
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	18c3      	adds	r3, r0, r3
 80013d0:	3304      	adds	r3, #4
 80013d2:	601a      	str	r2, [r3, #0]
}
 80013d4:	46c0      	nop			@ (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b003      	add	sp, #12
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	1e5a      	subs	r2, r3, #1
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	045b      	lsls	r3, r3, #17
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d301      	bcc.n	80013fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f8:	2301      	movs	r3, #1
 80013fa:	e010      	b.n	800141e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001428 <SysTick_Config+0x44>)
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	3a01      	subs	r2, #1
 8001402:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001404:	2301      	movs	r3, #1
 8001406:	425b      	negs	r3, r3
 8001408:	2103      	movs	r1, #3
 800140a:	0018      	movs	r0, r3
 800140c:	f7ff ff7c 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <SysTick_Config+0x44>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <SysTick_Config+0x44>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	0018      	movs	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	210f      	movs	r1, #15
 8001438:	187b      	adds	r3, r7, r1
 800143a:	1c02      	adds	r2, r0, #0
 800143c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	187b      	adds	r3, r7, r1
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b25b      	sxtb	r3, r3
 8001446:	0011      	movs	r1, r2
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff ff5d 	bl	8001308 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800144e:	46c0      	nop			@ (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b004      	add	sp, #16
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	0002      	movs	r2, r0
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b25b      	sxtb	r3, r3
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff ff33 	bl	80012d4 <__NVIC_EnableIRQ>
}
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b002      	add	sp, #8
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff ffaf 	bl	80013e4 <SysTick_Config>
 8001486:	0003      	movs	r3, r0
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	b002      	add	sp, #8
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e061      	b.n	8001566 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a32      	ldr	r2, [pc, #200]	@ (8001570 <HAL_DMA_Init+0xe0>)
 80014a8:	4694      	mov	ip, r2
 80014aa:	4463      	add	r3, ip
 80014ac:	2114      	movs	r1, #20
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7fe fe2a 	bl	8000108 <__udivsi3>
 80014b4:	0003      	movs	r3, r0
 80014b6:	009a      	lsls	r2, r3, #2
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a2d      	ldr	r2, [pc, #180]	@ (8001574 <HAL_DMA_Init+0xe4>)
 80014c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2225      	movs	r2, #37	@ 0x25
 80014c6:	2102      	movs	r1, #2
 80014c8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4a28      	ldr	r2, [pc, #160]	@ (8001578 <HAL_DMA_Init+0xe8>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	2380      	movs	r3, #128	@ 0x80
 8001516:	01db      	lsls	r3, r3, #7
 8001518:	429a      	cmp	r2, r3
 800151a:	d018      	beq.n	800154e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <HAL_DMA_Init+0xec>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001524:	211c      	movs	r1, #28
 8001526:	400b      	ands	r3, r1
 8001528:	210f      	movs	r1, #15
 800152a:	4099      	lsls	r1, r3
 800152c:	000b      	movs	r3, r1
 800152e:	43d9      	mvns	r1, r3
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <HAL_DMA_Init+0xec>)
 8001532:	400a      	ands	r2, r1
 8001534:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <HAL_DMA_Init+0xec>)
 8001538:	6819      	ldr	r1, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001542:	201c      	movs	r0, #28
 8001544:	4003      	ands	r3, r0
 8001546:	409a      	lsls	r2, r3
 8001548:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <HAL_DMA_Init+0xec>)
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2225      	movs	r2, #37	@ 0x25
 8001558:	2101      	movs	r1, #1
 800155a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2224      	movs	r2, #36	@ 0x24
 8001560:	2100      	movs	r1, #0
 8001562:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	0018      	movs	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	bffdfff8 	.word	0xbffdfff8
 8001574:	40020000 	.word	0x40020000
 8001578:	ffff800f 	.word	0xffff800f
 800157c:	400200a8 	.word	0x400200a8

08001580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800158e:	2317      	movs	r3, #23
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2224      	movs	r2, #36	@ 0x24
 800159a:	5c9b      	ldrb	r3, [r3, r2]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_DMA_Start_IT+0x24>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e04f      	b.n	8001644 <HAL_DMA_Start_IT+0xc4>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2224      	movs	r2, #36	@ 0x24
 80015a8:	2101      	movs	r1, #1
 80015aa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2225      	movs	r2, #37	@ 0x25
 80015b0:	5c9b      	ldrb	r3, [r3, r2]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d13a      	bne.n	800162e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2225      	movs	r2, #37	@ 0x25
 80015bc:	2102      	movs	r1, #2
 80015be:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2101      	movs	r1, #1
 80015d2:	438a      	bics	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f8e3 	bl	80017a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d008      	beq.n	80015fc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	210e      	movs	r1, #14
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e00f      	b.n	800161c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2104      	movs	r1, #4
 8001608:	438a      	bics	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	210a      	movs	r1, #10
 8001618:	430a      	orrs	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2101      	movs	r1, #1
 8001628:	430a      	orrs	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	e007      	b.n	800163e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2224      	movs	r2, #36	@ 0x24
 8001632:	2100      	movs	r1, #0
 8001634:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001636:	2317      	movs	r3, #23
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	2202      	movs	r2, #2
 800163c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800163e:	2317      	movs	r3, #23
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	781b      	ldrb	r3, [r3, #0]
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b006      	add	sp, #24
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001668:	221c      	movs	r2, #28
 800166a:	4013      	ands	r3, r2
 800166c:	2204      	movs	r2, #4
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	d026      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x7a>
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2204      	movs	r2, #4
 800167c:	4013      	ands	r3, r2
 800167e:	d022      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2220      	movs	r2, #32
 8001688:	4013      	ands	r3, r2
 800168a:	d107      	bne.n	800169c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2104      	movs	r1, #4
 8001698:	438a      	bics	r2, r1
 800169a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a0:	221c      	movs	r2, #28
 80016a2:	401a      	ands	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	2104      	movs	r1, #4
 80016aa:	4091      	lsls	r1, r2
 80016ac:	000a      	movs	r2, r1
 80016ae:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d100      	bne.n	80016ba <HAL_DMA_IRQHandler+0x6e>
 80016b8:	e071      	b.n	800179e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	0010      	movs	r0, r2
 80016c2:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80016c4:	e06b      	b.n	800179e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ca:	221c      	movs	r2, #28
 80016cc:	4013      	ands	r3, r2
 80016ce:	2202      	movs	r2, #2
 80016d0:	409a      	lsls	r2, r3
 80016d2:	0013      	movs	r3, r2
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4013      	ands	r3, r2
 80016d8:	d02d      	beq.n	8001736 <HAL_DMA_IRQHandler+0xea>
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2202      	movs	r2, #2
 80016de:	4013      	ands	r3, r2
 80016e0:	d029      	beq.n	8001736 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2220      	movs	r2, #32
 80016ea:	4013      	ands	r3, r2
 80016ec:	d10b      	bne.n	8001706 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	210a      	movs	r1, #10
 80016fa:	438a      	bics	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2225      	movs	r2, #37	@ 0x25
 8001702:	2101      	movs	r1, #1
 8001704:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	221c      	movs	r2, #28
 800170c:	401a      	ands	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	2102      	movs	r1, #2
 8001714:	4091      	lsls	r1, r2
 8001716:	000a      	movs	r2, r1
 8001718:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2224      	movs	r2, #36	@ 0x24
 800171e:	2100      	movs	r1, #0
 8001720:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001726:	2b00      	cmp	r3, #0
 8001728:	d039      	beq.n	800179e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	0010      	movs	r0, r2
 8001732:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001734:	e033      	b.n	800179e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173a:	221c      	movs	r2, #28
 800173c:	4013      	ands	r3, r2
 800173e:	2208      	movs	r2, #8
 8001740:	409a      	lsls	r2, r3
 8001742:	0013      	movs	r3, r2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4013      	ands	r3, r2
 8001748:	d02a      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x154>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2208      	movs	r2, #8
 800174e:	4013      	ands	r3, r2
 8001750:	d026      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	210e      	movs	r1, #14
 800175e:	438a      	bics	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	221c      	movs	r2, #28
 8001768:	401a      	ands	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	2101      	movs	r1, #1
 8001770:	4091      	lsls	r1, r2
 8001772:	000a      	movs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2225      	movs	r2, #37	@ 0x25
 8001780:	2101      	movs	r1, #1
 8001782:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2224      	movs	r2, #36	@ 0x24
 8001788:	2100      	movs	r1, #0
 800178a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	0010      	movs	r0, r2
 800179c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	46c0      	nop			@ (mov r8, r8)
}
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b004      	add	sp, #16
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	221c      	movs	r2, #28
 80017bc:	401a      	ands	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	2101      	movs	r1, #1
 80017c4:	4091      	lsls	r1, r2
 80017c6:	000a      	movs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b10      	cmp	r3, #16
 80017d8:	d108      	bne.n	80017ec <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017ea:	e007      	b.n	80017fc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	60da      	str	r2, [r3, #12]
}
 80017fc:	46c0      	nop			@ (mov r8, r8)
 80017fe:	46bd      	mov	sp, r7
 8001800:	b004      	add	sp, #16
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800181a:	e14f      	b.n	8001abc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2101      	movs	r1, #1
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	4091      	lsls	r1, r2
 8001826:	000a      	movs	r2, r1
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d100      	bne.n	8001834 <HAL_GPIO_Init+0x30>
 8001832:	e140      	b.n	8001ab6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2203      	movs	r2, #3
 800183a:	4013      	ands	r3, r2
 800183c:	2b01      	cmp	r3, #1
 800183e:	d005      	beq.n	800184c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2203      	movs	r2, #3
 8001846:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001848:	2b02      	cmp	r3, #2
 800184a:	d130      	bne.n	80018ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	43da      	mvns	r2, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4013      	ands	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	409a      	lsls	r2, r3
 800186e:	0013      	movs	r3, r2
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001882:	2201      	movs	r2, #1
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
 8001888:	0013      	movs	r3, r2
 800188a:	43da      	mvns	r2, r3
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	2201      	movs	r2, #1
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
 80018a0:	0013      	movs	r3, r2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2203      	movs	r2, #3
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d017      	beq.n	80018ea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	409a      	lsls	r2, r3
 80018c8:	0013      	movs	r3, r2
 80018ca:	43da      	mvns	r2, r3
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	409a      	lsls	r2, r3
 80018dc:	0013      	movs	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2203      	movs	r2, #3
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d123      	bne.n	800193e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	08da      	lsrs	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3208      	adds	r2, #8
 80018fe:	0092      	lsls	r2, r2, #2
 8001900:	58d3      	ldr	r3, [r2, r3]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	2207      	movs	r2, #7
 8001908:	4013      	ands	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	409a      	lsls	r2, r3
 8001910:	0013      	movs	r3, r2
 8001912:	43da      	mvns	r2, r3
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2107      	movs	r1, #7
 8001922:	400b      	ands	r3, r1
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	409a      	lsls	r2, r3
 8001928:	0013      	movs	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	0092      	lsls	r2, r2, #2
 800193a:	6939      	ldr	r1, [r7, #16]
 800193c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	409a      	lsls	r2, r3
 800194c:	0013      	movs	r3, r2
 800194e:	43da      	mvns	r2, r3
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2203      	movs	r2, #3
 800195c:	401a      	ands	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	409a      	lsls	r2, r3
 8001964:	0013      	movs	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	23c0      	movs	r3, #192	@ 0xc0
 8001978:	029b      	lsls	r3, r3, #10
 800197a:	4013      	ands	r3, r2
 800197c:	d100      	bne.n	8001980 <HAL_GPIO_Init+0x17c>
 800197e:	e09a      	b.n	8001ab6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001980:	4b54      	ldr	r3, [pc, #336]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001984:	4b53      	ldr	r3, [pc, #332]	@ (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001986:	2101      	movs	r1, #1
 8001988:	430a      	orrs	r2, r1
 800198a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800198c:	4a52      	ldr	r2, [pc, #328]	@ (8001ad8 <HAL_GPIO_Init+0x2d4>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	589b      	ldr	r3, [r3, r2]
 8001998:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2203      	movs	r2, #3
 800199e:	4013      	ands	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	409a      	lsls	r2, r3
 80019a6:	0013      	movs	r3, r2
 80019a8:	43da      	mvns	r2, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	23a0      	movs	r3, #160	@ 0xa0
 80019b4:	05db      	lsls	r3, r3, #23
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d019      	beq.n	80019ee <HAL_GPIO_Init+0x1ea>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a47      	ldr	r2, [pc, #284]	@ (8001adc <HAL_GPIO_Init+0x2d8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d013      	beq.n	80019ea <HAL_GPIO_Init+0x1e6>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a46      	ldr	r2, [pc, #280]	@ (8001ae0 <HAL_GPIO_Init+0x2dc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d00d      	beq.n	80019e6 <HAL_GPIO_Init+0x1e2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a45      	ldr	r2, [pc, #276]	@ (8001ae4 <HAL_GPIO_Init+0x2e0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x1de>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a44      	ldr	r2, [pc, #272]	@ (8001ae8 <HAL_GPIO_Init+0x2e4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_GPIO_Init+0x1da>
 80019da:	2305      	movs	r3, #5
 80019dc:	e008      	b.n	80019f0 <HAL_GPIO_Init+0x1ec>
 80019de:	2306      	movs	r3, #6
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x1ec>
 80019e2:	2303      	movs	r3, #3
 80019e4:	e004      	b.n	80019f0 <HAL_GPIO_Init+0x1ec>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_Init+0x1ec>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x1ec>
 80019ee:	2300      	movs	r3, #0
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	2103      	movs	r1, #3
 80019f4:	400a      	ands	r2, r1
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a00:	4935      	ldr	r1, [pc, #212]	@ (8001ad8 <HAL_GPIO_Init+0x2d4>)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a0e:	4b37      	ldr	r3, [pc, #220]	@ (8001aec <HAL_GPIO_Init+0x2e8>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43da      	mvns	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	035b      	lsls	r3, r3, #13
 8001a26:	4013      	ands	r3, r2
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a32:	4b2e      	ldr	r3, [pc, #184]	@ (8001aec <HAL_GPIO_Init+0x2e8>)
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a38:	4b2c      	ldr	r3, [pc, #176]	@ (8001aec <HAL_GPIO_Init+0x2e8>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43da      	mvns	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	2380      	movs	r3, #128	@ 0x80
 8001a4e:	039b      	lsls	r3, r3, #14
 8001a50:	4013      	ands	r3, r2
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a5c:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <HAL_GPIO_Init+0x2e8>)
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001a62:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <HAL_GPIO_Init+0x2e8>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	2380      	movs	r3, #128	@ 0x80
 8001a78:	029b      	lsls	r3, r3, #10
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <HAL_GPIO_Init+0x2e8>)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8c:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <HAL_GPIO_Init+0x2e8>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43da      	mvns	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	2380      	movs	r3, #128	@ 0x80
 8001aa2:	025b      	lsls	r3, r3, #9
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_GPIO_Init+0x2e8>)
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	40da      	lsrs	r2, r3
 8001ac4:	1e13      	subs	r3, r2, #0
 8001ac6:	d000      	beq.n	8001aca <HAL_GPIO_Init+0x2c6>
 8001ac8:	e6a8      	b.n	800181c <HAL_GPIO_Init+0x18>
  }
}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	46c0      	nop			@ (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b006      	add	sp, #24
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	50000400 	.word	0x50000400
 8001ae0:	50000800 	.word	0x50000800
 8001ae4:	50000c00 	.word	0x50000c00
 8001ae8:	50001c00 	.word	0x50001c00
 8001aec:	40010400 	.word	0x40010400

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b08a      	sub	sp, #40	@ 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	f000 fbaf 	bl	8002262 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b04:	4bcf      	ldr	r3, [pc, #828]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	220c      	movs	r2, #12
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0e:	4bcd      	ldr	r3, [pc, #820]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	025b      	lsls	r3, r3, #9
 8001b16:	4013      	ands	r3, r2
 8001b18:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4013      	ands	r3, r2
 8001b22:	d100      	bne.n	8001b26 <HAL_RCC_OscConfig+0x36>
 8001b24:	e07e      	b.n	8001c24 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d007      	beq.n	8001b3c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d112      	bne.n	8001b58 <HAL_RCC_OscConfig+0x68>
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	2380      	movs	r3, #128	@ 0x80
 8001b36:	025b      	lsls	r3, r3, #9
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d10d      	bne.n	8001b58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3c:	4bc1      	ldr	r3, [pc, #772]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	@ 0x80
 8001b42:	029b      	lsls	r3, r3, #10
 8001b44:	4013      	ands	r3, r2
 8001b46:	d100      	bne.n	8001b4a <HAL_RCC_OscConfig+0x5a>
 8001b48:	e06b      	b.n	8001c22 <HAL_RCC_OscConfig+0x132>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d167      	bne.n	8001c22 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	f000 fb85 	bl	8002262 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	2380      	movs	r3, #128	@ 0x80
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_OscConfig+0x84>
 8001b64:	4bb7      	ldr	r3, [pc, #732]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4bb6      	ldr	r3, [pc, #728]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001b6a:	2180      	movs	r1, #128	@ 0x80
 8001b6c:	0249      	lsls	r1, r1, #9
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e027      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	23a0      	movs	r3, #160	@ 0xa0
 8001b7a:	02db      	lsls	r3, r3, #11
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d10e      	bne.n	8001b9e <HAL_RCC_OscConfig+0xae>
 8001b80:	4bb0      	ldr	r3, [pc, #704]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4baf      	ldr	r3, [pc, #700]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001b86:	2180      	movs	r1, #128	@ 0x80
 8001b88:	02c9      	lsls	r1, r1, #11
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	4bad      	ldr	r3, [pc, #692]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4bac      	ldr	r3, [pc, #688]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001b94:	2180      	movs	r1, #128	@ 0x80
 8001b96:	0249      	lsls	r1, r1, #9
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e012      	b.n	8001bc4 <HAL_RCC_OscConfig+0xd4>
 8001b9e:	4ba9      	ldr	r3, [pc, #676]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4ba8      	ldr	r3, [pc, #672]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001ba4:	49a8      	ldr	r1, [pc, #672]	@ (8001e48 <HAL_RCC_OscConfig+0x358>)
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	4ba6      	ldr	r3, [pc, #664]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	2380      	movs	r3, #128	@ 0x80
 8001bb0:	025b      	lsls	r3, r3, #9
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4ba2      	ldr	r3, [pc, #648]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4ba1      	ldr	r3, [pc, #644]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001bbe:	49a3      	ldr	r1, [pc, #652]	@ (8001e4c <HAL_RCC_OscConfig+0x35c>)
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d015      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7fe feec 	bl	80009a8 <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bd4:	e009      	b.n	8001bea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd6:	f7fe fee7 	bl	80009a8 <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b64      	cmp	r3, #100	@ 0x64
 8001be2:	d902      	bls.n	8001bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	f000 fb3c 	bl	8002262 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bea:	4b96      	ldr	r3, [pc, #600]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	2380      	movs	r3, #128	@ 0x80
 8001bf0:	029b      	lsls	r3, r3, #10
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d0ef      	beq.n	8001bd6 <HAL_RCC_OscConfig+0xe6>
 8001bf6:	e015      	b.n	8001c24 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7fe fed6 	bl	80009a8 <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c02:	f7fe fed1 	bl	80009a8 <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b64      	cmp	r3, #100	@ 0x64
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e326      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c14:	4b8b      	ldr	r3, [pc, #556]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	029b      	lsls	r3, r3, #10
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x112>
 8001c20:	e000      	b.n	8001c24 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c22:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d100      	bne.n	8001c30 <HAL_RCC_OscConfig+0x140>
 8001c2e:	e08b      	b.n	8001d48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c3c:	6a3b      	ldr	r3, [r7, #32]
 8001c3e:	2b0c      	cmp	r3, #12
 8001c40:	d13e      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1d0>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d13b      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001c48:	4b7e      	ldr	r3, [pc, #504]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_RCC_OscConfig+0x16c>
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e302      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	4b79      	ldr	r3, [pc, #484]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4a7b      	ldr	r2, [pc, #492]	@ (8001e50 <HAL_RCC_OscConfig+0x360>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	021a      	lsls	r2, r3, #8
 8001c6c:	4b75      	ldr	r3, [pc, #468]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c72:	4b74      	ldr	r3, [pc, #464]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2209      	movs	r2, #9
 8001c78:	4393      	bics	r3, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	4b71      	ldr	r3, [pc, #452]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c84:	f000 fc40 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8001c88:	0001      	movs	r1, r0
 8001c8a:	4b6e      	ldr	r3, [pc, #440]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	220f      	movs	r2, #15
 8001c92:	4013      	ands	r3, r2
 8001c94:	4a6f      	ldr	r2, [pc, #444]	@ (8001e54 <HAL_RCC_OscConfig+0x364>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	000a      	movs	r2, r1
 8001c9a:	40da      	lsrs	r2, r3
 8001c9c:	4b6e      	ldr	r3, [pc, #440]	@ (8001e58 <HAL_RCC_OscConfig+0x368>)
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001ca0:	4b6e      	ldr	r3, [pc, #440]	@ (8001e5c <HAL_RCC_OscConfig+0x36c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2513      	movs	r5, #19
 8001ca6:	197c      	adds	r4, r7, r5
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7fe fe37 	bl	800091c <HAL_InitTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001cb2:	197b      	adds	r3, r7, r5
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d046      	beq.n	8001d48 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001cba:	197b      	adds	r3, r7, r5
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	e2d0      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d027      	beq.n	8001d16 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2209      	movs	r2, #9
 8001ccc:	4393      	bics	r3, r2
 8001cce:	0019      	movs	r1, r3
 8001cd0:	4b5c      	ldr	r3, [pc, #368]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7fe fe66 	bl	80009a8 <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7fe fe61 	bl	80009a8 <HAL_GetTick>
 8001ce6:	0002      	movs	r2, r0
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e2b6      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cf4:	4b53      	ldr	r3, [pc, #332]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d0f1      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfe:	4b51      	ldr	r3, [pc, #324]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	4a53      	ldr	r2, [pc, #332]	@ (8001e50 <HAL_RCC_OscConfig+0x360>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	0019      	movs	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	021a      	lsls	r2, r3, #8
 8001d0e:	4b4d      	ldr	r3, [pc, #308]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001d10:	430a      	orrs	r2, r1
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	e018      	b.n	8001d48 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d16:	4b4b      	ldr	r3, [pc, #300]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	438a      	bics	r2, r1
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7fe fe41 	bl	80009a8 <HAL_GetTick>
 8001d26:	0003      	movs	r3, r0
 8001d28:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d2c:	f7fe fe3c 	bl	80009a8 <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e291      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d3e:	4b41      	ldr	r3, [pc, #260]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2204      	movs	r2, #4
 8001d44:	4013      	ands	r3, r2
 8001d46:	d1f1      	bne.n	8001d2c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d100      	bne.n	8001d54 <HAL_RCC_OscConfig+0x264>
 8001d52:	e0a1      	b.n	8001e98 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d140      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d005      	beq.n	8001d72 <HAL_RCC_OscConfig+0x282>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e277      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d72:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4a3a      	ldr	r2, [pc, #232]	@ (8001e60 <HAL_RCC_OscConfig+0x370>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d80:	4b30      	ldr	r3, [pc, #192]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001d82:	430a      	orrs	r2, r1
 8001d84:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d86:	4b2f      	ldr	r3, [pc, #188]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	0a19      	lsrs	r1, r3, #8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	061a      	lsls	r2, r3, #24
 8001d94:	4b2b      	ldr	r3, [pc, #172]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001d96:	430a      	orrs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	0b5b      	lsrs	r3, r3, #13
 8001da0:	3301      	adds	r3, #1
 8001da2:	2280      	movs	r2, #128	@ 0x80
 8001da4:	0212      	lsls	r2, r2, #8
 8001da6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001da8:	4b26      	ldr	r3, [pc, #152]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	210f      	movs	r1, #15
 8001db0:	400b      	ands	r3, r1
 8001db2:	4928      	ldr	r1, [pc, #160]	@ (8001e54 <HAL_RCC_OscConfig+0x364>)
 8001db4:	5ccb      	ldrb	r3, [r1, r3]
 8001db6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001db8:	4b27      	ldr	r3, [pc, #156]	@ (8001e58 <HAL_RCC_OscConfig+0x368>)
 8001dba:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <HAL_RCC_OscConfig+0x36c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2513      	movs	r5, #19
 8001dc2:	197c      	adds	r4, r7, r5
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7fe fda9 	bl	800091c <HAL_InitTick>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001dce:	197b      	adds	r3, r7, r5
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d060      	beq.n	8001e98 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001dd6:	197b      	adds	r3, r7, r5
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	e242      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d03f      	beq.n	8001e64 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001de4:	4b17      	ldr	r3, [pc, #92]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b16      	ldr	r3, [pc, #88]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001dea:	2180      	movs	r1, #128	@ 0x80
 8001dec:	0049      	lsls	r1, r1, #1
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7fe fdd9 	bl	80009a8 <HAL_GetTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dfc:	f7fe fdd4 	bl	80009a8 <HAL_GetTick>
 8001e00:	0002      	movs	r2, r0
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e229      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	2380      	movs	r3, #128	@ 0x80
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4013      	ands	r3, r2
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4a10      	ldr	r2, [pc, #64]	@ (8001e60 <HAL_RCC_OscConfig+0x370>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e2e:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	0a19      	lsrs	r1, r3, #8
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	061a      	lsls	r2, r3, #24
 8001e3c:	4b01      	ldr	r3, [pc, #4]	@ (8001e44 <HAL_RCC_OscConfig+0x354>)
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	e029      	b.n	8001e98 <HAL_RCC_OscConfig+0x3a8>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	fffeffff 	.word	0xfffeffff
 8001e4c:	fffbffff 	.word	0xfffbffff
 8001e50:	ffffe0ff 	.word	0xffffe0ff
 8001e54:	080030c8 	.word	0x080030c8
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e64:	4bbd      	ldr	r3, [pc, #756]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4bbc      	ldr	r3, [pc, #752]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001e6a:	49bd      	ldr	r1, [pc, #756]	@ (8002160 <HAL_RCC_OscConfig+0x670>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7fe fd9a 	bl	80009a8 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e7a:	f7fe fd95 	bl	80009a8 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e1ea      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e8c:	4bb3      	ldr	r3, [pc, #716]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	@ 0x80
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4013      	ands	r3, r2
 8001e96:	d1f0      	bne.n	8001e7a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2208      	movs	r2, #8
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d036      	beq.n	8001f10 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d019      	beq.n	8001ede <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eaa:	4bac      	ldr	r3, [pc, #688]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001eac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001eae:	4bab      	ldr	r3, [pc, #684]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fd77 	bl	80009a8 <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec0:	f7fe fd72 	bl	80009a8 <HAL_GetTick>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1c7      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ed2:	4ba2      	ldr	r3, [pc, #648]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d0f1      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x3d0>
 8001edc:	e018      	b.n	8001f10 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ede:	4b9f      	ldr	r3, [pc, #636]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001ee0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ee2:	4b9e      	ldr	r3, [pc, #632]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	438a      	bics	r2, r1
 8001ee8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7fe fd5d 	bl	80009a8 <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7fe fd58 	bl	80009a8 <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e1ad      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f06:	4b95      	ldr	r3, [pc, #596]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d1f1      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2204      	movs	r2, #4
 8001f16:	4013      	ands	r3, r2
 8001f18:	d100      	bne.n	8001f1c <HAL_RCC_OscConfig+0x42c>
 8001f1a:	e0ae      	b.n	800207a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1c:	2027      	movs	r0, #39	@ 0x27
 8001f1e:	183b      	adds	r3, r7, r0
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f24:	4b8d      	ldr	r3, [pc, #564]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001f26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f28:	2380      	movs	r3, #128	@ 0x80
 8001f2a:	055b      	lsls	r3, r3, #21
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d109      	bne.n	8001f44 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f30:	4b8a      	ldr	r3, [pc, #552]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001f32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f34:	4b89      	ldr	r3, [pc, #548]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001f36:	2180      	movs	r1, #128	@ 0x80
 8001f38:	0549      	lsls	r1, r1, #21
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001f3e:	183b      	adds	r3, r7, r0
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	4b87      	ldr	r3, [pc, #540]	@ (8002164 <HAL_RCC_OscConfig+0x674>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d11a      	bne.n	8001f86 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f50:	4b84      	ldr	r3, [pc, #528]	@ (8002164 <HAL_RCC_OscConfig+0x674>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b83      	ldr	r3, [pc, #524]	@ (8002164 <HAL_RCC_OscConfig+0x674>)
 8001f56:	2180      	movs	r1, #128	@ 0x80
 8001f58:	0049      	lsls	r1, r1, #1
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5e:	f7fe fd23 	bl	80009a8 <HAL_GetTick>
 8001f62:	0003      	movs	r3, r0
 8001f64:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f68:	f7fe fd1e 	bl	80009a8 <HAL_GetTick>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	@ 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e173      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002164 <HAL_RCC_OscConfig+0x674>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	2380      	movs	r3, #128	@ 0x80
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	2380      	movs	r3, #128	@ 0x80
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x4b2>
 8001f92:	4b72      	ldr	r3, [pc, #456]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001f94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f96:	4b71      	ldr	r3, [pc, #452]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001f98:	2180      	movs	r1, #128	@ 0x80
 8001f9a:	0049      	lsls	r1, r1, #1
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fa0:	e031      	b.n	8002006 <HAL_RCC_OscConfig+0x516>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x4d4>
 8001faa:	4b6c      	ldr	r3, [pc, #432]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001fac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fae:	4b6b      	ldr	r3, [pc, #428]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001fb0:	496b      	ldr	r1, [pc, #428]	@ (8002160 <HAL_RCC_OscConfig+0x670>)
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fb6:	4b69      	ldr	r3, [pc, #420]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001fb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fba:	4b68      	ldr	r3, [pc, #416]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001fbc:	496a      	ldr	r1, [pc, #424]	@ (8002168 <HAL_RCC_OscConfig+0x678>)
 8001fbe:	400a      	ands	r2, r1
 8001fc0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fc2:	e020      	b.n	8002006 <HAL_RCC_OscConfig+0x516>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	23a0      	movs	r3, #160	@ 0xa0
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d10e      	bne.n	8001fee <HAL_RCC_OscConfig+0x4fe>
 8001fd0:	4b62      	ldr	r3, [pc, #392]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001fd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fd4:	4b61      	ldr	r3, [pc, #388]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001fd6:	2180      	movs	r1, #128	@ 0x80
 8001fd8:	00c9      	lsls	r1, r1, #3
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fde:	4b5f      	ldr	r3, [pc, #380]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001fe0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001fe2:	4b5e      	ldr	r3, [pc, #376]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	0049      	lsls	r1, r1, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fec:	e00b      	b.n	8002006 <HAL_RCC_OscConfig+0x516>
 8001fee:	4b5b      	ldr	r3, [pc, #364]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001ff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ff2:	4b5a      	ldr	r3, [pc, #360]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001ff4:	495a      	ldr	r1, [pc, #360]	@ (8002160 <HAL_RCC_OscConfig+0x670>)
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ffa:	4b58      	ldr	r3, [pc, #352]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8001ffc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ffe:	4b57      	ldr	r3, [pc, #348]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8002000:	4959      	ldr	r1, [pc, #356]	@ (8002168 <HAL_RCC_OscConfig+0x678>)
 8002002:	400a      	ands	r2, r1
 8002004:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d015      	beq.n	800203a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7fe fccb 	bl	80009a8 <HAL_GetTick>
 8002012:	0003      	movs	r3, r0
 8002014:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002016:	e009      	b.n	800202c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002018:	f7fe fcc6 	bl	80009a8 <HAL_GetTick>
 800201c:	0002      	movs	r2, r0
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	4a52      	ldr	r2, [pc, #328]	@ (800216c <HAL_RCC_OscConfig+0x67c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e11a      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800202c:	4b4b      	ldr	r3, [pc, #300]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 800202e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002030:	2380      	movs	r3, #128	@ 0x80
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d0ef      	beq.n	8002018 <HAL_RCC_OscConfig+0x528>
 8002038:	e014      	b.n	8002064 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7fe fcb5 	bl	80009a8 <HAL_GetTick>
 800203e:	0003      	movs	r3, r0
 8002040:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002042:	e009      	b.n	8002058 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002044:	f7fe fcb0 	bl	80009a8 <HAL_GetTick>
 8002048:	0002      	movs	r2, r0
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	4a47      	ldr	r2, [pc, #284]	@ (800216c <HAL_RCC_OscConfig+0x67c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e104      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002058:	4b40      	ldr	r3, [pc, #256]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 800205a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4013      	ands	r3, r2
 8002062:	d1ef      	bne.n	8002044 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002064:	2327      	movs	r3, #39	@ 0x27
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d105      	bne.n	800207a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206e:	4b3b      	ldr	r3, [pc, #236]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8002070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002072:	4b3a      	ldr	r3, [pc, #232]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8002074:	493e      	ldr	r1, [pc, #248]	@ (8002170 <HAL_RCC_OscConfig+0x680>)
 8002076:	400a      	ands	r2, r1
 8002078:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2220      	movs	r2, #32
 8002080:	4013      	ands	r3, r2
 8002082:	d049      	beq.n	8002118 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d026      	beq.n	80020da <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800208c:	4b33      	ldr	r3, [pc, #204]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	4b32      	ldr	r3, [pc, #200]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8002092:	2101      	movs	r1, #1
 8002094:	430a      	orrs	r2, r1
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	4b30      	ldr	r3, [pc, #192]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 800209a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800209c:	4b2f      	ldr	r3, [pc, #188]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 800209e:	2101      	movs	r1, #1
 80020a0:	430a      	orrs	r2, r1
 80020a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80020a4:	4b33      	ldr	r3, [pc, #204]	@ (8002174 <HAL_RCC_OscConfig+0x684>)
 80020a6:	6a1a      	ldr	r2, [r3, #32]
 80020a8:	4b32      	ldr	r3, [pc, #200]	@ (8002174 <HAL_RCC_OscConfig+0x684>)
 80020aa:	2180      	movs	r1, #128	@ 0x80
 80020ac:	0189      	lsls	r1, r1, #6
 80020ae:	430a      	orrs	r2, r1
 80020b0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7fe fc79 	bl	80009a8 <HAL_GetTick>
 80020b6:	0003      	movs	r3, r0
 80020b8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020bc:	f7fe fc74 	bl	80009a8 <HAL_GetTick>
 80020c0:	0002      	movs	r2, r0
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0c9      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020ce:	4b23      	ldr	r3, [pc, #140]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d0f1      	beq.n	80020bc <HAL_RCC_OscConfig+0x5cc>
 80020d8:	e01e      	b.n	8002118 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80020da:	4b20      	ldr	r3, [pc, #128]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 80020e0:	2101      	movs	r1, #1
 80020e2:	438a      	bics	r2, r1
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <HAL_RCC_OscConfig+0x684>)
 80020e8:	6a1a      	ldr	r2, [r3, #32]
 80020ea:	4b22      	ldr	r3, [pc, #136]	@ (8002174 <HAL_RCC_OscConfig+0x684>)
 80020ec:	4922      	ldr	r1, [pc, #136]	@ (8002178 <HAL_RCC_OscConfig+0x688>)
 80020ee:	400a      	ands	r2, r1
 80020f0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7fe fc59 	bl	80009a8 <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020fc:	f7fe fc54 	bl	80009a8 <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0a9      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800210e:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	d1f1      	bne.n	80020fc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	d100      	bne.n	8002122 <HAL_RCC_OscConfig+0x632>
 8002120:	e09e      	b.n	8002260 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	d100      	bne.n	800212a <HAL_RCC_OscConfig+0x63a>
 8002128:	e077      	b.n	800221a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212e:	2b02      	cmp	r3, #2
 8002130:	d158      	bne.n	80021e4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b09      	ldr	r3, [pc, #36]	@ (800215c <HAL_RCC_OscConfig+0x66c>)
 8002138:	4910      	ldr	r1, [pc, #64]	@ (800217c <HAL_RCC_OscConfig+0x68c>)
 800213a:	400a      	ands	r2, r1
 800213c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7fe fc33 	bl	80009a8 <HAL_GetTick>
 8002142:	0003      	movs	r3, r0
 8002144:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002146:	e01b      	b.n	8002180 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002148:	f7fe fc2e 	bl	80009a8 <HAL_GetTick>
 800214c:	0002      	movs	r2, r0
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d914      	bls.n	8002180 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e083      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	40021000 	.word	0x40021000
 8002160:	fffffeff 	.word	0xfffffeff
 8002164:	40007000 	.word	0x40007000
 8002168:	fffffbff 	.word	0xfffffbff
 800216c:	00001388 	.word	0x00001388
 8002170:	efffffff 	.word	0xefffffff
 8002174:	40010000 	.word	0x40010000
 8002178:	ffffdfff 	.word	0xffffdfff
 800217c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002180:	4b3a      	ldr	r3, [pc, #232]	@ (800226c <HAL_RCC_OscConfig+0x77c>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	@ 0x80
 8002186:	049b      	lsls	r3, r3, #18
 8002188:	4013      	ands	r3, r2
 800218a:	d1dd      	bne.n	8002148 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218c:	4b37      	ldr	r3, [pc, #220]	@ (800226c <HAL_RCC_OscConfig+0x77c>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a37      	ldr	r2, [pc, #220]	@ (8002270 <HAL_RCC_OscConfig+0x780>)
 8002192:	4013      	ands	r3, r2
 8002194:	0019      	movs	r1, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a4:	431a      	orrs	r2, r3
 80021a6:	4b31      	ldr	r3, [pc, #196]	@ (800226c <HAL_RCC_OscConfig+0x77c>)
 80021a8:	430a      	orrs	r2, r1
 80021aa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ac:	4b2f      	ldr	r3, [pc, #188]	@ (800226c <HAL_RCC_OscConfig+0x77c>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b2e      	ldr	r3, [pc, #184]	@ (800226c <HAL_RCC_OscConfig+0x77c>)
 80021b2:	2180      	movs	r1, #128	@ 0x80
 80021b4:	0449      	lsls	r1, r1, #17
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ba:	f7fe fbf5 	bl	80009a8 <HAL_GetTick>
 80021be:	0003      	movs	r3, r0
 80021c0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c4:	f7fe fbf0 	bl	80009a8 <HAL_GetTick>
 80021c8:	0002      	movs	r2, r0
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e045      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80021d6:	4b25      	ldr	r3, [pc, #148]	@ (800226c <HAL_RCC_OscConfig+0x77c>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	@ 0x80
 80021dc:	049b      	lsls	r3, r3, #18
 80021de:	4013      	ands	r3, r2
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0x6d4>
 80021e2:	e03d      	b.n	8002260 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e4:	4b21      	ldr	r3, [pc, #132]	@ (800226c <HAL_RCC_OscConfig+0x77c>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b20      	ldr	r3, [pc, #128]	@ (800226c <HAL_RCC_OscConfig+0x77c>)
 80021ea:	4922      	ldr	r1, [pc, #136]	@ (8002274 <HAL_RCC_OscConfig+0x784>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7fe fbda 	bl	80009a8 <HAL_GetTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fa:	f7fe fbd5 	bl	80009a8 <HAL_GetTick>
 80021fe:	0002      	movs	r2, r0
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e02a      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800220c:	4b17      	ldr	r3, [pc, #92]	@ (800226c <HAL_RCC_OscConfig+0x77c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	@ 0x80
 8002212:	049b      	lsls	r3, r3, #18
 8002214:	4013      	ands	r3, r2
 8002216:	d1f0      	bne.n	80021fa <HAL_RCC_OscConfig+0x70a>
 8002218:	e022      	b.n	8002260 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e01d      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002226:	4b11      	ldr	r3, [pc, #68]	@ (800226c <HAL_RCC_OscConfig+0x77c>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	2380      	movs	r3, #128	@ 0x80
 8002230:	025b      	lsls	r3, r3, #9
 8002232:	401a      	ands	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002238:	429a      	cmp	r2, r3
 800223a:	d10f      	bne.n	800225c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	23f0      	movs	r3, #240	@ 0xf0
 8002240:	039b      	lsls	r3, r3, #14
 8002242:	401a      	ands	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d107      	bne.n	800225c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	23c0      	movs	r3, #192	@ 0xc0
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	401a      	ands	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d001      	beq.n	8002260 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b00a      	add	sp, #40	@ 0x28
 8002268:	bdb0      	pop	{r4, r5, r7, pc}
 800226a:	46c0      	nop			@ (mov r8, r8)
 800226c:	40021000 	.word	0x40021000
 8002270:	ff02ffff 	.word	0xff02ffff
 8002274:	feffffff 	.word	0xfeffffff

08002278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e128      	b.n	80024de <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800228c:	4b96      	ldr	r3, [pc, #600]	@ (80024e8 <HAL_RCC_ClockConfig+0x270>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2201      	movs	r2, #1
 8002292:	4013      	ands	r3, r2
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d91e      	bls.n	80022d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b93      	ldr	r3, [pc, #588]	@ (80024e8 <HAL_RCC_ClockConfig+0x270>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2201      	movs	r2, #1
 80022a0:	4393      	bics	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	4b90      	ldr	r3, [pc, #576]	@ (80024e8 <HAL_RCC_ClockConfig+0x270>)
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fb7c 	bl	80009a8 <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b4:	e009      	b.n	80022ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b6:	f7fe fb77 	bl	80009a8 <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	4a8a      	ldr	r2, [pc, #552]	@ (80024ec <HAL_RCC_ClockConfig+0x274>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e109      	b.n	80024de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b87      	ldr	r3, [pc, #540]	@ (80024e8 <HAL_RCC_ClockConfig+0x270>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2201      	movs	r2, #1
 80022d0:	4013      	ands	r3, r2
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1ee      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2202      	movs	r2, #2
 80022de:	4013      	ands	r3, r2
 80022e0:	d009      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e2:	4b83      	ldr	r3, [pc, #524]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	22f0      	movs	r2, #240	@ 0xf0
 80022e8:	4393      	bics	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4b7f      	ldr	r3, [pc, #508]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2201      	movs	r2, #1
 80022fc:	4013      	ands	r3, r2
 80022fe:	d100      	bne.n	8002302 <HAL_RCC_ClockConfig+0x8a>
 8002300:	e089      	b.n	8002416 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800230a:	4b79      	ldr	r3, [pc, #484]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	@ 0x80
 8002310:	029b      	lsls	r3, r3, #10
 8002312:	4013      	ands	r3, r2
 8002314:	d120      	bne.n	8002358 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0e1      	b.n	80024de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002322:	4b73      	ldr	r3, [pc, #460]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	049b      	lsls	r3, r3, #18
 800232a:	4013      	ands	r3, r2
 800232c:	d114      	bne.n	8002358 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0d5      	b.n	80024de <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d106      	bne.n	8002348 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800233a:	4b6d      	ldr	r3, [pc, #436]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2204      	movs	r2, #4
 8002340:	4013      	ands	r3, r2
 8002342:	d109      	bne.n	8002358 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0ca      	b.n	80024de <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002348:	4b69      	ldr	r3, [pc, #420]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4013      	ands	r3, r2
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0c2      	b.n	80024de <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002358:	4b65      	ldr	r3, [pc, #404]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2203      	movs	r2, #3
 800235e:	4393      	bics	r3, r2
 8002360:	0019      	movs	r1, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4b62      	ldr	r3, [pc, #392]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 8002368:	430a      	orrs	r2, r1
 800236a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800236c:	f7fe fb1c 	bl	80009a8 <HAL_GetTick>
 8002370:	0003      	movs	r3, r0
 8002372:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d111      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800237c:	e009      	b.n	8002392 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237e:	f7fe fb13 	bl	80009a8 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	4a58      	ldr	r2, [pc, #352]	@ (80024ec <HAL_RCC_ClockConfig+0x274>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e0a5      	b.n	80024de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002392:	4b57      	ldr	r3, [pc, #348]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	220c      	movs	r2, #12
 8002398:	4013      	ands	r3, r2
 800239a:	2b08      	cmp	r3, #8
 800239c:	d1ef      	bne.n	800237e <HAL_RCC_ClockConfig+0x106>
 800239e:	e03a      	b.n	8002416 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d111      	bne.n	80023cc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a8:	e009      	b.n	80023be <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023aa:	f7fe fafd 	bl	80009a8 <HAL_GetTick>
 80023ae:	0002      	movs	r2, r0
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	4a4d      	ldr	r2, [pc, #308]	@ (80024ec <HAL_RCC_ClockConfig+0x274>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e08f      	b.n	80024de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023be:	4b4c      	ldr	r3, [pc, #304]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	220c      	movs	r2, #12
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d1ef      	bne.n	80023aa <HAL_RCC_ClockConfig+0x132>
 80023ca:	e024      	b.n	8002416 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d11b      	bne.n	800240c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d4:	e009      	b.n	80023ea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d6:	f7fe fae7 	bl	80009a8 <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	4a42      	ldr	r2, [pc, #264]	@ (80024ec <HAL_RCC_ClockConfig+0x274>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e079      	b.n	80024de <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ea:	4b41      	ldr	r3, [pc, #260]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	220c      	movs	r2, #12
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d1ef      	bne.n	80023d6 <HAL_RCC_ClockConfig+0x15e>
 80023f6:	e00e      	b.n	8002416 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7fe fad6 	bl	80009a8 <HAL_GetTick>
 80023fc:	0002      	movs	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	4a3a      	ldr	r2, [pc, #232]	@ (80024ec <HAL_RCC_ClockConfig+0x274>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e068      	b.n	80024de <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800240c:	4b38      	ldr	r3, [pc, #224]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	220c      	movs	r2, #12
 8002412:	4013      	ands	r3, r2
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002416:	4b34      	ldr	r3, [pc, #208]	@ (80024e8 <HAL_RCC_ClockConfig+0x270>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2201      	movs	r2, #1
 800241c:	4013      	ands	r3, r2
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d21e      	bcs.n	8002462 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002424:	4b30      	ldr	r3, [pc, #192]	@ (80024e8 <HAL_RCC_ClockConfig+0x270>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2201      	movs	r2, #1
 800242a:	4393      	bics	r3, r2
 800242c:	0019      	movs	r1, r3
 800242e:	4b2e      	ldr	r3, [pc, #184]	@ (80024e8 <HAL_RCC_ClockConfig+0x270>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002436:	f7fe fab7 	bl	80009a8 <HAL_GetTick>
 800243a:	0003      	movs	r3, r0
 800243c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	e009      	b.n	8002454 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002440:	f7fe fab2 	bl	80009a8 <HAL_GetTick>
 8002444:	0002      	movs	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	4a28      	ldr	r2, [pc, #160]	@ (80024ec <HAL_RCC_ClockConfig+0x274>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e044      	b.n	80024de <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002454:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <HAL_RCC_ClockConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2201      	movs	r2, #1
 800245a:	4013      	ands	r3, r2
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d1ee      	bne.n	8002440 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2204      	movs	r2, #4
 8002468:	4013      	ands	r3, r2
 800246a:	d009      	beq.n	8002480 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246c:	4b20      	ldr	r3, [pc, #128]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a20      	ldr	r2, [pc, #128]	@ (80024f4 <HAL_RCC_ClockConfig+0x27c>)
 8002472:	4013      	ands	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	4b1d      	ldr	r3, [pc, #116]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 800247c:	430a      	orrs	r2, r1
 800247e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2208      	movs	r2, #8
 8002486:	4013      	ands	r3, r2
 8002488:	d00a      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800248a:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	4a1a      	ldr	r2, [pc, #104]	@ (80024f8 <HAL_RCC_ClockConfig+0x280>)
 8002490:	4013      	ands	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	00da      	lsls	r2, r3, #3
 800249a:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 800249c:	430a      	orrs	r2, r1
 800249e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024a0:	f000 f832 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024a4:	0001      	movs	r1, r0
 80024a6:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <HAL_RCC_ClockConfig+0x278>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	091b      	lsrs	r3, r3, #4
 80024ac:	220f      	movs	r2, #15
 80024ae:	4013      	ands	r3, r2
 80024b0:	4a12      	ldr	r2, [pc, #72]	@ (80024fc <HAL_RCC_ClockConfig+0x284>)
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	000a      	movs	r2, r1
 80024b6:	40da      	lsrs	r2, r3
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_RCC_ClockConfig+0x288>)
 80024ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <HAL_RCC_ClockConfig+0x28c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	250b      	movs	r5, #11
 80024c2:	197c      	adds	r4, r7, r5
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7fe fa29 	bl	800091c <HAL_InitTick>
 80024ca:	0003      	movs	r3, r0
 80024cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80024ce:	197b      	adds	r3, r7, r5
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80024d6:	197b      	adds	r3, r7, r5
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	e000      	b.n	80024de <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b004      	add	sp, #16
 80024e4:	bdb0      	pop	{r4, r5, r7, pc}
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	40022000 	.word	0x40022000
 80024ec:	00001388 	.word	0x00001388
 80024f0:	40021000 	.word	0x40021000
 80024f4:	fffff8ff 	.word	0xfffff8ff
 80024f8:	ffffc7ff 	.word	0xffffc7ff
 80024fc:	080030c8 	.word	0x080030c8
 8002500:	20000000 	.word	0x20000000
 8002504:	20000004 	.word	0x20000004

08002508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800250e:	4b3c      	ldr	r3, [pc, #240]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	220c      	movs	r2, #12
 8002518:	4013      	ands	r3, r2
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d013      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x3e>
 800251e:	d85c      	bhi.n	80025da <HAL_RCC_GetSysClockFreq+0xd2>
 8002520:	2b04      	cmp	r3, #4
 8002522:	d002      	beq.n	800252a <HAL_RCC_GetSysClockFreq+0x22>
 8002524:	2b08      	cmp	r3, #8
 8002526:	d00b      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x38>
 8002528:	e057      	b.n	80025da <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800252a:	4b35      	ldr	r3, [pc, #212]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2210      	movs	r2, #16
 8002530:	4013      	ands	r3, r2
 8002532:	d002      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002534:	4b33      	ldr	r3, [pc, #204]	@ (8002604 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002536:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002538:	e05d      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800253a:	4b33      	ldr	r3, [pc, #204]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x100>)
 800253c:	613b      	str	r3, [r7, #16]
      break;
 800253e:	e05a      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002540:	4b32      	ldr	r3, [pc, #200]	@ (800260c <HAL_RCC_GetSysClockFreq+0x104>)
 8002542:	613b      	str	r3, [r7, #16]
      break;
 8002544:	e057      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	0c9b      	lsrs	r3, r3, #18
 800254a:	220f      	movs	r2, #15
 800254c:	4013      	ands	r3, r2
 800254e:	4a30      	ldr	r2, [pc, #192]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x108>)
 8002550:	5cd3      	ldrb	r3, [r2, r3]
 8002552:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	0d9b      	lsrs	r3, r3, #22
 8002558:	2203      	movs	r2, #3
 800255a:	4013      	ands	r3, r2
 800255c:	3301      	adds	r3, #1
 800255e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002560:	4b27      	ldr	r3, [pc, #156]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	2380      	movs	r3, #128	@ 0x80
 8002566:	025b      	lsls	r3, r3, #9
 8002568:	4013      	ands	r3, r2
 800256a:	d00f      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	000a      	movs	r2, r1
 8002570:	0152      	lsls	r2, r2, #5
 8002572:	1a52      	subs	r2, r2, r1
 8002574:	0193      	lsls	r3, r2, #6
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	185b      	adds	r3, r3, r1
 800257c:	025b      	lsls	r3, r3, #9
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	0018      	movs	r0, r3
 8002582:	f7fd fdc1 	bl	8000108 <__udivsi3>
 8002586:	0003      	movs	r3, r0
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	e023      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800258c:	4b1c      	ldr	r3, [pc, #112]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2210      	movs	r2, #16
 8002592:	4013      	ands	r3, r2
 8002594:	d00f      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	000a      	movs	r2, r1
 800259a:	0152      	lsls	r2, r2, #5
 800259c:	1a52      	subs	r2, r2, r1
 800259e:	0193      	lsls	r3, r2, #6
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	185b      	adds	r3, r3, r1
 80025a6:	021b      	lsls	r3, r3, #8
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	0018      	movs	r0, r3
 80025ac:	f7fd fdac 	bl	8000108 <__udivsi3>
 80025b0:	0003      	movs	r3, r0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	e00e      	b.n	80025d4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	000a      	movs	r2, r1
 80025ba:	0152      	lsls	r2, r2, #5
 80025bc:	1a52      	subs	r2, r2, r1
 80025be:	0193      	lsls	r3, r2, #6
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	185b      	adds	r3, r3, r1
 80025c6:	029b      	lsls	r3, r3, #10
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7fd fd9c 	bl	8000108 <__udivsi3>
 80025d0:	0003      	movs	r3, r0
 80025d2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	613b      	str	r3, [r7, #16]
      break;
 80025d8:	e00d      	b.n	80025f6 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	0b5b      	lsrs	r3, r3, #13
 80025e0:	2207      	movs	r2, #7
 80025e2:	4013      	ands	r3, r2
 80025e4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	3301      	adds	r3, #1
 80025ea:	2280      	movs	r2, #128	@ 0x80
 80025ec:	0212      	lsls	r2, r2, #8
 80025ee:	409a      	lsls	r2, r3
 80025f0:	0013      	movs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
      break;
 80025f4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025f6:	693b      	ldr	r3, [r7, #16]
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b006      	add	sp, #24
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	003d0900 	.word	0x003d0900
 8002608:	00f42400 	.word	0x00f42400
 800260c:	007a1200 	.word	0x007a1200
 8002610:	080030d8 	.word	0x080030d8

08002614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e032      	b.n	800268c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2239      	movs	r2, #57	@ 0x39
 800262a:	5c9b      	ldrb	r3, [r3, r2]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d107      	bne.n	8002642 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2238      	movs	r2, #56	@ 0x38
 8002636:	2100      	movs	r1, #0
 8002638:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	0018      	movs	r0, r3
 800263e:	f7fe f899 	bl	8000774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2239      	movs	r2, #57	@ 0x39
 8002646:	2102      	movs	r1, #2
 8002648:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3304      	adds	r3, #4
 8002652:	0019      	movs	r1, r3
 8002654:	0010      	movs	r0, r2
 8002656:	f000 fa8b 	bl	8002b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	223e      	movs	r2, #62	@ 0x3e
 800265e:	2101      	movs	r1, #1
 8002660:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	223a      	movs	r2, #58	@ 0x3a
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	223b      	movs	r2, #59	@ 0x3b
 800266e:	2101      	movs	r1, #1
 8002670:	5499      	strb	r1, [r3, r2]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	223c      	movs	r2, #60	@ 0x3c
 8002676:	2101      	movs	r1, #1
 8002678:	5499      	strb	r1, [r3, r2]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	223d      	movs	r2, #61	@ 0x3d
 800267e:	2101      	movs	r1, #1
 8002680:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2239      	movs	r2, #57	@ 0x39
 8002686:	2101      	movs	r1, #1
 8002688:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b002      	add	sp, #8
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e032      	b.n	800270c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2239      	movs	r2, #57	@ 0x39
 80026aa:	5c9b      	ldrb	r3, [r3, r2]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2238      	movs	r2, #56	@ 0x38
 80026b6:	2100      	movs	r1, #0
 80026b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 f829 	bl	8002714 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2239      	movs	r2, #57	@ 0x39
 80026c6:	2102      	movs	r1, #2
 80026c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3304      	adds	r3, #4
 80026d2:	0019      	movs	r1, r3
 80026d4:	0010      	movs	r0, r2
 80026d6:	f000 fa4b 	bl	8002b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	223e      	movs	r2, #62	@ 0x3e
 80026de:	2101      	movs	r1, #1
 80026e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	223a      	movs	r2, #58	@ 0x3a
 80026e6:	2101      	movs	r1, #1
 80026e8:	5499      	strb	r1, [r3, r2]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	223b      	movs	r2, #59	@ 0x3b
 80026ee:	2101      	movs	r1, #1
 80026f0:	5499      	strb	r1, [r3, r2]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	223c      	movs	r2, #60	@ 0x3c
 80026f6:	2101      	movs	r1, #1
 80026f8:	5499      	strb	r1, [r3, r2]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	223d      	movs	r2, #61	@ 0x3d
 80026fe:	2101      	movs	r1, #1
 8002700:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2239      	movs	r2, #57	@ 0x39
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800271c:	46c0      	nop			@ (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d108      	bne.n	8002746 <HAL_TIM_PWM_Start+0x22>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	223a      	movs	r2, #58	@ 0x3a
 8002738:	5c9b      	ldrb	r3, [r3, r2]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	1e5a      	subs	r2, r3, #1
 8002740:	4193      	sbcs	r3, r2
 8002742:	b2db      	uxtb	r3, r3
 8002744:	e01f      	b.n	8002786 <HAL_TIM_PWM_Start+0x62>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b04      	cmp	r3, #4
 800274a:	d108      	bne.n	800275e <HAL_TIM_PWM_Start+0x3a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	223b      	movs	r2, #59	@ 0x3b
 8002750:	5c9b      	ldrb	r3, [r3, r2]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	1e5a      	subs	r2, r3, #1
 8002758:	4193      	sbcs	r3, r2
 800275a:	b2db      	uxtb	r3, r3
 800275c:	e013      	b.n	8002786 <HAL_TIM_PWM_Start+0x62>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b08      	cmp	r3, #8
 8002762:	d108      	bne.n	8002776 <HAL_TIM_PWM_Start+0x52>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	223c      	movs	r2, #60	@ 0x3c
 8002768:	5c9b      	ldrb	r3, [r3, r2]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	1e5a      	subs	r2, r3, #1
 8002770:	4193      	sbcs	r3, r2
 8002772:	b2db      	uxtb	r3, r3
 8002774:	e007      	b.n	8002786 <HAL_TIM_PWM_Start+0x62>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	223d      	movs	r2, #61	@ 0x3d
 800277a:	5c9b      	ldrb	r3, [r3, r2]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	1e5a      	subs	r2, r3, #1
 8002782:	4193      	sbcs	r3, r2
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e04d      	b.n	800282a <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d104      	bne.n	800279e <HAL_TIM_PWM_Start+0x7a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	223a      	movs	r2, #58	@ 0x3a
 8002798:	2102      	movs	r1, #2
 800279a:	5499      	strb	r1, [r3, r2]
 800279c:	e013      	b.n	80027c6 <HAL_TIM_PWM_Start+0xa2>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d104      	bne.n	80027ae <HAL_TIM_PWM_Start+0x8a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	223b      	movs	r2, #59	@ 0x3b
 80027a8:	2102      	movs	r1, #2
 80027aa:	5499      	strb	r1, [r3, r2]
 80027ac:	e00b      	b.n	80027c6 <HAL_TIM_PWM_Start+0xa2>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d104      	bne.n	80027be <HAL_TIM_PWM_Start+0x9a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	223c      	movs	r2, #60	@ 0x3c
 80027b8:	2102      	movs	r1, #2
 80027ba:	5499      	strb	r1, [r3, r2]
 80027bc:	e003      	b.n	80027c6 <HAL_TIM_PWM_Start+0xa2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	223d      	movs	r2, #61	@ 0x3d
 80027c2:	2102      	movs	r1, #2
 80027c4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6839      	ldr	r1, [r7, #0]
 80027cc:	2201      	movs	r2, #1
 80027ce:	0018      	movs	r0, r3
 80027d0:	f000 fbc6 	bl	8002f60 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	05db      	lsls	r3, r3, #23
 80027dc:	429a      	cmp	r2, r3
 80027de:	d009      	beq.n	80027f4 <HAL_TIM_PWM_Start+0xd0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a13      	ldr	r2, [pc, #76]	@ (8002834 <HAL_TIM_PWM_Start+0x110>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <HAL_TIM_PWM_Start+0xd0>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a12      	ldr	r2, [pc, #72]	@ (8002838 <HAL_TIM_PWM_Start+0x114>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d111      	bne.n	8002818 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2207      	movs	r2, #7
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b06      	cmp	r3, #6
 8002804:	d010      	beq.n	8002828 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	430a      	orrs	r2, r1
 8002814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002816:	e007      	b.n	8002828 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2101      	movs	r1, #1
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	0018      	movs	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	b004      	add	sp, #16
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			@ (mov r8, r8)
 8002834:	40010800 	.word	0x40010800
 8002838:	40011400 	.word	0x40011400

0800283c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002848:	2317      	movs	r3, #23
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2238      	movs	r2, #56	@ 0x38
 8002854:	5c9b      	ldrb	r3, [r3, r2]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_TIM_PWM_ConfigChannel+0x22>
 800285a:	2302      	movs	r3, #2
 800285c:	e0ad      	b.n	80029ba <HAL_TIM_PWM_ConfigChannel+0x17e>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2238      	movs	r2, #56	@ 0x38
 8002862:	2101      	movs	r1, #1
 8002864:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b0c      	cmp	r3, #12
 800286a:	d100      	bne.n	800286e <HAL_TIM_PWM_ConfigChannel+0x32>
 800286c:	e076      	b.n	800295c <HAL_TIM_PWM_ConfigChannel+0x120>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b0c      	cmp	r3, #12
 8002872:	d900      	bls.n	8002876 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002874:	e095      	b.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b08      	cmp	r3, #8
 800287a:	d04e      	beq.n	800291a <HAL_TIM_PWM_ConfigChannel+0xde>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b08      	cmp	r3, #8
 8002880:	d900      	bls.n	8002884 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002882:	e08e      	b.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_TIM_PWM_ConfigChannel+0x56>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d021      	beq.n	80028d4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002890:	e087      	b.n	80029a2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	0011      	movs	r1, r2
 800289a:	0018      	movs	r0, r3
 800289c:	f000 f9c2 	bl	8002c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699a      	ldr	r2, [r3, #24]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2108      	movs	r1, #8
 80028ac:	430a      	orrs	r2, r1
 80028ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2104      	movs	r1, #4
 80028bc:	438a      	bics	r2, r1
 80028be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6999      	ldr	r1, [r3, #24]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	619a      	str	r2, [r3, #24]
      break;
 80028d2:	e06b      	b.n	80029ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	0011      	movs	r1, r2
 80028dc:	0018      	movs	r0, r3
 80028de:	f000 f9dd 	bl	8002c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699a      	ldr	r2, [r3, #24]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2180      	movs	r1, #128	@ 0x80
 80028ee:	0109      	lsls	r1, r1, #4
 80028f0:	430a      	orrs	r2, r1
 80028f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4931      	ldr	r1, [pc, #196]	@ (80029c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002900:	400a      	ands	r2, r1
 8002902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6999      	ldr	r1, [r3, #24]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	021a      	lsls	r2, r3, #8
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	619a      	str	r2, [r3, #24]
      break;
 8002918:	e048      	b.n	80029ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	0011      	movs	r1, r2
 8002922:	0018      	movs	r0, r3
 8002924:	f000 f9fc 	bl	8002d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2108      	movs	r1, #8
 8002934:	430a      	orrs	r2, r1
 8002936:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2104      	movs	r1, #4
 8002944:	438a      	bics	r2, r1
 8002946:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	69d9      	ldr	r1, [r3, #28]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	61da      	str	r2, [r3, #28]
      break;
 800295a:	e027      	b.n	80029ac <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	0011      	movs	r1, r2
 8002964:	0018      	movs	r0, r3
 8002966:	f000 fa1b 	bl	8002da0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69da      	ldr	r2, [r3, #28]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2180      	movs	r1, #128	@ 0x80
 8002976:	0109      	lsls	r1, r1, #4
 8002978:	430a      	orrs	r2, r1
 800297a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	490f      	ldr	r1, [pc, #60]	@ (80029c4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002988:	400a      	ands	r2, r1
 800298a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69d9      	ldr	r1, [r3, #28]
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	021a      	lsls	r2, r3, #8
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	61da      	str	r2, [r3, #28]
      break;
 80029a0:	e004      	b.n	80029ac <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80029a2:	2317      	movs	r3, #23
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
      break;
 80029aa:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2238      	movs	r2, #56	@ 0x38
 80029b0:	2100      	movs	r1, #0
 80029b2:	5499      	strb	r1, [r3, r2]

  return status;
 80029b4:	2317      	movs	r3, #23
 80029b6:	18fb      	adds	r3, r7, r3
 80029b8:	781b      	ldrb	r3, [r3, #0]
}
 80029ba:	0018      	movs	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	b006      	add	sp, #24
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	fffffbff 	.word	0xfffffbff

080029c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	230f      	movs	r3, #15
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2238      	movs	r2, #56	@ 0x38
 80029de:	5c9b      	ldrb	r3, [r3, r2]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_TIM_ConfigClockSource+0x20>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e0bc      	b.n	8002b62 <HAL_TIM_ConfigClockSource+0x19a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2238      	movs	r2, #56	@ 0x38
 80029ec:	2101      	movs	r1, #1
 80029ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2239      	movs	r2, #57	@ 0x39
 80029f4:	2102      	movs	r1, #2
 80029f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2277      	movs	r2, #119	@ 0x77
 8002a04:	4393      	bics	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	4a58      	ldr	r2, [pc, #352]	@ (8002b6c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2280      	movs	r2, #128	@ 0x80
 8002a1e:	0192      	lsls	r2, r2, #6
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d040      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0xde>
 8002a24:	2280      	movs	r2, #128	@ 0x80
 8002a26:	0192      	lsls	r2, r2, #6
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d900      	bls.n	8002a2e <HAL_TIM_ConfigClockSource+0x66>
 8002a2c:	e088      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x178>
 8002a2e:	2280      	movs	r2, #128	@ 0x80
 8002a30:	0152      	lsls	r2, r2, #5
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d100      	bne.n	8002a38 <HAL_TIM_ConfigClockSource+0x70>
 8002a36:	e088      	b.n	8002b4a <HAL_TIM_ConfigClockSource+0x182>
 8002a38:	2280      	movs	r2, #128	@ 0x80
 8002a3a:	0152      	lsls	r2, r2, #5
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d900      	bls.n	8002a42 <HAL_TIM_ConfigClockSource+0x7a>
 8002a40:	e07e      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x178>
 8002a42:	2b70      	cmp	r3, #112	@ 0x70
 8002a44:	d018      	beq.n	8002a78 <HAL_TIM_ConfigClockSource+0xb0>
 8002a46:	d900      	bls.n	8002a4a <HAL_TIM_ConfigClockSource+0x82>
 8002a48:	e07a      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x178>
 8002a4a:	2b60      	cmp	r3, #96	@ 0x60
 8002a4c:	d04f      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x126>
 8002a4e:	d900      	bls.n	8002a52 <HAL_TIM_ConfigClockSource+0x8a>
 8002a50:	e076      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x178>
 8002a52:	2b50      	cmp	r3, #80	@ 0x50
 8002a54:	d03b      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x106>
 8002a56:	d900      	bls.n	8002a5a <HAL_TIM_ConfigClockSource+0x92>
 8002a58:	e072      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x178>
 8002a5a:	2b40      	cmp	r3, #64	@ 0x40
 8002a5c:	d057      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0x146>
 8002a5e:	d900      	bls.n	8002a62 <HAL_TIM_ConfigClockSource+0x9a>
 8002a60:	e06e      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x178>
 8002a62:	2b30      	cmp	r3, #48	@ 0x30
 8002a64:	d063      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0x166>
 8002a66:	d86b      	bhi.n	8002b40 <HAL_TIM_ConfigClockSource+0x178>
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	d060      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0x166>
 8002a6c:	d868      	bhi.n	8002b40 <HAL_TIM_ConfigClockSource+0x178>
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d05d      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0x166>
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d05b      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0x166>
 8002a76:	e063      	b.n	8002b40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a88:	f000 fa4a 	bl	8002f20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2277      	movs	r2, #119	@ 0x77
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68ba      	ldr	r2, [r7, #8]
 8002aa2:	609a      	str	r2, [r3, #8]
      break;
 8002aa4:	e052      	b.n	8002b4c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ab6:	f000 fa33 	bl	8002f20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2180      	movs	r1, #128	@ 0x80
 8002ac6:	01c9      	lsls	r1, r1, #7
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]
      break;
 8002acc:	e03e      	b.n	8002b4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ada:	001a      	movs	r2, r3
 8002adc:	f000 f9a6 	bl	8002e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2150      	movs	r1, #80	@ 0x50
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 fa00 	bl	8002eec <TIM_ITRx_SetConfig>
      break;
 8002aec:	e02e      	b.n	8002b4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002afa:	001a      	movs	r2, r3
 8002afc:	f000 f9c4 	bl	8002e88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2160      	movs	r1, #96	@ 0x60
 8002b06:	0018      	movs	r0, r3
 8002b08:	f000 f9f0 	bl	8002eec <TIM_ITRx_SetConfig>
      break;
 8002b0c:	e01e      	b.n	8002b4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	f000 f986 	bl	8002e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2140      	movs	r1, #64	@ 0x40
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 f9e0 	bl	8002eec <TIM_ITRx_SetConfig>
      break;
 8002b2c:	e00e      	b.n	8002b4c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	0019      	movs	r1, r3
 8002b38:	0010      	movs	r0, r2
 8002b3a:	f000 f9d7 	bl	8002eec <TIM_ITRx_SetConfig>
      break;
 8002b3e:	e005      	b.n	8002b4c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002b40:	230f      	movs	r3, #15
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
      break;
 8002b48:	e000      	b.n	8002b4c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002b4a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2239      	movs	r2, #57	@ 0x39
 8002b50:	2101      	movs	r1, #1
 8002b52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2238      	movs	r2, #56	@ 0x38
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5499      	strb	r1, [r3, r2]

  return status;
 8002b5c:	230f      	movs	r3, #15
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	781b      	ldrb	r3, [r3, #0]
}
 8002b62:	0018      	movs	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b004      	add	sp, #16
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	ffff00ff 	.word	0xffff00ff

08002b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	2380      	movs	r3, #128	@ 0x80
 8002b84:	05db      	lsls	r3, r3, #23
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d007      	beq.n	8002b9a <TIM_Base_SetConfig+0x2a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a22      	ldr	r2, [pc, #136]	@ (8002c18 <TIM_Base_SetConfig+0xa8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d003      	beq.n	8002b9a <TIM_Base_SetConfig+0x2a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a21      	ldr	r2, [pc, #132]	@ (8002c1c <TIM_Base_SetConfig+0xac>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d108      	bne.n	8002bac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2270      	movs	r2, #112	@ 0x70
 8002b9e:	4393      	bics	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	2380      	movs	r3, #128	@ 0x80
 8002bb0:	05db      	lsls	r3, r3, #23
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d007      	beq.n	8002bc6 <TIM_Base_SetConfig+0x56>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a17      	ldr	r2, [pc, #92]	@ (8002c18 <TIM_Base_SetConfig+0xa8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d003      	beq.n	8002bc6 <TIM_Base_SetConfig+0x56>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a16      	ldr	r2, [pc, #88]	@ (8002c1c <TIM_Base_SetConfig+0xac>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d108      	bne.n	8002bd8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4a15      	ldr	r2, [pc, #84]	@ (8002c20 <TIM_Base_SetConfig+0xb0>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2280      	movs	r2, #128	@ 0x80
 8002bdc:	4393      	bics	r3, r2
 8002bde:	001a      	movs	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	46c0      	nop			@ (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b004      	add	sp, #16
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40010800 	.word	0x40010800
 8002c1c:	40011400 	.word	0x40011400
 8002c20:	fffffcff 	.word	0xfffffcff

08002c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4393      	bics	r3, r2
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2270      	movs	r2, #112	@ 0x70
 8002c52:	4393      	bics	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2203      	movs	r2, #3
 8002c5a:	4393      	bics	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	4393      	bics	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	621a      	str	r2, [r3, #32]
}
 8002c94:	46c0      	nop			@ (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b006      	add	sp, #24
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	2210      	movs	r2, #16
 8002cb2:	4393      	bics	r3, r2
 8002cb4:	001a      	movs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a13      	ldr	r2, [pc, #76]	@ (8002d18 <TIM_OC2_SetConfig+0x7c>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4a12      	ldr	r2, [pc, #72]	@ (8002d1c <TIM_OC2_SetConfig+0x80>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	4393      	bics	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	621a      	str	r2, [r3, #32]
}
 8002d10:	46c0      	nop			@ (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b006      	add	sp, #24
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	ffff8fff 	.word	0xffff8fff
 8002d1c:	fffffcff 	.word	0xfffffcff

08002d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	4a18      	ldr	r2, [pc, #96]	@ (8002d98 <TIM_OC3_SetConfig+0x78>)
 8002d36:	401a      	ands	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2270      	movs	r2, #112	@ 0x70
 8002d4c:	4393      	bics	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2203      	movs	r2, #3
 8002d54:	4393      	bics	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	4a0d      	ldr	r2, [pc, #52]	@ (8002d9c <TIM_OC3_SetConfig+0x7c>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	621a      	str	r2, [r3, #32]
}
 8002d90:	46c0      	nop			@ (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b006      	add	sp, #24
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	fffffeff 	.word	0xfffffeff
 8002d9c:	fffffdff 	.word	0xfffffdff

08002da0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a19      	ldr	r2, [pc, #100]	@ (8002e1c <TIM_OC4_SetConfig+0x7c>)
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4a15      	ldr	r2, [pc, #84]	@ (8002e20 <TIM_OC4_SetConfig+0x80>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a14      	ldr	r2, [pc, #80]	@ (8002e24 <TIM_OC4_SetConfig+0x84>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	4a10      	ldr	r2, [pc, #64]	@ (8002e28 <TIM_OC4_SetConfig+0x88>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	031b      	lsls	r3, r3, #12
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	621a      	str	r2, [r3, #32]
}
 8002e12:	46c0      	nop			@ (mov r8, r8)
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b006      	add	sp, #24
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	ffffefff 	.word	0xffffefff
 8002e20:	ffff8fff 	.word	0xffff8fff
 8002e24:	fffffcff 	.word	0xfffffcff
 8002e28:	ffffdfff 	.word	0xffffdfff

08002e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	2201      	movs	r2, #1
 8002e44:	4393      	bics	r3, r2
 8002e46:	001a      	movs	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	22f0      	movs	r2, #240	@ 0xf0
 8002e56:	4393      	bics	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	220a      	movs	r2, #10
 8002e68:	4393      	bics	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	621a      	str	r2, [r3, #32]
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b006      	add	sp, #24
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	2210      	movs	r2, #16
 8002ea0:	4393      	bics	r3, r2
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee8 <TIM_TI2_ConfigInputStage+0x60>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	031b      	lsls	r3, r3, #12
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	22a0      	movs	r2, #160	@ 0xa0
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	621a      	str	r2, [r3, #32]
}
 8002ede:	46c0      	nop			@ (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b006      	add	sp, #24
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			@ (mov r8, r8)
 8002ee8:	ffff0fff 	.word	0xffff0fff

08002eec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2270      	movs	r2, #112	@ 0x70
 8002f00:	4393      	bics	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	2207      	movs	r2, #7
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	609a      	str	r2, [r3, #8]
}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b004      	add	sp, #16
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	4a09      	ldr	r2, [pc, #36]	@ (8002f5c <TIM_ETR_SetConfig+0x3c>)
 8002f38:	4013      	ands	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	021a      	lsls	r2, r3, #8
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	609a      	str	r2, [r3, #8]
}
 8002f54:	46c0      	nop			@ (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b006      	add	sp, #24
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	ffff00ff 	.word	0xffff00ff

08002f60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	221f      	movs	r2, #31
 8002f70:	4013      	ands	r3, r2
 8002f72:	2201      	movs	r2, #1
 8002f74:	409a      	lsls	r2, r3
 8002f76:	0013      	movs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	43d2      	mvns	r2, r2
 8002f82:	401a      	ands	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a1a      	ldr	r2, [r3, #32]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	211f      	movs	r1, #31
 8002f90:	400b      	ands	r3, r1
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4099      	lsls	r1, r3
 8002f96:	000b      	movs	r3, r1
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	621a      	str	r2, [r3, #32]
}
 8002f9e:	46c0      	nop			@ (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b006      	add	sp, #24
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2238      	movs	r2, #56	@ 0x38
 8002fb6:	5c9b      	ldrb	r3, [r3, r2]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e042      	b.n	8003046 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2238      	movs	r2, #56	@ 0x38
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2239      	movs	r2, #57	@ 0x39
 8002fcc:	2102      	movs	r1, #2
 8002fce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2270      	movs	r2, #112	@ 0x70
 8002fe4:	4393      	bics	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	05db      	lsls	r3, r3, #23
 8003002:	429a      	cmp	r2, r3
 8003004:	d009      	beq.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a11      	ldr	r2, [pc, #68]	@ (8003050 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d004      	beq.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0f      	ldr	r2, [pc, #60]	@ (8003054 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d10c      	bne.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2280      	movs	r2, #128	@ 0x80
 800301e:	4393      	bics	r3, r2
 8003020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	4313      	orrs	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2239      	movs	r2, #57	@ 0x39
 8003038:	2101      	movs	r1, #1
 800303a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2238      	movs	r2, #56	@ 0x38
 8003040:	2100      	movs	r1, #0
 8003042:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			@ (mov r8, r8)
 8003050:	40010800 	.word	0x40010800
 8003054:	40011400 	.word	0x40011400

08003058 <memset>:
 8003058:	0003      	movs	r3, r0
 800305a:	1882      	adds	r2, r0, r2
 800305c:	4293      	cmp	r3, r2
 800305e:	d100      	bne.n	8003062 <memset+0xa>
 8003060:	4770      	bx	lr
 8003062:	7019      	strb	r1, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	e7f9      	b.n	800305c <memset+0x4>

08003068 <__libc_init_array>:
 8003068:	b570      	push	{r4, r5, r6, lr}
 800306a:	2600      	movs	r6, #0
 800306c:	4c0c      	ldr	r4, [pc, #48]	@ (80030a0 <__libc_init_array+0x38>)
 800306e:	4d0d      	ldr	r5, [pc, #52]	@ (80030a4 <__libc_init_array+0x3c>)
 8003070:	1b64      	subs	r4, r4, r5
 8003072:	10a4      	asrs	r4, r4, #2
 8003074:	42a6      	cmp	r6, r4
 8003076:	d109      	bne.n	800308c <__libc_init_array+0x24>
 8003078:	2600      	movs	r6, #0
 800307a:	f000 f819 	bl	80030b0 <_init>
 800307e:	4c0a      	ldr	r4, [pc, #40]	@ (80030a8 <__libc_init_array+0x40>)
 8003080:	4d0a      	ldr	r5, [pc, #40]	@ (80030ac <__libc_init_array+0x44>)
 8003082:	1b64      	subs	r4, r4, r5
 8003084:	10a4      	asrs	r4, r4, #2
 8003086:	42a6      	cmp	r6, r4
 8003088:	d105      	bne.n	8003096 <__libc_init_array+0x2e>
 800308a:	bd70      	pop	{r4, r5, r6, pc}
 800308c:	00b3      	lsls	r3, r6, #2
 800308e:	58eb      	ldr	r3, [r5, r3]
 8003090:	4798      	blx	r3
 8003092:	3601      	adds	r6, #1
 8003094:	e7ee      	b.n	8003074 <__libc_init_array+0xc>
 8003096:	00b3      	lsls	r3, r6, #2
 8003098:	58eb      	ldr	r3, [r5, r3]
 800309a:	4798      	blx	r3
 800309c:	3601      	adds	r6, #1
 800309e:	e7f2      	b.n	8003086 <__libc_init_array+0x1e>
 80030a0:	080030e4 	.word	0x080030e4
 80030a4:	080030e4 	.word	0x080030e4
 80030a8:	080030e8 	.word	0x080030e8
 80030ac:	080030e4 	.word	0x080030e4

080030b0 <_init>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr

080030bc <_fini>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c2:	bc08      	pop	{r3}
 80030c4:	469e      	mov	lr, r3
 80030c6:	4770      	bx	lr

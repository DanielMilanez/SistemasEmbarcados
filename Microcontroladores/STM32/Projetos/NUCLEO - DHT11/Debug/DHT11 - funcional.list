
DHT11 - funcional.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a38  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002af8  08002af8  00003af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b54  08002b54  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002b54  08002b54  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002b54  08002b54  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b54  08002b54  00003b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b58  08002b58  00003b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b5c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002b68  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002b68  00004084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000068d5  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013e3  00000000  00000000  0000a909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  0000bcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000060a  00000000  00000000  0000c4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012ab7  00000000  00000000  0000caf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000088b5  00000000  00000000  0001f5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000752d8  00000000  00000000  00027e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009d136  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cc8  00000000  00000000  0009d17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0009ee44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ae0 	.word	0x08002ae0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002ae0 	.word	0x08002ae0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_dadd>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	464f      	mov	r7, r9
 8000224:	4646      	mov	r6, r8
 8000226:	46d6      	mov	lr, sl
 8000228:	b5c0      	push	{r6, r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	9000      	str	r0, [sp, #0]
 800022e:	9101      	str	r1, [sp, #4]
 8000230:	030e      	lsls	r6, r1, #12
 8000232:	004c      	lsls	r4, r1, #1
 8000234:	0fcd      	lsrs	r5, r1, #31
 8000236:	0a71      	lsrs	r1, r6, #9
 8000238:	9e00      	ldr	r6, [sp, #0]
 800023a:	005f      	lsls	r7, r3, #1
 800023c:	0f76      	lsrs	r6, r6, #29
 800023e:	430e      	orrs	r6, r1
 8000240:	9900      	ldr	r1, [sp, #0]
 8000242:	9200      	str	r2, [sp, #0]
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	00c9      	lsls	r1, r1, #3
 8000248:	4689      	mov	r9, r1
 800024a:	0319      	lsls	r1, r3, #12
 800024c:	0d7b      	lsrs	r3, r7, #21
 800024e:	4698      	mov	r8, r3
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	0a49      	lsrs	r1, r1, #9
 8000254:	0fdb      	lsrs	r3, r3, #31
 8000256:	469c      	mov	ip, r3
 8000258:	9b00      	ldr	r3, [sp, #0]
 800025a:	9a00      	ldr	r2, [sp, #0]
 800025c:	0f5b      	lsrs	r3, r3, #29
 800025e:	430b      	orrs	r3, r1
 8000260:	4641      	mov	r1, r8
 8000262:	0d64      	lsrs	r4, r4, #21
 8000264:	00d2      	lsls	r2, r2, #3
 8000266:	1a61      	subs	r1, r4, r1
 8000268:	4565      	cmp	r5, ip
 800026a:	d100      	bne.n	800026e <__aeabi_dadd+0x4e>
 800026c:	e0a6      	b.n	80003bc <__aeabi_dadd+0x19c>
 800026e:	2900      	cmp	r1, #0
 8000270:	dd72      	ble.n	8000358 <__aeabi_dadd+0x138>
 8000272:	4647      	mov	r7, r8
 8000274:	2f00      	cmp	r7, #0
 8000276:	d100      	bne.n	800027a <__aeabi_dadd+0x5a>
 8000278:	e0dd      	b.n	8000436 <__aeabi_dadd+0x216>
 800027a:	4fcc      	ldr	r7, [pc, #816]	@ (80005ac <__aeabi_dadd+0x38c>)
 800027c:	42bc      	cmp	r4, r7
 800027e:	d100      	bne.n	8000282 <__aeabi_dadd+0x62>
 8000280:	e19a      	b.n	80005b8 <__aeabi_dadd+0x398>
 8000282:	2701      	movs	r7, #1
 8000284:	2938      	cmp	r1, #56	@ 0x38
 8000286:	dc17      	bgt.n	80002b8 <__aeabi_dadd+0x98>
 8000288:	2780      	movs	r7, #128	@ 0x80
 800028a:	043f      	lsls	r7, r7, #16
 800028c:	433b      	orrs	r3, r7
 800028e:	291f      	cmp	r1, #31
 8000290:	dd00      	ble.n	8000294 <__aeabi_dadd+0x74>
 8000292:	e1dd      	b.n	8000650 <__aeabi_dadd+0x430>
 8000294:	2720      	movs	r7, #32
 8000296:	1a78      	subs	r0, r7, r1
 8000298:	001f      	movs	r7, r3
 800029a:	4087      	lsls	r7, r0
 800029c:	46ba      	mov	sl, r7
 800029e:	0017      	movs	r7, r2
 80002a0:	40cf      	lsrs	r7, r1
 80002a2:	4684      	mov	ip, r0
 80002a4:	0038      	movs	r0, r7
 80002a6:	4657      	mov	r7, sl
 80002a8:	4307      	orrs	r7, r0
 80002aa:	4660      	mov	r0, ip
 80002ac:	4082      	lsls	r2, r0
 80002ae:	40cb      	lsrs	r3, r1
 80002b0:	1e50      	subs	r0, r2, #1
 80002b2:	4182      	sbcs	r2, r0
 80002b4:	1af6      	subs	r6, r6, r3
 80002b6:	4317      	orrs	r7, r2
 80002b8:	464b      	mov	r3, r9
 80002ba:	1bdf      	subs	r7, r3, r7
 80002bc:	45b9      	cmp	r9, r7
 80002be:	4180      	sbcs	r0, r0
 80002c0:	4240      	negs	r0, r0
 80002c2:	1a36      	subs	r6, r6, r0
 80002c4:	0233      	lsls	r3, r6, #8
 80002c6:	d400      	bmi.n	80002ca <__aeabi_dadd+0xaa>
 80002c8:	e0ff      	b.n	80004ca <__aeabi_dadd+0x2aa>
 80002ca:	0276      	lsls	r6, r6, #9
 80002cc:	0a76      	lsrs	r6, r6, #9
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d100      	bne.n	80002d4 <__aeabi_dadd+0xb4>
 80002d2:	e13c      	b.n	800054e <__aeabi_dadd+0x32e>
 80002d4:	0030      	movs	r0, r6
 80002d6:	f000 ff31 	bl	800113c <__clzsi2>
 80002da:	0003      	movs	r3, r0
 80002dc:	3b08      	subs	r3, #8
 80002de:	2120      	movs	r1, #32
 80002e0:	0038      	movs	r0, r7
 80002e2:	1aca      	subs	r2, r1, r3
 80002e4:	40d0      	lsrs	r0, r2
 80002e6:	409e      	lsls	r6, r3
 80002e8:	0002      	movs	r2, r0
 80002ea:	409f      	lsls	r7, r3
 80002ec:	4332      	orrs	r2, r6
 80002ee:	429c      	cmp	r4, r3
 80002f0:	dd00      	ble.n	80002f4 <__aeabi_dadd+0xd4>
 80002f2:	e1a6      	b.n	8000642 <__aeabi_dadd+0x422>
 80002f4:	1b18      	subs	r0, r3, r4
 80002f6:	3001      	adds	r0, #1
 80002f8:	1a09      	subs	r1, r1, r0
 80002fa:	003e      	movs	r6, r7
 80002fc:	408f      	lsls	r7, r1
 80002fe:	40c6      	lsrs	r6, r0
 8000300:	1e7b      	subs	r3, r7, #1
 8000302:	419f      	sbcs	r7, r3
 8000304:	0013      	movs	r3, r2
 8000306:	408b      	lsls	r3, r1
 8000308:	4337      	orrs	r7, r6
 800030a:	431f      	orrs	r7, r3
 800030c:	40c2      	lsrs	r2, r0
 800030e:	003b      	movs	r3, r7
 8000310:	0016      	movs	r6, r2
 8000312:	2400      	movs	r4, #0
 8000314:	4313      	orrs	r3, r2
 8000316:	d100      	bne.n	800031a <__aeabi_dadd+0xfa>
 8000318:	e1df      	b.n	80006da <__aeabi_dadd+0x4ba>
 800031a:	077b      	lsls	r3, r7, #29
 800031c:	d100      	bne.n	8000320 <__aeabi_dadd+0x100>
 800031e:	e332      	b.n	8000986 <__aeabi_dadd+0x766>
 8000320:	230f      	movs	r3, #15
 8000322:	003a      	movs	r2, r7
 8000324:	403b      	ands	r3, r7
 8000326:	2b04      	cmp	r3, #4
 8000328:	d004      	beq.n	8000334 <__aeabi_dadd+0x114>
 800032a:	1d3a      	adds	r2, r7, #4
 800032c:	42ba      	cmp	r2, r7
 800032e:	41bf      	sbcs	r7, r7
 8000330:	427f      	negs	r7, r7
 8000332:	19f6      	adds	r6, r6, r7
 8000334:	0233      	lsls	r3, r6, #8
 8000336:	d400      	bmi.n	800033a <__aeabi_dadd+0x11a>
 8000338:	e323      	b.n	8000982 <__aeabi_dadd+0x762>
 800033a:	4b9c      	ldr	r3, [pc, #624]	@ (80005ac <__aeabi_dadd+0x38c>)
 800033c:	3401      	adds	r4, #1
 800033e:	429c      	cmp	r4, r3
 8000340:	d100      	bne.n	8000344 <__aeabi_dadd+0x124>
 8000342:	e0b4      	b.n	80004ae <__aeabi_dadd+0x28e>
 8000344:	4b9a      	ldr	r3, [pc, #616]	@ (80005b0 <__aeabi_dadd+0x390>)
 8000346:	0564      	lsls	r4, r4, #21
 8000348:	401e      	ands	r6, r3
 800034a:	0d64      	lsrs	r4, r4, #21
 800034c:	0777      	lsls	r7, r6, #29
 800034e:	08d2      	lsrs	r2, r2, #3
 8000350:	0276      	lsls	r6, r6, #9
 8000352:	4317      	orrs	r7, r2
 8000354:	0b36      	lsrs	r6, r6, #12
 8000356:	e0ac      	b.n	80004b2 <__aeabi_dadd+0x292>
 8000358:	2900      	cmp	r1, #0
 800035a:	d100      	bne.n	800035e <__aeabi_dadd+0x13e>
 800035c:	e07e      	b.n	800045c <__aeabi_dadd+0x23c>
 800035e:	4641      	mov	r1, r8
 8000360:	1b09      	subs	r1, r1, r4
 8000362:	2c00      	cmp	r4, #0
 8000364:	d000      	beq.n	8000368 <__aeabi_dadd+0x148>
 8000366:	e160      	b.n	800062a <__aeabi_dadd+0x40a>
 8000368:	0034      	movs	r4, r6
 800036a:	4648      	mov	r0, r9
 800036c:	4304      	orrs	r4, r0
 800036e:	d100      	bne.n	8000372 <__aeabi_dadd+0x152>
 8000370:	e1c9      	b.n	8000706 <__aeabi_dadd+0x4e6>
 8000372:	1e4c      	subs	r4, r1, #1
 8000374:	2901      	cmp	r1, #1
 8000376:	d100      	bne.n	800037a <__aeabi_dadd+0x15a>
 8000378:	e22e      	b.n	80007d8 <__aeabi_dadd+0x5b8>
 800037a:	4d8c      	ldr	r5, [pc, #560]	@ (80005ac <__aeabi_dadd+0x38c>)
 800037c:	42a9      	cmp	r1, r5
 800037e:	d100      	bne.n	8000382 <__aeabi_dadd+0x162>
 8000380:	e224      	b.n	80007cc <__aeabi_dadd+0x5ac>
 8000382:	2701      	movs	r7, #1
 8000384:	2c38      	cmp	r4, #56	@ 0x38
 8000386:	dc11      	bgt.n	80003ac <__aeabi_dadd+0x18c>
 8000388:	0021      	movs	r1, r4
 800038a:	291f      	cmp	r1, #31
 800038c:	dd00      	ble.n	8000390 <__aeabi_dadd+0x170>
 800038e:	e20b      	b.n	80007a8 <__aeabi_dadd+0x588>
 8000390:	2420      	movs	r4, #32
 8000392:	0037      	movs	r7, r6
 8000394:	4648      	mov	r0, r9
 8000396:	1a64      	subs	r4, r4, r1
 8000398:	40a7      	lsls	r7, r4
 800039a:	40c8      	lsrs	r0, r1
 800039c:	4307      	orrs	r7, r0
 800039e:	4648      	mov	r0, r9
 80003a0:	40a0      	lsls	r0, r4
 80003a2:	40ce      	lsrs	r6, r1
 80003a4:	1e44      	subs	r4, r0, #1
 80003a6:	41a0      	sbcs	r0, r4
 80003a8:	1b9b      	subs	r3, r3, r6
 80003aa:	4307      	orrs	r7, r0
 80003ac:	1bd7      	subs	r7, r2, r7
 80003ae:	42ba      	cmp	r2, r7
 80003b0:	4192      	sbcs	r2, r2
 80003b2:	4252      	negs	r2, r2
 80003b4:	4665      	mov	r5, ip
 80003b6:	4644      	mov	r4, r8
 80003b8:	1a9e      	subs	r6, r3, r2
 80003ba:	e783      	b.n	80002c4 <__aeabi_dadd+0xa4>
 80003bc:	2900      	cmp	r1, #0
 80003be:	dc00      	bgt.n	80003c2 <__aeabi_dadd+0x1a2>
 80003c0:	e09c      	b.n	80004fc <__aeabi_dadd+0x2dc>
 80003c2:	4647      	mov	r7, r8
 80003c4:	2f00      	cmp	r7, #0
 80003c6:	d167      	bne.n	8000498 <__aeabi_dadd+0x278>
 80003c8:	001f      	movs	r7, r3
 80003ca:	4317      	orrs	r7, r2
 80003cc:	d100      	bne.n	80003d0 <__aeabi_dadd+0x1b0>
 80003ce:	e0e4      	b.n	800059a <__aeabi_dadd+0x37a>
 80003d0:	1e48      	subs	r0, r1, #1
 80003d2:	2901      	cmp	r1, #1
 80003d4:	d100      	bne.n	80003d8 <__aeabi_dadd+0x1b8>
 80003d6:	e19b      	b.n	8000710 <__aeabi_dadd+0x4f0>
 80003d8:	4f74      	ldr	r7, [pc, #464]	@ (80005ac <__aeabi_dadd+0x38c>)
 80003da:	42b9      	cmp	r1, r7
 80003dc:	d100      	bne.n	80003e0 <__aeabi_dadd+0x1c0>
 80003de:	e0eb      	b.n	80005b8 <__aeabi_dadd+0x398>
 80003e0:	2701      	movs	r7, #1
 80003e2:	0001      	movs	r1, r0
 80003e4:	2838      	cmp	r0, #56	@ 0x38
 80003e6:	dc11      	bgt.n	800040c <__aeabi_dadd+0x1ec>
 80003e8:	291f      	cmp	r1, #31
 80003ea:	dd00      	ble.n	80003ee <__aeabi_dadd+0x1ce>
 80003ec:	e1c7      	b.n	800077e <__aeabi_dadd+0x55e>
 80003ee:	2720      	movs	r7, #32
 80003f0:	1a78      	subs	r0, r7, r1
 80003f2:	001f      	movs	r7, r3
 80003f4:	4684      	mov	ip, r0
 80003f6:	4087      	lsls	r7, r0
 80003f8:	0010      	movs	r0, r2
 80003fa:	40c8      	lsrs	r0, r1
 80003fc:	4307      	orrs	r7, r0
 80003fe:	4660      	mov	r0, ip
 8000400:	4082      	lsls	r2, r0
 8000402:	40cb      	lsrs	r3, r1
 8000404:	1e50      	subs	r0, r2, #1
 8000406:	4182      	sbcs	r2, r0
 8000408:	18f6      	adds	r6, r6, r3
 800040a:	4317      	orrs	r7, r2
 800040c:	444f      	add	r7, r9
 800040e:	454f      	cmp	r7, r9
 8000410:	4180      	sbcs	r0, r0
 8000412:	4240      	negs	r0, r0
 8000414:	1836      	adds	r6, r6, r0
 8000416:	0233      	lsls	r3, r6, #8
 8000418:	d557      	bpl.n	80004ca <__aeabi_dadd+0x2aa>
 800041a:	4b64      	ldr	r3, [pc, #400]	@ (80005ac <__aeabi_dadd+0x38c>)
 800041c:	3401      	adds	r4, #1
 800041e:	429c      	cmp	r4, r3
 8000420:	d045      	beq.n	80004ae <__aeabi_dadd+0x28e>
 8000422:	2101      	movs	r1, #1
 8000424:	4b62      	ldr	r3, [pc, #392]	@ (80005b0 <__aeabi_dadd+0x390>)
 8000426:	087a      	lsrs	r2, r7, #1
 8000428:	401e      	ands	r6, r3
 800042a:	4039      	ands	r1, r7
 800042c:	430a      	orrs	r2, r1
 800042e:	07f7      	lsls	r7, r6, #31
 8000430:	4317      	orrs	r7, r2
 8000432:	0876      	lsrs	r6, r6, #1
 8000434:	e771      	b.n	800031a <__aeabi_dadd+0xfa>
 8000436:	001f      	movs	r7, r3
 8000438:	4317      	orrs	r7, r2
 800043a:	d100      	bne.n	800043e <__aeabi_dadd+0x21e>
 800043c:	e0ad      	b.n	800059a <__aeabi_dadd+0x37a>
 800043e:	1e4f      	subs	r7, r1, #1
 8000440:	46bc      	mov	ip, r7
 8000442:	2901      	cmp	r1, #1
 8000444:	d100      	bne.n	8000448 <__aeabi_dadd+0x228>
 8000446:	e182      	b.n	800074e <__aeabi_dadd+0x52e>
 8000448:	4f58      	ldr	r7, [pc, #352]	@ (80005ac <__aeabi_dadd+0x38c>)
 800044a:	42b9      	cmp	r1, r7
 800044c:	d100      	bne.n	8000450 <__aeabi_dadd+0x230>
 800044e:	e190      	b.n	8000772 <__aeabi_dadd+0x552>
 8000450:	4661      	mov	r1, ip
 8000452:	2701      	movs	r7, #1
 8000454:	2938      	cmp	r1, #56	@ 0x38
 8000456:	dd00      	ble.n	800045a <__aeabi_dadd+0x23a>
 8000458:	e72e      	b.n	80002b8 <__aeabi_dadd+0x98>
 800045a:	e718      	b.n	800028e <__aeabi_dadd+0x6e>
 800045c:	4f55      	ldr	r7, [pc, #340]	@ (80005b4 <__aeabi_dadd+0x394>)
 800045e:	1c61      	adds	r1, r4, #1
 8000460:	4239      	tst	r1, r7
 8000462:	d000      	beq.n	8000466 <__aeabi_dadd+0x246>
 8000464:	e0d0      	b.n	8000608 <__aeabi_dadd+0x3e8>
 8000466:	0031      	movs	r1, r6
 8000468:	4648      	mov	r0, r9
 800046a:	001f      	movs	r7, r3
 800046c:	4301      	orrs	r1, r0
 800046e:	4317      	orrs	r7, r2
 8000470:	2c00      	cmp	r4, #0
 8000472:	d000      	beq.n	8000476 <__aeabi_dadd+0x256>
 8000474:	e13d      	b.n	80006f2 <__aeabi_dadd+0x4d2>
 8000476:	2900      	cmp	r1, #0
 8000478:	d100      	bne.n	800047c <__aeabi_dadd+0x25c>
 800047a:	e1bc      	b.n	80007f6 <__aeabi_dadd+0x5d6>
 800047c:	2f00      	cmp	r7, #0
 800047e:	d000      	beq.n	8000482 <__aeabi_dadd+0x262>
 8000480:	e1bf      	b.n	8000802 <__aeabi_dadd+0x5e2>
 8000482:	464b      	mov	r3, r9
 8000484:	2100      	movs	r1, #0
 8000486:	08d8      	lsrs	r0, r3, #3
 8000488:	0777      	lsls	r7, r6, #29
 800048a:	4307      	orrs	r7, r0
 800048c:	08f0      	lsrs	r0, r6, #3
 800048e:	0306      	lsls	r6, r0, #12
 8000490:	054c      	lsls	r4, r1, #21
 8000492:	0b36      	lsrs	r6, r6, #12
 8000494:	0d64      	lsrs	r4, r4, #21
 8000496:	e00c      	b.n	80004b2 <__aeabi_dadd+0x292>
 8000498:	4f44      	ldr	r7, [pc, #272]	@ (80005ac <__aeabi_dadd+0x38c>)
 800049a:	42bc      	cmp	r4, r7
 800049c:	d100      	bne.n	80004a0 <__aeabi_dadd+0x280>
 800049e:	e08b      	b.n	80005b8 <__aeabi_dadd+0x398>
 80004a0:	2701      	movs	r7, #1
 80004a2:	2938      	cmp	r1, #56	@ 0x38
 80004a4:	dcb2      	bgt.n	800040c <__aeabi_dadd+0x1ec>
 80004a6:	2780      	movs	r7, #128	@ 0x80
 80004a8:	043f      	lsls	r7, r7, #16
 80004aa:	433b      	orrs	r3, r7
 80004ac:	e79c      	b.n	80003e8 <__aeabi_dadd+0x1c8>
 80004ae:	2600      	movs	r6, #0
 80004b0:	2700      	movs	r7, #0
 80004b2:	0524      	lsls	r4, r4, #20
 80004b4:	4334      	orrs	r4, r6
 80004b6:	07ed      	lsls	r5, r5, #31
 80004b8:	432c      	orrs	r4, r5
 80004ba:	0038      	movs	r0, r7
 80004bc:	0021      	movs	r1, r4
 80004be:	b002      	add	sp, #8
 80004c0:	bce0      	pop	{r5, r6, r7}
 80004c2:	46ba      	mov	sl, r7
 80004c4:	46b1      	mov	r9, r6
 80004c6:	46a8      	mov	r8, r5
 80004c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ca:	077b      	lsls	r3, r7, #29
 80004cc:	d004      	beq.n	80004d8 <__aeabi_dadd+0x2b8>
 80004ce:	230f      	movs	r3, #15
 80004d0:	403b      	ands	r3, r7
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d000      	beq.n	80004d8 <__aeabi_dadd+0x2b8>
 80004d6:	e728      	b.n	800032a <__aeabi_dadd+0x10a>
 80004d8:	08f8      	lsrs	r0, r7, #3
 80004da:	4b34      	ldr	r3, [pc, #208]	@ (80005ac <__aeabi_dadd+0x38c>)
 80004dc:	0777      	lsls	r7, r6, #29
 80004de:	4307      	orrs	r7, r0
 80004e0:	08f0      	lsrs	r0, r6, #3
 80004e2:	429c      	cmp	r4, r3
 80004e4:	d000      	beq.n	80004e8 <__aeabi_dadd+0x2c8>
 80004e6:	e24a      	b.n	800097e <__aeabi_dadd+0x75e>
 80004e8:	003b      	movs	r3, r7
 80004ea:	4303      	orrs	r3, r0
 80004ec:	d059      	beq.n	80005a2 <__aeabi_dadd+0x382>
 80004ee:	2680      	movs	r6, #128	@ 0x80
 80004f0:	0336      	lsls	r6, r6, #12
 80004f2:	4306      	orrs	r6, r0
 80004f4:	0336      	lsls	r6, r6, #12
 80004f6:	4c2d      	ldr	r4, [pc, #180]	@ (80005ac <__aeabi_dadd+0x38c>)
 80004f8:	0b36      	lsrs	r6, r6, #12
 80004fa:	e7da      	b.n	80004b2 <__aeabi_dadd+0x292>
 80004fc:	2900      	cmp	r1, #0
 80004fe:	d061      	beq.n	80005c4 <__aeabi_dadd+0x3a4>
 8000500:	4641      	mov	r1, r8
 8000502:	1b09      	subs	r1, r1, r4
 8000504:	2c00      	cmp	r4, #0
 8000506:	d100      	bne.n	800050a <__aeabi_dadd+0x2ea>
 8000508:	e0b9      	b.n	800067e <__aeabi_dadd+0x45e>
 800050a:	4c28      	ldr	r4, [pc, #160]	@ (80005ac <__aeabi_dadd+0x38c>)
 800050c:	45a0      	cmp	r8, r4
 800050e:	d100      	bne.n	8000512 <__aeabi_dadd+0x2f2>
 8000510:	e1a5      	b.n	800085e <__aeabi_dadd+0x63e>
 8000512:	2701      	movs	r7, #1
 8000514:	2938      	cmp	r1, #56	@ 0x38
 8000516:	dc13      	bgt.n	8000540 <__aeabi_dadd+0x320>
 8000518:	2480      	movs	r4, #128	@ 0x80
 800051a:	0424      	lsls	r4, r4, #16
 800051c:	4326      	orrs	r6, r4
 800051e:	291f      	cmp	r1, #31
 8000520:	dd00      	ble.n	8000524 <__aeabi_dadd+0x304>
 8000522:	e1c8      	b.n	80008b6 <__aeabi_dadd+0x696>
 8000524:	2420      	movs	r4, #32
 8000526:	0037      	movs	r7, r6
 8000528:	4648      	mov	r0, r9
 800052a:	1a64      	subs	r4, r4, r1
 800052c:	40a7      	lsls	r7, r4
 800052e:	40c8      	lsrs	r0, r1
 8000530:	4307      	orrs	r7, r0
 8000532:	4648      	mov	r0, r9
 8000534:	40a0      	lsls	r0, r4
 8000536:	40ce      	lsrs	r6, r1
 8000538:	1e44      	subs	r4, r0, #1
 800053a:	41a0      	sbcs	r0, r4
 800053c:	199b      	adds	r3, r3, r6
 800053e:	4307      	orrs	r7, r0
 8000540:	18bf      	adds	r7, r7, r2
 8000542:	4297      	cmp	r7, r2
 8000544:	4192      	sbcs	r2, r2
 8000546:	4252      	negs	r2, r2
 8000548:	4644      	mov	r4, r8
 800054a:	18d6      	adds	r6, r2, r3
 800054c:	e763      	b.n	8000416 <__aeabi_dadd+0x1f6>
 800054e:	0038      	movs	r0, r7
 8000550:	f000 fdf4 	bl	800113c <__clzsi2>
 8000554:	0003      	movs	r3, r0
 8000556:	3318      	adds	r3, #24
 8000558:	2b1f      	cmp	r3, #31
 800055a:	dc00      	bgt.n	800055e <__aeabi_dadd+0x33e>
 800055c:	e6bf      	b.n	80002de <__aeabi_dadd+0xbe>
 800055e:	003a      	movs	r2, r7
 8000560:	3808      	subs	r0, #8
 8000562:	4082      	lsls	r2, r0
 8000564:	429c      	cmp	r4, r3
 8000566:	dd00      	ble.n	800056a <__aeabi_dadd+0x34a>
 8000568:	e083      	b.n	8000672 <__aeabi_dadd+0x452>
 800056a:	1b1b      	subs	r3, r3, r4
 800056c:	1c58      	adds	r0, r3, #1
 800056e:	281f      	cmp	r0, #31
 8000570:	dc00      	bgt.n	8000574 <__aeabi_dadd+0x354>
 8000572:	e1b4      	b.n	80008de <__aeabi_dadd+0x6be>
 8000574:	0017      	movs	r7, r2
 8000576:	3b1f      	subs	r3, #31
 8000578:	40df      	lsrs	r7, r3
 800057a:	2820      	cmp	r0, #32
 800057c:	d005      	beq.n	800058a <__aeabi_dadd+0x36a>
 800057e:	2340      	movs	r3, #64	@ 0x40
 8000580:	1a1b      	subs	r3, r3, r0
 8000582:	409a      	lsls	r2, r3
 8000584:	1e53      	subs	r3, r2, #1
 8000586:	419a      	sbcs	r2, r3
 8000588:	4317      	orrs	r7, r2
 800058a:	2400      	movs	r4, #0
 800058c:	2f00      	cmp	r7, #0
 800058e:	d00a      	beq.n	80005a6 <__aeabi_dadd+0x386>
 8000590:	077b      	lsls	r3, r7, #29
 8000592:	d000      	beq.n	8000596 <__aeabi_dadd+0x376>
 8000594:	e6c4      	b.n	8000320 <__aeabi_dadd+0x100>
 8000596:	0026      	movs	r6, r4
 8000598:	e79e      	b.n	80004d8 <__aeabi_dadd+0x2b8>
 800059a:	464b      	mov	r3, r9
 800059c:	000c      	movs	r4, r1
 800059e:	08d8      	lsrs	r0, r3, #3
 80005a0:	e79b      	b.n	80004da <__aeabi_dadd+0x2ba>
 80005a2:	2700      	movs	r7, #0
 80005a4:	4c01      	ldr	r4, [pc, #4]	@ (80005ac <__aeabi_dadd+0x38c>)
 80005a6:	2600      	movs	r6, #0
 80005a8:	e783      	b.n	80004b2 <__aeabi_dadd+0x292>
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	000007ff 	.word	0x000007ff
 80005b0:	ff7fffff 	.word	0xff7fffff
 80005b4:	000007fe 	.word	0x000007fe
 80005b8:	464b      	mov	r3, r9
 80005ba:	0777      	lsls	r7, r6, #29
 80005bc:	08d8      	lsrs	r0, r3, #3
 80005be:	4307      	orrs	r7, r0
 80005c0:	08f0      	lsrs	r0, r6, #3
 80005c2:	e791      	b.n	80004e8 <__aeabi_dadd+0x2c8>
 80005c4:	4fcd      	ldr	r7, [pc, #820]	@ (80008fc <__aeabi_dadd+0x6dc>)
 80005c6:	1c61      	adds	r1, r4, #1
 80005c8:	4239      	tst	r1, r7
 80005ca:	d16b      	bne.n	80006a4 <__aeabi_dadd+0x484>
 80005cc:	0031      	movs	r1, r6
 80005ce:	4648      	mov	r0, r9
 80005d0:	4301      	orrs	r1, r0
 80005d2:	2c00      	cmp	r4, #0
 80005d4:	d000      	beq.n	80005d8 <__aeabi_dadd+0x3b8>
 80005d6:	e14b      	b.n	8000870 <__aeabi_dadd+0x650>
 80005d8:	001f      	movs	r7, r3
 80005da:	4317      	orrs	r7, r2
 80005dc:	2900      	cmp	r1, #0
 80005de:	d100      	bne.n	80005e2 <__aeabi_dadd+0x3c2>
 80005e0:	e181      	b.n	80008e6 <__aeabi_dadd+0x6c6>
 80005e2:	2f00      	cmp	r7, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_dadd+0x3c8>
 80005e6:	e74c      	b.n	8000482 <__aeabi_dadd+0x262>
 80005e8:	444a      	add	r2, r9
 80005ea:	454a      	cmp	r2, r9
 80005ec:	4180      	sbcs	r0, r0
 80005ee:	18f6      	adds	r6, r6, r3
 80005f0:	4240      	negs	r0, r0
 80005f2:	1836      	adds	r6, r6, r0
 80005f4:	0233      	lsls	r3, r6, #8
 80005f6:	d500      	bpl.n	80005fa <__aeabi_dadd+0x3da>
 80005f8:	e1b0      	b.n	800095c <__aeabi_dadd+0x73c>
 80005fa:	0017      	movs	r7, r2
 80005fc:	4691      	mov	r9, r2
 80005fe:	4337      	orrs	r7, r6
 8000600:	d000      	beq.n	8000604 <__aeabi_dadd+0x3e4>
 8000602:	e73e      	b.n	8000482 <__aeabi_dadd+0x262>
 8000604:	2600      	movs	r6, #0
 8000606:	e754      	b.n	80004b2 <__aeabi_dadd+0x292>
 8000608:	4649      	mov	r1, r9
 800060a:	1a89      	subs	r1, r1, r2
 800060c:	4688      	mov	r8, r1
 800060e:	45c1      	cmp	r9, r8
 8000610:	41bf      	sbcs	r7, r7
 8000612:	1af1      	subs	r1, r6, r3
 8000614:	427f      	negs	r7, r7
 8000616:	1bc9      	subs	r1, r1, r7
 8000618:	020f      	lsls	r7, r1, #8
 800061a:	d461      	bmi.n	80006e0 <__aeabi_dadd+0x4c0>
 800061c:	4647      	mov	r7, r8
 800061e:	430f      	orrs	r7, r1
 8000620:	d100      	bne.n	8000624 <__aeabi_dadd+0x404>
 8000622:	e0bd      	b.n	80007a0 <__aeabi_dadd+0x580>
 8000624:	000e      	movs	r6, r1
 8000626:	4647      	mov	r7, r8
 8000628:	e651      	b.n	80002ce <__aeabi_dadd+0xae>
 800062a:	4cb5      	ldr	r4, [pc, #724]	@ (8000900 <__aeabi_dadd+0x6e0>)
 800062c:	45a0      	cmp	r8, r4
 800062e:	d100      	bne.n	8000632 <__aeabi_dadd+0x412>
 8000630:	e100      	b.n	8000834 <__aeabi_dadd+0x614>
 8000632:	2701      	movs	r7, #1
 8000634:	2938      	cmp	r1, #56	@ 0x38
 8000636:	dd00      	ble.n	800063a <__aeabi_dadd+0x41a>
 8000638:	e6b8      	b.n	80003ac <__aeabi_dadd+0x18c>
 800063a:	2480      	movs	r4, #128	@ 0x80
 800063c:	0424      	lsls	r4, r4, #16
 800063e:	4326      	orrs	r6, r4
 8000640:	e6a3      	b.n	800038a <__aeabi_dadd+0x16a>
 8000642:	4eb0      	ldr	r6, [pc, #704]	@ (8000904 <__aeabi_dadd+0x6e4>)
 8000644:	1ae4      	subs	r4, r4, r3
 8000646:	4016      	ands	r6, r2
 8000648:	077b      	lsls	r3, r7, #29
 800064a:	d000      	beq.n	800064e <__aeabi_dadd+0x42e>
 800064c:	e73f      	b.n	80004ce <__aeabi_dadd+0x2ae>
 800064e:	e743      	b.n	80004d8 <__aeabi_dadd+0x2b8>
 8000650:	000f      	movs	r7, r1
 8000652:	0018      	movs	r0, r3
 8000654:	3f20      	subs	r7, #32
 8000656:	40f8      	lsrs	r0, r7
 8000658:	4684      	mov	ip, r0
 800065a:	2920      	cmp	r1, #32
 800065c:	d003      	beq.n	8000666 <__aeabi_dadd+0x446>
 800065e:	2740      	movs	r7, #64	@ 0x40
 8000660:	1a79      	subs	r1, r7, r1
 8000662:	408b      	lsls	r3, r1
 8000664:	431a      	orrs	r2, r3
 8000666:	1e53      	subs	r3, r2, #1
 8000668:	419a      	sbcs	r2, r3
 800066a:	4663      	mov	r3, ip
 800066c:	0017      	movs	r7, r2
 800066e:	431f      	orrs	r7, r3
 8000670:	e622      	b.n	80002b8 <__aeabi_dadd+0x98>
 8000672:	48a4      	ldr	r0, [pc, #656]	@ (8000904 <__aeabi_dadd+0x6e4>)
 8000674:	1ae1      	subs	r1, r4, r3
 8000676:	4010      	ands	r0, r2
 8000678:	0747      	lsls	r7, r0, #29
 800067a:	08c0      	lsrs	r0, r0, #3
 800067c:	e707      	b.n	800048e <__aeabi_dadd+0x26e>
 800067e:	0034      	movs	r4, r6
 8000680:	4648      	mov	r0, r9
 8000682:	4304      	orrs	r4, r0
 8000684:	d100      	bne.n	8000688 <__aeabi_dadd+0x468>
 8000686:	e0fa      	b.n	800087e <__aeabi_dadd+0x65e>
 8000688:	1e4c      	subs	r4, r1, #1
 800068a:	2901      	cmp	r1, #1
 800068c:	d100      	bne.n	8000690 <__aeabi_dadd+0x470>
 800068e:	e0d7      	b.n	8000840 <__aeabi_dadd+0x620>
 8000690:	4f9b      	ldr	r7, [pc, #620]	@ (8000900 <__aeabi_dadd+0x6e0>)
 8000692:	42b9      	cmp	r1, r7
 8000694:	d100      	bne.n	8000698 <__aeabi_dadd+0x478>
 8000696:	e0e2      	b.n	800085e <__aeabi_dadd+0x63e>
 8000698:	2701      	movs	r7, #1
 800069a:	2c38      	cmp	r4, #56	@ 0x38
 800069c:	dd00      	ble.n	80006a0 <__aeabi_dadd+0x480>
 800069e:	e74f      	b.n	8000540 <__aeabi_dadd+0x320>
 80006a0:	0021      	movs	r1, r4
 80006a2:	e73c      	b.n	800051e <__aeabi_dadd+0x2fe>
 80006a4:	4c96      	ldr	r4, [pc, #600]	@ (8000900 <__aeabi_dadd+0x6e0>)
 80006a6:	42a1      	cmp	r1, r4
 80006a8:	d100      	bne.n	80006ac <__aeabi_dadd+0x48c>
 80006aa:	e0dd      	b.n	8000868 <__aeabi_dadd+0x648>
 80006ac:	444a      	add	r2, r9
 80006ae:	454a      	cmp	r2, r9
 80006b0:	4180      	sbcs	r0, r0
 80006b2:	18f3      	adds	r3, r6, r3
 80006b4:	4240      	negs	r0, r0
 80006b6:	1818      	adds	r0, r3, r0
 80006b8:	07c7      	lsls	r7, r0, #31
 80006ba:	0852      	lsrs	r2, r2, #1
 80006bc:	4317      	orrs	r7, r2
 80006be:	0846      	lsrs	r6, r0, #1
 80006c0:	0752      	lsls	r2, r2, #29
 80006c2:	d005      	beq.n	80006d0 <__aeabi_dadd+0x4b0>
 80006c4:	220f      	movs	r2, #15
 80006c6:	000c      	movs	r4, r1
 80006c8:	403a      	ands	r2, r7
 80006ca:	2a04      	cmp	r2, #4
 80006cc:	d000      	beq.n	80006d0 <__aeabi_dadd+0x4b0>
 80006ce:	e62c      	b.n	800032a <__aeabi_dadd+0x10a>
 80006d0:	0776      	lsls	r6, r6, #29
 80006d2:	08ff      	lsrs	r7, r7, #3
 80006d4:	4337      	orrs	r7, r6
 80006d6:	0900      	lsrs	r0, r0, #4
 80006d8:	e6d9      	b.n	800048e <__aeabi_dadd+0x26e>
 80006da:	2700      	movs	r7, #0
 80006dc:	2600      	movs	r6, #0
 80006de:	e6e8      	b.n	80004b2 <__aeabi_dadd+0x292>
 80006e0:	4649      	mov	r1, r9
 80006e2:	1a57      	subs	r7, r2, r1
 80006e4:	42ba      	cmp	r2, r7
 80006e6:	4192      	sbcs	r2, r2
 80006e8:	1b9e      	subs	r6, r3, r6
 80006ea:	4252      	negs	r2, r2
 80006ec:	4665      	mov	r5, ip
 80006ee:	1ab6      	subs	r6, r6, r2
 80006f0:	e5ed      	b.n	80002ce <__aeabi_dadd+0xae>
 80006f2:	2900      	cmp	r1, #0
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x4d8>
 80006f6:	e0c6      	b.n	8000886 <__aeabi_dadd+0x666>
 80006f8:	2f00      	cmp	r7, #0
 80006fa:	d167      	bne.n	80007cc <__aeabi_dadd+0x5ac>
 80006fc:	2680      	movs	r6, #128	@ 0x80
 80006fe:	2500      	movs	r5, #0
 8000700:	4c7f      	ldr	r4, [pc, #508]	@ (8000900 <__aeabi_dadd+0x6e0>)
 8000702:	0336      	lsls	r6, r6, #12
 8000704:	e6d5      	b.n	80004b2 <__aeabi_dadd+0x292>
 8000706:	4665      	mov	r5, ip
 8000708:	000c      	movs	r4, r1
 800070a:	001e      	movs	r6, r3
 800070c:	08d0      	lsrs	r0, r2, #3
 800070e:	e6e4      	b.n	80004da <__aeabi_dadd+0x2ba>
 8000710:	444a      	add	r2, r9
 8000712:	454a      	cmp	r2, r9
 8000714:	4180      	sbcs	r0, r0
 8000716:	18f3      	adds	r3, r6, r3
 8000718:	4240      	negs	r0, r0
 800071a:	1818      	adds	r0, r3, r0
 800071c:	0011      	movs	r1, r2
 800071e:	0203      	lsls	r3, r0, #8
 8000720:	d400      	bmi.n	8000724 <__aeabi_dadd+0x504>
 8000722:	e096      	b.n	8000852 <__aeabi_dadd+0x632>
 8000724:	4b77      	ldr	r3, [pc, #476]	@ (8000904 <__aeabi_dadd+0x6e4>)
 8000726:	0849      	lsrs	r1, r1, #1
 8000728:	4018      	ands	r0, r3
 800072a:	07c3      	lsls	r3, r0, #31
 800072c:	430b      	orrs	r3, r1
 800072e:	0844      	lsrs	r4, r0, #1
 8000730:	0749      	lsls	r1, r1, #29
 8000732:	d100      	bne.n	8000736 <__aeabi_dadd+0x516>
 8000734:	e129      	b.n	800098a <__aeabi_dadd+0x76a>
 8000736:	220f      	movs	r2, #15
 8000738:	401a      	ands	r2, r3
 800073a:	2a04      	cmp	r2, #4
 800073c:	d100      	bne.n	8000740 <__aeabi_dadd+0x520>
 800073e:	e0ea      	b.n	8000916 <__aeabi_dadd+0x6f6>
 8000740:	1d1f      	adds	r7, r3, #4
 8000742:	429f      	cmp	r7, r3
 8000744:	41b6      	sbcs	r6, r6
 8000746:	4276      	negs	r6, r6
 8000748:	1936      	adds	r6, r6, r4
 800074a:	2402      	movs	r4, #2
 800074c:	e6c4      	b.n	80004d8 <__aeabi_dadd+0x2b8>
 800074e:	4649      	mov	r1, r9
 8000750:	1a8f      	subs	r7, r1, r2
 8000752:	45b9      	cmp	r9, r7
 8000754:	4180      	sbcs	r0, r0
 8000756:	1af6      	subs	r6, r6, r3
 8000758:	4240      	negs	r0, r0
 800075a:	1a36      	subs	r6, r6, r0
 800075c:	0233      	lsls	r3, r6, #8
 800075e:	d406      	bmi.n	800076e <__aeabi_dadd+0x54e>
 8000760:	0773      	lsls	r3, r6, #29
 8000762:	08ff      	lsrs	r7, r7, #3
 8000764:	2101      	movs	r1, #1
 8000766:	431f      	orrs	r7, r3
 8000768:	08f0      	lsrs	r0, r6, #3
 800076a:	e690      	b.n	800048e <__aeabi_dadd+0x26e>
 800076c:	4665      	mov	r5, ip
 800076e:	2401      	movs	r4, #1
 8000770:	e5ab      	b.n	80002ca <__aeabi_dadd+0xaa>
 8000772:	464b      	mov	r3, r9
 8000774:	0777      	lsls	r7, r6, #29
 8000776:	08d8      	lsrs	r0, r3, #3
 8000778:	4307      	orrs	r7, r0
 800077a:	08f0      	lsrs	r0, r6, #3
 800077c:	e6b4      	b.n	80004e8 <__aeabi_dadd+0x2c8>
 800077e:	000f      	movs	r7, r1
 8000780:	0018      	movs	r0, r3
 8000782:	3f20      	subs	r7, #32
 8000784:	40f8      	lsrs	r0, r7
 8000786:	4684      	mov	ip, r0
 8000788:	2920      	cmp	r1, #32
 800078a:	d003      	beq.n	8000794 <__aeabi_dadd+0x574>
 800078c:	2740      	movs	r7, #64	@ 0x40
 800078e:	1a79      	subs	r1, r7, r1
 8000790:	408b      	lsls	r3, r1
 8000792:	431a      	orrs	r2, r3
 8000794:	1e53      	subs	r3, r2, #1
 8000796:	419a      	sbcs	r2, r3
 8000798:	4663      	mov	r3, ip
 800079a:	0017      	movs	r7, r2
 800079c:	431f      	orrs	r7, r3
 800079e:	e635      	b.n	800040c <__aeabi_dadd+0x1ec>
 80007a0:	2500      	movs	r5, #0
 80007a2:	2400      	movs	r4, #0
 80007a4:	2600      	movs	r6, #0
 80007a6:	e684      	b.n	80004b2 <__aeabi_dadd+0x292>
 80007a8:	000c      	movs	r4, r1
 80007aa:	0035      	movs	r5, r6
 80007ac:	3c20      	subs	r4, #32
 80007ae:	40e5      	lsrs	r5, r4
 80007b0:	2920      	cmp	r1, #32
 80007b2:	d005      	beq.n	80007c0 <__aeabi_dadd+0x5a0>
 80007b4:	2440      	movs	r4, #64	@ 0x40
 80007b6:	1a61      	subs	r1, r4, r1
 80007b8:	408e      	lsls	r6, r1
 80007ba:	4649      	mov	r1, r9
 80007bc:	4331      	orrs	r1, r6
 80007be:	4689      	mov	r9, r1
 80007c0:	4648      	mov	r0, r9
 80007c2:	1e41      	subs	r1, r0, #1
 80007c4:	4188      	sbcs	r0, r1
 80007c6:	0007      	movs	r7, r0
 80007c8:	432f      	orrs	r7, r5
 80007ca:	e5ef      	b.n	80003ac <__aeabi_dadd+0x18c>
 80007cc:	08d2      	lsrs	r2, r2, #3
 80007ce:	075f      	lsls	r7, r3, #29
 80007d0:	4665      	mov	r5, ip
 80007d2:	4317      	orrs	r7, r2
 80007d4:	08d8      	lsrs	r0, r3, #3
 80007d6:	e687      	b.n	80004e8 <__aeabi_dadd+0x2c8>
 80007d8:	1a17      	subs	r7, r2, r0
 80007da:	42ba      	cmp	r2, r7
 80007dc:	4192      	sbcs	r2, r2
 80007de:	1b9e      	subs	r6, r3, r6
 80007e0:	4252      	negs	r2, r2
 80007e2:	1ab6      	subs	r6, r6, r2
 80007e4:	0233      	lsls	r3, r6, #8
 80007e6:	d4c1      	bmi.n	800076c <__aeabi_dadd+0x54c>
 80007e8:	0773      	lsls	r3, r6, #29
 80007ea:	08ff      	lsrs	r7, r7, #3
 80007ec:	4665      	mov	r5, ip
 80007ee:	2101      	movs	r1, #1
 80007f0:	431f      	orrs	r7, r3
 80007f2:	08f0      	lsrs	r0, r6, #3
 80007f4:	e64b      	b.n	800048e <__aeabi_dadd+0x26e>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	d07b      	beq.n	80008f2 <__aeabi_dadd+0x6d2>
 80007fa:	4665      	mov	r5, ip
 80007fc:	001e      	movs	r6, r3
 80007fe:	4691      	mov	r9, r2
 8000800:	e63f      	b.n	8000482 <__aeabi_dadd+0x262>
 8000802:	1a81      	subs	r1, r0, r2
 8000804:	4688      	mov	r8, r1
 8000806:	45c1      	cmp	r9, r8
 8000808:	41a4      	sbcs	r4, r4
 800080a:	1af1      	subs	r1, r6, r3
 800080c:	4264      	negs	r4, r4
 800080e:	1b09      	subs	r1, r1, r4
 8000810:	2480      	movs	r4, #128	@ 0x80
 8000812:	0424      	lsls	r4, r4, #16
 8000814:	4221      	tst	r1, r4
 8000816:	d077      	beq.n	8000908 <__aeabi_dadd+0x6e8>
 8000818:	1a10      	subs	r0, r2, r0
 800081a:	4282      	cmp	r2, r0
 800081c:	4192      	sbcs	r2, r2
 800081e:	0007      	movs	r7, r0
 8000820:	1b9e      	subs	r6, r3, r6
 8000822:	4252      	negs	r2, r2
 8000824:	1ab6      	subs	r6, r6, r2
 8000826:	4337      	orrs	r7, r6
 8000828:	d000      	beq.n	800082c <__aeabi_dadd+0x60c>
 800082a:	e0a0      	b.n	800096e <__aeabi_dadd+0x74e>
 800082c:	4665      	mov	r5, ip
 800082e:	2400      	movs	r4, #0
 8000830:	2600      	movs	r6, #0
 8000832:	e63e      	b.n	80004b2 <__aeabi_dadd+0x292>
 8000834:	075f      	lsls	r7, r3, #29
 8000836:	08d2      	lsrs	r2, r2, #3
 8000838:	4665      	mov	r5, ip
 800083a:	4317      	orrs	r7, r2
 800083c:	08d8      	lsrs	r0, r3, #3
 800083e:	e653      	b.n	80004e8 <__aeabi_dadd+0x2c8>
 8000840:	1881      	adds	r1, r0, r2
 8000842:	4291      	cmp	r1, r2
 8000844:	4192      	sbcs	r2, r2
 8000846:	18f0      	adds	r0, r6, r3
 8000848:	4252      	negs	r2, r2
 800084a:	1880      	adds	r0, r0, r2
 800084c:	0203      	lsls	r3, r0, #8
 800084e:	d500      	bpl.n	8000852 <__aeabi_dadd+0x632>
 8000850:	e768      	b.n	8000724 <__aeabi_dadd+0x504>
 8000852:	0747      	lsls	r7, r0, #29
 8000854:	08c9      	lsrs	r1, r1, #3
 8000856:	430f      	orrs	r7, r1
 8000858:	08c0      	lsrs	r0, r0, #3
 800085a:	2101      	movs	r1, #1
 800085c:	e617      	b.n	800048e <__aeabi_dadd+0x26e>
 800085e:	08d2      	lsrs	r2, r2, #3
 8000860:	075f      	lsls	r7, r3, #29
 8000862:	4317      	orrs	r7, r2
 8000864:	08d8      	lsrs	r0, r3, #3
 8000866:	e63f      	b.n	80004e8 <__aeabi_dadd+0x2c8>
 8000868:	000c      	movs	r4, r1
 800086a:	2600      	movs	r6, #0
 800086c:	2700      	movs	r7, #0
 800086e:	e620      	b.n	80004b2 <__aeabi_dadd+0x292>
 8000870:	2900      	cmp	r1, #0
 8000872:	d156      	bne.n	8000922 <__aeabi_dadd+0x702>
 8000874:	075f      	lsls	r7, r3, #29
 8000876:	08d2      	lsrs	r2, r2, #3
 8000878:	4317      	orrs	r7, r2
 800087a:	08d8      	lsrs	r0, r3, #3
 800087c:	e634      	b.n	80004e8 <__aeabi_dadd+0x2c8>
 800087e:	000c      	movs	r4, r1
 8000880:	001e      	movs	r6, r3
 8000882:	08d0      	lsrs	r0, r2, #3
 8000884:	e629      	b.n	80004da <__aeabi_dadd+0x2ba>
 8000886:	08c1      	lsrs	r1, r0, #3
 8000888:	0770      	lsls	r0, r6, #29
 800088a:	4301      	orrs	r1, r0
 800088c:	08f0      	lsrs	r0, r6, #3
 800088e:	2f00      	cmp	r7, #0
 8000890:	d062      	beq.n	8000958 <__aeabi_dadd+0x738>
 8000892:	2480      	movs	r4, #128	@ 0x80
 8000894:	0324      	lsls	r4, r4, #12
 8000896:	4220      	tst	r0, r4
 8000898:	d007      	beq.n	80008aa <__aeabi_dadd+0x68a>
 800089a:	08de      	lsrs	r6, r3, #3
 800089c:	4226      	tst	r6, r4
 800089e:	d104      	bne.n	80008aa <__aeabi_dadd+0x68a>
 80008a0:	4665      	mov	r5, ip
 80008a2:	0030      	movs	r0, r6
 80008a4:	08d1      	lsrs	r1, r2, #3
 80008a6:	075b      	lsls	r3, r3, #29
 80008a8:	4319      	orrs	r1, r3
 80008aa:	0f4f      	lsrs	r7, r1, #29
 80008ac:	00c9      	lsls	r1, r1, #3
 80008ae:	08c9      	lsrs	r1, r1, #3
 80008b0:	077f      	lsls	r7, r7, #29
 80008b2:	430f      	orrs	r7, r1
 80008b4:	e618      	b.n	80004e8 <__aeabi_dadd+0x2c8>
 80008b6:	000c      	movs	r4, r1
 80008b8:	0030      	movs	r0, r6
 80008ba:	3c20      	subs	r4, #32
 80008bc:	40e0      	lsrs	r0, r4
 80008be:	4684      	mov	ip, r0
 80008c0:	2920      	cmp	r1, #32
 80008c2:	d005      	beq.n	80008d0 <__aeabi_dadd+0x6b0>
 80008c4:	2440      	movs	r4, #64	@ 0x40
 80008c6:	1a61      	subs	r1, r4, r1
 80008c8:	408e      	lsls	r6, r1
 80008ca:	4649      	mov	r1, r9
 80008cc:	4331      	orrs	r1, r6
 80008ce:	4689      	mov	r9, r1
 80008d0:	4648      	mov	r0, r9
 80008d2:	1e41      	subs	r1, r0, #1
 80008d4:	4188      	sbcs	r0, r1
 80008d6:	4661      	mov	r1, ip
 80008d8:	0007      	movs	r7, r0
 80008da:	430f      	orrs	r7, r1
 80008dc:	e630      	b.n	8000540 <__aeabi_dadd+0x320>
 80008de:	2120      	movs	r1, #32
 80008e0:	2700      	movs	r7, #0
 80008e2:	1a09      	subs	r1, r1, r0
 80008e4:	e50e      	b.n	8000304 <__aeabi_dadd+0xe4>
 80008e6:	001e      	movs	r6, r3
 80008e8:	2f00      	cmp	r7, #0
 80008ea:	d000      	beq.n	80008ee <__aeabi_dadd+0x6ce>
 80008ec:	e522      	b.n	8000334 <__aeabi_dadd+0x114>
 80008ee:	2400      	movs	r4, #0
 80008f0:	e758      	b.n	80007a4 <__aeabi_dadd+0x584>
 80008f2:	2500      	movs	r5, #0
 80008f4:	2400      	movs	r4, #0
 80008f6:	2600      	movs	r6, #0
 80008f8:	e5db      	b.n	80004b2 <__aeabi_dadd+0x292>
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	000007fe 	.word	0x000007fe
 8000900:	000007ff 	.word	0x000007ff
 8000904:	ff7fffff 	.word	0xff7fffff
 8000908:	4647      	mov	r7, r8
 800090a:	430f      	orrs	r7, r1
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x6f0>
 800090e:	e747      	b.n	80007a0 <__aeabi_dadd+0x580>
 8000910:	000e      	movs	r6, r1
 8000912:	46c1      	mov	r9, r8
 8000914:	e5b5      	b.n	8000482 <__aeabi_dadd+0x262>
 8000916:	08df      	lsrs	r7, r3, #3
 8000918:	0764      	lsls	r4, r4, #29
 800091a:	2102      	movs	r1, #2
 800091c:	4327      	orrs	r7, r4
 800091e:	0900      	lsrs	r0, r0, #4
 8000920:	e5b5      	b.n	800048e <__aeabi_dadd+0x26e>
 8000922:	0019      	movs	r1, r3
 8000924:	08c0      	lsrs	r0, r0, #3
 8000926:	0777      	lsls	r7, r6, #29
 8000928:	4307      	orrs	r7, r0
 800092a:	4311      	orrs	r1, r2
 800092c:	08f0      	lsrs	r0, r6, #3
 800092e:	2900      	cmp	r1, #0
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x714>
 8000932:	e5d9      	b.n	80004e8 <__aeabi_dadd+0x2c8>
 8000934:	2180      	movs	r1, #128	@ 0x80
 8000936:	0309      	lsls	r1, r1, #12
 8000938:	4208      	tst	r0, r1
 800093a:	d007      	beq.n	800094c <__aeabi_dadd+0x72c>
 800093c:	08dc      	lsrs	r4, r3, #3
 800093e:	420c      	tst	r4, r1
 8000940:	d104      	bne.n	800094c <__aeabi_dadd+0x72c>
 8000942:	08d2      	lsrs	r2, r2, #3
 8000944:	075b      	lsls	r3, r3, #29
 8000946:	431a      	orrs	r2, r3
 8000948:	0017      	movs	r7, r2
 800094a:	0020      	movs	r0, r4
 800094c:	0f7b      	lsrs	r3, r7, #29
 800094e:	00ff      	lsls	r7, r7, #3
 8000950:	08ff      	lsrs	r7, r7, #3
 8000952:	075b      	lsls	r3, r3, #29
 8000954:	431f      	orrs	r7, r3
 8000956:	e5c7      	b.n	80004e8 <__aeabi_dadd+0x2c8>
 8000958:	000f      	movs	r7, r1
 800095a:	e5c5      	b.n	80004e8 <__aeabi_dadd+0x2c8>
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <__aeabi_dadd+0x788>)
 800095e:	08d2      	lsrs	r2, r2, #3
 8000960:	4033      	ands	r3, r6
 8000962:	075f      	lsls	r7, r3, #29
 8000964:	025b      	lsls	r3, r3, #9
 8000966:	2401      	movs	r4, #1
 8000968:	4317      	orrs	r7, r2
 800096a:	0b1e      	lsrs	r6, r3, #12
 800096c:	e5a1      	b.n	80004b2 <__aeabi_dadd+0x292>
 800096e:	4226      	tst	r6, r4
 8000970:	d012      	beq.n	8000998 <__aeabi_dadd+0x778>
 8000972:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <__aeabi_dadd+0x788>)
 8000974:	4665      	mov	r5, ip
 8000976:	0002      	movs	r2, r0
 8000978:	2401      	movs	r4, #1
 800097a:	401e      	ands	r6, r3
 800097c:	e4e6      	b.n	800034c <__aeabi_dadd+0x12c>
 800097e:	0021      	movs	r1, r4
 8000980:	e585      	b.n	800048e <__aeabi_dadd+0x26e>
 8000982:	0017      	movs	r7, r2
 8000984:	e5a8      	b.n	80004d8 <__aeabi_dadd+0x2b8>
 8000986:	003a      	movs	r2, r7
 8000988:	e4d4      	b.n	8000334 <__aeabi_dadd+0x114>
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	0764      	lsls	r4, r4, #29
 800098e:	431c      	orrs	r4, r3
 8000990:	0027      	movs	r7, r4
 8000992:	2102      	movs	r1, #2
 8000994:	0900      	lsrs	r0, r0, #4
 8000996:	e57a      	b.n	800048e <__aeabi_dadd+0x26e>
 8000998:	08c0      	lsrs	r0, r0, #3
 800099a:	0777      	lsls	r7, r6, #29
 800099c:	4307      	orrs	r7, r0
 800099e:	4665      	mov	r5, ip
 80009a0:	2100      	movs	r1, #0
 80009a2:	08f0      	lsrs	r0, r6, #3
 80009a4:	e573      	b.n	800048e <__aeabi_dadd+0x26e>
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	ff7fffff 	.word	0xff7fffff

080009ac <__aeabi_ddiv>:
 80009ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ae:	46de      	mov	lr, fp
 80009b0:	4645      	mov	r5, r8
 80009b2:	4657      	mov	r7, sl
 80009b4:	464e      	mov	r6, r9
 80009b6:	b5e0      	push	{r5, r6, r7, lr}
 80009b8:	b087      	sub	sp, #28
 80009ba:	9200      	str	r2, [sp, #0]
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	030b      	lsls	r3, r1, #12
 80009c0:	0b1b      	lsrs	r3, r3, #12
 80009c2:	469b      	mov	fp, r3
 80009c4:	0fca      	lsrs	r2, r1, #31
 80009c6:	004b      	lsls	r3, r1, #1
 80009c8:	0004      	movs	r4, r0
 80009ca:	4680      	mov	r8, r0
 80009cc:	0d5b      	lsrs	r3, r3, #21
 80009ce:	9202      	str	r2, [sp, #8]
 80009d0:	d100      	bne.n	80009d4 <__aeabi_ddiv+0x28>
 80009d2:	e098      	b.n	8000b06 <__aeabi_ddiv+0x15a>
 80009d4:	4a7c      	ldr	r2, [pc, #496]	@ (8000bc8 <__aeabi_ddiv+0x21c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d037      	beq.n	8000a4a <__aeabi_ddiv+0x9e>
 80009da:	4659      	mov	r1, fp
 80009dc:	0f42      	lsrs	r2, r0, #29
 80009de:	00c9      	lsls	r1, r1, #3
 80009e0:	430a      	orrs	r2, r1
 80009e2:	2180      	movs	r1, #128	@ 0x80
 80009e4:	0409      	lsls	r1, r1, #16
 80009e6:	4311      	orrs	r1, r2
 80009e8:	00c2      	lsls	r2, r0, #3
 80009ea:	4690      	mov	r8, r2
 80009ec:	4a77      	ldr	r2, [pc, #476]	@ (8000bcc <__aeabi_ddiv+0x220>)
 80009ee:	4689      	mov	r9, r1
 80009f0:	4692      	mov	sl, r2
 80009f2:	449a      	add	sl, r3
 80009f4:	2300      	movs	r3, #0
 80009f6:	2400      	movs	r4, #0
 80009f8:	9303      	str	r3, [sp, #12]
 80009fa:	9e00      	ldr	r6, [sp, #0]
 80009fc:	9f01      	ldr	r7, [sp, #4]
 80009fe:	033b      	lsls	r3, r7, #12
 8000a00:	0b1b      	lsrs	r3, r3, #12
 8000a02:	469b      	mov	fp, r3
 8000a04:	007b      	lsls	r3, r7, #1
 8000a06:	0030      	movs	r0, r6
 8000a08:	0d5b      	lsrs	r3, r3, #21
 8000a0a:	0ffd      	lsrs	r5, r7, #31
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d059      	beq.n	8000ac4 <__aeabi_ddiv+0x118>
 8000a10:	4a6d      	ldr	r2, [pc, #436]	@ (8000bc8 <__aeabi_ddiv+0x21c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d048      	beq.n	8000aa8 <__aeabi_ddiv+0xfc>
 8000a16:	4659      	mov	r1, fp
 8000a18:	0f72      	lsrs	r2, r6, #29
 8000a1a:	00c9      	lsls	r1, r1, #3
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	2180      	movs	r1, #128	@ 0x80
 8000a20:	0409      	lsls	r1, r1, #16
 8000a22:	4311      	orrs	r1, r2
 8000a24:	468b      	mov	fp, r1
 8000a26:	4969      	ldr	r1, [pc, #420]	@ (8000bcc <__aeabi_ddiv+0x220>)
 8000a28:	00f2      	lsls	r2, r6, #3
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	4651      	mov	r1, sl
 8000a2e:	4463      	add	r3, ip
 8000a30:	1acb      	subs	r3, r1, r3
 8000a32:	469a      	mov	sl, r3
 8000a34:	2100      	movs	r1, #0
 8000a36:	9e02      	ldr	r6, [sp, #8]
 8000a38:	406e      	eors	r6, r5
 8000a3a:	b2f6      	uxtb	r6, r6
 8000a3c:	2c0f      	cmp	r4, #15
 8000a3e:	d900      	bls.n	8000a42 <__aeabi_ddiv+0x96>
 8000a40:	e0ce      	b.n	8000be0 <__aeabi_ddiv+0x234>
 8000a42:	4b63      	ldr	r3, [pc, #396]	@ (8000bd0 <__aeabi_ddiv+0x224>)
 8000a44:	00a4      	lsls	r4, r4, #2
 8000a46:	591b      	ldr	r3, [r3, r4]
 8000a48:	469f      	mov	pc, r3
 8000a4a:	465a      	mov	r2, fp
 8000a4c:	4302      	orrs	r2, r0
 8000a4e:	4691      	mov	r9, r2
 8000a50:	d000      	beq.n	8000a54 <__aeabi_ddiv+0xa8>
 8000a52:	e090      	b.n	8000b76 <__aeabi_ddiv+0x1ca>
 8000a54:	469a      	mov	sl, r3
 8000a56:	2302      	movs	r3, #2
 8000a58:	4690      	mov	r8, r2
 8000a5a:	2408      	movs	r4, #8
 8000a5c:	9303      	str	r3, [sp, #12]
 8000a5e:	e7cc      	b.n	80009fa <__aeabi_ddiv+0x4e>
 8000a60:	46cb      	mov	fp, r9
 8000a62:	4642      	mov	r2, r8
 8000a64:	9d02      	ldr	r5, [sp, #8]
 8000a66:	9903      	ldr	r1, [sp, #12]
 8000a68:	2902      	cmp	r1, #2
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_ddiv+0xc2>
 8000a6c:	e1de      	b.n	8000e2c <__aeabi_ddiv+0x480>
 8000a6e:	2903      	cmp	r1, #3
 8000a70:	d100      	bne.n	8000a74 <__aeabi_ddiv+0xc8>
 8000a72:	e08d      	b.n	8000b90 <__aeabi_ddiv+0x1e4>
 8000a74:	2901      	cmp	r1, #1
 8000a76:	d000      	beq.n	8000a7a <__aeabi_ddiv+0xce>
 8000a78:	e179      	b.n	8000d6e <__aeabi_ddiv+0x3c2>
 8000a7a:	002e      	movs	r6, r5
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2300      	movs	r3, #0
 8000a80:	2400      	movs	r4, #0
 8000a82:	4690      	mov	r8, r2
 8000a84:	051b      	lsls	r3, r3, #20
 8000a86:	4323      	orrs	r3, r4
 8000a88:	07f6      	lsls	r6, r6, #31
 8000a8a:	4333      	orrs	r3, r6
 8000a8c:	4640      	mov	r0, r8
 8000a8e:	0019      	movs	r1, r3
 8000a90:	b007      	add	sp, #28
 8000a92:	bcf0      	pop	{r4, r5, r6, r7}
 8000a94:	46bb      	mov	fp, r7
 8000a96:	46b2      	mov	sl, r6
 8000a98:	46a9      	mov	r9, r5
 8000a9a:	46a0      	mov	r8, r4
 8000a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	4690      	mov	r8, r2
 8000aa4:	4b48      	ldr	r3, [pc, #288]	@ (8000bc8 <__aeabi_ddiv+0x21c>)
 8000aa6:	e7ed      	b.n	8000a84 <__aeabi_ddiv+0xd8>
 8000aa8:	465a      	mov	r2, fp
 8000aaa:	9b00      	ldr	r3, [sp, #0]
 8000aac:	431a      	orrs	r2, r3
 8000aae:	4b49      	ldr	r3, [pc, #292]	@ (8000bd4 <__aeabi_ddiv+0x228>)
 8000ab0:	469c      	mov	ip, r3
 8000ab2:	44e2      	add	sl, ip
 8000ab4:	2a00      	cmp	r2, #0
 8000ab6:	d159      	bne.n	8000b6c <__aeabi_ddiv+0x1c0>
 8000ab8:	2302      	movs	r3, #2
 8000aba:	431c      	orrs	r4, r3
 8000abc:	2300      	movs	r3, #0
 8000abe:	2102      	movs	r1, #2
 8000ac0:	469b      	mov	fp, r3
 8000ac2:	e7b8      	b.n	8000a36 <__aeabi_ddiv+0x8a>
 8000ac4:	465a      	mov	r2, fp
 8000ac6:	9b00      	ldr	r3, [sp, #0]
 8000ac8:	431a      	orrs	r2, r3
 8000aca:	d049      	beq.n	8000b60 <__aeabi_ddiv+0x1b4>
 8000acc:	465b      	mov	r3, fp
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_ddiv+0x128>
 8000ad2:	e19c      	b.n	8000e0e <__aeabi_ddiv+0x462>
 8000ad4:	4658      	mov	r0, fp
 8000ad6:	f000 fb31 	bl	800113c <__clzsi2>
 8000ada:	0002      	movs	r2, r0
 8000adc:	0003      	movs	r3, r0
 8000ade:	3a0b      	subs	r2, #11
 8000ae0:	271d      	movs	r7, #29
 8000ae2:	9e00      	ldr	r6, [sp, #0]
 8000ae4:	1aba      	subs	r2, r7, r2
 8000ae6:	0019      	movs	r1, r3
 8000ae8:	4658      	mov	r0, fp
 8000aea:	40d6      	lsrs	r6, r2
 8000aec:	3908      	subs	r1, #8
 8000aee:	4088      	lsls	r0, r1
 8000af0:	0032      	movs	r2, r6
 8000af2:	4302      	orrs	r2, r0
 8000af4:	4693      	mov	fp, r2
 8000af6:	9a00      	ldr	r2, [sp, #0]
 8000af8:	408a      	lsls	r2, r1
 8000afa:	4937      	ldr	r1, [pc, #220]	@ (8000bd8 <__aeabi_ddiv+0x22c>)
 8000afc:	4453      	add	r3, sl
 8000afe:	468a      	mov	sl, r1
 8000b00:	2100      	movs	r1, #0
 8000b02:	449a      	add	sl, r3
 8000b04:	e797      	b.n	8000a36 <__aeabi_ddiv+0x8a>
 8000b06:	465b      	mov	r3, fp
 8000b08:	4303      	orrs	r3, r0
 8000b0a:	4699      	mov	r9, r3
 8000b0c:	d021      	beq.n	8000b52 <__aeabi_ddiv+0x1a6>
 8000b0e:	465b      	mov	r3, fp
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d100      	bne.n	8000b16 <__aeabi_ddiv+0x16a>
 8000b14:	e169      	b.n	8000dea <__aeabi_ddiv+0x43e>
 8000b16:	4658      	mov	r0, fp
 8000b18:	f000 fb10 	bl	800113c <__clzsi2>
 8000b1c:	230b      	movs	r3, #11
 8000b1e:	425b      	negs	r3, r3
 8000b20:	469c      	mov	ip, r3
 8000b22:	0002      	movs	r2, r0
 8000b24:	4484      	add	ip, r0
 8000b26:	4666      	mov	r6, ip
 8000b28:	231d      	movs	r3, #29
 8000b2a:	1b9b      	subs	r3, r3, r6
 8000b2c:	0026      	movs	r6, r4
 8000b2e:	0011      	movs	r1, r2
 8000b30:	4658      	mov	r0, fp
 8000b32:	40de      	lsrs	r6, r3
 8000b34:	3908      	subs	r1, #8
 8000b36:	4088      	lsls	r0, r1
 8000b38:	0033      	movs	r3, r6
 8000b3a:	4303      	orrs	r3, r0
 8000b3c:	4699      	mov	r9, r3
 8000b3e:	0023      	movs	r3, r4
 8000b40:	408b      	lsls	r3, r1
 8000b42:	4698      	mov	r8, r3
 8000b44:	4b25      	ldr	r3, [pc, #148]	@ (8000bdc <__aeabi_ddiv+0x230>)
 8000b46:	2400      	movs	r4, #0
 8000b48:	1a9b      	subs	r3, r3, r2
 8000b4a:	469a      	mov	sl, r3
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	9303      	str	r3, [sp, #12]
 8000b50:	e753      	b.n	80009fa <__aeabi_ddiv+0x4e>
 8000b52:	2300      	movs	r3, #0
 8000b54:	4698      	mov	r8, r3
 8000b56:	469a      	mov	sl, r3
 8000b58:	3301      	adds	r3, #1
 8000b5a:	2404      	movs	r4, #4
 8000b5c:	9303      	str	r3, [sp, #12]
 8000b5e:	e74c      	b.n	80009fa <__aeabi_ddiv+0x4e>
 8000b60:	2301      	movs	r3, #1
 8000b62:	431c      	orrs	r4, r3
 8000b64:	2300      	movs	r3, #0
 8000b66:	2101      	movs	r1, #1
 8000b68:	469b      	mov	fp, r3
 8000b6a:	e764      	b.n	8000a36 <__aeabi_ddiv+0x8a>
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	0032      	movs	r2, r6
 8000b70:	2103      	movs	r1, #3
 8000b72:	431c      	orrs	r4, r3
 8000b74:	e75f      	b.n	8000a36 <__aeabi_ddiv+0x8a>
 8000b76:	469a      	mov	sl, r3
 8000b78:	2303      	movs	r3, #3
 8000b7a:	46d9      	mov	r9, fp
 8000b7c:	240c      	movs	r4, #12
 8000b7e:	9303      	str	r3, [sp, #12]
 8000b80:	e73b      	b.n	80009fa <__aeabi_ddiv+0x4e>
 8000b82:	2300      	movs	r3, #0
 8000b84:	2480      	movs	r4, #128	@ 0x80
 8000b86:	4698      	mov	r8, r3
 8000b88:	2600      	movs	r6, #0
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <__aeabi_ddiv+0x21c>)
 8000b8c:	0324      	lsls	r4, r4, #12
 8000b8e:	e779      	b.n	8000a84 <__aeabi_ddiv+0xd8>
 8000b90:	2480      	movs	r4, #128	@ 0x80
 8000b92:	465b      	mov	r3, fp
 8000b94:	0324      	lsls	r4, r4, #12
 8000b96:	431c      	orrs	r4, r3
 8000b98:	0324      	lsls	r4, r4, #12
 8000b9a:	002e      	movs	r6, r5
 8000b9c:	4690      	mov	r8, r2
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <__aeabi_ddiv+0x21c>)
 8000ba0:	0b24      	lsrs	r4, r4, #12
 8000ba2:	e76f      	b.n	8000a84 <__aeabi_ddiv+0xd8>
 8000ba4:	2480      	movs	r4, #128	@ 0x80
 8000ba6:	464b      	mov	r3, r9
 8000ba8:	0324      	lsls	r4, r4, #12
 8000baa:	4223      	tst	r3, r4
 8000bac:	d002      	beq.n	8000bb4 <__aeabi_ddiv+0x208>
 8000bae:	465b      	mov	r3, fp
 8000bb0:	4223      	tst	r3, r4
 8000bb2:	d0f0      	beq.n	8000b96 <__aeabi_ddiv+0x1ea>
 8000bb4:	2480      	movs	r4, #128	@ 0x80
 8000bb6:	464b      	mov	r3, r9
 8000bb8:	0324      	lsls	r4, r4, #12
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	0324      	lsls	r4, r4, #12
 8000bbe:	9e02      	ldr	r6, [sp, #8]
 8000bc0:	4b01      	ldr	r3, [pc, #4]	@ (8000bc8 <__aeabi_ddiv+0x21c>)
 8000bc2:	0b24      	lsrs	r4, r4, #12
 8000bc4:	e75e      	b.n	8000a84 <__aeabi_ddiv+0xd8>
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	000007ff 	.word	0x000007ff
 8000bcc:	fffffc01 	.word	0xfffffc01
 8000bd0:	08002af8 	.word	0x08002af8
 8000bd4:	fffff801 	.word	0xfffff801
 8000bd8:	000003f3 	.word	0x000003f3
 8000bdc:	fffffc0d 	.word	0xfffffc0d
 8000be0:	45cb      	cmp	fp, r9
 8000be2:	d200      	bcs.n	8000be6 <__aeabi_ddiv+0x23a>
 8000be4:	e0f8      	b.n	8000dd8 <__aeabi_ddiv+0x42c>
 8000be6:	d100      	bne.n	8000bea <__aeabi_ddiv+0x23e>
 8000be8:	e0f3      	b.n	8000dd2 <__aeabi_ddiv+0x426>
 8000bea:	2301      	movs	r3, #1
 8000bec:	425b      	negs	r3, r3
 8000bee:	469c      	mov	ip, r3
 8000bf0:	4644      	mov	r4, r8
 8000bf2:	4648      	mov	r0, r9
 8000bf4:	2500      	movs	r5, #0
 8000bf6:	44e2      	add	sl, ip
 8000bf8:	465b      	mov	r3, fp
 8000bfa:	0e17      	lsrs	r7, r2, #24
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	431f      	orrs	r7, r3
 8000c00:	0c19      	lsrs	r1, r3, #16
 8000c02:	043b      	lsls	r3, r7, #16
 8000c04:	0212      	lsls	r2, r2, #8
 8000c06:	9700      	str	r7, [sp, #0]
 8000c08:	0c1f      	lsrs	r7, r3, #16
 8000c0a:	4691      	mov	r9, r2
 8000c0c:	9102      	str	r1, [sp, #8]
 8000c0e:	9703      	str	r7, [sp, #12]
 8000c10:	f7ff fb00 	bl	8000214 <__aeabi_uidivmod>
 8000c14:	0002      	movs	r2, r0
 8000c16:	437a      	muls	r2, r7
 8000c18:	040b      	lsls	r3, r1, #16
 8000c1a:	0c21      	lsrs	r1, r4, #16
 8000c1c:	4680      	mov	r8, r0
 8000c1e:	4319      	orrs	r1, r3
 8000c20:	428a      	cmp	r2, r1
 8000c22:	d909      	bls.n	8000c38 <__aeabi_ddiv+0x28c>
 8000c24:	9f00      	ldr	r7, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	46bc      	mov	ip, r7
 8000c2a:	425b      	negs	r3, r3
 8000c2c:	4461      	add	r1, ip
 8000c2e:	469c      	mov	ip, r3
 8000c30:	44e0      	add	r8, ip
 8000c32:	428f      	cmp	r7, r1
 8000c34:	d800      	bhi.n	8000c38 <__aeabi_ddiv+0x28c>
 8000c36:	e15c      	b.n	8000ef2 <__aeabi_ddiv+0x546>
 8000c38:	1a88      	subs	r0, r1, r2
 8000c3a:	9902      	ldr	r1, [sp, #8]
 8000c3c:	f7ff faea 	bl	8000214 <__aeabi_uidivmod>
 8000c40:	9a03      	ldr	r2, [sp, #12]
 8000c42:	0424      	lsls	r4, r4, #16
 8000c44:	4342      	muls	r2, r0
 8000c46:	0409      	lsls	r1, r1, #16
 8000c48:	0c24      	lsrs	r4, r4, #16
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	430c      	orrs	r4, r1
 8000c4e:	42a2      	cmp	r2, r4
 8000c50:	d906      	bls.n	8000c60 <__aeabi_ddiv+0x2b4>
 8000c52:	9900      	ldr	r1, [sp, #0]
 8000c54:	3b01      	subs	r3, #1
 8000c56:	468c      	mov	ip, r1
 8000c58:	4464      	add	r4, ip
 8000c5a:	42a1      	cmp	r1, r4
 8000c5c:	d800      	bhi.n	8000c60 <__aeabi_ddiv+0x2b4>
 8000c5e:	e142      	b.n	8000ee6 <__aeabi_ddiv+0x53a>
 8000c60:	1aa0      	subs	r0, r4, r2
 8000c62:	4642      	mov	r2, r8
 8000c64:	0412      	lsls	r2, r2, #16
 8000c66:	431a      	orrs	r2, r3
 8000c68:	4693      	mov	fp, r2
 8000c6a:	464b      	mov	r3, r9
 8000c6c:	4659      	mov	r1, fp
 8000c6e:	0c1b      	lsrs	r3, r3, #16
 8000c70:	001f      	movs	r7, r3
 8000c72:	9304      	str	r3, [sp, #16]
 8000c74:	040b      	lsls	r3, r1, #16
 8000c76:	4649      	mov	r1, r9
 8000c78:	0409      	lsls	r1, r1, #16
 8000c7a:	0c09      	lsrs	r1, r1, #16
 8000c7c:	000c      	movs	r4, r1
 8000c7e:	0c1b      	lsrs	r3, r3, #16
 8000c80:	435c      	muls	r4, r3
 8000c82:	0c12      	lsrs	r2, r2, #16
 8000c84:	437b      	muls	r3, r7
 8000c86:	4688      	mov	r8, r1
 8000c88:	4351      	muls	r1, r2
 8000c8a:	437a      	muls	r2, r7
 8000c8c:	0c27      	lsrs	r7, r4, #16
 8000c8e:	46bc      	mov	ip, r7
 8000c90:	185b      	adds	r3, r3, r1
 8000c92:	4463      	add	r3, ip
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d903      	bls.n	8000ca0 <__aeabi_ddiv+0x2f4>
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	0249      	lsls	r1, r1, #9
 8000c9c:	468c      	mov	ip, r1
 8000c9e:	4462      	add	r2, ip
 8000ca0:	0c19      	lsrs	r1, r3, #16
 8000ca2:	0424      	lsls	r4, r4, #16
 8000ca4:	041b      	lsls	r3, r3, #16
 8000ca6:	0c24      	lsrs	r4, r4, #16
 8000ca8:	188a      	adds	r2, r1, r2
 8000caa:	191c      	adds	r4, r3, r4
 8000cac:	4290      	cmp	r0, r2
 8000cae:	d302      	bcc.n	8000cb6 <__aeabi_ddiv+0x30a>
 8000cb0:	d116      	bne.n	8000ce0 <__aeabi_ddiv+0x334>
 8000cb2:	42a5      	cmp	r5, r4
 8000cb4:	d214      	bcs.n	8000ce0 <__aeabi_ddiv+0x334>
 8000cb6:	465b      	mov	r3, fp
 8000cb8:	9f00      	ldr	r7, [sp, #0]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	444d      	add	r5, r9
 8000cbe:	9305      	str	r3, [sp, #20]
 8000cc0:	454d      	cmp	r5, r9
 8000cc2:	419b      	sbcs	r3, r3
 8000cc4:	46bc      	mov	ip, r7
 8000cc6:	425b      	negs	r3, r3
 8000cc8:	4463      	add	r3, ip
 8000cca:	18c0      	adds	r0, r0, r3
 8000ccc:	4287      	cmp	r7, r0
 8000cce:	d300      	bcc.n	8000cd2 <__aeabi_ddiv+0x326>
 8000cd0:	e102      	b.n	8000ed8 <__aeabi_ddiv+0x52c>
 8000cd2:	4282      	cmp	r2, r0
 8000cd4:	d900      	bls.n	8000cd8 <__aeabi_ddiv+0x32c>
 8000cd6:	e129      	b.n	8000f2c <__aeabi_ddiv+0x580>
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_ddiv+0x330>
 8000cda:	e124      	b.n	8000f26 <__aeabi_ddiv+0x57a>
 8000cdc:	9b05      	ldr	r3, [sp, #20]
 8000cde:	469b      	mov	fp, r3
 8000ce0:	1b2c      	subs	r4, r5, r4
 8000ce2:	42a5      	cmp	r5, r4
 8000ce4:	41ad      	sbcs	r5, r5
 8000ce6:	9b00      	ldr	r3, [sp, #0]
 8000ce8:	1a80      	subs	r0, r0, r2
 8000cea:	426d      	negs	r5, r5
 8000cec:	1b40      	subs	r0, r0, r5
 8000cee:	4283      	cmp	r3, r0
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_ddiv+0x348>
 8000cf2:	e10f      	b.n	8000f14 <__aeabi_ddiv+0x568>
 8000cf4:	9902      	ldr	r1, [sp, #8]
 8000cf6:	f7ff fa8d 	bl	8000214 <__aeabi_uidivmod>
 8000cfa:	9a03      	ldr	r2, [sp, #12]
 8000cfc:	040b      	lsls	r3, r1, #16
 8000cfe:	4342      	muls	r2, r0
 8000d00:	0c21      	lsrs	r1, r4, #16
 8000d02:	0005      	movs	r5, r0
 8000d04:	4319      	orrs	r1, r3
 8000d06:	428a      	cmp	r2, r1
 8000d08:	d900      	bls.n	8000d0c <__aeabi_ddiv+0x360>
 8000d0a:	e0cb      	b.n	8000ea4 <__aeabi_ddiv+0x4f8>
 8000d0c:	1a88      	subs	r0, r1, r2
 8000d0e:	9902      	ldr	r1, [sp, #8]
 8000d10:	f7ff fa80 	bl	8000214 <__aeabi_uidivmod>
 8000d14:	9a03      	ldr	r2, [sp, #12]
 8000d16:	0424      	lsls	r4, r4, #16
 8000d18:	4342      	muls	r2, r0
 8000d1a:	0409      	lsls	r1, r1, #16
 8000d1c:	0c24      	lsrs	r4, r4, #16
 8000d1e:	0003      	movs	r3, r0
 8000d20:	430c      	orrs	r4, r1
 8000d22:	42a2      	cmp	r2, r4
 8000d24:	d900      	bls.n	8000d28 <__aeabi_ddiv+0x37c>
 8000d26:	e0ca      	b.n	8000ebe <__aeabi_ddiv+0x512>
 8000d28:	4641      	mov	r1, r8
 8000d2a:	1aa4      	subs	r4, r4, r2
 8000d2c:	042a      	lsls	r2, r5, #16
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	9f04      	ldr	r7, [sp, #16]
 8000d32:	0413      	lsls	r3, r2, #16
 8000d34:	0c1b      	lsrs	r3, r3, #16
 8000d36:	4359      	muls	r1, r3
 8000d38:	4640      	mov	r0, r8
 8000d3a:	437b      	muls	r3, r7
 8000d3c:	469c      	mov	ip, r3
 8000d3e:	0c15      	lsrs	r5, r2, #16
 8000d40:	4368      	muls	r0, r5
 8000d42:	0c0b      	lsrs	r3, r1, #16
 8000d44:	4484      	add	ip, r0
 8000d46:	4463      	add	r3, ip
 8000d48:	437d      	muls	r5, r7
 8000d4a:	4298      	cmp	r0, r3
 8000d4c:	d903      	bls.n	8000d56 <__aeabi_ddiv+0x3aa>
 8000d4e:	2080      	movs	r0, #128	@ 0x80
 8000d50:	0240      	lsls	r0, r0, #9
 8000d52:	4684      	mov	ip, r0
 8000d54:	4465      	add	r5, ip
 8000d56:	0c18      	lsrs	r0, r3, #16
 8000d58:	0409      	lsls	r1, r1, #16
 8000d5a:	041b      	lsls	r3, r3, #16
 8000d5c:	0c09      	lsrs	r1, r1, #16
 8000d5e:	1940      	adds	r0, r0, r5
 8000d60:	185b      	adds	r3, r3, r1
 8000d62:	4284      	cmp	r4, r0
 8000d64:	d327      	bcc.n	8000db6 <__aeabi_ddiv+0x40a>
 8000d66:	d023      	beq.n	8000db0 <__aeabi_ddiv+0x404>
 8000d68:	2301      	movs	r3, #1
 8000d6a:	0035      	movs	r5, r6
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	4b94      	ldr	r3, [pc, #592]	@ (8000fc0 <__aeabi_ddiv+0x614>)
 8000d70:	4453      	add	r3, sl
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	dd60      	ble.n	8000e38 <__aeabi_ddiv+0x48c>
 8000d76:	0751      	lsls	r1, r2, #29
 8000d78:	d000      	beq.n	8000d7c <__aeabi_ddiv+0x3d0>
 8000d7a:	e086      	b.n	8000e8a <__aeabi_ddiv+0x4de>
 8000d7c:	002e      	movs	r6, r5
 8000d7e:	08d1      	lsrs	r1, r2, #3
 8000d80:	465a      	mov	r2, fp
 8000d82:	01d2      	lsls	r2, r2, #7
 8000d84:	d506      	bpl.n	8000d94 <__aeabi_ddiv+0x3e8>
 8000d86:	465a      	mov	r2, fp
 8000d88:	4b8e      	ldr	r3, [pc, #568]	@ (8000fc4 <__aeabi_ddiv+0x618>)
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	4693      	mov	fp, r2
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	4453      	add	r3, sl
 8000d94:	4a8c      	ldr	r2, [pc, #560]	@ (8000fc8 <__aeabi_ddiv+0x61c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	dd00      	ble.n	8000d9c <__aeabi_ddiv+0x3f0>
 8000d9a:	e680      	b.n	8000a9e <__aeabi_ddiv+0xf2>
 8000d9c:	465a      	mov	r2, fp
 8000d9e:	0752      	lsls	r2, r2, #29
 8000da0:	430a      	orrs	r2, r1
 8000da2:	4690      	mov	r8, r2
 8000da4:	465a      	mov	r2, fp
 8000da6:	055b      	lsls	r3, r3, #21
 8000da8:	0254      	lsls	r4, r2, #9
 8000daa:	0b24      	lsrs	r4, r4, #12
 8000dac:	0d5b      	lsrs	r3, r3, #21
 8000dae:	e669      	b.n	8000a84 <__aeabi_ddiv+0xd8>
 8000db0:	0035      	movs	r5, r6
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0db      	beq.n	8000d6e <__aeabi_ddiv+0x3c2>
 8000db6:	9d00      	ldr	r5, [sp, #0]
 8000db8:	1e51      	subs	r1, r2, #1
 8000dba:	46ac      	mov	ip, r5
 8000dbc:	4464      	add	r4, ip
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	d200      	bcs.n	8000dc4 <__aeabi_ddiv+0x418>
 8000dc2:	e09e      	b.n	8000f02 <__aeabi_ddiv+0x556>
 8000dc4:	4284      	cmp	r4, r0
 8000dc6:	d200      	bcs.n	8000dca <__aeabi_ddiv+0x41e>
 8000dc8:	e0e1      	b.n	8000f8e <__aeabi_ddiv+0x5e2>
 8000dca:	d100      	bne.n	8000dce <__aeabi_ddiv+0x422>
 8000dcc:	e0ee      	b.n	8000fac <__aeabi_ddiv+0x600>
 8000dce:	000a      	movs	r2, r1
 8000dd0:	e7ca      	b.n	8000d68 <__aeabi_ddiv+0x3bc>
 8000dd2:	4542      	cmp	r2, r8
 8000dd4:	d900      	bls.n	8000dd8 <__aeabi_ddiv+0x42c>
 8000dd6:	e708      	b.n	8000bea <__aeabi_ddiv+0x23e>
 8000dd8:	464b      	mov	r3, r9
 8000dda:	07dc      	lsls	r4, r3, #31
 8000ddc:	0858      	lsrs	r0, r3, #1
 8000dde:	4643      	mov	r3, r8
 8000de0:	085b      	lsrs	r3, r3, #1
 8000de2:	431c      	orrs	r4, r3
 8000de4:	4643      	mov	r3, r8
 8000de6:	07dd      	lsls	r5, r3, #31
 8000de8:	e706      	b.n	8000bf8 <__aeabi_ddiv+0x24c>
 8000dea:	f000 f9a7 	bl	800113c <__clzsi2>
 8000dee:	2315      	movs	r3, #21
 8000df0:	469c      	mov	ip, r3
 8000df2:	4484      	add	ip, r0
 8000df4:	0002      	movs	r2, r0
 8000df6:	4663      	mov	r3, ip
 8000df8:	3220      	adds	r2, #32
 8000dfa:	2b1c      	cmp	r3, #28
 8000dfc:	dc00      	bgt.n	8000e00 <__aeabi_ddiv+0x454>
 8000dfe:	e692      	b.n	8000b26 <__aeabi_ddiv+0x17a>
 8000e00:	0023      	movs	r3, r4
 8000e02:	3808      	subs	r0, #8
 8000e04:	4083      	lsls	r3, r0
 8000e06:	4699      	mov	r9, r3
 8000e08:	2300      	movs	r3, #0
 8000e0a:	4698      	mov	r8, r3
 8000e0c:	e69a      	b.n	8000b44 <__aeabi_ddiv+0x198>
 8000e0e:	f000 f995 	bl	800113c <__clzsi2>
 8000e12:	0002      	movs	r2, r0
 8000e14:	0003      	movs	r3, r0
 8000e16:	3215      	adds	r2, #21
 8000e18:	3320      	adds	r3, #32
 8000e1a:	2a1c      	cmp	r2, #28
 8000e1c:	dc00      	bgt.n	8000e20 <__aeabi_ddiv+0x474>
 8000e1e:	e65f      	b.n	8000ae0 <__aeabi_ddiv+0x134>
 8000e20:	9900      	ldr	r1, [sp, #0]
 8000e22:	3808      	subs	r0, #8
 8000e24:	4081      	lsls	r1, r0
 8000e26:	2200      	movs	r2, #0
 8000e28:	468b      	mov	fp, r1
 8000e2a:	e666      	b.n	8000afa <__aeabi_ddiv+0x14e>
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	002e      	movs	r6, r5
 8000e30:	2400      	movs	r4, #0
 8000e32:	4690      	mov	r8, r2
 8000e34:	4b65      	ldr	r3, [pc, #404]	@ (8000fcc <__aeabi_ddiv+0x620>)
 8000e36:	e625      	b.n	8000a84 <__aeabi_ddiv+0xd8>
 8000e38:	002e      	movs	r6, r5
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	1ac9      	subs	r1, r1, r3
 8000e3e:	2938      	cmp	r1, #56	@ 0x38
 8000e40:	dd00      	ble.n	8000e44 <__aeabi_ddiv+0x498>
 8000e42:	e61b      	b.n	8000a7c <__aeabi_ddiv+0xd0>
 8000e44:	291f      	cmp	r1, #31
 8000e46:	dc7e      	bgt.n	8000f46 <__aeabi_ddiv+0x59a>
 8000e48:	4861      	ldr	r0, [pc, #388]	@ (8000fd0 <__aeabi_ddiv+0x624>)
 8000e4a:	0014      	movs	r4, r2
 8000e4c:	4450      	add	r0, sl
 8000e4e:	465b      	mov	r3, fp
 8000e50:	4082      	lsls	r2, r0
 8000e52:	4083      	lsls	r3, r0
 8000e54:	40cc      	lsrs	r4, r1
 8000e56:	1e50      	subs	r0, r2, #1
 8000e58:	4182      	sbcs	r2, r0
 8000e5a:	4323      	orrs	r3, r4
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	465b      	mov	r3, fp
 8000e60:	40cb      	lsrs	r3, r1
 8000e62:	0751      	lsls	r1, r2, #29
 8000e64:	d009      	beq.n	8000e7a <__aeabi_ddiv+0x4ce>
 8000e66:	210f      	movs	r1, #15
 8000e68:	4011      	ands	r1, r2
 8000e6a:	2904      	cmp	r1, #4
 8000e6c:	d005      	beq.n	8000e7a <__aeabi_ddiv+0x4ce>
 8000e6e:	1d11      	adds	r1, r2, #4
 8000e70:	4291      	cmp	r1, r2
 8000e72:	4192      	sbcs	r2, r2
 8000e74:	4252      	negs	r2, r2
 8000e76:	189b      	adds	r3, r3, r2
 8000e78:	000a      	movs	r2, r1
 8000e7a:	0219      	lsls	r1, r3, #8
 8000e7c:	d400      	bmi.n	8000e80 <__aeabi_ddiv+0x4d4>
 8000e7e:	e09b      	b.n	8000fb8 <__aeabi_ddiv+0x60c>
 8000e80:	2200      	movs	r2, #0
 8000e82:	2301      	movs	r3, #1
 8000e84:	2400      	movs	r4, #0
 8000e86:	4690      	mov	r8, r2
 8000e88:	e5fc      	b.n	8000a84 <__aeabi_ddiv+0xd8>
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	4011      	ands	r1, r2
 8000e8e:	2904      	cmp	r1, #4
 8000e90:	d100      	bne.n	8000e94 <__aeabi_ddiv+0x4e8>
 8000e92:	e773      	b.n	8000d7c <__aeabi_ddiv+0x3d0>
 8000e94:	1d11      	adds	r1, r2, #4
 8000e96:	4291      	cmp	r1, r2
 8000e98:	4192      	sbcs	r2, r2
 8000e9a:	4252      	negs	r2, r2
 8000e9c:	002e      	movs	r6, r5
 8000e9e:	08c9      	lsrs	r1, r1, #3
 8000ea0:	4493      	add	fp, r2
 8000ea2:	e76d      	b.n	8000d80 <__aeabi_ddiv+0x3d4>
 8000ea4:	9b00      	ldr	r3, [sp, #0]
 8000ea6:	3d01      	subs	r5, #1
 8000ea8:	469c      	mov	ip, r3
 8000eaa:	4461      	add	r1, ip
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d900      	bls.n	8000eb2 <__aeabi_ddiv+0x506>
 8000eb0:	e72c      	b.n	8000d0c <__aeabi_ddiv+0x360>
 8000eb2:	428a      	cmp	r2, r1
 8000eb4:	d800      	bhi.n	8000eb8 <__aeabi_ddiv+0x50c>
 8000eb6:	e729      	b.n	8000d0c <__aeabi_ddiv+0x360>
 8000eb8:	1e85      	subs	r5, r0, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e726      	b.n	8000d0c <__aeabi_ddiv+0x360>
 8000ebe:	9900      	ldr	r1, [sp, #0]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	468c      	mov	ip, r1
 8000ec4:	4464      	add	r4, ip
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	d900      	bls.n	8000ecc <__aeabi_ddiv+0x520>
 8000eca:	e72d      	b.n	8000d28 <__aeabi_ddiv+0x37c>
 8000ecc:	42a2      	cmp	r2, r4
 8000ece:	d800      	bhi.n	8000ed2 <__aeabi_ddiv+0x526>
 8000ed0:	e72a      	b.n	8000d28 <__aeabi_ddiv+0x37c>
 8000ed2:	1e83      	subs	r3, r0, #2
 8000ed4:	4464      	add	r4, ip
 8000ed6:	e727      	b.n	8000d28 <__aeabi_ddiv+0x37c>
 8000ed8:	4287      	cmp	r7, r0
 8000eda:	d000      	beq.n	8000ede <__aeabi_ddiv+0x532>
 8000edc:	e6fe      	b.n	8000cdc <__aeabi_ddiv+0x330>
 8000ede:	45a9      	cmp	r9, r5
 8000ee0:	d900      	bls.n	8000ee4 <__aeabi_ddiv+0x538>
 8000ee2:	e6fb      	b.n	8000cdc <__aeabi_ddiv+0x330>
 8000ee4:	e6f5      	b.n	8000cd2 <__aeabi_ddiv+0x326>
 8000ee6:	42a2      	cmp	r2, r4
 8000ee8:	d800      	bhi.n	8000eec <__aeabi_ddiv+0x540>
 8000eea:	e6b9      	b.n	8000c60 <__aeabi_ddiv+0x2b4>
 8000eec:	1e83      	subs	r3, r0, #2
 8000eee:	4464      	add	r4, ip
 8000ef0:	e6b6      	b.n	8000c60 <__aeabi_ddiv+0x2b4>
 8000ef2:	428a      	cmp	r2, r1
 8000ef4:	d800      	bhi.n	8000ef8 <__aeabi_ddiv+0x54c>
 8000ef6:	e69f      	b.n	8000c38 <__aeabi_ddiv+0x28c>
 8000ef8:	46bc      	mov	ip, r7
 8000efa:	1e83      	subs	r3, r0, #2
 8000efc:	4698      	mov	r8, r3
 8000efe:	4461      	add	r1, ip
 8000f00:	e69a      	b.n	8000c38 <__aeabi_ddiv+0x28c>
 8000f02:	000a      	movs	r2, r1
 8000f04:	4284      	cmp	r4, r0
 8000f06:	d000      	beq.n	8000f0a <__aeabi_ddiv+0x55e>
 8000f08:	e72e      	b.n	8000d68 <__aeabi_ddiv+0x3bc>
 8000f0a:	454b      	cmp	r3, r9
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_ddiv+0x564>
 8000f0e:	e72b      	b.n	8000d68 <__aeabi_ddiv+0x3bc>
 8000f10:	0035      	movs	r5, r6
 8000f12:	e72c      	b.n	8000d6e <__aeabi_ddiv+0x3c2>
 8000f14:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc0 <__aeabi_ddiv+0x614>)
 8000f16:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd4 <__aeabi_ddiv+0x628>)
 8000f18:	4453      	add	r3, sl
 8000f1a:	4592      	cmp	sl, r2
 8000f1c:	db43      	blt.n	8000fa6 <__aeabi_ddiv+0x5fa>
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2100      	movs	r1, #0
 8000f22:	4493      	add	fp, r2
 8000f24:	e72c      	b.n	8000d80 <__aeabi_ddiv+0x3d4>
 8000f26:	42ac      	cmp	r4, r5
 8000f28:	d800      	bhi.n	8000f2c <__aeabi_ddiv+0x580>
 8000f2a:	e6d7      	b.n	8000cdc <__aeabi_ddiv+0x330>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	425b      	negs	r3, r3
 8000f30:	469c      	mov	ip, r3
 8000f32:	9900      	ldr	r1, [sp, #0]
 8000f34:	444d      	add	r5, r9
 8000f36:	454d      	cmp	r5, r9
 8000f38:	419b      	sbcs	r3, r3
 8000f3a:	44e3      	add	fp, ip
 8000f3c:	468c      	mov	ip, r1
 8000f3e:	425b      	negs	r3, r3
 8000f40:	4463      	add	r3, ip
 8000f42:	18c0      	adds	r0, r0, r3
 8000f44:	e6cc      	b.n	8000ce0 <__aeabi_ddiv+0x334>
 8000f46:	201f      	movs	r0, #31
 8000f48:	4240      	negs	r0, r0
 8000f4a:	1ac3      	subs	r3, r0, r3
 8000f4c:	4658      	mov	r0, fp
 8000f4e:	40d8      	lsrs	r0, r3
 8000f50:	2920      	cmp	r1, #32
 8000f52:	d004      	beq.n	8000f5e <__aeabi_ddiv+0x5b2>
 8000f54:	4659      	mov	r1, fp
 8000f56:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <__aeabi_ddiv+0x62c>)
 8000f58:	4453      	add	r3, sl
 8000f5a:	4099      	lsls	r1, r3
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	1e53      	subs	r3, r2, #1
 8000f60:	419a      	sbcs	r2, r3
 8000f62:	2307      	movs	r3, #7
 8000f64:	0019      	movs	r1, r3
 8000f66:	4302      	orrs	r2, r0
 8000f68:	2400      	movs	r4, #0
 8000f6a:	4011      	ands	r1, r2
 8000f6c:	4213      	tst	r3, r2
 8000f6e:	d009      	beq.n	8000f84 <__aeabi_ddiv+0x5d8>
 8000f70:	3308      	adds	r3, #8
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d01d      	beq.n	8000fb4 <__aeabi_ddiv+0x608>
 8000f78:	1d13      	adds	r3, r2, #4
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	4189      	sbcs	r1, r1
 8000f7e:	001a      	movs	r2, r3
 8000f80:	4249      	negs	r1, r1
 8000f82:	0749      	lsls	r1, r1, #29
 8000f84:	08d2      	lsrs	r2, r2, #3
 8000f86:	430a      	orrs	r2, r1
 8000f88:	4690      	mov	r8, r2
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e57a      	b.n	8000a84 <__aeabi_ddiv+0xd8>
 8000f8e:	4649      	mov	r1, r9
 8000f90:	9f00      	ldr	r7, [sp, #0]
 8000f92:	004d      	lsls	r5, r1, #1
 8000f94:	454d      	cmp	r5, r9
 8000f96:	4189      	sbcs	r1, r1
 8000f98:	46bc      	mov	ip, r7
 8000f9a:	4249      	negs	r1, r1
 8000f9c:	4461      	add	r1, ip
 8000f9e:	46a9      	mov	r9, r5
 8000fa0:	3a02      	subs	r2, #2
 8000fa2:	1864      	adds	r4, r4, r1
 8000fa4:	e7ae      	b.n	8000f04 <__aeabi_ddiv+0x558>
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4252      	negs	r2, r2
 8000faa:	e746      	b.n	8000e3a <__aeabi_ddiv+0x48e>
 8000fac:	4599      	cmp	r9, r3
 8000fae:	d3ee      	bcc.n	8000f8e <__aeabi_ddiv+0x5e2>
 8000fb0:	000a      	movs	r2, r1
 8000fb2:	e7aa      	b.n	8000f0a <__aeabi_ddiv+0x55e>
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	e7e5      	b.n	8000f84 <__aeabi_ddiv+0x5d8>
 8000fb8:	0759      	lsls	r1, r3, #29
 8000fba:	025b      	lsls	r3, r3, #9
 8000fbc:	0b1c      	lsrs	r4, r3, #12
 8000fbe:	e7e1      	b.n	8000f84 <__aeabi_ddiv+0x5d8>
 8000fc0:	000003ff 	.word	0x000003ff
 8000fc4:	feffffff 	.word	0xfeffffff
 8000fc8:	000007fe 	.word	0x000007fe
 8000fcc:	000007ff 	.word	0x000007ff
 8000fd0:	0000041e 	.word	0x0000041e
 8000fd4:	fffffc02 	.word	0xfffffc02
 8000fd8:	0000043e 	.word	0x0000043e

08000fdc <__aeabi_i2d>:
 8000fdc:	b570      	push	{r4, r5, r6, lr}
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	d016      	beq.n	8001010 <__aeabi_i2d+0x34>
 8000fe2:	17c3      	asrs	r3, r0, #31
 8000fe4:	18c5      	adds	r5, r0, r3
 8000fe6:	405d      	eors	r5, r3
 8000fe8:	0fc4      	lsrs	r4, r0, #31
 8000fea:	0028      	movs	r0, r5
 8000fec:	f000 f8a6 	bl	800113c <__clzsi2>
 8000ff0:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <__aeabi_i2d+0x58>)
 8000ff2:	1a1b      	subs	r3, r3, r0
 8000ff4:	055b      	lsls	r3, r3, #21
 8000ff6:	0d5b      	lsrs	r3, r3, #21
 8000ff8:	280a      	cmp	r0, #10
 8000ffa:	dc14      	bgt.n	8001026 <__aeabi_i2d+0x4a>
 8000ffc:	0002      	movs	r2, r0
 8000ffe:	002e      	movs	r6, r5
 8001000:	3215      	adds	r2, #21
 8001002:	4096      	lsls	r6, r2
 8001004:	220b      	movs	r2, #11
 8001006:	1a12      	subs	r2, r2, r0
 8001008:	40d5      	lsrs	r5, r2
 800100a:	032d      	lsls	r5, r5, #12
 800100c:	0b2d      	lsrs	r5, r5, #12
 800100e:	e003      	b.n	8001018 <__aeabi_i2d+0x3c>
 8001010:	2400      	movs	r4, #0
 8001012:	2300      	movs	r3, #0
 8001014:	2500      	movs	r5, #0
 8001016:	2600      	movs	r6, #0
 8001018:	051b      	lsls	r3, r3, #20
 800101a:	432b      	orrs	r3, r5
 800101c:	07e4      	lsls	r4, r4, #31
 800101e:	4323      	orrs	r3, r4
 8001020:	0030      	movs	r0, r6
 8001022:	0019      	movs	r1, r3
 8001024:	bd70      	pop	{r4, r5, r6, pc}
 8001026:	380b      	subs	r0, #11
 8001028:	4085      	lsls	r5, r0
 800102a:	032d      	lsls	r5, r5, #12
 800102c:	2600      	movs	r6, #0
 800102e:	0b2d      	lsrs	r5, r5, #12
 8001030:	e7f2      	b.n	8001018 <__aeabi_i2d+0x3c>
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	0000041e 	.word	0x0000041e

08001038 <__aeabi_d2f>:
 8001038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800103a:	004b      	lsls	r3, r1, #1
 800103c:	030f      	lsls	r7, r1, #12
 800103e:	0d5b      	lsrs	r3, r3, #21
 8001040:	4c3a      	ldr	r4, [pc, #232]	@ (800112c <__aeabi_d2f+0xf4>)
 8001042:	0f45      	lsrs	r5, r0, #29
 8001044:	b083      	sub	sp, #12
 8001046:	0a7f      	lsrs	r7, r7, #9
 8001048:	1c5e      	adds	r6, r3, #1
 800104a:	432f      	orrs	r7, r5
 800104c:	9000      	str	r0, [sp, #0]
 800104e:	9101      	str	r1, [sp, #4]
 8001050:	0fca      	lsrs	r2, r1, #31
 8001052:	00c5      	lsls	r5, r0, #3
 8001054:	4226      	tst	r6, r4
 8001056:	d00b      	beq.n	8001070 <__aeabi_d2f+0x38>
 8001058:	4935      	ldr	r1, [pc, #212]	@ (8001130 <__aeabi_d2f+0xf8>)
 800105a:	185c      	adds	r4, r3, r1
 800105c:	2cfe      	cmp	r4, #254	@ 0xfe
 800105e:	dd13      	ble.n	8001088 <__aeabi_d2f+0x50>
 8001060:	20ff      	movs	r0, #255	@ 0xff
 8001062:	2300      	movs	r3, #0
 8001064:	05c0      	lsls	r0, r0, #23
 8001066:	4318      	orrs	r0, r3
 8001068:	07d2      	lsls	r2, r2, #31
 800106a:	4310      	orrs	r0, r2
 800106c:	b003      	add	sp, #12
 800106e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001070:	433d      	orrs	r5, r7
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <__aeabi_d2f+0x42>
 8001076:	2000      	movs	r0, #0
 8001078:	e7f4      	b.n	8001064 <__aeabi_d2f+0x2c>
 800107a:	2d00      	cmp	r5, #0
 800107c:	d0f0      	beq.n	8001060 <__aeabi_d2f+0x28>
 800107e:	2380      	movs	r3, #128	@ 0x80
 8001080:	03db      	lsls	r3, r3, #15
 8001082:	20ff      	movs	r0, #255	@ 0xff
 8001084:	433b      	orrs	r3, r7
 8001086:	e7ed      	b.n	8001064 <__aeabi_d2f+0x2c>
 8001088:	2c00      	cmp	r4, #0
 800108a:	dd0c      	ble.n	80010a6 <__aeabi_d2f+0x6e>
 800108c:	9b00      	ldr	r3, [sp, #0]
 800108e:	00ff      	lsls	r7, r7, #3
 8001090:	019b      	lsls	r3, r3, #6
 8001092:	1e58      	subs	r0, r3, #1
 8001094:	4183      	sbcs	r3, r0
 8001096:	0f69      	lsrs	r1, r5, #29
 8001098:	433b      	orrs	r3, r7
 800109a:	430b      	orrs	r3, r1
 800109c:	0759      	lsls	r1, r3, #29
 800109e:	d127      	bne.n	80010f0 <__aeabi_d2f+0xb8>
 80010a0:	08db      	lsrs	r3, r3, #3
 80010a2:	b2e0      	uxtb	r0, r4
 80010a4:	e7de      	b.n	8001064 <__aeabi_d2f+0x2c>
 80010a6:	0021      	movs	r1, r4
 80010a8:	3117      	adds	r1, #23
 80010aa:	db31      	blt.n	8001110 <__aeabi_d2f+0xd8>
 80010ac:	2180      	movs	r1, #128	@ 0x80
 80010ae:	201e      	movs	r0, #30
 80010b0:	0409      	lsls	r1, r1, #16
 80010b2:	4339      	orrs	r1, r7
 80010b4:	1b00      	subs	r0, r0, r4
 80010b6:	281f      	cmp	r0, #31
 80010b8:	dd2d      	ble.n	8001116 <__aeabi_d2f+0xde>
 80010ba:	2602      	movs	r6, #2
 80010bc:	4276      	negs	r6, r6
 80010be:	1b34      	subs	r4, r6, r4
 80010c0:	000e      	movs	r6, r1
 80010c2:	40e6      	lsrs	r6, r4
 80010c4:	0034      	movs	r4, r6
 80010c6:	2820      	cmp	r0, #32
 80010c8:	d004      	beq.n	80010d4 <__aeabi_d2f+0x9c>
 80010ca:	481a      	ldr	r0, [pc, #104]	@ (8001134 <__aeabi_d2f+0xfc>)
 80010cc:	4684      	mov	ip, r0
 80010ce:	4463      	add	r3, ip
 80010d0:	4099      	lsls	r1, r3
 80010d2:	430d      	orrs	r5, r1
 80010d4:	002b      	movs	r3, r5
 80010d6:	1e59      	subs	r1, r3, #1
 80010d8:	418b      	sbcs	r3, r1
 80010da:	4323      	orrs	r3, r4
 80010dc:	0759      	lsls	r1, r3, #29
 80010de:	d003      	beq.n	80010e8 <__aeabi_d2f+0xb0>
 80010e0:	210f      	movs	r1, #15
 80010e2:	4019      	ands	r1, r3
 80010e4:	2904      	cmp	r1, #4
 80010e6:	d10b      	bne.n	8001100 <__aeabi_d2f+0xc8>
 80010e8:	019b      	lsls	r3, r3, #6
 80010ea:	2000      	movs	r0, #0
 80010ec:	0a5b      	lsrs	r3, r3, #9
 80010ee:	e7b9      	b.n	8001064 <__aeabi_d2f+0x2c>
 80010f0:	210f      	movs	r1, #15
 80010f2:	4019      	ands	r1, r3
 80010f4:	2904      	cmp	r1, #4
 80010f6:	d104      	bne.n	8001102 <__aeabi_d2f+0xca>
 80010f8:	019b      	lsls	r3, r3, #6
 80010fa:	0a5b      	lsrs	r3, r3, #9
 80010fc:	b2e0      	uxtb	r0, r4
 80010fe:	e7b1      	b.n	8001064 <__aeabi_d2f+0x2c>
 8001100:	2400      	movs	r4, #0
 8001102:	3304      	adds	r3, #4
 8001104:	0159      	lsls	r1, r3, #5
 8001106:	d5f7      	bpl.n	80010f8 <__aeabi_d2f+0xc0>
 8001108:	3401      	adds	r4, #1
 800110a:	2300      	movs	r3, #0
 800110c:	b2e0      	uxtb	r0, r4
 800110e:	e7a9      	b.n	8001064 <__aeabi_d2f+0x2c>
 8001110:	2000      	movs	r0, #0
 8001112:	2300      	movs	r3, #0
 8001114:	e7a6      	b.n	8001064 <__aeabi_d2f+0x2c>
 8001116:	4c08      	ldr	r4, [pc, #32]	@ (8001138 <__aeabi_d2f+0x100>)
 8001118:	191c      	adds	r4, r3, r4
 800111a:	002b      	movs	r3, r5
 800111c:	40a5      	lsls	r5, r4
 800111e:	40c3      	lsrs	r3, r0
 8001120:	40a1      	lsls	r1, r4
 8001122:	1e68      	subs	r0, r5, #1
 8001124:	4185      	sbcs	r5, r0
 8001126:	4329      	orrs	r1, r5
 8001128:	430b      	orrs	r3, r1
 800112a:	e7d7      	b.n	80010dc <__aeabi_d2f+0xa4>
 800112c:	000007fe 	.word	0x000007fe
 8001130:	fffffc80 	.word	0xfffffc80
 8001134:	fffffca2 	.word	0xfffffca2
 8001138:	fffffc82 	.word	0xfffffc82

0800113c <__clzsi2>:
 800113c:	211c      	movs	r1, #28
 800113e:	2301      	movs	r3, #1
 8001140:	041b      	lsls	r3, r3, #16
 8001142:	4298      	cmp	r0, r3
 8001144:	d301      	bcc.n	800114a <__clzsi2+0xe>
 8001146:	0c00      	lsrs	r0, r0, #16
 8001148:	3910      	subs	r1, #16
 800114a:	0a1b      	lsrs	r3, r3, #8
 800114c:	4298      	cmp	r0, r3
 800114e:	d301      	bcc.n	8001154 <__clzsi2+0x18>
 8001150:	0a00      	lsrs	r0, r0, #8
 8001152:	3908      	subs	r1, #8
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	4298      	cmp	r0, r3
 8001158:	d301      	bcc.n	800115e <__clzsi2+0x22>
 800115a:	0900      	lsrs	r0, r0, #4
 800115c:	3904      	subs	r1, #4
 800115e:	a202      	add	r2, pc, #8	@ (adr r2, 8001168 <__clzsi2+0x2c>)
 8001160:	5c10      	ldrb	r0, [r2, r0]
 8001162:	1840      	adds	r0, r0, r1
 8001164:	4770      	bx	lr
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	02020304 	.word	0x02020304
 800116c:	01010101 	.word	0x01010101
	...

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117c:	f000 fac4 	bl	8001708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001180:	f000 f894 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001184:	f000 f91e 	bl	80013c4 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001188:	f000 f8e0 	bl	800134c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim6);
 800118c:	4b3c      	ldr	r3, [pc, #240]	@ (8001280 <main+0x108>)
 800118e:	0018      	movs	r0, r3
 8001190:	f001 fb84 	bl	800289c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DHT11_Start();
 8001194:	f000 f966 	bl	8001464 <DHT11_Start>

	  if (Check_Response())
 8001198:	f000 f982 	bl	80014a0 <Check_Response>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d02b      	beq.n	80011f8 <main+0x80>
	  {
		  raw_humi1 = DHT11_Read();
 80011a0:	f000 f9a8 	bl	80014f4 <DHT11_Read>
 80011a4:	0003      	movs	r3, r0
 80011a6:	001a      	movs	r2, r3
 80011a8:	4b36      	ldr	r3, [pc, #216]	@ (8001284 <main+0x10c>)
 80011aa:	801a      	strh	r2, [r3, #0]
		  raw_humi2 = DHT11_Read();
 80011ac:	f000 f9a2 	bl	80014f4 <DHT11_Read>
 80011b0:	0003      	movs	r3, r0
 80011b2:	001a      	movs	r2, r3
 80011b4:	4b34      	ldr	r3, [pc, #208]	@ (8001288 <main+0x110>)
 80011b6:	801a      	strh	r2, [r3, #0]
		  raw_temp1 = DHT11_Read();
 80011b8:	f000 f99c 	bl	80014f4 <DHT11_Read>
 80011bc:	0003      	movs	r3, r0
 80011be:	001a      	movs	r2, r3
 80011c0:	4b32      	ldr	r3, [pc, #200]	@ (800128c <main+0x114>)
 80011c2:	801a      	strh	r2, [r3, #0]
		  raw_temp2 = DHT11_Read();
 80011c4:	f000 f996 	bl	80014f4 <DHT11_Read>
 80011c8:	0003      	movs	r3, r0
 80011ca:	001a      	movs	r2, r3
 80011cc:	4b30      	ldr	r3, [pc, #192]	@ (8001290 <main+0x118>)
 80011ce:	801a      	strh	r2, [r3, #0]
		  checksum =  DHT11_Read();
 80011d0:	f000 f990 	bl	80014f4 <DHT11_Read>
 80011d4:	0003      	movs	r3, r0
 80011d6:	001a      	movs	r2, r3
 80011d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001294 <main+0x11c>)
 80011da:	801a      	strh	r2, [r3, #0]
		  CheckSum = raw_humi1 + raw_humi2 + raw_temp1 + raw_temp2;
 80011dc:	4b29      	ldr	r3, [pc, #164]	@ (8001284 <main+0x10c>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	001a      	movs	r2, r3
 80011e2:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <main+0x110>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	18d3      	adds	r3, r2, r3
 80011e8:	4a28      	ldr	r2, [pc, #160]	@ (800128c <main+0x114>)
 80011ea:	8812      	ldrh	r2, [r2, #0]
 80011ec:	189b      	adds	r3, r3, r2
 80011ee:	4a28      	ldr	r2, [pc, #160]	@ (8001290 <main+0x118>)
 80011f0:	8812      	ldrh	r2, [r2, #0]
 80011f2:	189a      	adds	r2, r3, r2
 80011f4:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <main+0x120>)
 80011f6:	601a      	str	r2, [r3, #0]

	  }

	  Umidade = (float)(raw_humi1 + (raw_humi2 / 10.0));
 80011f8:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <main+0x10c>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff feed 	bl	8000fdc <__aeabi_i2d>
 8001202:	0004      	movs	r4, r0
 8001204:	000d      	movs	r5, r1
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <main+0x110>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	0018      	movs	r0, r3
 800120c:	f7ff fee6 	bl	8000fdc <__aeabi_i2d>
 8001210:	2200      	movs	r2, #0
 8001212:	4b22      	ldr	r3, [pc, #136]	@ (800129c <main+0x124>)
 8001214:	f7ff fbca 	bl	80009ac <__aeabi_ddiv>
 8001218:	0002      	movs	r2, r0
 800121a:	000b      	movs	r3, r1
 800121c:	0020      	movs	r0, r4
 800121e:	0029      	movs	r1, r5
 8001220:	f7fe fffe 	bl	8000220 <__aeabi_dadd>
 8001224:	0002      	movs	r2, r0
 8001226:	000b      	movs	r3, r1
 8001228:	0010      	movs	r0, r2
 800122a:	0019      	movs	r1, r3
 800122c:	f7ff ff04 	bl	8001038 <__aeabi_d2f>
 8001230:	1c02      	adds	r2, r0, #0
 8001232:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <main+0x128>)
 8001234:	601a      	str	r2, [r3, #0]
	  Temperatura = (float)(raw_temp1 + (raw_temp2 / 10.0));
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <main+0x114>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	0018      	movs	r0, r3
 800123c:	f7ff fece 	bl	8000fdc <__aeabi_i2d>
 8001240:	0004      	movs	r4, r0
 8001242:	000d      	movs	r5, r1
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <main+0x118>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff fec7 	bl	8000fdc <__aeabi_i2d>
 800124e:	2200      	movs	r2, #0
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <main+0x124>)
 8001252:	f7ff fbab 	bl	80009ac <__aeabi_ddiv>
 8001256:	0002      	movs	r2, r0
 8001258:	000b      	movs	r3, r1
 800125a:	0020      	movs	r0, r4
 800125c:	0029      	movs	r1, r5
 800125e:	f7fe ffdf 	bl	8000220 <__aeabi_dadd>
 8001262:	0002      	movs	r2, r0
 8001264:	000b      	movs	r3, r1
 8001266:	0010      	movs	r0, r2
 8001268:	0019      	movs	r1, r3
 800126a:	f7ff fee5 	bl	8001038 <__aeabi_d2f>
 800126e:	1c02      	adds	r2, r0, #0
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <main+0x12c>)
 8001272:	601a      	str	r2, [r3, #0]

	  HAL_Delay(1500);
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <main+0x130>)
 8001276:	0018      	movs	r0, r3
 8001278:	f000 fab6 	bl	80017e8 <HAL_Delay>
	  DHT11_Start();
 800127c:	e78a      	b.n	8001194 <main+0x1c>
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	20000028 	.word	0x20000028
 8001284:	20000074 	.word	0x20000074
 8001288:	20000076 	.word	0x20000076
 800128c:	20000070 	.word	0x20000070
 8001290:	20000072 	.word	0x20000072
 8001294:	20000078 	.word	0x20000078
 8001298:	2000007c 	.word	0x2000007c
 800129c:	40240000 	.word	0x40240000
 80012a0:	2000006c 	.word	0x2000006c
 80012a4:	20000068 	.word	0x20000068
 80012a8:	000005dc 	.word	0x000005dc

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b095      	sub	sp, #84	@ 0x54
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	2418      	movs	r4, #24
 80012b4:	193b      	adds	r3, r7, r4
 80012b6:	0018      	movs	r0, r3
 80012b8:	2338      	movs	r3, #56	@ 0x38
 80012ba:	001a      	movs	r2, r3
 80012bc:	2100      	movs	r1, #0
 80012be:	f001 fbe3 	bl	8002a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	0018      	movs	r0, r3
 80012c6:	2314      	movs	r3, #20
 80012c8:	001a      	movs	r2, r3
 80012ca:	2100      	movs	r1, #0
 80012cc:	f001 fbdc 	bl	8002a88 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001344 <SystemClock_Config+0x98>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001348 <SystemClock_Config+0x9c>)
 80012d6:	401a      	ands	r2, r3
 80012d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <SystemClock_Config+0x98>)
 80012da:	2180      	movs	r1, #128	@ 0x80
 80012dc:	0109      	lsls	r1, r1, #4
 80012de:	430a      	orrs	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e2:	0021      	movs	r1, r4
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	2202      	movs	r2, #2
 80012e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2201      	movs	r2, #1
 80012ee:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	2210      	movs	r2, #16
 80012f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012f6:	187b      	adds	r3, r7, r1
 80012f8:	2200      	movs	r2, #0
 80012fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	0018      	movs	r0, r3
 8001300:	f000 fcfa 	bl	8001cf8 <HAL_RCC_OscConfig>
 8001304:	1e03      	subs	r3, r0, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001308:	f000 f984 	bl	8001614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	220f      	movs	r2, #15
 8001310:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2201      	movs	r2, #1
 8001316:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	2100      	movs	r1, #0
 800132e:	0018      	movs	r0, r3
 8001330:	f001 f8a6 	bl	8002480 <HAL_RCC_ClockConfig>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001338:	f000 f96c 	bl	8001614 <Error_Handler>
  }
}
 800133c:	46c0      	nop			@ (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b015      	add	sp, #84	@ 0x54
 8001342:	bd90      	pop	{r4, r7, pc}
 8001344:	40007000 	.word	0x40007000
 8001348:	ffffe7ff 	.word	0xffffe7ff

0800134c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001352:	003b      	movs	r3, r7
 8001354:	0018      	movs	r0, r3
 8001356:	2308      	movs	r3, #8
 8001358:	001a      	movs	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	f001 fb94 	bl	8002a88 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001360:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <MX_TIM6_Init+0x6c>)
 8001362:	4a16      	ldr	r2, [pc, #88]	@ (80013bc <MX_TIM6_Init+0x70>)
 8001364:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8001366:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <MX_TIM6_Init+0x6c>)
 8001368:	220f      	movs	r2, #15
 800136a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_TIM6_Init+0x6c>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_TIM6_Init+0x6c>)
 8001374:	4a12      	ldr	r2, [pc, #72]	@ (80013c0 <MX_TIM6_Init+0x74>)
 8001376:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_TIM6_Init+0x6c>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <MX_TIM6_Init+0x6c>)
 8001380:	0018      	movs	r0, r3
 8001382:	f001 fa4b 	bl	800281c <HAL_TIM_Base_Init>
 8001386:	1e03      	subs	r3, r0, #0
 8001388:	d001      	beq.n	800138e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800138a:	f000 f943 	bl	8001614 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138e:	003b      	movs	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001394:	003b      	movs	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800139a:	003a      	movs	r2, r7
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_TIM6_Init+0x6c>)
 800139e:	0011      	movs	r1, r2
 80013a0:	0018      	movs	r0, r3
 80013a2:	f001 fb19 	bl	80029d8 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	1e03      	subs	r3, r0, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80013aa:	f000 f933 	bl	8001614 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b002      	add	sp, #8
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	20000028 	.word	0x20000028
 80013bc:	40001000 	.word	0x40001000
 80013c0:	0000ffff 	.word	0x0000ffff

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	0018      	movs	r0, r3
 80013ce:	2314      	movs	r3, #20
 80013d0:	001a      	movs	r2, r3
 80013d2:	2100      	movs	r1, #0
 80013d4:	f001 fb58 	bl	8002a88 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <MX_GPIO_Init+0x68>)
 80013da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013dc:	4b13      	ldr	r3, [pc, #76]	@ (800142c <MX_GPIO_Init+0x68>)
 80013de:	2101      	movs	r1, #1
 80013e0:	430a      	orrs	r2, r1
 80013e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <MX_GPIO_Init+0x68>)
 80013e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e8:	2201      	movs	r2, #1
 80013ea:	4013      	ands	r3, r2
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 80013f0:	23a0      	movs	r3, #160	@ 0xa0
 80013f2:	05db      	lsls	r3, r3, #23
 80013f4:	2200      	movs	r2, #0
 80013f6:	2102      	movs	r1, #2
 80013f8:	0018      	movs	r0, r3
 80013fa:	f000 fc60 	bl	8001cbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2202      	movs	r2, #2
 8001402:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2201      	movs	r2, #1
 8001408:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001416:	1d3a      	adds	r2, r7, #4
 8001418:	23a0      	movs	r3, #160	@ 0xa0
 800141a:	05db      	lsls	r3, r3, #23
 800141c:	0011      	movs	r1, r2
 800141e:	0018      	movs	r0, r3
 8001420:	f000 faba 	bl	8001998 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001424:	46c0      	nop			@ (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b006      	add	sp, #24
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000

08001430 <Delay_us>:

/* USER CODE BEGIN 4 */

void Delay_us(uint16_t us)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	0002      	movs	r2, r0
 8001438:	1dbb      	adds	r3, r7, #6
 800143a:	801a      	strh	r2, [r3, #0]

	__HAL_TIM_SET_COUNTER(&htim6,0);
 800143c:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <Delay_us+0x30>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2200      	movs	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6)<us);
 8001444:	46c0      	nop			@ (mov r8, r8)
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <Delay_us+0x30>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800144c:	1dbb      	adds	r3, r7, #6
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d3f8      	bcc.n	8001446 <Delay_us+0x16>

}
 8001454:	46c0      	nop			@ (mov r8, r8)
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b002      	add	sp, #8
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	20000028 	.word	0x20000028

08001464 <DHT11_Start>:

// FUNÇÕES EDE CONTROLE DO DHT
void DHT11_Start(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	Set_PinOutput(DHT11_GPIO_Port, DHT11_Pin); //Define o pino como saida
 8001468:	23a0      	movs	r3, #160	@ 0xa0
 800146a:	05db      	lsls	r3, r3, #23
 800146c:	2102      	movs	r1, #2
 800146e:	0018      	movs	r0, r3
 8001470:	f000 f8ad 	bl	80015ce <Set_PinOutput>

	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001474:	23a0      	movs	r3, #160	@ 0xa0
 8001476:	05db      	lsls	r3, r3, #23
 8001478:	2200      	movs	r2, #0
 800147a:	2102      	movs	r1, #2
 800147c:	0018      	movs	r0, r3
 800147e:	f000 fc1e 	bl	8001cbe <HAL_GPIO_WritePin>
	Delay_us(18000); //Delay de 18ms
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <DHT11_Start+0x38>)
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff ffd3 	bl	8001430 <Delay_us>

	Set_PinInput(DHT11_GPIO_Port, DHT11_Pin); //Set imput
 800148a:	23a0      	movs	r3, #160	@ 0xa0
 800148c:	05db      	lsls	r3, r3, #23
 800148e:	2102      	movs	r1, #2
 8001490:	0018      	movs	r0, r3
 8001492:	f000 f879 	bl	8001588 <Set_PinInput>
}
 8001496:	46c0      	nop			@ (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	00004650 	.word	0x00004650

080014a0 <Check_Response>:

uint8_t Check_Response (void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
	Delay_us(40);
 80014ac:	2028      	movs	r0, #40	@ 0x28
 80014ae:	f7ff ffbf 	bl	8001430 <Delay_us>
	if(!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 80014b2:	23a0      	movs	r3, #160	@ 0xa0
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	2102      	movs	r1, #2
 80014b8:	0018      	movs	r0, r3
 80014ba:	f000 fbe3 	bl	8001c84 <HAL_GPIO_ReadPin>
 80014be:	1e03      	subs	r3, r0, #0
 80014c0:	d111      	bne.n	80014e6 <Check_Response+0x46>
	{
		Delay_us(80);
 80014c2:	2050      	movs	r0, #80	@ 0x50
 80014c4:	f7ff ffb4 	bl	8001430 <Delay_us>
		if(HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin))
 80014c8:	23a0      	movs	r3, #160	@ 0xa0
 80014ca:	05db      	lsls	r3, r3, #23
 80014cc:	2102      	movs	r1, #2
 80014ce:	0018      	movs	r0, r3
 80014d0:	f000 fbd8 	bl	8001c84 <HAL_GPIO_ReadPin>
 80014d4:	1e03      	subs	r3, r0, #0
 80014d6:	d003      	beq.n	80014e0 <Check_Response+0x40>
		{
			Response = 1;
 80014d8:	1dfb      	adds	r3, r7, #7
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	e002      	b.n	80014e6 <Check_Response+0x46>
		}
		else
		{
			Response = 2;
 80014e0:	1dfb      	adds	r3, r7, #7
 80014e2:	2202      	movs	r2, #2
 80014e4:	701a      	strb	r2, [r3, #0]
		}
	}
	return Response;
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	781b      	ldrb	r3, [r3, #0]
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
	uint8_t i=0, j;
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
	    for (j=0; j<8; j++)
 8001500:	1dbb      	adds	r3, r7, #6
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	e032      	b.n	800156e <DHT11_Read+0x7a>
	    {
	        // espera o inicio do bit (baixo 50us)
	        while (!HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin));
 8001508:	46c0      	nop			@ (mov r8, r8)
 800150a:	23a0      	movs	r3, #160	@ 0xa0
 800150c:	05db      	lsls	r3, r3, #23
 800150e:	2102      	movs	r1, #2
 8001510:	0018      	movs	r0, r3
 8001512:	f000 fbb7 	bl	8001c84 <HAL_GPIO_ReadPin>
 8001516:	1e03      	subs	r3, r0, #0
 8001518:	d0f7      	beq.n	800150a <DHT11_Read+0x16>

	        __HAL_TIM_SET_COUNTER(&htim6, 0);
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <DHT11_Read+0x90>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24
	        while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin));
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	23a0      	movs	r3, #160	@ 0xa0
 8001526:	05db      	lsls	r3, r3, #23
 8001528:	2102      	movs	r1, #2
 800152a:	0018      	movs	r0, r3
 800152c:	f000 fbaa 	bl	8001c84 <HAL_GPIO_ReadPin>
 8001530:	1e03      	subs	r3, r0, #0
 8001532:	d1f7      	bne.n	8001524 <DHT11_Read+0x30>
	        uint16_t t = __HAL_TIM_GET_COUNTER(&htim6);
 8001534:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <DHT11_Read+0x90>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	801a      	strh	r2, [r3, #0]

	        if (t > 40)  // se ficou alto mais de ~40us, é 1
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	2b28      	cmp	r3, #40	@ 0x28
 8001544:	d90e      	bls.n	8001564 <DHT11_Read+0x70>
	            i |= (1 << (7-j));
 8001546:	1dbb      	adds	r3, r7, #6
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2207      	movs	r2, #7
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2201      	movs	r2, #1
 8001550:	409a      	lsls	r2, r3
 8001552:	0013      	movs	r3, r2
 8001554:	b25a      	sxtb	r2, r3
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b25b      	sxtb	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b25a      	sxtb	r2, r3
 8001560:	1dfb      	adds	r3, r7, #7
 8001562:	701a      	strb	r2, [r3, #0]
	    for (j=0; j<8; j++)
 8001564:	1dbb      	adds	r3, r7, #6
 8001566:	781a      	ldrb	r2, [r3, #0]
 8001568:	1dbb      	adds	r3, r7, #6
 800156a:	3201      	adds	r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	1dbb      	adds	r3, r7, #6
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b07      	cmp	r3, #7
 8001574:	d9c8      	bls.n	8001508 <DHT11_Read+0x14>
	        // senão é 0
	    }
	    return i;
 8001576:	1dfb      	adds	r3, r7, #7
 8001578:	781b      	ldrb	r3, [r3, #0]
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	20000028 	.word	0x20000028

08001588 <Set_PinInput>:

// CONTROLE DO FLUXO DE INFORMAÇÕES
void Set_PinInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b089      	sub	sp, #36	@ 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	000a      	movs	r2, r1
 8001592:	1cbb      	adds	r3, r7, #2
 8001594:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	240c      	movs	r4, #12
 8001598:	193b      	adds	r3, r7, r4
 800159a:	0018      	movs	r0, r3
 800159c:	2314      	movs	r3, #20
 800159e:	001a      	movs	r2, r3
 80015a0:	2100      	movs	r1, #0
 80015a2:	f001 fa71 	bl	8002a88 <memset>

	GPIO_InitStruct.Pin = DHT11_Pin;
 80015a6:	193b      	adds	r3, r7, r4
 80015a8:	2202      	movs	r2, #2
 80015aa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	193b      	adds	r3, r7, r4
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b2:	193b      	adds	r3, r7, r4
 80015b4:	2201      	movs	r2, #1
 80015b6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80015b8:	193a      	adds	r2, r7, r4
 80015ba:	23a0      	movs	r3, #160	@ 0xa0
 80015bc:	05db      	lsls	r3, r3, #23
 80015be:	0011      	movs	r1, r2
 80015c0:	0018      	movs	r0, r3
 80015c2:	f000 f9e9 	bl	8001998 <HAL_GPIO_Init>
}
 80015c6:	46c0      	nop			@ (mov r8, r8)
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b009      	add	sp, #36	@ 0x24
 80015cc:	bd90      	pop	{r4, r7, pc}

080015ce <Set_PinOutput>:

void Set_PinOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015ce:	b590      	push	{r4, r7, lr}
 80015d0:	b089      	sub	sp, #36	@ 0x24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	000a      	movs	r2, r1
 80015d8:	1cbb      	adds	r3, r7, #2
 80015da:	801a      	strh	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	240c      	movs	r4, #12
 80015de:	193b      	adds	r3, r7, r4
 80015e0:	0018      	movs	r0, r3
 80015e2:	2314      	movs	r3, #20
 80015e4:	001a      	movs	r2, r3
 80015e6:	2100      	movs	r1, #0
 80015e8:	f001 fa4e 	bl	8002a88 <memset>

	GPIO_InitStruct.Pin = DHT11_Pin;
 80015ec:	193b      	adds	r3, r7, r4
 80015ee:	2202      	movs	r2, #2
 80015f0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f2:	193b      	adds	r3, r7, r4
 80015f4:	2201      	movs	r2, #1
 80015f6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f8:	193b      	adds	r3, r7, r4
 80015fa:	2201      	movs	r2, #1
 80015fc:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80015fe:	193a      	adds	r2, r7, r4
 8001600:	23a0      	movs	r3, #160	@ 0xa0
 8001602:	05db      	lsls	r3, r3, #23
 8001604:	0011      	movs	r1, r2
 8001606:	0018      	movs	r0, r3
 8001608:	f000 f9c6 	bl	8001998 <HAL_GPIO_Init>
}
 800160c:	46c0      	nop			@ (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b009      	add	sp, #36	@ 0x24
 8001612:	bd90      	pop	{r4, r7, pc}

08001614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001618:	b672      	cpsid	i
}
 800161a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800161c:	46c0      	nop			@ (mov r8, r8)
 800161e:	e7fd      	b.n	800161c <Error_Handler+0x8>

08001620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001624:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <HAL_MspInit+0x24>)
 8001626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_MspInit+0x24>)
 800162a:	2101      	movs	r1, #1
 800162c:	430a      	orrs	r2, r1
 800162e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <HAL_MspInit+0x24>)
 8001632:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001634:	4b03      	ldr	r3, [pc, #12]	@ (8001644 <HAL_MspInit+0x24>)
 8001636:	2180      	movs	r1, #128	@ 0x80
 8001638:	0549      	lsls	r1, r1, #21
 800163a:	430a      	orrs	r2, r1
 800163c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000

08001648 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a06      	ldr	r2, [pc, #24]	@ (8001670 <HAL_TIM_Base_MspInit+0x28>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d105      	bne.n	8001666 <HAL_TIM_Base_MspInit+0x1e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_TIM_Base_MspInit+0x2c>)
 800165c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800165e:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <HAL_TIM_Base_MspInit+0x2c>)
 8001660:	2110      	movs	r1, #16
 8001662:	430a      	orrs	r2, r1
 8001664:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	46bd      	mov	sp, r7
 800166a:	b002      	add	sp, #8
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	40001000 	.word	0x40001000
 8001674:	40021000 	.word	0x40021000

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800167c:	46c0      	nop			@ (mov r8, r8)
 800167e:	e7fd      	b.n	800167c <NMI_Handler+0x4>

08001680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001684:	46c0      	nop			@ (mov r8, r8)
 8001686:	e7fd      	b.n	8001684 <HardFault_Handler+0x4>

08001688 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800168c:	46c0      	nop			@ (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a0:	f000 f886 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a4:	46c0      	nop			@ (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80016b4:	480d      	ldr	r0, [pc, #52]	@ (80016ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b8:	f7ff fff7 	bl	80016aa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016bc:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80016be:	490d      	ldr	r1, [pc, #52]	@ (80016f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c0:	4a0d      	ldr	r2, [pc, #52]	@ (80016f8 <LoopForever+0xe>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0a      	ldr	r2, [pc, #40]	@ (80016fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001700 <LoopForever+0x16>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e2:	f001 f9d9 	bl	8002a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e6:	f7ff fd47 	bl	8001178 <main>

080016ea <LoopForever>:

LoopForever:
    b LoopForever
 80016ea:	e7fe      	b.n	80016ea <LoopForever>
  ldr   r0, =_estack
 80016ec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016f8:	08002b5c 	.word	0x08002b5c
  ldr r2, =_sbss
 80016fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001700:	20000084 	.word	0x20000084

08001704 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC1_COMP_IRQHandler>
	...

08001708 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800170e:	1dfb      	adds	r3, r7, #7
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_Init+0x3c>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <HAL_Init+0x3c>)
 800171a:	2140      	movs	r1, #64	@ 0x40
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001720:	2000      	movs	r0, #0
 8001722:	f000 f811 	bl	8001748 <HAL_InitTick>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d003      	beq.n	8001732 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
 8001730:	e001      	b.n	8001736 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001732:	f7ff ff75 	bl	8001620 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	781b      	ldrb	r3, [r3, #0]
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b002      	add	sp, #8
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	40022000 	.word	0x40022000

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001750:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <HAL_InitTick+0x5c>)
 8001752:	681c      	ldr	r4, [r3, #0]
 8001754:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <HAL_InitTick+0x60>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	0019      	movs	r1, r3
 800175a:	23fa      	movs	r3, #250	@ 0xfa
 800175c:	0098      	lsls	r0, r3, #2
 800175e:	f7fe fcd3 	bl	8000108 <__udivsi3>
 8001762:	0003      	movs	r3, r0
 8001764:	0019      	movs	r1, r3
 8001766:	0020      	movs	r0, r4
 8001768:	f7fe fcce 	bl	8000108 <__udivsi3>
 800176c:	0003      	movs	r3, r0
 800176e:	0018      	movs	r0, r3
 8001770:	f000 f905 	bl	800197e <HAL_SYSTICK_Config>
 8001774:	1e03      	subs	r3, r0, #0
 8001776:	d001      	beq.n	800177c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e00f      	b.n	800179c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d80b      	bhi.n	800179a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	2301      	movs	r3, #1
 8001786:	425b      	negs	r3, r3
 8001788:	2200      	movs	r2, #0
 800178a:	0018      	movs	r0, r3
 800178c:	f000 f8e2 	bl	8001954 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_InitTick+0x64>)
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b003      	add	sp, #12
 80017a2:	bd90      	pop	{r4, r7, pc}
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_IncTick+0x1c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	001a      	movs	r2, r3
 80017ba:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <HAL_IncTick+0x20>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	18d2      	adds	r2, r2, r3
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <HAL_IncTick+0x20>)
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	46c0      	nop			@ (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			@ (mov r8, r8)
 80017cc:	20000008 	.word	0x20000008
 80017d0:	20000080 	.word	0x20000080

080017d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b02      	ldr	r3, [pc, #8]	@ (80017e4 <HAL_GetTick+0x10>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	20000080 	.word	0x20000080

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff fff0 	bl	80017d4 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3301      	adds	r3, #1
 8001800:	d005      	beq.n	800180e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <HAL_Delay+0x44>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	001a      	movs	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	189b      	adds	r3, r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800180e:	46c0      	nop			@ (mov r8, r8)
 8001810:	f7ff ffe0 	bl	80017d4 <HAL_GetTick>
 8001814:	0002      	movs	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8f7      	bhi.n	8001810 <HAL_Delay+0x28>
  {
  }
}
 8001820:	46c0      	nop			@ (mov r8, r8)
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	46bd      	mov	sp, r7
 8001826:	b004      	add	sp, #16
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	20000008 	.word	0x20000008

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	0002      	movs	r2, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b7f      	cmp	r3, #127	@ 0x7f
 8001844:	d828      	bhi.n	8001898 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001846:	4a2f      	ldr	r2, [pc, #188]	@ (8001904 <__NVIC_SetPriority+0xd4>)
 8001848:	1dfb      	adds	r3, r7, #7
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b25b      	sxtb	r3, r3
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	33c0      	adds	r3, #192	@ 0xc0
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	589b      	ldr	r3, [r3, r2]
 8001856:	1dfa      	adds	r2, r7, #7
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	0011      	movs	r1, r2
 800185c:	2203      	movs	r2, #3
 800185e:	400a      	ands	r2, r1
 8001860:	00d2      	lsls	r2, r2, #3
 8001862:	21ff      	movs	r1, #255	@ 0xff
 8001864:	4091      	lsls	r1, r2
 8001866:	000a      	movs	r2, r1
 8001868:	43d2      	mvns	r2, r2
 800186a:	401a      	ands	r2, r3
 800186c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	019b      	lsls	r3, r3, #6
 8001872:	22ff      	movs	r2, #255	@ 0xff
 8001874:	401a      	ands	r2, r3
 8001876:	1dfb      	adds	r3, r7, #7
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	0018      	movs	r0, r3
 800187c:	2303      	movs	r3, #3
 800187e:	4003      	ands	r3, r0
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001884:	481f      	ldr	r0, [pc, #124]	@ (8001904 <__NVIC_SetPriority+0xd4>)
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b25b      	sxtb	r3, r3
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	430a      	orrs	r2, r1
 8001890:	33c0      	adds	r3, #192	@ 0xc0
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001896:	e031      	b.n	80018fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001898:	4a1b      	ldr	r2, [pc, #108]	@ (8001908 <__NVIC_SetPriority+0xd8>)
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	0019      	movs	r1, r3
 80018a0:	230f      	movs	r3, #15
 80018a2:	400b      	ands	r3, r1
 80018a4:	3b08      	subs	r3, #8
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3306      	adds	r3, #6
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	18d3      	adds	r3, r2, r3
 80018ae:	3304      	adds	r3, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	1dfa      	adds	r2, r7, #7
 80018b4:	7812      	ldrb	r2, [r2, #0]
 80018b6:	0011      	movs	r1, r2
 80018b8:	2203      	movs	r2, #3
 80018ba:	400a      	ands	r2, r1
 80018bc:	00d2      	lsls	r2, r2, #3
 80018be:	21ff      	movs	r1, #255	@ 0xff
 80018c0:	4091      	lsls	r1, r2
 80018c2:	000a      	movs	r2, r1
 80018c4:	43d2      	mvns	r2, r2
 80018c6:	401a      	ands	r2, r3
 80018c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	22ff      	movs	r2, #255	@ 0xff
 80018d0:	401a      	ands	r2, r3
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	0018      	movs	r0, r3
 80018d8:	2303      	movs	r3, #3
 80018da:	4003      	ands	r3, r0
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e0:	4809      	ldr	r0, [pc, #36]	@ (8001908 <__NVIC_SetPriority+0xd8>)
 80018e2:	1dfb      	adds	r3, r7, #7
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	001c      	movs	r4, r3
 80018e8:	230f      	movs	r3, #15
 80018ea:	4023      	ands	r3, r4
 80018ec:	3b08      	subs	r3, #8
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	430a      	orrs	r2, r1
 80018f2:	3306      	adds	r3, #6
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	18c3      	adds	r3, r0, r3
 80018f8:	3304      	adds	r3, #4
 80018fa:	601a      	str	r2, [r3, #0]
}
 80018fc:	46c0      	nop			@ (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b003      	add	sp, #12
 8001902:	bd90      	pop	{r4, r7, pc}
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	1e5a      	subs	r2, r3, #1
 8001918:	2380      	movs	r3, #128	@ 0x80
 800191a:	045b      	lsls	r3, r3, #17
 800191c:	429a      	cmp	r2, r3
 800191e:	d301      	bcc.n	8001924 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001920:	2301      	movs	r3, #1
 8001922:	e010      	b.n	8001946 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001924:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <SysTick_Config+0x44>)
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	3a01      	subs	r2, #1
 800192a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192c:	2301      	movs	r3, #1
 800192e:	425b      	negs	r3, r3
 8001930:	2103      	movs	r1, #3
 8001932:	0018      	movs	r0, r3
 8001934:	f7ff ff7c 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <SysTick_Config+0x44>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <SysTick_Config+0x44>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	0018      	movs	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	b002      	add	sp, #8
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	210f      	movs	r1, #15
 8001960:	187b      	adds	r3, r7, r1
 8001962:	1c02      	adds	r2, r0, #0
 8001964:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	187b      	adds	r3, r7, r1
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b25b      	sxtb	r3, r3
 800196e:	0011      	movs	r1, r2
 8001970:	0018      	movs	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b004      	add	sp, #16
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff ffbf 	bl	800190c <SysTick_Config>
 800198e:	0003      	movs	r3, r0
}
 8001990:	0018      	movs	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80019ae:	e14f      	b.n	8001c50 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2101      	movs	r1, #1
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	4091      	lsls	r1, r2
 80019ba:	000a      	movs	r2, r1
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <HAL_GPIO_Init+0x30>
 80019c6:	e140      	b.n	8001c4a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2203      	movs	r2, #3
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d005      	beq.n	80019e0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2203      	movs	r2, #3
 80019da:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d130      	bne.n	8001a42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	409a      	lsls	r2, r3
 80019ee:	0013      	movs	r3, r2
 80019f0:	43da      	mvns	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	409a      	lsls	r2, r3
 8001a02:	0013      	movs	r3, r2
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a16:	2201      	movs	r2, #1
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
 8001a34:	0013      	movs	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2203      	movs	r2, #3
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d017      	beq.n	8001a7e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	0013      	movs	r3, r2
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	0013      	movs	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2203      	movs	r2, #3
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d123      	bne.n	8001ad2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	58d3      	ldr	r3, [r2, r3]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2207      	movs	r2, #7
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	0013      	movs	r3, r2
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	691a      	ldr	r2, [r3, #16]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2107      	movs	r1, #7
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	409a      	lsls	r2, r3
 8001abc:	0013      	movs	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	6939      	ldr	r1, [r7, #16]
 8001ad0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2203      	movs	r2, #3
 8001af0:	401a      	ands	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	409a      	lsls	r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	23c0      	movs	r3, #192	@ 0xc0
 8001b0c:	029b      	lsls	r3, r3, #10
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d100      	bne.n	8001b14 <HAL_GPIO_Init+0x17c>
 8001b12:	e09a      	b.n	8001c4a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b14:	4b54      	ldr	r3, [pc, #336]	@ (8001c68 <HAL_GPIO_Init+0x2d0>)
 8001b16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b18:	4b53      	ldr	r3, [pc, #332]	@ (8001c68 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b20:	4a52      	ldr	r2, [pc, #328]	@ (8001c6c <HAL_GPIO_Init+0x2d4>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	589b      	ldr	r3, [r3, r2]
 8001b2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2203      	movs	r2, #3
 8001b32:	4013      	ands	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	23a0      	movs	r3, #160	@ 0xa0
 8001b48:	05db      	lsls	r3, r3, #23
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d019      	beq.n	8001b82 <HAL_GPIO_Init+0x1ea>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a47      	ldr	r2, [pc, #284]	@ (8001c70 <HAL_GPIO_Init+0x2d8>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d013      	beq.n	8001b7e <HAL_GPIO_Init+0x1e6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a46      	ldr	r2, [pc, #280]	@ (8001c74 <HAL_GPIO_Init+0x2dc>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00d      	beq.n	8001b7a <HAL_GPIO_Init+0x1e2>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a45      	ldr	r2, [pc, #276]	@ (8001c78 <HAL_GPIO_Init+0x2e0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d007      	beq.n	8001b76 <HAL_GPIO_Init+0x1de>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a44      	ldr	r2, [pc, #272]	@ (8001c7c <HAL_GPIO_Init+0x2e4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d101      	bne.n	8001b72 <HAL_GPIO_Init+0x1da>
 8001b6e:	2305      	movs	r3, #5
 8001b70:	e008      	b.n	8001b84 <HAL_GPIO_Init+0x1ec>
 8001b72:	2306      	movs	r3, #6
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x1ec>
 8001b76:	2303      	movs	r3, #3
 8001b78:	e004      	b.n	8001b84 <HAL_GPIO_Init+0x1ec>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e002      	b.n	8001b84 <HAL_GPIO_Init+0x1ec>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e000      	b.n	8001b84 <HAL_GPIO_Init+0x1ec>
 8001b82:	2300      	movs	r3, #0
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	2103      	movs	r1, #3
 8001b88:	400a      	ands	r2, r1
 8001b8a:	0092      	lsls	r2, r2, #2
 8001b8c:	4093      	lsls	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b94:	4935      	ldr	r1, [pc, #212]	@ (8001c6c <HAL_GPIO_Init+0x2d4>)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba2:	4b37      	ldr	r3, [pc, #220]	@ (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	43da      	mvns	r2, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	2380      	movs	r3, #128	@ 0x80
 8001bb8:	035b      	lsls	r3, r3, #13
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	43da      	mvns	r2, r3
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	2380      	movs	r3, #128	@ 0x80
 8001be2:	039b      	lsls	r3, r3, #14
 8001be4:	4013      	ands	r3, r2
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bf0:	4b23      	ldr	r3, [pc, #140]	@ (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001bf6:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	2380      	movs	r3, #128	@ 0x80
 8001c0c:	029b      	lsls	r3, r3, #10
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c1a:	4b19      	ldr	r3, [pc, #100]	@ (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c20:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43da      	mvns	r2, r3
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	025b      	lsls	r3, r3, #9
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c44:	4b0e      	ldr	r3, [pc, #56]	@ (8001c80 <HAL_GPIO_Init+0x2e8>)
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	40da      	lsrs	r2, r3
 8001c58:	1e13      	subs	r3, r2, #0
 8001c5a:	d000      	beq.n	8001c5e <HAL_GPIO_Init+0x2c6>
 8001c5c:	e6a8      	b.n	80019b0 <HAL_GPIO_Init+0x18>
  }
}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b006      	add	sp, #24
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	50000400 	.word	0x50000400
 8001c74:	50000800 	.word	0x50000800
 8001c78:	50000c00 	.word	0x50000c00
 8001c7c:	50001c00 	.word	0x50001c00
 8001c80:	40010400 	.word	0x40010400

08001c84 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	000a      	movs	r2, r1
 8001c8e:	1cbb      	adds	r3, r7, #2
 8001c90:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	1cba      	adds	r2, r7, #2
 8001c98:	8812      	ldrh	r2, [r2, #0]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d004      	beq.n	8001ca8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001c9e:	230f      	movs	r3, #15
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	e003      	b.n	8001cb0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ca8:	230f      	movs	r3, #15
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	781b      	ldrb	r3, [r3, #0]
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b004      	add	sp, #16
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	0008      	movs	r0, r1
 8001cc8:	0011      	movs	r1, r2
 8001cca:	1cbb      	adds	r3, r7, #2
 8001ccc:	1c02      	adds	r2, r0, #0
 8001cce:	801a      	strh	r2, [r3, #0]
 8001cd0:	1c7b      	adds	r3, r7, #1
 8001cd2:	1c0a      	adds	r2, r1, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd6:	1c7b      	adds	r3, r7, #1
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cde:	1cbb      	adds	r3, r7, #2
 8001ce0:	881a      	ldrh	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001ce6:	e003      	b.n	8001cf0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001ce8:	1cbb      	adds	r3, r7, #2
 8001cea:	881a      	ldrh	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cf0:	46c0      	nop			@ (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b002      	add	sp, #8
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b5b0      	push	{r4, r5, r7, lr}
 8001cfa:	b08a      	sub	sp, #40	@ 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	f000 fbaf 	bl	800246a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0c:	4bcf      	ldr	r3, [pc, #828]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	220c      	movs	r2, #12
 8001d12:	4013      	ands	r3, r2
 8001d14:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d16:	4bcd      	ldr	r3, [pc, #820]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	2380      	movs	r3, #128	@ 0x80
 8001d1c:	025b      	lsls	r3, r3, #9
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2201      	movs	r2, #1
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d100      	bne.n	8001d2e <HAL_RCC_OscConfig+0x36>
 8001d2c:	e07e      	b.n	8001e2c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d007      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d112      	bne.n	8001d60 <HAL_RCC_OscConfig+0x68>
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	025b      	lsls	r3, r3, #9
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d10d      	bne.n	8001d60 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	4bc1      	ldr	r3, [pc, #772]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	029b      	lsls	r3, r3, #10
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d100      	bne.n	8001d52 <HAL_RCC_OscConfig+0x5a>
 8001d50:	e06b      	b.n	8001e2a <HAL_RCC_OscConfig+0x132>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d167      	bne.n	8001e2a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f000 fb85 	bl	800246a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	2380      	movs	r3, #128	@ 0x80
 8001d66:	025b      	lsls	r3, r3, #9
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_OscConfig+0x84>
 8001d6c:	4bb7      	ldr	r3, [pc, #732]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4bb6      	ldr	r3, [pc, #728]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001d72:	2180      	movs	r1, #128	@ 0x80
 8001d74:	0249      	lsls	r1, r1, #9
 8001d76:	430a      	orrs	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e027      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	23a0      	movs	r3, #160	@ 0xa0
 8001d82:	02db      	lsls	r3, r3, #11
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d10e      	bne.n	8001da6 <HAL_RCC_OscConfig+0xae>
 8001d88:	4bb0      	ldr	r3, [pc, #704]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4baf      	ldr	r3, [pc, #700]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001d8e:	2180      	movs	r1, #128	@ 0x80
 8001d90:	02c9      	lsls	r1, r1, #11
 8001d92:	430a      	orrs	r2, r1
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	4bad      	ldr	r3, [pc, #692]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4bac      	ldr	r3, [pc, #688]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001d9c:	2180      	movs	r1, #128	@ 0x80
 8001d9e:	0249      	lsls	r1, r1, #9
 8001da0:	430a      	orrs	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	e012      	b.n	8001dcc <HAL_RCC_OscConfig+0xd4>
 8001da6:	4ba9      	ldr	r3, [pc, #676]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4ba8      	ldr	r3, [pc, #672]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001dac:	49a8      	ldr	r1, [pc, #672]	@ (8002050 <HAL_RCC_OscConfig+0x358>)
 8001dae:	400a      	ands	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	4ba6      	ldr	r3, [pc, #664]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	2380      	movs	r3, #128	@ 0x80
 8001db8:	025b      	lsls	r3, r3, #9
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4ba2      	ldr	r3, [pc, #648]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4ba1      	ldr	r3, [pc, #644]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001dc6:	49a3      	ldr	r1, [pc, #652]	@ (8002054 <HAL_RCC_OscConfig+0x35c>)
 8001dc8:	400a      	ands	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d015      	beq.n	8001e00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fcfe 	bl	80017d4 <HAL_GetTick>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ddc:	e009      	b.n	8001df2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dde:	f7ff fcf9 	bl	80017d4 <HAL_GetTick>
 8001de2:	0002      	movs	r2, r0
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b64      	cmp	r3, #100	@ 0x64
 8001dea:	d902      	bls.n	8001df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	f000 fb3c 	bl	800246a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001df2:	4b96      	ldr	r3, [pc, #600]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2380      	movs	r3, #128	@ 0x80
 8001df8:	029b      	lsls	r3, r3, #10
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d0ef      	beq.n	8001dde <HAL_RCC_OscConfig+0xe6>
 8001dfe:	e015      	b.n	8001e2c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff fce8 	bl	80017d4 <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0a:	f7ff fce3 	bl	80017d4 <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b64      	cmp	r3, #100	@ 0x64
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e326      	b.n	800246a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e1c:	4b8b      	ldr	r3, [pc, #556]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	029b      	lsls	r3, r3, #10
 8001e24:	4013      	ands	r3, r2
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x112>
 8001e28:	e000      	b.n	8001e2c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2202      	movs	r2, #2
 8001e32:	4013      	ands	r3, r2
 8001e34:	d100      	bne.n	8001e38 <HAL_RCC_OscConfig+0x140>
 8001e36:	e08b      	b.n	8001f50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d13e      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1d0>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d13b      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001e50:	4b7e      	ldr	r3, [pc, #504]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2204      	movs	r2, #4
 8001e56:	4013      	ands	r3, r2
 8001e58:	d004      	beq.n	8001e64 <HAL_RCC_OscConfig+0x16c>
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e302      	b.n	800246a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	4b79      	ldr	r3, [pc, #484]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4a7b      	ldr	r2, [pc, #492]	@ (8002058 <HAL_RCC_OscConfig+0x360>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	0019      	movs	r1, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	021a      	lsls	r2, r3, #8
 8001e74:	4b75      	ldr	r3, [pc, #468]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001e76:	430a      	orrs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e7a:	4b74      	ldr	r3, [pc, #464]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2209      	movs	r2, #9
 8001e80:	4393      	bics	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	4b71      	ldr	r3, [pc, #452]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e8c:	f000 fc40 	bl	8002710 <HAL_RCC_GetSysClockFreq>
 8001e90:	0001      	movs	r1, r0
 8001e92:	4b6e      	ldr	r3, [pc, #440]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	220f      	movs	r2, #15
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	4a6f      	ldr	r2, [pc, #444]	@ (800205c <HAL_RCC_OscConfig+0x364>)
 8001e9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ea0:	000a      	movs	r2, r1
 8001ea2:	40da      	lsrs	r2, r3
 8001ea4:	4b6e      	ldr	r3, [pc, #440]	@ (8002060 <HAL_RCC_OscConfig+0x368>)
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001ea8:	4b6e      	ldr	r3, [pc, #440]	@ (8002064 <HAL_RCC_OscConfig+0x36c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2513      	movs	r5, #19
 8001eae:	197c      	adds	r4, r7, r5
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7ff fc49 	bl	8001748 <HAL_InitTick>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001eba:	197b      	adds	r3, r7, r5
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d046      	beq.n	8001f50 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001ec2:	197b      	adds	r3, r7, r5
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	e2d0      	b.n	800246a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d027      	beq.n	8001f1e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ece:	4b5f      	ldr	r3, [pc, #380]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2209      	movs	r2, #9
 8001ed4:	4393      	bics	r3, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	4b5c      	ldr	r3, [pc, #368]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fc78 	bl	80017d4 <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eea:	f7ff fc73 	bl	80017d4 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e2b6      	b.n	800246a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001efc:	4b53      	ldr	r3, [pc, #332]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2204      	movs	r2, #4
 8001f02:	4013      	ands	r3, r2
 8001f04:	d0f1      	beq.n	8001eea <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f06:	4b51      	ldr	r3, [pc, #324]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4a53      	ldr	r2, [pc, #332]	@ (8002058 <HAL_RCC_OscConfig+0x360>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	0019      	movs	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	021a      	lsls	r2, r3, #8
 8001f16:	4b4d      	ldr	r3, [pc, #308]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	e018      	b.n	8001f50 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b4a      	ldr	r3, [pc, #296]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001f24:	2101      	movs	r1, #1
 8001f26:	438a      	bics	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7ff fc53 	bl	80017d4 <HAL_GetTick>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f34:	f7ff fc4e 	bl	80017d4 <HAL_GetTick>
 8001f38:	0002      	movs	r2, r0
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e291      	b.n	800246a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f46:	4b41      	ldr	r3, [pc, #260]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d1f1      	bne.n	8001f34 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2210      	movs	r2, #16
 8001f56:	4013      	ands	r3, r2
 8001f58:	d100      	bne.n	8001f5c <HAL_RCC_OscConfig+0x264>
 8001f5a:	e0a1      	b.n	80020a0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d140      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f62:	4b3a      	ldr	r3, [pc, #232]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	2380      	movs	r3, #128	@ 0x80
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d005      	beq.n	8001f7a <HAL_RCC_OscConfig+0x282>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e277      	b.n	800246a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7a:	4b34      	ldr	r3, [pc, #208]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4a3a      	ldr	r2, [pc, #232]	@ (8002068 <HAL_RCC_OscConfig+0x370>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	0019      	movs	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f88:	4b30      	ldr	r3, [pc, #192]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	0a19      	lsrs	r1, r3, #8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	061a      	lsls	r2, r3, #24
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	0b5b      	lsrs	r3, r3, #13
 8001fa8:	3301      	adds	r3, #1
 8001faa:	2280      	movs	r2, #128	@ 0x80
 8001fac:	0212      	lsls	r2, r2, #8
 8001fae:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001fb0:	4b26      	ldr	r3, [pc, #152]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	210f      	movs	r1, #15
 8001fb8:	400b      	ands	r3, r1
 8001fba:	4928      	ldr	r1, [pc, #160]	@ (800205c <HAL_RCC_OscConfig+0x364>)
 8001fbc:	5ccb      	ldrb	r3, [r1, r3]
 8001fbe:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001fc0:	4b27      	ldr	r3, [pc, #156]	@ (8002060 <HAL_RCC_OscConfig+0x368>)
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001fc4:	4b27      	ldr	r3, [pc, #156]	@ (8002064 <HAL_RCC_OscConfig+0x36c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2513      	movs	r5, #19
 8001fca:	197c      	adds	r4, r7, r5
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7ff fbbb 	bl	8001748 <HAL_InitTick>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001fd6:	197b      	adds	r3, r7, r5
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d060      	beq.n	80020a0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001fde:	197b      	adds	r3, r7, r5
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	e242      	b.n	800246a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d03f      	beq.n	800206c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fec:	4b17      	ldr	r3, [pc, #92]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b16      	ldr	r3, [pc, #88]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8001ff2:	2180      	movs	r1, #128	@ 0x80
 8001ff4:	0049      	lsls	r1, r1, #1
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7ff fbeb 	bl	80017d4 <HAL_GetTick>
 8001ffe:	0003      	movs	r3, r0
 8002000:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002004:	f7ff fbe6 	bl	80017d4 <HAL_GetTick>
 8002008:	0002      	movs	r2, r0
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e229      	b.n	800246a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4013      	ands	r3, r2
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a10      	ldr	r2, [pc, #64]	@ (8002068 <HAL_RCC_OscConfig+0x370>)
 8002028:	4013      	ands	r3, r2
 800202a:	0019      	movs	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002030:	4b06      	ldr	r3, [pc, #24]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8002032:	430a      	orrs	r2, r1
 8002034:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	0a19      	lsrs	r1, r3, #8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	061a      	lsls	r2, r3, #24
 8002044:	4b01      	ldr	r3, [pc, #4]	@ (800204c <HAL_RCC_OscConfig+0x354>)
 8002046:	430a      	orrs	r2, r1
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	e029      	b.n	80020a0 <HAL_RCC_OscConfig+0x3a8>
 800204c:	40021000 	.word	0x40021000
 8002050:	fffeffff 	.word	0xfffeffff
 8002054:	fffbffff 	.word	0xfffbffff
 8002058:	ffffe0ff 	.word	0xffffe0ff
 800205c:	08002b38 	.word	0x08002b38
 8002060:	20000000 	.word	0x20000000
 8002064:	20000004 	.word	0x20000004
 8002068:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800206c:	4bbd      	ldr	r3, [pc, #756]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4bbc      	ldr	r3, [pc, #752]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 8002072:	49bd      	ldr	r1, [pc, #756]	@ (8002368 <HAL_RCC_OscConfig+0x670>)
 8002074:	400a      	ands	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff fbac 	bl	80017d4 <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002082:	f7ff fba7 	bl	80017d4 <HAL_GetTick>
 8002086:	0002      	movs	r2, r0
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e1ea      	b.n	800246a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002094:	4bb3      	ldr	r3, [pc, #716]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	2380      	movs	r3, #128	@ 0x80
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4013      	ands	r3, r2
 800209e:	d1f0      	bne.n	8002082 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2208      	movs	r2, #8
 80020a6:	4013      	ands	r3, r2
 80020a8:	d036      	beq.n	8002118 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d019      	beq.n	80020e6 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b2:	4bac      	ldr	r3, [pc, #688]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80020b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020b6:	4bab      	ldr	r3, [pc, #684]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80020b8:	2101      	movs	r1, #1
 80020ba:	430a      	orrs	r2, r1
 80020bc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7ff fb89 	bl	80017d4 <HAL_GetTick>
 80020c2:	0003      	movs	r3, r0
 80020c4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c8:	f7ff fb84 	bl	80017d4 <HAL_GetTick>
 80020cc:	0002      	movs	r2, r0
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e1c7      	b.n	800246a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020da:	4ba2      	ldr	r3, [pc, #648]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80020dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020de:	2202      	movs	r2, #2
 80020e0:	4013      	ands	r3, r2
 80020e2:	d0f1      	beq.n	80020c8 <HAL_RCC_OscConfig+0x3d0>
 80020e4:	e018      	b.n	8002118 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e6:	4b9f      	ldr	r3, [pc, #636]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80020e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020ea:	4b9e      	ldr	r3, [pc, #632]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	438a      	bics	r2, r1
 80020f0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7ff fb6f 	bl	80017d4 <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fc:	f7ff fb6a 	bl	80017d4 <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1ad      	b.n	800246a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800210e:	4b95      	ldr	r3, [pc, #596]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 8002110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	d1f1      	bne.n	80020fc <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2204      	movs	r2, #4
 800211e:	4013      	ands	r3, r2
 8002120:	d100      	bne.n	8002124 <HAL_RCC_OscConfig+0x42c>
 8002122:	e0ae      	b.n	8002282 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002124:	2027      	movs	r0, #39	@ 0x27
 8002126:	183b      	adds	r3, r7, r0
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212c:	4b8d      	ldr	r3, [pc, #564]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 800212e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002130:	2380      	movs	r3, #128	@ 0x80
 8002132:	055b      	lsls	r3, r3, #21
 8002134:	4013      	ands	r3, r2
 8002136:	d109      	bne.n	800214c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	4b8a      	ldr	r3, [pc, #552]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 800213a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800213c:	4b89      	ldr	r3, [pc, #548]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 800213e:	2180      	movs	r1, #128	@ 0x80
 8002140:	0549      	lsls	r1, r1, #21
 8002142:	430a      	orrs	r2, r1
 8002144:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002146:	183b      	adds	r3, r7, r0
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	4b87      	ldr	r3, [pc, #540]	@ (800236c <HAL_RCC_OscConfig+0x674>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	@ 0x80
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4013      	ands	r3, r2
 8002156:	d11a      	bne.n	800218e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002158:	4b84      	ldr	r3, [pc, #528]	@ (800236c <HAL_RCC_OscConfig+0x674>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b83      	ldr	r3, [pc, #524]	@ (800236c <HAL_RCC_OscConfig+0x674>)
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	0049      	lsls	r1, r1, #1
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002166:	f7ff fb35 	bl	80017d4 <HAL_GetTick>
 800216a:	0003      	movs	r3, r0
 800216c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002170:	f7ff fb30 	bl	80017d4 <HAL_GetTick>
 8002174:	0002      	movs	r2, r0
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	@ 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e173      	b.n	800246a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	4b7a      	ldr	r3, [pc, #488]	@ (800236c <HAL_RCC_OscConfig+0x674>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	2380      	movs	r3, #128	@ 0x80
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4013      	ands	r3, r2
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	2380      	movs	r3, #128	@ 0x80
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	429a      	cmp	r2, r3
 8002198:	d107      	bne.n	80021aa <HAL_RCC_OscConfig+0x4b2>
 800219a:	4b72      	ldr	r3, [pc, #456]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 800219c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800219e:	4b71      	ldr	r3, [pc, #452]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80021a0:	2180      	movs	r1, #128	@ 0x80
 80021a2:	0049      	lsls	r1, r1, #1
 80021a4:	430a      	orrs	r2, r1
 80021a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80021a8:	e031      	b.n	800220e <HAL_RCC_OscConfig+0x516>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x4d4>
 80021b2:	4b6c      	ldr	r3, [pc, #432]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80021b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021b6:	4b6b      	ldr	r3, [pc, #428]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80021b8:	496b      	ldr	r1, [pc, #428]	@ (8002368 <HAL_RCC_OscConfig+0x670>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80021be:	4b69      	ldr	r3, [pc, #420]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80021c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021c2:	4b68      	ldr	r3, [pc, #416]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80021c4:	496a      	ldr	r1, [pc, #424]	@ (8002370 <HAL_RCC_OscConfig+0x678>)
 80021c6:	400a      	ands	r2, r1
 80021c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80021ca:	e020      	b.n	800220e <HAL_RCC_OscConfig+0x516>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	23a0      	movs	r3, #160	@ 0xa0
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d10e      	bne.n	80021f6 <HAL_RCC_OscConfig+0x4fe>
 80021d8:	4b62      	ldr	r3, [pc, #392]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80021da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021dc:	4b61      	ldr	r3, [pc, #388]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80021de:	2180      	movs	r1, #128	@ 0x80
 80021e0:	00c9      	lsls	r1, r1, #3
 80021e2:	430a      	orrs	r2, r1
 80021e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80021e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80021e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021ea:	4b5e      	ldr	r3, [pc, #376]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80021ec:	2180      	movs	r1, #128	@ 0x80
 80021ee:	0049      	lsls	r1, r1, #1
 80021f0:	430a      	orrs	r2, r1
 80021f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80021f4:	e00b      	b.n	800220e <HAL_RCC_OscConfig+0x516>
 80021f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80021f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80021fc:	495a      	ldr	r1, [pc, #360]	@ (8002368 <HAL_RCC_OscConfig+0x670>)
 80021fe:	400a      	ands	r2, r1
 8002200:	651a      	str	r2, [r3, #80]	@ 0x50
 8002202:	4b58      	ldr	r3, [pc, #352]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 8002204:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002206:	4b57      	ldr	r3, [pc, #348]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 8002208:	4959      	ldr	r1, [pc, #356]	@ (8002370 <HAL_RCC_OscConfig+0x678>)
 800220a:	400a      	ands	r2, r1
 800220c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d015      	beq.n	8002242 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002216:	f7ff fadd 	bl	80017d4 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800221e:	e009      	b.n	8002234 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7ff fad8 	bl	80017d4 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	4a52      	ldr	r2, [pc, #328]	@ (8002374 <HAL_RCC_OscConfig+0x67c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e11a      	b.n	800246a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002234:	4b4b      	ldr	r3, [pc, #300]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 8002236:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002238:	2380      	movs	r3, #128	@ 0x80
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4013      	ands	r3, r2
 800223e:	d0ef      	beq.n	8002220 <HAL_RCC_OscConfig+0x528>
 8002240:	e014      	b.n	800226c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002242:	f7ff fac7 	bl	80017d4 <HAL_GetTick>
 8002246:	0003      	movs	r3, r0
 8002248:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800224a:	e009      	b.n	8002260 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224c:	f7ff fac2 	bl	80017d4 <HAL_GetTick>
 8002250:	0002      	movs	r2, r0
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	4a47      	ldr	r2, [pc, #284]	@ (8002374 <HAL_RCC_OscConfig+0x67c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e104      	b.n	800246a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002260:	4b40      	ldr	r3, [pc, #256]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 8002262:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d1ef      	bne.n	800224c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800226c:	2327      	movs	r3, #39	@ 0x27
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002276:	4b3b      	ldr	r3, [pc, #236]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 8002278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800227a:	4b3a      	ldr	r3, [pc, #232]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 800227c:	493e      	ldr	r1, [pc, #248]	@ (8002378 <HAL_RCC_OscConfig+0x680>)
 800227e:	400a      	ands	r2, r1
 8002280:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2220      	movs	r2, #32
 8002288:	4013      	ands	r3, r2
 800228a:	d049      	beq.n	8002320 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d026      	beq.n	80022e2 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002294:	4b33      	ldr	r3, [pc, #204]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	4b32      	ldr	r3, [pc, #200]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 800229a:	2101      	movs	r1, #1
 800229c:	430a      	orrs	r2, r1
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	4b30      	ldr	r3, [pc, #192]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80022a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	430a      	orrs	r2, r1
 80022aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80022ac:	4b33      	ldr	r3, [pc, #204]	@ (800237c <HAL_RCC_OscConfig+0x684>)
 80022ae:	6a1a      	ldr	r2, [r3, #32]
 80022b0:	4b32      	ldr	r3, [pc, #200]	@ (800237c <HAL_RCC_OscConfig+0x684>)
 80022b2:	2180      	movs	r1, #128	@ 0x80
 80022b4:	0189      	lsls	r1, r1, #6
 80022b6:	430a      	orrs	r2, r1
 80022b8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7ff fa8b 	bl	80017d4 <HAL_GetTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022c4:	f7ff fa86 	bl	80017d4 <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e0c9      	b.n	800246a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022d6:	4b23      	ldr	r3, [pc, #140]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2202      	movs	r2, #2
 80022dc:	4013      	ands	r3, r2
 80022de:	d0f1      	beq.n	80022c4 <HAL_RCC_OscConfig+0x5cc>
 80022e0:	e01e      	b.n	8002320 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80022e2:	4b20      	ldr	r3, [pc, #128]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 80022e8:	2101      	movs	r1, #1
 80022ea:	438a      	bics	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	4b23      	ldr	r3, [pc, #140]	@ (800237c <HAL_RCC_OscConfig+0x684>)
 80022f0:	6a1a      	ldr	r2, [r3, #32]
 80022f2:	4b22      	ldr	r3, [pc, #136]	@ (800237c <HAL_RCC_OscConfig+0x684>)
 80022f4:	4922      	ldr	r1, [pc, #136]	@ (8002380 <HAL_RCC_OscConfig+0x688>)
 80022f6:	400a      	ands	r2, r1
 80022f8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7ff fa6b 	bl	80017d4 <HAL_GetTick>
 80022fe:	0003      	movs	r3, r0
 8002300:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002304:	f7ff fa66 	bl	80017d4 <HAL_GetTick>
 8002308:	0002      	movs	r2, r0
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e0a9      	b.n	800246a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002316:	4b13      	ldr	r3, [pc, #76]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2202      	movs	r2, #2
 800231c:	4013      	ands	r3, r2
 800231e:	d1f1      	bne.n	8002304 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002324:	2b00      	cmp	r3, #0
 8002326:	d100      	bne.n	800232a <HAL_RCC_OscConfig+0x632>
 8002328:	e09e      	b.n	8002468 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	2b0c      	cmp	r3, #12
 800232e:	d100      	bne.n	8002332 <HAL_RCC_OscConfig+0x63a>
 8002330:	e077      	b.n	8002422 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002336:	2b02      	cmp	r3, #2
 8002338:	d158      	bne.n	80023ec <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233a:	4b0a      	ldr	r3, [pc, #40]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b09      	ldr	r3, [pc, #36]	@ (8002364 <HAL_RCC_OscConfig+0x66c>)
 8002340:	4910      	ldr	r1, [pc, #64]	@ (8002384 <HAL_RCC_OscConfig+0x68c>)
 8002342:	400a      	ands	r2, r1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7ff fa45 	bl	80017d4 <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800234e:	e01b      	b.n	8002388 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff fa40 	bl	80017d4 <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d914      	bls.n	8002388 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e083      	b.n	800246a <HAL_RCC_OscConfig+0x772>
 8002362:	46c0      	nop			@ (mov r8, r8)
 8002364:	40021000 	.word	0x40021000
 8002368:	fffffeff 	.word	0xfffffeff
 800236c:	40007000 	.word	0x40007000
 8002370:	fffffbff 	.word	0xfffffbff
 8002374:	00001388 	.word	0x00001388
 8002378:	efffffff 	.word	0xefffffff
 800237c:	40010000 	.word	0x40010000
 8002380:	ffffdfff 	.word	0xffffdfff
 8002384:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002388:	4b3a      	ldr	r3, [pc, #232]	@ (8002474 <HAL_RCC_OscConfig+0x77c>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	049b      	lsls	r3, r3, #18
 8002390:	4013      	ands	r3, r2
 8002392:	d1dd      	bne.n	8002350 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002394:	4b37      	ldr	r3, [pc, #220]	@ (8002474 <HAL_RCC_OscConfig+0x77c>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a37      	ldr	r2, [pc, #220]	@ (8002478 <HAL_RCC_OscConfig+0x780>)
 800239a:	4013      	ands	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ac:	431a      	orrs	r2, r3
 80023ae:	4b31      	ldr	r3, [pc, #196]	@ (8002474 <HAL_RCC_OscConfig+0x77c>)
 80023b0:	430a      	orrs	r2, r1
 80023b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002474 <HAL_RCC_OscConfig+0x77c>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002474 <HAL_RCC_OscConfig+0x77c>)
 80023ba:	2180      	movs	r1, #128	@ 0x80
 80023bc:	0449      	lsls	r1, r1, #17
 80023be:	430a      	orrs	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7ff fa07 	bl	80017d4 <HAL_GetTick>
 80023c6:	0003      	movs	r3, r0
 80023c8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023cc:	f7ff fa02 	bl	80017d4 <HAL_GetTick>
 80023d0:	0002      	movs	r2, r0
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e045      	b.n	800246a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023de:	4b25      	ldr	r3, [pc, #148]	@ (8002474 <HAL_RCC_OscConfig+0x77c>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	2380      	movs	r3, #128	@ 0x80
 80023e4:	049b      	lsls	r3, r3, #18
 80023e6:	4013      	ands	r3, r2
 80023e8:	d0f0      	beq.n	80023cc <HAL_RCC_OscConfig+0x6d4>
 80023ea:	e03d      	b.n	8002468 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b21      	ldr	r3, [pc, #132]	@ (8002474 <HAL_RCC_OscConfig+0x77c>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <HAL_RCC_OscConfig+0x77c>)
 80023f2:	4922      	ldr	r1, [pc, #136]	@ (800247c <HAL_RCC_OscConfig+0x784>)
 80023f4:	400a      	ands	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff f9ec 	bl	80017d4 <HAL_GetTick>
 80023fc:	0003      	movs	r3, r0
 80023fe:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002402:	f7ff f9e7 	bl	80017d4 <HAL_GetTick>
 8002406:	0002      	movs	r2, r0
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e02a      	b.n	800246a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002414:	4b17      	ldr	r3, [pc, #92]	@ (8002474 <HAL_RCC_OscConfig+0x77c>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	049b      	lsls	r3, r3, #18
 800241c:	4013      	ands	r3, r2
 800241e:	d1f0      	bne.n	8002402 <HAL_RCC_OscConfig+0x70a>
 8002420:	e022      	b.n	8002468 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e01d      	b.n	800246a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800242e:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <HAL_RCC_OscConfig+0x77c>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	2380      	movs	r3, #128	@ 0x80
 8002438:	025b      	lsls	r3, r3, #9
 800243a:	401a      	ands	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002440:	429a      	cmp	r2, r3
 8002442:	d10f      	bne.n	8002464 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	23f0      	movs	r3, #240	@ 0xf0
 8002448:	039b      	lsls	r3, r3, #14
 800244a:	401a      	ands	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d107      	bne.n	8002464 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	23c0      	movs	r3, #192	@ 0xc0
 8002458:	041b      	lsls	r3, r3, #16
 800245a:	401a      	ands	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b00a      	add	sp, #40	@ 0x28
 8002470:	bdb0      	pop	{r4, r5, r7, pc}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	40021000 	.word	0x40021000
 8002478:	ff02ffff 	.word	0xff02ffff
 800247c:	feffffff 	.word	0xfeffffff

08002480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002480:	b5b0      	push	{r4, r5, r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e128      	b.n	80026e6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002494:	4b96      	ldr	r3, [pc, #600]	@ (80026f0 <HAL_RCC_ClockConfig+0x270>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2201      	movs	r2, #1
 800249a:	4013      	ands	r3, r2
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d91e      	bls.n	80024e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b93      	ldr	r3, [pc, #588]	@ (80026f0 <HAL_RCC_ClockConfig+0x270>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2201      	movs	r2, #1
 80024a8:	4393      	bics	r3, r2
 80024aa:	0019      	movs	r1, r3
 80024ac:	4b90      	ldr	r3, [pc, #576]	@ (80026f0 <HAL_RCC_ClockConfig+0x270>)
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024b4:	f7ff f98e 	bl	80017d4 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024bc:	e009      	b.n	80024d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024be:	f7ff f989 	bl	80017d4 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	4a8a      	ldr	r2, [pc, #552]	@ (80026f4 <HAL_RCC_ClockConfig+0x274>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e109      	b.n	80026e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b87      	ldr	r3, [pc, #540]	@ (80026f0 <HAL_RCC_ClockConfig+0x270>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2201      	movs	r2, #1
 80024d8:	4013      	ands	r3, r2
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d1ee      	bne.n	80024be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ea:	4b83      	ldr	r3, [pc, #524]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	22f0      	movs	r2, #240	@ 0xf0
 80024f0:	4393      	bics	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	4b7f      	ldr	r3, [pc, #508]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 80024fa:	430a      	orrs	r2, r1
 80024fc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2201      	movs	r2, #1
 8002504:	4013      	ands	r3, r2
 8002506:	d100      	bne.n	800250a <HAL_RCC_ClockConfig+0x8a>
 8002508:	e089      	b.n	800261e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002512:	4b79      	ldr	r3, [pc, #484]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	029b      	lsls	r3, r3, #10
 800251a:	4013      	ands	r3, r2
 800251c:	d120      	bne.n	8002560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0e1      	b.n	80026e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800252a:	4b73      	ldr	r3, [pc, #460]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	049b      	lsls	r3, r3, #18
 8002532:	4013      	ands	r3, r2
 8002534:	d114      	bne.n	8002560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0d5      	b.n	80026e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d106      	bne.n	8002550 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002542:	4b6d      	ldr	r3, [pc, #436]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2204      	movs	r2, #4
 8002548:	4013      	ands	r3, r2
 800254a:	d109      	bne.n	8002560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0ca      	b.n	80026e6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002550:	4b69      	ldr	r3, [pc, #420]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4013      	ands	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0c2      	b.n	80026e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002560:	4b65      	ldr	r3, [pc, #404]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2203      	movs	r2, #3
 8002566:	4393      	bics	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	4b62      	ldr	r3, [pc, #392]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 8002570:	430a      	orrs	r2, r1
 8002572:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002574:	f7ff f92e 	bl	80017d4 <HAL_GetTick>
 8002578:	0003      	movs	r3, r0
 800257a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d111      	bne.n	80025a8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002584:	e009      	b.n	800259a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002586:	f7ff f925 	bl	80017d4 <HAL_GetTick>
 800258a:	0002      	movs	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	4a58      	ldr	r2, [pc, #352]	@ (80026f4 <HAL_RCC_ClockConfig+0x274>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0a5      	b.n	80026e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800259a:	4b57      	ldr	r3, [pc, #348]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	220c      	movs	r2, #12
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d1ef      	bne.n	8002586 <HAL_RCC_ClockConfig+0x106>
 80025a6:	e03a      	b.n	800261e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d111      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b0:	e009      	b.n	80025c6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b2:	f7ff f90f 	bl	80017d4 <HAL_GetTick>
 80025b6:	0002      	movs	r2, r0
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	4a4d      	ldr	r2, [pc, #308]	@ (80026f4 <HAL_RCC_ClockConfig+0x274>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e08f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c6:	4b4c      	ldr	r3, [pc, #304]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	220c      	movs	r2, #12
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b0c      	cmp	r3, #12
 80025d0:	d1ef      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x132>
 80025d2:	e024      	b.n	800261e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d11b      	bne.n	8002614 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025dc:	e009      	b.n	80025f2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025de:	f7ff f8f9 	bl	80017d4 <HAL_GetTick>
 80025e2:	0002      	movs	r2, r0
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	4a42      	ldr	r2, [pc, #264]	@ (80026f4 <HAL_RCC_ClockConfig+0x274>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e079      	b.n	80026e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025f2:	4b41      	ldr	r3, [pc, #260]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	220c      	movs	r2, #12
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d1ef      	bne.n	80025de <HAL_RCC_ClockConfig+0x15e>
 80025fe:	e00e      	b.n	800261e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7ff f8e8 	bl	80017d4 <HAL_GetTick>
 8002604:	0002      	movs	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	4a3a      	ldr	r2, [pc, #232]	@ (80026f4 <HAL_RCC_ClockConfig+0x274>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e068      	b.n	80026e6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002614:	4b38      	ldr	r3, [pc, #224]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	220c      	movs	r2, #12
 800261a:	4013      	ands	r3, r2
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800261e:	4b34      	ldr	r3, [pc, #208]	@ (80026f0 <HAL_RCC_ClockConfig+0x270>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2201      	movs	r2, #1
 8002624:	4013      	ands	r3, r2
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d21e      	bcs.n	800266a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262c:	4b30      	ldr	r3, [pc, #192]	@ (80026f0 <HAL_RCC_ClockConfig+0x270>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2201      	movs	r2, #1
 8002632:	4393      	bics	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	4b2e      	ldr	r3, [pc, #184]	@ (80026f0 <HAL_RCC_ClockConfig+0x270>)
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800263e:	f7ff f8c9 	bl	80017d4 <HAL_GetTick>
 8002642:	0003      	movs	r3, r0
 8002644:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	e009      	b.n	800265c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7ff f8c4 	bl	80017d4 <HAL_GetTick>
 800264c:	0002      	movs	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	4a28      	ldr	r2, [pc, #160]	@ (80026f4 <HAL_RCC_ClockConfig+0x274>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e044      	b.n	80026e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265c:	4b24      	ldr	r3, [pc, #144]	@ (80026f0 <HAL_RCC_ClockConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2201      	movs	r2, #1
 8002662:	4013      	ands	r3, r2
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d1ee      	bne.n	8002648 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2204      	movs	r2, #4
 8002670:	4013      	ands	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002674:	4b20      	ldr	r3, [pc, #128]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a20      	ldr	r2, [pc, #128]	@ (80026fc <HAL_RCC_ClockConfig+0x27c>)
 800267a:	4013      	ands	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	4b1d      	ldr	r3, [pc, #116]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 8002684:	430a      	orrs	r2, r1
 8002686:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2208      	movs	r2, #8
 800268e:	4013      	ands	r3, r2
 8002690:	d00a      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002692:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	4a1a      	ldr	r2, [pc, #104]	@ (8002700 <HAL_RCC_ClockConfig+0x280>)
 8002698:	4013      	ands	r3, r2
 800269a:	0019      	movs	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	00da      	lsls	r2, r3, #3
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026a8:	f000 f832 	bl	8002710 <HAL_RCC_GetSysClockFreq>
 80026ac:	0001      	movs	r1, r0
 80026ae:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <HAL_RCC_ClockConfig+0x278>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	220f      	movs	r2, #15
 80026b6:	4013      	ands	r3, r2
 80026b8:	4a12      	ldr	r2, [pc, #72]	@ (8002704 <HAL_RCC_ClockConfig+0x284>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	000a      	movs	r2, r1
 80026be:	40da      	lsrs	r2, r3
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <HAL_RCC_ClockConfig+0x288>)
 80026c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_RCC_ClockConfig+0x28c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	250b      	movs	r5, #11
 80026ca:	197c      	adds	r4, r7, r5
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7ff f83b 	bl	8001748 <HAL_InitTick>
 80026d2:	0003      	movs	r3, r0
 80026d4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80026d6:	197b      	adds	r3, r7, r5
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80026de:	197b      	adds	r3, r7, r5
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b004      	add	sp, #16
 80026ec:	bdb0      	pop	{r4, r5, r7, pc}
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	40022000 	.word	0x40022000
 80026f4:	00001388 	.word	0x00001388
 80026f8:	40021000 	.word	0x40021000
 80026fc:	fffff8ff 	.word	0xfffff8ff
 8002700:	ffffc7ff 	.word	0xffffc7ff
 8002704:	08002b38 	.word	0x08002b38
 8002708:	20000000 	.word	0x20000000
 800270c:	20000004 	.word	0x20000004

08002710 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002716:	4b3c      	ldr	r3, [pc, #240]	@ (8002808 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	220c      	movs	r2, #12
 8002720:	4013      	ands	r3, r2
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d013      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x3e>
 8002726:	d85c      	bhi.n	80027e2 <HAL_RCC_GetSysClockFreq+0xd2>
 8002728:	2b04      	cmp	r3, #4
 800272a:	d002      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x22>
 800272c:	2b08      	cmp	r3, #8
 800272e:	d00b      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x38>
 8002730:	e057      	b.n	80027e2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002732:	4b35      	ldr	r3, [pc, #212]	@ (8002808 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2210      	movs	r2, #16
 8002738:	4013      	ands	r3, r2
 800273a:	d002      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800273c:	4b33      	ldr	r3, [pc, #204]	@ (800280c <HAL_RCC_GetSysClockFreq+0xfc>)
 800273e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002740:	e05d      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002742:	4b33      	ldr	r3, [pc, #204]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x100>)
 8002744:	613b      	str	r3, [r7, #16]
      break;
 8002746:	e05a      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002748:	4b32      	ldr	r3, [pc, #200]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x104>)
 800274a:	613b      	str	r3, [r7, #16]
      break;
 800274c:	e057      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	0c9b      	lsrs	r3, r3, #18
 8002752:	220f      	movs	r2, #15
 8002754:	4013      	ands	r3, r2
 8002756:	4a30      	ldr	r2, [pc, #192]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x108>)
 8002758:	5cd3      	ldrb	r3, [r2, r3]
 800275a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	0d9b      	lsrs	r3, r3, #22
 8002760:	2203      	movs	r2, #3
 8002762:	4013      	ands	r3, r2
 8002764:	3301      	adds	r3, #1
 8002766:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002768:	4b27      	ldr	r3, [pc, #156]	@ (8002808 <HAL_RCC_GetSysClockFreq+0xf8>)
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	2380      	movs	r3, #128	@ 0x80
 800276e:	025b      	lsls	r3, r3, #9
 8002770:	4013      	ands	r3, r2
 8002772:	d00f      	beq.n	8002794 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	000a      	movs	r2, r1
 8002778:	0152      	lsls	r2, r2, #5
 800277a:	1a52      	subs	r2, r2, r1
 800277c:	0193      	lsls	r3, r2, #6
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	185b      	adds	r3, r3, r1
 8002784:	025b      	lsls	r3, r3, #9
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	0018      	movs	r0, r3
 800278a:	f7fd fcbd 	bl	8000108 <__udivsi3>
 800278e:	0003      	movs	r3, r0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	e023      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002794:	4b1c      	ldr	r3, [pc, #112]	@ (8002808 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2210      	movs	r2, #16
 800279a:	4013      	ands	r3, r2
 800279c:	d00f      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	000a      	movs	r2, r1
 80027a2:	0152      	lsls	r2, r2, #5
 80027a4:	1a52      	subs	r2, r2, r1
 80027a6:	0193      	lsls	r3, r2, #6
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	185b      	adds	r3, r3, r1
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f7fd fca8 	bl	8000108 <__udivsi3>
 80027b8:	0003      	movs	r3, r0
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	e00e      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	000a      	movs	r2, r1
 80027c2:	0152      	lsls	r2, r2, #5
 80027c4:	1a52      	subs	r2, r2, r1
 80027c6:	0193      	lsls	r3, r2, #6
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	185b      	adds	r3, r3, r1
 80027ce:	029b      	lsls	r3, r3, #10
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7fd fc98 	bl	8000108 <__udivsi3>
 80027d8:	0003      	movs	r3, r0
 80027da:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	613b      	str	r3, [r7, #16]
      break;
 80027e0:	e00d      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027e2:	4b09      	ldr	r3, [pc, #36]	@ (8002808 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0b5b      	lsrs	r3, r3, #13
 80027e8:	2207      	movs	r2, #7
 80027ea:	4013      	ands	r3, r2
 80027ec:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	2280      	movs	r2, #128	@ 0x80
 80027f4:	0212      	lsls	r2, r2, #8
 80027f6:	409a      	lsls	r2, r3
 80027f8:	0013      	movs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
      break;
 80027fc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027fe:	693b      	ldr	r3, [r7, #16]
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b006      	add	sp, #24
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	003d0900 	.word	0x003d0900
 8002810:	00f42400 	.word	0x00f42400
 8002814:	007a1200 	.word	0x007a1200
 8002818:	08002b48 	.word	0x08002b48

0800281c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e032      	b.n	8002894 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2239      	movs	r2, #57	@ 0x39
 8002832:	5c9b      	ldrb	r3, [r3, r2]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d107      	bne.n	800284a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2238      	movs	r2, #56	@ 0x38
 800283e:	2100      	movs	r1, #0
 8002840:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	0018      	movs	r0, r3
 8002846:	f7fe feff 	bl	8001648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2239      	movs	r2, #57	@ 0x39
 800284e:	2102      	movs	r1, #2
 8002850:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3304      	adds	r3, #4
 800285a:	0019      	movs	r1, r3
 800285c:	0010      	movs	r0, r2
 800285e:	f000 f861 	bl	8002924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	223e      	movs	r2, #62	@ 0x3e
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	223a      	movs	r2, #58	@ 0x3a
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	223b      	movs	r2, #59	@ 0x3b
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	223c      	movs	r2, #60	@ 0x3c
 800287e:	2101      	movs	r1, #1
 8002880:	5499      	strb	r1, [r3, r2]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	223d      	movs	r2, #61	@ 0x3d
 8002886:	2101      	movs	r1, #1
 8002888:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2239      	movs	r2, #57	@ 0x39
 800288e:	2101      	movs	r1, #1
 8002890:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b002      	add	sp, #8
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2239      	movs	r2, #57	@ 0x39
 80028a8:	5c9b      	ldrb	r3, [r3, r2]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d001      	beq.n	80028b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e02e      	b.n	8002912 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2239      	movs	r2, #57	@ 0x39
 80028b8:	2102      	movs	r1, #2
 80028ba:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	@ 0x80
 80028c2:	05db      	lsls	r3, r3, #23
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d009      	beq.n	80028dc <HAL_TIM_Base_Start+0x40>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a13      	ldr	r2, [pc, #76]	@ (800291c <HAL_TIM_Base_Start+0x80>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_TIM_Base_Start+0x40>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a12      	ldr	r2, [pc, #72]	@ (8002920 <HAL_TIM_Base_Start+0x84>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d111      	bne.n	8002900 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2207      	movs	r2, #7
 80028e4:	4013      	ands	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d010      	beq.n	8002910 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2101      	movs	r1, #1
 80028fa:	430a      	orrs	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028fe:	e007      	b.n	8002910 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2101      	movs	r1, #1
 800290c:	430a      	orrs	r2, r1
 800290e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	b004      	add	sp, #16
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	40010800 	.word	0x40010800
 8002920:	40011400 	.word	0x40011400

08002924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	05db      	lsls	r3, r3, #23
 800293a:	429a      	cmp	r2, r3
 800293c:	d007      	beq.n	800294e <TIM_Base_SetConfig+0x2a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a22      	ldr	r2, [pc, #136]	@ (80029cc <TIM_Base_SetConfig+0xa8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d003      	beq.n	800294e <TIM_Base_SetConfig+0x2a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a21      	ldr	r2, [pc, #132]	@ (80029d0 <TIM_Base_SetConfig+0xac>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d108      	bne.n	8002960 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2270      	movs	r2, #112	@ 0x70
 8002952:	4393      	bics	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4313      	orrs	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	2380      	movs	r3, #128	@ 0x80
 8002964:	05db      	lsls	r3, r3, #23
 8002966:	429a      	cmp	r2, r3
 8002968:	d007      	beq.n	800297a <TIM_Base_SetConfig+0x56>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a17      	ldr	r2, [pc, #92]	@ (80029cc <TIM_Base_SetConfig+0xa8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d003      	beq.n	800297a <TIM_Base_SetConfig+0x56>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a16      	ldr	r2, [pc, #88]	@ (80029d0 <TIM_Base_SetConfig+0xac>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d108      	bne.n	800298c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a15      	ldr	r2, [pc, #84]	@ (80029d4 <TIM_Base_SetConfig+0xb0>)
 800297e:	4013      	ands	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2280      	movs	r2, #128	@ 0x80
 8002990:	4393      	bics	r3, r2
 8002992:	001a      	movs	r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2204      	movs	r2, #4
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	601a      	str	r2, [r3, #0]
}
 80029c4:	46c0      	nop			@ (mov r8, r8)
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b004      	add	sp, #16
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40010800 	.word	0x40010800
 80029d0:	40011400 	.word	0x40011400
 80029d4:	fffffcff 	.word	0xfffffcff

080029d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2238      	movs	r2, #56	@ 0x38
 80029e6:	5c9b      	ldrb	r3, [r3, r2]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e042      	b.n	8002a76 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2238      	movs	r2, #56	@ 0x38
 80029f4:	2101      	movs	r1, #1
 80029f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2239      	movs	r2, #57	@ 0x39
 80029fc:	2102      	movs	r1, #2
 80029fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2270      	movs	r2, #112	@ 0x70
 8002a14:	4393      	bics	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	2380      	movs	r3, #128	@ 0x80
 8002a30:	05db      	lsls	r3, r3, #23
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d009      	beq.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a11      	ldr	r2, [pc, #68]	@ (8002a80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0f      	ldr	r2, [pc, #60]	@ (8002a84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10c      	bne.n	8002a64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2280      	movs	r2, #128	@ 0x80
 8002a4e:	4393      	bics	r3, r2
 8002a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2239      	movs	r2, #57	@ 0x39
 8002a68:	2101      	movs	r1, #1
 8002a6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2238      	movs	r2, #56	@ 0x38
 8002a70:	2100      	movs	r1, #0
 8002a72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b004      	add	sp, #16
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	40010800 	.word	0x40010800
 8002a84:	40011400 	.word	0x40011400

08002a88 <memset>:
 8002a88:	0003      	movs	r3, r0
 8002a8a:	1882      	adds	r2, r0, r2
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d100      	bne.n	8002a92 <memset+0xa>
 8002a90:	4770      	bx	lr
 8002a92:	7019      	strb	r1, [r3, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	e7f9      	b.n	8002a8c <memset+0x4>

08002a98 <__libc_init_array>:
 8002a98:	b570      	push	{r4, r5, r6, lr}
 8002a9a:	2600      	movs	r6, #0
 8002a9c:	4c0c      	ldr	r4, [pc, #48]	@ (8002ad0 <__libc_init_array+0x38>)
 8002a9e:	4d0d      	ldr	r5, [pc, #52]	@ (8002ad4 <__libc_init_array+0x3c>)
 8002aa0:	1b64      	subs	r4, r4, r5
 8002aa2:	10a4      	asrs	r4, r4, #2
 8002aa4:	42a6      	cmp	r6, r4
 8002aa6:	d109      	bne.n	8002abc <__libc_init_array+0x24>
 8002aa8:	2600      	movs	r6, #0
 8002aaa:	f000 f819 	bl	8002ae0 <_init>
 8002aae:	4c0a      	ldr	r4, [pc, #40]	@ (8002ad8 <__libc_init_array+0x40>)
 8002ab0:	4d0a      	ldr	r5, [pc, #40]	@ (8002adc <__libc_init_array+0x44>)
 8002ab2:	1b64      	subs	r4, r4, r5
 8002ab4:	10a4      	asrs	r4, r4, #2
 8002ab6:	42a6      	cmp	r6, r4
 8002ab8:	d105      	bne.n	8002ac6 <__libc_init_array+0x2e>
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
 8002abc:	00b3      	lsls	r3, r6, #2
 8002abe:	58eb      	ldr	r3, [r5, r3]
 8002ac0:	4798      	blx	r3
 8002ac2:	3601      	adds	r6, #1
 8002ac4:	e7ee      	b.n	8002aa4 <__libc_init_array+0xc>
 8002ac6:	00b3      	lsls	r3, r6, #2
 8002ac8:	58eb      	ldr	r3, [r5, r3]
 8002aca:	4798      	blx	r3
 8002acc:	3601      	adds	r6, #1
 8002ace:	e7f2      	b.n	8002ab6 <__libc_init_array+0x1e>
 8002ad0:	08002b54 	.word	0x08002b54
 8002ad4:	08002b54 	.word	0x08002b54
 8002ad8:	08002b58 	.word	0x08002b58
 8002adc:	08002b54 	.word	0x08002b54

08002ae0 <_init>:
 8002ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae6:	bc08      	pop	{r3}
 8002ae8:	469e      	mov	lr, r3
 8002aea:	4770      	bx	lr

08002aec <_fini>:
 8002aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af2:	bc08      	pop	{r3}
 8002af4:	469e      	mov	lr, r3
 8002af6:	4770      	bx	lr

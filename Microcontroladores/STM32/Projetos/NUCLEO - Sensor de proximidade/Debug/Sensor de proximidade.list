
Sensor de proximidade.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e68  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003f28  08003f28  00004f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f84  08003f84  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003f84  08003f84  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003f84  08003f84  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f84  08003f84  00004f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f88  08003f88  00004f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003f8c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000010  08003f98  00005010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003f98  0000512c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007caa  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001789  00000000  00000000  0000ccde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  0000e468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a5  00000000  00000000  0000ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013109  00000000  00000000  0000f3c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098e2  00000000  00000000  000224ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00077551  00000000  00000000  0002bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3301  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd0  00000000  00000000  000a3344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000a5314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f10 	.word	0x08003f10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003f10 	.word	0x08003f10

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fbff 	bl	8000a34 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fb43 	bl	80008cc <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fbf1 	bl	8000a34 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fbe7 	bl	8000a34 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fb6d 	bl	8000954 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			@ (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fb63 	bl	8000954 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_ddiv>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	46de      	mov	lr, fp
 80002a0:	4645      	mov	r5, r8
 80002a2:	4657      	mov	r7, sl
 80002a4:	464e      	mov	r6, r9
 80002a6:	b5e0      	push	{r5, r6, r7, lr}
 80002a8:	b087      	sub	sp, #28
 80002aa:	9200      	str	r2, [sp, #0]
 80002ac:	9301      	str	r3, [sp, #4]
 80002ae:	030b      	lsls	r3, r1, #12
 80002b0:	0b1b      	lsrs	r3, r3, #12
 80002b2:	469b      	mov	fp, r3
 80002b4:	0fca      	lsrs	r2, r1, #31
 80002b6:	004b      	lsls	r3, r1, #1
 80002b8:	0004      	movs	r4, r0
 80002ba:	4680      	mov	r8, r0
 80002bc:	0d5b      	lsrs	r3, r3, #21
 80002be:	9202      	str	r2, [sp, #8]
 80002c0:	d100      	bne.n	80002c4 <__aeabi_ddiv+0x28>
 80002c2:	e098      	b.n	80003f6 <__aeabi_ddiv+0x15a>
 80002c4:	4a7c      	ldr	r2, [pc, #496]	@ (80004b8 <__aeabi_ddiv+0x21c>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d037      	beq.n	800033a <__aeabi_ddiv+0x9e>
 80002ca:	4659      	mov	r1, fp
 80002cc:	0f42      	lsrs	r2, r0, #29
 80002ce:	00c9      	lsls	r1, r1, #3
 80002d0:	430a      	orrs	r2, r1
 80002d2:	2180      	movs	r1, #128	@ 0x80
 80002d4:	0409      	lsls	r1, r1, #16
 80002d6:	4311      	orrs	r1, r2
 80002d8:	00c2      	lsls	r2, r0, #3
 80002da:	4690      	mov	r8, r2
 80002dc:	4a77      	ldr	r2, [pc, #476]	@ (80004bc <__aeabi_ddiv+0x220>)
 80002de:	4689      	mov	r9, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	449a      	add	sl, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	2400      	movs	r4, #0
 80002e8:	9303      	str	r3, [sp, #12]
 80002ea:	9e00      	ldr	r6, [sp, #0]
 80002ec:	9f01      	ldr	r7, [sp, #4]
 80002ee:	033b      	lsls	r3, r7, #12
 80002f0:	0b1b      	lsrs	r3, r3, #12
 80002f2:	469b      	mov	fp, r3
 80002f4:	007b      	lsls	r3, r7, #1
 80002f6:	0030      	movs	r0, r6
 80002f8:	0d5b      	lsrs	r3, r3, #21
 80002fa:	0ffd      	lsrs	r5, r7, #31
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d059      	beq.n	80003b4 <__aeabi_ddiv+0x118>
 8000300:	4a6d      	ldr	r2, [pc, #436]	@ (80004b8 <__aeabi_ddiv+0x21c>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d048      	beq.n	8000398 <__aeabi_ddiv+0xfc>
 8000306:	4659      	mov	r1, fp
 8000308:	0f72      	lsrs	r2, r6, #29
 800030a:	00c9      	lsls	r1, r1, #3
 800030c:	430a      	orrs	r2, r1
 800030e:	2180      	movs	r1, #128	@ 0x80
 8000310:	0409      	lsls	r1, r1, #16
 8000312:	4311      	orrs	r1, r2
 8000314:	468b      	mov	fp, r1
 8000316:	4969      	ldr	r1, [pc, #420]	@ (80004bc <__aeabi_ddiv+0x220>)
 8000318:	00f2      	lsls	r2, r6, #3
 800031a:	468c      	mov	ip, r1
 800031c:	4651      	mov	r1, sl
 800031e:	4463      	add	r3, ip
 8000320:	1acb      	subs	r3, r1, r3
 8000322:	469a      	mov	sl, r3
 8000324:	2100      	movs	r1, #0
 8000326:	9e02      	ldr	r6, [sp, #8]
 8000328:	406e      	eors	r6, r5
 800032a:	b2f6      	uxtb	r6, r6
 800032c:	2c0f      	cmp	r4, #15
 800032e:	d900      	bls.n	8000332 <__aeabi_ddiv+0x96>
 8000330:	e0ce      	b.n	80004d0 <__aeabi_ddiv+0x234>
 8000332:	4b63      	ldr	r3, [pc, #396]	@ (80004c0 <__aeabi_ddiv+0x224>)
 8000334:	00a4      	lsls	r4, r4, #2
 8000336:	591b      	ldr	r3, [r3, r4]
 8000338:	469f      	mov	pc, r3
 800033a:	465a      	mov	r2, fp
 800033c:	4302      	orrs	r2, r0
 800033e:	4691      	mov	r9, r2
 8000340:	d000      	beq.n	8000344 <__aeabi_ddiv+0xa8>
 8000342:	e090      	b.n	8000466 <__aeabi_ddiv+0x1ca>
 8000344:	469a      	mov	sl, r3
 8000346:	2302      	movs	r3, #2
 8000348:	4690      	mov	r8, r2
 800034a:	2408      	movs	r4, #8
 800034c:	9303      	str	r3, [sp, #12]
 800034e:	e7cc      	b.n	80002ea <__aeabi_ddiv+0x4e>
 8000350:	46cb      	mov	fp, r9
 8000352:	4642      	mov	r2, r8
 8000354:	9d02      	ldr	r5, [sp, #8]
 8000356:	9903      	ldr	r1, [sp, #12]
 8000358:	2902      	cmp	r1, #2
 800035a:	d100      	bne.n	800035e <__aeabi_ddiv+0xc2>
 800035c:	e1de      	b.n	800071c <__aeabi_ddiv+0x480>
 800035e:	2903      	cmp	r1, #3
 8000360:	d100      	bne.n	8000364 <__aeabi_ddiv+0xc8>
 8000362:	e08d      	b.n	8000480 <__aeabi_ddiv+0x1e4>
 8000364:	2901      	cmp	r1, #1
 8000366:	d000      	beq.n	800036a <__aeabi_ddiv+0xce>
 8000368:	e179      	b.n	800065e <__aeabi_ddiv+0x3c2>
 800036a:	002e      	movs	r6, r5
 800036c:	2200      	movs	r2, #0
 800036e:	2300      	movs	r3, #0
 8000370:	2400      	movs	r4, #0
 8000372:	4690      	mov	r8, r2
 8000374:	051b      	lsls	r3, r3, #20
 8000376:	4323      	orrs	r3, r4
 8000378:	07f6      	lsls	r6, r6, #31
 800037a:	4333      	orrs	r3, r6
 800037c:	4640      	mov	r0, r8
 800037e:	0019      	movs	r1, r3
 8000380:	b007      	add	sp, #28
 8000382:	bcf0      	pop	{r4, r5, r6, r7}
 8000384:	46bb      	mov	fp, r7
 8000386:	46b2      	mov	sl, r6
 8000388:	46a9      	mov	r9, r5
 800038a:	46a0      	mov	r8, r4
 800038c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038e:	2200      	movs	r2, #0
 8000390:	2400      	movs	r4, #0
 8000392:	4690      	mov	r8, r2
 8000394:	4b48      	ldr	r3, [pc, #288]	@ (80004b8 <__aeabi_ddiv+0x21c>)
 8000396:	e7ed      	b.n	8000374 <__aeabi_ddiv+0xd8>
 8000398:	465a      	mov	r2, fp
 800039a:	9b00      	ldr	r3, [sp, #0]
 800039c:	431a      	orrs	r2, r3
 800039e:	4b49      	ldr	r3, [pc, #292]	@ (80004c4 <__aeabi_ddiv+0x228>)
 80003a0:	469c      	mov	ip, r3
 80003a2:	44e2      	add	sl, ip
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	d159      	bne.n	800045c <__aeabi_ddiv+0x1c0>
 80003a8:	2302      	movs	r3, #2
 80003aa:	431c      	orrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	2102      	movs	r1, #2
 80003b0:	469b      	mov	fp, r3
 80003b2:	e7b8      	b.n	8000326 <__aeabi_ddiv+0x8a>
 80003b4:	465a      	mov	r2, fp
 80003b6:	9b00      	ldr	r3, [sp, #0]
 80003b8:	431a      	orrs	r2, r3
 80003ba:	d049      	beq.n	8000450 <__aeabi_ddiv+0x1b4>
 80003bc:	465b      	mov	r3, fp
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d100      	bne.n	80003c4 <__aeabi_ddiv+0x128>
 80003c2:	e19c      	b.n	80006fe <__aeabi_ddiv+0x462>
 80003c4:	4658      	mov	r0, fp
 80003c6:	f000 fc03 	bl	8000bd0 <__clzsi2>
 80003ca:	0002      	movs	r2, r0
 80003cc:	0003      	movs	r3, r0
 80003ce:	3a0b      	subs	r2, #11
 80003d0:	271d      	movs	r7, #29
 80003d2:	9e00      	ldr	r6, [sp, #0]
 80003d4:	1aba      	subs	r2, r7, r2
 80003d6:	0019      	movs	r1, r3
 80003d8:	4658      	mov	r0, fp
 80003da:	40d6      	lsrs	r6, r2
 80003dc:	3908      	subs	r1, #8
 80003de:	4088      	lsls	r0, r1
 80003e0:	0032      	movs	r2, r6
 80003e2:	4302      	orrs	r2, r0
 80003e4:	4693      	mov	fp, r2
 80003e6:	9a00      	ldr	r2, [sp, #0]
 80003e8:	408a      	lsls	r2, r1
 80003ea:	4937      	ldr	r1, [pc, #220]	@ (80004c8 <__aeabi_ddiv+0x22c>)
 80003ec:	4453      	add	r3, sl
 80003ee:	468a      	mov	sl, r1
 80003f0:	2100      	movs	r1, #0
 80003f2:	449a      	add	sl, r3
 80003f4:	e797      	b.n	8000326 <__aeabi_ddiv+0x8a>
 80003f6:	465b      	mov	r3, fp
 80003f8:	4303      	orrs	r3, r0
 80003fa:	4699      	mov	r9, r3
 80003fc:	d021      	beq.n	8000442 <__aeabi_ddiv+0x1a6>
 80003fe:	465b      	mov	r3, fp
 8000400:	2b00      	cmp	r3, #0
 8000402:	d100      	bne.n	8000406 <__aeabi_ddiv+0x16a>
 8000404:	e169      	b.n	80006da <__aeabi_ddiv+0x43e>
 8000406:	4658      	mov	r0, fp
 8000408:	f000 fbe2 	bl	8000bd0 <__clzsi2>
 800040c:	230b      	movs	r3, #11
 800040e:	425b      	negs	r3, r3
 8000410:	469c      	mov	ip, r3
 8000412:	0002      	movs	r2, r0
 8000414:	4484      	add	ip, r0
 8000416:	4666      	mov	r6, ip
 8000418:	231d      	movs	r3, #29
 800041a:	1b9b      	subs	r3, r3, r6
 800041c:	0026      	movs	r6, r4
 800041e:	0011      	movs	r1, r2
 8000420:	4658      	mov	r0, fp
 8000422:	40de      	lsrs	r6, r3
 8000424:	3908      	subs	r1, #8
 8000426:	4088      	lsls	r0, r1
 8000428:	0033      	movs	r3, r6
 800042a:	4303      	orrs	r3, r0
 800042c:	4699      	mov	r9, r3
 800042e:	0023      	movs	r3, r4
 8000430:	408b      	lsls	r3, r1
 8000432:	4698      	mov	r8, r3
 8000434:	4b25      	ldr	r3, [pc, #148]	@ (80004cc <__aeabi_ddiv+0x230>)
 8000436:	2400      	movs	r4, #0
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	469a      	mov	sl, r3
 800043c:	2300      	movs	r3, #0
 800043e:	9303      	str	r3, [sp, #12]
 8000440:	e753      	b.n	80002ea <__aeabi_ddiv+0x4e>
 8000442:	2300      	movs	r3, #0
 8000444:	4698      	mov	r8, r3
 8000446:	469a      	mov	sl, r3
 8000448:	3301      	adds	r3, #1
 800044a:	2404      	movs	r4, #4
 800044c:	9303      	str	r3, [sp, #12]
 800044e:	e74c      	b.n	80002ea <__aeabi_ddiv+0x4e>
 8000450:	2301      	movs	r3, #1
 8000452:	431c      	orrs	r4, r3
 8000454:	2300      	movs	r3, #0
 8000456:	2101      	movs	r1, #1
 8000458:	469b      	mov	fp, r3
 800045a:	e764      	b.n	8000326 <__aeabi_ddiv+0x8a>
 800045c:	2303      	movs	r3, #3
 800045e:	0032      	movs	r2, r6
 8000460:	2103      	movs	r1, #3
 8000462:	431c      	orrs	r4, r3
 8000464:	e75f      	b.n	8000326 <__aeabi_ddiv+0x8a>
 8000466:	469a      	mov	sl, r3
 8000468:	2303      	movs	r3, #3
 800046a:	46d9      	mov	r9, fp
 800046c:	240c      	movs	r4, #12
 800046e:	9303      	str	r3, [sp, #12]
 8000470:	e73b      	b.n	80002ea <__aeabi_ddiv+0x4e>
 8000472:	2300      	movs	r3, #0
 8000474:	2480      	movs	r4, #128	@ 0x80
 8000476:	4698      	mov	r8, r3
 8000478:	2600      	movs	r6, #0
 800047a:	4b0f      	ldr	r3, [pc, #60]	@ (80004b8 <__aeabi_ddiv+0x21c>)
 800047c:	0324      	lsls	r4, r4, #12
 800047e:	e779      	b.n	8000374 <__aeabi_ddiv+0xd8>
 8000480:	2480      	movs	r4, #128	@ 0x80
 8000482:	465b      	mov	r3, fp
 8000484:	0324      	lsls	r4, r4, #12
 8000486:	431c      	orrs	r4, r3
 8000488:	0324      	lsls	r4, r4, #12
 800048a:	002e      	movs	r6, r5
 800048c:	4690      	mov	r8, r2
 800048e:	4b0a      	ldr	r3, [pc, #40]	@ (80004b8 <__aeabi_ddiv+0x21c>)
 8000490:	0b24      	lsrs	r4, r4, #12
 8000492:	e76f      	b.n	8000374 <__aeabi_ddiv+0xd8>
 8000494:	2480      	movs	r4, #128	@ 0x80
 8000496:	464b      	mov	r3, r9
 8000498:	0324      	lsls	r4, r4, #12
 800049a:	4223      	tst	r3, r4
 800049c:	d002      	beq.n	80004a4 <__aeabi_ddiv+0x208>
 800049e:	465b      	mov	r3, fp
 80004a0:	4223      	tst	r3, r4
 80004a2:	d0f0      	beq.n	8000486 <__aeabi_ddiv+0x1ea>
 80004a4:	2480      	movs	r4, #128	@ 0x80
 80004a6:	464b      	mov	r3, r9
 80004a8:	0324      	lsls	r4, r4, #12
 80004aa:	431c      	orrs	r4, r3
 80004ac:	0324      	lsls	r4, r4, #12
 80004ae:	9e02      	ldr	r6, [sp, #8]
 80004b0:	4b01      	ldr	r3, [pc, #4]	@ (80004b8 <__aeabi_ddiv+0x21c>)
 80004b2:	0b24      	lsrs	r4, r4, #12
 80004b4:	e75e      	b.n	8000374 <__aeabi_ddiv+0xd8>
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	000007ff 	.word	0x000007ff
 80004bc:	fffffc01 	.word	0xfffffc01
 80004c0:	08003f28 	.word	0x08003f28
 80004c4:	fffff801 	.word	0xfffff801
 80004c8:	000003f3 	.word	0x000003f3
 80004cc:	fffffc0d 	.word	0xfffffc0d
 80004d0:	45cb      	cmp	fp, r9
 80004d2:	d200      	bcs.n	80004d6 <__aeabi_ddiv+0x23a>
 80004d4:	e0f8      	b.n	80006c8 <__aeabi_ddiv+0x42c>
 80004d6:	d100      	bne.n	80004da <__aeabi_ddiv+0x23e>
 80004d8:	e0f3      	b.n	80006c2 <__aeabi_ddiv+0x426>
 80004da:	2301      	movs	r3, #1
 80004dc:	425b      	negs	r3, r3
 80004de:	469c      	mov	ip, r3
 80004e0:	4644      	mov	r4, r8
 80004e2:	4648      	mov	r0, r9
 80004e4:	2500      	movs	r5, #0
 80004e6:	44e2      	add	sl, ip
 80004e8:	465b      	mov	r3, fp
 80004ea:	0e17      	lsrs	r7, r2, #24
 80004ec:	021b      	lsls	r3, r3, #8
 80004ee:	431f      	orrs	r7, r3
 80004f0:	0c19      	lsrs	r1, r3, #16
 80004f2:	043b      	lsls	r3, r7, #16
 80004f4:	0212      	lsls	r2, r2, #8
 80004f6:	9700      	str	r7, [sp, #0]
 80004f8:	0c1f      	lsrs	r7, r3, #16
 80004fa:	4691      	mov	r9, r2
 80004fc:	9102      	str	r1, [sp, #8]
 80004fe:	9703      	str	r7, [sp, #12]
 8000500:	f7ff fe88 	bl	8000214 <__aeabi_uidivmod>
 8000504:	0002      	movs	r2, r0
 8000506:	437a      	muls	r2, r7
 8000508:	040b      	lsls	r3, r1, #16
 800050a:	0c21      	lsrs	r1, r4, #16
 800050c:	4680      	mov	r8, r0
 800050e:	4319      	orrs	r1, r3
 8000510:	428a      	cmp	r2, r1
 8000512:	d909      	bls.n	8000528 <__aeabi_ddiv+0x28c>
 8000514:	9f00      	ldr	r7, [sp, #0]
 8000516:	2301      	movs	r3, #1
 8000518:	46bc      	mov	ip, r7
 800051a:	425b      	negs	r3, r3
 800051c:	4461      	add	r1, ip
 800051e:	469c      	mov	ip, r3
 8000520:	44e0      	add	r8, ip
 8000522:	428f      	cmp	r7, r1
 8000524:	d800      	bhi.n	8000528 <__aeabi_ddiv+0x28c>
 8000526:	e15c      	b.n	80007e2 <__aeabi_ddiv+0x546>
 8000528:	1a88      	subs	r0, r1, r2
 800052a:	9902      	ldr	r1, [sp, #8]
 800052c:	f7ff fe72 	bl	8000214 <__aeabi_uidivmod>
 8000530:	9a03      	ldr	r2, [sp, #12]
 8000532:	0424      	lsls	r4, r4, #16
 8000534:	4342      	muls	r2, r0
 8000536:	0409      	lsls	r1, r1, #16
 8000538:	0c24      	lsrs	r4, r4, #16
 800053a:	0003      	movs	r3, r0
 800053c:	430c      	orrs	r4, r1
 800053e:	42a2      	cmp	r2, r4
 8000540:	d906      	bls.n	8000550 <__aeabi_ddiv+0x2b4>
 8000542:	9900      	ldr	r1, [sp, #0]
 8000544:	3b01      	subs	r3, #1
 8000546:	468c      	mov	ip, r1
 8000548:	4464      	add	r4, ip
 800054a:	42a1      	cmp	r1, r4
 800054c:	d800      	bhi.n	8000550 <__aeabi_ddiv+0x2b4>
 800054e:	e142      	b.n	80007d6 <__aeabi_ddiv+0x53a>
 8000550:	1aa0      	subs	r0, r4, r2
 8000552:	4642      	mov	r2, r8
 8000554:	0412      	lsls	r2, r2, #16
 8000556:	431a      	orrs	r2, r3
 8000558:	4693      	mov	fp, r2
 800055a:	464b      	mov	r3, r9
 800055c:	4659      	mov	r1, fp
 800055e:	0c1b      	lsrs	r3, r3, #16
 8000560:	001f      	movs	r7, r3
 8000562:	9304      	str	r3, [sp, #16]
 8000564:	040b      	lsls	r3, r1, #16
 8000566:	4649      	mov	r1, r9
 8000568:	0409      	lsls	r1, r1, #16
 800056a:	0c09      	lsrs	r1, r1, #16
 800056c:	000c      	movs	r4, r1
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	435c      	muls	r4, r3
 8000572:	0c12      	lsrs	r2, r2, #16
 8000574:	437b      	muls	r3, r7
 8000576:	4688      	mov	r8, r1
 8000578:	4351      	muls	r1, r2
 800057a:	437a      	muls	r2, r7
 800057c:	0c27      	lsrs	r7, r4, #16
 800057e:	46bc      	mov	ip, r7
 8000580:	185b      	adds	r3, r3, r1
 8000582:	4463      	add	r3, ip
 8000584:	4299      	cmp	r1, r3
 8000586:	d903      	bls.n	8000590 <__aeabi_ddiv+0x2f4>
 8000588:	2180      	movs	r1, #128	@ 0x80
 800058a:	0249      	lsls	r1, r1, #9
 800058c:	468c      	mov	ip, r1
 800058e:	4462      	add	r2, ip
 8000590:	0c19      	lsrs	r1, r3, #16
 8000592:	0424      	lsls	r4, r4, #16
 8000594:	041b      	lsls	r3, r3, #16
 8000596:	0c24      	lsrs	r4, r4, #16
 8000598:	188a      	adds	r2, r1, r2
 800059a:	191c      	adds	r4, r3, r4
 800059c:	4290      	cmp	r0, r2
 800059e:	d302      	bcc.n	80005a6 <__aeabi_ddiv+0x30a>
 80005a0:	d116      	bne.n	80005d0 <__aeabi_ddiv+0x334>
 80005a2:	42a5      	cmp	r5, r4
 80005a4:	d214      	bcs.n	80005d0 <__aeabi_ddiv+0x334>
 80005a6:	465b      	mov	r3, fp
 80005a8:	9f00      	ldr	r7, [sp, #0]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	444d      	add	r5, r9
 80005ae:	9305      	str	r3, [sp, #20]
 80005b0:	454d      	cmp	r5, r9
 80005b2:	419b      	sbcs	r3, r3
 80005b4:	46bc      	mov	ip, r7
 80005b6:	425b      	negs	r3, r3
 80005b8:	4463      	add	r3, ip
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	4287      	cmp	r7, r0
 80005be:	d300      	bcc.n	80005c2 <__aeabi_ddiv+0x326>
 80005c0:	e102      	b.n	80007c8 <__aeabi_ddiv+0x52c>
 80005c2:	4282      	cmp	r2, r0
 80005c4:	d900      	bls.n	80005c8 <__aeabi_ddiv+0x32c>
 80005c6:	e129      	b.n	800081c <__aeabi_ddiv+0x580>
 80005c8:	d100      	bne.n	80005cc <__aeabi_ddiv+0x330>
 80005ca:	e124      	b.n	8000816 <__aeabi_ddiv+0x57a>
 80005cc:	9b05      	ldr	r3, [sp, #20]
 80005ce:	469b      	mov	fp, r3
 80005d0:	1b2c      	subs	r4, r5, r4
 80005d2:	42a5      	cmp	r5, r4
 80005d4:	41ad      	sbcs	r5, r5
 80005d6:	9b00      	ldr	r3, [sp, #0]
 80005d8:	1a80      	subs	r0, r0, r2
 80005da:	426d      	negs	r5, r5
 80005dc:	1b40      	subs	r0, r0, r5
 80005de:	4283      	cmp	r3, r0
 80005e0:	d100      	bne.n	80005e4 <__aeabi_ddiv+0x348>
 80005e2:	e10f      	b.n	8000804 <__aeabi_ddiv+0x568>
 80005e4:	9902      	ldr	r1, [sp, #8]
 80005e6:	f7ff fe15 	bl	8000214 <__aeabi_uidivmod>
 80005ea:	9a03      	ldr	r2, [sp, #12]
 80005ec:	040b      	lsls	r3, r1, #16
 80005ee:	4342      	muls	r2, r0
 80005f0:	0c21      	lsrs	r1, r4, #16
 80005f2:	0005      	movs	r5, r0
 80005f4:	4319      	orrs	r1, r3
 80005f6:	428a      	cmp	r2, r1
 80005f8:	d900      	bls.n	80005fc <__aeabi_ddiv+0x360>
 80005fa:	e0cb      	b.n	8000794 <__aeabi_ddiv+0x4f8>
 80005fc:	1a88      	subs	r0, r1, r2
 80005fe:	9902      	ldr	r1, [sp, #8]
 8000600:	f7ff fe08 	bl	8000214 <__aeabi_uidivmod>
 8000604:	9a03      	ldr	r2, [sp, #12]
 8000606:	0424      	lsls	r4, r4, #16
 8000608:	4342      	muls	r2, r0
 800060a:	0409      	lsls	r1, r1, #16
 800060c:	0c24      	lsrs	r4, r4, #16
 800060e:	0003      	movs	r3, r0
 8000610:	430c      	orrs	r4, r1
 8000612:	42a2      	cmp	r2, r4
 8000614:	d900      	bls.n	8000618 <__aeabi_ddiv+0x37c>
 8000616:	e0ca      	b.n	80007ae <__aeabi_ddiv+0x512>
 8000618:	4641      	mov	r1, r8
 800061a:	1aa4      	subs	r4, r4, r2
 800061c:	042a      	lsls	r2, r5, #16
 800061e:	431a      	orrs	r2, r3
 8000620:	9f04      	ldr	r7, [sp, #16]
 8000622:	0413      	lsls	r3, r2, #16
 8000624:	0c1b      	lsrs	r3, r3, #16
 8000626:	4359      	muls	r1, r3
 8000628:	4640      	mov	r0, r8
 800062a:	437b      	muls	r3, r7
 800062c:	469c      	mov	ip, r3
 800062e:	0c15      	lsrs	r5, r2, #16
 8000630:	4368      	muls	r0, r5
 8000632:	0c0b      	lsrs	r3, r1, #16
 8000634:	4484      	add	ip, r0
 8000636:	4463      	add	r3, ip
 8000638:	437d      	muls	r5, r7
 800063a:	4298      	cmp	r0, r3
 800063c:	d903      	bls.n	8000646 <__aeabi_ddiv+0x3aa>
 800063e:	2080      	movs	r0, #128	@ 0x80
 8000640:	0240      	lsls	r0, r0, #9
 8000642:	4684      	mov	ip, r0
 8000644:	4465      	add	r5, ip
 8000646:	0c18      	lsrs	r0, r3, #16
 8000648:	0409      	lsls	r1, r1, #16
 800064a:	041b      	lsls	r3, r3, #16
 800064c:	0c09      	lsrs	r1, r1, #16
 800064e:	1940      	adds	r0, r0, r5
 8000650:	185b      	adds	r3, r3, r1
 8000652:	4284      	cmp	r4, r0
 8000654:	d327      	bcc.n	80006a6 <__aeabi_ddiv+0x40a>
 8000656:	d023      	beq.n	80006a0 <__aeabi_ddiv+0x404>
 8000658:	2301      	movs	r3, #1
 800065a:	0035      	movs	r5, r6
 800065c:	431a      	orrs	r2, r3
 800065e:	4b94      	ldr	r3, [pc, #592]	@ (80008b0 <__aeabi_ddiv+0x614>)
 8000660:	4453      	add	r3, sl
 8000662:	2b00      	cmp	r3, #0
 8000664:	dd60      	ble.n	8000728 <__aeabi_ddiv+0x48c>
 8000666:	0751      	lsls	r1, r2, #29
 8000668:	d000      	beq.n	800066c <__aeabi_ddiv+0x3d0>
 800066a:	e086      	b.n	800077a <__aeabi_ddiv+0x4de>
 800066c:	002e      	movs	r6, r5
 800066e:	08d1      	lsrs	r1, r2, #3
 8000670:	465a      	mov	r2, fp
 8000672:	01d2      	lsls	r2, r2, #7
 8000674:	d506      	bpl.n	8000684 <__aeabi_ddiv+0x3e8>
 8000676:	465a      	mov	r2, fp
 8000678:	4b8e      	ldr	r3, [pc, #568]	@ (80008b4 <__aeabi_ddiv+0x618>)
 800067a:	401a      	ands	r2, r3
 800067c:	2380      	movs	r3, #128	@ 0x80
 800067e:	4693      	mov	fp, r2
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	4453      	add	r3, sl
 8000684:	4a8c      	ldr	r2, [pc, #560]	@ (80008b8 <__aeabi_ddiv+0x61c>)
 8000686:	4293      	cmp	r3, r2
 8000688:	dd00      	ble.n	800068c <__aeabi_ddiv+0x3f0>
 800068a:	e680      	b.n	800038e <__aeabi_ddiv+0xf2>
 800068c:	465a      	mov	r2, fp
 800068e:	0752      	lsls	r2, r2, #29
 8000690:	430a      	orrs	r2, r1
 8000692:	4690      	mov	r8, r2
 8000694:	465a      	mov	r2, fp
 8000696:	055b      	lsls	r3, r3, #21
 8000698:	0254      	lsls	r4, r2, #9
 800069a:	0b24      	lsrs	r4, r4, #12
 800069c:	0d5b      	lsrs	r3, r3, #21
 800069e:	e669      	b.n	8000374 <__aeabi_ddiv+0xd8>
 80006a0:	0035      	movs	r5, r6
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0db      	beq.n	800065e <__aeabi_ddiv+0x3c2>
 80006a6:	9d00      	ldr	r5, [sp, #0]
 80006a8:	1e51      	subs	r1, r2, #1
 80006aa:	46ac      	mov	ip, r5
 80006ac:	4464      	add	r4, ip
 80006ae:	42ac      	cmp	r4, r5
 80006b0:	d200      	bcs.n	80006b4 <__aeabi_ddiv+0x418>
 80006b2:	e09e      	b.n	80007f2 <__aeabi_ddiv+0x556>
 80006b4:	4284      	cmp	r4, r0
 80006b6:	d200      	bcs.n	80006ba <__aeabi_ddiv+0x41e>
 80006b8:	e0e1      	b.n	800087e <__aeabi_ddiv+0x5e2>
 80006ba:	d100      	bne.n	80006be <__aeabi_ddiv+0x422>
 80006bc:	e0ee      	b.n	800089c <__aeabi_ddiv+0x600>
 80006be:	000a      	movs	r2, r1
 80006c0:	e7ca      	b.n	8000658 <__aeabi_ddiv+0x3bc>
 80006c2:	4542      	cmp	r2, r8
 80006c4:	d900      	bls.n	80006c8 <__aeabi_ddiv+0x42c>
 80006c6:	e708      	b.n	80004da <__aeabi_ddiv+0x23e>
 80006c8:	464b      	mov	r3, r9
 80006ca:	07dc      	lsls	r4, r3, #31
 80006cc:	0858      	lsrs	r0, r3, #1
 80006ce:	4643      	mov	r3, r8
 80006d0:	085b      	lsrs	r3, r3, #1
 80006d2:	431c      	orrs	r4, r3
 80006d4:	4643      	mov	r3, r8
 80006d6:	07dd      	lsls	r5, r3, #31
 80006d8:	e706      	b.n	80004e8 <__aeabi_ddiv+0x24c>
 80006da:	f000 fa79 	bl	8000bd0 <__clzsi2>
 80006de:	2315      	movs	r3, #21
 80006e0:	469c      	mov	ip, r3
 80006e2:	4484      	add	ip, r0
 80006e4:	0002      	movs	r2, r0
 80006e6:	4663      	mov	r3, ip
 80006e8:	3220      	adds	r2, #32
 80006ea:	2b1c      	cmp	r3, #28
 80006ec:	dc00      	bgt.n	80006f0 <__aeabi_ddiv+0x454>
 80006ee:	e692      	b.n	8000416 <__aeabi_ddiv+0x17a>
 80006f0:	0023      	movs	r3, r4
 80006f2:	3808      	subs	r0, #8
 80006f4:	4083      	lsls	r3, r0
 80006f6:	4699      	mov	r9, r3
 80006f8:	2300      	movs	r3, #0
 80006fa:	4698      	mov	r8, r3
 80006fc:	e69a      	b.n	8000434 <__aeabi_ddiv+0x198>
 80006fe:	f000 fa67 	bl	8000bd0 <__clzsi2>
 8000702:	0002      	movs	r2, r0
 8000704:	0003      	movs	r3, r0
 8000706:	3215      	adds	r2, #21
 8000708:	3320      	adds	r3, #32
 800070a:	2a1c      	cmp	r2, #28
 800070c:	dc00      	bgt.n	8000710 <__aeabi_ddiv+0x474>
 800070e:	e65f      	b.n	80003d0 <__aeabi_ddiv+0x134>
 8000710:	9900      	ldr	r1, [sp, #0]
 8000712:	3808      	subs	r0, #8
 8000714:	4081      	lsls	r1, r0
 8000716:	2200      	movs	r2, #0
 8000718:	468b      	mov	fp, r1
 800071a:	e666      	b.n	80003ea <__aeabi_ddiv+0x14e>
 800071c:	2200      	movs	r2, #0
 800071e:	002e      	movs	r6, r5
 8000720:	2400      	movs	r4, #0
 8000722:	4690      	mov	r8, r2
 8000724:	4b65      	ldr	r3, [pc, #404]	@ (80008bc <__aeabi_ddiv+0x620>)
 8000726:	e625      	b.n	8000374 <__aeabi_ddiv+0xd8>
 8000728:	002e      	movs	r6, r5
 800072a:	2101      	movs	r1, #1
 800072c:	1ac9      	subs	r1, r1, r3
 800072e:	2938      	cmp	r1, #56	@ 0x38
 8000730:	dd00      	ble.n	8000734 <__aeabi_ddiv+0x498>
 8000732:	e61b      	b.n	800036c <__aeabi_ddiv+0xd0>
 8000734:	291f      	cmp	r1, #31
 8000736:	dc7e      	bgt.n	8000836 <__aeabi_ddiv+0x59a>
 8000738:	4861      	ldr	r0, [pc, #388]	@ (80008c0 <__aeabi_ddiv+0x624>)
 800073a:	0014      	movs	r4, r2
 800073c:	4450      	add	r0, sl
 800073e:	465b      	mov	r3, fp
 8000740:	4082      	lsls	r2, r0
 8000742:	4083      	lsls	r3, r0
 8000744:	40cc      	lsrs	r4, r1
 8000746:	1e50      	subs	r0, r2, #1
 8000748:	4182      	sbcs	r2, r0
 800074a:	4323      	orrs	r3, r4
 800074c:	431a      	orrs	r2, r3
 800074e:	465b      	mov	r3, fp
 8000750:	40cb      	lsrs	r3, r1
 8000752:	0751      	lsls	r1, r2, #29
 8000754:	d009      	beq.n	800076a <__aeabi_ddiv+0x4ce>
 8000756:	210f      	movs	r1, #15
 8000758:	4011      	ands	r1, r2
 800075a:	2904      	cmp	r1, #4
 800075c:	d005      	beq.n	800076a <__aeabi_ddiv+0x4ce>
 800075e:	1d11      	adds	r1, r2, #4
 8000760:	4291      	cmp	r1, r2
 8000762:	4192      	sbcs	r2, r2
 8000764:	4252      	negs	r2, r2
 8000766:	189b      	adds	r3, r3, r2
 8000768:	000a      	movs	r2, r1
 800076a:	0219      	lsls	r1, r3, #8
 800076c:	d400      	bmi.n	8000770 <__aeabi_ddiv+0x4d4>
 800076e:	e09b      	b.n	80008a8 <__aeabi_ddiv+0x60c>
 8000770:	2200      	movs	r2, #0
 8000772:	2301      	movs	r3, #1
 8000774:	2400      	movs	r4, #0
 8000776:	4690      	mov	r8, r2
 8000778:	e5fc      	b.n	8000374 <__aeabi_ddiv+0xd8>
 800077a:	210f      	movs	r1, #15
 800077c:	4011      	ands	r1, r2
 800077e:	2904      	cmp	r1, #4
 8000780:	d100      	bne.n	8000784 <__aeabi_ddiv+0x4e8>
 8000782:	e773      	b.n	800066c <__aeabi_ddiv+0x3d0>
 8000784:	1d11      	adds	r1, r2, #4
 8000786:	4291      	cmp	r1, r2
 8000788:	4192      	sbcs	r2, r2
 800078a:	4252      	negs	r2, r2
 800078c:	002e      	movs	r6, r5
 800078e:	08c9      	lsrs	r1, r1, #3
 8000790:	4493      	add	fp, r2
 8000792:	e76d      	b.n	8000670 <__aeabi_ddiv+0x3d4>
 8000794:	9b00      	ldr	r3, [sp, #0]
 8000796:	3d01      	subs	r5, #1
 8000798:	469c      	mov	ip, r3
 800079a:	4461      	add	r1, ip
 800079c:	428b      	cmp	r3, r1
 800079e:	d900      	bls.n	80007a2 <__aeabi_ddiv+0x506>
 80007a0:	e72c      	b.n	80005fc <__aeabi_ddiv+0x360>
 80007a2:	428a      	cmp	r2, r1
 80007a4:	d800      	bhi.n	80007a8 <__aeabi_ddiv+0x50c>
 80007a6:	e729      	b.n	80005fc <__aeabi_ddiv+0x360>
 80007a8:	1e85      	subs	r5, r0, #2
 80007aa:	4461      	add	r1, ip
 80007ac:	e726      	b.n	80005fc <__aeabi_ddiv+0x360>
 80007ae:	9900      	ldr	r1, [sp, #0]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	468c      	mov	ip, r1
 80007b4:	4464      	add	r4, ip
 80007b6:	42a1      	cmp	r1, r4
 80007b8:	d900      	bls.n	80007bc <__aeabi_ddiv+0x520>
 80007ba:	e72d      	b.n	8000618 <__aeabi_ddiv+0x37c>
 80007bc:	42a2      	cmp	r2, r4
 80007be:	d800      	bhi.n	80007c2 <__aeabi_ddiv+0x526>
 80007c0:	e72a      	b.n	8000618 <__aeabi_ddiv+0x37c>
 80007c2:	1e83      	subs	r3, r0, #2
 80007c4:	4464      	add	r4, ip
 80007c6:	e727      	b.n	8000618 <__aeabi_ddiv+0x37c>
 80007c8:	4287      	cmp	r7, r0
 80007ca:	d000      	beq.n	80007ce <__aeabi_ddiv+0x532>
 80007cc:	e6fe      	b.n	80005cc <__aeabi_ddiv+0x330>
 80007ce:	45a9      	cmp	r9, r5
 80007d0:	d900      	bls.n	80007d4 <__aeabi_ddiv+0x538>
 80007d2:	e6fb      	b.n	80005cc <__aeabi_ddiv+0x330>
 80007d4:	e6f5      	b.n	80005c2 <__aeabi_ddiv+0x326>
 80007d6:	42a2      	cmp	r2, r4
 80007d8:	d800      	bhi.n	80007dc <__aeabi_ddiv+0x540>
 80007da:	e6b9      	b.n	8000550 <__aeabi_ddiv+0x2b4>
 80007dc:	1e83      	subs	r3, r0, #2
 80007de:	4464      	add	r4, ip
 80007e0:	e6b6      	b.n	8000550 <__aeabi_ddiv+0x2b4>
 80007e2:	428a      	cmp	r2, r1
 80007e4:	d800      	bhi.n	80007e8 <__aeabi_ddiv+0x54c>
 80007e6:	e69f      	b.n	8000528 <__aeabi_ddiv+0x28c>
 80007e8:	46bc      	mov	ip, r7
 80007ea:	1e83      	subs	r3, r0, #2
 80007ec:	4698      	mov	r8, r3
 80007ee:	4461      	add	r1, ip
 80007f0:	e69a      	b.n	8000528 <__aeabi_ddiv+0x28c>
 80007f2:	000a      	movs	r2, r1
 80007f4:	4284      	cmp	r4, r0
 80007f6:	d000      	beq.n	80007fa <__aeabi_ddiv+0x55e>
 80007f8:	e72e      	b.n	8000658 <__aeabi_ddiv+0x3bc>
 80007fa:	454b      	cmp	r3, r9
 80007fc:	d000      	beq.n	8000800 <__aeabi_ddiv+0x564>
 80007fe:	e72b      	b.n	8000658 <__aeabi_ddiv+0x3bc>
 8000800:	0035      	movs	r5, r6
 8000802:	e72c      	b.n	800065e <__aeabi_ddiv+0x3c2>
 8000804:	4b2a      	ldr	r3, [pc, #168]	@ (80008b0 <__aeabi_ddiv+0x614>)
 8000806:	4a2f      	ldr	r2, [pc, #188]	@ (80008c4 <__aeabi_ddiv+0x628>)
 8000808:	4453      	add	r3, sl
 800080a:	4592      	cmp	sl, r2
 800080c:	db43      	blt.n	8000896 <__aeabi_ddiv+0x5fa>
 800080e:	2201      	movs	r2, #1
 8000810:	2100      	movs	r1, #0
 8000812:	4493      	add	fp, r2
 8000814:	e72c      	b.n	8000670 <__aeabi_ddiv+0x3d4>
 8000816:	42ac      	cmp	r4, r5
 8000818:	d800      	bhi.n	800081c <__aeabi_ddiv+0x580>
 800081a:	e6d7      	b.n	80005cc <__aeabi_ddiv+0x330>
 800081c:	2302      	movs	r3, #2
 800081e:	425b      	negs	r3, r3
 8000820:	469c      	mov	ip, r3
 8000822:	9900      	ldr	r1, [sp, #0]
 8000824:	444d      	add	r5, r9
 8000826:	454d      	cmp	r5, r9
 8000828:	419b      	sbcs	r3, r3
 800082a:	44e3      	add	fp, ip
 800082c:	468c      	mov	ip, r1
 800082e:	425b      	negs	r3, r3
 8000830:	4463      	add	r3, ip
 8000832:	18c0      	adds	r0, r0, r3
 8000834:	e6cc      	b.n	80005d0 <__aeabi_ddiv+0x334>
 8000836:	201f      	movs	r0, #31
 8000838:	4240      	negs	r0, r0
 800083a:	1ac3      	subs	r3, r0, r3
 800083c:	4658      	mov	r0, fp
 800083e:	40d8      	lsrs	r0, r3
 8000840:	2920      	cmp	r1, #32
 8000842:	d004      	beq.n	800084e <__aeabi_ddiv+0x5b2>
 8000844:	4659      	mov	r1, fp
 8000846:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <__aeabi_ddiv+0x62c>)
 8000848:	4453      	add	r3, sl
 800084a:	4099      	lsls	r1, r3
 800084c:	430a      	orrs	r2, r1
 800084e:	1e53      	subs	r3, r2, #1
 8000850:	419a      	sbcs	r2, r3
 8000852:	2307      	movs	r3, #7
 8000854:	0019      	movs	r1, r3
 8000856:	4302      	orrs	r2, r0
 8000858:	2400      	movs	r4, #0
 800085a:	4011      	ands	r1, r2
 800085c:	4213      	tst	r3, r2
 800085e:	d009      	beq.n	8000874 <__aeabi_ddiv+0x5d8>
 8000860:	3308      	adds	r3, #8
 8000862:	4013      	ands	r3, r2
 8000864:	2b04      	cmp	r3, #4
 8000866:	d01d      	beq.n	80008a4 <__aeabi_ddiv+0x608>
 8000868:	1d13      	adds	r3, r2, #4
 800086a:	4293      	cmp	r3, r2
 800086c:	4189      	sbcs	r1, r1
 800086e:	001a      	movs	r2, r3
 8000870:	4249      	negs	r1, r1
 8000872:	0749      	lsls	r1, r1, #29
 8000874:	08d2      	lsrs	r2, r2, #3
 8000876:	430a      	orrs	r2, r1
 8000878:	4690      	mov	r8, r2
 800087a:	2300      	movs	r3, #0
 800087c:	e57a      	b.n	8000374 <__aeabi_ddiv+0xd8>
 800087e:	4649      	mov	r1, r9
 8000880:	9f00      	ldr	r7, [sp, #0]
 8000882:	004d      	lsls	r5, r1, #1
 8000884:	454d      	cmp	r5, r9
 8000886:	4189      	sbcs	r1, r1
 8000888:	46bc      	mov	ip, r7
 800088a:	4249      	negs	r1, r1
 800088c:	4461      	add	r1, ip
 800088e:	46a9      	mov	r9, r5
 8000890:	3a02      	subs	r2, #2
 8000892:	1864      	adds	r4, r4, r1
 8000894:	e7ae      	b.n	80007f4 <__aeabi_ddiv+0x558>
 8000896:	2201      	movs	r2, #1
 8000898:	4252      	negs	r2, r2
 800089a:	e746      	b.n	800072a <__aeabi_ddiv+0x48e>
 800089c:	4599      	cmp	r9, r3
 800089e:	d3ee      	bcc.n	800087e <__aeabi_ddiv+0x5e2>
 80008a0:	000a      	movs	r2, r1
 80008a2:	e7aa      	b.n	80007fa <__aeabi_ddiv+0x55e>
 80008a4:	2100      	movs	r1, #0
 80008a6:	e7e5      	b.n	8000874 <__aeabi_ddiv+0x5d8>
 80008a8:	0759      	lsls	r1, r3, #29
 80008aa:	025b      	lsls	r3, r3, #9
 80008ac:	0b1c      	lsrs	r4, r3, #12
 80008ae:	e7e1      	b.n	8000874 <__aeabi_ddiv+0x5d8>
 80008b0:	000003ff 	.word	0x000003ff
 80008b4:	feffffff 	.word	0xfeffffff
 80008b8:	000007fe 	.word	0x000007fe
 80008bc:	000007ff 	.word	0x000007ff
 80008c0:	0000041e 	.word	0x0000041e
 80008c4:	fffffc02 	.word	0xfffffc02
 80008c8:	0000043e 	.word	0x0000043e

080008cc <__eqdf2>:
 80008cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ce:	4657      	mov	r7, sl
 80008d0:	46de      	mov	lr, fp
 80008d2:	464e      	mov	r6, r9
 80008d4:	4645      	mov	r5, r8
 80008d6:	b5e0      	push	{r5, r6, r7, lr}
 80008d8:	000d      	movs	r5, r1
 80008da:	0004      	movs	r4, r0
 80008dc:	0fe8      	lsrs	r0, r5, #31
 80008de:	4683      	mov	fp, r0
 80008e0:	0309      	lsls	r1, r1, #12
 80008e2:	0fd8      	lsrs	r0, r3, #31
 80008e4:	0b09      	lsrs	r1, r1, #12
 80008e6:	4682      	mov	sl, r0
 80008e8:	4819      	ldr	r0, [pc, #100]	@ (8000950 <__eqdf2+0x84>)
 80008ea:	468c      	mov	ip, r1
 80008ec:	031f      	lsls	r7, r3, #12
 80008ee:	0069      	lsls	r1, r5, #1
 80008f0:	005e      	lsls	r6, r3, #1
 80008f2:	0d49      	lsrs	r1, r1, #21
 80008f4:	0b3f      	lsrs	r7, r7, #12
 80008f6:	0d76      	lsrs	r6, r6, #21
 80008f8:	4281      	cmp	r1, r0
 80008fa:	d018      	beq.n	800092e <__eqdf2+0x62>
 80008fc:	4286      	cmp	r6, r0
 80008fe:	d00f      	beq.n	8000920 <__eqdf2+0x54>
 8000900:	2001      	movs	r0, #1
 8000902:	42b1      	cmp	r1, r6
 8000904:	d10d      	bne.n	8000922 <__eqdf2+0x56>
 8000906:	45bc      	cmp	ip, r7
 8000908:	d10b      	bne.n	8000922 <__eqdf2+0x56>
 800090a:	4294      	cmp	r4, r2
 800090c:	d109      	bne.n	8000922 <__eqdf2+0x56>
 800090e:	45d3      	cmp	fp, sl
 8000910:	d01c      	beq.n	800094c <__eqdf2+0x80>
 8000912:	2900      	cmp	r1, #0
 8000914:	d105      	bne.n	8000922 <__eqdf2+0x56>
 8000916:	4660      	mov	r0, ip
 8000918:	4320      	orrs	r0, r4
 800091a:	1e43      	subs	r3, r0, #1
 800091c:	4198      	sbcs	r0, r3
 800091e:	e000      	b.n	8000922 <__eqdf2+0x56>
 8000920:	2001      	movs	r0, #1
 8000922:	bcf0      	pop	{r4, r5, r6, r7}
 8000924:	46bb      	mov	fp, r7
 8000926:	46b2      	mov	sl, r6
 8000928:	46a9      	mov	r9, r5
 800092a:	46a0      	mov	r8, r4
 800092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092e:	2001      	movs	r0, #1
 8000930:	428e      	cmp	r6, r1
 8000932:	d1f6      	bne.n	8000922 <__eqdf2+0x56>
 8000934:	4661      	mov	r1, ip
 8000936:	4339      	orrs	r1, r7
 8000938:	000f      	movs	r7, r1
 800093a:	4317      	orrs	r7, r2
 800093c:	4327      	orrs	r7, r4
 800093e:	d1f0      	bne.n	8000922 <__eqdf2+0x56>
 8000940:	465b      	mov	r3, fp
 8000942:	4652      	mov	r2, sl
 8000944:	1a98      	subs	r0, r3, r2
 8000946:	1e43      	subs	r3, r0, #1
 8000948:	4198      	sbcs	r0, r3
 800094a:	e7ea      	b.n	8000922 <__eqdf2+0x56>
 800094c:	2000      	movs	r0, #0
 800094e:	e7e8      	b.n	8000922 <__eqdf2+0x56>
 8000950:	000007ff 	.word	0x000007ff

08000954 <__gedf2>:
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	4657      	mov	r7, sl
 8000958:	464e      	mov	r6, r9
 800095a:	4645      	mov	r5, r8
 800095c:	46de      	mov	lr, fp
 800095e:	b5e0      	push	{r5, r6, r7, lr}
 8000960:	000d      	movs	r5, r1
 8000962:	030e      	lsls	r6, r1, #12
 8000964:	0049      	lsls	r1, r1, #1
 8000966:	0d49      	lsrs	r1, r1, #21
 8000968:	468a      	mov	sl, r1
 800096a:	0fdf      	lsrs	r7, r3, #31
 800096c:	0fe9      	lsrs	r1, r5, #31
 800096e:	46bc      	mov	ip, r7
 8000970:	b083      	sub	sp, #12
 8000972:	4f2f      	ldr	r7, [pc, #188]	@ (8000a30 <__gedf2+0xdc>)
 8000974:	0004      	movs	r4, r0
 8000976:	4680      	mov	r8, r0
 8000978:	9101      	str	r1, [sp, #4]
 800097a:	0058      	lsls	r0, r3, #1
 800097c:	0319      	lsls	r1, r3, #12
 800097e:	4691      	mov	r9, r2
 8000980:	0b36      	lsrs	r6, r6, #12
 8000982:	0b09      	lsrs	r1, r1, #12
 8000984:	0d40      	lsrs	r0, r0, #21
 8000986:	45ba      	cmp	sl, r7
 8000988:	d01d      	beq.n	80009c6 <__gedf2+0x72>
 800098a:	42b8      	cmp	r0, r7
 800098c:	d00d      	beq.n	80009aa <__gedf2+0x56>
 800098e:	4657      	mov	r7, sl
 8000990:	2f00      	cmp	r7, #0
 8000992:	d12a      	bne.n	80009ea <__gedf2+0x96>
 8000994:	4334      	orrs	r4, r6
 8000996:	2800      	cmp	r0, #0
 8000998:	d124      	bne.n	80009e4 <__gedf2+0x90>
 800099a:	430a      	orrs	r2, r1
 800099c:	d036      	beq.n	8000a0c <__gedf2+0xb8>
 800099e:	2c00      	cmp	r4, #0
 80009a0:	d141      	bne.n	8000a26 <__gedf2+0xd2>
 80009a2:	4663      	mov	r3, ip
 80009a4:	0058      	lsls	r0, r3, #1
 80009a6:	3801      	subs	r0, #1
 80009a8:	e015      	b.n	80009d6 <__gedf2+0x82>
 80009aa:	4311      	orrs	r1, r2
 80009ac:	d138      	bne.n	8000a20 <__gedf2+0xcc>
 80009ae:	4653      	mov	r3, sl
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d101      	bne.n	80009b8 <__gedf2+0x64>
 80009b4:	4326      	orrs	r6, r4
 80009b6:	d0f4      	beq.n	80009a2 <__gedf2+0x4e>
 80009b8:	9b01      	ldr	r3, [sp, #4]
 80009ba:	4563      	cmp	r3, ip
 80009bc:	d107      	bne.n	80009ce <__gedf2+0x7a>
 80009be:	9b01      	ldr	r3, [sp, #4]
 80009c0:	0058      	lsls	r0, r3, #1
 80009c2:	3801      	subs	r0, #1
 80009c4:	e007      	b.n	80009d6 <__gedf2+0x82>
 80009c6:	4326      	orrs	r6, r4
 80009c8:	d12a      	bne.n	8000a20 <__gedf2+0xcc>
 80009ca:	4550      	cmp	r0, sl
 80009cc:	d021      	beq.n	8000a12 <__gedf2+0xbe>
 80009ce:	2001      	movs	r0, #1
 80009d0:	9b01      	ldr	r3, [sp, #4]
 80009d2:	425f      	negs	r7, r3
 80009d4:	4338      	orrs	r0, r7
 80009d6:	b003      	add	sp, #12
 80009d8:	bcf0      	pop	{r4, r5, r6, r7}
 80009da:	46bb      	mov	fp, r7
 80009dc:	46b2      	mov	sl, r6
 80009de:	46a9      	mov	r9, r5
 80009e0:	46a0      	mov	r8, r4
 80009e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	d0dc      	beq.n	80009a2 <__gedf2+0x4e>
 80009e8:	e7e6      	b.n	80009b8 <__gedf2+0x64>
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d0ef      	beq.n	80009ce <__gedf2+0x7a>
 80009ee:	9b01      	ldr	r3, [sp, #4]
 80009f0:	4563      	cmp	r3, ip
 80009f2:	d1ec      	bne.n	80009ce <__gedf2+0x7a>
 80009f4:	4582      	cmp	sl, r0
 80009f6:	dcea      	bgt.n	80009ce <__gedf2+0x7a>
 80009f8:	dbe1      	blt.n	80009be <__gedf2+0x6a>
 80009fa:	428e      	cmp	r6, r1
 80009fc:	d8e7      	bhi.n	80009ce <__gedf2+0x7a>
 80009fe:	d1de      	bne.n	80009be <__gedf2+0x6a>
 8000a00:	45c8      	cmp	r8, r9
 8000a02:	d8e4      	bhi.n	80009ce <__gedf2+0x7a>
 8000a04:	2000      	movs	r0, #0
 8000a06:	45c8      	cmp	r8, r9
 8000a08:	d2e5      	bcs.n	80009d6 <__gedf2+0x82>
 8000a0a:	e7d8      	b.n	80009be <__gedf2+0x6a>
 8000a0c:	2c00      	cmp	r4, #0
 8000a0e:	d0e2      	beq.n	80009d6 <__gedf2+0x82>
 8000a10:	e7dd      	b.n	80009ce <__gedf2+0x7a>
 8000a12:	4311      	orrs	r1, r2
 8000a14:	d104      	bne.n	8000a20 <__gedf2+0xcc>
 8000a16:	9b01      	ldr	r3, [sp, #4]
 8000a18:	4563      	cmp	r3, ip
 8000a1a:	d1d8      	bne.n	80009ce <__gedf2+0x7a>
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	e7da      	b.n	80009d6 <__gedf2+0x82>
 8000a20:	2002      	movs	r0, #2
 8000a22:	4240      	negs	r0, r0
 8000a24:	e7d7      	b.n	80009d6 <__gedf2+0x82>
 8000a26:	9b01      	ldr	r3, [sp, #4]
 8000a28:	4563      	cmp	r3, ip
 8000a2a:	d0e6      	beq.n	80009fa <__gedf2+0xa6>
 8000a2c:	e7cf      	b.n	80009ce <__gedf2+0x7a>
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	000007ff 	.word	0x000007ff

08000a34 <__ledf2>:
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a36:	4657      	mov	r7, sl
 8000a38:	464e      	mov	r6, r9
 8000a3a:	4645      	mov	r5, r8
 8000a3c:	46de      	mov	lr, fp
 8000a3e:	b5e0      	push	{r5, r6, r7, lr}
 8000a40:	000d      	movs	r5, r1
 8000a42:	030e      	lsls	r6, r1, #12
 8000a44:	0049      	lsls	r1, r1, #1
 8000a46:	0d49      	lsrs	r1, r1, #21
 8000a48:	468a      	mov	sl, r1
 8000a4a:	0fdf      	lsrs	r7, r3, #31
 8000a4c:	0fe9      	lsrs	r1, r5, #31
 8000a4e:	46bc      	mov	ip, r7
 8000a50:	b083      	sub	sp, #12
 8000a52:	4f2e      	ldr	r7, [pc, #184]	@ (8000b0c <__ledf2+0xd8>)
 8000a54:	0004      	movs	r4, r0
 8000a56:	4680      	mov	r8, r0
 8000a58:	9101      	str	r1, [sp, #4]
 8000a5a:	0058      	lsls	r0, r3, #1
 8000a5c:	0319      	lsls	r1, r3, #12
 8000a5e:	4691      	mov	r9, r2
 8000a60:	0b36      	lsrs	r6, r6, #12
 8000a62:	0b09      	lsrs	r1, r1, #12
 8000a64:	0d40      	lsrs	r0, r0, #21
 8000a66:	45ba      	cmp	sl, r7
 8000a68:	d01e      	beq.n	8000aa8 <__ledf2+0x74>
 8000a6a:	42b8      	cmp	r0, r7
 8000a6c:	d00d      	beq.n	8000a8a <__ledf2+0x56>
 8000a6e:	4657      	mov	r7, sl
 8000a70:	2f00      	cmp	r7, #0
 8000a72:	d127      	bne.n	8000ac4 <__ledf2+0x90>
 8000a74:	4334      	orrs	r4, r6
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d133      	bne.n	8000ae2 <__ledf2+0xae>
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	d034      	beq.n	8000ae8 <__ledf2+0xb4>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d140      	bne.n	8000b04 <__ledf2+0xd0>
 8000a82:	4663      	mov	r3, ip
 8000a84:	0058      	lsls	r0, r3, #1
 8000a86:	3801      	subs	r0, #1
 8000a88:	e015      	b.n	8000ab6 <__ledf2+0x82>
 8000a8a:	4311      	orrs	r1, r2
 8000a8c:	d112      	bne.n	8000ab4 <__ledf2+0x80>
 8000a8e:	4653      	mov	r3, sl
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d101      	bne.n	8000a98 <__ledf2+0x64>
 8000a94:	4326      	orrs	r6, r4
 8000a96:	d0f4      	beq.n	8000a82 <__ledf2+0x4e>
 8000a98:	9b01      	ldr	r3, [sp, #4]
 8000a9a:	4563      	cmp	r3, ip
 8000a9c:	d01d      	beq.n	8000ada <__ledf2+0xa6>
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	9b01      	ldr	r3, [sp, #4]
 8000aa2:	425f      	negs	r7, r3
 8000aa4:	4338      	orrs	r0, r7
 8000aa6:	e006      	b.n	8000ab6 <__ledf2+0x82>
 8000aa8:	4326      	orrs	r6, r4
 8000aaa:	d103      	bne.n	8000ab4 <__ledf2+0x80>
 8000aac:	4550      	cmp	r0, sl
 8000aae:	d1f6      	bne.n	8000a9e <__ledf2+0x6a>
 8000ab0:	4311      	orrs	r1, r2
 8000ab2:	d01c      	beq.n	8000aee <__ledf2+0xba>
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	b003      	add	sp, #12
 8000ab8:	bcf0      	pop	{r4, r5, r6, r7}
 8000aba:	46bb      	mov	fp, r7
 8000abc:	46b2      	mov	sl, r6
 8000abe:	46a9      	mov	r9, r5
 8000ac0:	46a0      	mov	r8, r4
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d0ea      	beq.n	8000a9e <__ledf2+0x6a>
 8000ac8:	9b01      	ldr	r3, [sp, #4]
 8000aca:	4563      	cmp	r3, ip
 8000acc:	d1e7      	bne.n	8000a9e <__ledf2+0x6a>
 8000ace:	4582      	cmp	sl, r0
 8000ad0:	dce5      	bgt.n	8000a9e <__ledf2+0x6a>
 8000ad2:	db02      	blt.n	8000ada <__ledf2+0xa6>
 8000ad4:	428e      	cmp	r6, r1
 8000ad6:	d8e2      	bhi.n	8000a9e <__ledf2+0x6a>
 8000ad8:	d00e      	beq.n	8000af8 <__ledf2+0xc4>
 8000ada:	9b01      	ldr	r3, [sp, #4]
 8000adc:	0058      	lsls	r0, r3, #1
 8000ade:	3801      	subs	r0, #1
 8000ae0:	e7e9      	b.n	8000ab6 <__ledf2+0x82>
 8000ae2:	2c00      	cmp	r4, #0
 8000ae4:	d0cd      	beq.n	8000a82 <__ledf2+0x4e>
 8000ae6:	e7d7      	b.n	8000a98 <__ledf2+0x64>
 8000ae8:	2c00      	cmp	r4, #0
 8000aea:	d0e4      	beq.n	8000ab6 <__ledf2+0x82>
 8000aec:	e7d7      	b.n	8000a9e <__ledf2+0x6a>
 8000aee:	9b01      	ldr	r3, [sp, #4]
 8000af0:	2000      	movs	r0, #0
 8000af2:	4563      	cmp	r3, ip
 8000af4:	d0df      	beq.n	8000ab6 <__ledf2+0x82>
 8000af6:	e7d2      	b.n	8000a9e <__ledf2+0x6a>
 8000af8:	45c8      	cmp	r8, r9
 8000afa:	d8d0      	bhi.n	8000a9e <__ledf2+0x6a>
 8000afc:	2000      	movs	r0, #0
 8000afe:	45c8      	cmp	r8, r9
 8000b00:	d2d9      	bcs.n	8000ab6 <__ledf2+0x82>
 8000b02:	e7ea      	b.n	8000ada <__ledf2+0xa6>
 8000b04:	9b01      	ldr	r3, [sp, #4]
 8000b06:	4563      	cmp	r3, ip
 8000b08:	d0e4      	beq.n	8000ad4 <__ledf2+0xa0>
 8000b0a:	e7c8      	b.n	8000a9e <__ledf2+0x6a>
 8000b0c:	000007ff 	.word	0x000007ff

08000b10 <__aeabi_d2iz>:
 8000b10:	000b      	movs	r3, r1
 8000b12:	0002      	movs	r2, r0
 8000b14:	b570      	push	{r4, r5, r6, lr}
 8000b16:	4d16      	ldr	r5, [pc, #88]	@ (8000b70 <__aeabi_d2iz+0x60>)
 8000b18:	030c      	lsls	r4, r1, #12
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	0049      	lsls	r1, r1, #1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	9200      	str	r2, [sp, #0]
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	0b24      	lsrs	r4, r4, #12
 8000b26:	0d49      	lsrs	r1, r1, #21
 8000b28:	0fde      	lsrs	r6, r3, #31
 8000b2a:	42a9      	cmp	r1, r5
 8000b2c:	dd04      	ble.n	8000b38 <__aeabi_d2iz+0x28>
 8000b2e:	4811      	ldr	r0, [pc, #68]	@ (8000b74 <__aeabi_d2iz+0x64>)
 8000b30:	4281      	cmp	r1, r0
 8000b32:	dd03      	ble.n	8000b3c <__aeabi_d2iz+0x2c>
 8000b34:	4b10      	ldr	r3, [pc, #64]	@ (8000b78 <__aeabi_d2iz+0x68>)
 8000b36:	18f0      	adds	r0, r6, r3
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
 8000b3c:	2080      	movs	r0, #128	@ 0x80
 8000b3e:	0340      	lsls	r0, r0, #13
 8000b40:	4320      	orrs	r0, r4
 8000b42:	4c0e      	ldr	r4, [pc, #56]	@ (8000b7c <__aeabi_d2iz+0x6c>)
 8000b44:	1a64      	subs	r4, r4, r1
 8000b46:	2c1f      	cmp	r4, #31
 8000b48:	dd08      	ble.n	8000b5c <__aeabi_d2iz+0x4c>
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <__aeabi_d2iz+0x70>)
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	40d8      	lsrs	r0, r3
 8000b50:	0003      	movs	r3, r0
 8000b52:	4258      	negs	r0, r3
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d1ef      	bne.n	8000b38 <__aeabi_d2iz+0x28>
 8000b58:	0018      	movs	r0, r3
 8000b5a:	e7ed      	b.n	8000b38 <__aeabi_d2iz+0x28>
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <__aeabi_d2iz+0x74>)
 8000b5e:	9a00      	ldr	r2, [sp, #0]
 8000b60:	469c      	mov	ip, r3
 8000b62:	0003      	movs	r3, r0
 8000b64:	4461      	add	r1, ip
 8000b66:	408b      	lsls	r3, r1
 8000b68:	40e2      	lsrs	r2, r4
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	e7f1      	b.n	8000b52 <__aeabi_d2iz+0x42>
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	000003fe 	.word	0x000003fe
 8000b74:	0000041d 	.word	0x0000041d
 8000b78:	7fffffff 	.word	0x7fffffff
 8000b7c:	00000433 	.word	0x00000433
 8000b80:	00000413 	.word	0x00000413
 8000b84:	fffffbed 	.word	0xfffffbed

08000b88 <__aeabi_ui2d>:
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	1e04      	subs	r4, r0, #0
 8000b8c:	d010      	beq.n	8000bb0 <__aeabi_ui2d+0x28>
 8000b8e:	f000 f81f 	bl	8000bd0 <__clzsi2>
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <__aeabi_ui2d+0x44>)
 8000b94:	1a1b      	subs	r3, r3, r0
 8000b96:	055b      	lsls	r3, r3, #21
 8000b98:	0d5b      	lsrs	r3, r3, #21
 8000b9a:	280a      	cmp	r0, #10
 8000b9c:	dc0f      	bgt.n	8000bbe <__aeabi_ui2d+0x36>
 8000b9e:	220b      	movs	r2, #11
 8000ba0:	0021      	movs	r1, r4
 8000ba2:	1a12      	subs	r2, r2, r0
 8000ba4:	40d1      	lsrs	r1, r2
 8000ba6:	3015      	adds	r0, #21
 8000ba8:	030a      	lsls	r2, r1, #12
 8000baa:	4084      	lsls	r4, r0
 8000bac:	0b12      	lsrs	r2, r2, #12
 8000bae:	e001      	b.n	8000bb4 <__aeabi_ui2d+0x2c>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	051b      	lsls	r3, r3, #20
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	0020      	movs	r0, r4
 8000bba:	0019      	movs	r1, r3
 8000bbc:	bd10      	pop	{r4, pc}
 8000bbe:	0022      	movs	r2, r4
 8000bc0:	380b      	subs	r0, #11
 8000bc2:	4082      	lsls	r2, r0
 8000bc4:	0312      	lsls	r2, r2, #12
 8000bc6:	2400      	movs	r4, #0
 8000bc8:	0b12      	lsrs	r2, r2, #12
 8000bca:	e7f3      	b.n	8000bb4 <__aeabi_ui2d+0x2c>
 8000bcc:	0000041e 	.word	0x0000041e

08000bd0 <__clzsi2>:
 8000bd0:	211c      	movs	r1, #28
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	041b      	lsls	r3, r3, #16
 8000bd6:	4298      	cmp	r0, r3
 8000bd8:	d301      	bcc.n	8000bde <__clzsi2+0xe>
 8000bda:	0c00      	lsrs	r0, r0, #16
 8000bdc:	3910      	subs	r1, #16
 8000bde:	0a1b      	lsrs	r3, r3, #8
 8000be0:	4298      	cmp	r0, r3
 8000be2:	d301      	bcc.n	8000be8 <__clzsi2+0x18>
 8000be4:	0a00      	lsrs	r0, r0, #8
 8000be6:	3908      	subs	r1, #8
 8000be8:	091b      	lsrs	r3, r3, #4
 8000bea:	4298      	cmp	r0, r3
 8000bec:	d301      	bcc.n	8000bf2 <__clzsi2+0x22>
 8000bee:	0900      	lsrs	r0, r0, #4
 8000bf0:	3904      	subs	r1, #4
 8000bf2:	a202      	add	r2, pc, #8	@ (adr r2, 8000bfc <__clzsi2+0x2c>)
 8000bf4:	5c10      	ldrb	r0, [r2, r0]
 8000bf6:	1840      	adds	r0, r0, r1
 8000bf8:	4770      	bx	lr
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	02020304 	.word	0x02020304
 8000c00:	01010101 	.word	0x01010101
	...

08000c0c <HAL_TIM_IC_CaptureCallback>:
void TurnOnAll(void);
void TurnOffAll(void);
void TurnOn(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
void TurnOff(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	if(htim->Instance == sine.htim->Instance){
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d13a      	bne.n	8000c98 <HAL_TIM_IC_CaptureCallback+0x8c>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7e1b      	ldrb	r3, [r3, #24]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d108      	bne.n	8000c3c <HAL_TIM_IC_CaptureCallback+0x30>
			sine.RisingTiming = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f002 fc78 	bl	8003524 <HAL_TIM_ReadCapturedValue>
 8000c34:	0002      	movs	r2, r0
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c38:	601a      	str	r2, [r3, #0]
			sine.FallingTiming = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
			    sine.DistanceInCm = (double)((sine.FallingTiming - sine.RisingTiming) / 58.0);
			    sine.DistanceInIches = (double)((sine.FallingTiming - sine.RisingTiming) / 148.0);
		}
	}
}
 8000c3a:	e02d      	b.n	8000c98 <HAL_TIM_IC_CaptureCallback+0x8c>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	7e1b      	ldrb	r3, [r3, #24]
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d129      	bne.n	8000c98 <HAL_TIM_IC_CaptureCallback+0x8c>
			sine.FallingTiming = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2104      	movs	r1, #4
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f002 fc6b 	bl	8003524 <HAL_TIM_ReadCapturedValue>
 8000c4e:	0002      	movs	r2, r0
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c52:	605a      	str	r2, [r3, #4]
			    sine.DistanceInCm = (double)((sine.FallingTiming - sine.RisingTiming) / 58.0);
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff ff92 	bl	8000b88 <__aeabi_ui2d>
 8000c64:	2200      	movs	r2, #0
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000c68:	f7ff fb18 	bl	800029c <__aeabi_ddiv>
 8000c6c:	0002      	movs	r2, r0
 8000c6e:	000b      	movs	r3, r1
 8000c70:	490b      	ldr	r1, [pc, #44]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c72:	608a      	str	r2, [r1, #8]
 8000c74:	60cb      	str	r3, [r1, #12]
			    sine.DistanceInIches = (double)((sine.FallingTiming - sine.RisingTiming) / 148.0);
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff ff81 	bl	8000b88 <__aeabi_ui2d>
 8000c86:	2200      	movs	r2, #0
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000c8a:	f7ff fb07 	bl	800029c <__aeabi_ddiv>
 8000c8e:	0002      	movs	r2, r0
 8000c90:	000b      	movs	r3, r1
 8000c92:	4903      	ldr	r1, [pc, #12]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x94>)
 8000c94:	610a      	str	r2, [r1, #16]
 8000c96:	614b      	str	r3, [r1, #20]
}
 8000c98:	46c0      	nop			@ (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000100 	.word	0x20000100
 8000ca4:	404d0000 	.word	0x404d0000
 8000ca8:	40628000 	.word	0x40628000

08000cac <HSR04_StartUp>:

void HSR04_StartUp(HCSR04_t *handle){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	handle->DistanceInCm = 400;
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <HSR04_StartUp+0x4c>)
 8000cba:	608a      	str	r2, [r1, #8]
 8000cbc:	60cb      	str	r3, [r1, #12]
	HAL_TIM_PWM_Start(handle->htim, handle->PWM_CHANNEL);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	699a      	ldr	r2, [r3, #24]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	0010      	movs	r0, r2
 8000cca:	f001 fefd 	bl	8002ac8 <HAL_TIM_PWM_Start>
	HAL_TIM_IC_Start_DMA(handle->htim, handle->RisingICChannel, &handle->RisingTiming, 1);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6998      	ldr	r0, [r3, #24]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a19      	ldr	r1, [r3, #32]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f001 ffc9 	bl	8002c70 <HAL_TIM_IC_Start_DMA>
	HAL_TIM_IC_Start_DMA(handle->htim, handle->FallingICChannel, &handle->FallingTiming, 1);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6998      	ldr	r0, [r3, #24]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	1d1a      	adds	r2, r3, #4
 8000cea:	2301      	movs	r3, #1
 8000cec:	f001 ffc0 	bl	8002c70 <HAL_TIM_IC_Start_DMA>
}
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40790000 	.word	0x40790000

08000cfc <HSR04_InterpretDistance>:

double HSR04_GetDistance(HCSR04_t *handle){
	return handle->DistanceInCm;
}

void HSR04_InterpretDistance(double distance_cm){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6038      	str	r0, [r7, #0]
 8000d04:	6079      	str	r1, [r7, #4]
	TurnOffAll();
 8000d06:	f000 fa6d 	bl	80011e4 <TurnOffAll>

    if(distance_cm > 100.0){
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000dfc <HSR04_InterpretDistance+0x100>)
 8000d0e:	6838      	ldr	r0, [r7, #0]
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	f7ff faaf 	bl	8000274 <__aeabi_dcmpgt>
 8000d16:	1e03      	subs	r3, r0, #0
 8000d18:	d003      	beq.n	8000d22 <HSR04_InterpretDistance+0x26>
        distance_cm = 100.0;
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	4b37      	ldr	r3, [pc, #220]	@ (8000dfc <HSR04_InterpretDistance+0x100>)
 8000d1e:	603a      	str	r2, [r7, #0]
 8000d20:	607b      	str	r3, [r7, #4]
    }

    int leds_to_light = (int)(distance_cm / 10.0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	4b36      	ldr	r3, [pc, #216]	@ (8000e00 <HSR04_InterpretDistance+0x104>)
 8000d26:	6838      	ldr	r0, [r7, #0]
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	f7ff fab7 	bl	800029c <__aeabi_ddiv>
 8000d2e:	0002      	movs	r2, r0
 8000d30:	000b      	movs	r3, r1
 8000d32:	0010      	movs	r0, r2
 8000d34:	0019      	movs	r1, r3
 8000d36:	f7ff feeb 	bl	8000b10 <__aeabi_d2iz>
 8000d3a:	0003      	movs	r3, r0
 8000d3c:	60fb      	str	r3, [r7, #12]
    if(leds_to_light >= 1) TurnOn(LD1_GPIO_Port, LD1_Pin);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dd07      	ble.n	8000d54 <HSR04_InterpretDistance+0x58>
 8000d44:	2380      	movs	r3, #128	@ 0x80
 8000d46:	00da      	lsls	r2, r3, #3
 8000d48:	23a0      	movs	r3, #160	@ 0xa0
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 fa36 	bl	80011c0 <TurnOn>
	if(leds_to_light >= 2) TurnOn(LD2_GPIO_Port, LD2_Pin);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	dd04      	ble.n	8000d64 <HSR04_InterpretDistance+0x68>
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000e04 <HSR04_InterpretDistance+0x108>)
 8000d5c:	2108      	movs	r1, #8
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 fa2e 	bl	80011c0 <TurnOn>
	if(leds_to_light >= 3) TurnOn(LD3_GPIO_Port, LD3_Pin);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	dd04      	ble.n	8000d74 <HSR04_InterpretDistance+0x78>
 8000d6a:	4b26      	ldr	r3, [pc, #152]	@ (8000e04 <HSR04_InterpretDistance+0x108>)
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 fa26 	bl	80011c0 <TurnOn>
	if(leds_to_light >= 4) TurnOn(LD4_GPIO_Port, LD4_Pin);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	dd04      	ble.n	8000d84 <HSR04_InterpretDistance+0x88>
 8000d7a:	4b22      	ldr	r3, [pc, #136]	@ (8000e04 <HSR04_InterpretDistance+0x108>)
 8000d7c:	2110      	movs	r1, #16
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 fa1e 	bl	80011c0 <TurnOn>
	if(leds_to_light >= 5) TurnOn(LD5_GPIO_Port, LD5_Pin);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	dd05      	ble.n	8000d96 <HSR04_InterpretDistance+0x9a>
 8000d8a:	23a0      	movs	r3, #160	@ 0xa0
 8000d8c:	05db      	lsls	r3, r3, #23
 8000d8e:	2120      	movs	r1, #32
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 fa15 	bl	80011c0 <TurnOn>
	if(leds_to_light >= 6) TurnOn(LD6_GPIO_Port, LD6_Pin);
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2b05      	cmp	r3, #5
 8000d9a:	dd07      	ble.n	8000dac <HSR04_InterpretDistance+0xb0>
 8000d9c:	2380      	movs	r3, #128	@ 0x80
 8000d9e:	005a      	lsls	r2, r3, #1
 8000da0:	23a0      	movs	r3, #160	@ 0xa0
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	0011      	movs	r1, r2
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 fa0a 	bl	80011c0 <TurnOn>
	if(leds_to_light >= 7) TurnOn(LD7_GPIO_Port, LD7_Pin);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	dd07      	ble.n	8000dc2 <HSR04_InterpretDistance+0xc6>
 8000db2:	2380      	movs	r3, #128	@ 0x80
 8000db4:	009a      	lsls	r2, r3, #2
 8000db6:	23a0      	movs	r3, #160	@ 0xa0
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f000 f9ff 	bl	80011c0 <TurnOn>
	if(leds_to_light >= 8) TurnOn(LD8_GPIO_Port, LD8_Pin);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2b07      	cmp	r3, #7
 8000dc6:	dd04      	ble.n	8000dd2 <HSR04_InterpretDistance+0xd6>
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <HSR04_InterpretDistance+0x10c>)
 8000dca:	2180      	movs	r1, #128	@ 0x80
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f000 f9f7 	bl	80011c0 <TurnOn>
	if(leds_to_light >= 9) TurnOn(LD9_GPIO_Port, LD9_Pin);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2b08      	cmp	r3, #8
 8000dd6:	dd04      	ble.n	8000de2 <HSR04_InterpretDistance+0xe6>
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <HSR04_InterpretDistance+0x108>)
 8000dda:	2140      	movs	r1, #64	@ 0x40
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 f9ef 	bl	80011c0 <TurnOn>
	if(leds_to_light >= 10) TurnOn(LD10_GPIO_Port, LD10_Pin);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2b09      	cmp	r3, #9
 8000de6:	dd05      	ble.n	8000df4 <HSR04_InterpretDistance+0xf8>
 8000de8:	23a0      	movs	r3, #160	@ 0xa0
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	2180      	movs	r1, #128	@ 0x80
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 f9e6 	bl	80011c0 <TurnOn>
}
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b004      	add	sp, #16
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40590000 	.word	0x40590000
 8000e00:	40240000 	.word	0x40240000
 8000e04:	50000400 	.word	0x50000400
 8000e08:	50000800 	.word	0x50000800

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e10:	f000 fba4 	bl	800155c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e14:	f000 f824 	bl	8000e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e18:	f000 f94c 	bl	80010b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e1c:	f000 f924 	bl	8001068 <MX_DMA_Init>
  MX_TIM2_Init();
 8000e20:	f000 f86e 	bl	8000f00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  sine.htim = &htim2;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <main+0x4c>)
 8000e26:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <main+0x50>)
 8000e28:	619a      	str	r2, [r3, #24]
  sine.RisingICChannel = TIM_CHANNEL_1;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <main+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  sine.FallingICChannel = TIM_CHANNEL_2;
 8000e30:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <main+0x4c>)
 8000e32:	2204      	movs	r2, #4
 8000e34:	625a      	str	r2, [r3, #36]	@ 0x24
  sine.PWM_CHANNEL = TIM_CHANNEL_3;
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <main+0x4c>)
 8000e38:	2208      	movs	r2, #8
 8000e3a:	61da      	str	r2, [r3, #28]

  HSR04_StartUp(&sine);
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <main+0x4c>)
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff ff34 	bl	8000cac <HSR04_StartUp>
  TurnOffAll();
 8000e44:	f000 f9ce 	bl	80011e4 <TurnOffAll>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HSR04_InterpretDistance(sine.DistanceInCm);
 8000e48:	4b03      	ldr	r3, [pc, #12]	@ (8000e58 <main+0x4c>)
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	0010      	movs	r0, r2
 8000e50:	0019      	movs	r1, r3
 8000e52:	f7ff ff53 	bl	8000cfc <HSR04_InterpretDistance>
 8000e56:	e7f7      	b.n	8000e48 <main+0x3c>
 8000e58:	20000100 	.word	0x20000100
 8000e5c:	2000002c 	.word	0x2000002c

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b095      	sub	sp, #84	@ 0x54
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	2418      	movs	r4, #24
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	2338      	movs	r3, #56	@ 0x38
 8000e6e:	001a      	movs	r2, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	f003 f821 	bl	8003eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2314      	movs	r3, #20
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f003 f81a 	bl	8003eb8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <SystemClock_Config+0x98>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <SystemClock_Config+0x9c>)
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <SystemClock_Config+0x98>)
 8000e8e:	2180      	movs	r1, #128	@ 0x80
 8000e90:	0109      	lsls	r1, r1, #4
 8000e92:	430a      	orrs	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e96:	0021      	movs	r1, r4
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2210      	movs	r2, #16
 8000ea8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2200      	movs	r2, #0
 8000eae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 ffee 	bl	8001e94 <HAL_RCC_OscConfig>
 8000eb8:	1e03      	subs	r3, r0, #0
 8000eba:	d001      	beq.n	8000ec0 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000ebc:	f000 f9e0 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2201      	movs	r2, #1
 8000eca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2280      	movs	r2, #128	@ 0x80
 8000ed0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f001 fb9a 	bl	800261c <HAL_RCC_ClockConfig>
 8000ee8:	1e03      	subs	r3, r0, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000eec:	f000 f9c8 	bl	8001280 <Error_Handler>
  }
}
 8000ef0:	46c0      	nop			@ (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b015      	add	sp, #84	@ 0x54
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	40007000 	.word	0x40007000
 8000efc:	ffffe7ff 	.word	0xffffe7ff

08000f00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	@ 0x38
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f06:	2328      	movs	r3, #40	@ 0x28
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	001a      	movs	r2, r3
 8000f10:	2100      	movs	r1, #0
 8000f12:	f002 ffd1 	bl	8003eb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f16:	2320      	movs	r3, #32
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	001a      	movs	r2, r3
 8000f20:	2100      	movs	r1, #0
 8000f22:	f002 ffc9 	bl	8003eb8 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f26:	2310      	movs	r3, #16
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	001a      	movs	r2, r3
 8000f30:	2100      	movs	r1, #0
 8000f32:	f002 ffc1 	bl	8003eb8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f36:	003b      	movs	r3, r7
 8000f38:	0018      	movs	r0, r3
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f002 ffba 	bl	8003eb8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f44:	4b46      	ldr	r3, [pc, #280]	@ (8001060 <MX_TIM2_Init+0x160>)
 8000f46:	2280      	movs	r2, #128	@ 0x80
 8000f48:	05d2      	lsls	r2, r2, #23
 8000f4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000f4c:	4b44      	ldr	r3, [pc, #272]	@ (8001060 <MX_TIM2_Init+0x160>)
 8000f4e:	2207      	movs	r2, #7
 8000f50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f52:	4b43      	ldr	r3, [pc, #268]	@ (8001060 <MX_TIM2_Init+0x160>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8000f58:	4b41      	ldr	r3, [pc, #260]	@ (8001060 <MX_TIM2_Init+0x160>)
 8000f5a:	4a42      	ldr	r2, [pc, #264]	@ (8001064 <MX_TIM2_Init+0x164>)
 8000f5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5e:	4b40      	ldr	r3, [pc, #256]	@ (8001060 <MX_TIM2_Init+0x160>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b3e      	ldr	r3, [pc, #248]	@ (8001060 <MX_TIM2_Init+0x160>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001060 <MX_TIM2_Init+0x160>)
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f001 fd23 	bl	80029b8 <HAL_TIM_Base_Init>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000f76:	f000 f983 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7a:	2128      	movs	r1, #40	@ 0x28
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2280      	movs	r2, #128	@ 0x80
 8000f80:	0152      	lsls	r2, r2, #5
 8000f82:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f84:	187a      	adds	r2, r7, r1
 8000f86:	4b36      	ldr	r3, [pc, #216]	@ (8001060 <MX_TIM2_Init+0x160>)
 8000f88:	0011      	movs	r1, r2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f002 f9f6 	bl	800337c <HAL_TIM_ConfigClockSource>
 8000f90:	1e03      	subs	r3, r0, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f94:	f000 f974 	bl	8001280 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f98:	4b31      	ldr	r3, [pc, #196]	@ (8001060 <MX_TIM2_Init+0x160>)
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f001 fe20 	bl	8002be0 <HAL_TIM_IC_Init>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8000fa4:	f000 f96c 	bl	8001280 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <MX_TIM2_Init+0x160>)
 8000faa:	0018      	movs	r0, r3
 8000fac:	f001 fd44 	bl	8002a38 <HAL_TIM_PWM_Init>
 8000fb0:	1e03      	subs	r3, r0, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000fb4:	f000 f964 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb8:	2120      	movs	r1, #32
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fc6:	187a      	adds	r2, r7, r1
 8000fc8:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <MX_TIM2_Init+0x160>)
 8000fca:	0011      	movs	r1, r2
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f002 ff1b 	bl	8003e08 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd2:	1e03      	subs	r3, r0, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000fd6:	f000 f953 	bl	8001280 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fda:	2110      	movs	r1, #16
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 5;
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2205      	movs	r2, #5
 8000ff2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ff4:	1879      	adds	r1, r7, r1
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <MX_TIM2_Init+0x160>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f002 f854 	bl	80030a8 <HAL_TIM_IC_ConfigChannel>
 8001000:	1e03      	subs	r3, r0, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8001004:	f000 f93c 	bl	8001280 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001008:	2110      	movs	r1, #16
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2202      	movs	r2, #2
 800100e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001010:	1879      	adds	r1, r7, r1
 8001012:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <MX_TIM2_Init+0x160>)
 8001014:	2204      	movs	r2, #4
 8001016:	0018      	movs	r0, r3
 8001018:	f002 f846 	bl	80030a8 <HAL_TIM_IC_ConfigChannel>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0x124>
  {
    Error_Handler();
 8001020:	f000 f92e 	bl	8001280 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001024:	003b      	movs	r3, r7
 8001026:	2260      	movs	r2, #96	@ 0x60
 8001028:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 10;
 800102a:	003b      	movs	r3, r7
 800102c:	220a      	movs	r2, #10
 800102e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001030:	003b      	movs	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001036:	003b      	movs	r3, r7
 8001038:	2204      	movs	r2, #4
 800103a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800103c:	0039      	movs	r1, r7
 800103e:	4b08      	ldr	r3, [pc, #32]	@ (8001060 <MX_TIM2_Init+0x160>)
 8001040:	2208      	movs	r2, #8
 8001042:	0018      	movs	r0, r3
 8001044:	f002 f8d4 	bl	80031f0 <HAL_TIM_PWM_ConfigChannel>
 8001048:	1e03      	subs	r3, r0, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x150>
  {
    Error_Handler();
 800104c:	f000 f918 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001050:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <MX_TIM2_Init+0x160>)
 8001052:	0018      	movs	r0, r3
 8001054:	f000 f9d6 	bl	8001404 <HAL_TIM_MspPostInit>

}
 8001058:	46c0      	nop			@ (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b00e      	add	sp, #56	@ 0x38
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000002c 	.word	0x2000002c
 8001064:	0000ffff 	.word	0x0000ffff

08001068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <MX_DMA_Init+0x48>)
 8001070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <MX_DMA_Init+0x48>)
 8001074:	2101      	movs	r1, #1
 8001076:	430a      	orrs	r2, r1
 8001078:	631a      	str	r2, [r3, #48]	@ 0x30
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <MX_DMA_Init+0x48>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	2201      	movs	r2, #1
 8001080:	4013      	ands	r3, r2
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	200a      	movs	r0, #10
 800108c:	f000 fb82 	bl	8001794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001090:	200a      	movs	r0, #10
 8001092:	f000 fb94 	bl	80017be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	200b      	movs	r0, #11
 800109c:	f000 fb7a 	bl	8001794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80010a0:	200b      	movs	r0, #11
 80010a2:	f000 fb8c 	bl	80017be <HAL_NVIC_EnableIRQ>

}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	40021000 	.word	0x40021000

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b089      	sub	sp, #36	@ 0x24
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	240c      	movs	r4, #12
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	0018      	movs	r0, r3
 80010c0:	2314      	movs	r3, #20
 80010c2:	001a      	movs	r2, r3
 80010c4:	2100      	movs	r1, #0
 80010c6:	f002 fef7 	bl	8003eb8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b3a      	ldr	r3, [pc, #232]	@ (80011b4 <MX_GPIO_Init+0x100>)
 80010cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010ce:	4b39      	ldr	r3, [pc, #228]	@ (80011b4 <MX_GPIO_Init+0x100>)
 80010d0:	2101      	movs	r1, #1
 80010d2:	430a      	orrs	r2, r1
 80010d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010d6:	4b37      	ldr	r3, [pc, #220]	@ (80011b4 <MX_GPIO_Init+0x100>)
 80010d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010da:	2201      	movs	r2, #1
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	4b34      	ldr	r3, [pc, #208]	@ (80011b4 <MX_GPIO_Init+0x100>)
 80010e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010e6:	4b33      	ldr	r3, [pc, #204]	@ (80011b4 <MX_GPIO_Init+0x100>)
 80010e8:	2102      	movs	r1, #2
 80010ea:	430a      	orrs	r2, r1
 80010ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010ee:	4b31      	ldr	r3, [pc, #196]	@ (80011b4 <MX_GPIO_Init+0x100>)
 80010f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f2:	2202      	movs	r2, #2
 80010f4:	4013      	ands	r3, r2
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	4b2e      	ldr	r3, [pc, #184]	@ (80011b4 <MX_GPIO_Init+0x100>)
 80010fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010fe:	4b2d      	ldr	r3, [pc, #180]	@ (80011b4 <MX_GPIO_Init+0x100>)
 8001100:	2104      	movs	r1, #4
 8001102:	430a      	orrs	r2, r1
 8001104:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001106:	4b2b      	ldr	r3, [pc, #172]	@ (80011b4 <MX_GPIO_Init+0x100>)
 8001108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800110a:	2204      	movs	r2, #4
 800110c:	4013      	ands	r3, r2
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD5_Pin|LD10_Pin|LD6_Pin|LD7_Pin
 8001112:	23f4      	movs	r3, #244	@ 0xf4
 8001114:	00d9      	lsls	r1, r3, #3
 8001116:	23a0      	movs	r3, #160	@ 0xa0
 8001118:	05db      	lsls	r3, r3, #23
 800111a:	2200      	movs	r2, #0
 800111c:	0018      	movs	r0, r3
 800111e:	f000 fe9b 	bl	8001e58 <HAL_GPIO_WritePin>
                          |LD1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_RESET);
 8001122:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <MX_GPIO_Init+0x104>)
 8001124:	2200      	movs	r2, #0
 8001126:	2180      	movs	r1, #128	@ 0x80
 8001128:	0018      	movs	r0, r3
 800112a:	f000 fe95 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD4_Pin|LD3_Pin|LD9_Pin, GPIO_PIN_RESET);
 800112e:	4b23      	ldr	r3, [pc, #140]	@ (80011bc <MX_GPIO_Init+0x108>)
 8001130:	2200      	movs	r2, #0
 8001132:	2178      	movs	r1, #120	@ 0x78
 8001134:	0018      	movs	r0, r3
 8001136:	f000 fe8f 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD5_Pin LD10_Pin LD6_Pin LD7_Pin
                           LD1_Pin */
  GPIO_InitStruct.Pin = LD5_Pin|LD10_Pin|LD6_Pin|LD7_Pin
 800113a:	193b      	adds	r3, r7, r4
 800113c:	22f4      	movs	r2, #244	@ 0xf4
 800113e:	00d2      	lsls	r2, r2, #3
 8001140:	601a      	str	r2, [r3, #0]
                          |LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	193b      	adds	r3, r7, r4
 8001144:	2201      	movs	r2, #1
 8001146:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001148:	193b      	adds	r3, r7, r4
 800114a:	2202      	movs	r2, #2
 800114c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	193b      	adds	r3, r7, r4
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	193a      	adds	r2, r7, r4
 8001156:	23a0      	movs	r3, #160	@ 0xa0
 8001158:	05db      	lsls	r3, r3, #23
 800115a:	0011      	movs	r1, r2
 800115c:	0018      	movs	r0, r3
 800115e:	f000 fd05 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD8_Pin */
  GPIO_InitStruct.Pin = LD8_Pin;
 8001162:	193b      	adds	r3, r7, r4
 8001164:	2280      	movs	r2, #128	@ 0x80
 8001166:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	193b      	adds	r3, r7, r4
 800116a:	2201      	movs	r2, #1
 800116c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800116e:	193b      	adds	r3, r7, r4
 8001170:	2202      	movs	r2, #2
 8001172:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	193b      	adds	r3, r7, r4
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD8_GPIO_Port, &GPIO_InitStruct);
 800117a:	193b      	adds	r3, r7, r4
 800117c:	4a0e      	ldr	r2, [pc, #56]	@ (80011b8 <MX_GPIO_Init+0x104>)
 800117e:	0019      	movs	r1, r3
 8001180:	0010      	movs	r0, r2
 8001182:	f000 fcf3 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD4_Pin LD3_Pin LD9_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD4_Pin|LD3_Pin|LD9_Pin;
 8001186:	0021      	movs	r1, r4
 8001188:	187b      	adds	r3, r7, r1
 800118a:	2278      	movs	r2, #120	@ 0x78
 800118c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2201      	movs	r2, #1
 8001192:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001194:	187b      	adds	r3, r7, r1
 8001196:	2202      	movs	r2, #2
 8001198:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	4a06      	ldr	r2, [pc, #24]	@ (80011bc <MX_GPIO_Init+0x108>)
 80011a4:	0019      	movs	r1, r3
 80011a6:	0010      	movs	r0, r2
 80011a8:	f000 fce0 	bl	8001b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b009      	add	sp, #36	@ 0x24
 80011b2:	bd90      	pop	{r4, r7, pc}
 80011b4:	40021000 	.word	0x40021000
 80011b8:	50000800 	.word	0x50000800
 80011bc:	50000400 	.word	0x50000400

080011c0 <TurnOn>:
	  HAL_Delay(100);
	  TurnOff(LD10_GPIO_Port, LD10_Pin);
	  HAL_Delay(100);
}

void TurnOn(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	000a      	movs	r2, r1
 80011ca:	1cbb      	adds	r3, r7, #2
 80011cc:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80011ce:	1cbb      	adds	r3, r7, #2
 80011d0:	8819      	ldrh	r1, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 fe3e 	bl	8001e58 <HAL_GPIO_WritePin>
}
 80011dc:	46c0      	nop			@ (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b002      	add	sp, #8
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <TurnOffAll>:
void TurnOff(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
	  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
}
void TurnOffAll(void){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	00d9      	lsls	r1, r3, #3
 80011ec:	23a0      	movs	r3, #160	@ 0xa0
 80011ee:	05db      	lsls	r3, r3, #23
 80011f0:	2200      	movs	r2, #0
 80011f2:	0018      	movs	r0, r3
 80011f4:	f000 fe30 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <TurnOffAll+0x94>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	2108      	movs	r1, #8
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 fe2a 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001204:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <TurnOffAll+0x94>)
 8001206:	2200      	movs	r2, #0
 8001208:	2120      	movs	r1, #32
 800120a:	0018      	movs	r0, r3
 800120c:	f000 fe24 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001210:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <TurnOffAll+0x94>)
 8001212:	2200      	movs	r2, #0
 8001214:	2110      	movs	r1, #16
 8001216:	0018      	movs	r0, r3
 8001218:	f000 fe1e 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800121c:	23a0      	movs	r3, #160	@ 0xa0
 800121e:	05db      	lsls	r3, r3, #23
 8001220:	2200      	movs	r2, #0
 8001222:	2120      	movs	r1, #32
 8001224:	0018      	movs	r0, r3
 8001226:	f000 fe17 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800122a:	2380      	movs	r3, #128	@ 0x80
 800122c:	0059      	lsls	r1, r3, #1
 800122e:	23a0      	movs	r3, #160	@ 0xa0
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	2200      	movs	r2, #0
 8001234:	0018      	movs	r0, r3
 8001236:	f000 fe0f 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD7_GPIO_Port, LD7_Pin, GPIO_PIN_RESET);
 800123a:	2380      	movs	r3, #128	@ 0x80
 800123c:	0099      	lsls	r1, r3, #2
 800123e:	23a0      	movs	r3, #160	@ 0xa0
 8001240:	05db      	lsls	r3, r3, #23
 8001242:	2200      	movs	r2, #0
 8001244:	0018      	movs	r0, r3
 8001246:	f000 fe07 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD8_GPIO_Port, LD8_Pin, GPIO_PIN_RESET);
 800124a:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <TurnOffAll+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	2180      	movs	r1, #128	@ 0x80
 8001250:	0018      	movs	r0, r3
 8001252:	f000 fe01 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD9_GPIO_Port, LD9_Pin, GPIO_PIN_RESET);
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <TurnOffAll+0x94>)
 8001258:	2200      	movs	r2, #0
 800125a:	2140      	movs	r1, #64	@ 0x40
 800125c:	0018      	movs	r0, r3
 800125e:	f000 fdfb 	bl	8001e58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD10_GPIO_Port, LD10_Pin, GPIO_PIN_RESET);
 8001262:	23a0      	movs	r3, #160	@ 0xa0
 8001264:	05db      	lsls	r3, r3, #23
 8001266:	2200      	movs	r2, #0
 8001268:	2180      	movs	r1, #128	@ 0x80
 800126a:	0018      	movs	r0, r3
 800126c:	f000 fdf4 	bl	8001e58 <HAL_GPIO_WritePin>
}
 8001270:	46c0      	nop			@ (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	50000400 	.word	0x50000400
 800127c:	50000800 	.word	0x50000800

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	46c0      	nop			@ (mov r8, r8)
 800128a:	e7fd      	b.n	8001288 <Error_Handler+0x8>

0800128c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001290:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <HAL_MspInit+0x24>)
 8001292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_MspInit+0x24>)
 8001296:	2101      	movs	r1, #1
 8001298:	430a      	orrs	r2, r1
 800129a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <HAL_MspInit+0x24>)
 800129e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_MspInit+0x24>)
 80012a2:	2180      	movs	r1, #128	@ 0x80
 80012a4:	0549      	lsls	r1, r1, #21
 80012a6:	430a      	orrs	r2, r1
 80012a8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000

080012b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b089      	sub	sp, #36	@ 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	240c      	movs	r4, #12
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	0018      	movs	r0, r3
 80012c2:	2314      	movs	r3, #20
 80012c4:	001a      	movs	r2, r3
 80012c6:	2100      	movs	r1, #0
 80012c8:	f002 fdf6 	bl	8003eb8 <memset>
  if(htim_base->Instance==TIM2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	05db      	lsls	r3, r3, #23
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d000      	beq.n	80012da <HAL_TIM_Base_MspInit+0x26>
 80012d8:	e086      	b.n	80013e8 <HAL_TIM_Base_MspInit+0x134>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012da:	4b45      	ldr	r3, [pc, #276]	@ (80013f0 <HAL_TIM_Base_MspInit+0x13c>)
 80012dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012de:	4b44      	ldr	r3, [pc, #272]	@ (80013f0 <HAL_TIM_Base_MspInit+0x13c>)
 80012e0:	2101      	movs	r1, #1
 80012e2:	430a      	orrs	r2, r1
 80012e4:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b42      	ldr	r3, [pc, #264]	@ (80013f0 <HAL_TIM_Base_MspInit+0x13c>)
 80012e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012ea:	4b41      	ldr	r3, [pc, #260]	@ (80013f0 <HAL_TIM_Base_MspInit+0x13c>)
 80012ec:	2101      	movs	r1, #1
 80012ee:	430a      	orrs	r2, r1
 80012f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012f2:	4b3f      	ldr	r3, [pc, #252]	@ (80013f0 <HAL_TIM_Base_MspInit+0x13c>)
 80012f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f6:	2201      	movs	r2, #1
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012fe:	0021      	movs	r1, r4
 8001300:	187b      	adds	r3, r7, r1
 8001302:	2203      	movs	r2, #3
 8001304:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	2202      	movs	r2, #2
 800130a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	187b      	adds	r3, r7, r1
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	187b      	adds	r3, r7, r1
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001318:	187b      	adds	r3, r7, r1
 800131a:	2202      	movs	r2, #2
 800131c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	187a      	adds	r2, r7, r1
 8001320:	23a0      	movs	r3, #160	@ 0xa0
 8001322:	05db      	lsls	r3, r3, #23
 8001324:	0011      	movs	r1, r2
 8001326:	0018      	movs	r0, r3
 8001328:	f000 fc20 	bl	8001b6c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800132c:	4b31      	ldr	r3, [pc, #196]	@ (80013f4 <HAL_TIM_Base_MspInit+0x140>)
 800132e:	4a32      	ldr	r2, [pc, #200]	@ (80013f8 <HAL_TIM_Base_MspInit+0x144>)
 8001330:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 8001332:	4b30      	ldr	r3, [pc, #192]	@ (80013f4 <HAL_TIM_Base_MspInit+0x140>)
 8001334:	2208      	movs	r2, #8
 8001336:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001338:	4b2e      	ldr	r3, [pc, #184]	@ (80013f4 <HAL_TIM_Base_MspInit+0x140>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800133e:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <HAL_TIM_Base_MspInit+0x140>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001344:	4b2b      	ldr	r3, [pc, #172]	@ (80013f4 <HAL_TIM_Base_MspInit+0x140>)
 8001346:	2280      	movs	r2, #128	@ 0x80
 8001348:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800134a:	4b2a      	ldr	r3, [pc, #168]	@ (80013f4 <HAL_TIM_Base_MspInit+0x140>)
 800134c:	2280      	movs	r2, #128	@ 0x80
 800134e:	0052      	lsls	r2, r2, #1
 8001350:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001352:	4b28      	ldr	r3, [pc, #160]	@ (80013f4 <HAL_TIM_Base_MspInit+0x140>)
 8001354:	2280      	movs	r2, #128	@ 0x80
 8001356:	00d2      	lsls	r2, r2, #3
 8001358:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <HAL_TIM_Base_MspInit+0x140>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001360:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <HAL_TIM_Base_MspInit+0x140>)
 8001362:	2200      	movs	r2, #0
 8001364:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001366:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <HAL_TIM_Base_MspInit+0x140>)
 8001368:	0018      	movs	r0, r3
 800136a:	f000 fa45 	bl	80017f8 <HAL_DMA_Init>
 800136e:	1e03      	subs	r3, r0, #0
 8001370:	d001      	beq.n	8001376 <HAL_TIM_Base_MspInit+0xc2>
    {
      Error_Handler();
 8001372:	f7ff ff85 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a1e      	ldr	r2, [pc, #120]	@ (80013f4 <HAL_TIM_Base_MspInit+0x140>)
 800137a:	621a      	str	r2, [r3, #32]
 800137c:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <HAL_TIM_Base_MspInit+0x140>)
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28

    /* TIM2_CH2 Init */
    hdma_tim2_ch2.Instance = DMA1_Channel3;
 8001382:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <HAL_TIM_Base_MspInit+0x148>)
 8001384:	4a1e      	ldr	r2, [pc, #120]	@ (8001400 <HAL_TIM_Base_MspInit+0x14c>)
 8001386:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2.Init.Request = DMA_REQUEST_8;
 8001388:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <HAL_TIM_Base_MspInit+0x148>)
 800138a:	2208      	movs	r2, #8
 800138c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800138e:	4b1b      	ldr	r3, [pc, #108]	@ (80013fc <HAL_TIM_Base_MspInit+0x148>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001394:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <HAL_TIM_Base_MspInit+0x148>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800139a:	4b18      	ldr	r3, [pc, #96]	@ (80013fc <HAL_TIM_Base_MspInit+0x148>)
 800139c:	2280      	movs	r2, #128	@ 0x80
 800139e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013a0:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <HAL_TIM_Base_MspInit+0x148>)
 80013a2:	2280      	movs	r2, #128	@ 0x80
 80013a4:	0092      	lsls	r2, r2, #2
 80013a6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013a8:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <HAL_TIM_Base_MspInit+0x148>)
 80013aa:	2280      	movs	r2, #128	@ 0x80
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2.Init.Mode = DMA_CIRCULAR;
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <HAL_TIM_Base_MspInit+0x148>)
 80013b2:	2220      	movs	r2, #32
 80013b4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80013b6:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <HAL_TIM_Base_MspInit+0x148>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch2) != HAL_OK)
 80013bc:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <HAL_TIM_Base_MspInit+0x148>)
 80013be:	0018      	movs	r0, r3
 80013c0:	f000 fa1a 	bl	80017f8 <HAL_DMA_Init>
 80013c4:	1e03      	subs	r3, r0, #0
 80013c6:	d001      	beq.n	80013cc <HAL_TIM_Base_MspInit+0x118>
    {
      Error_Handler();
 80013c8:	f7ff ff5a 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a0b      	ldr	r2, [pc, #44]	@ (80013fc <HAL_TIM_Base_MspInit+0x148>)
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <HAL_TIM_Base_MspInit+0x148>)
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	200f      	movs	r0, #15
 80013de:	f000 f9d9 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013e2:	200f      	movs	r0, #15
 80013e4:	f000 f9eb 	bl	80017be <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80013e8:	46c0      	nop			@ (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b009      	add	sp, #36	@ 0x24
 80013ee:	bd90      	pop	{r4, r7, pc}
 80013f0:	40021000 	.word	0x40021000
 80013f4:	2000006c 	.word	0x2000006c
 80013f8:	40020058 	.word	0x40020058
 80013fc:	200000b4 	.word	0x200000b4
 8001400:	40020030 	.word	0x40020030

08001404 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	240c      	movs	r4, #12
 800140e:	193b      	adds	r3, r7, r4
 8001410:	0018      	movs	r0, r3
 8001412:	2314      	movs	r3, #20
 8001414:	001a      	movs	r2, r3
 8001416:	2100      	movs	r1, #0
 8001418:	f002 fd4e 	bl	8003eb8 <memset>
  if(htim->Instance==TIM2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	@ 0x80
 8001422:	05db      	lsls	r3, r3, #23
 8001424:	429a      	cmp	r2, r3
 8001426:	d122      	bne.n	800146e <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001428:	4b13      	ldr	r3, [pc, #76]	@ (8001478 <HAL_TIM_MspPostInit+0x74>)
 800142a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <HAL_TIM_MspPostInit+0x74>)
 800142e:	2102      	movs	r1, #2
 8001430:	430a      	orrs	r2, r1
 8001432:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001434:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <HAL_TIM_MspPostInit+0x74>)
 8001436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001438:	2202      	movs	r2, #2
 800143a:	4013      	ands	r3, r2
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001440:	193b      	adds	r3, r7, r4
 8001442:	2280      	movs	r2, #128	@ 0x80
 8001444:	00d2      	lsls	r2, r2, #3
 8001446:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	0021      	movs	r1, r4
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2202      	movs	r2, #2
 800144e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	187b      	adds	r3, r7, r1
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	187b      	adds	r3, r7, r1
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800145c:	187b      	adds	r3, r7, r1
 800145e:	2202      	movs	r2, #2
 8001460:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	187b      	adds	r3, r7, r1
 8001464:	4a05      	ldr	r2, [pc, #20]	@ (800147c <HAL_TIM_MspPostInit+0x78>)
 8001466:	0019      	movs	r1, r3
 8001468:	0010      	movs	r0, r2
 800146a:	f000 fb7f 	bl	8001b6c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800146e:	46c0      	nop			@ (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b009      	add	sp, #36	@ 0x24
 8001474:	bd90      	pop	{r4, r7, pc}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	40021000 	.word	0x40021000
 800147c:	50000400 	.word	0x50000400

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001484:	46c0      	nop			@ (mov r8, r8)
 8001486:	e7fd      	b.n	8001484 <NMI_Handler+0x4>

08001488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148c:	46c0      	nop			@ (mov r8, r8)
 800148e:	e7fd      	b.n	800148c <HardFault_Handler+0x4>

08001490 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001494:	46c0      	nop			@ (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a8:	f000 f8ac 	bl	8001604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	46c0      	nop			@ (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2);
 80014b8:	4b03      	ldr	r3, [pc, #12]	@ (80014c8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f000 fa7a 	bl	80019b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80014c0:	46c0      	nop			@ (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	200000b4 	.word	0x200000b4

080014cc <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f000 fa6e 	bl	80019b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80014d8:	46c0      	nop			@ (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	46c0      	nop			@ (mov r8, r8)
 80014e0:	2000006c 	.word	0x2000006c

080014e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <TIM2_IRQHandler+0x14>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f001 fd10 	bl	8002f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014f0:	46c0      	nop			@ (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	2000002c 	.word	0x2000002c

080014fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001500:	46c0      	nop			@ (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001508:	480d      	ldr	r0, [pc, #52]	@ (8001540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800150a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800150c:	f7ff fff6 	bl	80014fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	@ (8001544 <LoopForever+0x6>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	@ (8001548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <LoopForever+0xe>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	@ (8001554 <LoopForever+0x16>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f002 fcc7 	bl	8003ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800153a:	f7ff fc67 	bl	8000e0c <main>

0800153e <LoopForever>:

LoopForever:
    b LoopForever
 800153e:	e7fe      	b.n	800153e <LoopForever>
  ldr   r0, =_estack
 8001540:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800154c:	08003f8c 	.word	0x08003f8c
  ldr r2, =_sbss
 8001550:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001554:	2000012c 	.word	0x2000012c

08001558 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_COMP_IRQHandler>
	...

0800155c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001562:	1dfb      	adds	r3, r7, #7
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_Init+0x3c>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_Init+0x3c>)
 800156e:	2140      	movs	r1, #64	@ 0x40
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001574:	2000      	movs	r0, #0
 8001576:	f000 f811 	bl	800159c <HAL_InitTick>
 800157a:	1e03      	subs	r3, r0, #0
 800157c:	d003      	beq.n	8001586 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	e001      	b.n	800158a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001586:	f7ff fe81 	bl	800128c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	781b      	ldrb	r3, [r3, #0]
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	b002      	add	sp, #8
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			@ (mov r8, r8)
 8001598:	40022000 	.word	0x40022000

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b590      	push	{r4, r7, lr}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <HAL_InitTick+0x5c>)
 80015a6:	681c      	ldr	r4, [r3, #0]
 80015a8:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <HAL_InitTick+0x60>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	0019      	movs	r1, r3
 80015ae:	23fa      	movs	r3, #250	@ 0xfa
 80015b0:	0098      	lsls	r0, r3, #2
 80015b2:	f7fe fda9 	bl	8000108 <__udivsi3>
 80015b6:	0003      	movs	r3, r0
 80015b8:	0019      	movs	r1, r3
 80015ba:	0020      	movs	r0, r4
 80015bc:	f7fe fda4 	bl	8000108 <__udivsi3>
 80015c0:	0003      	movs	r3, r0
 80015c2:	0018      	movs	r0, r3
 80015c4:	f000 f90b 	bl	80017de <HAL_SYSTICK_Config>
 80015c8:	1e03      	subs	r3, r0, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e00f      	b.n	80015f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d80b      	bhi.n	80015ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	2301      	movs	r3, #1
 80015da:	425b      	negs	r3, r3
 80015dc:	2200      	movs	r2, #0
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 f8d8 	bl	8001794 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_InitTick+0x64>)
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b003      	add	sp, #12
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001608:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <HAL_IncTick+0x1c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	001a      	movs	r2, r3
 800160e:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <HAL_IncTick+0x20>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	18d2      	adds	r2, r2, r3
 8001614:	4b03      	ldr	r3, [pc, #12]	@ (8001624 <HAL_IncTick+0x20>)
 8001616:	601a      	str	r2, [r3, #0]
}
 8001618:	46c0      	nop			@ (mov r8, r8)
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	46c0      	nop			@ (mov r8, r8)
 8001620:	20000008 	.word	0x20000008
 8001624:	20000128 	.word	0x20000128

08001628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b02      	ldr	r3, [pc, #8]	@ (8001638 <HAL_GetTick+0x10>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	20000128 	.word	0x20000128

0800163c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	0002      	movs	r2, r0
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b7f      	cmp	r3, #127	@ 0x7f
 800164e:	d809      	bhi.n	8001664 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	001a      	movs	r2, r3
 8001656:	231f      	movs	r3, #31
 8001658:	401a      	ands	r2, r3
 800165a:	4b04      	ldr	r3, [pc, #16]	@ (800166c <__NVIC_EnableIRQ+0x30>)
 800165c:	2101      	movs	r1, #1
 800165e:	4091      	lsls	r1, r2
 8001660:	000a      	movs	r2, r1
 8001662:	601a      	str	r2, [r3, #0]
  }
}
 8001664:	46c0      	nop			@ (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	0002      	movs	r2, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b7f      	cmp	r3, #127	@ 0x7f
 8001684:	d828      	bhi.n	80016d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001686:	4a2f      	ldr	r2, [pc, #188]	@ (8001744 <__NVIC_SetPriority+0xd4>)
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b25b      	sxtb	r3, r3
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	33c0      	adds	r3, #192	@ 0xc0
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	589b      	ldr	r3, [r3, r2]
 8001696:	1dfa      	adds	r2, r7, #7
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	0011      	movs	r1, r2
 800169c:	2203      	movs	r2, #3
 800169e:	400a      	ands	r2, r1
 80016a0:	00d2      	lsls	r2, r2, #3
 80016a2:	21ff      	movs	r1, #255	@ 0xff
 80016a4:	4091      	lsls	r1, r2
 80016a6:	000a      	movs	r2, r1
 80016a8:	43d2      	mvns	r2, r2
 80016aa:	401a      	ands	r2, r3
 80016ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	22ff      	movs	r2, #255	@ 0xff
 80016b4:	401a      	ands	r2, r3
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	0018      	movs	r0, r3
 80016bc:	2303      	movs	r3, #3
 80016be:	4003      	ands	r3, r0
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c4:	481f      	ldr	r0, [pc, #124]	@ (8001744 <__NVIC_SetPriority+0xd4>)
 80016c6:	1dfb      	adds	r3, r7, #7
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	430a      	orrs	r2, r1
 80016d0:	33c0      	adds	r3, #192	@ 0xc0
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016d6:	e031      	b.n	800173c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001748 <__NVIC_SetPriority+0xd8>)
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	0019      	movs	r1, r3
 80016e0:	230f      	movs	r3, #15
 80016e2:	400b      	ands	r3, r1
 80016e4:	3b08      	subs	r3, #8
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3306      	adds	r3, #6
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	18d3      	adds	r3, r2, r3
 80016ee:	3304      	adds	r3, #4
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1dfa      	adds	r2, r7, #7
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	0011      	movs	r1, r2
 80016f8:	2203      	movs	r2, #3
 80016fa:	400a      	ands	r2, r1
 80016fc:	00d2      	lsls	r2, r2, #3
 80016fe:	21ff      	movs	r1, #255	@ 0xff
 8001700:	4091      	lsls	r1, r2
 8001702:	000a      	movs	r2, r1
 8001704:	43d2      	mvns	r2, r2
 8001706:	401a      	ands	r2, r3
 8001708:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	019b      	lsls	r3, r3, #6
 800170e:	22ff      	movs	r2, #255	@ 0xff
 8001710:	401a      	ands	r2, r3
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	0018      	movs	r0, r3
 8001718:	2303      	movs	r3, #3
 800171a:	4003      	ands	r3, r0
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001720:	4809      	ldr	r0, [pc, #36]	@ (8001748 <__NVIC_SetPriority+0xd8>)
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	001c      	movs	r4, r3
 8001728:	230f      	movs	r3, #15
 800172a:	4023      	ands	r3, r4
 800172c:	3b08      	subs	r3, #8
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	430a      	orrs	r2, r1
 8001732:	3306      	adds	r3, #6
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	18c3      	adds	r3, r0, r3
 8001738:	3304      	adds	r3, #4
 800173a:	601a      	str	r2, [r3, #0]
}
 800173c:	46c0      	nop			@ (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b003      	add	sp, #12
 8001742:	bd90      	pop	{r4, r7, pc}
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	1e5a      	subs	r2, r3, #1
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	045b      	lsls	r3, r3, #17
 800175c:	429a      	cmp	r2, r3
 800175e:	d301      	bcc.n	8001764 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001760:	2301      	movs	r3, #1
 8001762:	e010      	b.n	8001786 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001764:	4b0a      	ldr	r3, [pc, #40]	@ (8001790 <SysTick_Config+0x44>)
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	3a01      	subs	r2, #1
 800176a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176c:	2301      	movs	r3, #1
 800176e:	425b      	negs	r3, r3
 8001770:	2103      	movs	r1, #3
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff ff7c 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <SysTick_Config+0x44>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	@ (8001790 <SysTick_Config+0x44>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	210f      	movs	r1, #15
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	1c02      	adds	r2, r0, #0
 80017a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	0011      	movs	r1, r2
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff ff5d 	bl	8001670 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80017b6:	46c0      	nop			@ (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b004      	add	sp, #16
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	0002      	movs	r2, r0
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff ff33 	bl	800163c <__NVIC_EnableIRQ>
}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b002      	add	sp, #8
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff ffaf 	bl	800174c <SysTick_Config>
 80017ee:	0003      	movs	r3, r0
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e061      	b.n	80018ce <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a32      	ldr	r2, [pc, #200]	@ (80018d8 <HAL_DMA_Init+0xe0>)
 8001810:	4694      	mov	ip, r2
 8001812:	4463      	add	r3, ip
 8001814:	2114      	movs	r1, #20
 8001816:	0018      	movs	r0, r3
 8001818:	f7fe fc76 	bl	8000108 <__udivsi3>
 800181c:	0003      	movs	r3, r0
 800181e:	009a      	lsls	r2, r3, #2
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a2d      	ldr	r2, [pc, #180]	@ (80018dc <HAL_DMA_Init+0xe4>)
 8001828:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2225      	movs	r2, #37	@ 0x25
 800182e:	2102      	movs	r1, #2
 8001830:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4a28      	ldr	r2, [pc, #160]	@ (80018e0 <HAL_DMA_Init+0xe8>)
 800183e:	4013      	ands	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800184a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4313      	orrs	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	01db      	lsls	r3, r3, #7
 8001880:	429a      	cmp	r2, r3
 8001882:	d018      	beq.n	80018b6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001884:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <HAL_DMA_Init+0xec>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188c:	211c      	movs	r1, #28
 800188e:	400b      	ands	r3, r1
 8001890:	210f      	movs	r1, #15
 8001892:	4099      	lsls	r1, r3
 8001894:	000b      	movs	r3, r1
 8001896:	43d9      	mvns	r1, r3
 8001898:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_DMA_Init+0xec>)
 800189a:	400a      	ands	r2, r1
 800189c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <HAL_DMA_Init+0xec>)
 80018a0:	6819      	ldr	r1, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018aa:	201c      	movs	r0, #28
 80018ac:	4003      	ands	r3, r0
 80018ae:	409a      	lsls	r2, r3
 80018b0:	4b0c      	ldr	r3, [pc, #48]	@ (80018e4 <HAL_DMA_Init+0xec>)
 80018b2:	430a      	orrs	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2225      	movs	r2, #37	@ 0x25
 80018c0:	2101      	movs	r1, #1
 80018c2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2224      	movs	r2, #36	@ 0x24
 80018c8:	2100      	movs	r1, #0
 80018ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	0018      	movs	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b004      	add	sp, #16
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	bffdfff8 	.word	0xbffdfff8
 80018dc:	40020000 	.word	0x40020000
 80018e0:	ffff800f 	.word	0xffff800f
 80018e4:	400200a8 	.word	0x400200a8

080018e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018f6:	2317      	movs	r3, #23
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2224      	movs	r2, #36	@ 0x24
 8001902:	5c9b      	ldrb	r3, [r3, r2]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_DMA_Start_IT+0x24>
 8001908:	2302      	movs	r3, #2
 800190a:	e04f      	b.n	80019ac <HAL_DMA_Start_IT+0xc4>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2224      	movs	r2, #36	@ 0x24
 8001910:	2101      	movs	r1, #1
 8001912:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2225      	movs	r2, #37	@ 0x25
 8001918:	5c9b      	ldrb	r3, [r3, r2]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b01      	cmp	r3, #1
 800191e:	d13a      	bne.n	8001996 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2225      	movs	r2, #37	@ 0x25
 8001924:	2102      	movs	r1, #2
 8001926:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	438a      	bics	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 f8e3 	bl	8001b10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	2b00      	cmp	r3, #0
 8001950:	d008      	beq.n	8001964 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	210e      	movs	r1, #14
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e00f      	b.n	8001984 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2104      	movs	r1, #4
 8001970:	438a      	bics	r2, r1
 8001972:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	210a      	movs	r1, #10
 8001980:	430a      	orrs	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2101      	movs	r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e007      	b.n	80019a6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2224      	movs	r2, #36	@ 0x24
 800199a:	2100      	movs	r1, #0
 800199c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800199e:	2317      	movs	r3, #23
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	2202      	movs	r2, #2
 80019a4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80019a6:	2317      	movs	r3, #23
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	781b      	ldrb	r3, [r3, #0]
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b006      	add	sp, #24
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d0:	221c      	movs	r2, #28
 80019d2:	4013      	ands	r3, r2
 80019d4:	2204      	movs	r2, #4
 80019d6:	409a      	lsls	r2, r3
 80019d8:	0013      	movs	r3, r2
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	4013      	ands	r3, r2
 80019de:	d026      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x7a>
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2204      	movs	r2, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d022      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2220      	movs	r2, #32
 80019f0:	4013      	ands	r3, r2
 80019f2:	d107      	bne.n	8001a04 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2104      	movs	r1, #4
 8001a00:	438a      	bics	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a08:	221c      	movs	r2, #28
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	2104      	movs	r1, #4
 8001a12:	4091      	lsls	r1, r2
 8001a14:	000a      	movs	r2, r1
 8001a16:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d100      	bne.n	8001a22 <HAL_DMA_IRQHandler+0x6e>
 8001a20:	e071      	b.n	8001b06 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	0010      	movs	r0, r2
 8001a2a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001a2c:	e06b      	b.n	8001b06 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	221c      	movs	r2, #28
 8001a34:	4013      	ands	r3, r2
 8001a36:	2202      	movs	r2, #2
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d02d      	beq.n	8001a9e <HAL_DMA_IRQHandler+0xea>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2202      	movs	r2, #2
 8001a46:	4013      	ands	r3, r2
 8001a48:	d029      	beq.n	8001a9e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2220      	movs	r2, #32
 8001a52:	4013      	ands	r3, r2
 8001a54:	d10b      	bne.n	8001a6e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	210a      	movs	r1, #10
 8001a62:	438a      	bics	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2225      	movs	r2, #37	@ 0x25
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a72:	221c      	movs	r2, #28
 8001a74:	401a      	ands	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	4091      	lsls	r1, r2
 8001a7e:	000a      	movs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2224      	movs	r2, #36	@ 0x24
 8001a86:	2100      	movs	r1, #0
 8001a88:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d039      	beq.n	8001b06 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	0010      	movs	r0, r2
 8001a9a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a9c:	e033      	b.n	8001b06 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	221c      	movs	r2, #28
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	0013      	movs	r3, r2
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d02a      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x154>
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d026      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	210e      	movs	r1, #14
 8001ac6:	438a      	bics	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	221c      	movs	r2, #28
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	4091      	lsls	r1, r2
 8001ada:	000a      	movs	r2, r1
 8001adc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2225      	movs	r2, #37	@ 0x25
 8001ae8:	2101      	movs	r1, #1
 8001aea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2224      	movs	r2, #36	@ 0x24
 8001af0:	2100      	movs	r1, #0
 8001af2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	0010      	movs	r0, r2
 8001b04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	46c0      	nop			@ (mov r8, r8)
}
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b004      	add	sp, #16
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	221c      	movs	r2, #28
 8001b24:	401a      	ands	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	4091      	lsls	r1, r2
 8001b2e:	000a      	movs	r2, r1
 8001b30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b10      	cmp	r3, #16
 8001b40:	d108      	bne.n	8001b54 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b52:	e007      	b.n	8001b64 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	60da      	str	r2, [r3, #12]
}
 8001b64:	46c0      	nop			@ (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b004      	add	sp, #16
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b82:	e14f      	b.n	8001e24 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4091      	lsls	r1, r2
 8001b8e:	000a      	movs	r2, r1
 8001b90:	4013      	ands	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d100      	bne.n	8001b9c <HAL_GPIO_Init+0x30>
 8001b9a:	e140      	b.n	8001e1e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d005      	beq.n	8001bb4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2203      	movs	r2, #3
 8001bae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d130      	bne.n	8001c16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	0013      	movs	r3, r2
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bea:	2201      	movs	r2, #1
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	2201      	movs	r2, #1
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	409a      	lsls	r2, r3
 8001c08:	0013      	movs	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d017      	beq.n	8001c52 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	0013      	movs	r3, r2
 8001c32:	43da      	mvns	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	409a      	lsls	r2, r3
 8001c44:	0013      	movs	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2203      	movs	r2, #3
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d123      	bne.n	8001ca6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	58d3      	ldr	r3, [r2, r3]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2207      	movs	r2, #7
 8001c70:	4013      	ands	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2107      	movs	r1, #7
 8001c8a:	400b      	ands	r3, r1
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	0092      	lsls	r2, r2, #2
 8001ca2:	6939      	ldr	r1, [r7, #16]
 8001ca4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	0013      	movs	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	23c0      	movs	r3, #192	@ 0xc0
 8001ce0:	029b      	lsls	r3, r3, #10
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d100      	bne.n	8001ce8 <HAL_GPIO_Init+0x17c>
 8001ce6:	e09a      	b.n	8001e1e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce8:	4b54      	ldr	r3, [pc, #336]	@ (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cec:	4b53      	ldr	r3, [pc, #332]	@ (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001cee:	2101      	movs	r1, #1
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf4:	4a52      	ldr	r2, [pc, #328]	@ (8001e40 <HAL_GPIO_Init+0x2d4>)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	589b      	ldr	r3, [r3, r2]
 8001d00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2203      	movs	r2, #3
 8001d06:	4013      	ands	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	0013      	movs	r3, r2
 8001d10:	43da      	mvns	r2, r3
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	23a0      	movs	r3, #160	@ 0xa0
 8001d1c:	05db      	lsls	r3, r3, #23
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d019      	beq.n	8001d56 <HAL_GPIO_Init+0x1ea>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a47      	ldr	r2, [pc, #284]	@ (8001e44 <HAL_GPIO_Init+0x2d8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x1e6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a46      	ldr	r2, [pc, #280]	@ (8001e48 <HAL_GPIO_Init+0x2dc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x1e2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a45      	ldr	r2, [pc, #276]	@ (8001e4c <HAL_GPIO_Init+0x2e0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x1de>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a44      	ldr	r2, [pc, #272]	@ (8001e50 <HAL_GPIO_Init+0x2e4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x1da>
 8001d42:	2305      	movs	r3, #5
 8001d44:	e008      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d46:	2306      	movs	r3, #6
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e004      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e002      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d56:	2300      	movs	r3, #0
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	2103      	movs	r1, #3
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	4093      	lsls	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d68:	4935      	ldr	r1, [pc, #212]	@ (8001e40 <HAL_GPIO_Init+0x2d4>)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d76:	4b37      	ldr	r3, [pc, #220]	@ (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	035b      	lsls	r3, r3, #13
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001da0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43da      	mvns	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	2380      	movs	r3, #128	@ 0x80
 8001db6:	039b      	lsls	r3, r3, #14
 8001db8:	4013      	ands	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dc4:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001dca:	4b22      	ldr	r3, [pc, #136]	@ (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	2380      	movs	r3, #128	@ 0x80
 8001de0:	029b      	lsls	r3, r3, #10
 8001de2:	4013      	ands	r3, r2
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dee:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df4:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	025b      	lsls	r3, r3, #9
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	@ (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	40da      	lsrs	r2, r3
 8001e2c:	1e13      	subs	r3, r2, #0
 8001e2e:	d000      	beq.n	8001e32 <HAL_GPIO_Init+0x2c6>
 8001e30:	e6a8      	b.n	8001b84 <HAL_GPIO_Init+0x18>
  }
}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	46c0      	nop			@ (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b006      	add	sp, #24
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010000 	.word	0x40010000
 8001e44:	50000400 	.word	0x50000400
 8001e48:	50000800 	.word	0x50000800
 8001e4c:	50000c00 	.word	0x50000c00
 8001e50:	50001c00 	.word	0x50001c00
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	0008      	movs	r0, r1
 8001e62:	0011      	movs	r1, r2
 8001e64:	1cbb      	adds	r3, r7, #2
 8001e66:	1c02      	adds	r2, r0, #0
 8001e68:	801a      	strh	r2, [r3, #0]
 8001e6a:	1c7b      	adds	r3, r7, #1
 8001e6c:	1c0a      	adds	r2, r1, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e70:	1c7b      	adds	r3, r7, #1
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e78:	1cbb      	adds	r3, r7, #2
 8001e7a:	881a      	ldrh	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e80:	e003      	b.n	8001e8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e82:	1cbb      	adds	r3, r7, #2
 8001e84:	881a      	ldrh	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e94:	b5b0      	push	{r4, r5, r7, lr}
 8001e96:	b08a      	sub	sp, #40	@ 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	f000 fbaf 	bl	8002606 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ea8:	4bcf      	ldr	r3, [pc, #828]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	220c      	movs	r2, #12
 8001eae:	4013      	ands	r3, r2
 8001eb0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb2:	4bcd      	ldr	r3, [pc, #820]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	2380      	movs	r3, #128	@ 0x80
 8001eb8:	025b      	lsls	r3, r3, #9
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d100      	bne.n	8001eca <HAL_RCC_OscConfig+0x36>
 8001ec8:	e07e      	b.n	8001fc8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d007      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d112      	bne.n	8001efc <HAL_RCC_OscConfig+0x68>
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	025b      	lsls	r3, r3, #9
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d10d      	bne.n	8001efc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	4bc1      	ldr	r3, [pc, #772]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	029b      	lsls	r3, r3, #10
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d100      	bne.n	8001eee <HAL_RCC_OscConfig+0x5a>
 8001eec:	e06b      	b.n	8001fc6 <HAL_RCC_OscConfig+0x132>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d167      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f000 fb85 	bl	8002606 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	2380      	movs	r3, #128	@ 0x80
 8001f02:	025b      	lsls	r3, r3, #9
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x84>
 8001f08:	4bb7      	ldr	r3, [pc, #732]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4bb6      	ldr	r3, [pc, #728]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001f0e:	2180      	movs	r1, #128	@ 0x80
 8001f10:	0249      	lsls	r1, r1, #9
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e027      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	23a0      	movs	r3, #160	@ 0xa0
 8001f1e:	02db      	lsls	r3, r3, #11
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d10e      	bne.n	8001f42 <HAL_RCC_OscConfig+0xae>
 8001f24:	4bb0      	ldr	r3, [pc, #704]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4baf      	ldr	r3, [pc, #700]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001f2a:	2180      	movs	r1, #128	@ 0x80
 8001f2c:	02c9      	lsls	r1, r1, #11
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	4bad      	ldr	r3, [pc, #692]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4bac      	ldr	r3, [pc, #688]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001f38:	2180      	movs	r1, #128	@ 0x80
 8001f3a:	0249      	lsls	r1, r1, #9
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	e012      	b.n	8001f68 <HAL_RCC_OscConfig+0xd4>
 8001f42:	4ba9      	ldr	r3, [pc, #676]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4ba8      	ldr	r3, [pc, #672]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001f48:	49a8      	ldr	r1, [pc, #672]	@ (80021ec <HAL_RCC_OscConfig+0x358>)
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	4ba6      	ldr	r3, [pc, #664]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	2380      	movs	r3, #128	@ 0x80
 8001f54:	025b      	lsls	r3, r3, #9
 8001f56:	4013      	ands	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4ba2      	ldr	r3, [pc, #648]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4ba1      	ldr	r3, [pc, #644]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001f62:	49a3      	ldr	r1, [pc, #652]	@ (80021f0 <HAL_RCC_OscConfig+0x35c>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d015      	beq.n	8001f9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fb5a 	bl	8001628 <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f78:	e009      	b.n	8001f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7a:	f7ff fb55 	bl	8001628 <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b64      	cmp	r3, #100	@ 0x64
 8001f86:	d902      	bls.n	8001f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	f000 fb3c 	bl	8002606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f8e:	4b96      	ldr	r3, [pc, #600]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	2380      	movs	r3, #128	@ 0x80
 8001f94:	029b      	lsls	r3, r3, #10
 8001f96:	4013      	ands	r3, r2
 8001f98:	d0ef      	beq.n	8001f7a <HAL_RCC_OscConfig+0xe6>
 8001f9a:	e015      	b.n	8001fc8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fb44 	bl	8001628 <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa6:	f7ff fb3f 	bl	8001628 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	@ 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e326      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fb8:	4b8b      	ldr	r3, [pc, #556]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	029b      	lsls	r3, r3, #10
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x112>
 8001fc4:	e000      	b.n	8001fc8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d100      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x140>
 8001fd2:	e08b      	b.n	80020ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d13e      	bne.n	8002064 <HAL_RCC_OscConfig+0x1d0>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d13b      	bne.n	8002064 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001fec:	4b7e      	ldr	r3, [pc, #504]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2204      	movs	r2, #4
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d004      	beq.n	8002000 <HAL_RCC_OscConfig+0x16c>
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e302      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b79      	ldr	r3, [pc, #484]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a7b      	ldr	r2, [pc, #492]	@ (80021f4 <HAL_RCC_OscConfig+0x360>)
 8002006:	4013      	ands	r3, r2
 8002008:	0019      	movs	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	021a      	lsls	r2, r3, #8
 8002010:	4b75      	ldr	r3, [pc, #468]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8002012:	430a      	orrs	r2, r1
 8002014:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002016:	4b74      	ldr	r3, [pc, #464]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2209      	movs	r2, #9
 800201c:	4393      	bics	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	4b71      	ldr	r3, [pc, #452]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002028:	f000 fc40 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800202c:	0001      	movs	r1, r0
 800202e:	4b6e      	ldr	r3, [pc, #440]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	220f      	movs	r2, #15
 8002036:	4013      	ands	r3, r2
 8002038:	4a6f      	ldr	r2, [pc, #444]	@ (80021f8 <HAL_RCC_OscConfig+0x364>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	000a      	movs	r2, r1
 800203e:	40da      	lsrs	r2, r3
 8002040:	4b6e      	ldr	r3, [pc, #440]	@ (80021fc <HAL_RCC_OscConfig+0x368>)
 8002042:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002044:	4b6e      	ldr	r3, [pc, #440]	@ (8002200 <HAL_RCC_OscConfig+0x36c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2513      	movs	r5, #19
 800204a:	197c      	adds	r4, r7, r5
 800204c:	0018      	movs	r0, r3
 800204e:	f7ff faa5 	bl	800159c <HAL_InitTick>
 8002052:	0003      	movs	r3, r0
 8002054:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002056:	197b      	adds	r3, r7, r5
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d046      	beq.n	80020ec <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800205e:	197b      	adds	r3, r7, r5
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	e2d0      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d027      	beq.n	80020ba <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800206a:	4b5f      	ldr	r3, [pc, #380]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2209      	movs	r2, #9
 8002070:	4393      	bics	r3, r2
 8002072:	0019      	movs	r1, r3
 8002074:	4b5c      	ldr	r3, [pc, #368]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff fad4 	bl	8001628 <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002086:	f7ff facf 	bl	8001628 <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e2b6      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002098:	4b53      	ldr	r3, [pc, #332]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2204      	movs	r2, #4
 800209e:	4013      	ands	r3, r2
 80020a0:	d0f1      	beq.n	8002086 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b51      	ldr	r3, [pc, #324]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4a53      	ldr	r2, [pc, #332]	@ (80021f4 <HAL_RCC_OscConfig+0x360>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	021a      	lsls	r2, r3, #8
 80020b2:	4b4d      	ldr	r3, [pc, #308]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	e018      	b.n	80020ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ba:	4b4b      	ldr	r3, [pc, #300]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b4a      	ldr	r3, [pc, #296]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 80020c0:	2101      	movs	r1, #1
 80020c2:	438a      	bics	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff faaf 	bl	8001628 <HAL_GetTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d0:	f7ff faaa 	bl	8001628 <HAL_GetTick>
 80020d4:	0002      	movs	r2, r0
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e291      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020e2:	4b41      	ldr	r3, [pc, #260]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2204      	movs	r2, #4
 80020e8:	4013      	ands	r3, r2
 80020ea:	d1f1      	bne.n	80020d0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2210      	movs	r2, #16
 80020f2:	4013      	ands	r3, r2
 80020f4:	d100      	bne.n	80020f8 <HAL_RCC_OscConfig+0x264>
 80020f6:	e0a1      	b.n	800223c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d140      	bne.n	8002180 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020fe:	4b3a      	ldr	r3, [pc, #232]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4013      	ands	r3, r2
 8002108:	d005      	beq.n	8002116 <HAL_RCC_OscConfig+0x282>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e277      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002116:	4b34      	ldr	r3, [pc, #208]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4a3a      	ldr	r2, [pc, #232]	@ (8002204 <HAL_RCC_OscConfig+0x370>)
 800211c:	4013      	ands	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002124:	4b30      	ldr	r3, [pc, #192]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800212a:	4b2f      	ldr	r3, [pc, #188]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	0a19      	lsrs	r1, r3, #8
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	061a      	lsls	r2, r3, #24
 8002138:	4b2b      	ldr	r3, [pc, #172]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	0b5b      	lsrs	r3, r3, #13
 8002144:	3301      	adds	r3, #1
 8002146:	2280      	movs	r2, #128	@ 0x80
 8002148:	0212      	lsls	r2, r2, #8
 800214a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800214c:	4b26      	ldr	r3, [pc, #152]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	210f      	movs	r1, #15
 8002154:	400b      	ands	r3, r1
 8002156:	4928      	ldr	r1, [pc, #160]	@ (80021f8 <HAL_RCC_OscConfig+0x364>)
 8002158:	5ccb      	ldrb	r3, [r1, r3]
 800215a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800215c:	4b27      	ldr	r3, [pc, #156]	@ (80021fc <HAL_RCC_OscConfig+0x368>)
 800215e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002160:	4b27      	ldr	r3, [pc, #156]	@ (8002200 <HAL_RCC_OscConfig+0x36c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2513      	movs	r5, #19
 8002166:	197c      	adds	r4, r7, r5
 8002168:	0018      	movs	r0, r3
 800216a:	f7ff fa17 	bl	800159c <HAL_InitTick>
 800216e:	0003      	movs	r3, r0
 8002170:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002172:	197b      	adds	r3, r7, r5
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d060      	beq.n	800223c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800217a:	197b      	adds	r3, r7, r5
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	e242      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d03f      	beq.n	8002208 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002188:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b16      	ldr	r3, [pc, #88]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 800218e:	2180      	movs	r1, #128	@ 0x80
 8002190:	0049      	lsls	r1, r1, #1
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002196:	f7ff fa47 	bl	8001628 <HAL_GetTick>
 800219a:	0003      	movs	r3, r0
 800219c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a0:	f7ff fa42 	bl	8001628 <HAL_GetTick>
 80021a4:	0002      	movs	r2, r0
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e229      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021b2:	4b0d      	ldr	r3, [pc, #52]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	2380      	movs	r3, #128	@ 0x80
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4013      	ands	r3, r2
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021be:	4b0a      	ldr	r3, [pc, #40]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4a10      	ldr	r2, [pc, #64]	@ (8002204 <HAL_RCC_OscConfig+0x370>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 80021ce:	430a      	orrs	r2, r1
 80021d0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021d2:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	0a19      	lsrs	r1, r3, #8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	061a      	lsls	r2, r3, #24
 80021e0:	4b01      	ldr	r3, [pc, #4]	@ (80021e8 <HAL_RCC_OscConfig+0x354>)
 80021e2:	430a      	orrs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	e029      	b.n	800223c <HAL_RCC_OscConfig+0x3a8>
 80021e8:	40021000 	.word	0x40021000
 80021ec:	fffeffff 	.word	0xfffeffff
 80021f0:	fffbffff 	.word	0xfffbffff
 80021f4:	ffffe0ff 	.word	0xffffe0ff
 80021f8:	08003f68 	.word	0x08003f68
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000004 	.word	0x20000004
 8002204:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002208:	4bbd      	ldr	r3, [pc, #756]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4bbc      	ldr	r3, [pc, #752]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 800220e:	49bd      	ldr	r1, [pc, #756]	@ (8002504 <HAL_RCC_OscConfig+0x670>)
 8002210:	400a      	ands	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7ff fa08 	bl	8001628 <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221e:	f7ff fa03 	bl	8001628 <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e1ea      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002230:	4bb3      	ldr	r3, [pc, #716]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2380      	movs	r3, #128	@ 0x80
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2208      	movs	r2, #8
 8002242:	4013      	ands	r3, r2
 8002244:	d036      	beq.n	80022b4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d019      	beq.n	8002282 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800224e:	4bac      	ldr	r3, [pc, #688]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002250:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002252:	4bab      	ldr	r3, [pc, #684]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002254:	2101      	movs	r1, #1
 8002256:	430a      	orrs	r2, r1
 8002258:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7ff f9e5 	bl	8001628 <HAL_GetTick>
 800225e:	0003      	movs	r3, r0
 8002260:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002264:	f7ff f9e0 	bl	8001628 <HAL_GetTick>
 8002268:	0002      	movs	r2, r0
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e1c7      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002276:	4ba2      	ldr	r3, [pc, #648]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800227a:	2202      	movs	r2, #2
 800227c:	4013      	ands	r3, r2
 800227e:	d0f1      	beq.n	8002264 <HAL_RCC_OscConfig+0x3d0>
 8002280:	e018      	b.n	80022b4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002282:	4b9f      	ldr	r3, [pc, #636]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002284:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002286:	4b9e      	ldr	r3, [pc, #632]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002288:	2101      	movs	r1, #1
 800228a:	438a      	bics	r2, r1
 800228c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7ff f9cb 	bl	8001628 <HAL_GetTick>
 8002292:	0003      	movs	r3, r0
 8002294:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002298:	f7ff f9c6 	bl	8001628 <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e1ad      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022aa:	4b95      	ldr	r3, [pc, #596]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 80022ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ae:	2202      	movs	r2, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d1f1      	bne.n	8002298 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2204      	movs	r2, #4
 80022ba:	4013      	ands	r3, r2
 80022bc:	d100      	bne.n	80022c0 <HAL_RCC_OscConfig+0x42c>
 80022be:	e0ae      	b.n	800241e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c0:	2027      	movs	r0, #39	@ 0x27
 80022c2:	183b      	adds	r3, r7, r0
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c8:	4b8d      	ldr	r3, [pc, #564]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 80022ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022cc:	2380      	movs	r3, #128	@ 0x80
 80022ce:	055b      	lsls	r3, r3, #21
 80022d0:	4013      	ands	r3, r2
 80022d2:	d109      	bne.n	80022e8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 80022d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022d8:	4b89      	ldr	r3, [pc, #548]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 80022da:	2180      	movs	r1, #128	@ 0x80
 80022dc:	0549      	lsls	r1, r1, #21
 80022de:	430a      	orrs	r2, r1
 80022e0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80022e2:	183b      	adds	r3, r7, r0
 80022e4:	2201      	movs	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	4b87      	ldr	r3, [pc, #540]	@ (8002508 <HAL_RCC_OscConfig+0x674>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	@ 0x80
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	d11a      	bne.n	800232a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f4:	4b84      	ldr	r3, [pc, #528]	@ (8002508 <HAL_RCC_OscConfig+0x674>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b83      	ldr	r3, [pc, #524]	@ (8002508 <HAL_RCC_OscConfig+0x674>)
 80022fa:	2180      	movs	r1, #128	@ 0x80
 80022fc:	0049      	lsls	r1, r1, #1
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7ff f991 	bl	8001628 <HAL_GetTick>
 8002306:	0003      	movs	r3, r0
 8002308:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230c:	f7ff f98c 	bl	8001628 <HAL_GetTick>
 8002310:	0002      	movs	r2, r0
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	@ 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e173      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231e:	4b7a      	ldr	r3, [pc, #488]	@ (8002508 <HAL_RCC_OscConfig+0x674>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	2380      	movs	r3, #128	@ 0x80
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4013      	ands	r3, r2
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	2380      	movs	r3, #128	@ 0x80
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	429a      	cmp	r2, r3
 8002334:	d107      	bne.n	8002346 <HAL_RCC_OscConfig+0x4b2>
 8002336:	4b72      	ldr	r3, [pc, #456]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002338:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800233a:	4b71      	ldr	r3, [pc, #452]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 800233c:	2180      	movs	r1, #128	@ 0x80
 800233e:	0049      	lsls	r1, r1, #1
 8002340:	430a      	orrs	r2, r1
 8002342:	651a      	str	r2, [r3, #80]	@ 0x50
 8002344:	e031      	b.n	80023aa <HAL_RCC_OscConfig+0x516>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0x4d4>
 800234e:	4b6c      	ldr	r3, [pc, #432]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002350:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002352:	4b6b      	ldr	r3, [pc, #428]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002354:	496b      	ldr	r1, [pc, #428]	@ (8002504 <HAL_RCC_OscConfig+0x670>)
 8002356:	400a      	ands	r2, r1
 8002358:	651a      	str	r2, [r3, #80]	@ 0x50
 800235a:	4b69      	ldr	r3, [pc, #420]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 800235c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800235e:	4b68      	ldr	r3, [pc, #416]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002360:	496a      	ldr	r1, [pc, #424]	@ (800250c <HAL_RCC_OscConfig+0x678>)
 8002362:	400a      	ands	r2, r1
 8002364:	651a      	str	r2, [r3, #80]	@ 0x50
 8002366:	e020      	b.n	80023aa <HAL_RCC_OscConfig+0x516>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	23a0      	movs	r3, #160	@ 0xa0
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	429a      	cmp	r2, r3
 8002372:	d10e      	bne.n	8002392 <HAL_RCC_OscConfig+0x4fe>
 8002374:	4b62      	ldr	r3, [pc, #392]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002376:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002378:	4b61      	ldr	r3, [pc, #388]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 800237a:	2180      	movs	r1, #128	@ 0x80
 800237c:	00c9      	lsls	r1, r1, #3
 800237e:	430a      	orrs	r2, r1
 8002380:	651a      	str	r2, [r3, #80]	@ 0x50
 8002382:	4b5f      	ldr	r3, [pc, #380]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002384:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002386:	4b5e      	ldr	r3, [pc, #376]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002388:	2180      	movs	r1, #128	@ 0x80
 800238a:	0049      	lsls	r1, r1, #1
 800238c:	430a      	orrs	r2, r1
 800238e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002390:	e00b      	b.n	80023aa <HAL_RCC_OscConfig+0x516>
 8002392:	4b5b      	ldr	r3, [pc, #364]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002394:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002396:	4b5a      	ldr	r3, [pc, #360]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002398:	495a      	ldr	r1, [pc, #360]	@ (8002504 <HAL_RCC_OscConfig+0x670>)
 800239a:	400a      	ands	r2, r1
 800239c:	651a      	str	r2, [r3, #80]	@ 0x50
 800239e:	4b58      	ldr	r3, [pc, #352]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 80023a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023a2:	4b57      	ldr	r3, [pc, #348]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 80023a4:	4959      	ldr	r1, [pc, #356]	@ (800250c <HAL_RCC_OscConfig+0x678>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d015      	beq.n	80023de <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7ff f939 	bl	8001628 <HAL_GetTick>
 80023b6:	0003      	movs	r3, r0
 80023b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023ba:	e009      	b.n	80023d0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023bc:	f7ff f934 	bl	8001628 <HAL_GetTick>
 80023c0:	0002      	movs	r2, r0
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	4a52      	ldr	r2, [pc, #328]	@ (8002510 <HAL_RCC_OscConfig+0x67c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e11a      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 80023d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4013      	ands	r3, r2
 80023da:	d0ef      	beq.n	80023bc <HAL_RCC_OscConfig+0x528>
 80023dc:	e014      	b.n	8002408 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023de:	f7ff f923 	bl	8001628 <HAL_GetTick>
 80023e2:	0003      	movs	r3, r0
 80023e4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023e6:	e009      	b.n	80023fc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e8:	f7ff f91e 	bl	8001628 <HAL_GetTick>
 80023ec:	0002      	movs	r2, r0
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	4a47      	ldr	r2, [pc, #284]	@ (8002510 <HAL_RCC_OscConfig+0x67c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e104      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023fc:	4b40      	ldr	r3, [pc, #256]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 80023fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4013      	ands	r3, r2
 8002406:	d1ef      	bne.n	80023e8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002408:	2327      	movs	r3, #39	@ 0x27
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d105      	bne.n	800241e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002412:	4b3b      	ldr	r3, [pc, #236]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002416:	4b3a      	ldr	r3, [pc, #232]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002418:	493e      	ldr	r1, [pc, #248]	@ (8002514 <HAL_RCC_OscConfig+0x680>)
 800241a:	400a      	ands	r2, r1
 800241c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2220      	movs	r2, #32
 8002424:	4013      	ands	r3, r2
 8002426:	d049      	beq.n	80024bc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d026      	beq.n	800247e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002430:	4b33      	ldr	r3, [pc, #204]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	4b32      	ldr	r3, [pc, #200]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002436:	2101      	movs	r1, #1
 8002438:	430a      	orrs	r2, r1
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	4b30      	ldr	r3, [pc, #192]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 800243e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002440:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002442:	2101      	movs	r1, #1
 8002444:	430a      	orrs	r2, r1
 8002446:	635a      	str	r2, [r3, #52]	@ 0x34
 8002448:	4b33      	ldr	r3, [pc, #204]	@ (8002518 <HAL_RCC_OscConfig+0x684>)
 800244a:	6a1a      	ldr	r2, [r3, #32]
 800244c:	4b32      	ldr	r3, [pc, #200]	@ (8002518 <HAL_RCC_OscConfig+0x684>)
 800244e:	2180      	movs	r1, #128	@ 0x80
 8002450:	0189      	lsls	r1, r1, #6
 8002452:	430a      	orrs	r2, r1
 8002454:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7ff f8e7 	bl	8001628 <HAL_GetTick>
 800245a:	0003      	movs	r3, r0
 800245c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002460:	f7ff f8e2 	bl	8001628 <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e0c9      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002472:	4b23      	ldr	r3, [pc, #140]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2202      	movs	r2, #2
 8002478:	4013      	ands	r3, r2
 800247a:	d0f1      	beq.n	8002460 <HAL_RCC_OscConfig+0x5cc>
 800247c:	e01e      	b.n	80024bc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800247e:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	4b1f      	ldr	r3, [pc, #124]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 8002484:	2101      	movs	r1, #1
 8002486:	438a      	bics	r2, r1
 8002488:	609a      	str	r2, [r3, #8]
 800248a:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <HAL_RCC_OscConfig+0x684>)
 800248c:	6a1a      	ldr	r2, [r3, #32]
 800248e:	4b22      	ldr	r3, [pc, #136]	@ (8002518 <HAL_RCC_OscConfig+0x684>)
 8002490:	4922      	ldr	r1, [pc, #136]	@ (800251c <HAL_RCC_OscConfig+0x688>)
 8002492:	400a      	ands	r2, r1
 8002494:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7ff f8c7 	bl	8001628 <HAL_GetTick>
 800249a:	0003      	movs	r3, r0
 800249c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a0:	f7ff f8c2 	bl	8001628 <HAL_GetTick>
 80024a4:	0002      	movs	r2, r0
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e0a9      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024b2:	4b13      	ldr	r3, [pc, #76]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	d1f1      	bne.n	80024a0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d100      	bne.n	80024c6 <HAL_RCC_OscConfig+0x632>
 80024c4:	e09e      	b.n	8002604 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	d100      	bne.n	80024ce <HAL_RCC_OscConfig+0x63a>
 80024cc:	e077      	b.n	80025be <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d158      	bne.n	8002588 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <HAL_RCC_OscConfig+0x66c>)
 80024dc:	4910      	ldr	r1, [pc, #64]	@ (8002520 <HAL_RCC_OscConfig+0x68c>)
 80024de:	400a      	ands	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7ff f8a1 	bl	8001628 <HAL_GetTick>
 80024e6:	0003      	movs	r3, r0
 80024e8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024ea:	e01b      	b.n	8002524 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ec:	f7ff f89c 	bl	8001628 <HAL_GetTick>
 80024f0:	0002      	movs	r2, r0
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d914      	bls.n	8002524 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e083      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	40021000 	.word	0x40021000
 8002504:	fffffeff 	.word	0xfffffeff
 8002508:	40007000 	.word	0x40007000
 800250c:	fffffbff 	.word	0xfffffbff
 8002510:	00001388 	.word	0x00001388
 8002514:	efffffff 	.word	0xefffffff
 8002518:	40010000 	.word	0x40010000
 800251c:	ffffdfff 	.word	0xffffdfff
 8002520:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002524:	4b3a      	ldr	r3, [pc, #232]	@ (8002610 <HAL_RCC_OscConfig+0x77c>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2380      	movs	r3, #128	@ 0x80
 800252a:	049b      	lsls	r3, r3, #18
 800252c:	4013      	ands	r3, r2
 800252e:	d1dd      	bne.n	80024ec <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002530:	4b37      	ldr	r3, [pc, #220]	@ (8002610 <HAL_RCC_OscConfig+0x77c>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a37      	ldr	r2, [pc, #220]	@ (8002614 <HAL_RCC_OscConfig+0x780>)
 8002536:	4013      	ands	r3, r2
 8002538:	0019      	movs	r1, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002548:	431a      	orrs	r2, r3
 800254a:	4b31      	ldr	r3, [pc, #196]	@ (8002610 <HAL_RCC_OscConfig+0x77c>)
 800254c:	430a      	orrs	r2, r1
 800254e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002550:	4b2f      	ldr	r3, [pc, #188]	@ (8002610 <HAL_RCC_OscConfig+0x77c>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b2e      	ldr	r3, [pc, #184]	@ (8002610 <HAL_RCC_OscConfig+0x77c>)
 8002556:	2180      	movs	r1, #128	@ 0x80
 8002558:	0449      	lsls	r1, r1, #17
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7ff f863 	bl	8001628 <HAL_GetTick>
 8002562:	0003      	movs	r3, r0
 8002564:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002568:	f7ff f85e 	bl	8001628 <HAL_GetTick>
 800256c:	0002      	movs	r2, r0
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e045      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800257a:	4b25      	ldr	r3, [pc, #148]	@ (8002610 <HAL_RCC_OscConfig+0x77c>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	049b      	lsls	r3, r3, #18
 8002582:	4013      	ands	r3, r2
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x6d4>
 8002586:	e03d      	b.n	8002604 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002588:	4b21      	ldr	r3, [pc, #132]	@ (8002610 <HAL_RCC_OscConfig+0x77c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b20      	ldr	r3, [pc, #128]	@ (8002610 <HAL_RCC_OscConfig+0x77c>)
 800258e:	4922      	ldr	r1, [pc, #136]	@ (8002618 <HAL_RCC_OscConfig+0x784>)
 8002590:	400a      	ands	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff f848 	bl	8001628 <HAL_GetTick>
 8002598:	0003      	movs	r3, r0
 800259a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259e:	f7ff f843 	bl	8001628 <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e02a      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025b0:	4b17      	ldr	r3, [pc, #92]	@ (8002610 <HAL_RCC_OscConfig+0x77c>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2380      	movs	r3, #128	@ 0x80
 80025b6:	049b      	lsls	r3, r3, #18
 80025b8:	4013      	ands	r3, r2
 80025ba:	d1f0      	bne.n	800259e <HAL_RCC_OscConfig+0x70a>
 80025bc:	e022      	b.n	8002604 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e01d      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025ca:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <HAL_RCC_OscConfig+0x77c>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	2380      	movs	r3, #128	@ 0x80
 80025d4:	025b      	lsls	r3, r3, #9
 80025d6:	401a      	ands	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025dc:	429a      	cmp	r2, r3
 80025de:	d10f      	bne.n	8002600 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	23f0      	movs	r3, #240	@ 0xf0
 80025e4:	039b      	lsls	r3, r3, #14
 80025e6:	401a      	ands	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	23c0      	movs	r3, #192	@ 0xc0
 80025f4:	041b      	lsls	r3, r3, #16
 80025f6:	401a      	ands	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	0018      	movs	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	b00a      	add	sp, #40	@ 0x28
 800260c:	bdb0      	pop	{r4, r5, r7, pc}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	40021000 	.word	0x40021000
 8002614:	ff02ffff 	.word	0xff02ffff
 8002618:	feffffff 	.word	0xfeffffff

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b5b0      	push	{r4, r5, r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e128      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b96      	ldr	r3, [pc, #600]	@ (800288c <HAL_RCC_ClockConfig+0x270>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2201      	movs	r2, #1
 8002636:	4013      	ands	r3, r2
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d91e      	bls.n	800267c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b93      	ldr	r3, [pc, #588]	@ (800288c <HAL_RCC_ClockConfig+0x270>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2201      	movs	r2, #1
 8002644:	4393      	bics	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	4b90      	ldr	r3, [pc, #576]	@ (800288c <HAL_RCC_ClockConfig+0x270>)
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002650:	f7fe ffea 	bl	8001628 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002658:	e009      	b.n	800266e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265a:	f7fe ffe5 	bl	8001628 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	4a8a      	ldr	r2, [pc, #552]	@ (8002890 <HAL_RCC_ClockConfig+0x274>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e109      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b87      	ldr	r3, [pc, #540]	@ (800288c <HAL_RCC_ClockConfig+0x270>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2201      	movs	r2, #1
 8002674:	4013      	ands	r3, r2
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d1ee      	bne.n	800265a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2202      	movs	r2, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002686:	4b83      	ldr	r3, [pc, #524]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	22f0      	movs	r2, #240	@ 0xf0
 800268c:	4393      	bics	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	4b7f      	ldr	r3, [pc, #508]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002696:	430a      	orrs	r2, r1
 8002698:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2201      	movs	r2, #1
 80026a0:	4013      	ands	r3, r2
 80026a2:	d100      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x8a>
 80026a4:	e089      	b.n	80027ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ae:	4b79      	ldr	r3, [pc, #484]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	2380      	movs	r3, #128	@ 0x80
 80026b4:	029b      	lsls	r3, r3, #10
 80026b6:	4013      	ands	r3, r2
 80026b8:	d120      	bne.n	80026fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e0e1      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026c6:	4b73      	ldr	r3, [pc, #460]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	2380      	movs	r3, #128	@ 0x80
 80026cc:	049b      	lsls	r3, r3, #18
 80026ce:	4013      	ands	r3, r2
 80026d0:	d114      	bne.n	80026fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0d5      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d106      	bne.n	80026ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026de:	4b6d      	ldr	r3, [pc, #436]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2204      	movs	r2, #4
 80026e4:	4013      	ands	r3, r2
 80026e6:	d109      	bne.n	80026fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0ca      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026ec:	4b69      	ldr	r3, [pc, #420]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4013      	ands	r3, r2
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0c2      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fc:	4b65      	ldr	r3, [pc, #404]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2203      	movs	r2, #3
 8002702:	4393      	bics	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4b62      	ldr	r3, [pc, #392]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 800270c:	430a      	orrs	r2, r1
 800270e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002710:	f7fe ff8a 	bl	8001628 <HAL_GetTick>
 8002714:	0003      	movs	r3, r0
 8002716:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d111      	bne.n	8002744 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002720:	e009      	b.n	8002736 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002722:	f7fe ff81 	bl	8001628 <HAL_GetTick>
 8002726:	0002      	movs	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	4a58      	ldr	r2, [pc, #352]	@ (8002890 <HAL_RCC_ClockConfig+0x274>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e0a5      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002736:	4b57      	ldr	r3, [pc, #348]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	220c      	movs	r2, #12
 800273c:	4013      	ands	r3, r2
 800273e:	2b08      	cmp	r3, #8
 8002740:	d1ef      	bne.n	8002722 <HAL_RCC_ClockConfig+0x106>
 8002742:	e03a      	b.n	80027ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d111      	bne.n	8002770 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274c:	e009      	b.n	8002762 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800274e:	f7fe ff6b 	bl	8001628 <HAL_GetTick>
 8002752:	0002      	movs	r2, r0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	4a4d      	ldr	r2, [pc, #308]	@ (8002890 <HAL_RCC_ClockConfig+0x274>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e08f      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002762:	4b4c      	ldr	r3, [pc, #304]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	220c      	movs	r2, #12
 8002768:	4013      	ands	r3, r2
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d1ef      	bne.n	800274e <HAL_RCC_ClockConfig+0x132>
 800276e:	e024      	b.n	80027ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d11b      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002778:	e009      	b.n	800278e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277a:	f7fe ff55 	bl	8001628 <HAL_GetTick>
 800277e:	0002      	movs	r2, r0
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	4a42      	ldr	r2, [pc, #264]	@ (8002890 <HAL_RCC_ClockConfig+0x274>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e079      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800278e:	4b41      	ldr	r3, [pc, #260]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	220c      	movs	r2, #12
 8002794:	4013      	ands	r3, r2
 8002796:	2b04      	cmp	r3, #4
 8002798:	d1ef      	bne.n	800277a <HAL_RCC_ClockConfig+0x15e>
 800279a:	e00e      	b.n	80027ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7fe ff44 	bl	8001628 <HAL_GetTick>
 80027a0:	0002      	movs	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	4a3a      	ldr	r2, [pc, #232]	@ (8002890 <HAL_RCC_ClockConfig+0x274>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e068      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027b0:	4b38      	ldr	r3, [pc, #224]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	220c      	movs	r2, #12
 80027b6:	4013      	ands	r3, r2
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ba:	4b34      	ldr	r3, [pc, #208]	@ (800288c <HAL_RCC_ClockConfig+0x270>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2201      	movs	r2, #1
 80027c0:	4013      	ands	r3, r2
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d21e      	bcs.n	8002806 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c8:	4b30      	ldr	r3, [pc, #192]	@ (800288c <HAL_RCC_ClockConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2201      	movs	r2, #1
 80027ce:	4393      	bics	r3, r2
 80027d0:	0019      	movs	r1, r3
 80027d2:	4b2e      	ldr	r3, [pc, #184]	@ (800288c <HAL_RCC_ClockConfig+0x270>)
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027da:	f7fe ff25 	bl	8001628 <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	e009      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e4:	f7fe ff20 	bl	8001628 <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	4a28      	ldr	r2, [pc, #160]	@ (8002890 <HAL_RCC_ClockConfig+0x274>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e044      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f8:	4b24      	ldr	r3, [pc, #144]	@ (800288c <HAL_RCC_ClockConfig+0x270>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2201      	movs	r2, #1
 80027fe:	4013      	ands	r3, r2
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d1ee      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2204      	movs	r2, #4
 800280c:	4013      	ands	r3, r2
 800280e:	d009      	beq.n	8002824 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002810:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a20      	ldr	r2, [pc, #128]	@ (8002898 <HAL_RCC_ClockConfig+0x27c>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	4b1d      	ldr	r3, [pc, #116]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002820:	430a      	orrs	r2, r1
 8002822:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2208      	movs	r2, #8
 800282a:	4013      	ands	r3, r2
 800282c:	d00a      	beq.n	8002844 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800282e:	4b19      	ldr	r3, [pc, #100]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4a1a      	ldr	r2, [pc, #104]	@ (800289c <HAL_RCC_ClockConfig+0x280>)
 8002834:	4013      	ands	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	00da      	lsls	r2, r3, #3
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 8002840:	430a      	orrs	r2, r1
 8002842:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002844:	f000 f832 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8002848:	0001      	movs	r1, r0
 800284a:	4b12      	ldr	r3, [pc, #72]	@ (8002894 <HAL_RCC_ClockConfig+0x278>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	220f      	movs	r2, #15
 8002852:	4013      	ands	r3, r2
 8002854:	4a12      	ldr	r2, [pc, #72]	@ (80028a0 <HAL_RCC_ClockConfig+0x284>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	000a      	movs	r2, r1
 800285a:	40da      	lsrs	r2, r3
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <HAL_RCC_ClockConfig+0x288>)
 800285e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002860:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <HAL_RCC_ClockConfig+0x28c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	250b      	movs	r5, #11
 8002866:	197c      	adds	r4, r7, r5
 8002868:	0018      	movs	r0, r3
 800286a:	f7fe fe97 	bl	800159c <HAL_InitTick>
 800286e:	0003      	movs	r3, r0
 8002870:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002872:	197b      	adds	r3, r7, r5
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800287a:	197b      	adds	r3, r7, r5
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	e000      	b.n	8002882 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	0018      	movs	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	b004      	add	sp, #16
 8002888:	bdb0      	pop	{r4, r5, r7, pc}
 800288a:	46c0      	nop			@ (mov r8, r8)
 800288c:	40022000 	.word	0x40022000
 8002890:	00001388 	.word	0x00001388
 8002894:	40021000 	.word	0x40021000
 8002898:	fffff8ff 	.word	0xfffff8ff
 800289c:	ffffc7ff 	.word	0xffffc7ff
 80028a0:	08003f68 	.word	0x08003f68
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20000004 	.word	0x20000004

080028ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80028b2:	4b3c      	ldr	r3, [pc, #240]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	220c      	movs	r2, #12
 80028bc:	4013      	ands	r3, r2
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d013      	beq.n	80028ea <HAL_RCC_GetSysClockFreq+0x3e>
 80028c2:	d85c      	bhi.n	800297e <HAL_RCC_GetSysClockFreq+0xd2>
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d002      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x22>
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d00b      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x38>
 80028cc:	e057      	b.n	800297e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80028ce:	4b35      	ldr	r3, [pc, #212]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2210      	movs	r2, #16
 80028d4:	4013      	ands	r3, r2
 80028d6:	d002      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80028d8:	4b33      	ldr	r3, [pc, #204]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028da:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80028dc:	e05d      	b.n	800299a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80028de:	4b33      	ldr	r3, [pc, #204]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x100>)
 80028e0:	613b      	str	r3, [r7, #16]
      break;
 80028e2:	e05a      	b.n	800299a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028e4:	4b32      	ldr	r3, [pc, #200]	@ (80029b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80028e6:	613b      	str	r3, [r7, #16]
      break;
 80028e8:	e057      	b.n	800299a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	0c9b      	lsrs	r3, r3, #18
 80028ee:	220f      	movs	r2, #15
 80028f0:	4013      	ands	r3, r2
 80028f2:	4a30      	ldr	r2, [pc, #192]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
 80028f6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	0d9b      	lsrs	r3, r3, #22
 80028fc:	2203      	movs	r2, #3
 80028fe:	4013      	ands	r3, r2
 8002900:	3301      	adds	r3, #1
 8002902:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002904:	4b27      	ldr	r3, [pc, #156]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	025b      	lsls	r3, r3, #9
 800290c:	4013      	ands	r3, r2
 800290e:	d00f      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	000a      	movs	r2, r1
 8002914:	0152      	lsls	r2, r2, #5
 8002916:	1a52      	subs	r2, r2, r1
 8002918:	0193      	lsls	r3, r2, #6
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	185b      	adds	r3, r3, r1
 8002920:	025b      	lsls	r3, r3, #9
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	0018      	movs	r0, r3
 8002926:	f7fd fbef 	bl	8000108 <__udivsi3>
 800292a:	0003      	movs	r3, r0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e023      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002930:	4b1c      	ldr	r3, [pc, #112]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2210      	movs	r2, #16
 8002936:	4013      	ands	r3, r2
 8002938:	d00f      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	000a      	movs	r2, r1
 800293e:	0152      	lsls	r2, r2, #5
 8002940:	1a52      	subs	r2, r2, r1
 8002942:	0193      	lsls	r3, r2, #6
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	185b      	adds	r3, r3, r1
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	0018      	movs	r0, r3
 8002950:	f7fd fbda 	bl	8000108 <__udivsi3>
 8002954:	0003      	movs	r3, r0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e00e      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	000a      	movs	r2, r1
 800295e:	0152      	lsls	r2, r2, #5
 8002960:	1a52      	subs	r2, r2, r1
 8002962:	0193      	lsls	r3, r2, #6
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	185b      	adds	r3, r3, r1
 800296a:	029b      	lsls	r3, r3, #10
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	0018      	movs	r0, r3
 8002970:	f7fd fbca 	bl	8000108 <__udivsi3>
 8002974:	0003      	movs	r3, r0
 8002976:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	613b      	str	r3, [r7, #16]
      break;
 800297c:	e00d      	b.n	800299a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800297e:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	0b5b      	lsrs	r3, r3, #13
 8002984:	2207      	movs	r2, #7
 8002986:	4013      	ands	r3, r2
 8002988:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	2280      	movs	r2, #128	@ 0x80
 8002990:	0212      	lsls	r2, r2, #8
 8002992:	409a      	lsls	r2, r3
 8002994:	0013      	movs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
      break;
 8002998:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800299a:	693b      	ldr	r3, [r7, #16]
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b006      	add	sp, #24
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000
 80029a8:	003d0900 	.word	0x003d0900
 80029ac:	00f42400 	.word	0x00f42400
 80029b0:	007a1200 	.word	0x007a1200
 80029b4:	08003f78 	.word	0x08003f78

080029b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e032      	b.n	8002a30 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2239      	movs	r2, #57	@ 0x39
 80029ce:	5c9b      	ldrb	r3, [r3, r2]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d107      	bne.n	80029e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2238      	movs	r2, #56	@ 0x38
 80029da:	2100      	movs	r1, #0
 80029dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7fe fc67 	bl	80012b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2239      	movs	r2, #57	@ 0x39
 80029ea:	2102      	movs	r1, #2
 80029ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3304      	adds	r3, #4
 80029f6:	0019      	movs	r1, r3
 80029f8:	0010      	movs	r0, r2
 80029fa:	f000 fecb 	bl	8003794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	223e      	movs	r2, #62	@ 0x3e
 8002a02:	2101      	movs	r1, #1
 8002a04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	223a      	movs	r2, #58	@ 0x3a
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	223b      	movs	r2, #59	@ 0x3b
 8002a12:	2101      	movs	r1, #1
 8002a14:	5499      	strb	r1, [r3, r2]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	223c      	movs	r2, #60	@ 0x3c
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	5499      	strb	r1, [r3, r2]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	223d      	movs	r2, #61	@ 0x3d
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2239      	movs	r2, #57	@ 0x39
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b002      	add	sp, #8
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e032      	b.n	8002ab0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2239      	movs	r2, #57	@ 0x39
 8002a4e:	5c9b      	ldrb	r3, [r3, r2]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d107      	bne.n	8002a66 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2238      	movs	r2, #56	@ 0x38
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 f829 	bl	8002ab8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2239      	movs	r2, #57	@ 0x39
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3304      	adds	r3, #4
 8002a76:	0019      	movs	r1, r3
 8002a78:	0010      	movs	r0, r2
 8002a7a:	f000 fe8b 	bl	8003794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	223e      	movs	r2, #62	@ 0x3e
 8002a82:	2101      	movs	r1, #1
 8002a84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	223a      	movs	r2, #58	@ 0x3a
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	5499      	strb	r1, [r3, r2]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	223b      	movs	r2, #59	@ 0x3b
 8002a92:	2101      	movs	r1, #1
 8002a94:	5499      	strb	r1, [r3, r2]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	223c      	movs	r2, #60	@ 0x3c
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	223d      	movs	r2, #61	@ 0x3d
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2239      	movs	r2, #57	@ 0x39
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ac0:	46c0      	nop			@ (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d108      	bne.n	8002aea <HAL_TIM_PWM_Start+0x22>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	223a      	movs	r2, #58	@ 0x3a
 8002adc:	5c9b      	ldrb	r3, [r3, r2]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	1e5a      	subs	r2, r3, #1
 8002ae4:	4193      	sbcs	r3, r2
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	e01f      	b.n	8002b2a <HAL_TIM_PWM_Start+0x62>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d108      	bne.n	8002b02 <HAL_TIM_PWM_Start+0x3a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	223b      	movs	r2, #59	@ 0x3b
 8002af4:	5c9b      	ldrb	r3, [r3, r2]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	1e5a      	subs	r2, r3, #1
 8002afc:	4193      	sbcs	r3, r2
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	e013      	b.n	8002b2a <HAL_TIM_PWM_Start+0x62>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d108      	bne.n	8002b1a <HAL_TIM_PWM_Start+0x52>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	223c      	movs	r2, #60	@ 0x3c
 8002b0c:	5c9b      	ldrb	r3, [r3, r2]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	1e5a      	subs	r2, r3, #1
 8002b14:	4193      	sbcs	r3, r2
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	e007      	b.n	8002b2a <HAL_TIM_PWM_Start+0x62>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	223d      	movs	r2, #61	@ 0x3d
 8002b1e:	5c9b      	ldrb	r3, [r3, r2]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	1e5a      	subs	r2, r3, #1
 8002b26:	4193      	sbcs	r3, r2
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e04d      	b.n	8002bce <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d104      	bne.n	8002b42 <HAL_TIM_PWM_Start+0x7a>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	223a      	movs	r2, #58	@ 0x3a
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	5499      	strb	r1, [r3, r2]
 8002b40:	e013      	b.n	8002b6a <HAL_TIM_PWM_Start+0xa2>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d104      	bne.n	8002b52 <HAL_TIM_PWM_Start+0x8a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	223b      	movs	r2, #59	@ 0x3b
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	5499      	strb	r1, [r3, r2]
 8002b50:	e00b      	b.n	8002b6a <HAL_TIM_PWM_Start+0xa2>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d104      	bne.n	8002b62 <HAL_TIM_PWM_Start+0x9a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	223c      	movs	r2, #60	@ 0x3c
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	5499      	strb	r1, [r3, r2]
 8002b60:	e003      	b.n	8002b6a <HAL_TIM_PWM_Start+0xa2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	223d      	movs	r2, #61	@ 0x3d
 8002b66:	2102      	movs	r1, #2
 8002b68:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6839      	ldr	r1, [r7, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	0018      	movs	r0, r3
 8002b74:	f001 f924 	bl	8003dc0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	@ 0x80
 8002b7e:	05db      	lsls	r3, r3, #23
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d009      	beq.n	8002b98 <HAL_TIM_PWM_Start+0xd0>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a13      	ldr	r2, [pc, #76]	@ (8002bd8 <HAL_TIM_PWM_Start+0x110>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_TIM_PWM_Start+0xd0>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a12      	ldr	r2, [pc, #72]	@ (8002bdc <HAL_TIM_PWM_Start+0x114>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d111      	bne.n	8002bbc <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2207      	movs	r2, #7
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d010      	beq.n	8002bcc <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bba:	e007      	b.n	8002bcc <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b004      	add	sp, #16
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	40010800 	.word	0x40010800
 8002bdc:	40011400 	.word	0x40011400

08002be0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e032      	b.n	8002c58 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2239      	movs	r2, #57	@ 0x39
 8002bf6:	5c9b      	ldrb	r3, [r3, r2]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d107      	bne.n	8002c0e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2238      	movs	r2, #56	@ 0x38
 8002c02:	2100      	movs	r1, #0
 8002c04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 f829 	bl	8002c60 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2239      	movs	r2, #57	@ 0x39
 8002c12:	2102      	movs	r1, #2
 8002c14:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	0019      	movs	r1, r3
 8002c20:	0010      	movs	r0, r2
 8002c22:	f000 fdb7 	bl	8003794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	223e      	movs	r2, #62	@ 0x3e
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	223a      	movs	r2, #58	@ 0x3a
 8002c32:	2101      	movs	r1, #1
 8002c34:	5499      	strb	r1, [r3, r2]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	223b      	movs	r2, #59	@ 0x3b
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	5499      	strb	r1, [r3, r2]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	223c      	movs	r2, #60	@ 0x3c
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	223d      	movs	r2, #61	@ 0x3d
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2239      	movs	r2, #57	@ 0x39
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002c68:	46c0      	nop			@ (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	001a      	movs	r2, r3
 8002c7e:	1cbb      	adds	r3, r7, #2
 8002c80:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	2317      	movs	r3, #23
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_IC_Start_DMA+0x2a>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	223a      	movs	r2, #58	@ 0x3a
 8002c94:	5c9b      	ldrb	r3, [r3, r2]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	e013      	b.n	8002cc2 <HAL_TIM_IC_Start_DMA+0x52>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d104      	bne.n	8002caa <HAL_TIM_IC_Start_DMA+0x3a>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	223b      	movs	r2, #59	@ 0x3b
 8002ca4:	5c9b      	ldrb	r3, [r3, r2]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	e00b      	b.n	8002cc2 <HAL_TIM_IC_Start_DMA+0x52>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d104      	bne.n	8002cba <HAL_TIM_IC_Start_DMA+0x4a>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	223c      	movs	r2, #60	@ 0x3c
 8002cb4:	5c9b      	ldrb	r3, [r3, r2]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	e003      	b.n	8002cc2 <HAL_TIM_IC_Start_DMA+0x52>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	223d      	movs	r2, #61	@ 0x3d
 8002cbe:	5c9b      	ldrb	r3, [r3, r2]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2116      	movs	r1, #22
 8002cc4:	187a      	adds	r2, r7, r1
 8002cc6:	7013      	strb	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if (channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d101      	bne.n	8002cd4 <HAL_TIM_IC_Start_DMA+0x64>
  {
    return HAL_BUSY;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e10f      	b.n	8002ef4 <HAL_TIM_IC_Start_DMA+0x284>
  }
  if (channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8002cd4:	2316      	movs	r3, #22
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d125      	bne.n	8002d2a <HAL_TIM_IC_Start_DMA+0xba>
  {
    if ((pData == NULL) || (Length == 0U))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_TIM_IC_Start_DMA+0x7c>
 8002ce4:	1cbb      	adds	r3, r7, #2
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_TIM_IC_Start_DMA+0x80>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e101      	b.n	8002ef4 <HAL_TIM_IC_Start_DMA+0x284>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <HAL_TIM_IC_Start_DMA+0x90>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	223a      	movs	r2, #58	@ 0x3a
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	5499      	strb	r1, [r3, r2]
 8002cfe:	e016      	b.n	8002d2e <HAL_TIM_IC_Start_DMA+0xbe>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d104      	bne.n	8002d10 <HAL_TIM_IC_Start_DMA+0xa0>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	223b      	movs	r2, #59	@ 0x3b
 8002d0a:	2102      	movs	r1, #2
 8002d0c:	5499      	strb	r1, [r3, r2]
 8002d0e:	e00e      	b.n	8002d2e <HAL_TIM_IC_Start_DMA+0xbe>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d104      	bne.n	8002d20 <HAL_TIM_IC_Start_DMA+0xb0>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	223c      	movs	r2, #60	@ 0x3c
 8002d1a:	2102      	movs	r1, #2
 8002d1c:	5499      	strb	r1, [r3, r2]
 8002d1e:	e006      	b.n	8002d2e <HAL_TIM_IC_Start_DMA+0xbe>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	223d      	movs	r2, #61	@ 0x3d
 8002d24:	2102      	movs	r1, #2
 8002d26:	5499      	strb	r1, [r3, r2]
 8002d28:	e001      	b.n	8002d2e <HAL_TIM_IC_Start_DMA+0xbe>
    }
  }
  else
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e0e2      	b.n	8002ef4 <HAL_TIM_IC_Start_DMA+0x284>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	2201      	movs	r2, #1
 8002d36:	0018      	movs	r0, r3
 8002d38:	f001 f842 	bl	8003dc0 <TIM_CCxChannelCmd>

  switch (Channel)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d100      	bne.n	8002d44 <HAL_TIM_IC_Start_DMA+0xd4>
 8002d42:	e080      	b.n	8002e46 <HAL_TIM_IC_Start_DMA+0x1d6>
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d900      	bls.n	8002d4c <HAL_TIM_IC_Start_DMA+0xdc>
 8002d4a:	e0a1      	b.n	8002e90 <HAL_TIM_IC_Start_DMA+0x220>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d054      	beq.n	8002dfc <HAL_TIM_IC_Start_DMA+0x18c>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d900      	bls.n	8002d5a <HAL_TIM_IC_Start_DMA+0xea>
 8002d58:	e09a      	b.n	8002e90 <HAL_TIM_IC_Start_DMA+0x220>
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_TIM_IC_Start_DMA+0xf8>
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d025      	beq.n	8002db2 <HAL_TIM_IC_Start_DMA+0x142>
 8002d66:	e093      	b.n	8002e90 <HAL_TIM_IC_Start_DMA+0x220>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4a63      	ldr	r2, [pc, #396]	@ (8002efc <HAL_TIM_IC_Start_DMA+0x28c>)
 8002d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4a62      	ldr	r2, [pc, #392]	@ (8002f00 <HAL_TIM_IC_Start_DMA+0x290>)
 8002d76:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4a61      	ldr	r2, [pc, #388]	@ (8002f04 <HAL_TIM_IC_Start_DMA+0x294>)
 8002d7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a18      	ldr	r0, [r3, #32]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3334      	adds	r3, #52	@ 0x34
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	1cbb      	adds	r3, r7, #2
 8002d90:	881b      	ldrh	r3, [r3, #0]
 8002d92:	f7fe fda9 	bl	80018e8 <HAL_DMA_Start_IT>
 8002d96:	1e03      	subs	r3, r0, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_TIM_IC_Start_DMA+0x12e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0aa      	b.n	8002ef4 <HAL_TIM_IC_Start_DMA+0x284>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2180      	movs	r1, #128	@ 0x80
 8002daa:	0089      	lsls	r1, r1, #2
 8002dac:	430a      	orrs	r2, r1
 8002dae:	60da      	str	r2, [r3, #12]
      break;
 8002db0:	e073      	b.n	8002e9a <HAL_TIM_IC_Start_DMA+0x22a>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	4a51      	ldr	r2, [pc, #324]	@ (8002efc <HAL_TIM_IC_Start_DMA+0x28c>)
 8002db8:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbe:	4a50      	ldr	r2, [pc, #320]	@ (8002f00 <HAL_TIM_IC_Start_DMA+0x290>)
 8002dc0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	4a4f      	ldr	r2, [pc, #316]	@ (8002f04 <HAL_TIM_IC_Start_DMA+0x294>)
 8002dc8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3338      	adds	r3, #56	@ 0x38
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	1cbb      	adds	r3, r7, #2
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	f7fe fd84 	bl	80018e8 <HAL_DMA_Start_IT>
 8002de0:	1e03      	subs	r3, r0, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_TIM_IC_Start_DMA+0x178>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e085      	b.n	8002ef4 <HAL_TIM_IC_Start_DMA+0x284>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2180      	movs	r1, #128	@ 0x80
 8002df4:	00c9      	lsls	r1, r1, #3
 8002df6:	430a      	orrs	r2, r1
 8002df8:	60da      	str	r2, [r3, #12]
      break;
 8002dfa:	e04e      	b.n	8002e9a <HAL_TIM_IC_Start_DMA+0x22a>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	4a3e      	ldr	r2, [pc, #248]	@ (8002efc <HAL_TIM_IC_Start_DMA+0x28c>)
 8002e02:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	4a3d      	ldr	r2, [pc, #244]	@ (8002f00 <HAL_TIM_IC_Start_DMA+0x290>)
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e10:	4a3c      	ldr	r2, [pc, #240]	@ (8002f04 <HAL_TIM_IC_Start_DMA+0x294>)
 8002e12:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	333c      	adds	r3, #60	@ 0x3c
 8002e1e:	0019      	movs	r1, r3
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	1cbb      	adds	r3, r7, #2
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	f7fe fd5f 	bl	80018e8 <HAL_DMA_Start_IT>
 8002e2a:	1e03      	subs	r3, r0, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_TIM_IC_Start_DMA+0x1c2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e060      	b.n	8002ef4 <HAL_TIM_IC_Start_DMA+0x284>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2180      	movs	r1, #128	@ 0x80
 8002e3e:	0109      	lsls	r1, r1, #4
 8002e40:	430a      	orrs	r2, r1
 8002e42:	60da      	str	r2, [r3, #12]
      break;
 8002e44:	e029      	b.n	8002e9a <HAL_TIM_IC_Start_DMA+0x22a>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8002efc <HAL_TIM_IC_Start_DMA+0x28c>)
 8002e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e52:	4a2b      	ldr	r2, [pc, #172]	@ (8002f00 <HAL_TIM_IC_Start_DMA+0x290>)
 8002e54:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5a:	4a2a      	ldr	r2, [pc, #168]	@ (8002f04 <HAL_TIM_IC_Start_DMA+0x294>)
 8002e5c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3340      	adds	r3, #64	@ 0x40
 8002e68:	0019      	movs	r1, r3
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	1cbb      	adds	r3, r7, #2
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	f7fe fd3a 	bl	80018e8 <HAL_DMA_Start_IT>
 8002e74:	1e03      	subs	r3, r0, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_TIM_IC_Start_DMA+0x20c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e03b      	b.n	8002ef4 <HAL_TIM_IC_Start_DMA+0x284>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2180      	movs	r1, #128	@ 0x80
 8002e88:	0149      	lsls	r1, r1, #5
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	60da      	str	r2, [r3, #12]
      break;
 8002e8e:	e004      	b.n	8002e9a <HAL_TIM_IC_Start_DMA+0x22a>
    }

    default:
      status = HAL_ERROR;
 8002e90:	2317      	movs	r3, #23
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
      break;
 8002e98:	46c0      	nop			@ (mov r8, r8)
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	2380      	movs	r3, #128	@ 0x80
 8002ea0:	05db      	lsls	r3, r3, #23
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d009      	beq.n	8002eba <HAL_TIM_IC_Start_DMA+0x24a>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a17      	ldr	r2, [pc, #92]	@ (8002f08 <HAL_TIM_IC_Start_DMA+0x298>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d004      	beq.n	8002eba <HAL_TIM_IC_Start_DMA+0x24a>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a15      	ldr	r2, [pc, #84]	@ (8002f0c <HAL_TIM_IC_Start_DMA+0x29c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d111      	bne.n	8002ede <HAL_TIM_IC_Start_DMA+0x26e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b06      	cmp	r3, #6
 8002eca:	d010      	beq.n	8002eee <HAL_TIM_IC_Start_DMA+0x27e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002edc:	e007      	b.n	8002eee <HAL_TIM_IC_Start_DMA+0x27e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2101      	movs	r1, #1
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002eee:	2317      	movs	r3, #23
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	781b      	ldrb	r3, [r3, #0]
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b006      	add	sp, #24
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	08003681 	.word	0x08003681
 8002f00:	0800372b 	.word	0x0800372b
 8002f04:	080035ed 	.word	0x080035ed
 8002f08:	40010800 	.word	0x40010800
 8002f0c:	40011400 	.word	0x40011400

08002f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d021      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2202      	movs	r2, #2
 8002f34:	4013      	ands	r3, r2
 8002f36:	d01d      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	4252      	negs	r2, r2
 8002f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	2203      	movs	r2, #3
 8002f50:	4013      	ands	r3, r2
 8002f52:	d004      	beq.n	8002f5e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7fd fe58 	bl	8000c0c <HAL_TIM_IC_CaptureCallback>
 8002f5c:	e007      	b.n	8002f6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	0018      	movs	r0, r3
 8002f62:	f000 fb1b 	bl	800359c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f000 fb27 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2204      	movs	r2, #4
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d022      	beq.n	8002fc2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2204      	movs	r2, #4
 8002f80:	4013      	ands	r3, r2
 8002f82:	d01e      	beq.n	8002fc2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2205      	movs	r2, #5
 8002f8a:	4252      	negs	r2, r2
 8002f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	23c0      	movs	r3, #192	@ 0xc0
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7fd fe31 	bl	8000c0c <HAL_TIM_IC_CaptureCallback>
 8002faa:	e007      	b.n	8002fbc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 faf4 	bl	800359c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f000 fb00 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d021      	beq.n	800300e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2208      	movs	r2, #8
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d01d      	beq.n	800300e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2209      	movs	r2, #9
 8002fd8:	4252      	negs	r2, r2
 8002fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2204      	movs	r2, #4
 8002fe0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	4013      	ands	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7fd fe0b 	bl	8000c0c <HAL_TIM_IC_CaptureCallback>
 8002ff6:	e007      	b.n	8003008 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 face 	bl	800359c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0018      	movs	r0, r3
 8003004:	f000 fada 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2210      	movs	r2, #16
 8003012:	4013      	ands	r3, r2
 8003014:	d022      	beq.n	800305c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2210      	movs	r2, #16
 800301a:	4013      	ands	r3, r2
 800301c:	d01e      	beq.n	800305c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2211      	movs	r2, #17
 8003024:	4252      	negs	r2, r2
 8003026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2208      	movs	r2, #8
 800302c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	23c0      	movs	r3, #192	@ 0xc0
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4013      	ands	r3, r2
 800303a:	d004      	beq.n	8003046 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	0018      	movs	r0, r3
 8003040:	f7fd fde4 	bl	8000c0c <HAL_TIM_IC_CaptureCallback>
 8003044:	e007      	b.n	8003056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	0018      	movs	r0, r3
 800304a:	f000 faa7 	bl	800359c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	0018      	movs	r0, r3
 8003052:	f000 fab3 	bl	80035bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2201      	movs	r2, #1
 8003060:	4013      	ands	r3, r2
 8003062:	d00c      	beq.n	800307e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	4013      	ands	r3, r2
 800306a:	d008      	beq.n	800307e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2202      	movs	r2, #2
 8003072:	4252      	negs	r2, r2
 8003074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0018      	movs	r0, r3
 800307a:	f000 fa87 	bl	800358c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2240      	movs	r2, #64	@ 0x40
 8003082:	4013      	ands	r3, r2
 8003084:	d00c      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2240      	movs	r2, #64	@ 0x40
 800308a:	4013      	ands	r3, r2
 800308c:	d008      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2241      	movs	r2, #65	@ 0x41
 8003094:	4252      	negs	r2, r2
 8003096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	0018      	movs	r0, r3
 800309c:	f000 fa96 	bl	80035cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030a0:	46c0      	nop			@ (mov r8, r8)
 80030a2:	46bd      	mov	sp, r7
 80030a4:	b004      	add	sp, #16
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b4:	2317      	movs	r3, #23
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2238      	movs	r2, #56	@ 0x38
 80030c0:	5c9b      	ldrb	r3, [r3, r2]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_TIM_IC_ConfigChannel+0x22>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e08c      	b.n	80031e4 <HAL_TIM_IC_ConfigChannel+0x13c>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2238      	movs	r2, #56	@ 0x38
 80030ce:	2101      	movs	r1, #1
 80030d0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d11b      	bne.n	8003110 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80030e8:	f000 fcb2 	bl	8003a50 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	210c      	movs	r1, #12
 80030f8:	438a      	bics	r2, r1
 80030fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6999      	ldr	r1, [r3, #24]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	619a      	str	r2, [r3, #24]
 800310e:	e062      	b.n	80031d6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b04      	cmp	r3, #4
 8003114:	d11c      	bne.n	8003150 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003126:	f000 fd17 	bl	8003b58 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	492d      	ldr	r1, [pc, #180]	@ (80031ec <HAL_TIM_IC_ConfigChannel+0x144>)
 8003136:	400a      	ands	r2, r1
 8003138:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6999      	ldr	r1, [r3, #24]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	021a      	lsls	r2, r3, #8
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	619a      	str	r2, [r3, #24]
 800314e:	e042      	b.n	80031d6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b08      	cmp	r3, #8
 8003154:	d11b      	bne.n	800318e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003166:	f000 fd6b 	bl	8003c40 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	210c      	movs	r1, #12
 8003176:	438a      	bics	r2, r1
 8003178:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69d9      	ldr	r1, [r3, #28]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	61da      	str	r2, [r3, #28]
 800318c:	e023      	b.n	80031d6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b0c      	cmp	r3, #12
 8003192:	d11c      	bne.n	80031ce <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80031a4:	f000 fd8c 	bl	8003cc0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69da      	ldr	r2, [r3, #28]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	490e      	ldr	r1, [pc, #56]	@ (80031ec <HAL_TIM_IC_ConfigChannel+0x144>)
 80031b4:	400a      	ands	r2, r1
 80031b6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	69d9      	ldr	r1, [r3, #28]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	021a      	lsls	r2, r3, #8
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	61da      	str	r2, [r3, #28]
 80031cc:	e003      	b.n	80031d6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80031ce:	2317      	movs	r3, #23
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2238      	movs	r2, #56	@ 0x38
 80031da:	2100      	movs	r1, #0
 80031dc:	5499      	strb	r1, [r3, r2]

  return status;
 80031de:	2317      	movs	r3, #23
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	781b      	ldrb	r3, [r3, #0]
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b006      	add	sp, #24
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	fffff3ff 	.word	0xfffff3ff

080031f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031fc:	2317      	movs	r3, #23
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2238      	movs	r2, #56	@ 0x38
 8003208:	5c9b      	ldrb	r3, [r3, r2]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_TIM_PWM_ConfigChannel+0x22>
 800320e:	2302      	movs	r3, #2
 8003210:	e0ad      	b.n	800336e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2238      	movs	r2, #56	@ 0x38
 8003216:	2101      	movs	r1, #1
 8003218:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b0c      	cmp	r3, #12
 800321e:	d100      	bne.n	8003222 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003220:	e076      	b.n	8003310 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d900      	bls.n	800322a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003228:	e095      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x166>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b08      	cmp	r3, #8
 800322e:	d04e      	beq.n	80032ce <HAL_TIM_PWM_ConfigChannel+0xde>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b08      	cmp	r3, #8
 8003234:	d900      	bls.n	8003238 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003236:	e08e      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_TIM_PWM_ConfigChannel+0x56>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b04      	cmp	r3, #4
 8003242:	d021      	beq.n	8003288 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003244:	e087      	b.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	0011      	movs	r1, r2
 800324e:	0018      	movs	r0, r3
 8003250:	f000 fafa 	bl	8003848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2108      	movs	r1, #8
 8003260:	430a      	orrs	r2, r1
 8003262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2104      	movs	r1, #4
 8003270:	438a      	bics	r2, r1
 8003272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6999      	ldr	r1, [r3, #24]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	619a      	str	r2, [r3, #24]
      break;
 8003286:	e06b      	b.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	0011      	movs	r1, r2
 8003290:	0018      	movs	r0, r3
 8003292:	f000 fb15 	bl	80038c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2180      	movs	r1, #128	@ 0x80
 80032a2:	0109      	lsls	r1, r1, #4
 80032a4:	430a      	orrs	r2, r1
 80032a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4931      	ldr	r1, [pc, #196]	@ (8003378 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80032b4:	400a      	ands	r2, r1
 80032b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6999      	ldr	r1, [r3, #24]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	021a      	lsls	r2, r3, #8
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	619a      	str	r2, [r3, #24]
      break;
 80032cc:	e048      	b.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	0011      	movs	r1, r2
 80032d6:	0018      	movs	r0, r3
 80032d8:	f000 fb34 	bl	8003944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69da      	ldr	r2, [r3, #28]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2108      	movs	r1, #8
 80032e8:	430a      	orrs	r2, r1
 80032ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2104      	movs	r1, #4
 80032f8:	438a      	bics	r2, r1
 80032fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69d9      	ldr	r1, [r3, #28]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	61da      	str	r2, [r3, #28]
      break;
 800330e:	e027      	b.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	0011      	movs	r1, r2
 8003318:	0018      	movs	r0, r3
 800331a:	f000 fb53 	bl	80039c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2180      	movs	r1, #128	@ 0x80
 800332a:	0109      	lsls	r1, r1, #4
 800332c:	430a      	orrs	r2, r1
 800332e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	490f      	ldr	r1, [pc, #60]	@ (8003378 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800333c:	400a      	ands	r2, r1
 800333e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69d9      	ldr	r1, [r3, #28]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	021a      	lsls	r2, r3, #8
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	61da      	str	r2, [r3, #28]
      break;
 8003354:	e004      	b.n	8003360 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003356:	2317      	movs	r3, #23
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	2201      	movs	r2, #1
 800335c:	701a      	strb	r2, [r3, #0]
      break;
 800335e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2238      	movs	r2, #56	@ 0x38
 8003364:	2100      	movs	r1, #0
 8003366:	5499      	strb	r1, [r3, r2]

  return status;
 8003368:	2317      	movs	r3, #23
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	781b      	ldrb	r3, [r3, #0]
}
 800336e:	0018      	movs	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	b006      	add	sp, #24
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			@ (mov r8, r8)
 8003378:	fffffbff 	.word	0xfffffbff

0800337c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003386:	230f      	movs	r3, #15
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2238      	movs	r2, #56	@ 0x38
 8003392:	5c9b      	ldrb	r3, [r3, r2]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_TIM_ConfigClockSource+0x20>
 8003398:	2302      	movs	r3, #2
 800339a:	e0bc      	b.n	8003516 <HAL_TIM_ConfigClockSource+0x19a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2238      	movs	r2, #56	@ 0x38
 80033a0:	2101      	movs	r1, #1
 80033a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2239      	movs	r2, #57	@ 0x39
 80033a8:	2102      	movs	r1, #2
 80033aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2277      	movs	r2, #119	@ 0x77
 80033b8:	4393      	bics	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4a58      	ldr	r2, [pc, #352]	@ (8003520 <HAL_TIM_ConfigClockSource+0x1a4>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2280      	movs	r2, #128	@ 0x80
 80033d2:	0192      	lsls	r2, r2, #6
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d040      	beq.n	800345a <HAL_TIM_ConfigClockSource+0xde>
 80033d8:	2280      	movs	r2, #128	@ 0x80
 80033da:	0192      	lsls	r2, r2, #6
 80033dc:	4293      	cmp	r3, r2
 80033de:	d900      	bls.n	80033e2 <HAL_TIM_ConfigClockSource+0x66>
 80033e0:	e088      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x178>
 80033e2:	2280      	movs	r2, #128	@ 0x80
 80033e4:	0152      	lsls	r2, r2, #5
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d100      	bne.n	80033ec <HAL_TIM_ConfigClockSource+0x70>
 80033ea:	e088      	b.n	80034fe <HAL_TIM_ConfigClockSource+0x182>
 80033ec:	2280      	movs	r2, #128	@ 0x80
 80033ee:	0152      	lsls	r2, r2, #5
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d900      	bls.n	80033f6 <HAL_TIM_ConfigClockSource+0x7a>
 80033f4:	e07e      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x178>
 80033f6:	2b70      	cmp	r3, #112	@ 0x70
 80033f8:	d018      	beq.n	800342c <HAL_TIM_ConfigClockSource+0xb0>
 80033fa:	d900      	bls.n	80033fe <HAL_TIM_ConfigClockSource+0x82>
 80033fc:	e07a      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x178>
 80033fe:	2b60      	cmp	r3, #96	@ 0x60
 8003400:	d04f      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0x126>
 8003402:	d900      	bls.n	8003406 <HAL_TIM_ConfigClockSource+0x8a>
 8003404:	e076      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x178>
 8003406:	2b50      	cmp	r3, #80	@ 0x50
 8003408:	d03b      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x106>
 800340a:	d900      	bls.n	800340e <HAL_TIM_ConfigClockSource+0x92>
 800340c:	e072      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x178>
 800340e:	2b40      	cmp	r3, #64	@ 0x40
 8003410:	d057      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0x146>
 8003412:	d900      	bls.n	8003416 <HAL_TIM_ConfigClockSource+0x9a>
 8003414:	e06e      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x178>
 8003416:	2b30      	cmp	r3, #48	@ 0x30
 8003418:	d063      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x166>
 800341a:	d86b      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x178>
 800341c:	2b20      	cmp	r3, #32
 800341e:	d060      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x166>
 8003420:	d868      	bhi.n	80034f4 <HAL_TIM_ConfigClockSource+0x178>
 8003422:	2b00      	cmp	r3, #0
 8003424:	d05d      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x166>
 8003426:	2b10      	cmp	r3, #16
 8003428:	d05b      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x166>
 800342a:	e063      	b.n	80034f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800343c:	f000 fca0 	bl	8003d80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2277      	movs	r2, #119	@ 0x77
 800344c:	4313      	orrs	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	609a      	str	r2, [r3, #8]
      break;
 8003458:	e052      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800346a:	f000 fc89 	bl	8003d80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2180      	movs	r1, #128	@ 0x80
 800347a:	01c9      	lsls	r1, r1, #7
 800347c:	430a      	orrs	r2, r1
 800347e:	609a      	str	r2, [r3, #8]
      break;
 8003480:	e03e      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800348e:	001a      	movs	r2, r3
 8003490:	f000 fb34 	bl	8003afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2150      	movs	r1, #80	@ 0x50
 800349a:	0018      	movs	r0, r3
 800349c:	f000 fc56 	bl	8003d4c <TIM_ITRx_SetConfig>
      break;
 80034a0:	e02e      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ae:	001a      	movs	r2, r3
 80034b0:	f000 fb94 	bl	8003bdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2160      	movs	r1, #96	@ 0x60
 80034ba:	0018      	movs	r0, r3
 80034bc:	f000 fc46 	bl	8003d4c <TIM_ITRx_SetConfig>
      break;
 80034c0:	e01e      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ce:	001a      	movs	r2, r3
 80034d0:	f000 fb14 	bl	8003afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2140      	movs	r1, #64	@ 0x40
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 fc36 	bl	8003d4c <TIM_ITRx_SetConfig>
      break;
 80034e0:	e00e      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	0019      	movs	r1, r3
 80034ec:	0010      	movs	r0, r2
 80034ee:	f000 fc2d 	bl	8003d4c <TIM_ITRx_SetConfig>
      break;
 80034f2:	e005      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80034f4:	230f      	movs	r3, #15
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	2201      	movs	r2, #1
 80034fa:	701a      	strb	r2, [r3, #0]
      break;
 80034fc:	e000      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80034fe:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2239      	movs	r2, #57	@ 0x39
 8003504:	2101      	movs	r1, #1
 8003506:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2238      	movs	r2, #56	@ 0x38
 800350c:	2100      	movs	r1, #0
 800350e:	5499      	strb	r1, [r3, r2]

  return status;
 8003510:	230f      	movs	r3, #15
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	781b      	ldrb	r3, [r3, #0]
}
 8003516:	0018      	movs	r0, r3
 8003518:	46bd      	mov	sp, r7
 800351a:	b004      	add	sp, #16
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			@ (mov r8, r8)
 8003520:	ffff00ff 	.word	0xffff00ff

08003524 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b0c      	cmp	r3, #12
 8003536:	d01e      	beq.n	8003576 <HAL_TIM_ReadCapturedValue+0x52>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d820      	bhi.n	8003580 <HAL_TIM_ReadCapturedValue+0x5c>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d013      	beq.n	800356c <HAL_TIM_ReadCapturedValue+0x48>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b08      	cmp	r3, #8
 8003548:	d81a      	bhi.n	8003580 <HAL_TIM_ReadCapturedValue+0x5c>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_TIM_ReadCapturedValue+0x34>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b04      	cmp	r3, #4
 8003554:	d005      	beq.n	8003562 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8003556:	e013      	b.n	8003580 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800355e:	60fb      	str	r3, [r7, #12]
      break;
 8003560:	e00f      	b.n	8003582 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	60fb      	str	r3, [r7, #12]
      break;
 800356a:	e00a      	b.n	8003582 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003572:	60fb      	str	r3, [r7, #12]
      break;
 8003574:	e005      	b.n	8003582 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	60fb      	str	r3, [r7, #12]
      break;
 800357e:	e000      	b.n	8003582 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8003580:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 8003582:	68fb      	ldr	r3, [r7, #12]
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b004      	add	sp, #16
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003594:	46c0      	nop			@ (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	b002      	add	sp, #8
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a4:	46c0      	nop			@ (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b002      	add	sp, #8
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80035b4:	46c0      	nop			@ (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035c4:	46c0      	nop			@ (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035d4:	46c0      	nop			@ (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b002      	add	sp, #8
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80035e4:	46c0      	nop			@ (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}

080035ec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d107      	bne.n	8003614 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	223a      	movs	r2, #58	@ 0x3a
 800360e:	2101      	movs	r1, #1
 8003610:	5499      	strb	r1, [r3, r2]
 8003612:	e02a      	b.n	800366a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	429a      	cmp	r2, r3
 800361c:	d107      	bne.n	800362e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2202      	movs	r2, #2
 8003622:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	223b      	movs	r2, #59	@ 0x3b
 8003628:	2101      	movs	r1, #1
 800362a:	5499      	strb	r1, [r3, r2]
 800362c:	e01d      	b.n	800366a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	429a      	cmp	r2, r3
 8003636:	d107      	bne.n	8003648 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2204      	movs	r2, #4
 800363c:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	223c      	movs	r2, #60	@ 0x3c
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]
 8003646:	e010      	b.n	800366a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	429a      	cmp	r2, r3
 8003650:	d107      	bne.n	8003662 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2208      	movs	r2, #8
 8003656:	761a      	strb	r2, [r3, #24]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	223d      	movs	r2, #61	@ 0x3d
 800365c:	2101      	movs	r1, #1
 800365e:	5499      	strb	r1, [r3, r2]
 8003660:	e003      	b.n	800366a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2239      	movs	r2, #57	@ 0x39
 8003666:	2101      	movs	r1, #1
 8003668:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	0018      	movs	r0, r3
 800366e:	f7ff ffb5 	bl	80035dc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	761a      	strb	r2, [r3, #24]
}
 8003678:	46c0      	nop			@ (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b004      	add	sp, #16
 800367e:	bd80      	pop	{r7, pc}

08003680 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	429a      	cmp	r2, r3
 8003696:	d10b      	bne.n	80036b0 <TIM_DMACaptureCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d136      	bne.n	8003714 <TIM_DMACaptureCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	223a      	movs	r2, #58	@ 0x3a
 80036aa:	2101      	movs	r1, #1
 80036ac:	5499      	strb	r1, [r3, r2]
 80036ae:	e031      	b.n	8003714 <TIM_DMACaptureCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d10b      	bne.n	80036d2 <TIM_DMACaptureCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2202      	movs	r2, #2
 80036be:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d125      	bne.n	8003714 <TIM_DMACaptureCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	223b      	movs	r2, #59	@ 0x3b
 80036cc:	2101      	movs	r1, #1
 80036ce:	5499      	strb	r1, [r3, r2]
 80036d0:	e020      	b.n	8003714 <TIM_DMACaptureCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d10b      	bne.n	80036f4 <TIM_DMACaptureCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2204      	movs	r2, #4
 80036e0:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d114      	bne.n	8003714 <TIM_DMACaptureCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	223c      	movs	r2, #60	@ 0x3c
 80036ee:	2101      	movs	r1, #1
 80036f0:	5499      	strb	r1, [r3, r2]
 80036f2:	e00f      	b.n	8003714 <TIM_DMACaptureCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d10a      	bne.n	8003714 <TIM_DMACaptureCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2208      	movs	r2, #8
 8003702:	761a      	strb	r2, [r3, #24]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <TIM_DMACaptureCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	223d      	movs	r2, #61	@ 0x3d
 8003710:	2101      	movs	r1, #1
 8003712:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	0018      	movs	r0, r3
 8003718:	f7fd fa78 	bl	8000c0c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	761a      	strb	r2, [r3, #24]
}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b004      	add	sp, #16
 8003728:	bd80      	pop	{r7, pc}

0800372a <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003736:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	429a      	cmp	r2, r3
 8003740:	d103      	bne.n	800374a <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	761a      	strb	r2, [r3, #24]
 8003748:	e019      	b.n	800377e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	d103      	bne.n	800375c <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2202      	movs	r2, #2
 8003758:	761a      	strb	r2, [r3, #24]
 800375a:	e010      	b.n	800377e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	429a      	cmp	r2, r3
 8003764:	d103      	bne.n	800376e <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2204      	movs	r2, #4
 800376a:	761a      	strb	r2, [r3, #24]
 800376c:	e007      	b.n	800377e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	429a      	cmp	r2, r3
 8003776:	d102      	bne.n	800377e <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2208      	movs	r2, #8
 800377c:	761a      	strb	r2, [r3, #24]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	0018      	movs	r0, r3
 8003782:	f7ff ff13 	bl	80035ac <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	761a      	strb	r2, [r3, #24]
}
 800378c:	46c0      	nop			@ (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b004      	add	sp, #16
 8003792:	bd80      	pop	{r7, pc}

08003794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	2380      	movs	r3, #128	@ 0x80
 80037a8:	05db      	lsls	r3, r3, #23
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d007      	beq.n	80037be <TIM_Base_SetConfig+0x2a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a22      	ldr	r2, [pc, #136]	@ (800383c <TIM_Base_SetConfig+0xa8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <TIM_Base_SetConfig+0x2a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a21      	ldr	r2, [pc, #132]	@ (8003840 <TIM_Base_SetConfig+0xac>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d108      	bne.n	80037d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2270      	movs	r2, #112	@ 0x70
 80037c2:	4393      	bics	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	2380      	movs	r3, #128	@ 0x80
 80037d4:	05db      	lsls	r3, r3, #23
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d007      	beq.n	80037ea <TIM_Base_SetConfig+0x56>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a17      	ldr	r2, [pc, #92]	@ (800383c <TIM_Base_SetConfig+0xa8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d003      	beq.n	80037ea <TIM_Base_SetConfig+0x56>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a16      	ldr	r2, [pc, #88]	@ (8003840 <TIM_Base_SetConfig+0xac>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d108      	bne.n	80037fc <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a15      	ldr	r2, [pc, #84]	@ (8003844 <TIM_Base_SetConfig+0xb0>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2280      	movs	r2, #128	@ 0x80
 8003800:	4393      	bics	r3, r2
 8003802:	001a      	movs	r2, r3
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2204      	movs	r2, #4
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	601a      	str	r2, [r3, #0]
}
 8003834:	46c0      	nop			@ (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	b004      	add	sp, #16
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40010800 	.word	0x40010800
 8003840:	40011400 	.word	0x40011400
 8003844:	fffffcff 	.word	0xfffffcff

08003848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	2201      	movs	r2, #1
 800385e:	4393      	bics	r3, r2
 8003860:	001a      	movs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2270      	movs	r2, #112	@ 0x70
 8003876:	4393      	bics	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2203      	movs	r2, #3
 800387e:	4393      	bics	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2202      	movs	r2, #2
 8003890:	4393      	bics	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	4313      	orrs	r3, r2
 800389c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	621a      	str	r2, [r3, #32]
}
 80038b8:	46c0      	nop			@ (mov r8, r8)
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b006      	add	sp, #24
 80038be:	bd80      	pop	{r7, pc}

080038c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	2210      	movs	r2, #16
 80038d6:	4393      	bics	r3, r2
 80038d8:	001a      	movs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a13      	ldr	r2, [pc, #76]	@ (800393c <TIM_OC2_SetConfig+0x7c>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a12      	ldr	r2, [pc, #72]	@ (8003940 <TIM_OC2_SetConfig+0x80>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2220      	movs	r2, #32
 800390a:	4393      	bics	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	621a      	str	r2, [r3, #32]
}
 8003934:	46c0      	nop			@ (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	b006      	add	sp, #24
 800393a:	bd80      	pop	{r7, pc}
 800393c:	ffff8fff 	.word	0xffff8fff
 8003940:	fffffcff 	.word	0xfffffcff

08003944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	4a18      	ldr	r2, [pc, #96]	@ (80039bc <TIM_OC3_SetConfig+0x78>)
 800395a:	401a      	ands	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2270      	movs	r2, #112	@ 0x70
 8003970:	4393      	bics	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2203      	movs	r2, #3
 8003978:	4393      	bics	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	4a0d      	ldr	r2, [pc, #52]	@ (80039c0 <TIM_OC3_SetConfig+0x7c>)
 800398a:	4013      	ands	r3, r2
 800398c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	021b      	lsls	r3, r3, #8
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	621a      	str	r2, [r3, #32]
}
 80039b4:	46c0      	nop			@ (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b006      	add	sp, #24
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	fffffeff 	.word	0xfffffeff
 80039c0:	fffffdff 	.word	0xfffffdff

080039c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	4a19      	ldr	r2, [pc, #100]	@ (8003a40 <TIM_OC4_SetConfig+0x7c>)
 80039da:	401a      	ands	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a15      	ldr	r2, [pc, #84]	@ (8003a44 <TIM_OC4_SetConfig+0x80>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a14      	ldr	r2, [pc, #80]	@ (8003a48 <TIM_OC4_SetConfig+0x84>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	4a10      	ldr	r2, [pc, #64]	@ (8003a4c <TIM_OC4_SetConfig+0x88>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	031b      	lsls	r3, r3, #12
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b006      	add	sp, #24
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			@ (mov r8, r8)
 8003a40:	ffffefff 	.word	0xffffefff
 8003a44:	ffff8fff 	.word	0xffff8fff
 8003a48:	fffffcff 	.word	0xfffffcff
 8003a4c:	ffffdfff 	.word	0xffffdfff

08003a50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4393      	bics	r3, r2
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	2380      	movs	r3, #128	@ 0x80
 8003a7c:	05db      	lsls	r3, r3, #23
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d007      	beq.n	8003a92 <TIM_TI1_SetConfig+0x42>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4a1b      	ldr	r2, [pc, #108]	@ (8003af4 <TIM_TI1_SetConfig+0xa4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_TI1_SetConfig+0x42>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8003af8 <TIM_TI1_SetConfig+0xa8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d101      	bne.n	8003a96 <TIM_TI1_SetConfig+0x46>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <TIM_TI1_SetConfig+0x48>
 8003a96:	2300      	movs	r3, #0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	4393      	bics	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	e003      	b.n	8003ab6 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	22f0      	movs	r2, #240	@ 0xf0
 8003aba:	4393      	bics	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	22ff      	movs	r2, #255	@ 0xff
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	220a      	movs	r2, #10
 8003ad0:	4393      	bics	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	220a      	movs	r2, #10
 8003ad8:	4013      	ands	r3, r2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	621a      	str	r2, [r3, #32]
}
 8003aec:	46c0      	nop			@ (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b006      	add	sp, #24
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40010800 	.word	0x40010800
 8003af8:	40011400 	.word	0x40011400

08003afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	2201      	movs	r2, #1
 8003b14:	4393      	bics	r3, r2
 8003b16:	001a      	movs	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	22f0      	movs	r2, #240	@ 0xf0
 8003b26:	4393      	bics	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	220a      	movs	r2, #10
 8003b38:	4393      	bics	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	46c0      	nop			@ (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b006      	add	sp, #24
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	2210      	movs	r2, #16
 8003b72:	4393      	bics	r3, r2
 8003b74:	001a      	movs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4a14      	ldr	r2, [pc, #80]	@ (8003bd4 <TIM_TI2_SetConfig+0x7c>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4a10      	ldr	r2, [pc, #64]	@ (8003bd8 <TIM_TI2_SetConfig+0x80>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	031b      	lsls	r3, r3, #12
 8003b9e:	041b      	lsls	r3, r3, #16
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	22a0      	movs	r2, #160	@ 0xa0
 8003bac:	4393      	bics	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	22a0      	movs	r2, #160	@ 0xa0
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b006      	add	sp, #24
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	fffffcff 	.word	0xfffffcff
 8003bd8:	ffff0fff 	.word	0xffff0fff

08003bdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	2210      	movs	r2, #16
 8003bf4:	4393      	bics	r3, r2
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4a0d      	ldr	r2, [pc, #52]	@ (8003c3c <TIM_TI2_ConfigInputStage+0x60>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	031b      	lsls	r3, r3, #12
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	22a0      	movs	r2, #160	@ 0xa0
 8003c18:	4393      	bics	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	621a      	str	r2, [r3, #32]
}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b006      	add	sp, #24
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	ffff0fff 	.word	0xffff0fff

08003c40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4a17      	ldr	r2, [pc, #92]	@ (8003cb8 <TIM_TI3_SetConfig+0x78>)
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	2203      	movs	r2, #3
 8003c6a:	4393      	bics	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	22f0      	movs	r2, #240	@ 0xf0
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	22ff      	movs	r2, #255	@ 0xff
 8003c84:	4013      	ands	r3, r2
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8003cbc <TIM_TI3_SetConfig+0x7c>)
 8003c90:	4013      	ands	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	021a      	lsls	r2, r3, #8
 8003c98:	23a0      	movs	r3, #160	@ 0xa0
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	621a      	str	r2, [r3, #32]
}
 8003cb0:	46c0      	nop			@ (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b006      	add	sp, #24
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	fffffeff 	.word	0xfffffeff
 8003cbc:	fffff5ff 	.word	0xfffff5ff

08003cc0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	4a18      	ldr	r2, [pc, #96]	@ (8003d3c <TIM_TI4_SetConfig+0x7c>)
 8003cda:	401a      	ands	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4a15      	ldr	r2, [pc, #84]	@ (8003d40 <TIM_TI4_SetConfig+0x80>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4a12      	ldr	r2, [pc, #72]	@ (8003d44 <TIM_TI4_SetConfig+0x84>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	031b      	lsls	r3, r3, #12
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	0c1b      	lsrs	r3, r3, #16
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	4a0d      	ldr	r2, [pc, #52]	@ (8003d48 <TIM_TI4_SetConfig+0x88>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	031a      	lsls	r2, r3, #12
 8003d1a:	23a0      	movs	r3, #160	@ 0xa0
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	4013      	ands	r3, r2
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b006      	add	sp, #24
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	ffffefff 	.word	0xffffefff
 8003d40:	fffffcff 	.word	0xfffffcff
 8003d44:	ffff0fff 	.word	0xffff0fff
 8003d48:	ffff5fff 	.word	0xffff5fff

08003d4c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2270      	movs	r2, #112	@ 0x70
 8003d60:	4393      	bics	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	2207      	movs	r2, #7
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	609a      	str	r2, [r3, #8]
}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b004      	add	sp, #16
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	4a09      	ldr	r2, [pc, #36]	@ (8003dbc <TIM_ETR_SetConfig+0x3c>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	021a      	lsls	r2, r3, #8
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	609a      	str	r2, [r3, #8]
}
 8003db4:	46c0      	nop			@ (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b006      	add	sp, #24
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	ffff00ff 	.word	0xffff00ff

08003dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	221f      	movs	r2, #31
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	0013      	movs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	43d2      	mvns	r2, r2
 8003de2:	401a      	ands	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1a      	ldr	r2, [r3, #32]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	211f      	movs	r1, #31
 8003df0:	400b      	ands	r3, r1
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4099      	lsls	r1, r3
 8003df6:	000b      	movs	r3, r1
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b006      	add	sp, #24
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2238      	movs	r2, #56	@ 0x38
 8003e16:	5c9b      	ldrb	r3, [r3, r2]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e042      	b.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2238      	movs	r2, #56	@ 0x38
 8003e24:	2101      	movs	r1, #1
 8003e26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2239      	movs	r2, #57	@ 0x39
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2270      	movs	r2, #112	@ 0x70
 8003e44:	4393      	bics	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	2380      	movs	r3, #128	@ 0x80
 8003e60:	05db      	lsls	r3, r3, #23
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d009      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a11      	ldr	r2, [pc, #68]	@ (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a0f      	ldr	r2, [pc, #60]	@ (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10c      	bne.n	8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2280      	movs	r2, #128	@ 0x80
 8003e7e:	4393      	bics	r3, r2
 8003e80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2239      	movs	r2, #57	@ 0x39
 8003e98:	2101      	movs	r1, #1
 8003e9a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2238      	movs	r2, #56	@ 0x38
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b004      	add	sp, #16
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	40010800 	.word	0x40010800
 8003eb4:	40011400 	.word	0x40011400

08003eb8 <memset>:
 8003eb8:	0003      	movs	r3, r0
 8003eba:	1882      	adds	r2, r0, r2
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d100      	bne.n	8003ec2 <memset+0xa>
 8003ec0:	4770      	bx	lr
 8003ec2:	7019      	strb	r1, [r3, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	e7f9      	b.n	8003ebc <memset+0x4>

08003ec8 <__libc_init_array>:
 8003ec8:	b570      	push	{r4, r5, r6, lr}
 8003eca:	2600      	movs	r6, #0
 8003ecc:	4c0c      	ldr	r4, [pc, #48]	@ (8003f00 <__libc_init_array+0x38>)
 8003ece:	4d0d      	ldr	r5, [pc, #52]	@ (8003f04 <__libc_init_array+0x3c>)
 8003ed0:	1b64      	subs	r4, r4, r5
 8003ed2:	10a4      	asrs	r4, r4, #2
 8003ed4:	42a6      	cmp	r6, r4
 8003ed6:	d109      	bne.n	8003eec <__libc_init_array+0x24>
 8003ed8:	2600      	movs	r6, #0
 8003eda:	f000 f819 	bl	8003f10 <_init>
 8003ede:	4c0a      	ldr	r4, [pc, #40]	@ (8003f08 <__libc_init_array+0x40>)
 8003ee0:	4d0a      	ldr	r5, [pc, #40]	@ (8003f0c <__libc_init_array+0x44>)
 8003ee2:	1b64      	subs	r4, r4, r5
 8003ee4:	10a4      	asrs	r4, r4, #2
 8003ee6:	42a6      	cmp	r6, r4
 8003ee8:	d105      	bne.n	8003ef6 <__libc_init_array+0x2e>
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
 8003eec:	00b3      	lsls	r3, r6, #2
 8003eee:	58eb      	ldr	r3, [r5, r3]
 8003ef0:	4798      	blx	r3
 8003ef2:	3601      	adds	r6, #1
 8003ef4:	e7ee      	b.n	8003ed4 <__libc_init_array+0xc>
 8003ef6:	00b3      	lsls	r3, r6, #2
 8003ef8:	58eb      	ldr	r3, [r5, r3]
 8003efa:	4798      	blx	r3
 8003efc:	3601      	adds	r6, #1
 8003efe:	e7f2      	b.n	8003ee6 <__libc_init_array+0x1e>
 8003f00:	08003f84 	.word	0x08003f84
 8003f04:	08003f84 	.word	0x08003f84
 8003f08:	08003f88 	.word	0x08003f88
 8003f0c:	08003f84 	.word	0x08003f84

08003f10 <_init>:
 8003f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f16:	bc08      	pop	{r3}
 8003f18:	469e      	mov	lr, r3
 8003f1a:	4770      	bx	lr

08003f1c <_fini>:
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	46c0      	nop			@ (mov r8, r8)
 8003f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f22:	bc08      	pop	{r3}
 8003f24:	469e      	mov	lr, r3
 8003f26:	4770      	bx	lr

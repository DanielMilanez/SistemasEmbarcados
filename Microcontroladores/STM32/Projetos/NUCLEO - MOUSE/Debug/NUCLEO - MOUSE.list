
NUCLEO - MOUSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08009860  08009860  0000a860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099e0  080099e0  0000b164  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080099e0  080099e0  0000b164  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080099e0  080099e0  0000b164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099e0  080099e0  0000a9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099e4  080099e4  0000a9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  080099e8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000854  20000164  08009b4c  0000b164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b8  08009b4c  0000b9b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f264  00000000  00000000  0000b18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f96  00000000  00000000  0001a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0001d388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2a  00000000  00000000  0001e118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e21  00000000  00000000  0001eb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013011  00000000  00000000  00034963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007963f  00000000  00000000  00047974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0fb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000301c  00000000  00000000  000c0ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000c4014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000164 	.word	0x20000164
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009848 	.word	0x08009848

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000168 	.word	0x20000168
 8000104:	08009848 	.word	0x08009848

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_fdiv>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	4646      	mov	r6, r8
 80003f8:	464f      	mov	r7, r9
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0245      	lsls	r5, r0, #9
 80003fe:	b5c0      	push	{r6, r7, lr}
 8000400:	0fc3      	lsrs	r3, r0, #31
 8000402:	0047      	lsls	r7, r0, #1
 8000404:	4698      	mov	r8, r3
 8000406:	1c0e      	adds	r6, r1, #0
 8000408:	0a6d      	lsrs	r5, r5, #9
 800040a:	0e3f      	lsrs	r7, r7, #24
 800040c:	d05b      	beq.n	80004c6 <__aeabi_fdiv+0xd2>
 800040e:	2fff      	cmp	r7, #255	@ 0xff
 8000410:	d021      	beq.n	8000456 <__aeabi_fdiv+0x62>
 8000412:	2380      	movs	r3, #128	@ 0x80
 8000414:	00ed      	lsls	r5, r5, #3
 8000416:	04db      	lsls	r3, r3, #19
 8000418:	431d      	orrs	r5, r3
 800041a:	2300      	movs	r3, #0
 800041c:	4699      	mov	r9, r3
 800041e:	469a      	mov	sl, r3
 8000420:	3f7f      	subs	r7, #127	@ 0x7f
 8000422:	0274      	lsls	r4, r6, #9
 8000424:	0073      	lsls	r3, r6, #1
 8000426:	0a64      	lsrs	r4, r4, #9
 8000428:	0e1b      	lsrs	r3, r3, #24
 800042a:	0ff6      	lsrs	r6, r6, #31
 800042c:	2b00      	cmp	r3, #0
 800042e:	d020      	beq.n	8000472 <__aeabi_fdiv+0x7e>
 8000430:	2bff      	cmp	r3, #255	@ 0xff
 8000432:	d043      	beq.n	80004bc <__aeabi_fdiv+0xc8>
 8000434:	2280      	movs	r2, #128	@ 0x80
 8000436:	2000      	movs	r0, #0
 8000438:	00e4      	lsls	r4, r4, #3
 800043a:	04d2      	lsls	r2, r2, #19
 800043c:	4314      	orrs	r4, r2
 800043e:	3b7f      	subs	r3, #127	@ 0x7f
 8000440:	4642      	mov	r2, r8
 8000442:	1aff      	subs	r7, r7, r3
 8000444:	464b      	mov	r3, r9
 8000446:	4072      	eors	r2, r6
 8000448:	2b0f      	cmp	r3, #15
 800044a:	d900      	bls.n	800044e <__aeabi_fdiv+0x5a>
 800044c:	e09d      	b.n	800058a <__aeabi_fdiv+0x196>
 800044e:	4971      	ldr	r1, [pc, #452]	@ (8000614 <__aeabi_fdiv+0x220>)
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	58cb      	ldr	r3, [r1, r3]
 8000454:	469f      	mov	pc, r3
 8000456:	2d00      	cmp	r5, #0
 8000458:	d15a      	bne.n	8000510 <__aeabi_fdiv+0x11c>
 800045a:	2308      	movs	r3, #8
 800045c:	4699      	mov	r9, r3
 800045e:	3b06      	subs	r3, #6
 8000460:	0274      	lsls	r4, r6, #9
 8000462:	469a      	mov	sl, r3
 8000464:	0073      	lsls	r3, r6, #1
 8000466:	27ff      	movs	r7, #255	@ 0xff
 8000468:	0a64      	lsrs	r4, r4, #9
 800046a:	0e1b      	lsrs	r3, r3, #24
 800046c:	0ff6      	lsrs	r6, r6, #31
 800046e:	2b00      	cmp	r3, #0
 8000470:	d1de      	bne.n	8000430 <__aeabi_fdiv+0x3c>
 8000472:	2c00      	cmp	r4, #0
 8000474:	d13b      	bne.n	80004ee <__aeabi_fdiv+0xfa>
 8000476:	2301      	movs	r3, #1
 8000478:	4642      	mov	r2, r8
 800047a:	4649      	mov	r1, r9
 800047c:	4072      	eors	r2, r6
 800047e:	4319      	orrs	r1, r3
 8000480:	290e      	cmp	r1, #14
 8000482:	d818      	bhi.n	80004b6 <__aeabi_fdiv+0xc2>
 8000484:	4864      	ldr	r0, [pc, #400]	@ (8000618 <__aeabi_fdiv+0x224>)
 8000486:	0089      	lsls	r1, r1, #2
 8000488:	5841      	ldr	r1, [r0, r1]
 800048a:	468f      	mov	pc, r1
 800048c:	4653      	mov	r3, sl
 800048e:	2b02      	cmp	r3, #2
 8000490:	d100      	bne.n	8000494 <__aeabi_fdiv+0xa0>
 8000492:	e0b8      	b.n	8000606 <__aeabi_fdiv+0x212>
 8000494:	2b03      	cmp	r3, #3
 8000496:	d06e      	beq.n	8000576 <__aeabi_fdiv+0x182>
 8000498:	4642      	mov	r2, r8
 800049a:	002c      	movs	r4, r5
 800049c:	2b01      	cmp	r3, #1
 800049e:	d140      	bne.n	8000522 <__aeabi_fdiv+0x12e>
 80004a0:	2000      	movs	r0, #0
 80004a2:	2400      	movs	r4, #0
 80004a4:	05c0      	lsls	r0, r0, #23
 80004a6:	4320      	orrs	r0, r4
 80004a8:	07d2      	lsls	r2, r2, #31
 80004aa:	4310      	orrs	r0, r2
 80004ac:	bce0      	pop	{r5, r6, r7}
 80004ae:	46ba      	mov	sl, r7
 80004b0:	46b1      	mov	r9, r6
 80004b2:	46a8      	mov	r8, r5
 80004b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b6:	20ff      	movs	r0, #255	@ 0xff
 80004b8:	2400      	movs	r4, #0
 80004ba:	e7f3      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 80004bc:	2c00      	cmp	r4, #0
 80004be:	d120      	bne.n	8000502 <__aeabi_fdiv+0x10e>
 80004c0:	2302      	movs	r3, #2
 80004c2:	3fff      	subs	r7, #255	@ 0xff
 80004c4:	e7d8      	b.n	8000478 <__aeabi_fdiv+0x84>
 80004c6:	2d00      	cmp	r5, #0
 80004c8:	d105      	bne.n	80004d6 <__aeabi_fdiv+0xe2>
 80004ca:	2304      	movs	r3, #4
 80004cc:	4699      	mov	r9, r3
 80004ce:	3b03      	subs	r3, #3
 80004d0:	2700      	movs	r7, #0
 80004d2:	469a      	mov	sl, r3
 80004d4:	e7a5      	b.n	8000422 <__aeabi_fdiv+0x2e>
 80004d6:	0028      	movs	r0, r5
 80004d8:	f001 f89a 	bl	8001610 <__clzsi2>
 80004dc:	2776      	movs	r7, #118	@ 0x76
 80004de:	1f43      	subs	r3, r0, #5
 80004e0:	409d      	lsls	r5, r3
 80004e2:	2300      	movs	r3, #0
 80004e4:	427f      	negs	r7, r7
 80004e6:	4699      	mov	r9, r3
 80004e8:	469a      	mov	sl, r3
 80004ea:	1a3f      	subs	r7, r7, r0
 80004ec:	e799      	b.n	8000422 <__aeabi_fdiv+0x2e>
 80004ee:	0020      	movs	r0, r4
 80004f0:	f001 f88e 	bl	8001610 <__clzsi2>
 80004f4:	1f43      	subs	r3, r0, #5
 80004f6:	409c      	lsls	r4, r3
 80004f8:	2376      	movs	r3, #118	@ 0x76
 80004fa:	425b      	negs	r3, r3
 80004fc:	1a1b      	subs	r3, r3, r0
 80004fe:	2000      	movs	r0, #0
 8000500:	e79e      	b.n	8000440 <__aeabi_fdiv+0x4c>
 8000502:	2303      	movs	r3, #3
 8000504:	464a      	mov	r2, r9
 8000506:	431a      	orrs	r2, r3
 8000508:	4691      	mov	r9, r2
 800050a:	2003      	movs	r0, #3
 800050c:	33fc      	adds	r3, #252	@ 0xfc
 800050e:	e797      	b.n	8000440 <__aeabi_fdiv+0x4c>
 8000510:	230c      	movs	r3, #12
 8000512:	4699      	mov	r9, r3
 8000514:	3b09      	subs	r3, #9
 8000516:	27ff      	movs	r7, #255	@ 0xff
 8000518:	469a      	mov	sl, r3
 800051a:	e782      	b.n	8000422 <__aeabi_fdiv+0x2e>
 800051c:	2803      	cmp	r0, #3
 800051e:	d02c      	beq.n	800057a <__aeabi_fdiv+0x186>
 8000520:	0032      	movs	r2, r6
 8000522:	0038      	movs	r0, r7
 8000524:	307f      	adds	r0, #127	@ 0x7f
 8000526:	2800      	cmp	r0, #0
 8000528:	dd47      	ble.n	80005ba <__aeabi_fdiv+0x1c6>
 800052a:	0763      	lsls	r3, r4, #29
 800052c:	d004      	beq.n	8000538 <__aeabi_fdiv+0x144>
 800052e:	230f      	movs	r3, #15
 8000530:	4023      	ands	r3, r4
 8000532:	2b04      	cmp	r3, #4
 8000534:	d000      	beq.n	8000538 <__aeabi_fdiv+0x144>
 8000536:	3404      	adds	r4, #4
 8000538:	0123      	lsls	r3, r4, #4
 800053a:	d503      	bpl.n	8000544 <__aeabi_fdiv+0x150>
 800053c:	0038      	movs	r0, r7
 800053e:	4b37      	ldr	r3, [pc, #220]	@ (800061c <__aeabi_fdiv+0x228>)
 8000540:	3080      	adds	r0, #128	@ 0x80
 8000542:	401c      	ands	r4, r3
 8000544:	28fe      	cmp	r0, #254	@ 0xfe
 8000546:	dcb6      	bgt.n	80004b6 <__aeabi_fdiv+0xc2>
 8000548:	01a4      	lsls	r4, r4, #6
 800054a:	0a64      	lsrs	r4, r4, #9
 800054c:	b2c0      	uxtb	r0, r0
 800054e:	e7a9      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 8000550:	2480      	movs	r4, #128	@ 0x80
 8000552:	2200      	movs	r2, #0
 8000554:	20ff      	movs	r0, #255	@ 0xff
 8000556:	03e4      	lsls	r4, r4, #15
 8000558:	e7a4      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 800055a:	2380      	movs	r3, #128	@ 0x80
 800055c:	03db      	lsls	r3, r3, #15
 800055e:	421d      	tst	r5, r3
 8000560:	d001      	beq.n	8000566 <__aeabi_fdiv+0x172>
 8000562:	421c      	tst	r4, r3
 8000564:	d00b      	beq.n	800057e <__aeabi_fdiv+0x18a>
 8000566:	2480      	movs	r4, #128	@ 0x80
 8000568:	03e4      	lsls	r4, r4, #15
 800056a:	432c      	orrs	r4, r5
 800056c:	0264      	lsls	r4, r4, #9
 800056e:	4642      	mov	r2, r8
 8000570:	20ff      	movs	r0, #255	@ 0xff
 8000572:	0a64      	lsrs	r4, r4, #9
 8000574:	e796      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 8000576:	4646      	mov	r6, r8
 8000578:	002c      	movs	r4, r5
 800057a:	2380      	movs	r3, #128	@ 0x80
 800057c:	03db      	lsls	r3, r3, #15
 800057e:	431c      	orrs	r4, r3
 8000580:	0264      	lsls	r4, r4, #9
 8000582:	0032      	movs	r2, r6
 8000584:	20ff      	movs	r0, #255	@ 0xff
 8000586:	0a64      	lsrs	r4, r4, #9
 8000588:	e78c      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 800058a:	016d      	lsls	r5, r5, #5
 800058c:	0160      	lsls	r0, r4, #5
 800058e:	4285      	cmp	r5, r0
 8000590:	d22d      	bcs.n	80005ee <__aeabi_fdiv+0x1fa>
 8000592:	231b      	movs	r3, #27
 8000594:	2400      	movs	r4, #0
 8000596:	3f01      	subs	r7, #1
 8000598:	2601      	movs	r6, #1
 800059a:	0029      	movs	r1, r5
 800059c:	0064      	lsls	r4, r4, #1
 800059e:	006d      	lsls	r5, r5, #1
 80005a0:	2900      	cmp	r1, #0
 80005a2:	db01      	blt.n	80005a8 <__aeabi_fdiv+0x1b4>
 80005a4:	4285      	cmp	r5, r0
 80005a6:	d301      	bcc.n	80005ac <__aeabi_fdiv+0x1b8>
 80005a8:	1a2d      	subs	r5, r5, r0
 80005aa:	4334      	orrs	r4, r6
 80005ac:	3b01      	subs	r3, #1
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1f3      	bne.n	800059a <__aeabi_fdiv+0x1a6>
 80005b2:	1e6b      	subs	r3, r5, #1
 80005b4:	419d      	sbcs	r5, r3
 80005b6:	432c      	orrs	r4, r5
 80005b8:	e7b3      	b.n	8000522 <__aeabi_fdiv+0x12e>
 80005ba:	2301      	movs	r3, #1
 80005bc:	1a1b      	subs	r3, r3, r0
 80005be:	2b1b      	cmp	r3, #27
 80005c0:	dd00      	ble.n	80005c4 <__aeabi_fdiv+0x1d0>
 80005c2:	e76d      	b.n	80004a0 <__aeabi_fdiv+0xac>
 80005c4:	0021      	movs	r1, r4
 80005c6:	379e      	adds	r7, #158	@ 0x9e
 80005c8:	40d9      	lsrs	r1, r3
 80005ca:	40bc      	lsls	r4, r7
 80005cc:	000b      	movs	r3, r1
 80005ce:	1e61      	subs	r1, r4, #1
 80005d0:	418c      	sbcs	r4, r1
 80005d2:	4323      	orrs	r3, r4
 80005d4:	0759      	lsls	r1, r3, #29
 80005d6:	d004      	beq.n	80005e2 <__aeabi_fdiv+0x1ee>
 80005d8:	210f      	movs	r1, #15
 80005da:	4019      	ands	r1, r3
 80005dc:	2904      	cmp	r1, #4
 80005de:	d000      	beq.n	80005e2 <__aeabi_fdiv+0x1ee>
 80005e0:	3304      	adds	r3, #4
 80005e2:	0159      	lsls	r1, r3, #5
 80005e4:	d413      	bmi.n	800060e <__aeabi_fdiv+0x21a>
 80005e6:	019b      	lsls	r3, r3, #6
 80005e8:	2000      	movs	r0, #0
 80005ea:	0a5c      	lsrs	r4, r3, #9
 80005ec:	e75a      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 80005ee:	231a      	movs	r3, #26
 80005f0:	2401      	movs	r4, #1
 80005f2:	1a2d      	subs	r5, r5, r0
 80005f4:	e7d0      	b.n	8000598 <__aeabi_fdiv+0x1a4>
 80005f6:	1e98      	subs	r0, r3, #2
 80005f8:	4243      	negs	r3, r0
 80005fa:	4158      	adcs	r0, r3
 80005fc:	4240      	negs	r0, r0
 80005fe:	0032      	movs	r2, r6
 8000600:	2400      	movs	r4, #0
 8000602:	b2c0      	uxtb	r0, r0
 8000604:	e74e      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 8000606:	4642      	mov	r2, r8
 8000608:	20ff      	movs	r0, #255	@ 0xff
 800060a:	2400      	movs	r4, #0
 800060c:	e74a      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 800060e:	2001      	movs	r0, #1
 8000610:	2400      	movs	r4, #0
 8000612:	e747      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 8000614:	080098a8 	.word	0x080098a8
 8000618:	080098e8 	.word	0x080098e8
 800061c:	f7ffffff 	.word	0xf7ffffff

08000620 <__aeabi_i2f>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	2800      	cmp	r0, #0
 8000624:	d012      	beq.n	800064c <__aeabi_i2f+0x2c>
 8000626:	17c3      	asrs	r3, r0, #31
 8000628:	18c5      	adds	r5, r0, r3
 800062a:	405d      	eors	r5, r3
 800062c:	0fc4      	lsrs	r4, r0, #31
 800062e:	0028      	movs	r0, r5
 8000630:	f000 ffee 	bl	8001610 <__clzsi2>
 8000634:	239e      	movs	r3, #158	@ 0x9e
 8000636:	1a1b      	subs	r3, r3, r0
 8000638:	2b96      	cmp	r3, #150	@ 0x96
 800063a:	dc0f      	bgt.n	800065c <__aeabi_i2f+0x3c>
 800063c:	2808      	cmp	r0, #8
 800063e:	d038      	beq.n	80006b2 <__aeabi_i2f+0x92>
 8000640:	3808      	subs	r0, #8
 8000642:	4085      	lsls	r5, r0
 8000644:	026d      	lsls	r5, r5, #9
 8000646:	0a6d      	lsrs	r5, r5, #9
 8000648:	b2d8      	uxtb	r0, r3
 800064a:	e002      	b.n	8000652 <__aeabi_i2f+0x32>
 800064c:	2400      	movs	r4, #0
 800064e:	2000      	movs	r0, #0
 8000650:	2500      	movs	r5, #0
 8000652:	05c0      	lsls	r0, r0, #23
 8000654:	4328      	orrs	r0, r5
 8000656:	07e4      	lsls	r4, r4, #31
 8000658:	4320      	orrs	r0, r4
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	2b99      	cmp	r3, #153	@ 0x99
 800065e:	dc14      	bgt.n	800068a <__aeabi_i2f+0x6a>
 8000660:	1f42      	subs	r2, r0, #5
 8000662:	4095      	lsls	r5, r2
 8000664:	002a      	movs	r2, r5
 8000666:	4915      	ldr	r1, [pc, #84]	@ (80006bc <__aeabi_i2f+0x9c>)
 8000668:	4011      	ands	r1, r2
 800066a:	0755      	lsls	r5, r2, #29
 800066c:	d01c      	beq.n	80006a8 <__aeabi_i2f+0x88>
 800066e:	250f      	movs	r5, #15
 8000670:	402a      	ands	r2, r5
 8000672:	2a04      	cmp	r2, #4
 8000674:	d018      	beq.n	80006a8 <__aeabi_i2f+0x88>
 8000676:	3104      	adds	r1, #4
 8000678:	08ca      	lsrs	r2, r1, #3
 800067a:	0149      	lsls	r1, r1, #5
 800067c:	d515      	bpl.n	80006aa <__aeabi_i2f+0x8a>
 800067e:	239f      	movs	r3, #159	@ 0x9f
 8000680:	0252      	lsls	r2, r2, #9
 8000682:	1a18      	subs	r0, r3, r0
 8000684:	0a55      	lsrs	r5, r2, #9
 8000686:	b2c0      	uxtb	r0, r0
 8000688:	e7e3      	b.n	8000652 <__aeabi_i2f+0x32>
 800068a:	2205      	movs	r2, #5
 800068c:	0029      	movs	r1, r5
 800068e:	1a12      	subs	r2, r2, r0
 8000690:	40d1      	lsrs	r1, r2
 8000692:	0002      	movs	r2, r0
 8000694:	321b      	adds	r2, #27
 8000696:	4095      	lsls	r5, r2
 8000698:	002a      	movs	r2, r5
 800069a:	1e55      	subs	r5, r2, #1
 800069c:	41aa      	sbcs	r2, r5
 800069e:	430a      	orrs	r2, r1
 80006a0:	4906      	ldr	r1, [pc, #24]	@ (80006bc <__aeabi_i2f+0x9c>)
 80006a2:	4011      	ands	r1, r2
 80006a4:	0755      	lsls	r5, r2, #29
 80006a6:	d1e2      	bne.n	800066e <__aeabi_i2f+0x4e>
 80006a8:	08ca      	lsrs	r2, r1, #3
 80006aa:	0252      	lsls	r2, r2, #9
 80006ac:	0a55      	lsrs	r5, r2, #9
 80006ae:	b2d8      	uxtb	r0, r3
 80006b0:	e7cf      	b.n	8000652 <__aeabi_i2f+0x32>
 80006b2:	026d      	lsls	r5, r5, #9
 80006b4:	0a6d      	lsrs	r5, r5, #9
 80006b6:	308e      	adds	r0, #142	@ 0x8e
 80006b8:	e7cb      	b.n	8000652 <__aeabi_i2f+0x32>
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	fbffffff 	.word	0xfbffffff

080006c0 <__aeabi_dadd>:
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c2:	464f      	mov	r7, r9
 80006c4:	4646      	mov	r6, r8
 80006c6:	46d6      	mov	lr, sl
 80006c8:	b5c0      	push	{r6, r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	9000      	str	r0, [sp, #0]
 80006ce:	9101      	str	r1, [sp, #4]
 80006d0:	030e      	lsls	r6, r1, #12
 80006d2:	004c      	lsls	r4, r1, #1
 80006d4:	0fcd      	lsrs	r5, r1, #31
 80006d6:	0a71      	lsrs	r1, r6, #9
 80006d8:	9e00      	ldr	r6, [sp, #0]
 80006da:	005f      	lsls	r7, r3, #1
 80006dc:	0f76      	lsrs	r6, r6, #29
 80006de:	430e      	orrs	r6, r1
 80006e0:	9900      	ldr	r1, [sp, #0]
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	00c9      	lsls	r1, r1, #3
 80006e8:	4689      	mov	r9, r1
 80006ea:	0319      	lsls	r1, r3, #12
 80006ec:	0d7b      	lsrs	r3, r7, #21
 80006ee:	4698      	mov	r8, r3
 80006f0:	9b01      	ldr	r3, [sp, #4]
 80006f2:	0a49      	lsrs	r1, r1, #9
 80006f4:	0fdb      	lsrs	r3, r3, #31
 80006f6:	469c      	mov	ip, r3
 80006f8:	9b00      	ldr	r3, [sp, #0]
 80006fa:	9a00      	ldr	r2, [sp, #0]
 80006fc:	0f5b      	lsrs	r3, r3, #29
 80006fe:	430b      	orrs	r3, r1
 8000700:	4641      	mov	r1, r8
 8000702:	0d64      	lsrs	r4, r4, #21
 8000704:	00d2      	lsls	r2, r2, #3
 8000706:	1a61      	subs	r1, r4, r1
 8000708:	4565      	cmp	r5, ip
 800070a:	d100      	bne.n	800070e <__aeabi_dadd+0x4e>
 800070c:	e0a6      	b.n	800085c <__aeabi_dadd+0x19c>
 800070e:	2900      	cmp	r1, #0
 8000710:	dd72      	ble.n	80007f8 <__aeabi_dadd+0x138>
 8000712:	4647      	mov	r7, r8
 8000714:	2f00      	cmp	r7, #0
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x5a>
 8000718:	e0dd      	b.n	80008d6 <__aeabi_dadd+0x216>
 800071a:	4fcc      	ldr	r7, [pc, #816]	@ (8000a4c <__aeabi_dadd+0x38c>)
 800071c:	42bc      	cmp	r4, r7
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x62>
 8000720:	e19a      	b.n	8000a58 <__aeabi_dadd+0x398>
 8000722:	2701      	movs	r7, #1
 8000724:	2938      	cmp	r1, #56	@ 0x38
 8000726:	dc17      	bgt.n	8000758 <__aeabi_dadd+0x98>
 8000728:	2780      	movs	r7, #128	@ 0x80
 800072a:	043f      	lsls	r7, r7, #16
 800072c:	433b      	orrs	r3, r7
 800072e:	291f      	cmp	r1, #31
 8000730:	dd00      	ble.n	8000734 <__aeabi_dadd+0x74>
 8000732:	e1dd      	b.n	8000af0 <__aeabi_dadd+0x430>
 8000734:	2720      	movs	r7, #32
 8000736:	1a78      	subs	r0, r7, r1
 8000738:	001f      	movs	r7, r3
 800073a:	4087      	lsls	r7, r0
 800073c:	46ba      	mov	sl, r7
 800073e:	0017      	movs	r7, r2
 8000740:	40cf      	lsrs	r7, r1
 8000742:	4684      	mov	ip, r0
 8000744:	0038      	movs	r0, r7
 8000746:	4657      	mov	r7, sl
 8000748:	4307      	orrs	r7, r0
 800074a:	4660      	mov	r0, ip
 800074c:	4082      	lsls	r2, r0
 800074e:	40cb      	lsrs	r3, r1
 8000750:	1e50      	subs	r0, r2, #1
 8000752:	4182      	sbcs	r2, r0
 8000754:	1af6      	subs	r6, r6, r3
 8000756:	4317      	orrs	r7, r2
 8000758:	464b      	mov	r3, r9
 800075a:	1bdf      	subs	r7, r3, r7
 800075c:	45b9      	cmp	r9, r7
 800075e:	4180      	sbcs	r0, r0
 8000760:	4240      	negs	r0, r0
 8000762:	1a36      	subs	r6, r6, r0
 8000764:	0233      	lsls	r3, r6, #8
 8000766:	d400      	bmi.n	800076a <__aeabi_dadd+0xaa>
 8000768:	e0ff      	b.n	800096a <__aeabi_dadd+0x2aa>
 800076a:	0276      	lsls	r6, r6, #9
 800076c:	0a76      	lsrs	r6, r6, #9
 800076e:	2e00      	cmp	r6, #0
 8000770:	d100      	bne.n	8000774 <__aeabi_dadd+0xb4>
 8000772:	e13c      	b.n	80009ee <__aeabi_dadd+0x32e>
 8000774:	0030      	movs	r0, r6
 8000776:	f000 ff4b 	bl	8001610 <__clzsi2>
 800077a:	0003      	movs	r3, r0
 800077c:	3b08      	subs	r3, #8
 800077e:	2120      	movs	r1, #32
 8000780:	0038      	movs	r0, r7
 8000782:	1aca      	subs	r2, r1, r3
 8000784:	40d0      	lsrs	r0, r2
 8000786:	409e      	lsls	r6, r3
 8000788:	0002      	movs	r2, r0
 800078a:	409f      	lsls	r7, r3
 800078c:	4332      	orrs	r2, r6
 800078e:	429c      	cmp	r4, r3
 8000790:	dd00      	ble.n	8000794 <__aeabi_dadd+0xd4>
 8000792:	e1a6      	b.n	8000ae2 <__aeabi_dadd+0x422>
 8000794:	1b18      	subs	r0, r3, r4
 8000796:	3001      	adds	r0, #1
 8000798:	1a09      	subs	r1, r1, r0
 800079a:	003e      	movs	r6, r7
 800079c:	408f      	lsls	r7, r1
 800079e:	40c6      	lsrs	r6, r0
 80007a0:	1e7b      	subs	r3, r7, #1
 80007a2:	419f      	sbcs	r7, r3
 80007a4:	0013      	movs	r3, r2
 80007a6:	408b      	lsls	r3, r1
 80007a8:	4337      	orrs	r7, r6
 80007aa:	431f      	orrs	r7, r3
 80007ac:	40c2      	lsrs	r2, r0
 80007ae:	003b      	movs	r3, r7
 80007b0:	0016      	movs	r6, r2
 80007b2:	2400      	movs	r4, #0
 80007b4:	4313      	orrs	r3, r2
 80007b6:	d100      	bne.n	80007ba <__aeabi_dadd+0xfa>
 80007b8:	e1df      	b.n	8000b7a <__aeabi_dadd+0x4ba>
 80007ba:	077b      	lsls	r3, r7, #29
 80007bc:	d100      	bne.n	80007c0 <__aeabi_dadd+0x100>
 80007be:	e332      	b.n	8000e26 <__aeabi_dadd+0x766>
 80007c0:	230f      	movs	r3, #15
 80007c2:	003a      	movs	r2, r7
 80007c4:	403b      	ands	r3, r7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d004      	beq.n	80007d4 <__aeabi_dadd+0x114>
 80007ca:	1d3a      	adds	r2, r7, #4
 80007cc:	42ba      	cmp	r2, r7
 80007ce:	41bf      	sbcs	r7, r7
 80007d0:	427f      	negs	r7, r7
 80007d2:	19f6      	adds	r6, r6, r7
 80007d4:	0233      	lsls	r3, r6, #8
 80007d6:	d400      	bmi.n	80007da <__aeabi_dadd+0x11a>
 80007d8:	e323      	b.n	8000e22 <__aeabi_dadd+0x762>
 80007da:	4b9c      	ldr	r3, [pc, #624]	@ (8000a4c <__aeabi_dadd+0x38c>)
 80007dc:	3401      	adds	r4, #1
 80007de:	429c      	cmp	r4, r3
 80007e0:	d100      	bne.n	80007e4 <__aeabi_dadd+0x124>
 80007e2:	e0b4      	b.n	800094e <__aeabi_dadd+0x28e>
 80007e4:	4b9a      	ldr	r3, [pc, #616]	@ (8000a50 <__aeabi_dadd+0x390>)
 80007e6:	0564      	lsls	r4, r4, #21
 80007e8:	401e      	ands	r6, r3
 80007ea:	0d64      	lsrs	r4, r4, #21
 80007ec:	0777      	lsls	r7, r6, #29
 80007ee:	08d2      	lsrs	r2, r2, #3
 80007f0:	0276      	lsls	r6, r6, #9
 80007f2:	4317      	orrs	r7, r2
 80007f4:	0b36      	lsrs	r6, r6, #12
 80007f6:	e0ac      	b.n	8000952 <__aeabi_dadd+0x292>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x13e>
 80007fc:	e07e      	b.n	80008fc <__aeabi_dadd+0x23c>
 80007fe:	4641      	mov	r1, r8
 8000800:	1b09      	subs	r1, r1, r4
 8000802:	2c00      	cmp	r4, #0
 8000804:	d000      	beq.n	8000808 <__aeabi_dadd+0x148>
 8000806:	e160      	b.n	8000aca <__aeabi_dadd+0x40a>
 8000808:	0034      	movs	r4, r6
 800080a:	4648      	mov	r0, r9
 800080c:	4304      	orrs	r4, r0
 800080e:	d100      	bne.n	8000812 <__aeabi_dadd+0x152>
 8000810:	e1c9      	b.n	8000ba6 <__aeabi_dadd+0x4e6>
 8000812:	1e4c      	subs	r4, r1, #1
 8000814:	2901      	cmp	r1, #1
 8000816:	d100      	bne.n	800081a <__aeabi_dadd+0x15a>
 8000818:	e22e      	b.n	8000c78 <__aeabi_dadd+0x5b8>
 800081a:	4d8c      	ldr	r5, [pc, #560]	@ (8000a4c <__aeabi_dadd+0x38c>)
 800081c:	42a9      	cmp	r1, r5
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0x162>
 8000820:	e224      	b.n	8000c6c <__aeabi_dadd+0x5ac>
 8000822:	2701      	movs	r7, #1
 8000824:	2c38      	cmp	r4, #56	@ 0x38
 8000826:	dc11      	bgt.n	800084c <__aeabi_dadd+0x18c>
 8000828:	0021      	movs	r1, r4
 800082a:	291f      	cmp	r1, #31
 800082c:	dd00      	ble.n	8000830 <__aeabi_dadd+0x170>
 800082e:	e20b      	b.n	8000c48 <__aeabi_dadd+0x588>
 8000830:	2420      	movs	r4, #32
 8000832:	0037      	movs	r7, r6
 8000834:	4648      	mov	r0, r9
 8000836:	1a64      	subs	r4, r4, r1
 8000838:	40a7      	lsls	r7, r4
 800083a:	40c8      	lsrs	r0, r1
 800083c:	4307      	orrs	r7, r0
 800083e:	4648      	mov	r0, r9
 8000840:	40a0      	lsls	r0, r4
 8000842:	40ce      	lsrs	r6, r1
 8000844:	1e44      	subs	r4, r0, #1
 8000846:	41a0      	sbcs	r0, r4
 8000848:	1b9b      	subs	r3, r3, r6
 800084a:	4307      	orrs	r7, r0
 800084c:	1bd7      	subs	r7, r2, r7
 800084e:	42ba      	cmp	r2, r7
 8000850:	4192      	sbcs	r2, r2
 8000852:	4252      	negs	r2, r2
 8000854:	4665      	mov	r5, ip
 8000856:	4644      	mov	r4, r8
 8000858:	1a9e      	subs	r6, r3, r2
 800085a:	e783      	b.n	8000764 <__aeabi_dadd+0xa4>
 800085c:	2900      	cmp	r1, #0
 800085e:	dc00      	bgt.n	8000862 <__aeabi_dadd+0x1a2>
 8000860:	e09c      	b.n	800099c <__aeabi_dadd+0x2dc>
 8000862:	4647      	mov	r7, r8
 8000864:	2f00      	cmp	r7, #0
 8000866:	d167      	bne.n	8000938 <__aeabi_dadd+0x278>
 8000868:	001f      	movs	r7, r3
 800086a:	4317      	orrs	r7, r2
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x1b0>
 800086e:	e0e4      	b.n	8000a3a <__aeabi_dadd+0x37a>
 8000870:	1e48      	subs	r0, r1, #1
 8000872:	2901      	cmp	r1, #1
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x1b8>
 8000876:	e19b      	b.n	8000bb0 <__aeabi_dadd+0x4f0>
 8000878:	4f74      	ldr	r7, [pc, #464]	@ (8000a4c <__aeabi_dadd+0x38c>)
 800087a:	42b9      	cmp	r1, r7
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x1c0>
 800087e:	e0eb      	b.n	8000a58 <__aeabi_dadd+0x398>
 8000880:	2701      	movs	r7, #1
 8000882:	0001      	movs	r1, r0
 8000884:	2838      	cmp	r0, #56	@ 0x38
 8000886:	dc11      	bgt.n	80008ac <__aeabi_dadd+0x1ec>
 8000888:	291f      	cmp	r1, #31
 800088a:	dd00      	ble.n	800088e <__aeabi_dadd+0x1ce>
 800088c:	e1c7      	b.n	8000c1e <__aeabi_dadd+0x55e>
 800088e:	2720      	movs	r7, #32
 8000890:	1a78      	subs	r0, r7, r1
 8000892:	001f      	movs	r7, r3
 8000894:	4684      	mov	ip, r0
 8000896:	4087      	lsls	r7, r0
 8000898:	0010      	movs	r0, r2
 800089a:	40c8      	lsrs	r0, r1
 800089c:	4307      	orrs	r7, r0
 800089e:	4660      	mov	r0, ip
 80008a0:	4082      	lsls	r2, r0
 80008a2:	40cb      	lsrs	r3, r1
 80008a4:	1e50      	subs	r0, r2, #1
 80008a6:	4182      	sbcs	r2, r0
 80008a8:	18f6      	adds	r6, r6, r3
 80008aa:	4317      	orrs	r7, r2
 80008ac:	444f      	add	r7, r9
 80008ae:	454f      	cmp	r7, r9
 80008b0:	4180      	sbcs	r0, r0
 80008b2:	4240      	negs	r0, r0
 80008b4:	1836      	adds	r6, r6, r0
 80008b6:	0233      	lsls	r3, r6, #8
 80008b8:	d557      	bpl.n	800096a <__aeabi_dadd+0x2aa>
 80008ba:	4b64      	ldr	r3, [pc, #400]	@ (8000a4c <__aeabi_dadd+0x38c>)
 80008bc:	3401      	adds	r4, #1
 80008be:	429c      	cmp	r4, r3
 80008c0:	d045      	beq.n	800094e <__aeabi_dadd+0x28e>
 80008c2:	2101      	movs	r1, #1
 80008c4:	4b62      	ldr	r3, [pc, #392]	@ (8000a50 <__aeabi_dadd+0x390>)
 80008c6:	087a      	lsrs	r2, r7, #1
 80008c8:	401e      	ands	r6, r3
 80008ca:	4039      	ands	r1, r7
 80008cc:	430a      	orrs	r2, r1
 80008ce:	07f7      	lsls	r7, r6, #31
 80008d0:	4317      	orrs	r7, r2
 80008d2:	0876      	lsrs	r6, r6, #1
 80008d4:	e771      	b.n	80007ba <__aeabi_dadd+0xfa>
 80008d6:	001f      	movs	r7, r3
 80008d8:	4317      	orrs	r7, r2
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x21e>
 80008dc:	e0ad      	b.n	8000a3a <__aeabi_dadd+0x37a>
 80008de:	1e4f      	subs	r7, r1, #1
 80008e0:	46bc      	mov	ip, r7
 80008e2:	2901      	cmp	r1, #1
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x228>
 80008e6:	e182      	b.n	8000bee <__aeabi_dadd+0x52e>
 80008e8:	4f58      	ldr	r7, [pc, #352]	@ (8000a4c <__aeabi_dadd+0x38c>)
 80008ea:	42b9      	cmp	r1, r7
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x230>
 80008ee:	e190      	b.n	8000c12 <__aeabi_dadd+0x552>
 80008f0:	4661      	mov	r1, ip
 80008f2:	2701      	movs	r7, #1
 80008f4:	2938      	cmp	r1, #56	@ 0x38
 80008f6:	dd00      	ble.n	80008fa <__aeabi_dadd+0x23a>
 80008f8:	e72e      	b.n	8000758 <__aeabi_dadd+0x98>
 80008fa:	e718      	b.n	800072e <__aeabi_dadd+0x6e>
 80008fc:	4f55      	ldr	r7, [pc, #340]	@ (8000a54 <__aeabi_dadd+0x394>)
 80008fe:	1c61      	adds	r1, r4, #1
 8000900:	4239      	tst	r1, r7
 8000902:	d000      	beq.n	8000906 <__aeabi_dadd+0x246>
 8000904:	e0d0      	b.n	8000aa8 <__aeabi_dadd+0x3e8>
 8000906:	0031      	movs	r1, r6
 8000908:	4648      	mov	r0, r9
 800090a:	001f      	movs	r7, r3
 800090c:	4301      	orrs	r1, r0
 800090e:	4317      	orrs	r7, r2
 8000910:	2c00      	cmp	r4, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x256>
 8000914:	e13d      	b.n	8000b92 <__aeabi_dadd+0x4d2>
 8000916:	2900      	cmp	r1, #0
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x25c>
 800091a:	e1bc      	b.n	8000c96 <__aeabi_dadd+0x5d6>
 800091c:	2f00      	cmp	r7, #0
 800091e:	d000      	beq.n	8000922 <__aeabi_dadd+0x262>
 8000920:	e1bf      	b.n	8000ca2 <__aeabi_dadd+0x5e2>
 8000922:	464b      	mov	r3, r9
 8000924:	2100      	movs	r1, #0
 8000926:	08d8      	lsrs	r0, r3, #3
 8000928:	0777      	lsls	r7, r6, #29
 800092a:	4307      	orrs	r7, r0
 800092c:	08f0      	lsrs	r0, r6, #3
 800092e:	0306      	lsls	r6, r0, #12
 8000930:	054c      	lsls	r4, r1, #21
 8000932:	0b36      	lsrs	r6, r6, #12
 8000934:	0d64      	lsrs	r4, r4, #21
 8000936:	e00c      	b.n	8000952 <__aeabi_dadd+0x292>
 8000938:	4f44      	ldr	r7, [pc, #272]	@ (8000a4c <__aeabi_dadd+0x38c>)
 800093a:	42bc      	cmp	r4, r7
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x280>
 800093e:	e08b      	b.n	8000a58 <__aeabi_dadd+0x398>
 8000940:	2701      	movs	r7, #1
 8000942:	2938      	cmp	r1, #56	@ 0x38
 8000944:	dcb2      	bgt.n	80008ac <__aeabi_dadd+0x1ec>
 8000946:	2780      	movs	r7, #128	@ 0x80
 8000948:	043f      	lsls	r7, r7, #16
 800094a:	433b      	orrs	r3, r7
 800094c:	e79c      	b.n	8000888 <__aeabi_dadd+0x1c8>
 800094e:	2600      	movs	r6, #0
 8000950:	2700      	movs	r7, #0
 8000952:	0524      	lsls	r4, r4, #20
 8000954:	4334      	orrs	r4, r6
 8000956:	07ed      	lsls	r5, r5, #31
 8000958:	432c      	orrs	r4, r5
 800095a:	0038      	movs	r0, r7
 800095c:	0021      	movs	r1, r4
 800095e:	b002      	add	sp, #8
 8000960:	bce0      	pop	{r5, r6, r7}
 8000962:	46ba      	mov	sl, r7
 8000964:	46b1      	mov	r9, r6
 8000966:	46a8      	mov	r8, r5
 8000968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096a:	077b      	lsls	r3, r7, #29
 800096c:	d004      	beq.n	8000978 <__aeabi_dadd+0x2b8>
 800096e:	230f      	movs	r3, #15
 8000970:	403b      	ands	r3, r7
 8000972:	2b04      	cmp	r3, #4
 8000974:	d000      	beq.n	8000978 <__aeabi_dadd+0x2b8>
 8000976:	e728      	b.n	80007ca <__aeabi_dadd+0x10a>
 8000978:	08f8      	lsrs	r0, r7, #3
 800097a:	4b34      	ldr	r3, [pc, #208]	@ (8000a4c <__aeabi_dadd+0x38c>)
 800097c:	0777      	lsls	r7, r6, #29
 800097e:	4307      	orrs	r7, r0
 8000980:	08f0      	lsrs	r0, r6, #3
 8000982:	429c      	cmp	r4, r3
 8000984:	d000      	beq.n	8000988 <__aeabi_dadd+0x2c8>
 8000986:	e24a      	b.n	8000e1e <__aeabi_dadd+0x75e>
 8000988:	003b      	movs	r3, r7
 800098a:	4303      	orrs	r3, r0
 800098c:	d059      	beq.n	8000a42 <__aeabi_dadd+0x382>
 800098e:	2680      	movs	r6, #128	@ 0x80
 8000990:	0336      	lsls	r6, r6, #12
 8000992:	4306      	orrs	r6, r0
 8000994:	0336      	lsls	r6, r6, #12
 8000996:	4c2d      	ldr	r4, [pc, #180]	@ (8000a4c <__aeabi_dadd+0x38c>)
 8000998:	0b36      	lsrs	r6, r6, #12
 800099a:	e7da      	b.n	8000952 <__aeabi_dadd+0x292>
 800099c:	2900      	cmp	r1, #0
 800099e:	d061      	beq.n	8000a64 <__aeabi_dadd+0x3a4>
 80009a0:	4641      	mov	r1, r8
 80009a2:	1b09      	subs	r1, r1, r4
 80009a4:	2c00      	cmp	r4, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_dadd+0x2ea>
 80009a8:	e0b9      	b.n	8000b1e <__aeabi_dadd+0x45e>
 80009aa:	4c28      	ldr	r4, [pc, #160]	@ (8000a4c <__aeabi_dadd+0x38c>)
 80009ac:	45a0      	cmp	r8, r4
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dadd+0x2f2>
 80009b0:	e1a5      	b.n	8000cfe <__aeabi_dadd+0x63e>
 80009b2:	2701      	movs	r7, #1
 80009b4:	2938      	cmp	r1, #56	@ 0x38
 80009b6:	dc13      	bgt.n	80009e0 <__aeabi_dadd+0x320>
 80009b8:	2480      	movs	r4, #128	@ 0x80
 80009ba:	0424      	lsls	r4, r4, #16
 80009bc:	4326      	orrs	r6, r4
 80009be:	291f      	cmp	r1, #31
 80009c0:	dd00      	ble.n	80009c4 <__aeabi_dadd+0x304>
 80009c2:	e1c8      	b.n	8000d56 <__aeabi_dadd+0x696>
 80009c4:	2420      	movs	r4, #32
 80009c6:	0037      	movs	r7, r6
 80009c8:	4648      	mov	r0, r9
 80009ca:	1a64      	subs	r4, r4, r1
 80009cc:	40a7      	lsls	r7, r4
 80009ce:	40c8      	lsrs	r0, r1
 80009d0:	4307      	orrs	r7, r0
 80009d2:	4648      	mov	r0, r9
 80009d4:	40a0      	lsls	r0, r4
 80009d6:	40ce      	lsrs	r6, r1
 80009d8:	1e44      	subs	r4, r0, #1
 80009da:	41a0      	sbcs	r0, r4
 80009dc:	199b      	adds	r3, r3, r6
 80009de:	4307      	orrs	r7, r0
 80009e0:	18bf      	adds	r7, r7, r2
 80009e2:	4297      	cmp	r7, r2
 80009e4:	4192      	sbcs	r2, r2
 80009e6:	4252      	negs	r2, r2
 80009e8:	4644      	mov	r4, r8
 80009ea:	18d6      	adds	r6, r2, r3
 80009ec:	e763      	b.n	80008b6 <__aeabi_dadd+0x1f6>
 80009ee:	0038      	movs	r0, r7
 80009f0:	f000 fe0e 	bl	8001610 <__clzsi2>
 80009f4:	0003      	movs	r3, r0
 80009f6:	3318      	adds	r3, #24
 80009f8:	2b1f      	cmp	r3, #31
 80009fa:	dc00      	bgt.n	80009fe <__aeabi_dadd+0x33e>
 80009fc:	e6bf      	b.n	800077e <__aeabi_dadd+0xbe>
 80009fe:	003a      	movs	r2, r7
 8000a00:	3808      	subs	r0, #8
 8000a02:	4082      	lsls	r2, r0
 8000a04:	429c      	cmp	r4, r3
 8000a06:	dd00      	ble.n	8000a0a <__aeabi_dadd+0x34a>
 8000a08:	e083      	b.n	8000b12 <__aeabi_dadd+0x452>
 8000a0a:	1b1b      	subs	r3, r3, r4
 8000a0c:	1c58      	adds	r0, r3, #1
 8000a0e:	281f      	cmp	r0, #31
 8000a10:	dc00      	bgt.n	8000a14 <__aeabi_dadd+0x354>
 8000a12:	e1b4      	b.n	8000d7e <__aeabi_dadd+0x6be>
 8000a14:	0017      	movs	r7, r2
 8000a16:	3b1f      	subs	r3, #31
 8000a18:	40df      	lsrs	r7, r3
 8000a1a:	2820      	cmp	r0, #32
 8000a1c:	d005      	beq.n	8000a2a <__aeabi_dadd+0x36a>
 8000a1e:	2340      	movs	r3, #64	@ 0x40
 8000a20:	1a1b      	subs	r3, r3, r0
 8000a22:	409a      	lsls	r2, r3
 8000a24:	1e53      	subs	r3, r2, #1
 8000a26:	419a      	sbcs	r2, r3
 8000a28:	4317      	orrs	r7, r2
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	2f00      	cmp	r7, #0
 8000a2e:	d00a      	beq.n	8000a46 <__aeabi_dadd+0x386>
 8000a30:	077b      	lsls	r3, r7, #29
 8000a32:	d000      	beq.n	8000a36 <__aeabi_dadd+0x376>
 8000a34:	e6c4      	b.n	80007c0 <__aeabi_dadd+0x100>
 8000a36:	0026      	movs	r6, r4
 8000a38:	e79e      	b.n	8000978 <__aeabi_dadd+0x2b8>
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	000c      	movs	r4, r1
 8000a3e:	08d8      	lsrs	r0, r3, #3
 8000a40:	e79b      	b.n	800097a <__aeabi_dadd+0x2ba>
 8000a42:	2700      	movs	r7, #0
 8000a44:	4c01      	ldr	r4, [pc, #4]	@ (8000a4c <__aeabi_dadd+0x38c>)
 8000a46:	2600      	movs	r6, #0
 8000a48:	e783      	b.n	8000952 <__aeabi_dadd+0x292>
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	000007ff 	.word	0x000007ff
 8000a50:	ff7fffff 	.word	0xff7fffff
 8000a54:	000007fe 	.word	0x000007fe
 8000a58:	464b      	mov	r3, r9
 8000a5a:	0777      	lsls	r7, r6, #29
 8000a5c:	08d8      	lsrs	r0, r3, #3
 8000a5e:	4307      	orrs	r7, r0
 8000a60:	08f0      	lsrs	r0, r6, #3
 8000a62:	e791      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000a64:	4fcd      	ldr	r7, [pc, #820]	@ (8000d9c <__aeabi_dadd+0x6dc>)
 8000a66:	1c61      	adds	r1, r4, #1
 8000a68:	4239      	tst	r1, r7
 8000a6a:	d16b      	bne.n	8000b44 <__aeabi_dadd+0x484>
 8000a6c:	0031      	movs	r1, r6
 8000a6e:	4648      	mov	r0, r9
 8000a70:	4301      	orrs	r1, r0
 8000a72:	2c00      	cmp	r4, #0
 8000a74:	d000      	beq.n	8000a78 <__aeabi_dadd+0x3b8>
 8000a76:	e14b      	b.n	8000d10 <__aeabi_dadd+0x650>
 8000a78:	001f      	movs	r7, r3
 8000a7a:	4317      	orrs	r7, r2
 8000a7c:	2900      	cmp	r1, #0
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dadd+0x3c2>
 8000a80:	e181      	b.n	8000d86 <__aeabi_dadd+0x6c6>
 8000a82:	2f00      	cmp	r7, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dadd+0x3c8>
 8000a86:	e74c      	b.n	8000922 <__aeabi_dadd+0x262>
 8000a88:	444a      	add	r2, r9
 8000a8a:	454a      	cmp	r2, r9
 8000a8c:	4180      	sbcs	r0, r0
 8000a8e:	18f6      	adds	r6, r6, r3
 8000a90:	4240      	negs	r0, r0
 8000a92:	1836      	adds	r6, r6, r0
 8000a94:	0233      	lsls	r3, r6, #8
 8000a96:	d500      	bpl.n	8000a9a <__aeabi_dadd+0x3da>
 8000a98:	e1b0      	b.n	8000dfc <__aeabi_dadd+0x73c>
 8000a9a:	0017      	movs	r7, r2
 8000a9c:	4691      	mov	r9, r2
 8000a9e:	4337      	orrs	r7, r6
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dadd+0x3e4>
 8000aa2:	e73e      	b.n	8000922 <__aeabi_dadd+0x262>
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	e754      	b.n	8000952 <__aeabi_dadd+0x292>
 8000aa8:	4649      	mov	r1, r9
 8000aaa:	1a89      	subs	r1, r1, r2
 8000aac:	4688      	mov	r8, r1
 8000aae:	45c1      	cmp	r9, r8
 8000ab0:	41bf      	sbcs	r7, r7
 8000ab2:	1af1      	subs	r1, r6, r3
 8000ab4:	427f      	negs	r7, r7
 8000ab6:	1bc9      	subs	r1, r1, r7
 8000ab8:	020f      	lsls	r7, r1, #8
 8000aba:	d461      	bmi.n	8000b80 <__aeabi_dadd+0x4c0>
 8000abc:	4647      	mov	r7, r8
 8000abe:	430f      	orrs	r7, r1
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_dadd+0x404>
 8000ac2:	e0bd      	b.n	8000c40 <__aeabi_dadd+0x580>
 8000ac4:	000e      	movs	r6, r1
 8000ac6:	4647      	mov	r7, r8
 8000ac8:	e651      	b.n	800076e <__aeabi_dadd+0xae>
 8000aca:	4cb5      	ldr	r4, [pc, #724]	@ (8000da0 <__aeabi_dadd+0x6e0>)
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dadd+0x412>
 8000ad0:	e100      	b.n	8000cd4 <__aeabi_dadd+0x614>
 8000ad2:	2701      	movs	r7, #1
 8000ad4:	2938      	cmp	r1, #56	@ 0x38
 8000ad6:	dd00      	ble.n	8000ada <__aeabi_dadd+0x41a>
 8000ad8:	e6b8      	b.n	800084c <__aeabi_dadd+0x18c>
 8000ada:	2480      	movs	r4, #128	@ 0x80
 8000adc:	0424      	lsls	r4, r4, #16
 8000ade:	4326      	orrs	r6, r4
 8000ae0:	e6a3      	b.n	800082a <__aeabi_dadd+0x16a>
 8000ae2:	4eb0      	ldr	r6, [pc, #704]	@ (8000da4 <__aeabi_dadd+0x6e4>)
 8000ae4:	1ae4      	subs	r4, r4, r3
 8000ae6:	4016      	ands	r6, r2
 8000ae8:	077b      	lsls	r3, r7, #29
 8000aea:	d000      	beq.n	8000aee <__aeabi_dadd+0x42e>
 8000aec:	e73f      	b.n	800096e <__aeabi_dadd+0x2ae>
 8000aee:	e743      	b.n	8000978 <__aeabi_dadd+0x2b8>
 8000af0:	000f      	movs	r7, r1
 8000af2:	0018      	movs	r0, r3
 8000af4:	3f20      	subs	r7, #32
 8000af6:	40f8      	lsrs	r0, r7
 8000af8:	4684      	mov	ip, r0
 8000afa:	2920      	cmp	r1, #32
 8000afc:	d003      	beq.n	8000b06 <__aeabi_dadd+0x446>
 8000afe:	2740      	movs	r7, #64	@ 0x40
 8000b00:	1a79      	subs	r1, r7, r1
 8000b02:	408b      	lsls	r3, r1
 8000b04:	431a      	orrs	r2, r3
 8000b06:	1e53      	subs	r3, r2, #1
 8000b08:	419a      	sbcs	r2, r3
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	0017      	movs	r7, r2
 8000b0e:	431f      	orrs	r7, r3
 8000b10:	e622      	b.n	8000758 <__aeabi_dadd+0x98>
 8000b12:	48a4      	ldr	r0, [pc, #656]	@ (8000da4 <__aeabi_dadd+0x6e4>)
 8000b14:	1ae1      	subs	r1, r4, r3
 8000b16:	4010      	ands	r0, r2
 8000b18:	0747      	lsls	r7, r0, #29
 8000b1a:	08c0      	lsrs	r0, r0, #3
 8000b1c:	e707      	b.n	800092e <__aeabi_dadd+0x26e>
 8000b1e:	0034      	movs	r4, r6
 8000b20:	4648      	mov	r0, r9
 8000b22:	4304      	orrs	r4, r0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x468>
 8000b26:	e0fa      	b.n	8000d1e <__aeabi_dadd+0x65e>
 8000b28:	1e4c      	subs	r4, r1, #1
 8000b2a:	2901      	cmp	r1, #1
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0x470>
 8000b2e:	e0d7      	b.n	8000ce0 <__aeabi_dadd+0x620>
 8000b30:	4f9b      	ldr	r7, [pc, #620]	@ (8000da0 <__aeabi_dadd+0x6e0>)
 8000b32:	42b9      	cmp	r1, r7
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x478>
 8000b36:	e0e2      	b.n	8000cfe <__aeabi_dadd+0x63e>
 8000b38:	2701      	movs	r7, #1
 8000b3a:	2c38      	cmp	r4, #56	@ 0x38
 8000b3c:	dd00      	ble.n	8000b40 <__aeabi_dadd+0x480>
 8000b3e:	e74f      	b.n	80009e0 <__aeabi_dadd+0x320>
 8000b40:	0021      	movs	r1, r4
 8000b42:	e73c      	b.n	80009be <__aeabi_dadd+0x2fe>
 8000b44:	4c96      	ldr	r4, [pc, #600]	@ (8000da0 <__aeabi_dadd+0x6e0>)
 8000b46:	42a1      	cmp	r1, r4
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x48c>
 8000b4a:	e0dd      	b.n	8000d08 <__aeabi_dadd+0x648>
 8000b4c:	444a      	add	r2, r9
 8000b4e:	454a      	cmp	r2, r9
 8000b50:	4180      	sbcs	r0, r0
 8000b52:	18f3      	adds	r3, r6, r3
 8000b54:	4240      	negs	r0, r0
 8000b56:	1818      	adds	r0, r3, r0
 8000b58:	07c7      	lsls	r7, r0, #31
 8000b5a:	0852      	lsrs	r2, r2, #1
 8000b5c:	4317      	orrs	r7, r2
 8000b5e:	0846      	lsrs	r6, r0, #1
 8000b60:	0752      	lsls	r2, r2, #29
 8000b62:	d005      	beq.n	8000b70 <__aeabi_dadd+0x4b0>
 8000b64:	220f      	movs	r2, #15
 8000b66:	000c      	movs	r4, r1
 8000b68:	403a      	ands	r2, r7
 8000b6a:	2a04      	cmp	r2, #4
 8000b6c:	d000      	beq.n	8000b70 <__aeabi_dadd+0x4b0>
 8000b6e:	e62c      	b.n	80007ca <__aeabi_dadd+0x10a>
 8000b70:	0776      	lsls	r6, r6, #29
 8000b72:	08ff      	lsrs	r7, r7, #3
 8000b74:	4337      	orrs	r7, r6
 8000b76:	0900      	lsrs	r0, r0, #4
 8000b78:	e6d9      	b.n	800092e <__aeabi_dadd+0x26e>
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	e6e8      	b.n	8000952 <__aeabi_dadd+0x292>
 8000b80:	4649      	mov	r1, r9
 8000b82:	1a57      	subs	r7, r2, r1
 8000b84:	42ba      	cmp	r2, r7
 8000b86:	4192      	sbcs	r2, r2
 8000b88:	1b9e      	subs	r6, r3, r6
 8000b8a:	4252      	negs	r2, r2
 8000b8c:	4665      	mov	r5, ip
 8000b8e:	1ab6      	subs	r6, r6, r2
 8000b90:	e5ed      	b.n	800076e <__aeabi_dadd+0xae>
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d000      	beq.n	8000b98 <__aeabi_dadd+0x4d8>
 8000b96:	e0c6      	b.n	8000d26 <__aeabi_dadd+0x666>
 8000b98:	2f00      	cmp	r7, #0
 8000b9a:	d167      	bne.n	8000c6c <__aeabi_dadd+0x5ac>
 8000b9c:	2680      	movs	r6, #128	@ 0x80
 8000b9e:	2500      	movs	r5, #0
 8000ba0:	4c7f      	ldr	r4, [pc, #508]	@ (8000da0 <__aeabi_dadd+0x6e0>)
 8000ba2:	0336      	lsls	r6, r6, #12
 8000ba4:	e6d5      	b.n	8000952 <__aeabi_dadd+0x292>
 8000ba6:	4665      	mov	r5, ip
 8000ba8:	000c      	movs	r4, r1
 8000baa:	001e      	movs	r6, r3
 8000bac:	08d0      	lsrs	r0, r2, #3
 8000bae:	e6e4      	b.n	800097a <__aeabi_dadd+0x2ba>
 8000bb0:	444a      	add	r2, r9
 8000bb2:	454a      	cmp	r2, r9
 8000bb4:	4180      	sbcs	r0, r0
 8000bb6:	18f3      	adds	r3, r6, r3
 8000bb8:	4240      	negs	r0, r0
 8000bba:	1818      	adds	r0, r3, r0
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0203      	lsls	r3, r0, #8
 8000bc0:	d400      	bmi.n	8000bc4 <__aeabi_dadd+0x504>
 8000bc2:	e096      	b.n	8000cf2 <__aeabi_dadd+0x632>
 8000bc4:	4b77      	ldr	r3, [pc, #476]	@ (8000da4 <__aeabi_dadd+0x6e4>)
 8000bc6:	0849      	lsrs	r1, r1, #1
 8000bc8:	4018      	ands	r0, r3
 8000bca:	07c3      	lsls	r3, r0, #31
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	0844      	lsrs	r4, r0, #1
 8000bd0:	0749      	lsls	r1, r1, #29
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dadd+0x516>
 8000bd4:	e129      	b.n	8000e2a <__aeabi_dadd+0x76a>
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	401a      	ands	r2, r3
 8000bda:	2a04      	cmp	r2, #4
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x520>
 8000bde:	e0ea      	b.n	8000db6 <__aeabi_dadd+0x6f6>
 8000be0:	1d1f      	adds	r7, r3, #4
 8000be2:	429f      	cmp	r7, r3
 8000be4:	41b6      	sbcs	r6, r6
 8000be6:	4276      	negs	r6, r6
 8000be8:	1936      	adds	r6, r6, r4
 8000bea:	2402      	movs	r4, #2
 8000bec:	e6c4      	b.n	8000978 <__aeabi_dadd+0x2b8>
 8000bee:	4649      	mov	r1, r9
 8000bf0:	1a8f      	subs	r7, r1, r2
 8000bf2:	45b9      	cmp	r9, r7
 8000bf4:	4180      	sbcs	r0, r0
 8000bf6:	1af6      	subs	r6, r6, r3
 8000bf8:	4240      	negs	r0, r0
 8000bfa:	1a36      	subs	r6, r6, r0
 8000bfc:	0233      	lsls	r3, r6, #8
 8000bfe:	d406      	bmi.n	8000c0e <__aeabi_dadd+0x54e>
 8000c00:	0773      	lsls	r3, r6, #29
 8000c02:	08ff      	lsrs	r7, r7, #3
 8000c04:	2101      	movs	r1, #1
 8000c06:	431f      	orrs	r7, r3
 8000c08:	08f0      	lsrs	r0, r6, #3
 8000c0a:	e690      	b.n	800092e <__aeabi_dadd+0x26e>
 8000c0c:	4665      	mov	r5, ip
 8000c0e:	2401      	movs	r4, #1
 8000c10:	e5ab      	b.n	800076a <__aeabi_dadd+0xaa>
 8000c12:	464b      	mov	r3, r9
 8000c14:	0777      	lsls	r7, r6, #29
 8000c16:	08d8      	lsrs	r0, r3, #3
 8000c18:	4307      	orrs	r7, r0
 8000c1a:	08f0      	lsrs	r0, r6, #3
 8000c1c:	e6b4      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000c1e:	000f      	movs	r7, r1
 8000c20:	0018      	movs	r0, r3
 8000c22:	3f20      	subs	r7, #32
 8000c24:	40f8      	lsrs	r0, r7
 8000c26:	4684      	mov	ip, r0
 8000c28:	2920      	cmp	r1, #32
 8000c2a:	d003      	beq.n	8000c34 <__aeabi_dadd+0x574>
 8000c2c:	2740      	movs	r7, #64	@ 0x40
 8000c2e:	1a79      	subs	r1, r7, r1
 8000c30:	408b      	lsls	r3, r1
 8000c32:	431a      	orrs	r2, r3
 8000c34:	1e53      	subs	r3, r2, #1
 8000c36:	419a      	sbcs	r2, r3
 8000c38:	4663      	mov	r3, ip
 8000c3a:	0017      	movs	r7, r2
 8000c3c:	431f      	orrs	r7, r3
 8000c3e:	e635      	b.n	80008ac <__aeabi_dadd+0x1ec>
 8000c40:	2500      	movs	r5, #0
 8000c42:	2400      	movs	r4, #0
 8000c44:	2600      	movs	r6, #0
 8000c46:	e684      	b.n	8000952 <__aeabi_dadd+0x292>
 8000c48:	000c      	movs	r4, r1
 8000c4a:	0035      	movs	r5, r6
 8000c4c:	3c20      	subs	r4, #32
 8000c4e:	40e5      	lsrs	r5, r4
 8000c50:	2920      	cmp	r1, #32
 8000c52:	d005      	beq.n	8000c60 <__aeabi_dadd+0x5a0>
 8000c54:	2440      	movs	r4, #64	@ 0x40
 8000c56:	1a61      	subs	r1, r4, r1
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	4649      	mov	r1, r9
 8000c5c:	4331      	orrs	r1, r6
 8000c5e:	4689      	mov	r9, r1
 8000c60:	4648      	mov	r0, r9
 8000c62:	1e41      	subs	r1, r0, #1
 8000c64:	4188      	sbcs	r0, r1
 8000c66:	0007      	movs	r7, r0
 8000c68:	432f      	orrs	r7, r5
 8000c6a:	e5ef      	b.n	800084c <__aeabi_dadd+0x18c>
 8000c6c:	08d2      	lsrs	r2, r2, #3
 8000c6e:	075f      	lsls	r7, r3, #29
 8000c70:	4665      	mov	r5, ip
 8000c72:	4317      	orrs	r7, r2
 8000c74:	08d8      	lsrs	r0, r3, #3
 8000c76:	e687      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000c78:	1a17      	subs	r7, r2, r0
 8000c7a:	42ba      	cmp	r2, r7
 8000c7c:	4192      	sbcs	r2, r2
 8000c7e:	1b9e      	subs	r6, r3, r6
 8000c80:	4252      	negs	r2, r2
 8000c82:	1ab6      	subs	r6, r6, r2
 8000c84:	0233      	lsls	r3, r6, #8
 8000c86:	d4c1      	bmi.n	8000c0c <__aeabi_dadd+0x54c>
 8000c88:	0773      	lsls	r3, r6, #29
 8000c8a:	08ff      	lsrs	r7, r7, #3
 8000c8c:	4665      	mov	r5, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	431f      	orrs	r7, r3
 8000c92:	08f0      	lsrs	r0, r6, #3
 8000c94:	e64b      	b.n	800092e <__aeabi_dadd+0x26e>
 8000c96:	2f00      	cmp	r7, #0
 8000c98:	d07b      	beq.n	8000d92 <__aeabi_dadd+0x6d2>
 8000c9a:	4665      	mov	r5, ip
 8000c9c:	001e      	movs	r6, r3
 8000c9e:	4691      	mov	r9, r2
 8000ca0:	e63f      	b.n	8000922 <__aeabi_dadd+0x262>
 8000ca2:	1a81      	subs	r1, r0, r2
 8000ca4:	4688      	mov	r8, r1
 8000ca6:	45c1      	cmp	r9, r8
 8000ca8:	41a4      	sbcs	r4, r4
 8000caa:	1af1      	subs	r1, r6, r3
 8000cac:	4264      	negs	r4, r4
 8000cae:	1b09      	subs	r1, r1, r4
 8000cb0:	2480      	movs	r4, #128	@ 0x80
 8000cb2:	0424      	lsls	r4, r4, #16
 8000cb4:	4221      	tst	r1, r4
 8000cb6:	d077      	beq.n	8000da8 <__aeabi_dadd+0x6e8>
 8000cb8:	1a10      	subs	r0, r2, r0
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	4192      	sbcs	r2, r2
 8000cbe:	0007      	movs	r7, r0
 8000cc0:	1b9e      	subs	r6, r3, r6
 8000cc2:	4252      	negs	r2, r2
 8000cc4:	1ab6      	subs	r6, r6, r2
 8000cc6:	4337      	orrs	r7, r6
 8000cc8:	d000      	beq.n	8000ccc <__aeabi_dadd+0x60c>
 8000cca:	e0a0      	b.n	8000e0e <__aeabi_dadd+0x74e>
 8000ccc:	4665      	mov	r5, ip
 8000cce:	2400      	movs	r4, #0
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e63e      	b.n	8000952 <__aeabi_dadd+0x292>
 8000cd4:	075f      	lsls	r7, r3, #29
 8000cd6:	08d2      	lsrs	r2, r2, #3
 8000cd8:	4665      	mov	r5, ip
 8000cda:	4317      	orrs	r7, r2
 8000cdc:	08d8      	lsrs	r0, r3, #3
 8000cde:	e653      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000ce0:	1881      	adds	r1, r0, r2
 8000ce2:	4291      	cmp	r1, r2
 8000ce4:	4192      	sbcs	r2, r2
 8000ce6:	18f0      	adds	r0, r6, r3
 8000ce8:	4252      	negs	r2, r2
 8000cea:	1880      	adds	r0, r0, r2
 8000cec:	0203      	lsls	r3, r0, #8
 8000cee:	d500      	bpl.n	8000cf2 <__aeabi_dadd+0x632>
 8000cf0:	e768      	b.n	8000bc4 <__aeabi_dadd+0x504>
 8000cf2:	0747      	lsls	r7, r0, #29
 8000cf4:	08c9      	lsrs	r1, r1, #3
 8000cf6:	430f      	orrs	r7, r1
 8000cf8:	08c0      	lsrs	r0, r0, #3
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	e617      	b.n	800092e <__aeabi_dadd+0x26e>
 8000cfe:	08d2      	lsrs	r2, r2, #3
 8000d00:	075f      	lsls	r7, r3, #29
 8000d02:	4317      	orrs	r7, r2
 8000d04:	08d8      	lsrs	r0, r3, #3
 8000d06:	e63f      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000d08:	000c      	movs	r4, r1
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	e620      	b.n	8000952 <__aeabi_dadd+0x292>
 8000d10:	2900      	cmp	r1, #0
 8000d12:	d156      	bne.n	8000dc2 <__aeabi_dadd+0x702>
 8000d14:	075f      	lsls	r7, r3, #29
 8000d16:	08d2      	lsrs	r2, r2, #3
 8000d18:	4317      	orrs	r7, r2
 8000d1a:	08d8      	lsrs	r0, r3, #3
 8000d1c:	e634      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000d1e:	000c      	movs	r4, r1
 8000d20:	001e      	movs	r6, r3
 8000d22:	08d0      	lsrs	r0, r2, #3
 8000d24:	e629      	b.n	800097a <__aeabi_dadd+0x2ba>
 8000d26:	08c1      	lsrs	r1, r0, #3
 8000d28:	0770      	lsls	r0, r6, #29
 8000d2a:	4301      	orrs	r1, r0
 8000d2c:	08f0      	lsrs	r0, r6, #3
 8000d2e:	2f00      	cmp	r7, #0
 8000d30:	d062      	beq.n	8000df8 <__aeabi_dadd+0x738>
 8000d32:	2480      	movs	r4, #128	@ 0x80
 8000d34:	0324      	lsls	r4, r4, #12
 8000d36:	4220      	tst	r0, r4
 8000d38:	d007      	beq.n	8000d4a <__aeabi_dadd+0x68a>
 8000d3a:	08de      	lsrs	r6, r3, #3
 8000d3c:	4226      	tst	r6, r4
 8000d3e:	d104      	bne.n	8000d4a <__aeabi_dadd+0x68a>
 8000d40:	4665      	mov	r5, ip
 8000d42:	0030      	movs	r0, r6
 8000d44:	08d1      	lsrs	r1, r2, #3
 8000d46:	075b      	lsls	r3, r3, #29
 8000d48:	4319      	orrs	r1, r3
 8000d4a:	0f4f      	lsrs	r7, r1, #29
 8000d4c:	00c9      	lsls	r1, r1, #3
 8000d4e:	08c9      	lsrs	r1, r1, #3
 8000d50:	077f      	lsls	r7, r7, #29
 8000d52:	430f      	orrs	r7, r1
 8000d54:	e618      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000d56:	000c      	movs	r4, r1
 8000d58:	0030      	movs	r0, r6
 8000d5a:	3c20      	subs	r4, #32
 8000d5c:	40e0      	lsrs	r0, r4
 8000d5e:	4684      	mov	ip, r0
 8000d60:	2920      	cmp	r1, #32
 8000d62:	d005      	beq.n	8000d70 <__aeabi_dadd+0x6b0>
 8000d64:	2440      	movs	r4, #64	@ 0x40
 8000d66:	1a61      	subs	r1, r4, r1
 8000d68:	408e      	lsls	r6, r1
 8000d6a:	4649      	mov	r1, r9
 8000d6c:	4331      	orrs	r1, r6
 8000d6e:	4689      	mov	r9, r1
 8000d70:	4648      	mov	r0, r9
 8000d72:	1e41      	subs	r1, r0, #1
 8000d74:	4188      	sbcs	r0, r1
 8000d76:	4661      	mov	r1, ip
 8000d78:	0007      	movs	r7, r0
 8000d7a:	430f      	orrs	r7, r1
 8000d7c:	e630      	b.n	80009e0 <__aeabi_dadd+0x320>
 8000d7e:	2120      	movs	r1, #32
 8000d80:	2700      	movs	r7, #0
 8000d82:	1a09      	subs	r1, r1, r0
 8000d84:	e50e      	b.n	80007a4 <__aeabi_dadd+0xe4>
 8000d86:	001e      	movs	r6, r3
 8000d88:	2f00      	cmp	r7, #0
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_dadd+0x6ce>
 8000d8c:	e522      	b.n	80007d4 <__aeabi_dadd+0x114>
 8000d8e:	2400      	movs	r4, #0
 8000d90:	e758      	b.n	8000c44 <__aeabi_dadd+0x584>
 8000d92:	2500      	movs	r5, #0
 8000d94:	2400      	movs	r4, #0
 8000d96:	2600      	movs	r6, #0
 8000d98:	e5db      	b.n	8000952 <__aeabi_dadd+0x292>
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	000007fe 	.word	0x000007fe
 8000da0:	000007ff 	.word	0x000007ff
 8000da4:	ff7fffff 	.word	0xff7fffff
 8000da8:	4647      	mov	r7, r8
 8000daa:	430f      	orrs	r7, r1
 8000dac:	d100      	bne.n	8000db0 <__aeabi_dadd+0x6f0>
 8000dae:	e747      	b.n	8000c40 <__aeabi_dadd+0x580>
 8000db0:	000e      	movs	r6, r1
 8000db2:	46c1      	mov	r9, r8
 8000db4:	e5b5      	b.n	8000922 <__aeabi_dadd+0x262>
 8000db6:	08df      	lsrs	r7, r3, #3
 8000db8:	0764      	lsls	r4, r4, #29
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4327      	orrs	r7, r4
 8000dbe:	0900      	lsrs	r0, r0, #4
 8000dc0:	e5b5      	b.n	800092e <__aeabi_dadd+0x26e>
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	08c0      	lsrs	r0, r0, #3
 8000dc6:	0777      	lsls	r7, r6, #29
 8000dc8:	4307      	orrs	r7, r0
 8000dca:	4311      	orrs	r1, r2
 8000dcc:	08f0      	lsrs	r0, r6, #3
 8000dce:	2900      	cmp	r1, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_dadd+0x714>
 8000dd2:	e5d9      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000dd4:	2180      	movs	r1, #128	@ 0x80
 8000dd6:	0309      	lsls	r1, r1, #12
 8000dd8:	4208      	tst	r0, r1
 8000dda:	d007      	beq.n	8000dec <__aeabi_dadd+0x72c>
 8000ddc:	08dc      	lsrs	r4, r3, #3
 8000dde:	420c      	tst	r4, r1
 8000de0:	d104      	bne.n	8000dec <__aeabi_dadd+0x72c>
 8000de2:	08d2      	lsrs	r2, r2, #3
 8000de4:	075b      	lsls	r3, r3, #29
 8000de6:	431a      	orrs	r2, r3
 8000de8:	0017      	movs	r7, r2
 8000dea:	0020      	movs	r0, r4
 8000dec:	0f7b      	lsrs	r3, r7, #29
 8000dee:	00ff      	lsls	r7, r7, #3
 8000df0:	08ff      	lsrs	r7, r7, #3
 8000df2:	075b      	lsls	r3, r3, #29
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e5c7      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000df8:	000f      	movs	r7, r1
 8000dfa:	e5c5      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <__aeabi_dadd+0x788>)
 8000dfe:	08d2      	lsrs	r2, r2, #3
 8000e00:	4033      	ands	r3, r6
 8000e02:	075f      	lsls	r7, r3, #29
 8000e04:	025b      	lsls	r3, r3, #9
 8000e06:	2401      	movs	r4, #1
 8000e08:	4317      	orrs	r7, r2
 8000e0a:	0b1e      	lsrs	r6, r3, #12
 8000e0c:	e5a1      	b.n	8000952 <__aeabi_dadd+0x292>
 8000e0e:	4226      	tst	r6, r4
 8000e10:	d012      	beq.n	8000e38 <__aeabi_dadd+0x778>
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <__aeabi_dadd+0x788>)
 8000e14:	4665      	mov	r5, ip
 8000e16:	0002      	movs	r2, r0
 8000e18:	2401      	movs	r4, #1
 8000e1a:	401e      	ands	r6, r3
 8000e1c:	e4e6      	b.n	80007ec <__aeabi_dadd+0x12c>
 8000e1e:	0021      	movs	r1, r4
 8000e20:	e585      	b.n	800092e <__aeabi_dadd+0x26e>
 8000e22:	0017      	movs	r7, r2
 8000e24:	e5a8      	b.n	8000978 <__aeabi_dadd+0x2b8>
 8000e26:	003a      	movs	r2, r7
 8000e28:	e4d4      	b.n	80007d4 <__aeabi_dadd+0x114>
 8000e2a:	08db      	lsrs	r3, r3, #3
 8000e2c:	0764      	lsls	r4, r4, #29
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0027      	movs	r7, r4
 8000e32:	2102      	movs	r1, #2
 8000e34:	0900      	lsrs	r0, r0, #4
 8000e36:	e57a      	b.n	800092e <__aeabi_dadd+0x26e>
 8000e38:	08c0      	lsrs	r0, r0, #3
 8000e3a:	0777      	lsls	r7, r6, #29
 8000e3c:	4307      	orrs	r7, r0
 8000e3e:	4665      	mov	r5, ip
 8000e40:	2100      	movs	r1, #0
 8000e42:	08f0      	lsrs	r0, r6, #3
 8000e44:	e573      	b.n	800092e <__aeabi_dadd+0x26e>
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	ff7fffff 	.word	0xff7fffff

08000e4c <__aeabi_ddiv>:
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	46de      	mov	lr, fp
 8000e50:	4645      	mov	r5, r8
 8000e52:	4657      	mov	r7, sl
 8000e54:	464e      	mov	r6, r9
 8000e56:	b5e0      	push	{r5, r6, r7, lr}
 8000e58:	b087      	sub	sp, #28
 8000e5a:	9200      	str	r2, [sp, #0]
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	030b      	lsls	r3, r1, #12
 8000e60:	0b1b      	lsrs	r3, r3, #12
 8000e62:	469b      	mov	fp, r3
 8000e64:	0fca      	lsrs	r2, r1, #31
 8000e66:	004b      	lsls	r3, r1, #1
 8000e68:	0004      	movs	r4, r0
 8000e6a:	4680      	mov	r8, r0
 8000e6c:	0d5b      	lsrs	r3, r3, #21
 8000e6e:	9202      	str	r2, [sp, #8]
 8000e70:	d100      	bne.n	8000e74 <__aeabi_ddiv+0x28>
 8000e72:	e098      	b.n	8000fa6 <__aeabi_ddiv+0x15a>
 8000e74:	4a7c      	ldr	r2, [pc, #496]	@ (8001068 <__aeabi_ddiv+0x21c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d037      	beq.n	8000eea <__aeabi_ddiv+0x9e>
 8000e7a:	4659      	mov	r1, fp
 8000e7c:	0f42      	lsrs	r2, r0, #29
 8000e7e:	00c9      	lsls	r1, r1, #3
 8000e80:	430a      	orrs	r2, r1
 8000e82:	2180      	movs	r1, #128	@ 0x80
 8000e84:	0409      	lsls	r1, r1, #16
 8000e86:	4311      	orrs	r1, r2
 8000e88:	00c2      	lsls	r2, r0, #3
 8000e8a:	4690      	mov	r8, r2
 8000e8c:	4a77      	ldr	r2, [pc, #476]	@ (800106c <__aeabi_ddiv+0x220>)
 8000e8e:	4689      	mov	r9, r1
 8000e90:	4692      	mov	sl, r2
 8000e92:	449a      	add	sl, r3
 8000e94:	2300      	movs	r3, #0
 8000e96:	2400      	movs	r4, #0
 8000e98:	9303      	str	r3, [sp, #12]
 8000e9a:	9e00      	ldr	r6, [sp, #0]
 8000e9c:	9f01      	ldr	r7, [sp, #4]
 8000e9e:	033b      	lsls	r3, r7, #12
 8000ea0:	0b1b      	lsrs	r3, r3, #12
 8000ea2:	469b      	mov	fp, r3
 8000ea4:	007b      	lsls	r3, r7, #1
 8000ea6:	0030      	movs	r0, r6
 8000ea8:	0d5b      	lsrs	r3, r3, #21
 8000eaa:	0ffd      	lsrs	r5, r7, #31
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d059      	beq.n	8000f64 <__aeabi_ddiv+0x118>
 8000eb0:	4a6d      	ldr	r2, [pc, #436]	@ (8001068 <__aeabi_ddiv+0x21c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d048      	beq.n	8000f48 <__aeabi_ddiv+0xfc>
 8000eb6:	4659      	mov	r1, fp
 8000eb8:	0f72      	lsrs	r2, r6, #29
 8000eba:	00c9      	lsls	r1, r1, #3
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	2180      	movs	r1, #128	@ 0x80
 8000ec0:	0409      	lsls	r1, r1, #16
 8000ec2:	4311      	orrs	r1, r2
 8000ec4:	468b      	mov	fp, r1
 8000ec6:	4969      	ldr	r1, [pc, #420]	@ (800106c <__aeabi_ddiv+0x220>)
 8000ec8:	00f2      	lsls	r2, r6, #3
 8000eca:	468c      	mov	ip, r1
 8000ecc:	4651      	mov	r1, sl
 8000ece:	4463      	add	r3, ip
 8000ed0:	1acb      	subs	r3, r1, r3
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	9e02      	ldr	r6, [sp, #8]
 8000ed8:	406e      	eors	r6, r5
 8000eda:	b2f6      	uxtb	r6, r6
 8000edc:	2c0f      	cmp	r4, #15
 8000ede:	d900      	bls.n	8000ee2 <__aeabi_ddiv+0x96>
 8000ee0:	e0ce      	b.n	8001080 <__aeabi_ddiv+0x234>
 8000ee2:	4b63      	ldr	r3, [pc, #396]	@ (8001070 <__aeabi_ddiv+0x224>)
 8000ee4:	00a4      	lsls	r4, r4, #2
 8000ee6:	591b      	ldr	r3, [r3, r4]
 8000ee8:	469f      	mov	pc, r3
 8000eea:	465a      	mov	r2, fp
 8000eec:	4302      	orrs	r2, r0
 8000eee:	4691      	mov	r9, r2
 8000ef0:	d000      	beq.n	8000ef4 <__aeabi_ddiv+0xa8>
 8000ef2:	e090      	b.n	8001016 <__aeabi_ddiv+0x1ca>
 8000ef4:	469a      	mov	sl, r3
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	4690      	mov	r8, r2
 8000efa:	2408      	movs	r4, #8
 8000efc:	9303      	str	r3, [sp, #12]
 8000efe:	e7cc      	b.n	8000e9a <__aeabi_ddiv+0x4e>
 8000f00:	46cb      	mov	fp, r9
 8000f02:	4642      	mov	r2, r8
 8000f04:	9d02      	ldr	r5, [sp, #8]
 8000f06:	9903      	ldr	r1, [sp, #12]
 8000f08:	2902      	cmp	r1, #2
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_ddiv+0xc2>
 8000f0c:	e1de      	b.n	80012cc <__aeabi_ddiv+0x480>
 8000f0e:	2903      	cmp	r1, #3
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0xc8>
 8000f12:	e08d      	b.n	8001030 <__aeabi_ddiv+0x1e4>
 8000f14:	2901      	cmp	r1, #1
 8000f16:	d000      	beq.n	8000f1a <__aeabi_ddiv+0xce>
 8000f18:	e179      	b.n	800120e <__aeabi_ddiv+0x3c2>
 8000f1a:	002e      	movs	r6, r5
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2400      	movs	r4, #0
 8000f22:	4690      	mov	r8, r2
 8000f24:	051b      	lsls	r3, r3, #20
 8000f26:	4323      	orrs	r3, r4
 8000f28:	07f6      	lsls	r6, r6, #31
 8000f2a:	4333      	orrs	r3, r6
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	0019      	movs	r1, r3
 8000f30:	b007      	add	sp, #28
 8000f32:	bcf0      	pop	{r4, r5, r6, r7}
 8000f34:	46bb      	mov	fp, r7
 8000f36:	46b2      	mov	sl, r6
 8000f38:	46a9      	mov	r9, r5
 8000f3a:	46a0      	mov	r8, r4
 8000f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2400      	movs	r4, #0
 8000f42:	4690      	mov	r8, r2
 8000f44:	4b48      	ldr	r3, [pc, #288]	@ (8001068 <__aeabi_ddiv+0x21c>)
 8000f46:	e7ed      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 8000f48:	465a      	mov	r2, fp
 8000f4a:	9b00      	ldr	r3, [sp, #0]
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	4b49      	ldr	r3, [pc, #292]	@ (8001074 <__aeabi_ddiv+0x228>)
 8000f50:	469c      	mov	ip, r3
 8000f52:	44e2      	add	sl, ip
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	d159      	bne.n	800100c <__aeabi_ddiv+0x1c0>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	431c      	orrs	r4, r3
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	2102      	movs	r1, #2
 8000f60:	469b      	mov	fp, r3
 8000f62:	e7b8      	b.n	8000ed6 <__aeabi_ddiv+0x8a>
 8000f64:	465a      	mov	r2, fp
 8000f66:	9b00      	ldr	r3, [sp, #0]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	d049      	beq.n	8001000 <__aeabi_ddiv+0x1b4>
 8000f6c:	465b      	mov	r3, fp
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x128>
 8000f72:	e19c      	b.n	80012ae <__aeabi_ddiv+0x462>
 8000f74:	4658      	mov	r0, fp
 8000f76:	f000 fb4b 	bl	8001610 <__clzsi2>
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	3a0b      	subs	r2, #11
 8000f80:	271d      	movs	r7, #29
 8000f82:	9e00      	ldr	r6, [sp, #0]
 8000f84:	1aba      	subs	r2, r7, r2
 8000f86:	0019      	movs	r1, r3
 8000f88:	4658      	mov	r0, fp
 8000f8a:	40d6      	lsrs	r6, r2
 8000f8c:	3908      	subs	r1, #8
 8000f8e:	4088      	lsls	r0, r1
 8000f90:	0032      	movs	r2, r6
 8000f92:	4302      	orrs	r2, r0
 8000f94:	4693      	mov	fp, r2
 8000f96:	9a00      	ldr	r2, [sp, #0]
 8000f98:	408a      	lsls	r2, r1
 8000f9a:	4937      	ldr	r1, [pc, #220]	@ (8001078 <__aeabi_ddiv+0x22c>)
 8000f9c:	4453      	add	r3, sl
 8000f9e:	468a      	mov	sl, r1
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	449a      	add	sl, r3
 8000fa4:	e797      	b.n	8000ed6 <__aeabi_ddiv+0x8a>
 8000fa6:	465b      	mov	r3, fp
 8000fa8:	4303      	orrs	r3, r0
 8000faa:	4699      	mov	r9, r3
 8000fac:	d021      	beq.n	8000ff2 <__aeabi_ddiv+0x1a6>
 8000fae:	465b      	mov	r3, fp
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_ddiv+0x16a>
 8000fb4:	e169      	b.n	800128a <__aeabi_ddiv+0x43e>
 8000fb6:	4658      	mov	r0, fp
 8000fb8:	f000 fb2a 	bl	8001610 <__clzsi2>
 8000fbc:	230b      	movs	r3, #11
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	469c      	mov	ip, r3
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	4484      	add	ip, r0
 8000fc6:	4666      	mov	r6, ip
 8000fc8:	231d      	movs	r3, #29
 8000fca:	1b9b      	subs	r3, r3, r6
 8000fcc:	0026      	movs	r6, r4
 8000fce:	0011      	movs	r1, r2
 8000fd0:	4658      	mov	r0, fp
 8000fd2:	40de      	lsrs	r6, r3
 8000fd4:	3908      	subs	r1, #8
 8000fd6:	4088      	lsls	r0, r1
 8000fd8:	0033      	movs	r3, r6
 8000fda:	4303      	orrs	r3, r0
 8000fdc:	4699      	mov	r9, r3
 8000fde:	0023      	movs	r3, r4
 8000fe0:	408b      	lsls	r3, r1
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	4b25      	ldr	r3, [pc, #148]	@ (800107c <__aeabi_ddiv+0x230>)
 8000fe6:	2400      	movs	r4, #0
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	469a      	mov	sl, r3
 8000fec:	2300      	movs	r3, #0
 8000fee:	9303      	str	r3, [sp, #12]
 8000ff0:	e753      	b.n	8000e9a <__aeabi_ddiv+0x4e>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	4698      	mov	r8, r3
 8000ff6:	469a      	mov	sl, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	2404      	movs	r4, #4
 8000ffc:	9303      	str	r3, [sp, #12]
 8000ffe:	e74c      	b.n	8000e9a <__aeabi_ddiv+0x4e>
 8001000:	2301      	movs	r3, #1
 8001002:	431c      	orrs	r4, r3
 8001004:	2300      	movs	r3, #0
 8001006:	2101      	movs	r1, #1
 8001008:	469b      	mov	fp, r3
 800100a:	e764      	b.n	8000ed6 <__aeabi_ddiv+0x8a>
 800100c:	2303      	movs	r3, #3
 800100e:	0032      	movs	r2, r6
 8001010:	2103      	movs	r1, #3
 8001012:	431c      	orrs	r4, r3
 8001014:	e75f      	b.n	8000ed6 <__aeabi_ddiv+0x8a>
 8001016:	469a      	mov	sl, r3
 8001018:	2303      	movs	r3, #3
 800101a:	46d9      	mov	r9, fp
 800101c:	240c      	movs	r4, #12
 800101e:	9303      	str	r3, [sp, #12]
 8001020:	e73b      	b.n	8000e9a <__aeabi_ddiv+0x4e>
 8001022:	2300      	movs	r3, #0
 8001024:	2480      	movs	r4, #128	@ 0x80
 8001026:	4698      	mov	r8, r3
 8001028:	2600      	movs	r6, #0
 800102a:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <__aeabi_ddiv+0x21c>)
 800102c:	0324      	lsls	r4, r4, #12
 800102e:	e779      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 8001030:	2480      	movs	r4, #128	@ 0x80
 8001032:	465b      	mov	r3, fp
 8001034:	0324      	lsls	r4, r4, #12
 8001036:	431c      	orrs	r4, r3
 8001038:	0324      	lsls	r4, r4, #12
 800103a:	002e      	movs	r6, r5
 800103c:	4690      	mov	r8, r2
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <__aeabi_ddiv+0x21c>)
 8001040:	0b24      	lsrs	r4, r4, #12
 8001042:	e76f      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 8001044:	2480      	movs	r4, #128	@ 0x80
 8001046:	464b      	mov	r3, r9
 8001048:	0324      	lsls	r4, r4, #12
 800104a:	4223      	tst	r3, r4
 800104c:	d002      	beq.n	8001054 <__aeabi_ddiv+0x208>
 800104e:	465b      	mov	r3, fp
 8001050:	4223      	tst	r3, r4
 8001052:	d0f0      	beq.n	8001036 <__aeabi_ddiv+0x1ea>
 8001054:	2480      	movs	r4, #128	@ 0x80
 8001056:	464b      	mov	r3, r9
 8001058:	0324      	lsls	r4, r4, #12
 800105a:	431c      	orrs	r4, r3
 800105c:	0324      	lsls	r4, r4, #12
 800105e:	9e02      	ldr	r6, [sp, #8]
 8001060:	4b01      	ldr	r3, [pc, #4]	@ (8001068 <__aeabi_ddiv+0x21c>)
 8001062:	0b24      	lsrs	r4, r4, #12
 8001064:	e75e      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	000007ff 	.word	0x000007ff
 800106c:	fffffc01 	.word	0xfffffc01
 8001070:	08009924 	.word	0x08009924
 8001074:	fffff801 	.word	0xfffff801
 8001078:	000003f3 	.word	0x000003f3
 800107c:	fffffc0d 	.word	0xfffffc0d
 8001080:	45cb      	cmp	fp, r9
 8001082:	d200      	bcs.n	8001086 <__aeabi_ddiv+0x23a>
 8001084:	e0f8      	b.n	8001278 <__aeabi_ddiv+0x42c>
 8001086:	d100      	bne.n	800108a <__aeabi_ddiv+0x23e>
 8001088:	e0f3      	b.n	8001272 <__aeabi_ddiv+0x426>
 800108a:	2301      	movs	r3, #1
 800108c:	425b      	negs	r3, r3
 800108e:	469c      	mov	ip, r3
 8001090:	4644      	mov	r4, r8
 8001092:	4648      	mov	r0, r9
 8001094:	2500      	movs	r5, #0
 8001096:	44e2      	add	sl, ip
 8001098:	465b      	mov	r3, fp
 800109a:	0e17      	lsrs	r7, r2, #24
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	431f      	orrs	r7, r3
 80010a0:	0c19      	lsrs	r1, r3, #16
 80010a2:	043b      	lsls	r3, r7, #16
 80010a4:	0212      	lsls	r2, r2, #8
 80010a6:	9700      	str	r7, [sp, #0]
 80010a8:	0c1f      	lsrs	r7, r3, #16
 80010aa:	4691      	mov	r9, r2
 80010ac:	9102      	str	r1, [sp, #8]
 80010ae:	9703      	str	r7, [sp, #12]
 80010b0:	f7ff f8b0 	bl	8000214 <__aeabi_uidivmod>
 80010b4:	0002      	movs	r2, r0
 80010b6:	437a      	muls	r2, r7
 80010b8:	040b      	lsls	r3, r1, #16
 80010ba:	0c21      	lsrs	r1, r4, #16
 80010bc:	4680      	mov	r8, r0
 80010be:	4319      	orrs	r1, r3
 80010c0:	428a      	cmp	r2, r1
 80010c2:	d909      	bls.n	80010d8 <__aeabi_ddiv+0x28c>
 80010c4:	9f00      	ldr	r7, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	46bc      	mov	ip, r7
 80010ca:	425b      	negs	r3, r3
 80010cc:	4461      	add	r1, ip
 80010ce:	469c      	mov	ip, r3
 80010d0:	44e0      	add	r8, ip
 80010d2:	428f      	cmp	r7, r1
 80010d4:	d800      	bhi.n	80010d8 <__aeabi_ddiv+0x28c>
 80010d6:	e15c      	b.n	8001392 <__aeabi_ddiv+0x546>
 80010d8:	1a88      	subs	r0, r1, r2
 80010da:	9902      	ldr	r1, [sp, #8]
 80010dc:	f7ff f89a 	bl	8000214 <__aeabi_uidivmod>
 80010e0:	9a03      	ldr	r2, [sp, #12]
 80010e2:	0424      	lsls	r4, r4, #16
 80010e4:	4342      	muls	r2, r0
 80010e6:	0409      	lsls	r1, r1, #16
 80010e8:	0c24      	lsrs	r4, r4, #16
 80010ea:	0003      	movs	r3, r0
 80010ec:	430c      	orrs	r4, r1
 80010ee:	42a2      	cmp	r2, r4
 80010f0:	d906      	bls.n	8001100 <__aeabi_ddiv+0x2b4>
 80010f2:	9900      	ldr	r1, [sp, #0]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	468c      	mov	ip, r1
 80010f8:	4464      	add	r4, ip
 80010fa:	42a1      	cmp	r1, r4
 80010fc:	d800      	bhi.n	8001100 <__aeabi_ddiv+0x2b4>
 80010fe:	e142      	b.n	8001386 <__aeabi_ddiv+0x53a>
 8001100:	1aa0      	subs	r0, r4, r2
 8001102:	4642      	mov	r2, r8
 8001104:	0412      	lsls	r2, r2, #16
 8001106:	431a      	orrs	r2, r3
 8001108:	4693      	mov	fp, r2
 800110a:	464b      	mov	r3, r9
 800110c:	4659      	mov	r1, fp
 800110e:	0c1b      	lsrs	r3, r3, #16
 8001110:	001f      	movs	r7, r3
 8001112:	9304      	str	r3, [sp, #16]
 8001114:	040b      	lsls	r3, r1, #16
 8001116:	4649      	mov	r1, r9
 8001118:	0409      	lsls	r1, r1, #16
 800111a:	0c09      	lsrs	r1, r1, #16
 800111c:	000c      	movs	r4, r1
 800111e:	0c1b      	lsrs	r3, r3, #16
 8001120:	435c      	muls	r4, r3
 8001122:	0c12      	lsrs	r2, r2, #16
 8001124:	437b      	muls	r3, r7
 8001126:	4688      	mov	r8, r1
 8001128:	4351      	muls	r1, r2
 800112a:	437a      	muls	r2, r7
 800112c:	0c27      	lsrs	r7, r4, #16
 800112e:	46bc      	mov	ip, r7
 8001130:	185b      	adds	r3, r3, r1
 8001132:	4463      	add	r3, ip
 8001134:	4299      	cmp	r1, r3
 8001136:	d903      	bls.n	8001140 <__aeabi_ddiv+0x2f4>
 8001138:	2180      	movs	r1, #128	@ 0x80
 800113a:	0249      	lsls	r1, r1, #9
 800113c:	468c      	mov	ip, r1
 800113e:	4462      	add	r2, ip
 8001140:	0c19      	lsrs	r1, r3, #16
 8001142:	0424      	lsls	r4, r4, #16
 8001144:	041b      	lsls	r3, r3, #16
 8001146:	0c24      	lsrs	r4, r4, #16
 8001148:	188a      	adds	r2, r1, r2
 800114a:	191c      	adds	r4, r3, r4
 800114c:	4290      	cmp	r0, r2
 800114e:	d302      	bcc.n	8001156 <__aeabi_ddiv+0x30a>
 8001150:	d116      	bne.n	8001180 <__aeabi_ddiv+0x334>
 8001152:	42a5      	cmp	r5, r4
 8001154:	d214      	bcs.n	8001180 <__aeabi_ddiv+0x334>
 8001156:	465b      	mov	r3, fp
 8001158:	9f00      	ldr	r7, [sp, #0]
 800115a:	3b01      	subs	r3, #1
 800115c:	444d      	add	r5, r9
 800115e:	9305      	str	r3, [sp, #20]
 8001160:	454d      	cmp	r5, r9
 8001162:	419b      	sbcs	r3, r3
 8001164:	46bc      	mov	ip, r7
 8001166:	425b      	negs	r3, r3
 8001168:	4463      	add	r3, ip
 800116a:	18c0      	adds	r0, r0, r3
 800116c:	4287      	cmp	r7, r0
 800116e:	d300      	bcc.n	8001172 <__aeabi_ddiv+0x326>
 8001170:	e102      	b.n	8001378 <__aeabi_ddiv+0x52c>
 8001172:	4282      	cmp	r2, r0
 8001174:	d900      	bls.n	8001178 <__aeabi_ddiv+0x32c>
 8001176:	e129      	b.n	80013cc <__aeabi_ddiv+0x580>
 8001178:	d100      	bne.n	800117c <__aeabi_ddiv+0x330>
 800117a:	e124      	b.n	80013c6 <__aeabi_ddiv+0x57a>
 800117c:	9b05      	ldr	r3, [sp, #20]
 800117e:	469b      	mov	fp, r3
 8001180:	1b2c      	subs	r4, r5, r4
 8001182:	42a5      	cmp	r5, r4
 8001184:	41ad      	sbcs	r5, r5
 8001186:	9b00      	ldr	r3, [sp, #0]
 8001188:	1a80      	subs	r0, r0, r2
 800118a:	426d      	negs	r5, r5
 800118c:	1b40      	subs	r0, r0, r5
 800118e:	4283      	cmp	r3, r0
 8001190:	d100      	bne.n	8001194 <__aeabi_ddiv+0x348>
 8001192:	e10f      	b.n	80013b4 <__aeabi_ddiv+0x568>
 8001194:	9902      	ldr	r1, [sp, #8]
 8001196:	f7ff f83d 	bl	8000214 <__aeabi_uidivmod>
 800119a:	9a03      	ldr	r2, [sp, #12]
 800119c:	040b      	lsls	r3, r1, #16
 800119e:	4342      	muls	r2, r0
 80011a0:	0c21      	lsrs	r1, r4, #16
 80011a2:	0005      	movs	r5, r0
 80011a4:	4319      	orrs	r1, r3
 80011a6:	428a      	cmp	r2, r1
 80011a8:	d900      	bls.n	80011ac <__aeabi_ddiv+0x360>
 80011aa:	e0cb      	b.n	8001344 <__aeabi_ddiv+0x4f8>
 80011ac:	1a88      	subs	r0, r1, r2
 80011ae:	9902      	ldr	r1, [sp, #8]
 80011b0:	f7ff f830 	bl	8000214 <__aeabi_uidivmod>
 80011b4:	9a03      	ldr	r2, [sp, #12]
 80011b6:	0424      	lsls	r4, r4, #16
 80011b8:	4342      	muls	r2, r0
 80011ba:	0409      	lsls	r1, r1, #16
 80011bc:	0c24      	lsrs	r4, r4, #16
 80011be:	0003      	movs	r3, r0
 80011c0:	430c      	orrs	r4, r1
 80011c2:	42a2      	cmp	r2, r4
 80011c4:	d900      	bls.n	80011c8 <__aeabi_ddiv+0x37c>
 80011c6:	e0ca      	b.n	800135e <__aeabi_ddiv+0x512>
 80011c8:	4641      	mov	r1, r8
 80011ca:	1aa4      	subs	r4, r4, r2
 80011cc:	042a      	lsls	r2, r5, #16
 80011ce:	431a      	orrs	r2, r3
 80011d0:	9f04      	ldr	r7, [sp, #16]
 80011d2:	0413      	lsls	r3, r2, #16
 80011d4:	0c1b      	lsrs	r3, r3, #16
 80011d6:	4359      	muls	r1, r3
 80011d8:	4640      	mov	r0, r8
 80011da:	437b      	muls	r3, r7
 80011dc:	469c      	mov	ip, r3
 80011de:	0c15      	lsrs	r5, r2, #16
 80011e0:	4368      	muls	r0, r5
 80011e2:	0c0b      	lsrs	r3, r1, #16
 80011e4:	4484      	add	ip, r0
 80011e6:	4463      	add	r3, ip
 80011e8:	437d      	muls	r5, r7
 80011ea:	4298      	cmp	r0, r3
 80011ec:	d903      	bls.n	80011f6 <__aeabi_ddiv+0x3aa>
 80011ee:	2080      	movs	r0, #128	@ 0x80
 80011f0:	0240      	lsls	r0, r0, #9
 80011f2:	4684      	mov	ip, r0
 80011f4:	4465      	add	r5, ip
 80011f6:	0c18      	lsrs	r0, r3, #16
 80011f8:	0409      	lsls	r1, r1, #16
 80011fa:	041b      	lsls	r3, r3, #16
 80011fc:	0c09      	lsrs	r1, r1, #16
 80011fe:	1940      	adds	r0, r0, r5
 8001200:	185b      	adds	r3, r3, r1
 8001202:	4284      	cmp	r4, r0
 8001204:	d327      	bcc.n	8001256 <__aeabi_ddiv+0x40a>
 8001206:	d023      	beq.n	8001250 <__aeabi_ddiv+0x404>
 8001208:	2301      	movs	r3, #1
 800120a:	0035      	movs	r5, r6
 800120c:	431a      	orrs	r2, r3
 800120e:	4b94      	ldr	r3, [pc, #592]	@ (8001460 <__aeabi_ddiv+0x614>)
 8001210:	4453      	add	r3, sl
 8001212:	2b00      	cmp	r3, #0
 8001214:	dd60      	ble.n	80012d8 <__aeabi_ddiv+0x48c>
 8001216:	0751      	lsls	r1, r2, #29
 8001218:	d000      	beq.n	800121c <__aeabi_ddiv+0x3d0>
 800121a:	e086      	b.n	800132a <__aeabi_ddiv+0x4de>
 800121c:	002e      	movs	r6, r5
 800121e:	08d1      	lsrs	r1, r2, #3
 8001220:	465a      	mov	r2, fp
 8001222:	01d2      	lsls	r2, r2, #7
 8001224:	d506      	bpl.n	8001234 <__aeabi_ddiv+0x3e8>
 8001226:	465a      	mov	r2, fp
 8001228:	4b8e      	ldr	r3, [pc, #568]	@ (8001464 <__aeabi_ddiv+0x618>)
 800122a:	401a      	ands	r2, r3
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	4693      	mov	fp, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4453      	add	r3, sl
 8001234:	4a8c      	ldr	r2, [pc, #560]	@ (8001468 <__aeabi_ddiv+0x61c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	dd00      	ble.n	800123c <__aeabi_ddiv+0x3f0>
 800123a:	e680      	b.n	8000f3e <__aeabi_ddiv+0xf2>
 800123c:	465a      	mov	r2, fp
 800123e:	0752      	lsls	r2, r2, #29
 8001240:	430a      	orrs	r2, r1
 8001242:	4690      	mov	r8, r2
 8001244:	465a      	mov	r2, fp
 8001246:	055b      	lsls	r3, r3, #21
 8001248:	0254      	lsls	r4, r2, #9
 800124a:	0b24      	lsrs	r4, r4, #12
 800124c:	0d5b      	lsrs	r3, r3, #21
 800124e:	e669      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 8001250:	0035      	movs	r5, r6
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0db      	beq.n	800120e <__aeabi_ddiv+0x3c2>
 8001256:	9d00      	ldr	r5, [sp, #0]
 8001258:	1e51      	subs	r1, r2, #1
 800125a:	46ac      	mov	ip, r5
 800125c:	4464      	add	r4, ip
 800125e:	42ac      	cmp	r4, r5
 8001260:	d200      	bcs.n	8001264 <__aeabi_ddiv+0x418>
 8001262:	e09e      	b.n	80013a2 <__aeabi_ddiv+0x556>
 8001264:	4284      	cmp	r4, r0
 8001266:	d200      	bcs.n	800126a <__aeabi_ddiv+0x41e>
 8001268:	e0e1      	b.n	800142e <__aeabi_ddiv+0x5e2>
 800126a:	d100      	bne.n	800126e <__aeabi_ddiv+0x422>
 800126c:	e0ee      	b.n	800144c <__aeabi_ddiv+0x600>
 800126e:	000a      	movs	r2, r1
 8001270:	e7ca      	b.n	8001208 <__aeabi_ddiv+0x3bc>
 8001272:	4542      	cmp	r2, r8
 8001274:	d900      	bls.n	8001278 <__aeabi_ddiv+0x42c>
 8001276:	e708      	b.n	800108a <__aeabi_ddiv+0x23e>
 8001278:	464b      	mov	r3, r9
 800127a:	07dc      	lsls	r4, r3, #31
 800127c:	0858      	lsrs	r0, r3, #1
 800127e:	4643      	mov	r3, r8
 8001280:	085b      	lsrs	r3, r3, #1
 8001282:	431c      	orrs	r4, r3
 8001284:	4643      	mov	r3, r8
 8001286:	07dd      	lsls	r5, r3, #31
 8001288:	e706      	b.n	8001098 <__aeabi_ddiv+0x24c>
 800128a:	f000 f9c1 	bl	8001610 <__clzsi2>
 800128e:	2315      	movs	r3, #21
 8001290:	469c      	mov	ip, r3
 8001292:	4484      	add	ip, r0
 8001294:	0002      	movs	r2, r0
 8001296:	4663      	mov	r3, ip
 8001298:	3220      	adds	r2, #32
 800129a:	2b1c      	cmp	r3, #28
 800129c:	dc00      	bgt.n	80012a0 <__aeabi_ddiv+0x454>
 800129e:	e692      	b.n	8000fc6 <__aeabi_ddiv+0x17a>
 80012a0:	0023      	movs	r3, r4
 80012a2:	3808      	subs	r0, #8
 80012a4:	4083      	lsls	r3, r0
 80012a6:	4699      	mov	r9, r3
 80012a8:	2300      	movs	r3, #0
 80012aa:	4698      	mov	r8, r3
 80012ac:	e69a      	b.n	8000fe4 <__aeabi_ddiv+0x198>
 80012ae:	f000 f9af 	bl	8001610 <__clzsi2>
 80012b2:	0002      	movs	r2, r0
 80012b4:	0003      	movs	r3, r0
 80012b6:	3215      	adds	r2, #21
 80012b8:	3320      	adds	r3, #32
 80012ba:	2a1c      	cmp	r2, #28
 80012bc:	dc00      	bgt.n	80012c0 <__aeabi_ddiv+0x474>
 80012be:	e65f      	b.n	8000f80 <__aeabi_ddiv+0x134>
 80012c0:	9900      	ldr	r1, [sp, #0]
 80012c2:	3808      	subs	r0, #8
 80012c4:	4081      	lsls	r1, r0
 80012c6:	2200      	movs	r2, #0
 80012c8:	468b      	mov	fp, r1
 80012ca:	e666      	b.n	8000f9a <__aeabi_ddiv+0x14e>
 80012cc:	2200      	movs	r2, #0
 80012ce:	002e      	movs	r6, r5
 80012d0:	2400      	movs	r4, #0
 80012d2:	4690      	mov	r8, r2
 80012d4:	4b65      	ldr	r3, [pc, #404]	@ (800146c <__aeabi_ddiv+0x620>)
 80012d6:	e625      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 80012d8:	002e      	movs	r6, r5
 80012da:	2101      	movs	r1, #1
 80012dc:	1ac9      	subs	r1, r1, r3
 80012de:	2938      	cmp	r1, #56	@ 0x38
 80012e0:	dd00      	ble.n	80012e4 <__aeabi_ddiv+0x498>
 80012e2:	e61b      	b.n	8000f1c <__aeabi_ddiv+0xd0>
 80012e4:	291f      	cmp	r1, #31
 80012e6:	dc7e      	bgt.n	80013e6 <__aeabi_ddiv+0x59a>
 80012e8:	4861      	ldr	r0, [pc, #388]	@ (8001470 <__aeabi_ddiv+0x624>)
 80012ea:	0014      	movs	r4, r2
 80012ec:	4450      	add	r0, sl
 80012ee:	465b      	mov	r3, fp
 80012f0:	4082      	lsls	r2, r0
 80012f2:	4083      	lsls	r3, r0
 80012f4:	40cc      	lsrs	r4, r1
 80012f6:	1e50      	subs	r0, r2, #1
 80012f8:	4182      	sbcs	r2, r0
 80012fa:	4323      	orrs	r3, r4
 80012fc:	431a      	orrs	r2, r3
 80012fe:	465b      	mov	r3, fp
 8001300:	40cb      	lsrs	r3, r1
 8001302:	0751      	lsls	r1, r2, #29
 8001304:	d009      	beq.n	800131a <__aeabi_ddiv+0x4ce>
 8001306:	210f      	movs	r1, #15
 8001308:	4011      	ands	r1, r2
 800130a:	2904      	cmp	r1, #4
 800130c:	d005      	beq.n	800131a <__aeabi_ddiv+0x4ce>
 800130e:	1d11      	adds	r1, r2, #4
 8001310:	4291      	cmp	r1, r2
 8001312:	4192      	sbcs	r2, r2
 8001314:	4252      	negs	r2, r2
 8001316:	189b      	adds	r3, r3, r2
 8001318:	000a      	movs	r2, r1
 800131a:	0219      	lsls	r1, r3, #8
 800131c:	d400      	bmi.n	8001320 <__aeabi_ddiv+0x4d4>
 800131e:	e09b      	b.n	8001458 <__aeabi_ddiv+0x60c>
 8001320:	2200      	movs	r2, #0
 8001322:	2301      	movs	r3, #1
 8001324:	2400      	movs	r4, #0
 8001326:	4690      	mov	r8, r2
 8001328:	e5fc      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 800132a:	210f      	movs	r1, #15
 800132c:	4011      	ands	r1, r2
 800132e:	2904      	cmp	r1, #4
 8001330:	d100      	bne.n	8001334 <__aeabi_ddiv+0x4e8>
 8001332:	e773      	b.n	800121c <__aeabi_ddiv+0x3d0>
 8001334:	1d11      	adds	r1, r2, #4
 8001336:	4291      	cmp	r1, r2
 8001338:	4192      	sbcs	r2, r2
 800133a:	4252      	negs	r2, r2
 800133c:	002e      	movs	r6, r5
 800133e:	08c9      	lsrs	r1, r1, #3
 8001340:	4493      	add	fp, r2
 8001342:	e76d      	b.n	8001220 <__aeabi_ddiv+0x3d4>
 8001344:	9b00      	ldr	r3, [sp, #0]
 8001346:	3d01      	subs	r5, #1
 8001348:	469c      	mov	ip, r3
 800134a:	4461      	add	r1, ip
 800134c:	428b      	cmp	r3, r1
 800134e:	d900      	bls.n	8001352 <__aeabi_ddiv+0x506>
 8001350:	e72c      	b.n	80011ac <__aeabi_ddiv+0x360>
 8001352:	428a      	cmp	r2, r1
 8001354:	d800      	bhi.n	8001358 <__aeabi_ddiv+0x50c>
 8001356:	e729      	b.n	80011ac <__aeabi_ddiv+0x360>
 8001358:	1e85      	subs	r5, r0, #2
 800135a:	4461      	add	r1, ip
 800135c:	e726      	b.n	80011ac <__aeabi_ddiv+0x360>
 800135e:	9900      	ldr	r1, [sp, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	468c      	mov	ip, r1
 8001364:	4464      	add	r4, ip
 8001366:	42a1      	cmp	r1, r4
 8001368:	d900      	bls.n	800136c <__aeabi_ddiv+0x520>
 800136a:	e72d      	b.n	80011c8 <__aeabi_ddiv+0x37c>
 800136c:	42a2      	cmp	r2, r4
 800136e:	d800      	bhi.n	8001372 <__aeabi_ddiv+0x526>
 8001370:	e72a      	b.n	80011c8 <__aeabi_ddiv+0x37c>
 8001372:	1e83      	subs	r3, r0, #2
 8001374:	4464      	add	r4, ip
 8001376:	e727      	b.n	80011c8 <__aeabi_ddiv+0x37c>
 8001378:	4287      	cmp	r7, r0
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x532>
 800137c:	e6fe      	b.n	800117c <__aeabi_ddiv+0x330>
 800137e:	45a9      	cmp	r9, r5
 8001380:	d900      	bls.n	8001384 <__aeabi_ddiv+0x538>
 8001382:	e6fb      	b.n	800117c <__aeabi_ddiv+0x330>
 8001384:	e6f5      	b.n	8001172 <__aeabi_ddiv+0x326>
 8001386:	42a2      	cmp	r2, r4
 8001388:	d800      	bhi.n	800138c <__aeabi_ddiv+0x540>
 800138a:	e6b9      	b.n	8001100 <__aeabi_ddiv+0x2b4>
 800138c:	1e83      	subs	r3, r0, #2
 800138e:	4464      	add	r4, ip
 8001390:	e6b6      	b.n	8001100 <__aeabi_ddiv+0x2b4>
 8001392:	428a      	cmp	r2, r1
 8001394:	d800      	bhi.n	8001398 <__aeabi_ddiv+0x54c>
 8001396:	e69f      	b.n	80010d8 <__aeabi_ddiv+0x28c>
 8001398:	46bc      	mov	ip, r7
 800139a:	1e83      	subs	r3, r0, #2
 800139c:	4698      	mov	r8, r3
 800139e:	4461      	add	r1, ip
 80013a0:	e69a      	b.n	80010d8 <__aeabi_ddiv+0x28c>
 80013a2:	000a      	movs	r2, r1
 80013a4:	4284      	cmp	r4, r0
 80013a6:	d000      	beq.n	80013aa <__aeabi_ddiv+0x55e>
 80013a8:	e72e      	b.n	8001208 <__aeabi_ddiv+0x3bc>
 80013aa:	454b      	cmp	r3, r9
 80013ac:	d000      	beq.n	80013b0 <__aeabi_ddiv+0x564>
 80013ae:	e72b      	b.n	8001208 <__aeabi_ddiv+0x3bc>
 80013b0:	0035      	movs	r5, r6
 80013b2:	e72c      	b.n	800120e <__aeabi_ddiv+0x3c2>
 80013b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001460 <__aeabi_ddiv+0x614>)
 80013b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001474 <__aeabi_ddiv+0x628>)
 80013b8:	4453      	add	r3, sl
 80013ba:	4592      	cmp	sl, r2
 80013bc:	db43      	blt.n	8001446 <__aeabi_ddiv+0x5fa>
 80013be:	2201      	movs	r2, #1
 80013c0:	2100      	movs	r1, #0
 80013c2:	4493      	add	fp, r2
 80013c4:	e72c      	b.n	8001220 <__aeabi_ddiv+0x3d4>
 80013c6:	42ac      	cmp	r4, r5
 80013c8:	d800      	bhi.n	80013cc <__aeabi_ddiv+0x580>
 80013ca:	e6d7      	b.n	800117c <__aeabi_ddiv+0x330>
 80013cc:	2302      	movs	r3, #2
 80013ce:	425b      	negs	r3, r3
 80013d0:	469c      	mov	ip, r3
 80013d2:	9900      	ldr	r1, [sp, #0]
 80013d4:	444d      	add	r5, r9
 80013d6:	454d      	cmp	r5, r9
 80013d8:	419b      	sbcs	r3, r3
 80013da:	44e3      	add	fp, ip
 80013dc:	468c      	mov	ip, r1
 80013de:	425b      	negs	r3, r3
 80013e0:	4463      	add	r3, ip
 80013e2:	18c0      	adds	r0, r0, r3
 80013e4:	e6cc      	b.n	8001180 <__aeabi_ddiv+0x334>
 80013e6:	201f      	movs	r0, #31
 80013e8:	4240      	negs	r0, r0
 80013ea:	1ac3      	subs	r3, r0, r3
 80013ec:	4658      	mov	r0, fp
 80013ee:	40d8      	lsrs	r0, r3
 80013f0:	2920      	cmp	r1, #32
 80013f2:	d004      	beq.n	80013fe <__aeabi_ddiv+0x5b2>
 80013f4:	4659      	mov	r1, fp
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <__aeabi_ddiv+0x62c>)
 80013f8:	4453      	add	r3, sl
 80013fa:	4099      	lsls	r1, r3
 80013fc:	430a      	orrs	r2, r1
 80013fe:	1e53      	subs	r3, r2, #1
 8001400:	419a      	sbcs	r2, r3
 8001402:	2307      	movs	r3, #7
 8001404:	0019      	movs	r1, r3
 8001406:	4302      	orrs	r2, r0
 8001408:	2400      	movs	r4, #0
 800140a:	4011      	ands	r1, r2
 800140c:	4213      	tst	r3, r2
 800140e:	d009      	beq.n	8001424 <__aeabi_ddiv+0x5d8>
 8001410:	3308      	adds	r3, #8
 8001412:	4013      	ands	r3, r2
 8001414:	2b04      	cmp	r3, #4
 8001416:	d01d      	beq.n	8001454 <__aeabi_ddiv+0x608>
 8001418:	1d13      	adds	r3, r2, #4
 800141a:	4293      	cmp	r3, r2
 800141c:	4189      	sbcs	r1, r1
 800141e:	001a      	movs	r2, r3
 8001420:	4249      	negs	r1, r1
 8001422:	0749      	lsls	r1, r1, #29
 8001424:	08d2      	lsrs	r2, r2, #3
 8001426:	430a      	orrs	r2, r1
 8001428:	4690      	mov	r8, r2
 800142a:	2300      	movs	r3, #0
 800142c:	e57a      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 800142e:	4649      	mov	r1, r9
 8001430:	9f00      	ldr	r7, [sp, #0]
 8001432:	004d      	lsls	r5, r1, #1
 8001434:	454d      	cmp	r5, r9
 8001436:	4189      	sbcs	r1, r1
 8001438:	46bc      	mov	ip, r7
 800143a:	4249      	negs	r1, r1
 800143c:	4461      	add	r1, ip
 800143e:	46a9      	mov	r9, r5
 8001440:	3a02      	subs	r2, #2
 8001442:	1864      	adds	r4, r4, r1
 8001444:	e7ae      	b.n	80013a4 <__aeabi_ddiv+0x558>
 8001446:	2201      	movs	r2, #1
 8001448:	4252      	negs	r2, r2
 800144a:	e746      	b.n	80012da <__aeabi_ddiv+0x48e>
 800144c:	4599      	cmp	r9, r3
 800144e:	d3ee      	bcc.n	800142e <__aeabi_ddiv+0x5e2>
 8001450:	000a      	movs	r2, r1
 8001452:	e7aa      	b.n	80013aa <__aeabi_ddiv+0x55e>
 8001454:	2100      	movs	r1, #0
 8001456:	e7e5      	b.n	8001424 <__aeabi_ddiv+0x5d8>
 8001458:	0759      	lsls	r1, r3, #29
 800145a:	025b      	lsls	r3, r3, #9
 800145c:	0b1c      	lsrs	r4, r3, #12
 800145e:	e7e1      	b.n	8001424 <__aeabi_ddiv+0x5d8>
 8001460:	000003ff 	.word	0x000003ff
 8001464:	feffffff 	.word	0xfeffffff
 8001468:	000007fe 	.word	0x000007fe
 800146c:	000007ff 	.word	0x000007ff
 8001470:	0000041e 	.word	0x0000041e
 8001474:	fffffc02 	.word	0xfffffc02
 8001478:	0000043e 	.word	0x0000043e

0800147c <__aeabi_f2d>:
 800147c:	b570      	push	{r4, r5, r6, lr}
 800147e:	0242      	lsls	r2, r0, #9
 8001480:	0043      	lsls	r3, r0, #1
 8001482:	0fc4      	lsrs	r4, r0, #31
 8001484:	20fe      	movs	r0, #254	@ 0xfe
 8001486:	0e1b      	lsrs	r3, r3, #24
 8001488:	1c59      	adds	r1, r3, #1
 800148a:	0a55      	lsrs	r5, r2, #9
 800148c:	4208      	tst	r0, r1
 800148e:	d00c      	beq.n	80014aa <__aeabi_f2d+0x2e>
 8001490:	21e0      	movs	r1, #224	@ 0xe0
 8001492:	0089      	lsls	r1, r1, #2
 8001494:	468c      	mov	ip, r1
 8001496:	076d      	lsls	r5, r5, #29
 8001498:	0b12      	lsrs	r2, r2, #12
 800149a:	4463      	add	r3, ip
 800149c:	051b      	lsls	r3, r3, #20
 800149e:	4313      	orrs	r3, r2
 80014a0:	07e4      	lsls	r4, r4, #31
 80014a2:	4323      	orrs	r3, r4
 80014a4:	0028      	movs	r0, r5
 80014a6:	0019      	movs	r1, r3
 80014a8:	bd70      	pop	{r4, r5, r6, pc}
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d114      	bne.n	80014d8 <__aeabi_f2d+0x5c>
 80014ae:	2d00      	cmp	r5, #0
 80014b0:	d01b      	beq.n	80014ea <__aeabi_f2d+0x6e>
 80014b2:	0028      	movs	r0, r5
 80014b4:	f000 f8ac 	bl	8001610 <__clzsi2>
 80014b8:	280a      	cmp	r0, #10
 80014ba:	dc1c      	bgt.n	80014f6 <__aeabi_f2d+0x7a>
 80014bc:	230b      	movs	r3, #11
 80014be:	002a      	movs	r2, r5
 80014c0:	1a1b      	subs	r3, r3, r0
 80014c2:	40da      	lsrs	r2, r3
 80014c4:	0003      	movs	r3, r0
 80014c6:	3315      	adds	r3, #21
 80014c8:	409d      	lsls	r5, r3
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <__aeabi_f2d+0x88>)
 80014cc:	0312      	lsls	r2, r2, #12
 80014ce:	1a1b      	subs	r3, r3, r0
 80014d0:	055b      	lsls	r3, r3, #21
 80014d2:	0b12      	lsrs	r2, r2, #12
 80014d4:	0d5b      	lsrs	r3, r3, #21
 80014d6:	e7e1      	b.n	800149c <__aeabi_f2d+0x20>
 80014d8:	2d00      	cmp	r5, #0
 80014da:	d009      	beq.n	80014f0 <__aeabi_f2d+0x74>
 80014dc:	0b13      	lsrs	r3, r2, #12
 80014de:	2280      	movs	r2, #128	@ 0x80
 80014e0:	0312      	lsls	r2, r2, #12
 80014e2:	431a      	orrs	r2, r3
 80014e4:	076d      	lsls	r5, r5, #29
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <__aeabi_f2d+0x8c>)
 80014e8:	e7d8      	b.n	800149c <__aeabi_f2d+0x20>
 80014ea:	2300      	movs	r3, #0
 80014ec:	2200      	movs	r2, #0
 80014ee:	e7d5      	b.n	800149c <__aeabi_f2d+0x20>
 80014f0:	2200      	movs	r2, #0
 80014f2:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <__aeabi_f2d+0x8c>)
 80014f4:	e7d2      	b.n	800149c <__aeabi_f2d+0x20>
 80014f6:	0003      	movs	r3, r0
 80014f8:	002a      	movs	r2, r5
 80014fa:	3b0b      	subs	r3, #11
 80014fc:	409a      	lsls	r2, r3
 80014fe:	2500      	movs	r5, #0
 8001500:	e7e3      	b.n	80014ca <__aeabi_f2d+0x4e>
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	00000389 	.word	0x00000389
 8001508:	000007ff 	.word	0x000007ff

0800150c <__aeabi_d2f>:
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150e:	004b      	lsls	r3, r1, #1
 8001510:	030f      	lsls	r7, r1, #12
 8001512:	0d5b      	lsrs	r3, r3, #21
 8001514:	4c3a      	ldr	r4, [pc, #232]	@ (8001600 <__aeabi_d2f+0xf4>)
 8001516:	0f45      	lsrs	r5, r0, #29
 8001518:	b083      	sub	sp, #12
 800151a:	0a7f      	lsrs	r7, r7, #9
 800151c:	1c5e      	adds	r6, r3, #1
 800151e:	432f      	orrs	r7, r5
 8001520:	9000      	str	r0, [sp, #0]
 8001522:	9101      	str	r1, [sp, #4]
 8001524:	0fca      	lsrs	r2, r1, #31
 8001526:	00c5      	lsls	r5, r0, #3
 8001528:	4226      	tst	r6, r4
 800152a:	d00b      	beq.n	8001544 <__aeabi_d2f+0x38>
 800152c:	4935      	ldr	r1, [pc, #212]	@ (8001604 <__aeabi_d2f+0xf8>)
 800152e:	185c      	adds	r4, r3, r1
 8001530:	2cfe      	cmp	r4, #254	@ 0xfe
 8001532:	dd13      	ble.n	800155c <__aeabi_d2f+0x50>
 8001534:	20ff      	movs	r0, #255	@ 0xff
 8001536:	2300      	movs	r3, #0
 8001538:	05c0      	lsls	r0, r0, #23
 800153a:	4318      	orrs	r0, r3
 800153c:	07d2      	lsls	r2, r2, #31
 800153e:	4310      	orrs	r0, r2
 8001540:	b003      	add	sp, #12
 8001542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001544:	433d      	orrs	r5, r7
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <__aeabi_d2f+0x42>
 800154a:	2000      	movs	r0, #0
 800154c:	e7f4      	b.n	8001538 <__aeabi_d2f+0x2c>
 800154e:	2d00      	cmp	r5, #0
 8001550:	d0f0      	beq.n	8001534 <__aeabi_d2f+0x28>
 8001552:	2380      	movs	r3, #128	@ 0x80
 8001554:	03db      	lsls	r3, r3, #15
 8001556:	20ff      	movs	r0, #255	@ 0xff
 8001558:	433b      	orrs	r3, r7
 800155a:	e7ed      	b.n	8001538 <__aeabi_d2f+0x2c>
 800155c:	2c00      	cmp	r4, #0
 800155e:	dd0c      	ble.n	800157a <__aeabi_d2f+0x6e>
 8001560:	9b00      	ldr	r3, [sp, #0]
 8001562:	00ff      	lsls	r7, r7, #3
 8001564:	019b      	lsls	r3, r3, #6
 8001566:	1e58      	subs	r0, r3, #1
 8001568:	4183      	sbcs	r3, r0
 800156a:	0f69      	lsrs	r1, r5, #29
 800156c:	433b      	orrs	r3, r7
 800156e:	430b      	orrs	r3, r1
 8001570:	0759      	lsls	r1, r3, #29
 8001572:	d127      	bne.n	80015c4 <__aeabi_d2f+0xb8>
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	b2e0      	uxtb	r0, r4
 8001578:	e7de      	b.n	8001538 <__aeabi_d2f+0x2c>
 800157a:	0021      	movs	r1, r4
 800157c:	3117      	adds	r1, #23
 800157e:	db31      	blt.n	80015e4 <__aeabi_d2f+0xd8>
 8001580:	2180      	movs	r1, #128	@ 0x80
 8001582:	201e      	movs	r0, #30
 8001584:	0409      	lsls	r1, r1, #16
 8001586:	4339      	orrs	r1, r7
 8001588:	1b00      	subs	r0, r0, r4
 800158a:	281f      	cmp	r0, #31
 800158c:	dd2d      	ble.n	80015ea <__aeabi_d2f+0xde>
 800158e:	2602      	movs	r6, #2
 8001590:	4276      	negs	r6, r6
 8001592:	1b34      	subs	r4, r6, r4
 8001594:	000e      	movs	r6, r1
 8001596:	40e6      	lsrs	r6, r4
 8001598:	0034      	movs	r4, r6
 800159a:	2820      	cmp	r0, #32
 800159c:	d004      	beq.n	80015a8 <__aeabi_d2f+0x9c>
 800159e:	481a      	ldr	r0, [pc, #104]	@ (8001608 <__aeabi_d2f+0xfc>)
 80015a0:	4684      	mov	ip, r0
 80015a2:	4463      	add	r3, ip
 80015a4:	4099      	lsls	r1, r3
 80015a6:	430d      	orrs	r5, r1
 80015a8:	002b      	movs	r3, r5
 80015aa:	1e59      	subs	r1, r3, #1
 80015ac:	418b      	sbcs	r3, r1
 80015ae:	4323      	orrs	r3, r4
 80015b0:	0759      	lsls	r1, r3, #29
 80015b2:	d003      	beq.n	80015bc <__aeabi_d2f+0xb0>
 80015b4:	210f      	movs	r1, #15
 80015b6:	4019      	ands	r1, r3
 80015b8:	2904      	cmp	r1, #4
 80015ba:	d10b      	bne.n	80015d4 <__aeabi_d2f+0xc8>
 80015bc:	019b      	lsls	r3, r3, #6
 80015be:	2000      	movs	r0, #0
 80015c0:	0a5b      	lsrs	r3, r3, #9
 80015c2:	e7b9      	b.n	8001538 <__aeabi_d2f+0x2c>
 80015c4:	210f      	movs	r1, #15
 80015c6:	4019      	ands	r1, r3
 80015c8:	2904      	cmp	r1, #4
 80015ca:	d104      	bne.n	80015d6 <__aeabi_d2f+0xca>
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	0a5b      	lsrs	r3, r3, #9
 80015d0:	b2e0      	uxtb	r0, r4
 80015d2:	e7b1      	b.n	8001538 <__aeabi_d2f+0x2c>
 80015d4:	2400      	movs	r4, #0
 80015d6:	3304      	adds	r3, #4
 80015d8:	0159      	lsls	r1, r3, #5
 80015da:	d5f7      	bpl.n	80015cc <__aeabi_d2f+0xc0>
 80015dc:	3401      	adds	r4, #1
 80015de:	2300      	movs	r3, #0
 80015e0:	b2e0      	uxtb	r0, r4
 80015e2:	e7a9      	b.n	8001538 <__aeabi_d2f+0x2c>
 80015e4:	2000      	movs	r0, #0
 80015e6:	2300      	movs	r3, #0
 80015e8:	e7a6      	b.n	8001538 <__aeabi_d2f+0x2c>
 80015ea:	4c08      	ldr	r4, [pc, #32]	@ (800160c <__aeabi_d2f+0x100>)
 80015ec:	191c      	adds	r4, r3, r4
 80015ee:	002b      	movs	r3, r5
 80015f0:	40a5      	lsls	r5, r4
 80015f2:	40c3      	lsrs	r3, r0
 80015f4:	40a1      	lsls	r1, r4
 80015f6:	1e68      	subs	r0, r5, #1
 80015f8:	4185      	sbcs	r5, r0
 80015fa:	4329      	orrs	r1, r5
 80015fc:	430b      	orrs	r3, r1
 80015fe:	e7d7      	b.n	80015b0 <__aeabi_d2f+0xa4>
 8001600:	000007fe 	.word	0x000007fe
 8001604:	fffffc80 	.word	0xfffffc80
 8001608:	fffffca2 	.word	0xfffffca2
 800160c:	fffffc82 	.word	0xfffffc82

08001610 <__clzsi2>:
 8001610:	211c      	movs	r1, #28
 8001612:	2301      	movs	r3, #1
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	4298      	cmp	r0, r3
 8001618:	d301      	bcc.n	800161e <__clzsi2+0xe>
 800161a:	0c00      	lsrs	r0, r0, #16
 800161c:	3910      	subs	r1, #16
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	4298      	cmp	r0, r3
 8001622:	d301      	bcc.n	8001628 <__clzsi2+0x18>
 8001624:	0a00      	lsrs	r0, r0, #8
 8001626:	3908      	subs	r1, #8
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	4298      	cmp	r0, r3
 800162c:	d301      	bcc.n	8001632 <__clzsi2+0x22>
 800162e:	0900      	lsrs	r0, r0, #4
 8001630:	3904      	subs	r1, #4
 8001632:	a202      	add	r2, pc, #8	@ (adr r2, 800163c <__clzsi2+0x2c>)
 8001634:	5c10      	ldrb	r0, [r2, r0]
 8001636:	1840      	adds	r0, r0, r1
 8001638:	4770      	bx	lr
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	02020304 	.word	0x02020304
 8001640:	01010101 	.word	0x01010101
	...

0800164c <MPU6050_StartUp>:

MPU6050_VALUES result;
extern I2C_HandleTypeDef hi2c1;


MPU6050_STATUS MPU6050_StartUp(void){
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b087      	sub	sp, #28
 8001650:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;
	uint8_t data_to_send;


	HAL_Delay(10);
 8001652:	200a      	movs	r0, #10
 8001654:	f000 fbba 	bl	8001dcc <HAL_Delay>
	data_to_send = 0x00; // Send FS_SELL to config the gyro full scale range 4G
 8001658:	1dbb      	adds	r3, r7, #6
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, REG_CONFIG_GYRO, 1, &data_to_send, 1, HAL_MAX_DELAY);
 800165e:	1dfc      	adds	r4, r7, #7
 8001660:	482a      	ldr	r0, [pc, #168]	@ (800170c <MPU6050_StartUp+0xc0>)
 8001662:	2301      	movs	r3, #1
 8001664:	425b      	negs	r3, r3
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	2301      	movs	r3, #1
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	1dbb      	adds	r3, r7, #6
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2301      	movs	r3, #1
 8001672:	221b      	movs	r2, #27
 8001674:	21d0      	movs	r1, #208	@ 0xd0
 8001676:	f000 fec7 	bl	8002408 <HAL_I2C_Mem_Write>
 800167a:	0003      	movs	r3, r0
 800167c:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return CANT_ACESS_REG_GYRO;
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MPU6050_StartUp+0x3e>
 8001686:	2302      	movs	r3, #2
 8001688:	e03b      	b.n	8001702 <MPU6050_StartUp+0xb6>
	HAL_Delay(10);
 800168a:	200a      	movs	r0, #10
 800168c:	f000 fb9e 	bl	8001dcc <HAL_Delay>

	data_to_send = 0x00; // Send FS_SELL to config the acc full scale range 4G
 8001690:	1dbb      	adds	r3, r7, #6
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, REG_CONFIG_ACC, 1, &data_to_send, 1, HAL_MAX_DELAY);
 8001696:	1dfc      	adds	r4, r7, #7
 8001698:	481c      	ldr	r0, [pc, #112]	@ (800170c <MPU6050_StartUp+0xc0>)
 800169a:	2301      	movs	r3, #1
 800169c:	425b      	negs	r3, r3
 800169e:	9302      	str	r3, [sp, #8]
 80016a0:	2301      	movs	r3, #1
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	1dbb      	adds	r3, r7, #6
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2301      	movs	r3, #1
 80016aa:	221c      	movs	r2, #28
 80016ac:	21d0      	movs	r1, #208	@ 0xd0
 80016ae:	f000 feab 	bl	8002408 <HAL_I2C_Mem_Write>
 80016b2:	0003      	movs	r3, r0
 80016b4:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return CANT_ACESS_REG_ACC;
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MPU6050_StartUp+0x76>
 80016be:	2303      	movs	r3, #3
 80016c0:	e01f      	b.n	8001702 <MPU6050_StartUp+0xb6>
	HAL_Delay(10);
 80016c2:	200a      	movs	r0, #10
 80016c4:	f000 fb82 	bl	8001dcc <HAL_Delay>

	data_to_send = 0x00; // Out of sleep mode and able temperature sensor
 80016c8:	1dbb      	adds	r3, r7, #6
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
	status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, REG_PWR_CTRL, 1, &data_to_send, 1, HAL_MAX_DELAY);
 80016ce:	1dfc      	adds	r4, r7, #7
 80016d0:	480e      	ldr	r0, [pc, #56]	@ (800170c <MPU6050_StartUp+0xc0>)
 80016d2:	2301      	movs	r3, #1
 80016d4:	425b      	negs	r3, r3
 80016d6:	9302      	str	r3, [sp, #8]
 80016d8:	2301      	movs	r3, #1
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	1dbb      	adds	r3, r7, #6
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2301      	movs	r3, #1
 80016e2:	226b      	movs	r2, #107	@ 0x6b
 80016e4:	21d0      	movs	r1, #208	@ 0xd0
 80016e6:	f000 fe8f 	bl	8002408 <HAL_I2C_Mem_Write>
 80016ea:	0003      	movs	r3, r0
 80016ec:	7023      	strb	r3, [r4, #0]
	if(status != HAL_OK) return CANT_ACESS_REG_PWR;
 80016ee:	1dfb      	adds	r3, r7, #7
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MPU6050_StartUp+0xae>
 80016f6:	2304      	movs	r3, #4
 80016f8:	e003      	b.n	8001702 <MPU6050_StartUp+0xb6>
	HAL_Delay(10);
 80016fa:	200a      	movs	r0, #10
 80016fc:	f000 fb66 	bl	8001dcc <HAL_Delay>

	return STATUS_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b003      	add	sp, #12
 8001708:	bd90      	pop	{r4, r7, pc}
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	20000190 	.word	0x20000190

08001710 <MPU6050_ReadValues>:

MPU6050_VALUES MPU6050_ReadValues(void){
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b08d      	sub	sp, #52	@ 0x34
 8001714:	af04      	add	r7, sp, #16
 8001716:	6078      	str	r0, [r7, #4]
	uint8_t readDataAcc[6];
	uint8_t readDataGyro[6];
	uint8_t readDataTemp[2];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR + 1, REG_ACC_DATA, 1, readDataAcc, 6, HAL_MAX_DELAY);
 8001718:	4863      	ldr	r0, [pc, #396]	@ (80018a8 <MPU6050_ReadValues+0x198>)
 800171a:	2301      	movs	r3, #1
 800171c:	425b      	negs	r3, r3
 800171e:	9302      	str	r3, [sp, #8]
 8001720:	2306      	movs	r3, #6
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	2418      	movs	r4, #24
 8001726:	193b      	adds	r3, r7, r4
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2301      	movs	r3, #1
 800172c:	223d      	movs	r2, #61	@ 0x3d
 800172e:	21d1      	movs	r1, #209	@ 0xd1
 8001730:	f000 ff98 	bl	8002664 <HAL_I2C_Mem_Read>

	result.AccXValue = (int16_t)((readDataAcc[0] << 8) + readDataAcc[1]) / 360;
 8001734:	193b      	adds	r3, r7, r4
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b29b      	uxth	r3, r3
 800173c:	193a      	adds	r2, r7, r4
 800173e:	7852      	ldrb	r2, [r2, #1]
 8001740:	189b      	adds	r3, r3, r2
 8001742:	b29b      	uxth	r3, r3
 8001744:	b21b      	sxth	r3, r3
 8001746:	22b4      	movs	r2, #180	@ 0xb4
 8001748:	0051      	lsls	r1, r2, #1
 800174a:	0018      	movs	r0, r3
 800174c:	f7fe fd66 	bl	800021c <__divsi3>
 8001750:	0003      	movs	r3, r0
 8001752:	b21a      	sxth	r2, r3
 8001754:	4b55      	ldr	r3, [pc, #340]	@ (80018ac <MPU6050_ReadValues+0x19c>)
 8001756:	801a      	strh	r2, [r3, #0]
	result.AccYValue = (int16_t)((readDataAcc[2] << 8) + readDataAcc[3]) / 360;
 8001758:	193b      	adds	r3, r7, r4
 800175a:	789b      	ldrb	r3, [r3, #2]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b29b      	uxth	r3, r3
 8001760:	193a      	adds	r2, r7, r4
 8001762:	78d2      	ldrb	r2, [r2, #3]
 8001764:	189b      	adds	r3, r3, r2
 8001766:	b29b      	uxth	r3, r3
 8001768:	b21b      	sxth	r3, r3
 800176a:	22b4      	movs	r2, #180	@ 0xb4
 800176c:	0051      	lsls	r1, r2, #1
 800176e:	0018      	movs	r0, r3
 8001770:	f7fe fd54 	bl	800021c <__divsi3>
 8001774:	0003      	movs	r3, r0
 8001776:	b21a      	sxth	r2, r3
 8001778:	4b4c      	ldr	r3, [pc, #304]	@ (80018ac <MPU6050_ReadValues+0x19c>)
 800177a:	805a      	strh	r2, [r3, #2]
	result.AccZValue = (int16_t)((readDataAcc[4] << 8) + readDataAcc[5]) / 360;
 800177c:	193b      	adds	r3, r7, r4
 800177e:	791b      	ldrb	r3, [r3, #4]
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	b29b      	uxth	r3, r3
 8001784:	193a      	adds	r2, r7, r4
 8001786:	7952      	ldrb	r2, [r2, #5]
 8001788:	189b      	adds	r3, r3, r2
 800178a:	b29b      	uxth	r3, r3
 800178c:	b21b      	sxth	r3, r3
 800178e:	22b4      	movs	r2, #180	@ 0xb4
 8001790:	0051      	lsls	r1, r2, #1
 8001792:	0018      	movs	r0, r3
 8001794:	f7fe fd42 	bl	800021c <__divsi3>
 8001798:	0003      	movs	r3, r0
 800179a:	b21a      	sxth	r2, r3
 800179c:	4b43      	ldr	r3, [pc, #268]	@ (80018ac <MPU6050_ReadValues+0x19c>)
 800179e:	809a      	strh	r2, [r3, #4]

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR + 1, REG_GYRO_DATA, 1, readDataGyro, 6, HAL_MAX_DELAY);
 80017a0:	4841      	ldr	r0, [pc, #260]	@ (80018a8 <MPU6050_ReadValues+0x198>)
 80017a2:	2301      	movs	r3, #1
 80017a4:	425b      	negs	r3, r3
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	2306      	movs	r3, #6
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	2410      	movs	r4, #16
 80017ae:	193b      	adds	r3, r7, r4
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2301      	movs	r3, #1
 80017b4:	2243      	movs	r2, #67	@ 0x43
 80017b6:	21d1      	movs	r1, #209	@ 0xd1
 80017b8:	f000 ff54 	bl	8002664 <HAL_I2C_Mem_Read>
	result.GyroXValue = (int16_t)((readDataGyro[0] << 8) + readDataGyro[1]) / 360;
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	193a      	adds	r2, r7, r4
 80017c6:	7852      	ldrb	r2, [r2, #1]
 80017c8:	189b      	adds	r3, r3, r2
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	22b4      	movs	r2, #180	@ 0xb4
 80017d0:	0051      	lsls	r1, r2, #1
 80017d2:	0018      	movs	r0, r3
 80017d4:	f7fe fd22 	bl	800021c <__divsi3>
 80017d8:	0003      	movs	r3, r0
 80017da:	b21a      	sxth	r2, r3
 80017dc:	4b33      	ldr	r3, [pc, #204]	@ (80018ac <MPU6050_ReadValues+0x19c>)
 80017de:	80da      	strh	r2, [r3, #6]
	result.GyroYValue = (int16_t)((readDataGyro[2] << 8) + readDataGyro[3]) / 360;
 80017e0:	193b      	adds	r3, r7, r4
 80017e2:	789b      	ldrb	r3, [r3, #2]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	193a      	adds	r2, r7, r4
 80017ea:	78d2      	ldrb	r2, [r2, #3]
 80017ec:	189b      	adds	r3, r3, r2
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	22b4      	movs	r2, #180	@ 0xb4
 80017f4:	0051      	lsls	r1, r2, #1
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7fe fd10 	bl	800021c <__divsi3>
 80017fc:	0003      	movs	r3, r0
 80017fe:	b21a      	sxth	r2, r3
 8001800:	4b2a      	ldr	r3, [pc, #168]	@ (80018ac <MPU6050_ReadValues+0x19c>)
 8001802:	811a      	strh	r2, [r3, #8]
	result.GyroZValue = (int16_t)((readDataGyro[4] << 8) + readDataGyro[5]) / 360;
 8001804:	193b      	adds	r3, r7, r4
 8001806:	791b      	ldrb	r3, [r3, #4]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	b29b      	uxth	r3, r3
 800180c:	193a      	adds	r2, r7, r4
 800180e:	7952      	ldrb	r2, [r2, #5]
 8001810:	189b      	adds	r3, r3, r2
 8001812:	b29b      	uxth	r3, r3
 8001814:	b21b      	sxth	r3, r3
 8001816:	22b4      	movs	r2, #180	@ 0xb4
 8001818:	0051      	lsls	r1, r2, #1
 800181a:	0018      	movs	r0, r3
 800181c:	f7fe fcfe 	bl	800021c <__divsi3>
 8001820:	0003      	movs	r3, r0
 8001822:	b21a      	sxth	r2, r3
 8001824:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <MPU6050_ReadValues+0x19c>)
 8001826:	815a      	strh	r2, [r3, #10]

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR + 1, REG_TEMP_DATA, 1, readDataTemp, 2, HAL_MAX_DELAY);
 8001828:	481f      	ldr	r0, [pc, #124]	@ (80018a8 <MPU6050_ReadValues+0x198>)
 800182a:	2301      	movs	r3, #1
 800182c:	425b      	negs	r3, r3
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	2302      	movs	r3, #2
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	240c      	movs	r4, #12
 8001836:	193b      	adds	r3, r7, r4
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2301      	movs	r3, #1
 800183c:	2241      	movs	r2, #65	@ 0x41
 800183e:	21d1      	movs	r1, #209	@ 0xd1
 8001840:	f000 ff10 	bl	8002664 <HAL_I2C_Mem_Read>

	result.Temperature = (((float)((readDataTemp[0] << 8) + readDataTemp[1])) / 340 + 36.53) / 8.0;
 8001844:	0022      	movs	r2, r4
 8001846:	18bb      	adds	r3, r7, r2
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	18ba      	adds	r2, r7, r2
 800184e:	7852      	ldrb	r2, [r2, #1]
 8001850:	189b      	adds	r3, r3, r2
 8001852:	0018      	movs	r0, r3
 8001854:	f7fe fee4 	bl	8000620 <__aeabi_i2f>
 8001858:	1c03      	adds	r3, r0, #0
 800185a:	4915      	ldr	r1, [pc, #84]	@ (80018b0 <MPU6050_ReadValues+0x1a0>)
 800185c:	1c18      	adds	r0, r3, #0
 800185e:	f7fe fdc9 	bl	80003f4 <__aeabi_fdiv>
 8001862:	1c03      	adds	r3, r0, #0
 8001864:	1c18      	adds	r0, r3, #0
 8001866:	f7ff fe09 	bl	800147c <__aeabi_f2d>
 800186a:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <MPU6050_ReadValues+0x1a4>)
 800186c:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <MPU6050_ReadValues+0x1a8>)
 800186e:	f7fe ff27 	bl	80006c0 <__aeabi_dadd>
 8001872:	0002      	movs	r2, r0
 8001874:	000b      	movs	r3, r1
 8001876:	0010      	movs	r0, r2
 8001878:	0019      	movs	r1, r3
 800187a:	2200      	movs	r2, #0
 800187c:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <MPU6050_ReadValues+0x1ac>)
 800187e:	f7ff fae5 	bl	8000e4c <__aeabi_ddiv>
 8001882:	0002      	movs	r2, r0
 8001884:	000b      	movs	r3, r1
 8001886:	0010      	movs	r0, r2
 8001888:	0019      	movs	r1, r3
 800188a:	f7ff fe3f 	bl	800150c <__aeabi_d2f>
 800188e:	1c02      	adds	r2, r0, #0
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <MPU6050_ReadValues+0x19c>)
 8001892:	60da      	str	r2, [r3, #12]

	return result;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <MPU6050_ReadValues+0x19c>)
 8001898:	ca13      	ldmia	r2!, {r0, r1, r4}
 800189a:	c313      	stmia	r3!, {r0, r1, r4}
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	601a      	str	r2, [r3, #0]
}
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b009      	add	sp, #36	@ 0x24
 80018a6:	bd90      	pop	{r4, r7, pc}
 80018a8:	20000190 	.word	0x20000190
 80018ac:	20000180 	.word	0x20000180
 80018b0:	43aa0000 	.word	0x43aa0000
 80018b4:	0a3d70a4 	.word	0x0a3d70a4
 80018b8:	404243d7 	.word	0x404243d7
 80018bc:	40200000 	.word	0x40200000

080018c0 <StateMachine>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void StateMachine(void){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	if(readValues.GyroXValue > 1000) dir = FRONT;
 80018c4:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <StateMachine+0x64>)
 80018c6:	2206      	movs	r2, #6
 80018c8:	5e9a      	ldrsh	r2, [r3, r2]
 80018ca:	23fa      	movs	r3, #250	@ 0xfa
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	429a      	cmp	r2, r3
 80018d0:	dd03      	ble.n	80018da <StateMachine+0x1a>
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <StateMachine+0x68>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
	else if(readValues.GyroXValue < -1000) dir = BACK;
	else if (readValues.GyroZValue < -1000) dir = RIGHT;
	else if (readValues.GyroZValue > 1000) dir = LEFT;
	else dir = STOPED;
}
 80018d8:	e021      	b.n	800191e <StateMachine+0x5e>
	else if(readValues.GyroXValue < -1000) dir = BACK;
 80018da:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <StateMachine+0x64>)
 80018dc:	2206      	movs	r2, #6
 80018de:	5e9b      	ldrsh	r3, [r3, r2]
 80018e0:	4a12      	ldr	r2, [pc, #72]	@ (800192c <StateMachine+0x6c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	da03      	bge.n	80018ee <StateMachine+0x2e>
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <StateMachine+0x68>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
}
 80018ec:	e017      	b.n	800191e <StateMachine+0x5e>
	else if (readValues.GyroZValue < -1000) dir = RIGHT;
 80018ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <StateMachine+0x64>)
 80018f0:	220a      	movs	r2, #10
 80018f2:	5e9b      	ldrsh	r3, [r3, r2]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <StateMachine+0x6c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	da03      	bge.n	8001902 <StateMachine+0x42>
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <StateMachine+0x68>)
 80018fc:	2203      	movs	r2, #3
 80018fe:	701a      	strb	r2, [r3, #0]
}
 8001900:	e00d      	b.n	800191e <StateMachine+0x5e>
	else if (readValues.GyroZValue > 1000) dir = LEFT;
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <StateMachine+0x64>)
 8001904:	220a      	movs	r2, #10
 8001906:	5e9a      	ldrsh	r2, [r3, r2]
 8001908:	23fa      	movs	r3, #250	@ 0xfa
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	429a      	cmp	r2, r3
 800190e:	dd03      	ble.n	8001918 <StateMachine+0x58>
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <StateMachine+0x68>)
 8001912:	2202      	movs	r2, #2
 8001914:	701a      	strb	r2, [r3, #0]
}
 8001916:	e002      	b.n	800191e <StateMachine+0x5e>
	else dir = STOPED;
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <StateMachine+0x68>)
 800191a:	2204      	movs	r2, #4
 800191c:	701a      	strb	r2, [r3, #0]
}
 800191e:	46c0      	nop			@ (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200001e8 	.word	0x200001e8
 8001928:	200001f8 	.word	0x200001f8
 800192c:	fffffc18 	.word	0xfffffc18

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001936:	f000 f9d9 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800193a:	f000 f81f 	bl	800197c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193e:	f000 f8d7 	bl	8001af0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001942:	f000 f895 	bl	8001a70 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001946:	f007 fad3 	bl	8008ef0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  verify = MPU6050_StartUp();
 800194a:	f7ff fe7f 	bl	800164c <MPU6050_StartUp>
 800194e:	0003      	movs	r3, r0
 8001950:	001a      	movs	r2, r3
 8001952:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <main+0x44>)
 8001954:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  readValues = MPU6050_ReadValues();
 8001956:	4c08      	ldr	r4, [pc, #32]	@ (8001978 <main+0x48>)
 8001958:	003b      	movs	r3, r7
 800195a:	0018      	movs	r0, r3
 800195c:	f7ff fed8 	bl	8001710 <MPU6050_ReadValues>
 8001960:	003a      	movs	r2, r7
 8001962:	0023      	movs	r3, r4
 8001964:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001966:	c313      	stmia	r3!, {r0, r1, r4}
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	601a      	str	r2, [r3, #0]
	  StateMachine();
 800196c:	f7ff ffa8 	bl	80018c0 <StateMachine>
	  readValues = MPU6050_ReadValues();
 8001970:	46c0      	nop			@ (mov r8, r8)
 8001972:	e7f0      	b.n	8001956 <main+0x26>
 8001974:	200001e4 	.word	0x200001e4
 8001978:	200001e8 	.word	0x200001e8

0800197c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b09d      	sub	sp, #116	@ 0x74
 8001980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001982:	2438      	movs	r4, #56	@ 0x38
 8001984:	193b      	adds	r3, r7, r4
 8001986:	0018      	movs	r0, r3
 8001988:	2338      	movs	r3, #56	@ 0x38
 800198a:	001a      	movs	r2, r3
 800198c:	2100      	movs	r1, #0
 800198e:	f007 ff2f 	bl	80097f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001992:	2324      	movs	r3, #36	@ 0x24
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	0018      	movs	r0, r3
 8001998:	2314      	movs	r3, #20
 800199a:	001a      	movs	r2, r3
 800199c:	2100      	movs	r1, #0
 800199e:	f007 ff27 	bl	80097f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a2:	003b      	movs	r3, r7
 80019a4:	0018      	movs	r0, r3
 80019a6:	2324      	movs	r3, #36	@ 0x24
 80019a8:	001a      	movs	r2, r3
 80019aa:	2100      	movs	r1, #0
 80019ac:	f007 ff20 	bl	80097f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a68 <SystemClock_Config+0xec>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2d      	ldr	r2, [pc, #180]	@ (8001a6c <SystemClock_Config+0xf0>)
 80019b6:	401a      	ands	r2, r3
 80019b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a68 <SystemClock_Config+0xec>)
 80019ba:	2180      	movs	r1, #128	@ 0x80
 80019bc:	0109      	lsls	r1, r1, #4
 80019be:	430a      	orrs	r2, r1
 80019c0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80019c2:	0021      	movs	r1, r4
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	2222      	movs	r2, #34	@ 0x22
 80019c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2201      	movs	r2, #1
 80019ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	2210      	movs	r2, #16
 80019d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80019d6:	187b      	adds	r3, r7, r1
 80019d8:	2201      	movs	r2, #1
 80019da:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	2202      	movs	r2, #2
 80019e0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	2200      	movs	r2, #0
 80019e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	2280      	movs	r2, #128	@ 0x80
 80019ec:	02d2      	lsls	r2, r2, #11
 80019ee:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80019f0:	187b      	adds	r3, r7, r1
 80019f2:	2280      	movs	r2, #128	@ 0x80
 80019f4:	03d2      	lsls	r2, r2, #15
 80019f6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	0018      	movs	r0, r3
 80019fc:	f003 f92e 	bl	8004c5c <HAL_RCC_OscConfig>
 8001a00:	1e03      	subs	r3, r0, #0
 8001a02:	d001      	beq.n	8001a08 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001a04:	f000 f8bc 	bl	8001b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a08:	2124      	movs	r1, #36	@ 0x24
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	220f      	movs	r2, #15
 8001a0e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	2203      	movs	r2, #3
 8001a14:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a22:	187b      	adds	r3, r7, r1
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f003 fcd9 	bl	80053e4 <HAL_RCC_ClockConfig>
 8001a32:	1e03      	subs	r3, r0, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001a36:	f000 f8a3 	bl	8001b80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8001a3a:	003b      	movs	r3, r7
 8001a3c:	2248      	movs	r2, #72	@ 0x48
 8001a3e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a40:	003b      	movs	r3, r7
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001a46:	003b      	movs	r3, r7
 8001a48:	2280      	movs	r2, #128	@ 0x80
 8001a4a:	04d2      	lsls	r2, r2, #19
 8001a4c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a4e:	003b      	movs	r3, r7
 8001a50:	0018      	movs	r0, r3
 8001a52:	f003 fe95 	bl	8005780 <HAL_RCCEx_PeriphCLKConfig>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d001      	beq.n	8001a5e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8001a5a:	f000 f891 	bl	8001b80 <Error_Handler>
  }
}
 8001a5e:	46c0      	nop			@ (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b01d      	add	sp, #116	@ 0x74
 8001a64:	bd90      	pop	{r4, r7, pc}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	ffffe7ff 	.word	0xffffe7ff

08001a70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae4 <MX_I2C1_Init+0x74>)
 8001a76:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae8 <MX_I2C1_Init+0x78>)
 8001a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <MX_I2C1_Init+0x74>)
 8001a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001aec <MX_I2C1_Init+0x7c>)
 8001a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a80:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <MX_I2C1_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a86:	4b17      	ldr	r3, [pc, #92]	@ (8001ae4 <MX_I2C1_Init+0x74>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <MX_I2C1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a92:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <MX_I2C1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a98:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <MX_I2C1_Init+0x74>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <MX_I2C1_Init+0x74>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <MX_I2C1_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <MX_I2C1_Init+0x74>)
 8001aac:	0018      	movs	r0, r3
 8001aae:	f000 fc05 	bl	80022bc <HAL_I2C_Init>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d001      	beq.n	8001aba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ab6:	f000 f863 	bl	8001b80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <MX_I2C1_Init+0x74>)
 8001abc:	2100      	movs	r1, #0
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f001 fa00 	bl	8002ec4 <HAL_I2CEx_ConfigAnalogFilter>
 8001ac4:	1e03      	subs	r3, r0, #0
 8001ac6:	d001      	beq.n	8001acc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ac8:	f000 f85a 	bl	8001b80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <MX_I2C1_Init+0x74>)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f001 fa43 	bl	8002f5c <HAL_I2CEx_ConfigDigitalFilter>
 8001ad6:	1e03      	subs	r3, r0, #0
 8001ad8:	d001      	beq.n	8001ade <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ada:	f000 f851 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000190 	.word	0x20000190
 8001ae8:	40005400 	.word	0x40005400
 8001aec:	00b07cb4 	.word	0x00b07cb4

08001af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b089      	sub	sp, #36	@ 0x24
 8001af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af6:	240c      	movs	r4, #12
 8001af8:	193b      	adds	r3, r7, r4
 8001afa:	0018      	movs	r0, r3
 8001afc:	2314      	movs	r3, #20
 8001afe:	001a      	movs	r2, r3
 8001b00:	2100      	movs	r1, #0
 8001b02:	f007 fe75 	bl	80097f0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b06:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <MX_GPIO_Init+0x88>)
 8001b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b78 <MX_GPIO_Init+0x88>)
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b12:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <MX_GPIO_Init+0x88>)
 8001b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b16:	2204      	movs	r2, #4
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <MX_GPIO_Init+0x88>)
 8001b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <MX_GPIO_Init+0x88>)
 8001b24:	2101      	movs	r1, #1
 8001b26:	430a      	orrs	r2, r1
 8001b28:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b2a:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <MX_GPIO_Init+0x88>)
 8001b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4013      	ands	r3, r2
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <MX_GPIO_Init+0x88>)
 8001b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <MX_GPIO_Init+0x88>)
 8001b3c:	2102      	movs	r1, #2
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b42:	4b0d      	ldr	r3, [pc, #52]	@ (8001b78 <MX_GPIO_Init+0x88>)
 8001b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b46:	2202      	movs	r2, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : MOUSE_CLICK_Pin */
  GPIO_InitStruct.Pin = MOUSE_CLICK_Pin;
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	2280      	movs	r2, #128	@ 0x80
 8001b52:	0192      	lsls	r2, r2, #6
 8001b54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b56:	193b      	adds	r3, r7, r4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5c:	193b      	adds	r3, r7, r4
 8001b5e:	2201      	movs	r2, #1
 8001b60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MOUSE_CLICK_GPIO_Port, &GPIO_InitStruct);
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	4a05      	ldr	r2, [pc, #20]	@ (8001b7c <MX_GPIO_Init+0x8c>)
 8001b66:	0019      	movs	r1, r3
 8001b68:	0010      	movs	r0, r2
 8001b6a:	f000 fa31 	bl	8001fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b009      	add	sp, #36	@ 0x24
 8001b74:	bd90      	pop	{r4, r7, pc}
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	50000800 	.word	0x50000800

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	e7fd      	b.n	8001b88 <Error_Handler+0x8>

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b90:	4b07      	ldr	r3, [pc, #28]	@ (8001bb0 <HAL_MspInit+0x24>)
 8001b92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_MspInit+0x24>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <HAL_MspInit+0x24>)
 8001b9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ba0:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <HAL_MspInit+0x24>)
 8001ba2:	2180      	movs	r1, #128	@ 0x80
 8001ba4:	0549      	lsls	r1, r1, #21
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b089      	sub	sp, #36	@ 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	240c      	movs	r4, #12
 8001bbe:	193b      	adds	r3, r7, r4
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	2314      	movs	r3, #20
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	f007 fe12 	bl	80097f0 <memset>
  if(hi2c->Instance==I2C1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a18      	ldr	r2, [pc, #96]	@ (8001c34 <HAL_I2C_MspInit+0x80>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d129      	bne.n	8001c2a <HAL_I2C_MspInit+0x76>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <HAL_I2C_MspInit+0x84>)
 8001bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bda:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <HAL_I2C_MspInit+0x84>)
 8001bdc:	2102      	movs	r1, #2
 8001bde:	430a      	orrs	r2, r1
 8001be0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_I2C_MspInit+0x84>)
 8001be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bee:	193b      	adds	r3, r7, r4
 8001bf0:	22c0      	movs	r2, #192	@ 0xc0
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf6:	0021      	movs	r1, r4
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	2212      	movs	r2, #18
 8001bfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	187b      	adds	r3, r7, r1
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2203      	movs	r2, #3
 8001c08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <HAL_I2C_MspInit+0x88>)
 8001c14:	0019      	movs	r1, r3
 8001c16:	0010      	movs	r0, r2
 8001c18:	f000 f9da 	bl	8001fd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <HAL_I2C_MspInit+0x84>)
 8001c1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_I2C_MspInit+0x84>)
 8001c22:	2180      	movs	r1, #128	@ 0x80
 8001c24:	0389      	lsls	r1, r1, #14
 8001c26:	430a      	orrs	r2, r1
 8001c28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b009      	add	sp, #36	@ 0x24
 8001c30:	bd90      	pop	{r4, r7, pc}
 8001c32:	46c0      	nop			@ (mov r8, r8)
 8001c34:	40005400 	.word	0x40005400
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	50000400 	.word	0x50000400

08001c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c44:	46c0      	nop			@ (mov r8, r8)
 8001c46:	e7fd      	b.n	8001c44 <NMI_Handler+0x4>

08001c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4c:	46c0      	nop			@ (mov r8, r8)
 8001c4e:	e7fd      	b.n	8001c4c <HardFault_Handler+0x4>

08001c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c54:	46c0      	nop			@ (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c68:	f000 f894 	bl	8001d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6c:	46c0      	nop			@ (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001c78:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <USB_IRQHandler+0x14>)
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f001 fad4 	bl	8003228 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001c80:	46c0      	nop			@ (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	200006c8 	.word	0x200006c8

08001c8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c90:	46c0      	nop			@ (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001c98:	480d      	ldr	r0, [pc, #52]	@ (8001cd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c9a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c9c:	f7ff fff6 	bl	8001c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca0:	480c      	ldr	r0, [pc, #48]	@ (8001cd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ca2:	490d      	ldr	r1, [pc, #52]	@ (8001cd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <LoopForever+0xe>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ce4 <LoopForever+0x16>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f007 fd9b 	bl	8009800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cca:	f7ff fe31 	bl	8001930 <main>

08001cce <LoopForever>:

LoopForever:
    b LoopForever
 8001cce:	e7fe      	b.n	8001cce <LoopForever>
  ldr   r0, =_estack
 8001cd0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd8:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001cdc:	080099e8 	.word	0x080099e8
  ldr r2, =_sbss
 8001ce0:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001ce4:	200009b8 	.word	0x200009b8

08001ce8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce8:	e7fe      	b.n	8001ce8 <ADC1_COMP_IRQHandler>
	...

08001cec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <HAL_Init+0x3c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_Init+0x3c>)
 8001cfe:	2140      	movs	r1, #64	@ 0x40
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d04:	2000      	movs	r0, #0
 8001d06:	f000 f811 	bl	8001d2c <HAL_InitTick>
 8001d0a:	1e03      	subs	r3, r0, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001d0e:	1dfb      	adds	r3, r7, #7
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
 8001d14:	e001      	b.n	8001d1a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d16:	f7ff ff39 	bl	8001b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d1a:	1dfb      	adds	r3, r7, #7
 8001d1c:	781b      	ldrb	r3, [r3, #0]
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b002      	add	sp, #8
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	40022000 	.word	0x40022000

08001d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_InitTick+0x5c>)
 8001d36:	681c      	ldr	r4, [r3, #0]
 8001d38:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <HAL_InitTick+0x60>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	23fa      	movs	r3, #250	@ 0xfa
 8001d40:	0098      	lsls	r0, r3, #2
 8001d42:	f7fe f9e1 	bl	8000108 <__udivsi3>
 8001d46:	0003      	movs	r3, r0
 8001d48:	0019      	movs	r1, r3
 8001d4a:	0020      	movs	r0, r4
 8001d4c:	f7fe f9dc 	bl	8000108 <__udivsi3>
 8001d50:	0003      	movs	r3, r0
 8001d52:	0018      	movs	r0, r3
 8001d54:	f000 f92f 	bl	8001fb6 <HAL_SYSTICK_Config>
 8001d58:	1e03      	subs	r3, r0, #0
 8001d5a:	d001      	beq.n	8001d60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e00f      	b.n	8001d80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d80b      	bhi.n	8001d7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	425b      	negs	r3, r3
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 f8fc 	bl	8001f6c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_InitTick+0x64>)
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b003      	add	sp, #12
 8001d86:	bd90      	pop	{r4, r7, pc}
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	20000004 	.word	0x20000004

08001d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <HAL_IncTick+0x1c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <HAL_IncTick+0x20>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	18d2      	adds	r2, r2, r3
 8001da4:	4b03      	ldr	r3, [pc, #12]	@ (8001db4 <HAL_IncTick+0x20>)
 8001da6:	601a      	str	r2, [r3, #0]
}
 8001da8:	46c0      	nop			@ (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	20000008 	.word	0x20000008
 8001db4:	200001fc 	.word	0x200001fc

08001db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  return uwTick;
 8001dbc:	4b02      	ldr	r3, [pc, #8]	@ (8001dc8 <HAL_GetTick+0x10>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
}
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	200001fc 	.word	0x200001fc

08001dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff fff0 	bl	8001db8 <HAL_GetTick>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3301      	adds	r3, #1
 8001de4:	d005      	beq.n	8001df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_Delay+0x44>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	001a      	movs	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	189b      	adds	r3, r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	f7ff ffe0 	bl	8001db8 <HAL_GetTick>
 8001df8:	0002      	movs	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d8f7      	bhi.n	8001df4 <HAL_Delay+0x28>
  {
  }
}
 8001e04:	46c0      	nop			@ (mov r8, r8)
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b004      	add	sp, #16
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	20000008 	.word	0x20000008

08001e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	1dfb      	adds	r3, r7, #7
 8001e1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e20:	1dfb      	adds	r3, r7, #7
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e26:	d809      	bhi.n	8001e3c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e28:	1dfb      	adds	r3, r7, #7
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	001a      	movs	r2, r3
 8001e2e:	231f      	movs	r3, #31
 8001e30:	401a      	ands	r2, r3
 8001e32:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <__NVIC_EnableIRQ+0x30>)
 8001e34:	2101      	movs	r1, #1
 8001e36:	4091      	lsls	r1, r2
 8001e38:	000a      	movs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
  }
}
 8001e3c:	46c0      	nop			@ (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b002      	add	sp, #8
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	e000e100 	.word	0xe000e100

08001e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	0002      	movs	r2, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e56:	1dfb      	adds	r3, r7, #7
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e5c:	d828      	bhi.n	8001eb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e5e:	4a2f      	ldr	r2, [pc, #188]	@ (8001f1c <__NVIC_SetPriority+0xd4>)
 8001e60:	1dfb      	adds	r3, r7, #7
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	b25b      	sxtb	r3, r3
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	33c0      	adds	r3, #192	@ 0xc0
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	589b      	ldr	r3, [r3, r2]
 8001e6e:	1dfa      	adds	r2, r7, #7
 8001e70:	7812      	ldrb	r2, [r2, #0]
 8001e72:	0011      	movs	r1, r2
 8001e74:	2203      	movs	r2, #3
 8001e76:	400a      	ands	r2, r1
 8001e78:	00d2      	lsls	r2, r2, #3
 8001e7a:	21ff      	movs	r1, #255	@ 0xff
 8001e7c:	4091      	lsls	r1, r2
 8001e7e:	000a      	movs	r2, r1
 8001e80:	43d2      	mvns	r2, r2
 8001e82:	401a      	ands	r2, r3
 8001e84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	019b      	lsls	r3, r3, #6
 8001e8a:	22ff      	movs	r2, #255	@ 0xff
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	0018      	movs	r0, r3
 8001e94:	2303      	movs	r3, #3
 8001e96:	4003      	ands	r3, r0
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e9c:	481f      	ldr	r0, [pc, #124]	@ (8001f1c <__NVIC_SetPriority+0xd4>)
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b25b      	sxtb	r3, r3
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	33c0      	adds	r3, #192	@ 0xc0
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001eae:	e031      	b.n	8001f14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f20 <__NVIC_SetPriority+0xd8>)
 8001eb2:	1dfb      	adds	r3, r7, #7
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	230f      	movs	r3, #15
 8001eba:	400b      	ands	r3, r1
 8001ebc:	3b08      	subs	r3, #8
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3306      	adds	r3, #6
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	18d3      	adds	r3, r2, r3
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	1dfa      	adds	r2, r7, #7
 8001ecc:	7812      	ldrb	r2, [r2, #0]
 8001ece:	0011      	movs	r1, r2
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	00d2      	lsls	r2, r2, #3
 8001ed6:	21ff      	movs	r1, #255	@ 0xff
 8001ed8:	4091      	lsls	r1, r2
 8001eda:	000a      	movs	r2, r1
 8001edc:	43d2      	mvns	r2, r2
 8001ede:	401a      	ands	r2, r3
 8001ee0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	019b      	lsls	r3, r3, #6
 8001ee6:	22ff      	movs	r2, #255	@ 0xff
 8001ee8:	401a      	ands	r2, r3
 8001eea:	1dfb      	adds	r3, r7, #7
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	0018      	movs	r0, r3
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	4003      	ands	r3, r0
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ef8:	4809      	ldr	r0, [pc, #36]	@ (8001f20 <__NVIC_SetPriority+0xd8>)
 8001efa:	1dfb      	adds	r3, r7, #7
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	001c      	movs	r4, r3
 8001f00:	230f      	movs	r3, #15
 8001f02:	4023      	ands	r3, r4
 8001f04:	3b08      	subs	r3, #8
 8001f06:	089b      	lsrs	r3, r3, #2
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	3306      	adds	r3, #6
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	18c3      	adds	r3, r0, r3
 8001f10:	3304      	adds	r3, #4
 8001f12:	601a      	str	r2, [r3, #0]
}
 8001f14:	46c0      	nop			@ (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b003      	add	sp, #12
 8001f1a:	bd90      	pop	{r4, r7, pc}
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	1e5a      	subs	r2, r3, #1
 8001f30:	2380      	movs	r3, #128	@ 0x80
 8001f32:	045b      	lsls	r3, r3, #17
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d301      	bcc.n	8001f3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e010      	b.n	8001f5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <SysTick_Config+0x44>)
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	3a01      	subs	r2, #1
 8001f42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f44:	2301      	movs	r3, #1
 8001f46:	425b      	negs	r3, r3
 8001f48:	2103      	movs	r1, #3
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f7ff ff7c 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <SysTick_Config+0x44>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <SysTick_Config+0x44>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	0018      	movs	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b002      	add	sp, #8
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	210f      	movs	r1, #15
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	1c02      	adds	r2, r0, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b25b      	sxtb	r3, r3
 8001f86:	0011      	movs	r1, r2
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff ff5d 	bl	8001e48 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b004      	add	sp, #16
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	0002      	movs	r2, r0
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b25b      	sxtb	r3, r3
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f7ff ff33 	bl	8001e14 <__NVIC_EnableIRQ>
}
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b002      	add	sp, #8
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff ffaf 	bl	8001f24 <SysTick_Config>
 8001fc6:	0003      	movs	r3, r0
}
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fe6:	e14f      	b.n	8002288 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2101      	movs	r1, #1
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4091      	lsls	r1, r2
 8001ff2:	000a      	movs	r2, r1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d100      	bne.n	8002000 <HAL_GPIO_Init+0x30>
 8001ffe:	e140      	b.n	8002282 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2203      	movs	r2, #3
 8002006:	4013      	ands	r3, r2
 8002008:	2b01      	cmp	r3, #1
 800200a:	d005      	beq.n	8002018 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2203      	movs	r2, #3
 8002012:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002014:	2b02      	cmp	r3, #2
 8002016:	d130      	bne.n	800207a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	409a      	lsls	r2, r3
 8002026:	0013      	movs	r3, r2
 8002028:	43da      	mvns	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	409a      	lsls	r2, r3
 800203a:	0013      	movs	r3, r2
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800204e:	2201      	movs	r2, #1
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
 8002054:	0013      	movs	r3, r2
 8002056:	43da      	mvns	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	2201      	movs	r2, #1
 8002066:	401a      	ands	r2, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	409a      	lsls	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2203      	movs	r2, #3
 8002080:	4013      	ands	r3, r2
 8002082:	2b03      	cmp	r3, #3
 8002084:	d017      	beq.n	80020b6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	409a      	lsls	r2, r3
 8002094:	0013      	movs	r3, r2
 8002096:	43da      	mvns	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	409a      	lsls	r2, r3
 80020a8:	0013      	movs	r3, r2
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	4013      	ands	r3, r2
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d123      	bne.n	800210a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	08da      	lsrs	r2, r3, #3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3208      	adds	r2, #8
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	58d3      	ldr	r3, [r2, r3]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2207      	movs	r2, #7
 80020d4:	4013      	ands	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	220f      	movs	r2, #15
 80020da:	409a      	lsls	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	43da      	mvns	r2, r3
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2107      	movs	r1, #7
 80020ee:	400b      	ands	r3, r1
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	409a      	lsls	r2, r3
 80020f4:	0013      	movs	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	0092      	lsls	r2, r2, #2
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	409a      	lsls	r2, r3
 8002118:	0013      	movs	r3, r2
 800211a:	43da      	mvns	r2, r3
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2203      	movs	r2, #3
 8002128:	401a      	ands	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	409a      	lsls	r2, r3
 8002130:	0013      	movs	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	23c0      	movs	r3, #192	@ 0xc0
 8002144:	029b      	lsls	r3, r3, #10
 8002146:	4013      	ands	r3, r2
 8002148:	d100      	bne.n	800214c <HAL_GPIO_Init+0x17c>
 800214a:	e09a      	b.n	8002282 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214c:	4b54      	ldr	r3, [pc, #336]	@ (80022a0 <HAL_GPIO_Init+0x2d0>)
 800214e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002150:	4b53      	ldr	r3, [pc, #332]	@ (80022a0 <HAL_GPIO_Init+0x2d0>)
 8002152:	2101      	movs	r1, #1
 8002154:	430a      	orrs	r2, r1
 8002156:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002158:	4a52      	ldr	r2, [pc, #328]	@ (80022a4 <HAL_GPIO_Init+0x2d4>)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	3302      	adds	r3, #2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	589b      	ldr	r3, [r3, r2]
 8002164:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2203      	movs	r2, #3
 800216a:	4013      	ands	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	220f      	movs	r2, #15
 8002170:	409a      	lsls	r2, r3
 8002172:	0013      	movs	r3, r2
 8002174:	43da      	mvns	r2, r3
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	23a0      	movs	r3, #160	@ 0xa0
 8002180:	05db      	lsls	r3, r3, #23
 8002182:	429a      	cmp	r2, r3
 8002184:	d019      	beq.n	80021ba <HAL_GPIO_Init+0x1ea>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a47      	ldr	r2, [pc, #284]	@ (80022a8 <HAL_GPIO_Init+0x2d8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_GPIO_Init+0x1e6>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a46      	ldr	r2, [pc, #280]	@ (80022ac <HAL_GPIO_Init+0x2dc>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00d      	beq.n	80021b2 <HAL_GPIO_Init+0x1e2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a45      	ldr	r2, [pc, #276]	@ (80022b0 <HAL_GPIO_Init+0x2e0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d007      	beq.n	80021ae <HAL_GPIO_Init+0x1de>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a44      	ldr	r2, [pc, #272]	@ (80022b4 <HAL_GPIO_Init+0x2e4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d101      	bne.n	80021aa <HAL_GPIO_Init+0x1da>
 80021a6:	2305      	movs	r3, #5
 80021a8:	e008      	b.n	80021bc <HAL_GPIO_Init+0x1ec>
 80021aa:	2306      	movs	r3, #6
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x1ec>
 80021ae:	2303      	movs	r3, #3
 80021b0:	e004      	b.n	80021bc <HAL_GPIO_Init+0x1ec>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e002      	b.n	80021bc <HAL_GPIO_Init+0x1ec>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_GPIO_Init+0x1ec>
 80021ba:	2300      	movs	r3, #0
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	2103      	movs	r1, #3
 80021c0:	400a      	ands	r2, r1
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	4093      	lsls	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021cc:	4935      	ldr	r1, [pc, #212]	@ (80022a4 <HAL_GPIO_Init+0x2d4>)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021da:	4b37      	ldr	r3, [pc, #220]	@ (80022b8 <HAL_GPIO_Init+0x2e8>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	43da      	mvns	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	2380      	movs	r3, #128	@ 0x80
 80021f0:	035b      	lsls	r3, r3, #13
 80021f2:	4013      	ands	r3, r2
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021fe:	4b2e      	ldr	r3, [pc, #184]	@ (80022b8 <HAL_GPIO_Init+0x2e8>)
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002204:	4b2c      	ldr	r3, [pc, #176]	@ (80022b8 <HAL_GPIO_Init+0x2e8>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	43da      	mvns	r2, r3
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	039b      	lsls	r3, r3, #14
 800221c:	4013      	ands	r3, r2
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002228:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <HAL_GPIO_Init+0x2e8>)
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800222e:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <HAL_GPIO_Init+0x2e8>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	43da      	mvns	r2, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	2380      	movs	r3, #128	@ 0x80
 8002244:	029b      	lsls	r3, r3, #10
 8002246:	4013      	ands	r3, r2
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002252:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <HAL_GPIO_Init+0x2e8>)
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002258:	4b17      	ldr	r3, [pc, #92]	@ (80022b8 <HAL_GPIO_Init+0x2e8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	43da      	mvns	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	2380      	movs	r3, #128	@ 0x80
 800226e:	025b      	lsls	r3, r3, #9
 8002270:	4013      	ands	r3, r2
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800227c:	4b0e      	ldr	r3, [pc, #56]	@ (80022b8 <HAL_GPIO_Init+0x2e8>)
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3301      	adds	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	40da      	lsrs	r2, r3
 8002290:	1e13      	subs	r3, r2, #0
 8002292:	d000      	beq.n	8002296 <HAL_GPIO_Init+0x2c6>
 8002294:	e6a8      	b.n	8001fe8 <HAL_GPIO_Init+0x18>
  }
}
 8002296:	46c0      	nop			@ (mov r8, r8)
 8002298:	46c0      	nop			@ (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b006      	add	sp, #24
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010000 	.word	0x40010000
 80022a8:	50000400 	.word	0x50000400
 80022ac:	50000800 	.word	0x50000800
 80022b0:	50000c00 	.word	0x50000c00
 80022b4:	50001c00 	.word	0x50001c00
 80022b8:	40010400 	.word	0x40010400

080022bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e08f      	b.n	80023ee <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2241      	movs	r2, #65	@ 0x41
 80022d2:	5c9b      	ldrb	r3, [r3, r2]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d107      	bne.n	80022ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2240      	movs	r2, #64	@ 0x40
 80022de:	2100      	movs	r1, #0
 80022e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7ff fc65 	bl	8001bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2241      	movs	r2, #65	@ 0x41
 80022ee:	2124      	movs	r1, #36	@ 0x24
 80022f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2101      	movs	r1, #1
 80022fe:	438a      	bics	r2, r1
 8002300:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	493b      	ldr	r1, [pc, #236]	@ (80023f8 <HAL_I2C_Init+0x13c>)
 800230c:	400a      	ands	r2, r1
 800230e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4938      	ldr	r1, [pc, #224]	@ (80023fc <HAL_I2C_Init+0x140>)
 800231c:	400a      	ands	r2, r1
 800231e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d108      	bne.n	800233a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2180      	movs	r1, #128	@ 0x80
 8002332:	0209      	lsls	r1, r1, #8
 8002334:	430a      	orrs	r2, r1
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	e007      	b.n	800234a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2184      	movs	r1, #132	@ 0x84
 8002344:	0209      	lsls	r1, r1, #8
 8002346:	430a      	orrs	r2, r1
 8002348:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d109      	bne.n	8002366 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2180      	movs	r1, #128	@ 0x80
 800235e:	0109      	lsls	r1, r1, #4
 8002360:	430a      	orrs	r2, r1
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	e007      	b.n	8002376 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4923      	ldr	r1, [pc, #140]	@ (8002400 <HAL_I2C_Init+0x144>)
 8002372:	400a      	ands	r2, r1
 8002374:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4920      	ldr	r1, [pc, #128]	@ (8002404 <HAL_I2C_Init+0x148>)
 8002382:	430a      	orrs	r2, r1
 8002384:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	491a      	ldr	r1, [pc, #104]	@ (80023fc <HAL_I2C_Init+0x140>)
 8002392:	400a      	ands	r2, r1
 8002394:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	431a      	orrs	r2, r3
 80023a0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69d9      	ldr	r1, [r3, #28]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1a      	ldr	r2, [r3, #32]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2101      	movs	r1, #1
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2241      	movs	r2, #65	@ 0x41
 80023da:	2120      	movs	r1, #32
 80023dc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2242      	movs	r2, #66	@ 0x42
 80023e8:	2100      	movs	r1, #0
 80023ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b002      	add	sp, #8
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	f0ffffff 	.word	0xf0ffffff
 80023fc:	ffff7fff 	.word	0xffff7fff
 8002400:	fffff7ff 	.word	0xfffff7ff
 8002404:	02008000 	.word	0x02008000

08002408 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b089      	sub	sp, #36	@ 0x24
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	000c      	movs	r4, r1
 8002412:	0010      	movs	r0, r2
 8002414:	0019      	movs	r1, r3
 8002416:	230a      	movs	r3, #10
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	1c22      	adds	r2, r4, #0
 800241c:	801a      	strh	r2, [r3, #0]
 800241e:	2308      	movs	r3, #8
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	1c02      	adds	r2, r0, #0
 8002424:	801a      	strh	r2, [r3, #0]
 8002426:	1dbb      	adds	r3, r7, #6
 8002428:	1c0a      	adds	r2, r1, #0
 800242a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2241      	movs	r2, #65	@ 0x41
 8002430:	5c9b      	ldrb	r3, [r3, r2]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b20      	cmp	r3, #32
 8002436:	d000      	beq.n	800243a <HAL_I2C_Mem_Write+0x32>
 8002438:	e10c      	b.n	8002654 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800243a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243c:	2b00      	cmp	r3, #0
 800243e:	d004      	beq.n	800244a <HAL_I2C_Mem_Write+0x42>
 8002440:	232c      	movs	r3, #44	@ 0x2c
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2280      	movs	r2, #128	@ 0x80
 800244e:	0092      	lsls	r2, r2, #2
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0ff      	b.n	8002656 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2240      	movs	r2, #64	@ 0x40
 800245a:	5c9b      	ldrb	r3, [r3, r2]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_I2C_Mem_Write+0x5c>
 8002460:	2302      	movs	r3, #2
 8002462:	e0f8      	b.n	8002656 <HAL_I2C_Mem_Write+0x24e>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2240      	movs	r2, #64	@ 0x40
 8002468:	2101      	movs	r1, #1
 800246a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800246c:	f7ff fca4 	bl	8001db8 <HAL_GetTick>
 8002470:	0003      	movs	r3, r0
 8002472:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002474:	2380      	movs	r3, #128	@ 0x80
 8002476:	0219      	lsls	r1, r3, #8
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2319      	movs	r3, #25
 8002480:	2201      	movs	r2, #1
 8002482:	f000 fb0b 	bl	8002a9c <I2C_WaitOnFlagUntilTimeout>
 8002486:	1e03      	subs	r3, r0, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e0e3      	b.n	8002656 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2241      	movs	r2, #65	@ 0x41
 8002492:	2121      	movs	r1, #33	@ 0x21
 8002494:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2242      	movs	r2, #66	@ 0x42
 800249a:	2140      	movs	r1, #64	@ 0x40
 800249c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	222c      	movs	r2, #44	@ 0x2c
 80024ae:	18ba      	adds	r2, r7, r2
 80024b0:	8812      	ldrh	r2, [r2, #0]
 80024b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ba:	1dbb      	adds	r3, r7, #6
 80024bc:	881c      	ldrh	r4, [r3, #0]
 80024be:	2308      	movs	r3, #8
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	881a      	ldrh	r2, [r3, #0]
 80024c4:	230a      	movs	r3, #10
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	8819      	ldrh	r1, [r3, #0]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	0023      	movs	r3, r4
 80024d6:	f000 f9f9 	bl	80028cc <I2C_RequestMemoryWrite>
 80024da:	1e03      	subs	r3, r0, #0
 80024dc:	d005      	beq.n	80024ea <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2240      	movs	r2, #64	@ 0x40
 80024e2:	2100      	movs	r1, #0
 80024e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0b5      	b.n	8002656 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2bff      	cmp	r3, #255	@ 0xff
 80024f2:	d911      	bls.n	8002518 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	22ff      	movs	r2, #255	@ 0xff
 80024f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	045c      	lsls	r4, r3, #17
 8002504:	230a      	movs	r3, #10
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	8819      	ldrh	r1, [r3, #0]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	2300      	movs	r3, #0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	0023      	movs	r3, r4
 8002512:	f000 fc9d 	bl	8002e50 <I2C_TransferConfig>
 8002516:	e012      	b.n	800253e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002526:	b2da      	uxtb	r2, r3
 8002528:	2380      	movs	r3, #128	@ 0x80
 800252a:	049c      	lsls	r4, r3, #18
 800252c:	230a      	movs	r3, #10
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	8819      	ldrh	r1, [r3, #0]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	2300      	movs	r3, #0
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	0023      	movs	r3, r4
 800253a:	f000 fc89 	bl	8002e50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	0018      	movs	r0, r3
 8002546:	f000 fb01 	bl	8002b4c <I2C_WaitOnTXISFlagUntilTimeout>
 800254a:	1e03      	subs	r3, r0, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e081      	b.n	8002656 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d03a      	beq.n	8002602 <HAL_I2C_Mem_Write+0x1fa>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002590:	2b00      	cmp	r3, #0
 8002592:	d136      	bne.n	8002602 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002594:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	0013      	movs	r3, r2
 800259e:	2200      	movs	r2, #0
 80025a0:	2180      	movs	r1, #128	@ 0x80
 80025a2:	f000 fa7b 	bl	8002a9c <I2C_WaitOnFlagUntilTimeout>
 80025a6:	1e03      	subs	r3, r0, #0
 80025a8:	d001      	beq.n	80025ae <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e053      	b.n	8002656 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2bff      	cmp	r3, #255	@ 0xff
 80025b6:	d911      	bls.n	80025dc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	22ff      	movs	r2, #255	@ 0xff
 80025bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c2:	b2da      	uxtb	r2, r3
 80025c4:	2380      	movs	r3, #128	@ 0x80
 80025c6:	045c      	lsls	r4, r3, #17
 80025c8:	230a      	movs	r3, #10
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	8819      	ldrh	r1, [r3, #0]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	2300      	movs	r3, #0
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	0023      	movs	r3, r4
 80025d6:	f000 fc3b 	bl	8002e50 <I2C_TransferConfig>
 80025da:	e012      	b.n	8002602 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	2380      	movs	r3, #128	@ 0x80
 80025ee:	049c      	lsls	r4, r3, #18
 80025f0:	230a      	movs	r3, #10
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	8819      	ldrh	r1, [r3, #0]
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	2300      	movs	r3, #0
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	0023      	movs	r3, r4
 80025fe:	f000 fc27 	bl	8002e50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d198      	bne.n	800253e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	0018      	movs	r0, r3
 8002614:	f000 fae0 	bl	8002bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002618:	1e03      	subs	r3, r0, #0
 800261a:	d001      	beq.n	8002620 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e01a      	b.n	8002656 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2220      	movs	r2, #32
 8002626:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	490b      	ldr	r1, [pc, #44]	@ (8002660 <HAL_I2C_Mem_Write+0x258>)
 8002634:	400a      	ands	r2, r1
 8002636:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2241      	movs	r2, #65	@ 0x41
 800263c:	2120      	movs	r1, #32
 800263e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2242      	movs	r2, #66	@ 0x42
 8002644:	2100      	movs	r1, #0
 8002646:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2240      	movs	r2, #64	@ 0x40
 800264c:	2100      	movs	r1, #0
 800264e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	e000      	b.n	8002656 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002654:	2302      	movs	r3, #2
  }
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b007      	add	sp, #28
 800265c:	bd90      	pop	{r4, r7, pc}
 800265e:	46c0      	nop			@ (mov r8, r8)
 8002660:	fe00e800 	.word	0xfe00e800

08002664 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b089      	sub	sp, #36	@ 0x24
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	000c      	movs	r4, r1
 800266e:	0010      	movs	r0, r2
 8002670:	0019      	movs	r1, r3
 8002672:	230a      	movs	r3, #10
 8002674:	18fb      	adds	r3, r7, r3
 8002676:	1c22      	adds	r2, r4, #0
 8002678:	801a      	strh	r2, [r3, #0]
 800267a:	2308      	movs	r3, #8
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	1c02      	adds	r2, r0, #0
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	1dbb      	adds	r3, r7, #6
 8002684:	1c0a      	adds	r2, r1, #0
 8002686:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2241      	movs	r2, #65	@ 0x41
 800268c:	5c9b      	ldrb	r3, [r3, r2]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b20      	cmp	r3, #32
 8002692:	d000      	beq.n	8002696 <HAL_I2C_Mem_Read+0x32>
 8002694:	e110      	b.n	80028b8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002698:	2b00      	cmp	r3, #0
 800269a:	d004      	beq.n	80026a6 <HAL_I2C_Mem_Read+0x42>
 800269c:	232c      	movs	r3, #44	@ 0x2c
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d105      	bne.n	80026b2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2280      	movs	r2, #128	@ 0x80
 80026aa:	0092      	lsls	r2, r2, #2
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e103      	b.n	80028ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2240      	movs	r2, #64	@ 0x40
 80026b6:	5c9b      	ldrb	r3, [r3, r2]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_I2C_Mem_Read+0x5c>
 80026bc:	2302      	movs	r3, #2
 80026be:	e0fc      	b.n	80028ba <HAL_I2C_Mem_Read+0x256>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	@ 0x40
 80026c4:	2101      	movs	r1, #1
 80026c6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026c8:	f7ff fb76 	bl	8001db8 <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	0219      	lsls	r1, r3, #8
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2319      	movs	r3, #25
 80026dc:	2201      	movs	r2, #1
 80026de:	f000 f9dd 	bl	8002a9c <I2C_WaitOnFlagUntilTimeout>
 80026e2:	1e03      	subs	r3, r0, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0e7      	b.n	80028ba <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2241      	movs	r2, #65	@ 0x41
 80026ee:	2122      	movs	r1, #34	@ 0x22
 80026f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2242      	movs	r2, #66	@ 0x42
 80026f6:	2140      	movs	r1, #64	@ 0x40
 80026f8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002704:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	222c      	movs	r2, #44	@ 0x2c
 800270a:	18ba      	adds	r2, r7, r2
 800270c:	8812      	ldrh	r2, [r2, #0]
 800270e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002716:	1dbb      	adds	r3, r7, #6
 8002718:	881c      	ldrh	r4, [r3, #0]
 800271a:	2308      	movs	r3, #8
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	881a      	ldrh	r2, [r3, #0]
 8002720:	230a      	movs	r3, #10
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	8819      	ldrh	r1, [r3, #0]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	0023      	movs	r3, r4
 8002732:	f000 f92f 	bl	8002994 <I2C_RequestMemoryRead>
 8002736:	1e03      	subs	r3, r0, #0
 8002738:	d005      	beq.n	8002746 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2240      	movs	r2, #64	@ 0x40
 800273e:	2100      	movs	r1, #0
 8002740:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0b9      	b.n	80028ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	2bff      	cmp	r3, #255	@ 0xff
 800274e:	d911      	bls.n	8002774 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275a:	b2da      	uxtb	r2, r3
 800275c:	2380      	movs	r3, #128	@ 0x80
 800275e:	045c      	lsls	r4, r3, #17
 8002760:	230a      	movs	r3, #10
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	8819      	ldrh	r1, [r3, #0]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	4b56      	ldr	r3, [pc, #344]	@ (80028c4 <HAL_I2C_Mem_Read+0x260>)
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	0023      	movs	r3, r4
 800276e:	f000 fb6f 	bl	8002e50 <I2C_TransferConfig>
 8002772:	e012      	b.n	800279a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002782:	b2da      	uxtb	r2, r3
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	049c      	lsls	r4, r3, #18
 8002788:	230a      	movs	r3, #10
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	8819      	ldrh	r1, [r3, #0]
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	4b4c      	ldr	r3, [pc, #304]	@ (80028c4 <HAL_I2C_Mem_Read+0x260>)
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	0023      	movs	r3, r4
 8002796:	f000 fb5b 	bl	8002e50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800279a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	0013      	movs	r3, r2
 80027a4:	2200      	movs	r2, #0
 80027a6:	2104      	movs	r1, #4
 80027a8:	f000 f978 	bl	8002a9c <I2C_WaitOnFlagUntilTimeout>
 80027ac:	1e03      	subs	r3, r0, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e082      	b.n	80028ba <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d03a      	beq.n	8002866 <HAL_I2C_Mem_Read+0x202>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d136      	bne.n	8002866 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	0013      	movs	r3, r2
 8002802:	2200      	movs	r2, #0
 8002804:	2180      	movs	r1, #128	@ 0x80
 8002806:	f000 f949 	bl	8002a9c <I2C_WaitOnFlagUntilTimeout>
 800280a:	1e03      	subs	r3, r0, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e053      	b.n	80028ba <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	2bff      	cmp	r3, #255	@ 0xff
 800281a:	d911      	bls.n	8002840 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002826:	b2da      	uxtb	r2, r3
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	045c      	lsls	r4, r3, #17
 800282c:	230a      	movs	r3, #10
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	8819      	ldrh	r1, [r3, #0]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	2300      	movs	r3, #0
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	0023      	movs	r3, r4
 800283a:	f000 fb09 	bl	8002e50 <I2C_TransferConfig>
 800283e:	e012      	b.n	8002866 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284e:	b2da      	uxtb	r2, r3
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	049c      	lsls	r4, r3, #18
 8002854:	230a      	movs	r3, #10
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	8819      	ldrh	r1, [r3, #0]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	2300      	movs	r3, #0
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	0023      	movs	r3, r4
 8002862:	f000 faf5 	bl	8002e50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d194      	bne.n	800279a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 f9ae 	bl	8002bd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e01a      	b.n	80028ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2220      	movs	r2, #32
 800288a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	490c      	ldr	r1, [pc, #48]	@ (80028c8 <HAL_I2C_Mem_Read+0x264>)
 8002898:	400a      	ands	r2, r1
 800289a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2241      	movs	r2, #65	@ 0x41
 80028a0:	2120      	movs	r1, #32
 80028a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2242      	movs	r2, #66	@ 0x42
 80028a8:	2100      	movs	r1, #0
 80028aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2240      	movs	r2, #64	@ 0x40
 80028b0:	2100      	movs	r1, #0
 80028b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
  }
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b007      	add	sp, #28
 80028c0:	bd90      	pop	{r4, r7, pc}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	80002400 	.word	0x80002400
 80028c8:	fe00e800 	.word	0xfe00e800

080028cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80028cc:	b5b0      	push	{r4, r5, r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	000c      	movs	r4, r1
 80028d6:	0010      	movs	r0, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	250a      	movs	r5, #10
 80028dc:	197b      	adds	r3, r7, r5
 80028de:	1c22      	adds	r2, r4, #0
 80028e0:	801a      	strh	r2, [r3, #0]
 80028e2:	2308      	movs	r3, #8
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	1c02      	adds	r2, r0, #0
 80028e8:	801a      	strh	r2, [r3, #0]
 80028ea:	1dbb      	adds	r3, r7, #6
 80028ec:	1c0a      	adds	r2, r1, #0
 80028ee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80028f0:	1dbb      	adds	r3, r7, #6
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	045c      	lsls	r4, r3, #17
 80028fa:	197b      	adds	r3, r7, r5
 80028fc:	8819      	ldrh	r1, [r3, #0]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	4b23      	ldr	r3, [pc, #140]	@ (8002990 <I2C_RequestMemoryWrite+0xc4>)
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	0023      	movs	r3, r4
 8002906:	f000 faa3 	bl	8002e50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800290a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290c:	6a39      	ldr	r1, [r7, #32]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	0018      	movs	r0, r3
 8002912:	f000 f91b 	bl	8002b4c <I2C_WaitOnTXISFlagUntilTimeout>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d001      	beq.n	800291e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e033      	b.n	8002986 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800291e:	1dbb      	adds	r3, r7, #6
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d107      	bne.n	8002936 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002926:	2308      	movs	r3, #8
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	629a      	str	r2, [r3, #40]	@ 0x28
 8002934:	e019      	b.n	800296a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002936:	2308      	movs	r3, #8
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	b29b      	uxth	r3, r3
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800294a:	6a39      	ldr	r1, [r7, #32]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	0018      	movs	r0, r3
 8002950:	f000 f8fc 	bl	8002b4c <I2C_WaitOnTXISFlagUntilTimeout>
 8002954:	1e03      	subs	r3, r0, #0
 8002956:	d001      	beq.n	800295c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e014      	b.n	8002986 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800295c:	2308      	movs	r3, #8
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800296a:	6a3a      	ldr	r2, [r7, #32]
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	0013      	movs	r3, r2
 8002974:	2200      	movs	r2, #0
 8002976:	2180      	movs	r1, #128	@ 0x80
 8002978:	f000 f890 	bl	8002a9c <I2C_WaitOnFlagUntilTimeout>
 800297c:	1e03      	subs	r3, r0, #0
 800297e:	d001      	beq.n	8002984 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	0018      	movs	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	b004      	add	sp, #16
 800298c:	bdb0      	pop	{r4, r5, r7, pc}
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	80002000 	.word	0x80002000

08002994 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002994:	b5b0      	push	{r4, r5, r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	000c      	movs	r4, r1
 800299e:	0010      	movs	r0, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	250a      	movs	r5, #10
 80029a4:	197b      	adds	r3, r7, r5
 80029a6:	1c22      	adds	r2, r4, #0
 80029a8:	801a      	strh	r2, [r3, #0]
 80029aa:	2308      	movs	r3, #8
 80029ac:	18fb      	adds	r3, r7, r3
 80029ae:	1c02      	adds	r2, r0, #0
 80029b0:	801a      	strh	r2, [r3, #0]
 80029b2:	1dbb      	adds	r3, r7, #6
 80029b4:	1c0a      	adds	r2, r1, #0
 80029b6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029b8:	1dbb      	adds	r3, r7, #6
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	197b      	adds	r3, r7, r5
 80029c0:	8819      	ldrh	r1, [r3, #0]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	4b23      	ldr	r3, [pc, #140]	@ (8002a54 <I2C_RequestMemoryRead+0xc0>)
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2300      	movs	r3, #0
 80029ca:	f000 fa41 	bl	8002e50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d0:	6a39      	ldr	r1, [r7, #32]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f000 f8b9 	bl	8002b4c <I2C_WaitOnTXISFlagUntilTimeout>
 80029da:	1e03      	subs	r3, r0, #0
 80029dc:	d001      	beq.n	80029e2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e033      	b.n	8002a4a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029e2:	1dbb      	adds	r3, r7, #6
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d107      	bne.n	80029fa <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029ea:	2308      	movs	r3, #8
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80029f8:	e019      	b.n	8002a2e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029fa:	2308      	movs	r3, #8
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a0e:	6a39      	ldr	r1, [r7, #32]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 f89a 	bl	8002b4c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a18:	1e03      	subs	r3, r0, #0
 8002a1a:	d001      	beq.n	8002a20 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e014      	b.n	8002a4a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a20:	2308      	movs	r3, #8
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002a2e:	6a3a      	ldr	r2, [r7, #32]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	0013      	movs	r3, r2
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2140      	movs	r1, #64	@ 0x40
 8002a3c:	f000 f82e 	bl	8002a9c <I2C_WaitOnFlagUntilTimeout>
 8002a40:	1e03      	subs	r3, r0, #0
 8002a42:	d001      	beq.n	8002a48 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b004      	add	sp, #16
 8002a50:	bdb0      	pop	{r4, r5, r7, pc}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	80002000 	.word	0x80002000

08002a58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2202      	movs	r2, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d103      	bne.n	8002a76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2200      	movs	r2, #0
 8002a74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d007      	beq.n	8002a94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	430a      	orrs	r2, r1
 8002a92:	619a      	str	r2, [r3, #24]
  }
}
 8002a94:	46c0      	nop			@ (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b002      	add	sp, #8
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	1dfb      	adds	r3, r7, #7
 8002aaa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aac:	e03a      	b.n	8002b24 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	6839      	ldr	r1, [r7, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f000 f8d3 	bl	8002c60 <I2C_IsErrorOccurred>
 8002aba:	1e03      	subs	r3, r0, #0
 8002abc:	d001      	beq.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e040      	b.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	d02d      	beq.n	8002b24 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac8:	f7ff f976 	bl	8001db8 <HAL_GetTick>
 8002acc:	0002      	movs	r2, r0
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d302      	bcc.n	8002ade <I2C_WaitOnFlagUntilTimeout+0x42>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d122      	bne.n	8002b24 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	425a      	negs	r2, r3
 8002aee:	4153      	adcs	r3, r2
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	001a      	movs	r2, r3
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d113      	bne.n	8002b24 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b00:	2220      	movs	r2, #32
 8002b02:	431a      	orrs	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2241      	movs	r2, #65	@ 0x41
 8002b0c:	2120      	movs	r1, #32
 8002b0e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2242      	movs	r2, #66	@ 0x42
 8002b14:	2100      	movs	r1, #0
 8002b16:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2240      	movs	r2, #64	@ 0x40
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e00f      	b.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	425a      	negs	r2, r3
 8002b34:	4153      	adcs	r3, r2
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	001a      	movs	r2, r3
 8002b3a:	1dfb      	adds	r3, r7, #7
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d0b5      	beq.n	8002aae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b004      	add	sp, #16
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b58:	e032      	b.n	8002bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 f87d 	bl	8002c60 <I2C_IsErrorOccurred>
 8002b66:	1e03      	subs	r3, r0, #0
 8002b68:	d001      	beq.n	8002b6e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e030      	b.n	8002bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	3301      	adds	r3, #1
 8002b72:	d025      	beq.n	8002bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b74:	f7ff f920 	bl	8001db8 <HAL_GetTick>
 8002b78:	0002      	movs	r2, r0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d302      	bcc.n	8002b8a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11a      	bne.n	8002bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2202      	movs	r2, #2
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d013      	beq.n	8002bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2241      	movs	r2, #65	@ 0x41
 8002ba8:	2120      	movs	r1, #32
 8002baa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2242      	movs	r2, #66	@ 0x42
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2240      	movs	r2, #64	@ 0x40
 8002bb8:	2100      	movs	r1, #0
 8002bba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e007      	b.n	8002bd0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d1c5      	bne.n	8002b5a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b004      	add	sp, #16
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be4:	e02f      	b.n	8002c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 f837 	bl	8002c60 <I2C_IsErrorOccurred>
 8002bf2:	1e03      	subs	r3, r0, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e02d      	b.n	8002c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfa:	f7ff f8dd 	bl	8001db8 <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d302      	bcc.n	8002c10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d11a      	bne.n	8002c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2220      	movs	r2, #32
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d013      	beq.n	8002c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	2220      	movs	r2, #32
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2241      	movs	r2, #65	@ 0x41
 8002c2e:	2120      	movs	r1, #32
 8002c30:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2242      	movs	r2, #66	@ 0x42
 8002c36:	2100      	movs	r1, #0
 8002c38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2240      	movs	r2, #64	@ 0x40
 8002c3e:	2100      	movs	r1, #0
 8002c40:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e007      	b.n	8002c56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d1c8      	bne.n	8002be6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b004      	add	sp, #16
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b08a      	sub	sp, #40	@ 0x28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6c:	2327      	movs	r3, #39	@ 0x27
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2210      	movs	r2, #16
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d100      	bne.n	8002c8e <I2C_IsErrorOccurred+0x2e>
 8002c8c:	e079      	b.n	8002d82 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2210      	movs	r2, #16
 8002c94:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c96:	e057      	b.n	8002d48 <I2C_IsErrorOccurred+0xe8>
 8002c98:	2227      	movs	r2, #39	@ 0x27
 8002c9a:	18bb      	adds	r3, r7, r2
 8002c9c:	18ba      	adds	r2, r7, r2
 8002c9e:	7812      	ldrb	r2, [r2, #0]
 8002ca0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	d04f      	beq.n	8002d48 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ca8:	f7ff f886 	bl	8001db8 <HAL_GetTick>
 8002cac:	0002      	movs	r2, r0
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d302      	bcc.n	8002cbe <I2C_IsErrorOccurred+0x5e>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d144      	bne.n	8002d48 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	2380      	movs	r3, #128	@ 0x80
 8002cc6:	01db      	lsls	r3, r3, #7
 8002cc8:	4013      	ands	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ccc:	2013      	movs	r0, #19
 8002cce:	183b      	adds	r3, r7, r0
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	2142      	movs	r1, #66	@ 0x42
 8002cd4:	5c52      	ldrb	r2, [r2, r1]
 8002cd6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699a      	ldr	r2, [r3, #24]
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	2380      	movs	r3, #128	@ 0x80
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d126      	bne.n	8002d3a <I2C_IsErrorOccurred+0xda>
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	2380      	movs	r3, #128	@ 0x80
 8002cf0:	01db      	lsls	r3, r3, #7
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d021      	beq.n	8002d3a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002cf6:	183b      	adds	r3, r7, r0
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d01d      	beq.n	8002d3a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2180      	movs	r1, #128	@ 0x80
 8002d0a:	01c9      	lsls	r1, r1, #7
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d10:	f7ff f852 	bl	8001db8 <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d18:	e00f      	b.n	8002d3a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d1a:	f7ff f84d 	bl	8001db8 <HAL_GetTick>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b19      	cmp	r3, #25
 8002d26:	d908      	bls.n	8002d3a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d30:	2327      	movs	r3, #39	@ 0x27
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]

              break;
 8002d38:	e006      	b.n	8002d48 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2220      	movs	r2, #32
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d1e8      	bne.n	8002d1a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d004      	beq.n	8002d60 <I2C_IsErrorOccurred+0x100>
 8002d56:	2327      	movs	r3, #39	@ 0x27
 8002d58:	18fb      	adds	r3, r7, r3
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d09b      	beq.n	8002c98 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d60:	2327      	movs	r3, #39	@ 0x27
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d103      	bne.n	8002d72 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	2204      	movs	r2, #4
 8002d76:	4313      	orrs	r3, r2
 8002d78:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d7a:	2327      	movs	r3, #39	@ 0x27
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4013      	ands	r3, r2
 8002d92:	d00c      	beq.n	8002dae <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2201      	movs	r2, #1
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2280      	movs	r2, #128	@ 0x80
 8002da2:	0052      	lsls	r2, r2, #1
 8002da4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002da6:	2327      	movs	r3, #39	@ 0x27
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4013      	ands	r3, r2
 8002db6:	d00c      	beq.n	8002dd2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	2208      	movs	r2, #8
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2280      	movs	r2, #128	@ 0x80
 8002dc6:	00d2      	lsls	r2, r2, #3
 8002dc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dca:	2327      	movs	r3, #39	@ 0x27
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	2380      	movs	r3, #128	@ 0x80
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d00c      	beq.n	8002df6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	2202      	movs	r2, #2
 8002de0:	4313      	orrs	r3, r2
 8002de2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2280      	movs	r2, #128	@ 0x80
 8002dea:	0092      	lsls	r2, r2, #2
 8002dec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dee:	2327      	movs	r3, #39	@ 0x27
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002df6:	2327      	movs	r3, #39	@ 0x27
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01d      	beq.n	8002e3c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7ff fe28 	bl	8002a58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	490e      	ldr	r1, [pc, #56]	@ (8002e4c <I2C_IsErrorOccurred+0x1ec>)
 8002e14:	400a      	ands	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2241      	movs	r2, #65	@ 0x41
 8002e28:	2120      	movs	r1, #32
 8002e2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2242      	movs	r2, #66	@ 0x42
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2240      	movs	r2, #64	@ 0x40
 8002e38:	2100      	movs	r1, #0
 8002e3a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002e3c:	2327      	movs	r3, #39	@ 0x27
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	781b      	ldrb	r3, [r3, #0]
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b00a      	add	sp, #40	@ 0x28
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			@ (mov r8, r8)
 8002e4c:	fe00e800 	.word	0xfe00e800

08002e50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	0008      	movs	r0, r1
 8002e5a:	0011      	movs	r1, r2
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	240a      	movs	r4, #10
 8002e60:	193b      	adds	r3, r7, r4
 8002e62:	1c02      	adds	r2, r0, #0
 8002e64:	801a      	strh	r2, [r3, #0]
 8002e66:	2009      	movs	r0, #9
 8002e68:	183b      	adds	r3, r7, r0
 8002e6a:	1c0a      	adds	r2, r1, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e6e:	193b      	adds	r3, r7, r4
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	059b      	lsls	r3, r3, #22
 8002e74:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e76:	183b      	adds	r3, r7, r0
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	0419      	lsls	r1, r3, #16
 8002e7c:	23ff      	movs	r3, #255	@ 0xff
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e82:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e9a:	0d51      	lsrs	r1, r2, #21
 8002e9c:	2280      	movs	r2, #128	@ 0x80
 8002e9e:	00d2      	lsls	r2, r2, #3
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	4907      	ldr	r1, [pc, #28]	@ (8002ec0 <I2C_TransferConfig+0x70>)
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	43d2      	mvns	r2, r2
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	0011      	movs	r1, r2
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b007      	add	sp, #28
 8002ebc:	bd90      	pop	{r4, r7, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	03ff63ff 	.word	0x03ff63ff

08002ec4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2241      	movs	r2, #65	@ 0x41
 8002ed2:	5c9b      	ldrb	r3, [r3, r2]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b20      	cmp	r3, #32
 8002ed8:	d138      	bne.n	8002f4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2240      	movs	r2, #64	@ 0x40
 8002ede:	5c9b      	ldrb	r3, [r3, r2]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e032      	b.n	8002f4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2240      	movs	r2, #64	@ 0x40
 8002eec:	2101      	movs	r1, #1
 8002eee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2241      	movs	r2, #65	@ 0x41
 8002ef4:	2124      	movs	r1, #36	@ 0x24
 8002ef6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2101      	movs	r1, #1
 8002f04:	438a      	bics	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4911      	ldr	r1, [pc, #68]	@ (8002f58 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f14:	400a      	ands	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2101      	movs	r1, #1
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2241      	movs	r2, #65	@ 0x41
 8002f3c:	2120      	movs	r1, #32
 8002f3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2240      	movs	r2, #64	@ 0x40
 8002f44:	2100      	movs	r1, #0
 8002f46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b002      	add	sp, #8
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	ffffefff 	.word	0xffffefff

08002f5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2241      	movs	r2, #65	@ 0x41
 8002f6a:	5c9b      	ldrb	r3, [r3, r2]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d139      	bne.n	8002fe6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2240      	movs	r2, #64	@ 0x40
 8002f76:	5c9b      	ldrb	r3, [r3, r2]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e033      	b.n	8002fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2240      	movs	r2, #64	@ 0x40
 8002f84:	2101      	movs	r1, #1
 8002f86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2241      	movs	r2, #65	@ 0x41
 8002f8c:	2124      	movs	r1, #36	@ 0x24
 8002f8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	438a      	bics	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4a11      	ldr	r2, [pc, #68]	@ (8002ff0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2101      	movs	r1, #1
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2241      	movs	r2, #65	@ 0x41
 8002fd6:	2120      	movs	r1, #32
 8002fd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2240      	movs	r2, #64	@ 0x40
 8002fde:	2100      	movs	r1, #0
 8002fe0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e000      	b.n	8002fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
  }
}
 8002fe8:	0018      	movs	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b004      	add	sp, #16
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	fffff0ff 	.word	0xfffff0ff

08002ff4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0e4      	b.n	80031d0 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a73      	ldr	r2, [pc, #460]	@ (80031d8 <HAL_PCD_Init+0x1e4>)
 800300a:	5c9b      	ldrb	r3, [r3, r2]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d108      	bne.n	8003024 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	23a4      	movs	r3, #164	@ 0xa4
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	2100      	movs	r1, #0
 800301a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	0018      	movs	r0, r3
 8003020:	f006 f8bc 	bl	800919c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a6c      	ldr	r2, [pc, #432]	@ (80031d8 <HAL_PCD_Init+0x1e4>)
 8003028:	2103      	movs	r1, #3
 800302a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	0018      	movs	r0, r3
 8003032:	f002 fd49 	bl	8005ac8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003036:	230f      	movs	r3, #15
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	e047      	b.n	80030d0 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003040:	200f      	movs	r0, #15
 8003042:	183b      	adds	r3, r7, r0
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	0013      	movs	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	189b      	adds	r3, r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	18cb      	adds	r3, r1, r3
 8003052:	3311      	adds	r3, #17
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003058:	183b      	adds	r3, r7, r0
 800305a:	781a      	ldrb	r2, [r3, #0]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	0013      	movs	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	189b      	adds	r3, r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	18cb      	adds	r3, r1, r3
 8003068:	3310      	adds	r3, #16
 800306a:	183a      	adds	r2, r7, r0
 800306c:	7812      	ldrb	r2, [r2, #0]
 800306e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003070:	183b      	adds	r3, r7, r0
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	0013      	movs	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	189b      	adds	r3, r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	18cb      	adds	r3, r1, r3
 8003080:	3313      	adds	r3, #19
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003086:	183b      	adds	r3, r7, r0
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	0013      	movs	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	189b      	adds	r3, r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	18cb      	adds	r3, r1, r3
 8003096:	3320      	adds	r3, #32
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800309c:	183b      	adds	r3, r7, r0
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	0013      	movs	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	189b      	adds	r3, r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	18cb      	adds	r3, r1, r3
 80030ac:	3324      	adds	r3, #36	@ 0x24
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030b2:	183b      	adds	r3, r7, r0
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	0013      	movs	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	189b      	adds	r3, r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	2200      	movs	r2, #0
 80030c4:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c6:	183b      	adds	r3, r7, r0
 80030c8:	781a      	ldrb	r2, [r3, #0]
 80030ca:	183b      	adds	r3, r7, r0
 80030cc:	3201      	adds	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	791b      	ldrb	r3, [r3, #4]
 80030d4:	210f      	movs	r1, #15
 80030d6:	187a      	adds	r2, r7, r1
 80030d8:	7812      	ldrb	r2, [r2, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d3b0      	bcc.n	8003040 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	e056      	b.n	8003194 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030e6:	240f      	movs	r4, #15
 80030e8:	193b      	adds	r3, r7, r4
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	2352      	movs	r3, #82	@ 0x52
 80030f0:	33ff      	adds	r3, #255	@ 0xff
 80030f2:	0019      	movs	r1, r3
 80030f4:	0013      	movs	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	189b      	adds	r3, r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	18c3      	adds	r3, r0, r3
 80030fe:	185b      	adds	r3, r3, r1
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003104:	193b      	adds	r3, r7, r4
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	23a8      	movs	r3, #168	@ 0xa8
 800310c:	0059      	lsls	r1, r3, #1
 800310e:	0013      	movs	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	189b      	adds	r3, r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	18c3      	adds	r3, r0, r3
 8003118:	185b      	adds	r3, r3, r1
 800311a:	193a      	adds	r2, r7, r4
 800311c:	7812      	ldrb	r2, [r2, #0]
 800311e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003120:	193b      	adds	r3, r7, r4
 8003122:	781a      	ldrb	r2, [r3, #0]
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	2354      	movs	r3, #84	@ 0x54
 8003128:	33ff      	adds	r3, #255	@ 0xff
 800312a:	0019      	movs	r1, r3
 800312c:	0013      	movs	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	189b      	adds	r3, r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	18c3      	adds	r3, r0, r3
 8003136:	185b      	adds	r3, r3, r1
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800313c:	193b      	adds	r3, r7, r4
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	23b0      	movs	r3, #176	@ 0xb0
 8003144:	0059      	lsls	r1, r3, #1
 8003146:	0013      	movs	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	189b      	adds	r3, r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	18c3      	adds	r3, r0, r3
 8003150:	185b      	adds	r3, r3, r1
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003156:	193b      	adds	r3, r7, r4
 8003158:	781a      	ldrb	r2, [r3, #0]
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	23b2      	movs	r3, #178	@ 0xb2
 800315e:	0059      	lsls	r1, r3, #1
 8003160:	0013      	movs	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	189b      	adds	r3, r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	18c3      	adds	r3, r0, r3
 800316a:	185b      	adds	r3, r3, r1
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003170:	193b      	adds	r3, r7, r4
 8003172:	781a      	ldrb	r2, [r3, #0]
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	23b4      	movs	r3, #180	@ 0xb4
 8003178:	0059      	lsls	r1, r3, #1
 800317a:	0013      	movs	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	189b      	adds	r3, r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	18c3      	adds	r3, r0, r3
 8003184:	185b      	adds	r3, r3, r1
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318a:	193b      	adds	r3, r7, r4
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	193b      	adds	r3, r7, r4
 8003190:	3201      	adds	r2, #1
 8003192:	701a      	strb	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	791b      	ldrb	r3, [r3, #4]
 8003198:	220f      	movs	r2, #15
 800319a:	18ba      	adds	r2, r7, r2
 800319c:	7812      	ldrb	r2, [r2, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d3a1      	bcc.n	80030e6 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6859      	ldr	r1, [r3, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	f002 fca6 	bl	8005afc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a07      	ldr	r2, [pc, #28]	@ (80031d8 <HAL_PCD_Init+0x1e4>)
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	7a9b      	ldrb	r3, [r3, #10]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d103      	bne.n	80031ce <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f001 fd11 	bl	8004bf0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b005      	add	sp, #20
 80031d6:	bd90      	pop	{r4, r7, pc}
 80031d8:	00000291 	.word	0x00000291

080031dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	23a4      	movs	r3, #164	@ 0xa4
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	5cd3      	ldrb	r3, [r2, r3]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_PCD_Start+0x18>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e014      	b.n	800321e <HAL_PCD_Start+0x42>
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	23a4      	movs	r3, #164	@ 0xa4
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	2101      	movs	r1, #1
 80031fc:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0018      	movs	r0, r3
 8003204:	f002 fc4a 	bl	8005a9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	0018      	movs	r0, r3
 800320e:	f004 fa21 	bl	8007654 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	23a4      	movs	r3, #164	@ 0xa4
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	2100      	movs	r1, #0
 800321a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b002      	add	sp, #8
 8003224:	bd80      	pop	{r7, pc}
	...

08003228 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	0018      	movs	r0, r3
 8003236:	f004 fa23 	bl	8007680 <USB_ReadInterrupts>
 800323a:	0003      	movs	r3, r0
 800323c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	2380      	movs	r3, #128	@ 0x80
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	4013      	ands	r3, r2
 8003246:	d004      	beq.n	8003252 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	0018      	movs	r0, r3
 800324c:	f000 fb4a 	bl	80038e4 <PCD_EP_ISR_Handler>

    return;
 8003250:	e11d      	b.n	800348e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4013      	ands	r3, r2
 800325a:	d015      	beq.n	8003288 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2244      	movs	r2, #68	@ 0x44
 8003262:	5a9b      	ldrh	r3, [r3, r2]
 8003264:	b29a      	uxth	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	498a      	ldr	r1, [pc, #552]	@ (8003494 <HAL_PCD_IRQHandler+0x26c>)
 800326c:	400a      	ands	r2, r1
 800326e:	b291      	uxth	r1, r2
 8003270:	2244      	movs	r2, #68	@ 0x44
 8003272:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	0018      	movs	r0, r3
 8003278:	f006 f813 	bl	80092a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2100      	movs	r1, #0
 8003280:	0018      	movs	r0, r3
 8003282:	f000 f915 	bl	80034b0 <HAL_PCD_SetAddress>

    return;
 8003286:	e102      	b.n	800348e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	2380      	movs	r3, #128	@ 0x80
 800328c:	01db      	lsls	r3, r3, #7
 800328e:	4013      	ands	r3, r2
 8003290:	d00c      	beq.n	80032ac <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2244      	movs	r2, #68	@ 0x44
 8003298:	5a9b      	ldrh	r3, [r3, r2]
 800329a:	b29a      	uxth	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	497d      	ldr	r1, [pc, #500]	@ (8003498 <HAL_PCD_IRQHandler+0x270>)
 80032a2:	400a      	ands	r2, r1
 80032a4:	b291      	uxth	r1, r2
 80032a6:	2244      	movs	r2, #68	@ 0x44
 80032a8:	5299      	strh	r1, [r3, r2]

    return;
 80032aa:	e0f0      	b.n	800348e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	019b      	lsls	r3, r3, #6
 80032b2:	4013      	ands	r3, r2
 80032b4:	d00c      	beq.n	80032d0 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2244      	movs	r2, #68	@ 0x44
 80032bc:	5a9b      	ldrh	r3, [r3, r2]
 80032be:	b29a      	uxth	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4975      	ldr	r1, [pc, #468]	@ (800349c <HAL_PCD_IRQHandler+0x274>)
 80032c6:	400a      	ands	r2, r1
 80032c8:	b291      	uxth	r1, r2
 80032ca:	2244      	movs	r2, #68	@ 0x44
 80032cc:	5299      	strh	r1, [r3, r2]

    return;
 80032ce:	e0de      	b.n	800348e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	2380      	movs	r3, #128	@ 0x80
 80032d4:	015b      	lsls	r3, r3, #5
 80032d6:	4013      	ands	r3, r2
 80032d8:	d038      	beq.n	800334c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2240      	movs	r2, #64	@ 0x40
 80032e0:	5a9b      	ldrh	r3, [r3, r2]
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2104      	movs	r1, #4
 80032ea:	438a      	bics	r2, r1
 80032ec:	b291      	uxth	r1, r2
 80032ee:	2240      	movs	r2, #64	@ 0x40
 80032f0:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2240      	movs	r2, #64	@ 0x40
 80032f8:	5a9b      	ldrh	r3, [r3, r2]
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2108      	movs	r1, #8
 8003302:	438a      	bics	r2, r1
 8003304:	b291      	uxth	r1, r2
 8003306:	2240      	movs	r2, #64	@ 0x40
 8003308:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	23b2      	movs	r3, #178	@ 0xb2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	5cd3      	ldrb	r3, [r2, r3]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d109      	bne.n	800332a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	23b2      	movs	r3, #178	@ 0xb2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	2100      	movs	r1, #0
 800331e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2100      	movs	r1, #0
 8003324:	0018      	movs	r0, r3
 8003326:	f001 fc8d 	bl	8004c44 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	0018      	movs	r0, r3
 800332e:	f005 fff9 	bl	8009324 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2244      	movs	r2, #68	@ 0x44
 8003338:	5a9b      	ldrh	r3, [r3, r2]
 800333a:	b29a      	uxth	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4957      	ldr	r1, [pc, #348]	@ (80034a0 <HAL_PCD_IRQHandler+0x278>)
 8003342:	400a      	ands	r2, r1
 8003344:	b291      	uxth	r1, r2
 8003346:	2244      	movs	r2, #68	@ 0x44
 8003348:	5299      	strh	r1, [r3, r2]

    return;
 800334a:	e0a0      	b.n	800348e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	2380      	movs	r3, #128	@ 0x80
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	4013      	ands	r3, r2
 8003354:	d028      	beq.n	80033a8 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2240      	movs	r2, #64	@ 0x40
 800335c:	5a9b      	ldrh	r3, [r3, r2]
 800335e:	b29a      	uxth	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2108      	movs	r1, #8
 8003366:	430a      	orrs	r2, r1
 8003368:	b291      	uxth	r1, r2
 800336a:	2240      	movs	r2, #64	@ 0x40
 800336c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2244      	movs	r2, #68	@ 0x44
 8003374:	5a9b      	ldrh	r3, [r3, r2]
 8003376:	b29a      	uxth	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4949      	ldr	r1, [pc, #292]	@ (80034a4 <HAL_PCD_IRQHandler+0x27c>)
 800337e:	400a      	ands	r2, r1
 8003380:	b291      	uxth	r1, r2
 8003382:	2244      	movs	r2, #68	@ 0x44
 8003384:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2240      	movs	r2, #64	@ 0x40
 800338c:	5a9b      	ldrh	r3, [r3, r2]
 800338e:	b29a      	uxth	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2104      	movs	r1, #4
 8003396:	430a      	orrs	r2, r1
 8003398:	b291      	uxth	r1, r2
 800339a:	2240      	movs	r2, #64	@ 0x40
 800339c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	0018      	movs	r0, r3
 80033a2:	f005 ffa3 	bl	80092ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80033a6:	e072      	b.n	800348e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2280      	movs	r2, #128	@ 0x80
 80033ac:	4013      	ands	r3, r2
 80033ae:	d046      	beq.n	800343e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2244      	movs	r2, #68	@ 0x44
 80033b6:	5a9b      	ldrh	r3, [r3, r2]
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2180      	movs	r1, #128	@ 0x80
 80033c0:	438a      	bics	r2, r1
 80033c2:	b291      	uxth	r1, r2
 80033c4:	2244      	movs	r2, #68	@ 0x44
 80033c6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	23b2      	movs	r3, #178	@ 0xb2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	5cd3      	ldrb	r3, [r2, r3]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d12f      	bne.n	8003434 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2240      	movs	r2, #64	@ 0x40
 80033da:	5a9b      	ldrh	r3, [r3, r2]
 80033dc:	b29a      	uxth	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2104      	movs	r1, #4
 80033e4:	430a      	orrs	r2, r1
 80033e6:	b291      	uxth	r1, r2
 80033e8:	2240      	movs	r2, #64	@ 0x40
 80033ea:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2240      	movs	r2, #64	@ 0x40
 80033f2:	5a9b      	ldrh	r3, [r3, r2]
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2108      	movs	r1, #8
 80033fc:	430a      	orrs	r2, r1
 80033fe:	b291      	uxth	r1, r2
 8003400:	2240      	movs	r2, #64	@ 0x40
 8003402:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	23b2      	movs	r3, #178	@ 0xb2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	2101      	movs	r1, #1
 800340c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2254      	movs	r2, #84	@ 0x54
 8003414:	5a9b      	ldrh	r3, [r3, r2]
 8003416:	b29b      	uxth	r3, r3
 8003418:	089b      	lsrs	r3, r3, #2
 800341a:	223c      	movs	r2, #60	@ 0x3c
 800341c:	4013      	ands	r3, r2
 800341e:	0019      	movs	r1, r3
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	23b3      	movs	r3, #179	@ 0xb3
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2101      	movs	r1, #1
 800342c:	0018      	movs	r0, r3
 800342e:	f001 fc09 	bl	8004c44 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003432:	e02c      	b.n	800348e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	0018      	movs	r0, r3
 8003438:	f005 ff58 	bl	80092ec <HAL_PCD_SuspendCallback>
    return;
 800343c:	e027      	b.n	800348e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	2380      	movs	r3, #128	@ 0x80
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4013      	ands	r3, r2
 8003446:	d010      	beq.n	800346a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2244      	movs	r2, #68	@ 0x44
 800344e:	5a9b      	ldrh	r3, [r3, r2]
 8003450:	b29a      	uxth	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4914      	ldr	r1, [pc, #80]	@ (80034a8 <HAL_PCD_IRQHandler+0x280>)
 8003458:	400a      	ands	r2, r1
 800345a:	b291      	uxth	r1, r2
 800345c:	2244      	movs	r2, #68	@ 0x44
 800345e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	0018      	movs	r0, r3
 8003464:	f005 ff0e 	bl	8009284 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003468:	e011      	b.n	800348e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	2380      	movs	r3, #128	@ 0x80
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4013      	ands	r3, r2
 8003472:	d00c      	beq.n	800348e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2244      	movs	r2, #68	@ 0x44
 800347a:	5a9b      	ldrh	r3, [r3, r2]
 800347c:	b29a      	uxth	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	490a      	ldr	r1, [pc, #40]	@ (80034ac <HAL_PCD_IRQHandler+0x284>)
 8003484:	400a      	ands	r2, r1
 8003486:	b291      	uxth	r1, r2
 8003488:	2244      	movs	r2, #68	@ 0x44
 800348a:	5299      	strh	r1, [r3, r2]

    return;
 800348c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800348e:	46bd      	mov	sp, r7
 8003490:	b004      	add	sp, #16
 8003492:	bd80      	pop	{r7, pc}
 8003494:	fffffbff 	.word	0xfffffbff
 8003498:	ffffbfff 	.word	0xffffbfff
 800349c:	ffffdfff 	.word	0xffffdfff
 80034a0:	ffffefff 	.word	0xffffefff
 80034a4:	fffff7ff 	.word	0xfffff7ff
 80034a8:	fffffdff 	.word	0xfffffdff
 80034ac:	fffffeff 	.word	0xfffffeff

080034b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	000a      	movs	r2, r1
 80034ba:	1cfb      	adds	r3, r7, #3
 80034bc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	23a4      	movs	r3, #164	@ 0xa4
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	5cd3      	ldrb	r3, [r2, r3]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_PCD_SetAddress+0x1e>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e016      	b.n	80034fc <HAL_PCD_SetAddress+0x4c>
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	23a4      	movs	r3, #164	@ 0xa4
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	2101      	movs	r1, #1
 80034d6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	1cfa      	adds	r2, r7, #3
 80034dc:	7812      	ldrb	r2, [r2, #0]
 80034de:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	1cfb      	adds	r3, r7, #3
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	0019      	movs	r1, r3
 80034ea:	0010      	movs	r0, r2
 80034ec:	f004 f89e 	bl	800762c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	23a4      	movs	r3, #164	@ 0xa4
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	2100      	movs	r1, #0
 80034f8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b002      	add	sp, #8
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	000c      	movs	r4, r1
 800350e:	0010      	movs	r0, r2
 8003510:	0019      	movs	r1, r3
 8003512:	1cfb      	adds	r3, r7, #3
 8003514:	1c22      	adds	r2, r4, #0
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	003b      	movs	r3, r7
 800351a:	1c02      	adds	r2, r0, #0
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	1cbb      	adds	r3, r7, #2
 8003520:	1c0a      	adds	r2, r1, #0
 8003522:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003524:	230b      	movs	r3, #11
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800352c:	1cfb      	adds	r3, r7, #3
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	b25b      	sxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	da0f      	bge.n	8003556 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003536:	1cfb      	adds	r3, r7, #3
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2207      	movs	r2, #7
 800353c:	401a      	ands	r2, r3
 800353e:	0013      	movs	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	189b      	adds	r3, r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	3310      	adds	r3, #16
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	18d3      	adds	r3, r2, r3
 800354c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	705a      	strb	r2, [r3, #1]
 8003554:	e00f      	b.n	8003576 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003556:	1cfb      	adds	r3, r7, #3
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2207      	movs	r2, #7
 800355c:	401a      	ands	r2, r3
 800355e:	0013      	movs	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	189b      	adds	r3, r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	3351      	adds	r3, #81	@ 0x51
 8003568:	33ff      	adds	r3, #255	@ 0xff
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	18d3      	adds	r3, r2, r3
 800356e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003576:	1cfb      	adds	r3, r7, #3
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2207      	movs	r2, #7
 800357c:	4013      	ands	r3, r2
 800357e:	b2da      	uxtb	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003584:	003b      	movs	r3, r7
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	055b      	lsls	r3, r3, #21
 800358a:	0d5a      	lsrs	r2, r3, #21
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1cba      	adds	r2, r7, #2
 8003594:	7812      	ldrb	r2, [r2, #0]
 8003596:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003598:	1cbb      	adds	r3, r7, #2
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d102      	bne.n	80035a6 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	23a4      	movs	r3, #164	@ 0xa4
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	5cd3      	ldrb	r3, [r2, r3]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_PCD_EP_Open+0xb2>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e013      	b.n	80035de <HAL_PCD_EP_Open+0xda>
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	23a4      	movs	r3, #164	@ 0xa4
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	2101      	movs	r1, #1
 80035be:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	0011      	movs	r1, r2
 80035c8:	0018      	movs	r0, r3
 80035ca:	f002 fab3 	bl	8005b34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	23a4      	movs	r3, #164	@ 0xa4
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	2100      	movs	r1, #0
 80035d6:	54d1      	strb	r1, [r2, r3]

  return ret;
 80035d8:	230b      	movs	r3, #11
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	781b      	ldrb	r3, [r3, #0]
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b005      	add	sp, #20
 80035e4:	bd90      	pop	{r4, r7, pc}

080035e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	000a      	movs	r2, r1
 80035f0:	1cfb      	adds	r3, r7, #3
 80035f2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035f4:	1cfb      	adds	r3, r7, #3
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	b25b      	sxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	da0f      	bge.n	800361e <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035fe:	1cfb      	adds	r3, r7, #3
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2207      	movs	r2, #7
 8003604:	401a      	ands	r2, r3
 8003606:	0013      	movs	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	189b      	adds	r3, r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	3310      	adds	r3, #16
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	18d3      	adds	r3, r2, r3
 8003614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	705a      	strb	r2, [r3, #1]
 800361c:	e00f      	b.n	800363e <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800361e:	1cfb      	adds	r3, r7, #3
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2207      	movs	r2, #7
 8003624:	401a      	ands	r2, r3
 8003626:	0013      	movs	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	189b      	adds	r3, r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	3351      	adds	r3, #81	@ 0x51
 8003630:	33ff      	adds	r3, #255	@ 0xff
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	18d3      	adds	r3, r2, r3
 8003636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800363e:	1cfb      	adds	r3, r7, #3
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2207      	movs	r2, #7
 8003644:	4013      	ands	r3, r2
 8003646:	b2da      	uxtb	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	23a4      	movs	r3, #164	@ 0xa4
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	5cd3      	ldrb	r3, [r2, r3]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_PCD_EP_Close+0x76>
 8003658:	2302      	movs	r3, #2
 800365a:	e011      	b.n	8003680 <HAL_PCD_EP_Close+0x9a>
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	23a4      	movs	r3, #164	@ 0xa4
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	2101      	movs	r1, #1
 8003664:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	0011      	movs	r1, r2
 800366e:	0018      	movs	r0, r3
 8003670:	f002 ff34 	bl	80064dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	23a4      	movs	r3, #164	@ 0xa4
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	2100      	movs	r1, #0
 800367c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	b004      	add	sp, #16
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	200b      	movs	r0, #11
 8003696:	183b      	adds	r3, r7, r0
 8003698:	1c0a      	adds	r2, r1, #0
 800369a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800369c:	0001      	movs	r1, r0
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	2207      	movs	r2, #7
 80036a4:	401a      	ands	r2, r3
 80036a6:	0013      	movs	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	189b      	adds	r3, r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	3351      	adds	r3, #81	@ 0x51
 80036b0:	33ff      	adds	r3, #255	@ 0xff
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	18d3      	adds	r3, r2, r3
 80036b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2200      	movs	r2, #0
 80036c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2200      	movs	r2, #0
 80036ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2207      	movs	r2, #7
 80036d6:	4013      	ands	r3, r2
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	0011      	movs	r1, r2
 80036e6:	0018      	movs	r0, r3
 80036e8:	f003 f8b8 	bl	800685c <USB_EPStartXfer>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b006      	add	sp, #24
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	60f8      	str	r0, [r7, #12]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	200b      	movs	r0, #11
 8003704:	183b      	adds	r3, r7, r0
 8003706:	1c0a      	adds	r2, r1, #0
 8003708:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370a:	183b      	adds	r3, r7, r0
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2207      	movs	r2, #7
 8003710:	401a      	ands	r2, r3
 8003712:	0013      	movs	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	189b      	adds	r3, r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	3310      	adds	r3, #16
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	18d3      	adds	r3, r2, r3
 8003720:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2224      	movs	r2, #36	@ 0x24
 8003732:	2101      	movs	r1, #1
 8003734:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2200      	movs	r2, #0
 8003740:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2201      	movs	r2, #1
 8003746:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003748:	183b      	adds	r3, r7, r0
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2207      	movs	r2, #7
 800374e:	4013      	ands	r3, r2
 8003750:	b2da      	uxtb	r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	0011      	movs	r1, r2
 800375e:	0018      	movs	r0, r3
 8003760:	f003 f87c 	bl	800685c <USB_EPStartXfer>

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b006      	add	sp, #24
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	000a      	movs	r2, r1
 8003778:	1cfb      	adds	r3, r7, #3
 800377a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800377c:	1cfb      	adds	r3, r7, #3
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2207      	movs	r2, #7
 8003782:	4013      	ands	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	7912      	ldrb	r2, [r2, #4]
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e046      	b.n	800381e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003790:	1cfb      	adds	r3, r7, #3
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b25b      	sxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	da0f      	bge.n	80037ba <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800379a:	1cfb      	adds	r3, r7, #3
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2207      	movs	r2, #7
 80037a0:	401a      	ands	r2, r3
 80037a2:	0013      	movs	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	189b      	adds	r3, r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	3310      	adds	r3, #16
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	18d3      	adds	r3, r2, r3
 80037b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	705a      	strb	r2, [r3, #1]
 80037b8:	e00d      	b.n	80037d6 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037ba:	1cfb      	adds	r3, r7, #3
 80037bc:	781a      	ldrb	r2, [r3, #0]
 80037be:	0013      	movs	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	189b      	adds	r3, r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	3351      	adds	r3, #81	@ 0x51
 80037c8:	33ff      	adds	r3, #255	@ 0xff
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	18d3      	adds	r3, r2, r3
 80037ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037dc:	1cfb      	adds	r3, r7, #3
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2207      	movs	r2, #7
 80037e2:	4013      	ands	r3, r2
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	23a4      	movs	r3, #164	@ 0xa4
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	5cd3      	ldrb	r3, [r2, r3]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_PCD_EP_SetStall+0x8c>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e011      	b.n	800381e <HAL_PCD_EP_SetStall+0xb0>
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	23a4      	movs	r3, #164	@ 0xa4
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	2101      	movs	r1, #1
 8003802:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	0011      	movs	r1, r2
 800380c:	0018      	movs	r0, r3
 800380e:	f003 fe11 	bl	8007434 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	23a4      	movs	r3, #164	@ 0xa4
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	2100      	movs	r1, #0
 800381a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	000a      	movs	r2, r1
 8003830:	1cfb      	adds	r3, r7, #3
 8003832:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003834:	1cfb      	adds	r3, r7, #3
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	220f      	movs	r2, #15
 800383a:	4013      	ands	r3, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	7912      	ldrb	r2, [r2, #4]
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e048      	b.n	80038da <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003848:	1cfb      	adds	r3, r7, #3
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b25b      	sxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	da0f      	bge.n	8003872 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003852:	1cfb      	adds	r3, r7, #3
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2207      	movs	r2, #7
 8003858:	401a      	ands	r2, r3
 800385a:	0013      	movs	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	189b      	adds	r3, r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	3310      	adds	r3, #16
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	18d3      	adds	r3, r2, r3
 8003868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	705a      	strb	r2, [r3, #1]
 8003870:	e00f      	b.n	8003892 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003872:	1cfb      	adds	r3, r7, #3
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2207      	movs	r2, #7
 8003878:	401a      	ands	r2, r3
 800387a:	0013      	movs	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	189b      	adds	r3, r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	3351      	adds	r3, #81	@ 0x51
 8003884:	33ff      	adds	r3, #255	@ 0xff
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	18d3      	adds	r3, r2, r3
 800388a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003898:	1cfb      	adds	r3, r7, #3
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2207      	movs	r2, #7
 800389e:	4013      	ands	r3, r2
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	23a4      	movs	r3, #164	@ 0xa4
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	5cd3      	ldrb	r3, [r2, r3]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_PCD_EP_ClrStall+0x90>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e011      	b.n	80038da <HAL_PCD_EP_ClrStall+0xb4>
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	23a4      	movs	r3, #164	@ 0xa4
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	2101      	movs	r1, #1
 80038be:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	0011      	movs	r1, r2
 80038c8:	0018      	movs	r0, r3
 80038ca:	f003 fe03 	bl	80074d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	23a4      	movs	r3, #164	@ 0xa4
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	2100      	movs	r1, #0
 80038d6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b004      	add	sp, #16
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80038e4:	b5b0      	push	{r4, r5, r7, lr}
 80038e6:	b094      	sub	sp, #80	@ 0x50
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038ec:	f000 fbbf 	bl	800406e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	2042      	movs	r0, #66	@ 0x42
 80038f6:	183b      	adds	r3, r7, r0
 80038f8:	2144      	movs	r1, #68	@ 0x44
 80038fa:	5a52      	ldrh	r2, [r2, r1]
 80038fc:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80038fe:	183b      	adds	r3, r7, r0
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	2441      	movs	r4, #65	@ 0x41
 8003906:	193b      	adds	r3, r7, r4
 8003908:	210f      	movs	r1, #15
 800390a:	400a      	ands	r2, r1
 800390c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800390e:	193b      	adds	r3, r7, r4
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d000      	beq.n	8003918 <PCD_EP_ISR_Handler+0x34>
 8003916:	e151      	b.n	8003bbc <PCD_EP_ISR_Handler+0x2d8>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003918:	183b      	adds	r3, r7, r0
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	2210      	movs	r2, #16
 800391e:	4013      	ands	r3, r2
 8003920:	d14f      	bne.n	80039c2 <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	b29a      	uxth	r2, r3
 800392a:	200a      	movs	r0, #10
 800392c:	183b      	adds	r3, r7, r0
 800392e:	49dd      	ldr	r1, [pc, #884]	@ (8003ca4 <PCD_EP_ISR_Handler+0x3c0>)
 8003930:	400a      	ands	r2, r1
 8003932:	801a      	strh	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	183a      	adds	r2, r7, r0
 800393a:	8812      	ldrh	r2, [r2, #0]
 800393c:	49da      	ldr	r1, [pc, #872]	@ (8003ca8 <PCD_EP_ISR_Handler+0x3c4>)
 800393e:	430a      	orrs	r2, r1
 8003940:	b292      	uxth	r2, r2
 8003942:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3310      	adds	r3, #16
 8003948:	64bb      	str	r3, [r7, #72]	@ 0x48

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2250      	movs	r2, #80	@ 0x50
 8003950:	5a9b      	ldrh	r3, [r3, r2]
 8003952:	b29b      	uxth	r3, r3
 8003954:	001a      	movs	r2, r3
 8003956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	18d2      	adds	r2, r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	18d3      	adds	r3, r2, r3
 8003964:	4ad1      	ldr	r2, [pc, #836]	@ (8003cac <PCD_EP_ISR_Handler+0x3c8>)
 8003966:	4694      	mov	ip, r2
 8003968:	4463      	add	r3, ip
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	059b      	lsls	r3, r3, #22
 800396e:	0d9a      	lsrs	r2, r3, #22
 8003970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003972:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003974:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	18d2      	adds	r2, r2, r3
 800397e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003980:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2100      	movs	r1, #0
 8003986:	0018      	movs	r0, r3
 8003988:	f005 fc5e 	bl	8009248 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	7b1b      	ldrb	r3, [r3, #12]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d100      	bne.n	8003998 <PCD_EP_ISR_Handler+0xb4>
 8003996:	e36a      	b.n	800406e <PCD_EP_ISR_Handler+0x78a>
 8003998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d000      	beq.n	80039a2 <PCD_EP_ISR_Handler+0xbe>
 80039a0:	e365      	b.n	800406e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	7b1b      	ldrb	r3, [r3, #12]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2280      	movs	r2, #128	@ 0x80
 80039aa:	4252      	negs	r2, r2
 80039ac:	4313      	orrs	r3, r2
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	0011      	movs	r1, r2
 80039b6:	224c      	movs	r2, #76	@ 0x4c
 80039b8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	731a      	strb	r2, [r3, #12]
 80039c0:	e355      	b.n	800406e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3351      	adds	r3, #81	@ 0x51
 80039c6:	33ff      	adds	r3, #255	@ 0xff
 80039c8:	64bb      	str	r3, [r7, #72]	@ 0x48
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	213e      	movs	r1, #62	@ 0x3e
 80039d0:	187b      	adds	r3, r7, r1
 80039d2:	8812      	ldrh	r2, [r2, #0]
 80039d4:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80039d6:	187b      	adds	r3, r7, r1
 80039d8:	881a      	ldrh	r2, [r3, #0]
 80039da:	2380      	movs	r3, #128	@ 0x80
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	4013      	ands	r3, r2
 80039e0:	d100      	bne.n	80039e4 <PCD_EP_ISR_Handler+0x100>
 80039e2:	e07d      	b.n	8003ae0 <PCD_EP_ISR_Handler+0x1fc>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2250      	movs	r2, #80	@ 0x50
 80039ea:	5a9b      	ldrh	r3, [r3, r2]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	001a      	movs	r2, r3
 80039f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	18d2      	adds	r2, r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	18d3      	adds	r3, r2, r3
 80039fe:	4aac      	ldr	r2, [pc, #688]	@ (8003cb0 <PCD_EP_ISR_Handler+0x3cc>)
 8003a00:	4694      	mov	ip, r2
 8003a02:	4463      	add	r3, ip
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	059b      	lsls	r3, r3, #22
 8003a08:	0d9a      	lsrs	r2, r3, #22
 8003a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a0c:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 8U)
 8003a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d041      	beq.n	8003a9a <PCD_EP_ISR_Handler+0x1b6>
          {
            /* Set Stall condition for EP0 IN/OUT */
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_STALL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	2010      	movs	r0, #16
 8003a20:	183b      	adds	r3, r7, r0
 8003a22:	49a4      	ldr	r1, [pc, #656]	@ (8003cb4 <PCD_EP_ISR_Handler+0x3d0>)
 8003a24:	400a      	ands	r2, r1
 8003a26:	801a      	strh	r2, [r3, #0]
 8003a28:	183b      	adds	r3, r7, r0
 8003a2a:	183a      	adds	r2, r7, r0
 8003a2c:	8812      	ldrh	r2, [r2, #0]
 8003a2e:	2180      	movs	r1, #128	@ 0x80
 8003a30:	0149      	lsls	r1, r1, #5
 8003a32:	404a      	eors	r2, r1
 8003a34:	801a      	strh	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	183a      	adds	r2, r7, r0
 8003a3c:	8812      	ldrh	r2, [r2, #0]
 8003a3e:	499e      	ldr	r1, [pc, #632]	@ (8003cb8 <PCD_EP_ISR_Handler+0x3d4>)
 8003a40:	430a      	orrs	r2, r1
 8003a42:	b292      	uxth	r2, r2
 8003a44:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_TX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_TX_STALL);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	200e      	movs	r0, #14
 8003a50:	183b      	adds	r3, r7, r0
 8003a52:	499a      	ldr	r1, [pc, #616]	@ (8003cbc <PCD_EP_ISR_Handler+0x3d8>)
 8003a54:	400a      	ands	r2, r1
 8003a56:	801a      	strh	r2, [r3, #0]
 8003a58:	183b      	adds	r3, r7, r0
 8003a5a:	183a      	adds	r2, r7, r0
 8003a5c:	8812      	ldrh	r2, [r2, #0]
 8003a5e:	2110      	movs	r1, #16
 8003a60:	404a      	eors	r2, r1
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	183a      	adds	r2, r7, r0
 8003a6a:	8812      	ldrh	r2, [r2, #0]
 8003a6c:	4992      	ldr	r1, [pc, #584]	@ (8003cb8 <PCD_EP_ISR_Handler+0x3d4>)
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	b292      	uxth	r2, r2
 8003a72:	801a      	strh	r2, [r3, #0]

            /* SETUP bit kept frozen while CTR_RX = 1 */
            PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	200c      	movs	r0, #12
 8003a7e:	183b      	adds	r3, r7, r0
 8003a80:	498f      	ldr	r1, [pc, #572]	@ (8003cc0 <PCD_EP_ISR_Handler+0x3dc>)
 8003a82:	400a      	ands	r2, r1
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	183a      	adds	r2, r7, r0
 8003a8c:	8812      	ldrh	r2, [r2, #0]
 8003a8e:	2180      	movs	r1, #128	@ 0x80
 8003a90:	430a      	orrs	r2, r1
 8003a92:	b292      	uxth	r2, r2
 8003a94:	801a      	strh	r2, [r3, #0]

            return HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e2f4      	b.n	8004084 <PCD_EP_ISR_Handler+0x7a0>
          }

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	22a6      	movs	r2, #166	@ 0xa6
 8003aa2:	0092      	lsls	r2, r2, #2
 8003aa4:	1899      	adds	r1, r3, r2
 8003aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aa8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003aac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f003 fe3e 	bl	8007730 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	2012      	movs	r0, #18
 8003abe:	183b      	adds	r3, r7, r0
 8003ac0:	497f      	ldr	r1, [pc, #508]	@ (8003cc0 <PCD_EP_ISR_Handler+0x3dc>)
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	801a      	strh	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	183a      	adds	r2, r7, r0
 8003acc:	8812      	ldrh	r2, [r2, #0]
 8003ace:	2180      	movs	r1, #128	@ 0x80
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	b292      	uxth	r2, r2
 8003ad4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f005 fb7f 	bl	80091dc <HAL_PCD_SetupStageCallback>
 8003ade:	e2c6      	b.n	800406e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ae0:	233e      	movs	r3, #62	@ 0x3e
 8003ae2:	18fb      	adds	r3, r7, r3
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	5e9b      	ldrsh	r3, [r3, r2]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	db00      	blt.n	8003aee <PCD_EP_ISR_Handler+0x20a>
 8003aec:	e2bf      	b.n	800406e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	2016      	movs	r0, #22
 8003af8:	183b      	adds	r3, r7, r0
 8003afa:	4971      	ldr	r1, [pc, #452]	@ (8003cc0 <PCD_EP_ISR_Handler+0x3dc>)
 8003afc:	400a      	ands	r2, r1
 8003afe:	801a      	strh	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	183a      	adds	r2, r7, r0
 8003b06:	8812      	ldrh	r2, [r2, #0]
 8003b08:	2180      	movs	r1, #128	@ 0x80
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	b292      	uxth	r2, r2
 8003b0e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2250      	movs	r2, #80	@ 0x50
 8003b16:	5a9b      	ldrh	r3, [r3, r2]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	001a      	movs	r2, r3
 8003b1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	18d2      	adds	r2, r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	18d3      	adds	r3, r2, r3
 8003b2a:	4a61      	ldr	r2, [pc, #388]	@ (8003cb0 <PCD_EP_ISR_Handler+0x3cc>)
 8003b2c:	4694      	mov	ip, r2
 8003b2e:	4463      	add	r3, ip
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	059b      	lsls	r3, r3, #22
 8003b34:	0d9a      	lsrs	r2, r3, #22
 8003b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b38:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count == 0U)
 8003b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d11f      	bne.n	8003b82 <PCD_EP_ISR_Handler+0x29e>
          {
            /* Status phase re-arm for next setup */
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	2014      	movs	r0, #20
 8003b4c:	183b      	adds	r3, r7, r0
 8003b4e:	4959      	ldr	r1, [pc, #356]	@ (8003cb4 <PCD_EP_ISR_Handler+0x3d0>)
 8003b50:	400a      	ands	r2, r1
 8003b52:	801a      	strh	r2, [r3, #0]
 8003b54:	183b      	adds	r3, r7, r0
 8003b56:	183a      	adds	r2, r7, r0
 8003b58:	8812      	ldrh	r2, [r2, #0]
 8003b5a:	2180      	movs	r1, #128	@ 0x80
 8003b5c:	0149      	lsls	r1, r1, #5
 8003b5e:	404a      	eors	r2, r1
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	183b      	adds	r3, r7, r0
 8003b64:	183a      	adds	r2, r7, r0
 8003b66:	8812      	ldrh	r2, [r2, #0]
 8003b68:	2180      	movs	r1, #128	@ 0x80
 8003b6a:	0189      	lsls	r1, r1, #6
 8003b6c:	404a      	eors	r2, r1
 8003b6e:	801a      	strh	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	183a      	adds	r2, r7, r0
 8003b76:	8812      	ldrh	r2, [r2, #0]
 8003b78:	494f      	ldr	r1, [pc, #316]	@ (8003cb8 <PCD_EP_ISR_Handler+0x3d4>)
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	b292      	uxth	r2, r2
 8003b7e:	801a      	strh	r2, [r3, #0]
 8003b80:	e275      	b.n	800406e <PCD_EP_ISR_Handler+0x78a>
          }
          else
          {
            if (ep->xfer_buff != 0U)
 8003b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d100      	bne.n	8003b8c <PCD_EP_ISR_Handler+0x2a8>
 8003b8a:	e270      	b.n	800406e <PCD_EP_ISR_Handler+0x78a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6818      	ldr	r0, [r3, #0]
 8003b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b92:	6959      	ldr	r1, [r3, #20]
 8003b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b96:	88da      	ldrh	r2, [r3, #6]
                          ep->pmaadress, (uint16_t)ep->xfer_count);  /* max 64bytes */
 8003b98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b9a:	69db      	ldr	r3, [r3, #28]
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f003 fdc7 	bl	8007730 <USB_ReadPMA>

              ep->xfer_buff += ep->xfer_count;
 8003ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	18d2      	adds	r2, r2, r3
 8003bac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bae:	615a      	str	r2, [r3, #20]

              /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataOutStageCallback(hpcd, 0U);
#else
              HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f005 fb26 	bl	8009206 <HAL_PCD_DataOutStageCallback>
 8003bba:	e258      	b.n	800406e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	001a      	movs	r2, r3
 8003bc2:	2041      	movs	r0, #65	@ 0x41
 8003bc4:	183b      	adds	r3, r7, r0
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	18d2      	adds	r2, r2, r3
 8003bcc:	213e      	movs	r1, #62	@ 0x3e
 8003bce:	187b      	adds	r3, r7, r1
 8003bd0:	8812      	ldrh	r2, [r2, #0]
 8003bd2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003bd4:	187b      	adds	r3, r7, r1
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	5e9b      	ldrsh	r3, [r3, r2]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	db00      	blt.n	8003be0 <PCD_EP_ISR_Handler+0x2fc>
 8003bde:	e10c      	b.n	8003dfa <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	001a      	movs	r2, r3
 8003be6:	183b      	adds	r3, r7, r0
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	18d3      	adds	r3, r2, r3
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	2446      	movs	r4, #70	@ 0x46
 8003bf4:	193b      	adds	r3, r7, r4
 8003bf6:	4932      	ldr	r1, [pc, #200]	@ (8003cc0 <PCD_EP_ISR_Handler+0x3dc>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	801a      	strh	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	001a      	movs	r2, r3
 8003c02:	183b      	adds	r3, r7, r0
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	18d3      	adds	r3, r2, r3
 8003c0a:	193a      	adds	r2, r7, r4
 8003c0c:	8812      	ldrh	r2, [r2, #0]
 8003c0e:	2180      	movs	r1, #128	@ 0x80
 8003c10:	430a      	orrs	r2, r1
 8003c12:	b292      	uxth	r2, r2
 8003c14:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003c16:	183b      	adds	r3, r7, r0
 8003c18:	781a      	ldrb	r2, [r3, #0]
 8003c1a:	0013      	movs	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	189b      	adds	r3, r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	3351      	adds	r3, #81	@ 0x51
 8003c24:	33ff      	adds	r3, #255	@ 0xff
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	18d3      	adds	r3, r2, r3
 8003c2a:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c2e:	7b1b      	ldrb	r3, [r3, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d125      	bne.n	8003c80 <PCD_EP_ISR_Handler+0x39c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2250      	movs	r2, #80	@ 0x50
 8003c3a:	5a9b      	ldrh	r3, [r3, r2]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	001a      	movs	r2, r3
 8003c40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	18d2      	adds	r2, r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	18d3      	adds	r3, r2, r3
 8003c4e:	4a18      	ldr	r2, [pc, #96]	@ (8003cb0 <PCD_EP_ISR_Handler+0x3cc>)
 8003c50:	4694      	mov	ip, r2
 8003c52:	4463      	add	r3, ip
 8003c54:	881a      	ldrh	r2, [r3, #0]
 8003c56:	244e      	movs	r4, #78	@ 0x4e
 8003c58:	193b      	adds	r3, r7, r4
 8003c5a:	0592      	lsls	r2, r2, #22
 8003c5c:	0d92      	lsrs	r2, r2, #22
 8003c5e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003c60:	193b      	adds	r3, r7, r4
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d100      	bne.n	8003c6a <PCD_EP_ISR_Handler+0x386>
 8003c68:	e09e      	b.n	8003da8 <PCD_EP_ISR_Handler+0x4c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c70:	6959      	ldr	r1, [r3, #20]
 8003c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c74:	88da      	ldrh	r2, [r3, #6]
 8003c76:	193b      	adds	r3, r7, r4
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	f003 fd59 	bl	8007730 <USB_ReadPMA>
 8003c7e:	e093      	b.n	8003da8 <PCD_EP_ISR_Handler+0x4c4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003c80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c82:	78db      	ldrb	r3, [r3, #3]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d11d      	bne.n	8003cc4 <PCD_EP_ISR_Handler+0x3e0>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003c88:	234e      	movs	r3, #78	@ 0x4e
 8003c8a:	18fc      	adds	r4, r7, r3
 8003c8c:	233e      	movs	r3, #62	@ 0x3e
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	0018      	movs	r0, r3
 8003c98:	f000 f9f8 	bl	800408c <HAL_PCD_EP_DB_Receive>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	8023      	strh	r3, [r4, #0]
 8003ca0:	e082      	b.n	8003da8 <PCD_EP_ISR_Handler+0x4c4>
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	ffff8f0f 	.word	0xffff8f0f
 8003ca8:	ffff8000 	.word	0xffff8000
 8003cac:	00000402 	.word	0x00000402
 8003cb0:	00000406 	.word	0x00000406
 8003cb4:	ffffbf8f 	.word	0xffffbf8f
 8003cb8:	ffff8080 	.word	0xffff8080
 8003cbc:	ffff8fbf 	.word	0xffff8fbf
 8003cc0:	00000f8f 	.word	0x00000f8f
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	001a      	movs	r2, r3
 8003cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	18d3      	adds	r3, r2, r3
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	2044      	movs	r0, #68	@ 0x44
 8003cd8:	183b      	adds	r3, r7, r0
 8003cda:	49cf      	ldr	r1, [pc, #828]	@ (8004018 <PCD_EP_ISR_Handler+0x734>)
 8003cdc:	400a      	ands	r2, r1
 8003cde:	801a      	strh	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	001a      	movs	r2, r3
 8003ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	18d3      	adds	r3, r2, r3
 8003cee:	183a      	adds	r2, r7, r0
 8003cf0:	8812      	ldrh	r2, [r2, #0]
 8003cf2:	49ca      	ldr	r1, [pc, #808]	@ (800401c <PCD_EP_ISR_Handler+0x738>)
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	b292      	uxth	r2, r2
 8003cf8:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	001a      	movs	r2, r3
 8003d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	18d3      	adds	r3, r2, r3
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	001a      	movs	r2, r3
 8003d0e:	2380      	movs	r3, #128	@ 0x80
 8003d10:	01db      	lsls	r3, r3, #7
 8003d12:	4013      	ands	r3, r2
 8003d14:	d024      	beq.n	8003d60 <PCD_EP_ISR_Handler+0x47c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2250      	movs	r2, #80	@ 0x50
 8003d1c:	5a9b      	ldrh	r3, [r3, r2]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	001a      	movs	r2, r3
 8003d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	18d2      	adds	r2, r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	18d3      	adds	r3, r2, r3
 8003d30:	4abb      	ldr	r2, [pc, #748]	@ (8004020 <PCD_EP_ISR_Handler+0x73c>)
 8003d32:	4694      	mov	ip, r2
 8003d34:	4463      	add	r3, ip
 8003d36:	881a      	ldrh	r2, [r3, #0]
 8003d38:	244e      	movs	r4, #78	@ 0x4e
 8003d3a:	193b      	adds	r3, r7, r4
 8003d3c:	0592      	lsls	r2, r2, #22
 8003d3e:	0d92      	lsrs	r2, r2, #22
 8003d40:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003d42:	193b      	adds	r3, r7, r4
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d02e      	beq.n	8003da8 <PCD_EP_ISR_Handler+0x4c4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d50:	6959      	ldr	r1, [r3, #20]
 8003d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d54:	891a      	ldrh	r2, [r3, #8]
 8003d56:	193b      	adds	r3, r7, r4
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	f003 fce9 	bl	8007730 <USB_ReadPMA>
 8003d5e:	e023      	b.n	8003da8 <PCD_EP_ISR_Handler+0x4c4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2250      	movs	r2, #80	@ 0x50
 8003d66:	5a9b      	ldrh	r3, [r3, r2]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	001a      	movs	r2, r3
 8003d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	18d2      	adds	r2, r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	18d3      	adds	r3, r2, r3
 8003d7a:	4aaa      	ldr	r2, [pc, #680]	@ (8004024 <PCD_EP_ISR_Handler+0x740>)
 8003d7c:	4694      	mov	ip, r2
 8003d7e:	4463      	add	r3, ip
 8003d80:	881a      	ldrh	r2, [r3, #0]
 8003d82:	244e      	movs	r4, #78	@ 0x4e
 8003d84:	193b      	adds	r3, r7, r4
 8003d86:	0592      	lsls	r2, r2, #22
 8003d88:	0d92      	lsrs	r2, r2, #22
 8003d8a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003d8c:	193b      	adds	r3, r7, r4
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d009      	beq.n	8003da8 <PCD_EP_ISR_Handler+0x4c4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d9a:	6959      	ldr	r1, [r3, #20]
 8003d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d9e:	895a      	ldrh	r2, [r3, #10]
 8003da0:	193b      	adds	r3, r7, r4
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	f003 fcc4 	bl	8007730 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003da8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	214e      	movs	r1, #78	@ 0x4e
 8003dae:	187b      	adds	r3, r7, r1
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	18d2      	adds	r2, r2, r3
 8003db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003db6:	61da      	str	r2, [r3, #28]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003db8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <PCD_EP_ISR_Handler+0x4e8>
 8003dc0:	187b      	adds	r3, r7, r1
 8003dc2:	881a      	ldrh	r2, [r3, #0]
 8003dc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d207      	bcs.n	8003ddc <PCD_EP_ISR_Handler+0x4f8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	0011      	movs	r1, r2
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f005 fa16 	bl	8009206 <HAL_PCD_DataOutStageCallback>
 8003dda:	e00e      	b.n	8003dfa <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
           ep->xfer_buff += count;
 8003ddc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	234e      	movs	r3, #78	@ 0x4e
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	18d2      	adds	r2, r2, r3
 8003de8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dea:	615a      	str	r2, [r3, #20]
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003df2:	0011      	movs	r1, r2
 8003df4:	0018      	movs	r0, r3
 8003df6:	f002 fd31 	bl	800685c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003dfa:	243e      	movs	r4, #62	@ 0x3e
 8003dfc:	193b      	adds	r3, r7, r4
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	2280      	movs	r2, #128	@ 0x80
 8003e02:	4013      	ands	r3, r2
 8003e04:	d100      	bne.n	8003e08 <PCD_EP_ISR_Handler+0x524>
 8003e06:	e132      	b.n	800406e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8003e08:	2041      	movs	r0, #65	@ 0x41
 8003e0a:	183b      	adds	r3, r7, r0
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	0013      	movs	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	3310      	adds	r3, #16
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	18d3      	adds	r3, r2, r3
 8003e1c:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	001a      	movs	r2, r3
 8003e24:	183b      	adds	r3, r7, r0
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	18d3      	adds	r3, r2, r3
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	253c      	movs	r5, #60	@ 0x3c
 8003e32:	197b      	adds	r3, r7, r5
 8003e34:	497c      	ldr	r1, [pc, #496]	@ (8004028 <PCD_EP_ISR_Handler+0x744>)
 8003e36:	400a      	ands	r2, r1
 8003e38:	801a      	strh	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	001a      	movs	r2, r3
 8003e40:	183b      	adds	r3, r7, r0
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	18d3      	adds	r3, r2, r3
 8003e48:	197a      	adds	r2, r7, r5
 8003e4a:	8812      	ldrh	r2, [r2, #0]
 8003e4c:	4977      	ldr	r1, [pc, #476]	@ (800402c <PCD_EP_ISR_Handler+0x748>)
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	b292      	uxth	r2, r2
 8003e52:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003e54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e56:	78db      	ldrb	r3, [r3, #3]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d000      	beq.n	8003e5e <PCD_EP_ISR_Handler+0x57a>
 8003e5c:	e0a1      	b.n	8003fa2 <PCD_EP_ISR_Handler+0x6be>
        {
          ep->xfer_len = 0U;
 8003e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e60:	2200      	movs	r2, #0
 8003e62:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003e64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e66:	7b1b      	ldrb	r3, [r3, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d100      	bne.n	8003e6e <PCD_EP_ISR_Handler+0x58a>
 8003e6c:	e091      	b.n	8003f92 <PCD_EP_ISR_Handler+0x6ae>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e6e:	193b      	adds	r3, r7, r4
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	2240      	movs	r2, #64	@ 0x40
 8003e74:	4013      	ands	r3, r2
 8003e76:	d046      	beq.n	8003f06 <PCD_EP_ISR_Handler+0x622>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e7a:	785b      	ldrb	r3, [r3, #1]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d125      	bne.n	8003ecc <PCD_EP_ISR_Handler+0x5e8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2250      	movs	r2, #80	@ 0x50
 8003e8c:	5a9b      	ldrh	r3, [r3, r2]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	001a      	movs	r2, r3
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	189b      	adds	r3, r3, r2
 8003e96:	61fb      	str	r3, [r7, #28]
 8003e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	00da      	lsls	r2, r3, #3
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	18d3      	adds	r3, r2, r3
 8003ea2:	4a5f      	ldr	r2, [pc, #380]	@ (8004020 <PCD_EP_ISR_Handler+0x73c>)
 8003ea4:	4694      	mov	ip, r2
 8003ea6:	4463      	add	r3, ip
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	059b      	lsls	r3, r3, #22
 8003eb2:	0d9b      	lsrs	r3, r3, #22
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	801a      	strh	r2, [r3, #0]
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	4a5a      	ldr	r2, [pc, #360]	@ (800402c <PCD_EP_ISR_Handler+0x748>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	e062      	b.n	8003f92 <PCD_EP_ISR_Handler+0x6ae>
 8003ecc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d15e      	bne.n	8003f92 <PCD_EP_ISR_Handler+0x6ae>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2250      	movs	r2, #80	@ 0x50
 8003ee0:	5a9b      	ldrh	r3, [r3, r2]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	001a      	movs	r2, r3
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	189b      	adds	r3, r3, r2
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	00da      	lsls	r2, r3, #3
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	18d3      	adds	r3, r2, r3
 8003ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8004020 <PCD_EP_ISR_Handler+0x73c>)
 8003ef8:	4694      	mov	ip, r2
 8003efa:	4463      	add	r3, ip
 8003efc:	623b      	str	r3, [r7, #32]
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	2200      	movs	r2, #0
 8003f02:	801a      	strh	r2, [r3, #0]
 8003f04:	e045      	b.n	8003f92 <PCD_EP_ISR_Handler+0x6ae>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d125      	bne.n	8003f60 <PCD_EP_ISR_Handler+0x67c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2250      	movs	r2, #80	@ 0x50
 8003f20:	5a9b      	ldrh	r3, [r3, r2]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	001a      	movs	r2, r3
 8003f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f28:	189b      	adds	r3, r3, r2
 8003f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	00da      	lsls	r2, r3, #3
 8003f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f34:	18d3      	adds	r3, r2, r3
 8003f36:	4a3b      	ldr	r2, [pc, #236]	@ (8004024 <PCD_EP_ISR_Handler+0x740>)
 8003f38:	4694      	mov	ip, r2
 8003f3a:	4463      	add	r3, ip
 8003f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	059b      	lsls	r3, r3, #22
 8003f46:	0d9b      	lsrs	r3, r3, #22
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4c:	801a      	strh	r2, [r3, #0]
 8003f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	4a35      	ldr	r2, [pc, #212]	@ (800402c <PCD_EP_ISR_Handler+0x748>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5c:	801a      	strh	r2, [r3, #0]
 8003f5e:	e018      	b.n	8003f92 <PCD_EP_ISR_Handler+0x6ae>
 8003f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f62:	785b      	ldrb	r3, [r3, #1]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d114      	bne.n	8003f92 <PCD_EP_ISR_Handler+0x6ae>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2250      	movs	r2, #80	@ 0x50
 8003f6e:	5a9b      	ldrh	r3, [r3, r2]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	001a      	movs	r2, r3
 8003f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f76:	189b      	adds	r3, r3, r2
 8003f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	00da      	lsls	r2, r3, #3
 8003f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f82:	18d3      	adds	r3, r2, r3
 8003f84:	4a27      	ldr	r2, [pc, #156]	@ (8004024 <PCD_EP_ISR_Handler+0x740>)
 8003f86:	4694      	mov	ip, r2
 8003f88:	4463      	add	r3, ip
 8003f8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8e:	2200      	movs	r2, #0
 8003f90:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0011      	movs	r1, r2
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f005 f954 	bl	8009248 <HAL_PCD_DataInStageCallback>
 8003fa0:	e065      	b.n	800406e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003fa2:	233e      	movs	r3, #62	@ 0x3e
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	881a      	ldrh	r2, [r3, #0]
 8003fa8:	2380      	movs	r3, #128	@ 0x80
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	4013      	ands	r3, r2
 8003fae:	d156      	bne.n	800405e <PCD_EP_ISR_Handler+0x77a>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2250      	movs	r2, #80	@ 0x50
 8003fb6:	5a9b      	ldrh	r3, [r3, r2]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	001a      	movs	r2, r3
 8003fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	18d2      	adds	r2, r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	18d3      	adds	r3, r2, r3
 8003fca:	4a15      	ldr	r2, [pc, #84]	@ (8004020 <PCD_EP_ISR_Handler+0x73c>)
 8003fcc:	4694      	mov	ip, r2
 8003fce:	4463      	add	r3, ip
 8003fd0:	881a      	ldrh	r2, [r3, #0]
 8003fd2:	213a      	movs	r1, #58	@ 0x3a
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	0592      	lsls	r2, r2, #22
 8003fd8:	0d92      	lsrs	r2, r2, #22
 8003fda:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8003fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fde:	699a      	ldr	r2, [r3, #24]
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d907      	bls.n	8003ff8 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8003fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	1ad2      	subs	r2, r2, r3
 8003ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ff4:	619a      	str	r2, [r3, #24]
 8003ff6:	e002      	b.n	8003ffe <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003ff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d114      	bne.n	8004030 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004008:	781a      	ldrb	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0011      	movs	r1, r2
 800400e:	0018      	movs	r0, r3
 8004010:	f005 f91a 	bl	8009248 <HAL_PCD_DataInStageCallback>
 8004014:	e02b      	b.n	800406e <PCD_EP_ISR_Handler+0x78a>
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	ffff8f8f 	.word	0xffff8f8f
 800401c:	ffff80c0 	.word	0xffff80c0
 8004020:	00000402 	.word	0x00000402
 8004024:	00000406 	.word	0x00000406
 8004028:	ffff8f0f 	.word	0xffff8f0f
 800402c:	ffff8000 	.word	0xffff8000
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	213a      	movs	r1, #58	@ 0x3a
 8004036:	187b      	adds	r3, r7, r1
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	18d2      	adds	r2, r2, r3
 800403c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800403e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	187b      	adds	r3, r7, r1
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	18d2      	adds	r2, r2, r3
 800404a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800404c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004054:	0011      	movs	r1, r2
 8004056:	0018      	movs	r0, r3
 8004058:	f002 fc00 	bl	800685c <USB_EPStartXfer>
 800405c:	e007      	b.n	800406e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800405e:	233e      	movs	r3, #62	@ 0x3e
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	881a      	ldrh	r2, [r3, #0]
 8004064:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0018      	movs	r0, r3
 800406a:	f000 f92b 	bl	80042c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2244      	movs	r2, #68	@ 0x44
 8004074:	5a9b      	ldrh	r3, [r3, r2]
 8004076:	b29b      	uxth	r3, r3
 8004078:	b21b      	sxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	da01      	bge.n	8004082 <PCD_EP_ISR_Handler+0x79e>
 800407e:	f7ff fc37 	bl	80038f0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b014      	add	sp, #80	@ 0x50
 800408a:	bdb0      	pop	{r4, r5, r7, pc}

0800408c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b089      	sub	sp, #36	@ 0x24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	1dbb      	adds	r3, r7, #6
 8004098:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800409a:	1dbb      	adds	r3, r7, #6
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	2380      	movs	r3, #128	@ 0x80
 80040a0:	01db      	lsls	r3, r3, #7
 80040a2:	4013      	ands	r3, r2
 80040a4:	d100      	bne.n	80040a8 <HAL_PCD_EP_DB_Receive+0x1c>
 80040a6:	e07d      	b.n	80041a4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2250      	movs	r2, #80	@ 0x50
 80040ae:	5a9b      	ldrh	r3, [r3, r2]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	001a      	movs	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	18d2      	adds	r2, r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	18d3      	adds	r3, r2, r3
 80040c2:	4a7a      	ldr	r2, [pc, #488]	@ (80042ac <HAL_PCD_EP_DB_Receive+0x220>)
 80040c4:	4694      	mov	ip, r2
 80040c6:	4463      	add	r3, ip
 80040c8:	881a      	ldrh	r2, [r3, #0]
 80040ca:	211a      	movs	r1, #26
 80040cc:	187b      	adds	r3, r7, r1
 80040ce:	0592      	lsls	r2, r2, #22
 80040d0:	0d92      	lsrs	r2, r2, #22
 80040d2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	699a      	ldr	r2, [r3, #24]
 80040d8:	187b      	adds	r3, r7, r1
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d307      	bcc.n	80040f0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	699a      	ldr	r2, [r3, #24]
 80040e4:	187b      	adds	r3, r7, r1
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	1ad2      	subs	r2, r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	619a      	str	r2, [r3, #24]
 80040ee:	e002      	b.n	80040f6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2200      	movs	r2, #0
 80040f4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d121      	bne.n	8004142 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	001a      	movs	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	18d3      	adds	r3, r2, r3
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b29a      	uxth	r2, r3
 8004110:	2018      	movs	r0, #24
 8004112:	183b      	adds	r3, r7, r0
 8004114:	4966      	ldr	r1, [pc, #408]	@ (80042b0 <HAL_PCD_EP_DB_Receive+0x224>)
 8004116:	400a      	ands	r2, r1
 8004118:	801a      	strh	r2, [r3, #0]
 800411a:	183b      	adds	r3, r7, r0
 800411c:	183a      	adds	r2, r7, r0
 800411e:	8812      	ldrh	r2, [r2, #0]
 8004120:	2180      	movs	r1, #128	@ 0x80
 8004122:	0189      	lsls	r1, r1, #6
 8004124:	404a      	eors	r2, r1
 8004126:	801a      	strh	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	001a      	movs	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	18d3      	adds	r3, r2, r3
 8004136:	183a      	adds	r2, r7, r0
 8004138:	8812      	ldrh	r2, [r2, #0]
 800413a:	495e      	ldr	r1, [pc, #376]	@ (80042b4 <HAL_PCD_EP_DB_Receive+0x228>)
 800413c:	430a      	orrs	r2, r1
 800413e:	b292      	uxth	r2, r2
 8004140:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004142:	1dbb      	adds	r3, r7, #6
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	2240      	movs	r2, #64	@ 0x40
 8004148:	4013      	ands	r3, r2
 800414a:	d01a      	beq.n	8004182 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	001a      	movs	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	18d3      	adds	r3, r2, r3
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29a      	uxth	r2, r3
 800415e:	2016      	movs	r0, #22
 8004160:	183b      	adds	r3, r7, r0
 8004162:	4955      	ldr	r1, [pc, #340]	@ (80042b8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004164:	400a      	ands	r2, r1
 8004166:	801a      	strh	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	001a      	movs	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	18d3      	adds	r3, r2, r3
 8004176:	183a      	adds	r2, r7, r0
 8004178:	8812      	ldrh	r2, [r2, #0]
 800417a:	4950      	ldr	r1, [pc, #320]	@ (80042bc <HAL_PCD_EP_DB_Receive+0x230>)
 800417c:	430a      	orrs	r2, r1
 800417e:	b292      	uxth	r2, r2
 8004180:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004182:	241a      	movs	r4, #26
 8004184:	193b      	adds	r3, r7, r4
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d100      	bne.n	800418e <HAL_PCD_EP_DB_Receive+0x102>
 800418c:	e086      	b.n	800429c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	6959      	ldr	r1, [r3, #20]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	891a      	ldrh	r2, [r3, #8]
 800419a:	193b      	adds	r3, r7, r4
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	f003 fac7 	bl	8007730 <USB_ReadPMA>
 80041a2:	e07b      	b.n	800429c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2250      	movs	r2, #80	@ 0x50
 80041aa:	5a9b      	ldrh	r3, [r3, r2]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	001a      	movs	r2, r3
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	18d2      	adds	r2, r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	18d3      	adds	r3, r2, r3
 80041be:	4a40      	ldr	r2, [pc, #256]	@ (80042c0 <HAL_PCD_EP_DB_Receive+0x234>)
 80041c0:	4694      	mov	ip, r2
 80041c2:	4463      	add	r3, ip
 80041c4:	881a      	ldrh	r2, [r3, #0]
 80041c6:	211a      	movs	r1, #26
 80041c8:	187b      	adds	r3, r7, r1
 80041ca:	0592      	lsls	r2, r2, #22
 80041cc:	0d92      	lsrs	r2, r2, #22
 80041ce:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	699a      	ldr	r2, [r3, #24]
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d307      	bcc.n	80041ec <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	187b      	adds	r3, r7, r1
 80041e2:	881b      	ldrh	r3, [r3, #0]
 80041e4:	1ad2      	subs	r2, r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	619a      	str	r2, [r3, #24]
 80041ea:	e002      	b.n	80041f2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2200      	movs	r2, #0
 80041f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d121      	bne.n	800423e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	001a      	movs	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	18d3      	adds	r3, r2, r3
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	b29a      	uxth	r2, r3
 800420c:	201e      	movs	r0, #30
 800420e:	183b      	adds	r3, r7, r0
 8004210:	4927      	ldr	r1, [pc, #156]	@ (80042b0 <HAL_PCD_EP_DB_Receive+0x224>)
 8004212:	400a      	ands	r2, r1
 8004214:	801a      	strh	r2, [r3, #0]
 8004216:	183b      	adds	r3, r7, r0
 8004218:	183a      	adds	r2, r7, r0
 800421a:	8812      	ldrh	r2, [r2, #0]
 800421c:	2180      	movs	r1, #128	@ 0x80
 800421e:	0189      	lsls	r1, r1, #6
 8004220:	404a      	eors	r2, r1
 8004222:	801a      	strh	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	001a      	movs	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	18d3      	adds	r3, r2, r3
 8004232:	183a      	adds	r2, r7, r0
 8004234:	8812      	ldrh	r2, [r2, #0]
 8004236:	491f      	ldr	r1, [pc, #124]	@ (80042b4 <HAL_PCD_EP_DB_Receive+0x228>)
 8004238:	430a      	orrs	r2, r1
 800423a:	b292      	uxth	r2, r2
 800423c:	801a      	strh	r2, [r3, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800423e:	1dbb      	adds	r3, r7, #6
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	2240      	movs	r2, #64	@ 0x40
 8004244:	4013      	ands	r3, r2
 8004246:	d11a      	bne.n	800427e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	001a      	movs	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	18d3      	adds	r3, r2, r3
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	b29a      	uxth	r2, r3
 800425a:	201c      	movs	r0, #28
 800425c:	183b      	adds	r3, r7, r0
 800425e:	4916      	ldr	r1, [pc, #88]	@ (80042b8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004260:	400a      	ands	r2, r1
 8004262:	801a      	strh	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	001a      	movs	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	18d3      	adds	r3, r2, r3
 8004272:	183a      	adds	r2, r7, r0
 8004274:	8812      	ldrh	r2, [r2, #0]
 8004276:	4911      	ldr	r1, [pc, #68]	@ (80042bc <HAL_PCD_EP_DB_Receive+0x230>)
 8004278:	430a      	orrs	r2, r1
 800427a:	b292      	uxth	r2, r2
 800427c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800427e:	241a      	movs	r4, #26
 8004280:	193b      	adds	r3, r7, r4
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	6959      	ldr	r1, [r3, #20]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	895a      	ldrh	r2, [r3, #10]
 8004294:	193b      	adds	r3, r7, r4
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	f003 fa4a 	bl	8007730 <USB_ReadPMA>
    }
  }

  return count;
 800429c:	231a      	movs	r3, #26
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	881b      	ldrh	r3, [r3, #0]
}
 80042a2:	0018      	movs	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b009      	add	sp, #36	@ 0x24
 80042a8:	bd90      	pop	{r4, r7, pc}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	00000402 	.word	0x00000402
 80042b0:	ffffbf8f 	.word	0xffffbf8f
 80042b4:	ffff8080 	.word	0xffff8080
 80042b8:	ffff8f8f 	.word	0xffff8f8f
 80042bc:	ffff80c0 	.word	0xffff80c0
 80042c0:	00000406 	.word	0x00000406

080042c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b0a6      	sub	sp, #152	@ 0x98
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	1dbb      	adds	r3, r7, #6
 80042d0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042d2:	1dbb      	adds	r3, r7, #6
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	2240      	movs	r2, #64	@ 0x40
 80042d8:	4013      	ands	r3, r2
 80042da:	d100      	bne.n	80042de <HAL_PCD_EP_DB_Transmit+0x1a>
 80042dc:	e1f9      	b.n	80046d2 <HAL_PCD_EP_DB_Transmit+0x40e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2250      	movs	r2, #80	@ 0x50
 80042e4:	5a9b      	ldrh	r3, [r3, r2]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	001a      	movs	r2, r3
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	18d2      	adds	r2, r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	18d3      	adds	r3, r2, r3
 80042f8:	4ace      	ldr	r2, [pc, #824]	@ (8004634 <HAL_PCD_EP_DB_Transmit+0x370>)
 80042fa:	4694      	mov	ip, r2
 80042fc:	4463      	add	r3, ip
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	2196      	movs	r1, #150	@ 0x96
 8004302:	187b      	adds	r3, r7, r1
 8004304:	0592      	lsls	r2, r2, #22
 8004306:	0d92      	lsrs	r2, r2, #22
 8004308:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	187b      	adds	r3, r7, r1
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d907      	bls.n	8004326 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	187b      	adds	r3, r7, r1
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	1ad2      	subs	r2, r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	619a      	str	r2, [r3, #24]
 8004324:	e002      	b.n	800432c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2200      	movs	r2, #0
 800432a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d000      	beq.n	8004336 <HAL_PCD_EP_DB_Transmit+0x72>
 8004334:	e0da      	b.n	80044ec <HAL_PCD_EP_DB_Transmit+0x228>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	785b      	ldrb	r3, [r3, #1]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d125      	bne.n	800438a <HAL_PCD_EP_DB_Transmit+0xc6>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	633b      	str	r3, [r7, #48]	@ 0x30
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2250      	movs	r2, #80	@ 0x50
 800434a:	5a9b      	ldrh	r3, [r3, r2]
 800434c:	b29b      	uxth	r3, r3
 800434e:	001a      	movs	r2, r3
 8004350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004352:	189b      	adds	r3, r3, r2
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	00da      	lsls	r2, r3, #3
 800435c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435e:	18d3      	adds	r3, r2, r3
 8004360:	4ab4      	ldr	r2, [pc, #720]	@ (8004634 <HAL_PCD_EP_DB_Transmit+0x370>)
 8004362:	4694      	mov	ip, r2
 8004364:	4463      	add	r3, ip
 8004366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	059b      	lsls	r3, r3, #22
 8004370:	0d9b      	lsrs	r3, r3, #22
 8004372:	b29a      	uxth	r2, r3
 8004374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004376:	801a      	strh	r2, [r3, #0]
 8004378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b29b      	uxth	r3, r3
 800437e:	4aae      	ldr	r2, [pc, #696]	@ (8004638 <HAL_PCD_EP_DB_Transmit+0x374>)
 8004380:	4313      	orrs	r3, r2
 8004382:	b29a      	uxth	r2, r3
 8004384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	e01b      	b.n	80043c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	785b      	ldrb	r3, [r3, #1]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d117      	bne.n	80043c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2250      	movs	r2, #80	@ 0x50
 800439e:	5a9b      	ldrh	r3, [r3, r2]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	001a      	movs	r2, r3
 80043a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a6:	189b      	adds	r3, r3, r2
 80043a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	00da      	lsls	r2, r3, #3
 80043b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b2:	18d3      	adds	r3, r2, r3
 80043b4:	4a9f      	ldr	r2, [pc, #636]	@ (8004634 <HAL_PCD_EP_DB_Transmit+0x370>)
 80043b6:	4694      	mov	ip, r2
 80043b8:	4463      	add	r3, ip
 80043ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80043bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043be:	2200      	movs	r2, #0
 80043c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	785b      	ldrb	r3, [r3, #1]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d125      	bne.n	800441c <HAL_PCD_EP_DB_Transmit+0x158>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	623b      	str	r3, [r7, #32]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2250      	movs	r2, #80	@ 0x50
 80043dc:	5a9b      	ldrh	r3, [r3, r2]
 80043de:	b29b      	uxth	r3, r3
 80043e0:	001a      	movs	r2, r3
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	189b      	adds	r3, r3, r2
 80043e6:	623b      	str	r3, [r7, #32]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	00da      	lsls	r2, r3, #3
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	18d3      	adds	r3, r2, r3
 80043f2:	4a92      	ldr	r2, [pc, #584]	@ (800463c <HAL_PCD_EP_DB_Transmit+0x378>)
 80043f4:	4694      	mov	ip, r2
 80043f6:	4463      	add	r3, ip
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	059b      	lsls	r3, r3, #22
 8004402:	0d9b      	lsrs	r3, r3, #22
 8004404:	b29a      	uxth	r2, r3
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	801a      	strh	r2, [r3, #0]
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	4a89      	ldr	r2, [pc, #548]	@ (8004638 <HAL_PCD_EP_DB_Transmit+0x374>)
 8004412:	4313      	orrs	r3, r2
 8004414:	b29a      	uxth	r2, r3
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	e018      	b.n	800444e <HAL_PCD_EP_DB_Transmit+0x18a>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	785b      	ldrb	r3, [r3, #1]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d114      	bne.n	800444e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2250      	movs	r2, #80	@ 0x50
 800442a:	5a9b      	ldrh	r3, [r3, r2]
 800442c:	b29b      	uxth	r3, r3
 800442e:	001a      	movs	r2, r3
 8004430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004432:	189b      	adds	r3, r3, r2
 8004434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	00da      	lsls	r2, r3, #3
 800443c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443e:	18d3      	adds	r3, r2, r3
 8004440:	4a7e      	ldr	r2, [pc, #504]	@ (800463c <HAL_PCD_EP_DB_Transmit+0x378>)
 8004442:	4694      	mov	ip, r2
 8004444:	4463      	add	r3, ip
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
 8004448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444a:	2200      	movs	r2, #0
 800444c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	78db      	ldrb	r3, [r3, #3]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d120      	bne.n	8004498 <HAL_PCD_EP_DB_Transmit+0x1d4>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	001a      	movs	r2, r3
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	18d3      	adds	r3, r2, r3
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29a      	uxth	r2, r3
 8004468:	201a      	movs	r0, #26
 800446a:	183b      	adds	r3, r7, r0
 800446c:	4974      	ldr	r1, [pc, #464]	@ (8004640 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800446e:	400a      	ands	r2, r1
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	183b      	adds	r3, r7, r0
 8004474:	183a      	adds	r2, r7, r0
 8004476:	8812      	ldrh	r2, [r2, #0]
 8004478:	2120      	movs	r1, #32
 800447a:	404a      	eors	r2, r1
 800447c:	801a      	strh	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	001a      	movs	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	18d3      	adds	r3, r2, r3
 800448c:	183a      	adds	r2, r7, r0
 800448e:	8812      	ldrh	r2, [r2, #0]
 8004490:	496c      	ldr	r1, [pc, #432]	@ (8004644 <HAL_PCD_EP_DB_Transmit+0x380>)
 8004492:	430a      	orrs	r2, r1
 8004494:	b292      	uxth	r2, r2
 8004496:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	781a      	ldrb	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	0011      	movs	r1, r2
 80044a0:	0018      	movs	r0, r3
 80044a2:	f004 fed1 	bl	8009248 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044a6:	1dbb      	adds	r3, r7, #6
 80044a8:	881a      	ldrh	r2, [r3, #0]
 80044aa:	2380      	movs	r3, #128	@ 0x80
 80044ac:	01db      	lsls	r3, r3, #7
 80044ae:	4013      	ands	r3, r2
 80044b0:	d01a      	beq.n	80044e8 <HAL_PCD_EP_DB_Transmit+0x224>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	001a      	movs	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	18d3      	adds	r3, r2, r3
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	2018      	movs	r0, #24
 80044c6:	183b      	adds	r3, r7, r0
 80044c8:	495f      	ldr	r1, [pc, #380]	@ (8004648 <HAL_PCD_EP_DB_Transmit+0x384>)
 80044ca:	400a      	ands	r2, r1
 80044cc:	801a      	strh	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	001a      	movs	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	18d3      	adds	r3, r2, r3
 80044dc:	183a      	adds	r2, r7, r0
 80044de:	8812      	ldrh	r2, [r2, #0]
 80044e0:	495a      	ldr	r1, [pc, #360]	@ (800464c <HAL_PCD_EP_DB_Transmit+0x388>)
 80044e2:	430a      	orrs	r2, r1
 80044e4:	b292      	uxth	r2, r2
 80044e6:	801a      	strh	r2, [r3, #0]
      }

      return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e327      	b.n	8004b3c <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044ec:	1dbb      	adds	r3, r7, #6
 80044ee:	881a      	ldrh	r2, [r3, #0]
 80044f0:	2380      	movs	r3, #128	@ 0x80
 80044f2:	01db      	lsls	r3, r3, #7
 80044f4:	4013      	ands	r3, r2
 80044f6:	d01a      	beq.n	800452e <HAL_PCD_EP_DB_Transmit+0x26a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	001a      	movs	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	18d3      	adds	r3, r2, r3
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29a      	uxth	r2, r3
 800450a:	204e      	movs	r0, #78	@ 0x4e
 800450c:	183b      	adds	r3, r7, r0
 800450e:	494e      	ldr	r1, [pc, #312]	@ (8004648 <HAL_PCD_EP_DB_Transmit+0x384>)
 8004510:	400a      	ands	r2, r1
 8004512:	801a      	strh	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	001a      	movs	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	18d3      	adds	r3, r2, r3
 8004522:	183a      	adds	r2, r7, r0
 8004524:	8812      	ldrh	r2, [r2, #0]
 8004526:	4949      	ldr	r1, [pc, #292]	@ (800464c <HAL_PCD_EP_DB_Transmit+0x388>)
 8004528:	430a      	orrs	r2, r1
 800452a:	b292      	uxth	r2, r2
 800452c:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2224      	movs	r2, #36	@ 0x24
 8004532:	5c9b      	ldrb	r3, [r3, r2]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d000      	beq.n	800453a <HAL_PCD_EP_DB_Transmit+0x276>
 8004538:	e2d8      	b.n	8004aec <HAL_PCD_EP_DB_Transmit+0x828>
      {
        ep->xfer_buff += TxPctSize;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	2196      	movs	r1, #150	@ 0x96
 8004540:	187b      	adds	r3, r7, r1
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	18d2      	adds	r2, r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	187b      	adds	r3, r7, r1
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	18d2      	adds	r2, r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	6a1a      	ldr	r2, [r3, #32]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	429a      	cmp	r2, r3
 8004562:	d309      	bcc.n	8004578 <HAL_PCD_EP_DB_Transmit+0x2b4>
        {
          len = ep->maxpacket;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6a1a      	ldr	r2, [r3, #32]
 800456e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004570:	1ad2      	subs	r2, r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	621a      	str	r2, [r3, #32]
 8004576:	e016      	b.n	80045a6 <HAL_PCD_EP_DB_Transmit+0x2e2>
        }
        else if (ep->xfer_len_db == 0U)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d108      	bne.n	8004592 <HAL_PCD_EP_DB_Transmit+0x2ce>
        {
          len = TxPctSize;
 8004580:	2396      	movs	r3, #150	@ 0x96
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2224      	movs	r2, #36	@ 0x24
 800458c:	2100      	movs	r1, #0
 800458e:	5499      	strb	r1, [r3, r2]
 8004590:	e009      	b.n	80045a6 <HAL_PCD_EP_DB_Transmit+0x2e2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2224      	movs	r2, #36	@ 0x24
 8004596:	2100      	movs	r1, #0
 8004598:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2200      	movs	r2, #0
 80045a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	785b      	ldrb	r3, [r3, #1]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d169      	bne.n	8004682 <HAL_PCD_EP_DB_Transmit+0x3be>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2250      	movs	r2, #80	@ 0x50
 80045ba:	5a9b      	ldrh	r3, [r3, r2]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	001a      	movs	r2, r3
 80045c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045c2:	189b      	adds	r3, r3, r2
 80045c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	00da      	lsls	r2, r3, #3
 80045cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045ce:	18d3      	adds	r3, r2, r3
 80045d0:	4a18      	ldr	r2, [pc, #96]	@ (8004634 <HAL_PCD_EP_DB_Transmit+0x370>)
 80045d2:	4694      	mov	ip, r2
 80045d4:	4463      	add	r3, ip
 80045d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	059b      	lsls	r3, r3, #22
 80045e0:	0d9b      	lsrs	r3, r3, #22
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e6:	801a      	strh	r2, [r3, #0]
 80045e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d108      	bne.n	8004600 <HAL_PCD_EP_DB_Transmit+0x33c>
 80045ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	4a10      	ldr	r2, [pc, #64]	@ (8004638 <HAL_PCD_EP_DB_Transmit+0x374>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045fc:	801a      	strh	r2, [r3, #0]
 80045fe:	e05d      	b.n	80046bc <HAL_PCD_EP_DB_Transmit+0x3f8>
 8004600:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004602:	2b3e      	cmp	r3, #62	@ 0x3e
 8004604:	d824      	bhi.n	8004650 <HAL_PCD_EP_DB_Transmit+0x38c>
 8004606:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004608:	085b      	lsrs	r3, r3, #1
 800460a:	653b      	str	r3, [r7, #80]	@ 0x50
 800460c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800460e:	2201      	movs	r2, #1
 8004610:	4013      	ands	r3, r2
 8004612:	d002      	beq.n	800461a <HAL_PCD_EP_DB_Transmit+0x356>
 8004614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004616:	3301      	adds	r3, #1
 8004618:	653b      	str	r3, [r7, #80]	@ 0x50
 800461a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	b29a      	uxth	r2, r3
 8004620:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004622:	b29b      	uxth	r3, r3
 8004624:	029b      	lsls	r3, r3, #10
 8004626:	b29b      	uxth	r3, r3
 8004628:	4313      	orrs	r3, r2
 800462a:	b29a      	uxth	r2, r3
 800462c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462e:	801a      	strh	r2, [r3, #0]
 8004630:	e044      	b.n	80046bc <HAL_PCD_EP_DB_Transmit+0x3f8>
 8004632:	46c0      	nop			@ (mov r8, r8)
 8004634:	00000402 	.word	0x00000402
 8004638:	ffff8000 	.word	0xffff8000
 800463c:	00000406 	.word	0x00000406
 8004640:	ffff8fbf 	.word	0xffff8fbf
 8004644:	ffff8080 	.word	0xffff8080
 8004648:	ffff8f8f 	.word	0xffff8f8f
 800464c:	ffffc080 	.word	0xffffc080
 8004650:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	653b      	str	r3, [r7, #80]	@ 0x50
 8004656:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004658:	221f      	movs	r2, #31
 800465a:	4013      	ands	r3, r2
 800465c:	d102      	bne.n	8004664 <HAL_PCD_EP_DB_Transmit+0x3a0>
 800465e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004660:	3b01      	subs	r3, #1
 8004662:	653b      	str	r3, [r7, #80]	@ 0x50
 8004664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29a      	uxth	r2, r3
 800466a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800466c:	b29b      	uxth	r3, r3
 800466e:	029b      	lsls	r3, r3, #10
 8004670:	b29b      	uxth	r3, r3
 8004672:	4313      	orrs	r3, r2
 8004674:	b29b      	uxth	r3, r3
 8004676:	4ace      	ldr	r2, [pc, #824]	@ (80049b0 <HAL_PCD_EP_DB_Transmit+0x6ec>)
 8004678:	4313      	orrs	r3, r2
 800467a:	b29a      	uxth	r2, r3
 800467c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800467e:	801a      	strh	r2, [r3, #0]
 8004680:	e01c      	b.n	80046bc <HAL_PCD_EP_DB_Transmit+0x3f8>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	785b      	ldrb	r3, [r3, #1]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d118      	bne.n	80046bc <HAL_PCD_EP_DB_Transmit+0x3f8>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2250      	movs	r2, #80	@ 0x50
 8004696:	5a9b      	ldrh	r3, [r3, r2]
 8004698:	b29b      	uxth	r3, r3
 800469a:	001a      	movs	r2, r3
 800469c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	00da      	lsls	r2, r3, #3
 80046a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046aa:	18d3      	adds	r3, r2, r3
 80046ac:	4ac1      	ldr	r2, [pc, #772]	@ (80049b4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80046ae:	4694      	mov	ip, r2
 80046b0:	4463      	add	r3, ip
 80046b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80046b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ba:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	6959      	ldr	r1, [r3, #20]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	891a      	ldrh	r2, [r3, #8]
 80046c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	f002 ffe6 	bl	800769c <USB_WritePMA>
 80046d0:	e20c      	b.n	8004aec <HAL_PCD_EP_DB_Transmit+0x828>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2250      	movs	r2, #80	@ 0x50
 80046d8:	5a9b      	ldrh	r3, [r3, r2]
 80046da:	b29b      	uxth	r3, r3
 80046dc:	001a      	movs	r2, r3
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	18d2      	adds	r2, r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	18d3      	adds	r3, r2, r3
 80046ec:	4ab2      	ldr	r2, [pc, #712]	@ (80049b8 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80046ee:	4694      	mov	ip, r2
 80046f0:	4463      	add	r3, ip
 80046f2:	881a      	ldrh	r2, [r3, #0]
 80046f4:	2196      	movs	r1, #150	@ 0x96
 80046f6:	187b      	adds	r3, r7, r1
 80046f8:	0592      	lsls	r2, r2, #22
 80046fa:	0d92      	lsrs	r2, r2, #22
 80046fc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	187b      	adds	r3, r7, r1
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	429a      	cmp	r2, r3
 8004708:	d307      	bcc.n	800471a <HAL_PCD_EP_DB_Transmit+0x456>
    {
      ep->xfer_len -= TxPctSize;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	699a      	ldr	r2, [r3, #24]
 800470e:	187b      	adds	r3, r7, r1
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	1ad2      	subs	r2, r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	619a      	str	r2, [r3, #24]
 8004718:	e002      	b.n	8004720 <HAL_PCD_EP_DB_Transmit+0x45c>
    }
    else
    {
      ep->xfer_len = 0U;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2200      	movs	r2, #0
 800471e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d000      	beq.n	800472a <HAL_PCD_EP_DB_Transmit+0x466>
 8004728:	e0ee      	b.n	8004908 <HAL_PCD_EP_DB_Transmit+0x644>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d125      	bne.n	800477e <HAL_PCD_EP_DB_Transmit+0x4ba>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	677b      	str	r3, [r7, #116]	@ 0x74
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2250      	movs	r2, #80	@ 0x50
 800473e:	5a9b      	ldrh	r3, [r3, r2]
 8004740:	b29b      	uxth	r3, r3
 8004742:	001a      	movs	r2, r3
 8004744:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004746:	189b      	adds	r3, r3, r2
 8004748:	677b      	str	r3, [r7, #116]	@ 0x74
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	00da      	lsls	r2, r3, #3
 8004750:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004752:	18d3      	adds	r3, r2, r3
 8004754:	4a97      	ldr	r2, [pc, #604]	@ (80049b4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004756:	4694      	mov	ip, r2
 8004758:	4463      	add	r3, ip
 800475a:	673b      	str	r3, [r7, #112]	@ 0x70
 800475c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	059b      	lsls	r3, r3, #22
 8004764:	0d9b      	lsrs	r3, r3, #22
 8004766:	b29a      	uxth	r2, r3
 8004768:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800476a:	801a      	strh	r2, [r3, #0]
 800476c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	4a8f      	ldr	r2, [pc, #572]	@ (80049b0 <HAL_PCD_EP_DB_Transmit+0x6ec>)
 8004774:	4313      	orrs	r3, r2
 8004776:	b29a      	uxth	r2, r3
 8004778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800477a:	801a      	strh	r2, [r3, #0]
 800477c:	e01b      	b.n	80047b6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	785b      	ldrb	r3, [r3, #1]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d117      	bne.n	80047b6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2250      	movs	r2, #80	@ 0x50
 8004792:	5a9b      	ldrh	r3, [r3, r2]
 8004794:	b29b      	uxth	r3, r3
 8004796:	001a      	movs	r2, r3
 8004798:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800479a:	189b      	adds	r3, r3, r2
 800479c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	00da      	lsls	r2, r3, #3
 80047a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80047a6:	18d3      	adds	r3, r2, r3
 80047a8:	4a82      	ldr	r2, [pc, #520]	@ (80049b4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80047aa:	4694      	mov	ip, r2
 80047ac:	4463      	add	r3, ip
 80047ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80047b2:	2200      	movs	r2, #0
 80047b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2284      	movs	r2, #132	@ 0x84
 80047bc:	18ba      	adds	r2, r7, r2
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d130      	bne.n	800482a <HAL_PCD_EP_DB_Transmit+0x566>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	218c      	movs	r1, #140	@ 0x8c
 80047ce:	187a      	adds	r2, r7, r1
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2250      	movs	r2, #80	@ 0x50
 80047d8:	5a9b      	ldrh	r3, [r3, r2]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	001a      	movs	r2, r3
 80047de:	187b      	adds	r3, r7, r1
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	189b      	adds	r3, r3, r2
 80047e4:	187a      	adds	r2, r7, r1
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	00da      	lsls	r2, r3, #3
 80047ee:	187b      	adds	r3, r7, r1
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	18d3      	adds	r3, r2, r3
 80047f4:	4a70      	ldr	r2, [pc, #448]	@ (80049b8 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80047f6:	4694      	mov	ip, r2
 80047f8:	4463      	add	r3, ip
 80047fa:	2188      	movs	r1, #136	@ 0x88
 80047fc:	187a      	adds	r2, r7, r1
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	187b      	adds	r3, r7, r1
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29b      	uxth	r3, r3
 8004808:	059b      	lsls	r3, r3, #22
 800480a:	0d9b      	lsrs	r3, r3, #22
 800480c:	b29a      	uxth	r2, r3
 800480e:	187b      	adds	r3, r7, r1
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	187b      	adds	r3, r7, r1
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	b29b      	uxth	r3, r3
 800481c:	4a64      	ldr	r2, [pc, #400]	@ (80049b0 <HAL_PCD_EP_DB_Transmit+0x6ec>)
 800481e:	4313      	orrs	r3, r2
 8004820:	b29a      	uxth	r2, r3
 8004822:	187b      	adds	r3, r7, r1
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	e01f      	b.n	800486a <HAL_PCD_EP_DB_Transmit+0x5a6>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d11b      	bne.n	800486a <HAL_PCD_EP_DB_Transmit+0x5a6>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2250      	movs	r2, #80	@ 0x50
 8004838:	5a9b      	ldrh	r3, [r3, r2]
 800483a:	b29b      	uxth	r3, r3
 800483c:	001a      	movs	r2, r3
 800483e:	2184      	movs	r1, #132	@ 0x84
 8004840:	187b      	adds	r3, r7, r1
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	189b      	adds	r3, r3, r2
 8004846:	187a      	adds	r2, r7, r1
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	00da      	lsls	r2, r3, #3
 8004850:	187b      	adds	r3, r7, r1
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	18d3      	adds	r3, r2, r3
 8004856:	4a58      	ldr	r2, [pc, #352]	@ (80049b8 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004858:	4694      	mov	ip, r2
 800485a:	4463      	add	r3, ip
 800485c:	2280      	movs	r2, #128	@ 0x80
 800485e:	18b9      	adds	r1, r7, r2
 8004860:	600b      	str	r3, [r1, #0]
 8004862:	18bb      	adds	r3, r7, r2
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2200      	movs	r2, #0
 8004868:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	78db      	ldrb	r3, [r3, #3]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d120      	bne.n	80048b4 <HAL_PCD_EP_DB_Transmit+0x5f0>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	001a      	movs	r2, r3
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	18d3      	adds	r3, r2, r3
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29a      	uxth	r2, r3
 8004884:	2094      	movs	r0, #148	@ 0x94
 8004886:	183b      	adds	r3, r7, r0
 8004888:	494c      	ldr	r1, [pc, #304]	@ (80049bc <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800488a:	400a      	ands	r2, r1
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	183b      	adds	r3, r7, r0
 8004890:	183a      	adds	r2, r7, r0
 8004892:	8812      	ldrh	r2, [r2, #0]
 8004894:	2120      	movs	r1, #32
 8004896:	404a      	eors	r2, r1
 8004898:	801a      	strh	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	001a      	movs	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	18d3      	adds	r3, r2, r3
 80048a8:	183a      	adds	r2, r7, r0
 80048aa:	8812      	ldrh	r2, [r2, #0]
 80048ac:	4944      	ldr	r1, [pc, #272]	@ (80049c0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80048ae:	430a      	orrs	r2, r1
 80048b0:	b292      	uxth	r2, r2
 80048b2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	0011      	movs	r1, r2
 80048bc:	0018      	movs	r0, r3
 80048be:	f004 fcc3 	bl	8009248 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80048c2:	1dbb      	adds	r3, r7, #6
 80048c4:	881a      	ldrh	r2, [r3, #0]
 80048c6:	2380      	movs	r3, #128	@ 0x80
 80048c8:	01db      	lsls	r3, r3, #7
 80048ca:	4013      	ands	r3, r2
 80048cc:	d11a      	bne.n	8004904 <HAL_PCD_EP_DB_Transmit+0x640>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	001a      	movs	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	18d3      	adds	r3, r2, r3
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29a      	uxth	r2, r3
 80048e0:	2092      	movs	r0, #146	@ 0x92
 80048e2:	183b      	adds	r3, r7, r0
 80048e4:	4937      	ldr	r1, [pc, #220]	@ (80049c4 <HAL_PCD_EP_DB_Transmit+0x700>)
 80048e6:	400a      	ands	r2, r1
 80048e8:	801a      	strh	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	001a      	movs	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	18d3      	adds	r3, r2, r3
 80048f8:	183a      	adds	r2, r7, r0
 80048fa:	8812      	ldrh	r2, [r2, #0]
 80048fc:	4932      	ldr	r1, [pc, #200]	@ (80049c8 <HAL_PCD_EP_DB_Transmit+0x704>)
 80048fe:	430a      	orrs	r2, r1
 8004900:	b292      	uxth	r2, r2
 8004902:	801a      	strh	r2, [r3, #0]
      }

      return HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	e119      	b.n	8004b3c <HAL_PCD_EP_DB_Transmit+0x878>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004908:	1dbb      	adds	r3, r7, #6
 800490a:	881a      	ldrh	r2, [r3, #0]
 800490c:	2380      	movs	r3, #128	@ 0x80
 800490e:	01db      	lsls	r3, r3, #7
 8004910:	4013      	ands	r3, r2
 8004912:	d11a      	bne.n	800494a <HAL_PCD_EP_DB_Transmit+0x686>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	001a      	movs	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	18d3      	adds	r3, r2, r3
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29a      	uxth	r2, r3
 8004926:	2056      	movs	r0, #86	@ 0x56
 8004928:	183b      	adds	r3, r7, r0
 800492a:	4926      	ldr	r1, [pc, #152]	@ (80049c4 <HAL_PCD_EP_DB_Transmit+0x700>)
 800492c:	400a      	ands	r2, r1
 800492e:	801a      	strh	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	001a      	movs	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	18d3      	adds	r3, r2, r3
 800493e:	183a      	adds	r2, r7, r0
 8004940:	8812      	ldrh	r2, [r2, #0]
 8004942:	4921      	ldr	r1, [pc, #132]	@ (80049c8 <HAL_PCD_EP_DB_Transmit+0x704>)
 8004944:	430a      	orrs	r2, r1
 8004946:	b292      	uxth	r2, r2
 8004948:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2224      	movs	r2, #36	@ 0x24
 800494e:	5c9b      	ldrb	r3, [r3, r2]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d000      	beq.n	8004956 <HAL_PCD_EP_DB_Transmit+0x692>
 8004954:	e0ca      	b.n	8004aec <HAL_PCD_EP_DB_Transmit+0x828>
      {
        ep->xfer_buff += TxPctSize;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	2196      	movs	r1, #150	@ 0x96
 800495c:	187b      	adds	r3, r7, r1
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	18d2      	adds	r2, r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	187b      	adds	r3, r7, r1
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	18d2      	adds	r2, r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6a1a      	ldr	r2, [r3, #32]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	429a      	cmp	r2, r3
 800497e:	d309      	bcc.n	8004994 <HAL_PCD_EP_DB_Transmit+0x6d0>
        {
          len = ep->maxpacket;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	6a1a      	ldr	r2, [r3, #32]
 800498a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800498c:	1ad2      	subs	r2, r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	621a      	str	r2, [r3, #32]
 8004992:	e025      	b.n	80049e0 <HAL_PCD_EP_DB_Transmit+0x71c>
        }
        else if (ep->xfer_len_db == 0U)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d117      	bne.n	80049cc <HAL_PCD_EP_DB_Transmit+0x708>
        {
          len = TxPctSize;
 800499c:	2396      	movs	r3, #150	@ 0x96
 800499e:	18fb      	adds	r3, r7, r3
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2224      	movs	r2, #36	@ 0x24
 80049a8:	2100      	movs	r1, #0
 80049aa:	5499      	strb	r1, [r3, r2]
 80049ac:	e018      	b.n	80049e0 <HAL_PCD_EP_DB_Transmit+0x71c>
 80049ae:	46c0      	nop			@ (mov r8, r8)
 80049b0:	ffff8000 	.word	0xffff8000
 80049b4:	00000402 	.word	0x00000402
 80049b8:	00000406 	.word	0x00000406
 80049bc:	ffff8fbf 	.word	0xffff8fbf
 80049c0:	ffff8080 	.word	0xffff8080
 80049c4:	ffff8f8f 	.word	0xffff8f8f
 80049c8:	ffffc080 	.word	0xffffc080
        }
        else
        {
          len = ep->xfer_len_db;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2200      	movs	r2, #0
 80049d6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2224      	movs	r2, #36	@ 0x24
 80049dc:	2100      	movs	r1, #0
 80049de:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	785b      	ldrb	r3, [r3, #1]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d15a      	bne.n	8004aa4 <HAL_PCD_EP_DB_Transmit+0x7e0>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2250      	movs	r2, #80	@ 0x50
 80049fa:	5a9b      	ldrh	r3, [r3, r2]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	001a      	movs	r2, r3
 8004a00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a02:	189b      	adds	r3, r3, r2
 8004a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	00da      	lsls	r2, r3, #3
 8004a0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a0e:	18d3      	adds	r3, r2, r3
 8004a10:	4a4c      	ldr	r2, [pc, #304]	@ (8004b44 <HAL_PCD_EP_DB_Transmit+0x880>)
 8004a12:	4694      	mov	ip, r2
 8004a14:	4463      	add	r3, ip
 8004a16:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	059b      	lsls	r3, r3, #22
 8004a20:	0d9b      	lsrs	r3, r3, #22
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d108      	bne.n	8004a40 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004a2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	4a44      	ldr	r2, [pc, #272]	@ (8004b48 <HAL_PCD_EP_DB_Transmit+0x884>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a3c:	801a      	strh	r2, [r3, #0]
 8004a3e:	e04b      	b.n	8004ad8 <HAL_PCD_EP_DB_Transmit+0x814>
 8004a40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a42:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a44:	d815      	bhi.n	8004a72 <HAL_PCD_EP_DB_Transmit+0x7ae>
 8004a46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a4e:	2201      	movs	r2, #1
 8004a50:	4013      	ands	r3, r2
 8004a52:	d002      	beq.n	8004a5a <HAL_PCD_EP_DB_Transmit+0x796>
 8004a54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a56:	3301      	adds	r3, #1
 8004a58:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	029b      	lsls	r3, r3, #10
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a6e:	801a      	strh	r2, [r3, #0]
 8004a70:	e032      	b.n	8004ad8 <HAL_PCD_EP_DB_Transmit+0x814>
 8004a72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a7a:	221f      	movs	r2, #31
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d102      	bne.n	8004a86 <HAL_PCD_EP_DB_Transmit+0x7c2>
 8004a80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a82:	3b01      	subs	r3, #1
 8004a84:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	029b      	lsls	r3, r3, #10
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	4313      	orrs	r3, r2
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	4a2b      	ldr	r2, [pc, #172]	@ (8004b48 <HAL_PCD_EP_DB_Transmit+0x884>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004aa0:	801a      	strh	r2, [r3, #0]
 8004aa2:	e019      	b.n	8004ad8 <HAL_PCD_EP_DB_Transmit+0x814>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d115      	bne.n	8004ad8 <HAL_PCD_EP_DB_Transmit+0x814>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2250      	movs	r2, #80	@ 0x50
 8004ab2:	5a9b      	ldrh	r3, [r3, r2]
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	001a      	movs	r2, r3
 8004ab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aba:	189b      	adds	r3, r3, r2
 8004abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	00da      	lsls	r2, r3, #3
 8004ac4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ac6:	18d3      	adds	r3, r2, r3
 8004ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b44 <HAL_PCD_EP_DB_Transmit+0x880>)
 8004aca:	4694      	mov	ip, r2
 8004acc:	4463      	add	r3, ip
 8004ace:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ad0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ad6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	6959      	ldr	r1, [r3, #20]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	895a      	ldrh	r2, [r3, #10]
 8004ae4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f002 fdd8 	bl	800769c <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	001a      	movs	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	18d3      	adds	r3, r2, r3
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	2016      	movs	r0, #22
 8004b00:	183b      	adds	r3, r7, r0
 8004b02:	4912      	ldr	r1, [pc, #72]	@ (8004b4c <HAL_PCD_EP_DB_Transmit+0x888>)
 8004b04:	400a      	ands	r2, r1
 8004b06:	801a      	strh	r2, [r3, #0]
 8004b08:	183b      	adds	r3, r7, r0
 8004b0a:	183a      	adds	r2, r7, r0
 8004b0c:	8812      	ldrh	r2, [r2, #0]
 8004b0e:	2110      	movs	r1, #16
 8004b10:	404a      	eors	r2, r1
 8004b12:	801a      	strh	r2, [r3, #0]
 8004b14:	183b      	adds	r3, r7, r0
 8004b16:	183a      	adds	r2, r7, r0
 8004b18:	8812      	ldrh	r2, [r2, #0]
 8004b1a:	2120      	movs	r1, #32
 8004b1c:	404a      	eors	r2, r1
 8004b1e:	801a      	strh	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	001a      	movs	r2, r3
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	18d3      	adds	r3, r2, r3
 8004b2e:	183a      	adds	r2, r7, r0
 8004b30:	8812      	ldrh	r2, [r2, #0]
 8004b32:	4907      	ldr	r1, [pc, #28]	@ (8004b50 <HAL_PCD_EP_DB_Transmit+0x88c>)
 8004b34:	430a      	orrs	r2, r1
 8004b36:	b292      	uxth	r2, r2
 8004b38:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b026      	add	sp, #152	@ 0x98
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	00000406 	.word	0x00000406
 8004b48:	ffff8000 	.word	0xffff8000
 8004b4c:	ffff8fbf 	.word	0xffff8fbf
 8004b50:	ffff8080 	.word	0xffff8080

08004b54 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004b54:	b590      	push	{r4, r7, lr}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	0008      	movs	r0, r1
 8004b5e:	0011      	movs	r1, r2
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	240a      	movs	r4, #10
 8004b64:	193b      	adds	r3, r7, r4
 8004b66:	1c02      	adds	r2, r0, #0
 8004b68:	801a      	strh	r2, [r3, #0]
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	18fb      	adds	r3, r7, r3
 8004b6e:	1c0a      	adds	r2, r1, #0
 8004b70:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004b72:	0021      	movs	r1, r4
 8004b74:	187b      	adds	r3, r7, r1
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	2280      	movs	r2, #128	@ 0x80
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00c      	beq.n	8004b9c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b82:	187b      	adds	r3, r7, r1
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	2207      	movs	r2, #7
 8004b88:	401a      	ands	r2, r3
 8004b8a:	0013      	movs	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	189b      	adds	r3, r3, r2
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	3310      	adds	r3, #16
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	18d3      	adds	r3, r2, r3
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	e00b      	b.n	8004bb4 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b9c:	230a      	movs	r3, #10
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	881a      	ldrh	r2, [r3, #0]
 8004ba2:	0013      	movs	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	189b      	adds	r3, r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	3351      	adds	r3, #81	@ 0x51
 8004bac:	33ff      	adds	r3, #255	@ 0xff
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	18d3      	adds	r3, r2, r3
 8004bb2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004bb4:	2308      	movs	r3, #8
 8004bb6:	18fb      	adds	r3, r7, r3
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d107      	bne.n	8004bce <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	80da      	strh	r2, [r3, #6]
 8004bcc:	e00b      	b.n	8004be6 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	0c1b      	lsrs	r3, r3, #16
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	0018      	movs	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	b007      	add	sp, #28
 8004bee:	bd90      	pop	{r4, r7, pc}

08004bf0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	23b4      	movs	r3, #180	@ 0xb4
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	2101      	movs	r1, #1
 8004c06:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	23b2      	movs	r3, #178	@ 0xb2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	2100      	movs	r1, #0
 8004c10:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2254      	movs	r2, #84	@ 0x54
 8004c16:	5a9b      	ldrh	r3, [r3, r2]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	b299      	uxth	r1, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2254      	movs	r2, #84	@ 0x54
 8004c24:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2254      	movs	r2, #84	@ 0x54
 8004c2a:	5a9b      	ldrh	r3, [r3, r2]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2202      	movs	r2, #2
 8004c30:	4313      	orrs	r3, r2
 8004c32:	b299      	uxth	r1, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2254      	movs	r2, #84	@ 0x54
 8004c38:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b004      	add	sp, #16
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	000a      	movs	r2, r1
 8004c4e:	1cfb      	adds	r3, r7, #3
 8004c50:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c52:	46c0      	nop			@ (mov r8, r8)
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b002      	add	sp, #8
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c5c:	b5b0      	push	{r4, r5, r7, lr}
 8004c5e:	b08a      	sub	sp, #40	@ 0x28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f000 fbaf 	bl	80053ce <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c70:	4bcf      	ldr	r3, [pc, #828]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	220c      	movs	r2, #12
 8004c76:	4013      	ands	r3, r2
 8004c78:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c7a:	4bcd      	ldr	r3, [pc, #820]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	2380      	movs	r3, #128	@ 0x80
 8004c80:	025b      	lsls	r3, r3, #9
 8004c82:	4013      	ands	r3, r2
 8004c84:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d100      	bne.n	8004c92 <HAL_RCC_OscConfig+0x36>
 8004c90:	e07e      	b.n	8004d90 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d007      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	2b0c      	cmp	r3, #12
 8004c9c:	d112      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x68>
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	2380      	movs	r3, #128	@ 0x80
 8004ca2:	025b      	lsls	r3, r3, #9
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d10d      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	4bc1      	ldr	r3, [pc, #772]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	2380      	movs	r3, #128	@ 0x80
 8004cae:	029b      	lsls	r3, r3, #10
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d100      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x5a>
 8004cb4:	e06b      	b.n	8004d8e <HAL_RCC_OscConfig+0x132>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d167      	bne.n	8004d8e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f000 fb85 	bl	80053ce <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	2380      	movs	r3, #128	@ 0x80
 8004cca:	025b      	lsls	r3, r3, #9
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d107      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x84>
 8004cd0:	4bb7      	ldr	r3, [pc, #732]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	4bb6      	ldr	r3, [pc, #728]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004cd6:	2180      	movs	r1, #128	@ 0x80
 8004cd8:	0249      	lsls	r1, r1, #9
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	e027      	b.n	8004d30 <HAL_RCC_OscConfig+0xd4>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	23a0      	movs	r3, #160	@ 0xa0
 8004ce6:	02db      	lsls	r3, r3, #11
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d10e      	bne.n	8004d0a <HAL_RCC_OscConfig+0xae>
 8004cec:	4bb0      	ldr	r3, [pc, #704]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	4baf      	ldr	r3, [pc, #700]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004cf2:	2180      	movs	r1, #128	@ 0x80
 8004cf4:	02c9      	lsls	r1, r1, #11
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	4bad      	ldr	r3, [pc, #692]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4bac      	ldr	r3, [pc, #688]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004d00:	2180      	movs	r1, #128	@ 0x80
 8004d02:	0249      	lsls	r1, r1, #9
 8004d04:	430a      	orrs	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	e012      	b.n	8004d30 <HAL_RCC_OscConfig+0xd4>
 8004d0a:	4ba9      	ldr	r3, [pc, #676]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4ba8      	ldr	r3, [pc, #672]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004d10:	49a8      	ldr	r1, [pc, #672]	@ (8004fb4 <HAL_RCC_OscConfig+0x358>)
 8004d12:	400a      	ands	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	4ba6      	ldr	r3, [pc, #664]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	2380      	movs	r3, #128	@ 0x80
 8004d1c:	025b      	lsls	r3, r3, #9
 8004d1e:	4013      	ands	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4ba2      	ldr	r3, [pc, #648]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4ba1      	ldr	r3, [pc, #644]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004d2a:	49a3      	ldr	r1, [pc, #652]	@ (8004fb8 <HAL_RCC_OscConfig+0x35c>)
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d015      	beq.n	8004d64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d38:	f7fd f83e 	bl	8001db8 <HAL_GetTick>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d40:	e009      	b.n	8004d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d42:	f7fd f839 	bl	8001db8 <HAL_GetTick>
 8004d46:	0002      	movs	r2, r0
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b64      	cmp	r3, #100	@ 0x64
 8004d4e:	d902      	bls.n	8004d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	f000 fb3c 	bl	80053ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d56:	4b96      	ldr	r3, [pc, #600]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	2380      	movs	r3, #128	@ 0x80
 8004d5c:	029b      	lsls	r3, r3, #10
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d0ef      	beq.n	8004d42 <HAL_RCC_OscConfig+0xe6>
 8004d62:	e015      	b.n	8004d90 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d64:	f7fd f828 	bl	8001db8 <HAL_GetTick>
 8004d68:	0003      	movs	r3, r0
 8004d6a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d6e:	f7fd f823 	bl	8001db8 <HAL_GetTick>
 8004d72:	0002      	movs	r2, r0
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b64      	cmp	r3, #100	@ 0x64
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e326      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004d80:	4b8b      	ldr	r3, [pc, #556]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	2380      	movs	r3, #128	@ 0x80
 8004d86:	029b      	lsls	r3, r3, #10
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d1f0      	bne.n	8004d6e <HAL_RCC_OscConfig+0x112>
 8004d8c:	e000      	b.n	8004d90 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d8e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2202      	movs	r2, #2
 8004d96:	4013      	ands	r3, r2
 8004d98:	d100      	bne.n	8004d9c <HAL_RCC_OscConfig+0x140>
 8004d9a:	e08b      	b.n	8004eb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	2b0c      	cmp	r3, #12
 8004dac:	d13e      	bne.n	8004e2c <HAL_RCC_OscConfig+0x1d0>
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d13b      	bne.n	8004e2c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004db4:	4b7e      	ldr	r3, [pc, #504]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2204      	movs	r2, #4
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x16c>
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e302      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc8:	4b79      	ldr	r3, [pc, #484]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	4a7b      	ldr	r2, [pc, #492]	@ (8004fbc <HAL_RCC_OscConfig+0x360>)
 8004dce:	4013      	ands	r3, r2
 8004dd0:	0019      	movs	r1, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	021a      	lsls	r2, r3, #8
 8004dd8:	4b75      	ldr	r3, [pc, #468]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004dde:	4b74      	ldr	r3, [pc, #464]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2209      	movs	r2, #9
 8004de4:	4393      	bics	r3, r2
 8004de6:	0019      	movs	r1, r3
 8004de8:	4b71      	ldr	r3, [pc, #452]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004df0:	f000 fc40 	bl	8005674 <HAL_RCC_GetSysClockFreq>
 8004df4:	0001      	movs	r1, r0
 8004df6:	4b6e      	ldr	r3, [pc, #440]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	091b      	lsrs	r3, r3, #4
 8004dfc:	220f      	movs	r2, #15
 8004dfe:	4013      	ands	r3, r2
 8004e00:	4a6f      	ldr	r2, [pc, #444]	@ (8004fc0 <HAL_RCC_OscConfig+0x364>)
 8004e02:	5cd3      	ldrb	r3, [r2, r3]
 8004e04:	000a      	movs	r2, r1
 8004e06:	40da      	lsrs	r2, r3
 8004e08:	4b6e      	ldr	r3, [pc, #440]	@ (8004fc4 <HAL_RCC_OscConfig+0x368>)
 8004e0a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004e0c:	4b6e      	ldr	r3, [pc, #440]	@ (8004fc8 <HAL_RCC_OscConfig+0x36c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2513      	movs	r5, #19
 8004e12:	197c      	adds	r4, r7, r5
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7fc ff89 	bl	8001d2c <HAL_InitTick>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004e1e:	197b      	adds	r3, r7, r5
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d046      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8004e26:	197b      	adds	r3, r7, r5
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	e2d0      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d027      	beq.n	8004e82 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004e32:	4b5f      	ldr	r3, [pc, #380]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2209      	movs	r2, #9
 8004e38:	4393      	bics	r3, r2
 8004e3a:	0019      	movs	r1, r3
 8004e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e44:	f7fc ffb8 	bl	8001db8 <HAL_GetTick>
 8004e48:	0003      	movs	r3, r0
 8004e4a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4e:	f7fc ffb3 	bl	8001db8 <HAL_GetTick>
 8004e52:	0002      	movs	r2, r0
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e2b6      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e60:	4b53      	ldr	r3, [pc, #332]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2204      	movs	r2, #4
 8004e66:	4013      	ands	r3, r2
 8004e68:	d0f1      	beq.n	8004e4e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6a:	4b51      	ldr	r3, [pc, #324]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	4a53      	ldr	r2, [pc, #332]	@ (8004fbc <HAL_RCC_OscConfig+0x360>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	0019      	movs	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	021a      	lsls	r2, r3, #8
 8004e7a:	4b4d      	ldr	r3, [pc, #308]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	605a      	str	r2, [r3, #4]
 8004e80:	e018      	b.n	8004eb4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e82:	4b4b      	ldr	r3, [pc, #300]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	4b4a      	ldr	r3, [pc, #296]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004e88:	2101      	movs	r1, #1
 8004e8a:	438a      	bics	r2, r1
 8004e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8e:	f7fc ff93 	bl	8001db8 <HAL_GetTick>
 8004e92:	0003      	movs	r3, r0
 8004e94:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e98:	f7fc ff8e 	bl	8001db8 <HAL_GetTick>
 8004e9c:	0002      	movs	r2, r0
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e291      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004eaa:	4b41      	ldr	r3, [pc, #260]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2204      	movs	r2, #4
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d1f1      	bne.n	8004e98 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2210      	movs	r2, #16
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d100      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x264>
 8004ebe:	e0a1      	b.n	8005004 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d140      	bne.n	8004f48 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	2380      	movs	r3, #128	@ 0x80
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d005      	beq.n	8004ede <HAL_RCC_OscConfig+0x282>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e277      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ede:	4b34      	ldr	r3, [pc, #208]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4a3a      	ldr	r2, [pc, #232]	@ (8004fcc <HAL_RCC_OscConfig+0x370>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004eec:	4b30      	ldr	r3, [pc, #192]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	021b      	lsls	r3, r3, #8
 8004ef8:	0a19      	lsrs	r1, r3, #8
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	061a      	lsls	r2, r3, #24
 8004f00:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	0b5b      	lsrs	r3, r3, #13
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	2280      	movs	r2, #128	@ 0x80
 8004f10:	0212      	lsls	r2, r2, #8
 8004f12:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004f14:	4b26      	ldr	r3, [pc, #152]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	210f      	movs	r1, #15
 8004f1c:	400b      	ands	r3, r1
 8004f1e:	4928      	ldr	r1, [pc, #160]	@ (8004fc0 <HAL_RCC_OscConfig+0x364>)
 8004f20:	5ccb      	ldrb	r3, [r1, r3]
 8004f22:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004f24:	4b27      	ldr	r3, [pc, #156]	@ (8004fc4 <HAL_RCC_OscConfig+0x368>)
 8004f26:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004f28:	4b27      	ldr	r3, [pc, #156]	@ (8004fc8 <HAL_RCC_OscConfig+0x36c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2513      	movs	r5, #19
 8004f2e:	197c      	adds	r4, r7, r5
 8004f30:	0018      	movs	r0, r3
 8004f32:	f7fc fefb 	bl	8001d2c <HAL_InitTick>
 8004f36:	0003      	movs	r3, r0
 8004f38:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004f3a:	197b      	adds	r3, r7, r5
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d060      	beq.n	8005004 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8004f42:	197b      	adds	r3, r7, r5
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	e242      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d03f      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f50:	4b17      	ldr	r3, [pc, #92]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	4b16      	ldr	r3, [pc, #88]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004f56:	2180      	movs	r1, #128	@ 0x80
 8004f58:	0049      	lsls	r1, r1, #1
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5e:	f7fc ff2b 	bl	8001db8 <HAL_GetTick>
 8004f62:	0003      	movs	r3, r0
 8004f64:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f68:	f7fc ff26 	bl	8001db8 <HAL_GetTick>
 8004f6c:	0002      	movs	r2, r0
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e229      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	2380      	movs	r3, #128	@ 0x80
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4013      	ands	r3, r2
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f86:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4a10      	ldr	r2, [pc, #64]	@ (8004fcc <HAL_RCC_OscConfig+0x370>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	0019      	movs	r1, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f94:	4b06      	ldr	r3, [pc, #24]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f9a:	4b05      	ldr	r3, [pc, #20]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	0a19      	lsrs	r1, r3, #8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	061a      	lsls	r2, r3, #24
 8004fa8:	4b01      	ldr	r3, [pc, #4]	@ (8004fb0 <HAL_RCC_OscConfig+0x354>)
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	e029      	b.n	8005004 <HAL_RCC_OscConfig+0x3a8>
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	fffeffff 	.word	0xfffeffff
 8004fb8:	fffbffff 	.word	0xfffbffff
 8004fbc:	ffffe0ff 	.word	0xffffe0ff
 8004fc0:	08009964 	.word	0x08009964
 8004fc4:	20000000 	.word	0x20000000
 8004fc8:	20000004 	.word	0x20000004
 8004fcc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fd0:	4bbd      	ldr	r3, [pc, #756]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4bbc      	ldr	r3, [pc, #752]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8004fd6:	49bd      	ldr	r1, [pc, #756]	@ (80052cc <HAL_RCC_OscConfig+0x670>)
 8004fd8:	400a      	ands	r2, r1
 8004fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fdc:	f7fc feec 	bl	8001db8 <HAL_GetTick>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fe6:	f7fc fee7 	bl	8001db8 <HAL_GetTick>
 8004fea:	0002      	movs	r2, r0
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e1ea      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ff8:	4bb3      	ldr	r3, [pc, #716]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	2380      	movs	r3, #128	@ 0x80
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4013      	ands	r3, r2
 8005002:	d1f0      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2208      	movs	r2, #8
 800500a:	4013      	ands	r3, r2
 800500c:	d036      	beq.n	800507c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d019      	beq.n	800504a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005016:	4bac      	ldr	r3, [pc, #688]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005018:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800501a:	4bab      	ldr	r3, [pc, #684]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 800501c:	2101      	movs	r1, #1
 800501e:	430a      	orrs	r2, r1
 8005020:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005022:	f7fc fec9 	bl	8001db8 <HAL_GetTick>
 8005026:	0003      	movs	r3, r0
 8005028:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800502c:	f7fc fec4 	bl	8001db8 <HAL_GetTick>
 8005030:	0002      	movs	r2, r0
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e1c7      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800503e:	4ba2      	ldr	r3, [pc, #648]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005042:	2202      	movs	r2, #2
 8005044:	4013      	ands	r3, r2
 8005046:	d0f1      	beq.n	800502c <HAL_RCC_OscConfig+0x3d0>
 8005048:	e018      	b.n	800507c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800504a:	4b9f      	ldr	r3, [pc, #636]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 800504c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800504e:	4b9e      	ldr	r3, [pc, #632]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005050:	2101      	movs	r1, #1
 8005052:	438a      	bics	r2, r1
 8005054:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005056:	f7fc feaf 	bl	8001db8 <HAL_GetTick>
 800505a:	0003      	movs	r3, r0
 800505c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005060:	f7fc feaa 	bl	8001db8 <HAL_GetTick>
 8005064:	0002      	movs	r2, r0
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e1ad      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005072:	4b95      	ldr	r3, [pc, #596]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005076:	2202      	movs	r2, #2
 8005078:	4013      	ands	r3, r2
 800507a:	d1f1      	bne.n	8005060 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2204      	movs	r2, #4
 8005082:	4013      	ands	r3, r2
 8005084:	d100      	bne.n	8005088 <HAL_RCC_OscConfig+0x42c>
 8005086:	e0ae      	b.n	80051e6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005088:	2027      	movs	r0, #39	@ 0x27
 800508a:	183b      	adds	r3, r7, r0
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005090:	4b8d      	ldr	r3, [pc, #564]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005094:	2380      	movs	r3, #128	@ 0x80
 8005096:	055b      	lsls	r3, r3, #21
 8005098:	4013      	ands	r3, r2
 800509a:	d109      	bne.n	80050b0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800509c:	4b8a      	ldr	r3, [pc, #552]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 800509e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050a0:	4b89      	ldr	r3, [pc, #548]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 80050a2:	2180      	movs	r1, #128	@ 0x80
 80050a4:	0549      	lsls	r1, r1, #21
 80050a6:	430a      	orrs	r2, r1
 80050a8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80050aa:	183b      	adds	r3, r7, r0
 80050ac:	2201      	movs	r2, #1
 80050ae:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b0:	4b87      	ldr	r3, [pc, #540]	@ (80052d0 <HAL_RCC_OscConfig+0x674>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	2380      	movs	r3, #128	@ 0x80
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4013      	ands	r3, r2
 80050ba:	d11a      	bne.n	80050f2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050bc:	4b84      	ldr	r3, [pc, #528]	@ (80052d0 <HAL_RCC_OscConfig+0x674>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	4b83      	ldr	r3, [pc, #524]	@ (80052d0 <HAL_RCC_OscConfig+0x674>)
 80050c2:	2180      	movs	r1, #128	@ 0x80
 80050c4:	0049      	lsls	r1, r1, #1
 80050c6:	430a      	orrs	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ca:	f7fc fe75 	bl	8001db8 <HAL_GetTick>
 80050ce:	0003      	movs	r3, r0
 80050d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d4:	f7fc fe70 	bl	8001db8 <HAL_GetTick>
 80050d8:	0002      	movs	r2, r0
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b64      	cmp	r3, #100	@ 0x64
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e173      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e6:	4b7a      	ldr	r3, [pc, #488]	@ (80052d0 <HAL_RCC_OscConfig+0x674>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	2380      	movs	r3, #128	@ 0x80
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	4013      	ands	r3, r2
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	2380      	movs	r3, #128	@ 0x80
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d107      	bne.n	800510e <HAL_RCC_OscConfig+0x4b2>
 80050fe:	4b72      	ldr	r3, [pc, #456]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005100:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005102:	4b71      	ldr	r3, [pc, #452]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005104:	2180      	movs	r1, #128	@ 0x80
 8005106:	0049      	lsls	r1, r1, #1
 8005108:	430a      	orrs	r2, r1
 800510a:	651a      	str	r2, [r3, #80]	@ 0x50
 800510c:	e031      	b.n	8005172 <HAL_RCC_OscConfig+0x516>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10c      	bne.n	8005130 <HAL_RCC_OscConfig+0x4d4>
 8005116:	4b6c      	ldr	r3, [pc, #432]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005118:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800511a:	4b6b      	ldr	r3, [pc, #428]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 800511c:	496b      	ldr	r1, [pc, #428]	@ (80052cc <HAL_RCC_OscConfig+0x670>)
 800511e:	400a      	ands	r2, r1
 8005120:	651a      	str	r2, [r3, #80]	@ 0x50
 8005122:	4b69      	ldr	r3, [pc, #420]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005126:	4b68      	ldr	r3, [pc, #416]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005128:	496a      	ldr	r1, [pc, #424]	@ (80052d4 <HAL_RCC_OscConfig+0x678>)
 800512a:	400a      	ands	r2, r1
 800512c:	651a      	str	r2, [r3, #80]	@ 0x50
 800512e:	e020      	b.n	8005172 <HAL_RCC_OscConfig+0x516>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	23a0      	movs	r3, #160	@ 0xa0
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	429a      	cmp	r2, r3
 800513a:	d10e      	bne.n	800515a <HAL_RCC_OscConfig+0x4fe>
 800513c:	4b62      	ldr	r3, [pc, #392]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 800513e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005140:	4b61      	ldr	r3, [pc, #388]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005142:	2180      	movs	r1, #128	@ 0x80
 8005144:	00c9      	lsls	r1, r1, #3
 8005146:	430a      	orrs	r2, r1
 8005148:	651a      	str	r2, [r3, #80]	@ 0x50
 800514a:	4b5f      	ldr	r3, [pc, #380]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 800514c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800514e:	4b5e      	ldr	r3, [pc, #376]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005150:	2180      	movs	r1, #128	@ 0x80
 8005152:	0049      	lsls	r1, r1, #1
 8005154:	430a      	orrs	r2, r1
 8005156:	651a      	str	r2, [r3, #80]	@ 0x50
 8005158:	e00b      	b.n	8005172 <HAL_RCC_OscConfig+0x516>
 800515a:	4b5b      	ldr	r3, [pc, #364]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 800515c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800515e:	4b5a      	ldr	r3, [pc, #360]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005160:	495a      	ldr	r1, [pc, #360]	@ (80052cc <HAL_RCC_OscConfig+0x670>)
 8005162:	400a      	ands	r2, r1
 8005164:	651a      	str	r2, [r3, #80]	@ 0x50
 8005166:	4b58      	ldr	r3, [pc, #352]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005168:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800516a:	4b57      	ldr	r3, [pc, #348]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 800516c:	4959      	ldr	r1, [pc, #356]	@ (80052d4 <HAL_RCC_OscConfig+0x678>)
 800516e:	400a      	ands	r2, r1
 8005170:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d015      	beq.n	80051a6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800517a:	f7fc fe1d 	bl	8001db8 <HAL_GetTick>
 800517e:	0003      	movs	r3, r0
 8005180:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005182:	e009      	b.n	8005198 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005184:	f7fc fe18 	bl	8001db8 <HAL_GetTick>
 8005188:	0002      	movs	r2, r0
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	4a52      	ldr	r2, [pc, #328]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e11a      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005198:	4b4b      	ldr	r3, [pc, #300]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 800519a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800519c:	2380      	movs	r3, #128	@ 0x80
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4013      	ands	r3, r2
 80051a2:	d0ef      	beq.n	8005184 <HAL_RCC_OscConfig+0x528>
 80051a4:	e014      	b.n	80051d0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a6:	f7fc fe07 	bl	8001db8 <HAL_GetTick>
 80051aa:	0003      	movs	r3, r0
 80051ac:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051ae:	e009      	b.n	80051c4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051b0:	f7fc fe02 	bl	8001db8 <HAL_GetTick>
 80051b4:	0002      	movs	r2, r0
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	4a47      	ldr	r2, [pc, #284]	@ (80052d8 <HAL_RCC_OscConfig+0x67c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e104      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051c4:	4b40      	ldr	r3, [pc, #256]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 80051c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051c8:	2380      	movs	r3, #128	@ 0x80
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4013      	ands	r3, r2
 80051ce:	d1ef      	bne.n	80051b0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051d0:	2327      	movs	r3, #39	@ 0x27
 80051d2:	18fb      	adds	r3, r7, r3
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d105      	bne.n	80051e6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051da:	4b3b      	ldr	r3, [pc, #236]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 80051dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051de:	4b3a      	ldr	r3, [pc, #232]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 80051e0:	493e      	ldr	r1, [pc, #248]	@ (80052dc <HAL_RCC_OscConfig+0x680>)
 80051e2:	400a      	ands	r2, r1
 80051e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2220      	movs	r2, #32
 80051ec:	4013      	ands	r3, r2
 80051ee:	d049      	beq.n	8005284 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d026      	beq.n	8005246 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80051f8:	4b33      	ldr	r3, [pc, #204]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	4b32      	ldr	r3, [pc, #200]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 80051fe:	2101      	movs	r1, #1
 8005200:	430a      	orrs	r2, r1
 8005202:	609a      	str	r2, [r3, #8]
 8005204:	4b30      	ldr	r3, [pc, #192]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005206:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005208:	4b2f      	ldr	r3, [pc, #188]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 800520a:	2101      	movs	r1, #1
 800520c:	430a      	orrs	r2, r1
 800520e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005210:	4b33      	ldr	r3, [pc, #204]	@ (80052e0 <HAL_RCC_OscConfig+0x684>)
 8005212:	6a1a      	ldr	r2, [r3, #32]
 8005214:	4b32      	ldr	r3, [pc, #200]	@ (80052e0 <HAL_RCC_OscConfig+0x684>)
 8005216:	2180      	movs	r1, #128	@ 0x80
 8005218:	0189      	lsls	r1, r1, #6
 800521a:	430a      	orrs	r2, r1
 800521c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521e:	f7fc fdcb 	bl	8001db8 <HAL_GetTick>
 8005222:	0003      	movs	r3, r0
 8005224:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005228:	f7fc fdc6 	bl	8001db8 <HAL_GetTick>
 800522c:	0002      	movs	r2, r0
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e0c9      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800523a:	4b23      	ldr	r3, [pc, #140]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2202      	movs	r2, #2
 8005240:	4013      	ands	r3, r2
 8005242:	d0f1      	beq.n	8005228 <HAL_RCC_OscConfig+0x5cc>
 8005244:	e01e      	b.n	8005284 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005246:	4b20      	ldr	r3, [pc, #128]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	4b1f      	ldr	r3, [pc, #124]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 800524c:	2101      	movs	r1, #1
 800524e:	438a      	bics	r2, r1
 8005250:	609a      	str	r2, [r3, #8]
 8005252:	4b23      	ldr	r3, [pc, #140]	@ (80052e0 <HAL_RCC_OscConfig+0x684>)
 8005254:	6a1a      	ldr	r2, [r3, #32]
 8005256:	4b22      	ldr	r3, [pc, #136]	@ (80052e0 <HAL_RCC_OscConfig+0x684>)
 8005258:	4922      	ldr	r1, [pc, #136]	@ (80052e4 <HAL_RCC_OscConfig+0x688>)
 800525a:	400a      	ands	r2, r1
 800525c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525e:	f7fc fdab 	bl	8001db8 <HAL_GetTick>
 8005262:	0003      	movs	r3, r0
 8005264:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005268:	f7fc fda6 	bl	8001db8 <HAL_GetTick>
 800526c:	0002      	movs	r2, r0
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e0a9      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800527a:	4b13      	ldr	r3, [pc, #76]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2202      	movs	r2, #2
 8005280:	4013      	ands	r3, r2
 8005282:	d1f1      	bne.n	8005268 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005288:	2b00      	cmp	r3, #0
 800528a:	d100      	bne.n	800528e <HAL_RCC_OscConfig+0x632>
 800528c:	e09e      	b.n	80053cc <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	2b0c      	cmp	r3, #12
 8005292:	d100      	bne.n	8005296 <HAL_RCC_OscConfig+0x63a>
 8005294:	e077      	b.n	8005386 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529a:	2b02      	cmp	r3, #2
 800529c:	d158      	bne.n	8005350 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529e:	4b0a      	ldr	r3, [pc, #40]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	4b09      	ldr	r3, [pc, #36]	@ (80052c8 <HAL_RCC_OscConfig+0x66c>)
 80052a4:	4910      	ldr	r1, [pc, #64]	@ (80052e8 <HAL_RCC_OscConfig+0x68c>)
 80052a6:	400a      	ands	r2, r1
 80052a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052aa:	f7fc fd85 	bl	8001db8 <HAL_GetTick>
 80052ae:	0003      	movs	r3, r0
 80052b0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80052b2:	e01b      	b.n	80052ec <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b4:	f7fc fd80 	bl	8001db8 <HAL_GetTick>
 80052b8:	0002      	movs	r2, r0
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d914      	bls.n	80052ec <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e083      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
 80052c6:	46c0      	nop			@ (mov r8, r8)
 80052c8:	40021000 	.word	0x40021000
 80052cc:	fffffeff 	.word	0xfffffeff
 80052d0:	40007000 	.word	0x40007000
 80052d4:	fffffbff 	.word	0xfffffbff
 80052d8:	00001388 	.word	0x00001388
 80052dc:	efffffff 	.word	0xefffffff
 80052e0:	40010000 	.word	0x40010000
 80052e4:	ffffdfff 	.word	0xffffdfff
 80052e8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80052ec:	4b3a      	ldr	r3, [pc, #232]	@ (80053d8 <HAL_RCC_OscConfig+0x77c>)
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	2380      	movs	r3, #128	@ 0x80
 80052f2:	049b      	lsls	r3, r3, #18
 80052f4:	4013      	ands	r3, r2
 80052f6:	d1dd      	bne.n	80052b4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052f8:	4b37      	ldr	r3, [pc, #220]	@ (80053d8 <HAL_RCC_OscConfig+0x77c>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4a37      	ldr	r2, [pc, #220]	@ (80053dc <HAL_RCC_OscConfig+0x780>)
 80052fe:	4013      	ands	r3, r2
 8005300:	0019      	movs	r1, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005310:	431a      	orrs	r2, r3
 8005312:	4b31      	ldr	r3, [pc, #196]	@ (80053d8 <HAL_RCC_OscConfig+0x77c>)
 8005314:	430a      	orrs	r2, r1
 8005316:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005318:	4b2f      	ldr	r3, [pc, #188]	@ (80053d8 <HAL_RCC_OscConfig+0x77c>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	4b2e      	ldr	r3, [pc, #184]	@ (80053d8 <HAL_RCC_OscConfig+0x77c>)
 800531e:	2180      	movs	r1, #128	@ 0x80
 8005320:	0449      	lsls	r1, r1, #17
 8005322:	430a      	orrs	r2, r1
 8005324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005326:	f7fc fd47 	bl	8001db8 <HAL_GetTick>
 800532a:	0003      	movs	r3, r0
 800532c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005330:	f7fc fd42 	bl	8001db8 <HAL_GetTick>
 8005334:	0002      	movs	r2, r0
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e045      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005342:	4b25      	ldr	r3, [pc, #148]	@ (80053d8 <HAL_RCC_OscConfig+0x77c>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	2380      	movs	r3, #128	@ 0x80
 8005348:	049b      	lsls	r3, r3, #18
 800534a:	4013      	ands	r3, r2
 800534c:	d0f0      	beq.n	8005330 <HAL_RCC_OscConfig+0x6d4>
 800534e:	e03d      	b.n	80053cc <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005350:	4b21      	ldr	r3, [pc, #132]	@ (80053d8 <HAL_RCC_OscConfig+0x77c>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	4b20      	ldr	r3, [pc, #128]	@ (80053d8 <HAL_RCC_OscConfig+0x77c>)
 8005356:	4922      	ldr	r1, [pc, #136]	@ (80053e0 <HAL_RCC_OscConfig+0x784>)
 8005358:	400a      	ands	r2, r1
 800535a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535c:	f7fc fd2c 	bl	8001db8 <HAL_GetTick>
 8005360:	0003      	movs	r3, r0
 8005362:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005366:	f7fc fd27 	bl	8001db8 <HAL_GetTick>
 800536a:	0002      	movs	r2, r0
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e02a      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005378:	4b17      	ldr	r3, [pc, #92]	@ (80053d8 <HAL_RCC_OscConfig+0x77c>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	2380      	movs	r3, #128	@ 0x80
 800537e:	049b      	lsls	r3, r3, #18
 8005380:	4013      	ands	r3, r2
 8005382:	d1f0      	bne.n	8005366 <HAL_RCC_OscConfig+0x70a>
 8005384:	e022      	b.n	80053cc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e01d      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005392:	4b11      	ldr	r3, [pc, #68]	@ (80053d8 <HAL_RCC_OscConfig+0x77c>)
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	2380      	movs	r3, #128	@ 0x80
 800539c:	025b      	lsls	r3, r3, #9
 800539e:	401a      	ands	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d10f      	bne.n	80053c8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	23f0      	movs	r3, #240	@ 0xf0
 80053ac:	039b      	lsls	r3, r3, #14
 80053ae:	401a      	ands	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d107      	bne.n	80053c8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80053b8:	69fa      	ldr	r2, [r7, #28]
 80053ba:	23c0      	movs	r3, #192	@ 0xc0
 80053bc:	041b      	lsls	r3, r3, #16
 80053be:	401a      	ands	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d001      	beq.n	80053cc <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	0018      	movs	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b00a      	add	sp, #40	@ 0x28
 80053d4:	bdb0      	pop	{r4, r5, r7, pc}
 80053d6:	46c0      	nop			@ (mov r8, r8)
 80053d8:	40021000 	.word	0x40021000
 80053dc:	ff02ffff 	.word	0xff02ffff
 80053e0:	feffffff 	.word	0xfeffffff

080053e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e4:	b5b0      	push	{r4, r5, r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e128      	b.n	800564a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053f8:	4b96      	ldr	r3, [pc, #600]	@ (8005654 <HAL_RCC_ClockConfig+0x270>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2201      	movs	r2, #1
 80053fe:	4013      	ands	r3, r2
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d91e      	bls.n	8005444 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005406:	4b93      	ldr	r3, [pc, #588]	@ (8005654 <HAL_RCC_ClockConfig+0x270>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2201      	movs	r2, #1
 800540c:	4393      	bics	r3, r2
 800540e:	0019      	movs	r1, r3
 8005410:	4b90      	ldr	r3, [pc, #576]	@ (8005654 <HAL_RCC_ClockConfig+0x270>)
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005418:	f7fc fcce 	bl	8001db8 <HAL_GetTick>
 800541c:	0003      	movs	r3, r0
 800541e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005420:	e009      	b.n	8005436 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005422:	f7fc fcc9 	bl	8001db8 <HAL_GetTick>
 8005426:	0002      	movs	r2, r0
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	4a8a      	ldr	r2, [pc, #552]	@ (8005658 <HAL_RCC_ClockConfig+0x274>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e109      	b.n	800564a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	4b87      	ldr	r3, [pc, #540]	@ (8005654 <HAL_RCC_ClockConfig+0x270>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2201      	movs	r2, #1
 800543c:	4013      	ands	r3, r2
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d1ee      	bne.n	8005422 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2202      	movs	r2, #2
 800544a:	4013      	ands	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800544e:	4b83      	ldr	r3, [pc, #524]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	22f0      	movs	r2, #240	@ 0xf0
 8005454:	4393      	bics	r3, r2
 8005456:	0019      	movs	r1, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	4b7f      	ldr	r3, [pc, #508]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 800545e:	430a      	orrs	r2, r1
 8005460:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2201      	movs	r2, #1
 8005468:	4013      	ands	r3, r2
 800546a:	d100      	bne.n	800546e <HAL_RCC_ClockConfig+0x8a>
 800546c:	e089      	b.n	8005582 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d107      	bne.n	8005486 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005476:	4b79      	ldr	r3, [pc, #484]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	2380      	movs	r3, #128	@ 0x80
 800547c:	029b      	lsls	r3, r3, #10
 800547e:	4013      	ands	r3, r2
 8005480:	d120      	bne.n	80054c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e0e1      	b.n	800564a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b03      	cmp	r3, #3
 800548c:	d107      	bne.n	800549e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800548e:	4b73      	ldr	r3, [pc, #460]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	2380      	movs	r3, #128	@ 0x80
 8005494:	049b      	lsls	r3, r3, #18
 8005496:	4013      	ands	r3, r2
 8005498:	d114      	bne.n	80054c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e0d5      	b.n	800564a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d106      	bne.n	80054b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054a6:	4b6d      	ldr	r3, [pc, #436]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2204      	movs	r2, #4
 80054ac:	4013      	ands	r3, r2
 80054ae:	d109      	bne.n	80054c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0ca      	b.n	800564a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80054b4:	4b69      	ldr	r3, [pc, #420]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	2380      	movs	r3, #128	@ 0x80
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4013      	ands	r3, r2
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0c2      	b.n	800564a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054c4:	4b65      	ldr	r3, [pc, #404]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	2203      	movs	r2, #3
 80054ca:	4393      	bics	r3, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	4b62      	ldr	r3, [pc, #392]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 80054d4:	430a      	orrs	r2, r1
 80054d6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054d8:	f7fc fc6e 	bl	8001db8 <HAL_GetTick>
 80054dc:	0003      	movs	r3, r0
 80054de:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d111      	bne.n	800550c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80054e8:	e009      	b.n	80054fe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ea:	f7fc fc65 	bl	8001db8 <HAL_GetTick>
 80054ee:	0002      	movs	r2, r0
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	4a58      	ldr	r2, [pc, #352]	@ (8005658 <HAL_RCC_ClockConfig+0x274>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e0a5      	b.n	800564a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80054fe:	4b57      	ldr	r3, [pc, #348]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	220c      	movs	r2, #12
 8005504:	4013      	ands	r3, r2
 8005506:	2b08      	cmp	r3, #8
 8005508:	d1ef      	bne.n	80054ea <HAL_RCC_ClockConfig+0x106>
 800550a:	e03a      	b.n	8005582 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b03      	cmp	r3, #3
 8005512:	d111      	bne.n	8005538 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005514:	e009      	b.n	800552a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005516:	f7fc fc4f 	bl	8001db8 <HAL_GetTick>
 800551a:	0002      	movs	r2, r0
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	4a4d      	ldr	r2, [pc, #308]	@ (8005658 <HAL_RCC_ClockConfig+0x274>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d901      	bls.n	800552a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e08f      	b.n	800564a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800552a:	4b4c      	ldr	r3, [pc, #304]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	220c      	movs	r2, #12
 8005530:	4013      	ands	r3, r2
 8005532:	2b0c      	cmp	r3, #12
 8005534:	d1ef      	bne.n	8005516 <HAL_RCC_ClockConfig+0x132>
 8005536:	e024      	b.n	8005582 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d11b      	bne.n	8005578 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005540:	e009      	b.n	8005556 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005542:	f7fc fc39 	bl	8001db8 <HAL_GetTick>
 8005546:	0002      	movs	r2, r0
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	4a42      	ldr	r2, [pc, #264]	@ (8005658 <HAL_RCC_ClockConfig+0x274>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e079      	b.n	800564a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005556:	4b41      	ldr	r3, [pc, #260]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	220c      	movs	r2, #12
 800555c:	4013      	ands	r3, r2
 800555e:	2b04      	cmp	r3, #4
 8005560:	d1ef      	bne.n	8005542 <HAL_RCC_ClockConfig+0x15e>
 8005562:	e00e      	b.n	8005582 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005564:	f7fc fc28 	bl	8001db8 <HAL_GetTick>
 8005568:	0002      	movs	r2, r0
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	4a3a      	ldr	r2, [pc, #232]	@ (8005658 <HAL_RCC_ClockConfig+0x274>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d901      	bls.n	8005578 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e068      	b.n	800564a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005578:	4b38      	ldr	r3, [pc, #224]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	220c      	movs	r2, #12
 800557e:	4013      	ands	r3, r2
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005582:	4b34      	ldr	r3, [pc, #208]	@ (8005654 <HAL_RCC_ClockConfig+0x270>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2201      	movs	r2, #1
 8005588:	4013      	ands	r3, r2
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d21e      	bcs.n	80055ce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005590:	4b30      	ldr	r3, [pc, #192]	@ (8005654 <HAL_RCC_ClockConfig+0x270>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2201      	movs	r2, #1
 8005596:	4393      	bics	r3, r2
 8005598:	0019      	movs	r1, r3
 800559a:	4b2e      	ldr	r3, [pc, #184]	@ (8005654 <HAL_RCC_ClockConfig+0x270>)
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055a2:	f7fc fc09 	bl	8001db8 <HAL_GetTick>
 80055a6:	0003      	movs	r3, r0
 80055a8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055aa:	e009      	b.n	80055c0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ac:	f7fc fc04 	bl	8001db8 <HAL_GetTick>
 80055b0:	0002      	movs	r2, r0
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	4a28      	ldr	r2, [pc, #160]	@ (8005658 <HAL_RCC_ClockConfig+0x274>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e044      	b.n	800564a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c0:	4b24      	ldr	r3, [pc, #144]	@ (8005654 <HAL_RCC_ClockConfig+0x270>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2201      	movs	r2, #1
 80055c6:	4013      	ands	r3, r2
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d1ee      	bne.n	80055ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2204      	movs	r2, #4
 80055d4:	4013      	ands	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055d8:	4b20      	ldr	r3, [pc, #128]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4a20      	ldr	r2, [pc, #128]	@ (8005660 <HAL_RCC_ClockConfig+0x27c>)
 80055de:	4013      	ands	r3, r2
 80055e0:	0019      	movs	r1, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	4b1d      	ldr	r3, [pc, #116]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 80055e8:	430a      	orrs	r2, r1
 80055ea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2208      	movs	r2, #8
 80055f2:	4013      	ands	r3, r2
 80055f4:	d00a      	beq.n	800560c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055f6:	4b19      	ldr	r3, [pc, #100]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005664 <HAL_RCC_ClockConfig+0x280>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	0019      	movs	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	00da      	lsls	r2, r3, #3
 8005606:	4b15      	ldr	r3, [pc, #84]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 8005608:	430a      	orrs	r2, r1
 800560a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800560c:	f000 f832 	bl	8005674 <HAL_RCC_GetSysClockFreq>
 8005610:	0001      	movs	r1, r0
 8005612:	4b12      	ldr	r3, [pc, #72]	@ (800565c <HAL_RCC_ClockConfig+0x278>)
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	091b      	lsrs	r3, r3, #4
 8005618:	220f      	movs	r2, #15
 800561a:	4013      	ands	r3, r2
 800561c:	4a12      	ldr	r2, [pc, #72]	@ (8005668 <HAL_RCC_ClockConfig+0x284>)
 800561e:	5cd3      	ldrb	r3, [r2, r3]
 8005620:	000a      	movs	r2, r1
 8005622:	40da      	lsrs	r2, r3
 8005624:	4b11      	ldr	r3, [pc, #68]	@ (800566c <HAL_RCC_ClockConfig+0x288>)
 8005626:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005628:	4b11      	ldr	r3, [pc, #68]	@ (8005670 <HAL_RCC_ClockConfig+0x28c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	250b      	movs	r5, #11
 800562e:	197c      	adds	r4, r7, r5
 8005630:	0018      	movs	r0, r3
 8005632:	f7fc fb7b 	bl	8001d2c <HAL_InitTick>
 8005636:	0003      	movs	r3, r0
 8005638:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800563a:	197b      	adds	r3, r7, r5
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005642:	197b      	adds	r3, r7, r5
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	e000      	b.n	800564a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	0018      	movs	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	b004      	add	sp, #16
 8005650:	bdb0      	pop	{r4, r5, r7, pc}
 8005652:	46c0      	nop			@ (mov r8, r8)
 8005654:	40022000 	.word	0x40022000
 8005658:	00001388 	.word	0x00001388
 800565c:	40021000 	.word	0x40021000
 8005660:	fffff8ff 	.word	0xfffff8ff
 8005664:	ffffc7ff 	.word	0xffffc7ff
 8005668:	08009964 	.word	0x08009964
 800566c:	20000000 	.word	0x20000000
 8005670:	20000004 	.word	0x20000004

08005674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800567a:	4b3c      	ldr	r3, [pc, #240]	@ (800576c <HAL_RCC_GetSysClockFreq+0xf8>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	220c      	movs	r2, #12
 8005684:	4013      	ands	r3, r2
 8005686:	2b0c      	cmp	r3, #12
 8005688:	d013      	beq.n	80056b2 <HAL_RCC_GetSysClockFreq+0x3e>
 800568a:	d85c      	bhi.n	8005746 <HAL_RCC_GetSysClockFreq+0xd2>
 800568c:	2b04      	cmp	r3, #4
 800568e:	d002      	beq.n	8005696 <HAL_RCC_GetSysClockFreq+0x22>
 8005690:	2b08      	cmp	r3, #8
 8005692:	d00b      	beq.n	80056ac <HAL_RCC_GetSysClockFreq+0x38>
 8005694:	e057      	b.n	8005746 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005696:	4b35      	ldr	r3, [pc, #212]	@ (800576c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2210      	movs	r2, #16
 800569c:	4013      	ands	r3, r2
 800569e:	d002      	beq.n	80056a6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80056a0:	4b33      	ldr	r3, [pc, #204]	@ (8005770 <HAL_RCC_GetSysClockFreq+0xfc>)
 80056a2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80056a4:	e05d      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80056a6:	4b33      	ldr	r3, [pc, #204]	@ (8005774 <HAL_RCC_GetSysClockFreq+0x100>)
 80056a8:	613b      	str	r3, [r7, #16]
      break;
 80056aa:	e05a      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056ac:	4b32      	ldr	r3, [pc, #200]	@ (8005778 <HAL_RCC_GetSysClockFreq+0x104>)
 80056ae:	613b      	str	r3, [r7, #16]
      break;
 80056b0:	e057      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	0c9b      	lsrs	r3, r3, #18
 80056b6:	220f      	movs	r2, #15
 80056b8:	4013      	ands	r3, r2
 80056ba:	4a30      	ldr	r2, [pc, #192]	@ (800577c <HAL_RCC_GetSysClockFreq+0x108>)
 80056bc:	5cd3      	ldrb	r3, [r2, r3]
 80056be:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	0d9b      	lsrs	r3, r3, #22
 80056c4:	2203      	movs	r2, #3
 80056c6:	4013      	ands	r3, r2
 80056c8:	3301      	adds	r3, #1
 80056ca:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056cc:	4b27      	ldr	r3, [pc, #156]	@ (800576c <HAL_RCC_GetSysClockFreq+0xf8>)
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	2380      	movs	r3, #128	@ 0x80
 80056d2:	025b      	lsls	r3, r3, #9
 80056d4:	4013      	ands	r3, r2
 80056d6:	d00f      	beq.n	80056f8 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	000a      	movs	r2, r1
 80056dc:	0152      	lsls	r2, r2, #5
 80056de:	1a52      	subs	r2, r2, r1
 80056e0:	0193      	lsls	r3, r2, #6
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	185b      	adds	r3, r3, r1
 80056e8:	025b      	lsls	r3, r3, #9
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	0018      	movs	r0, r3
 80056ee:	f7fa fd0b 	bl	8000108 <__udivsi3>
 80056f2:	0003      	movs	r3, r0
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	e023      	b.n	8005740 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80056f8:	4b1c      	ldr	r3, [pc, #112]	@ (800576c <HAL_RCC_GetSysClockFreq+0xf8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2210      	movs	r2, #16
 80056fe:	4013      	ands	r3, r2
 8005700:	d00f      	beq.n	8005722 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	000a      	movs	r2, r1
 8005706:	0152      	lsls	r2, r2, #5
 8005708:	1a52      	subs	r2, r2, r1
 800570a:	0193      	lsls	r3, r2, #6
 800570c:	1a9b      	subs	r3, r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	185b      	adds	r3, r3, r1
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	0018      	movs	r0, r3
 8005718:	f7fa fcf6 	bl	8000108 <__udivsi3>
 800571c:	0003      	movs	r3, r0
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	e00e      	b.n	8005740 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	000a      	movs	r2, r1
 8005726:	0152      	lsls	r2, r2, #5
 8005728:	1a52      	subs	r2, r2, r1
 800572a:	0193      	lsls	r3, r2, #6
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	185b      	adds	r3, r3, r1
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	0018      	movs	r0, r3
 8005738:	f7fa fce6 	bl	8000108 <__udivsi3>
 800573c:	0003      	movs	r3, r0
 800573e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	613b      	str	r3, [r7, #16]
      break;
 8005744:	e00d      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005746:	4b09      	ldr	r3, [pc, #36]	@ (800576c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	0b5b      	lsrs	r3, r3, #13
 800574c:	2207      	movs	r2, #7
 800574e:	4013      	ands	r3, r2
 8005750:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	2280      	movs	r2, #128	@ 0x80
 8005758:	0212      	lsls	r2, r2, #8
 800575a:	409a      	lsls	r2, r3
 800575c:	0013      	movs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
      break;
 8005760:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005762:	693b      	ldr	r3, [r7, #16]
}
 8005764:	0018      	movs	r0, r3
 8005766:	46bd      	mov	sp, r7
 8005768:	b006      	add	sp, #24
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40021000 	.word	0x40021000
 8005770:	003d0900 	.word	0x003d0900
 8005774:	00f42400 	.word	0x00f42400
 8005778:	007a1200 	.word	0x007a1200
 800577c:	08009974 	.word	0x08009974

08005780 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005788:	2317      	movs	r3, #23
 800578a:	18fb      	adds	r3, r7, r3
 800578c:	2200      	movs	r2, #0
 800578e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2220      	movs	r2, #32
 8005796:	4013      	ands	r3, r2
 8005798:	d106      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	2380      	movs	r3, #128	@ 0x80
 80057a0:	011b      	lsls	r3, r3, #4
 80057a2:	4013      	ands	r3, r2
 80057a4:	d100      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80057a6:	e104      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057a8:	4bb1      	ldr	r3, [pc, #708]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057ac:	2380      	movs	r3, #128	@ 0x80
 80057ae:	055b      	lsls	r3, r3, #21
 80057b0:	4013      	ands	r3, r2
 80057b2:	d10a      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b4:	4bae      	ldr	r3, [pc, #696]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057b8:	4bad      	ldr	r3, [pc, #692]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057ba:	2180      	movs	r1, #128	@ 0x80
 80057bc:	0549      	lsls	r1, r1, #21
 80057be:	430a      	orrs	r2, r1
 80057c0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80057c2:	2317      	movs	r3, #23
 80057c4:	18fb      	adds	r3, r7, r3
 80057c6:	2201      	movs	r2, #1
 80057c8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ca:	4baa      	ldr	r3, [pc, #680]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	2380      	movs	r3, #128	@ 0x80
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	4013      	ands	r3, r2
 80057d4:	d11a      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057d6:	4ba7      	ldr	r3, [pc, #668]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4ba6      	ldr	r3, [pc, #664]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057dc:	2180      	movs	r1, #128	@ 0x80
 80057de:	0049      	lsls	r1, r1, #1
 80057e0:	430a      	orrs	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057e4:	f7fc fae8 	bl	8001db8 <HAL_GetTick>
 80057e8:	0003      	movs	r3, r0
 80057ea:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ec:	e008      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ee:	f7fc fae3 	bl	8001db8 <HAL_GetTick>
 80057f2:	0002      	movs	r2, r0
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b64      	cmp	r3, #100	@ 0x64
 80057fa:	d901      	bls.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e133      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005800:	4b9c      	ldr	r3, [pc, #624]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	2380      	movs	r3, #128	@ 0x80
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	4013      	ands	r3, r2
 800580a:	d0f0      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800580c:	4b98      	ldr	r3, [pc, #608]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	23c0      	movs	r3, #192	@ 0xc0
 8005812:	039b      	lsls	r3, r3, #14
 8005814:	4013      	ands	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	23c0      	movs	r3, #192	@ 0xc0
 800581e:	039b      	lsls	r3, r3, #14
 8005820:	4013      	ands	r3, r2
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	429a      	cmp	r2, r3
 8005826:	d107      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	23c0      	movs	r3, #192	@ 0xc0
 800582e:	039b      	lsls	r3, r3, #14
 8005830:	4013      	ands	r3, r2
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	429a      	cmp	r2, r3
 8005836:	d013      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	23c0      	movs	r3, #192	@ 0xc0
 800583e:	029b      	lsls	r3, r3, #10
 8005840:	401a      	ands	r2, r3
 8005842:	23c0      	movs	r3, #192	@ 0xc0
 8005844:	029b      	lsls	r3, r3, #10
 8005846:	429a      	cmp	r2, r3
 8005848:	d10a      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800584a:	4b89      	ldr	r3, [pc, #548]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	2380      	movs	r3, #128	@ 0x80
 8005850:	029b      	lsls	r3, r3, #10
 8005852:	401a      	ands	r2, r3
 8005854:	2380      	movs	r3, #128	@ 0x80
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	429a      	cmp	r2, r3
 800585a:	d101      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e103      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005860:	4b83      	ldr	r3, [pc, #524]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005862:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005864:	23c0      	movs	r3, #192	@ 0xc0
 8005866:	029b      	lsls	r3, r3, #10
 8005868:	4013      	ands	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d049      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	23c0      	movs	r3, #192	@ 0xc0
 8005878:	029b      	lsls	r3, r3, #10
 800587a:	4013      	ands	r3, r2
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	429a      	cmp	r2, r3
 8005880:	d004      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2220      	movs	r2, #32
 8005888:	4013      	ands	r3, r2
 800588a:	d10d      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	23c0      	movs	r3, #192	@ 0xc0
 8005892:	029b      	lsls	r3, r3, #10
 8005894:	4013      	ands	r3, r2
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	429a      	cmp	r2, r3
 800589a:	d034      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	2380      	movs	r3, #128	@ 0x80
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	4013      	ands	r3, r2
 80058a6:	d02e      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80058a8:	4b71      	ldr	r3, [pc, #452]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ac:	4a72      	ldr	r2, [pc, #456]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058b2:	4b6f      	ldr	r3, [pc, #444]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058b6:	4b6e      	ldr	r3, [pc, #440]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058b8:	2180      	movs	r1, #128	@ 0x80
 80058ba:	0309      	lsls	r1, r1, #12
 80058bc:	430a      	orrs	r2, r1
 80058be:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058c0:	4b6b      	ldr	r3, [pc, #428]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058c4:	4b6a      	ldr	r3, [pc, #424]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058c6:	496d      	ldr	r1, [pc, #436]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80058c8:	400a      	ands	r2, r1
 80058ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80058cc:	4b68      	ldr	r3, [pc, #416]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	2380      	movs	r3, #128	@ 0x80
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	4013      	ands	r3, r2
 80058da:	d014      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058dc:	f7fc fa6c 	bl	8001db8 <HAL_GetTick>
 80058e0:	0003      	movs	r3, r0
 80058e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058e4:	e009      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058e6:	f7fc fa67 	bl	8001db8 <HAL_GetTick>
 80058ea:	0002      	movs	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	4a63      	ldr	r2, [pc, #396]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d901      	bls.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e0b6      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80058fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058fe:	2380      	movs	r3, #128	@ 0x80
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4013      	ands	r3, r2
 8005904:	d0ef      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	2380      	movs	r3, #128	@ 0x80
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	4013      	ands	r3, r2
 8005910:	d01f      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	23c0      	movs	r3, #192	@ 0xc0
 8005918:	029b      	lsls	r3, r3, #10
 800591a:	401a      	ands	r2, r3
 800591c:	23c0      	movs	r3, #192	@ 0xc0
 800591e:	029b      	lsls	r3, r3, #10
 8005920:	429a      	cmp	r2, r3
 8005922:	d10c      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005924:	4b52      	ldr	r3, [pc, #328]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a56      	ldr	r2, [pc, #344]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800592a:	4013      	ands	r3, r2
 800592c:	0019      	movs	r1, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	23c0      	movs	r3, #192	@ 0xc0
 8005934:	039b      	lsls	r3, r3, #14
 8005936:	401a      	ands	r2, r3
 8005938:	4b4d      	ldr	r3, [pc, #308]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800593a:	430a      	orrs	r2, r1
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	4b4c      	ldr	r3, [pc, #304]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005940:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	23c0      	movs	r3, #192	@ 0xc0
 8005948:	029b      	lsls	r3, r3, #10
 800594a:	401a      	ands	r2, r3
 800594c:	4b48      	ldr	r3, [pc, #288]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800594e:	430a      	orrs	r2, r1
 8005950:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2220      	movs	r2, #32
 8005958:	4013      	ands	r3, r2
 800595a:	d01f      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	23c0      	movs	r3, #192	@ 0xc0
 8005962:	029b      	lsls	r3, r3, #10
 8005964:	401a      	ands	r2, r3
 8005966:	23c0      	movs	r3, #192	@ 0xc0
 8005968:	029b      	lsls	r3, r3, #10
 800596a:	429a      	cmp	r2, r3
 800596c:	d10c      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800596e:	4b40      	ldr	r3, [pc, #256]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a44      	ldr	r2, [pc, #272]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005974:	4013      	ands	r3, r2
 8005976:	0019      	movs	r1, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	23c0      	movs	r3, #192	@ 0xc0
 800597e:	039b      	lsls	r3, r3, #14
 8005980:	401a      	ands	r2, r3
 8005982:	4b3b      	ldr	r3, [pc, #236]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005984:	430a      	orrs	r2, r1
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	4b39      	ldr	r3, [pc, #228]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800598a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	23c0      	movs	r3, #192	@ 0xc0
 8005992:	029b      	lsls	r3, r3, #10
 8005994:	401a      	ands	r2, r3
 8005996:	4b36      	ldr	r3, [pc, #216]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005998:	430a      	orrs	r2, r1
 800599a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800599c:	2317      	movs	r3, #23
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d105      	bne.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a6:	4b32      	ldr	r3, [pc, #200]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059aa:	4b31      	ldr	r3, [pc, #196]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059ac:	4936      	ldr	r1, [pc, #216]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059ae:	400a      	ands	r2, r1
 80059b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2201      	movs	r2, #1
 80059b8:	4013      	ands	r3, r2
 80059ba:	d009      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059bc:	4b2c      	ldr	r3, [pc, #176]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059c0:	2203      	movs	r2, #3
 80059c2:	4393      	bics	r3, r2
 80059c4:	0019      	movs	r1, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	4b29      	ldr	r3, [pc, #164]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059cc:	430a      	orrs	r2, r1
 80059ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2202      	movs	r2, #2
 80059d6:	4013      	ands	r3, r2
 80059d8:	d009      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059da:	4b25      	ldr	r3, [pc, #148]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059de:	220c      	movs	r2, #12
 80059e0:	4393      	bics	r3, r2
 80059e2:	0019      	movs	r1, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	4b21      	ldr	r3, [pc, #132]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059ea:	430a      	orrs	r2, r1
 80059ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2204      	movs	r2, #4
 80059f4:	4013      	ands	r3, r2
 80059f6:	d009      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80059fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059fc:	4a23      	ldr	r2, [pc, #140]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	0019      	movs	r1, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695a      	ldr	r2, [r3, #20]
 8005a06:	4b1a      	ldr	r3, [pc, #104]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2208      	movs	r2, #8
 8005a12:	4013      	ands	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a16:	4b16      	ldr	r3, [pc, #88]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	0019      	movs	r1, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	4b12      	ldr	r3, [pc, #72]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a26:	430a      	orrs	r2, r1
 8005a28:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2240      	movs	r2, #64	@ 0x40
 8005a30:	4013      	ands	r3, r2
 8005a32:	d009      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a34:	4b0e      	ldr	r3, [pc, #56]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a38:	4a16      	ldr	r2, [pc, #88]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	0019      	movs	r1, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1a      	ldr	r2, [r3, #32]
 8005a42:	4b0b      	ldr	r3, [pc, #44]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a44:	430a      	orrs	r2, r1
 8005a46:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2280      	movs	r2, #128	@ 0x80
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d009      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005a52:	4b07      	ldr	r3, [pc, #28]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a56:	4a10      	ldr	r2, [pc, #64]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	0019      	movs	r1, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	4b03      	ldr	r3, [pc, #12]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005a62:	430a      	orrs	r2, r1
 8005a64:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	0018      	movs	r0, r3
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	b006      	add	sp, #24
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40007000 	.word	0x40007000
 8005a78:	fffcffff 	.word	0xfffcffff
 8005a7c:	fff7ffff 	.word	0xfff7ffff
 8005a80:	00001388 	.word	0x00001388
 8005a84:	ffcfffff 	.word	0xffcfffff
 8005a88:	efffffff 	.word	0xefffffff
 8005a8c:	fffff3ff 	.word	0xfffff3ff
 8005a90:	ffffcfff 	.word	0xffffcfff
 8005a94:	fbffffff 	.word	0xfbffffff
 8005a98:	fff3ffff 	.word	0xfff3ffff

08005a9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2244      	movs	r2, #68	@ 0x44
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005aac:	4b05      	ldr	r3, [pc, #20]	@ (8005ac4 <USB_EnableGlobalInt+0x28>)
 8005aae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	b299      	uxth	r1, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2240      	movs	r2, #64	@ 0x40
 8005ab8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	0018      	movs	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b004      	add	sp, #16
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	0000bf80 	.word	0x0000bf80

08005ac8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ad0:	4b09      	ldr	r3, [pc, #36]	@ (8005af8 <USB_DisableGlobalInt+0x30>)
 8005ad2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2240      	movs	r2, #64	@ 0x40
 8005ad8:	5a9b      	ldrh	r3, [r3, r2]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	b292      	uxth	r2, r2
 8005ae0:	43d2      	mvns	r2, r2
 8005ae2:	b292      	uxth	r2, r2
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	b299      	uxth	r1, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2240      	movs	r2, #64	@ 0x40
 8005aec:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	0018      	movs	r0, r3
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b004      	add	sp, #16
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	0000bf80 	.word	0x0000bf80

08005afc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	1d3b      	adds	r3, r7, #4
 8005b06:	6019      	str	r1, [r3, #0]
 8005b08:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2240      	movs	r2, #64	@ 0x40
 8005b0e:	2101      	movs	r1, #1
 8005b10:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2240      	movs	r2, #64	@ 0x40
 8005b16:	2100      	movs	r1, #0
 8005b18:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2244      	movs	r2, #68	@ 0x44
 8005b1e:	2100      	movs	r1, #0
 8005b20:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2250      	movs	r2, #80	@ 0x50
 8005b26:	2100      	movs	r1, #0
 8005b28:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b004      	add	sp, #16
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b0a6      	sub	sp, #152	@ 0x98
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b3e:	2397      	movs	r3, #151	@ 0x97
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	2200      	movs	r2, #0
 8005b44:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	18d3      	adds	r3, r2, r3
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	2394      	movs	r3, #148	@ 0x94
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	49a5      	ldr	r1, [pc, #660]	@ (8005df0 <USB_ActivateEndpoint+0x2bc>)
 8005b5a:	400a      	ands	r2, r1
 8005b5c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	78db      	ldrb	r3, [r3, #3]
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d017      	beq.n	8005b96 <USB_ActivateEndpoint+0x62>
 8005b66:	dc28      	bgt.n	8005bba <USB_ActivateEndpoint+0x86>
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d00e      	beq.n	8005b8a <USB_ActivateEndpoint+0x56>
 8005b6c:	dc25      	bgt.n	8005bba <USB_ActivateEndpoint+0x86>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <USB_ActivateEndpoint+0x44>
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d018      	beq.n	8005ba8 <USB_ActivateEndpoint+0x74>
 8005b76:	e020      	b.n	8005bba <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b78:	2294      	movs	r2, #148	@ 0x94
 8005b7a:	18bb      	adds	r3, r7, r2
 8005b7c:	18ba      	adds	r2, r7, r2
 8005b7e:	8812      	ldrh	r2, [r2, #0]
 8005b80:	2180      	movs	r1, #128	@ 0x80
 8005b82:	0089      	lsls	r1, r1, #2
 8005b84:	430a      	orrs	r2, r1
 8005b86:	801a      	strh	r2, [r3, #0]
      break;
 8005b88:	e01c      	b.n	8005bc4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8005b8a:	2294      	movs	r2, #148	@ 0x94
 8005b8c:	18bb      	adds	r3, r7, r2
 8005b8e:	18ba      	adds	r2, r7, r2
 8005b90:	8812      	ldrh	r2, [r2, #0]
 8005b92:	801a      	strh	r2, [r3, #0]
      break;
 8005b94:	e016      	b.n	8005bc4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b96:	2294      	movs	r2, #148	@ 0x94
 8005b98:	18bb      	adds	r3, r7, r2
 8005b9a:	18ba      	adds	r2, r7, r2
 8005b9c:	8812      	ldrh	r2, [r2, #0]
 8005b9e:	21c0      	movs	r1, #192	@ 0xc0
 8005ba0:	00c9      	lsls	r1, r1, #3
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	801a      	strh	r2, [r3, #0]
      break;
 8005ba6:	e00d      	b.n	8005bc4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ba8:	2294      	movs	r2, #148	@ 0x94
 8005baa:	18bb      	adds	r3, r7, r2
 8005bac:	18ba      	adds	r2, r7, r2
 8005bae:	8812      	ldrh	r2, [r2, #0]
 8005bb0:	2180      	movs	r1, #128	@ 0x80
 8005bb2:	00c9      	lsls	r1, r1, #3
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	801a      	strh	r2, [r3, #0]
      break;
 8005bb8:	e004      	b.n	8005bc4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8005bba:	2397      	movs	r3, #151	@ 0x97
 8005bbc:	18fb      	adds	r3, r7, r3
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	701a      	strb	r2, [r3, #0]
      break;
 8005bc2:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	18d3      	adds	r3, r2, r3
 8005bce:	2294      	movs	r2, #148	@ 0x94
 8005bd0:	18ba      	adds	r2, r7, r2
 8005bd2:	8812      	ldrh	r2, [r2, #0]
 8005bd4:	4987      	ldr	r1, [pc, #540]	@ (8005df4 <USB_ActivateEndpoint+0x2c0>)
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	b292      	uxth	r2, r2
 8005bda:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	18d3      	adds	r3, r2, r3
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	b21b      	sxth	r3, r3
 8005bec:	4a82      	ldr	r2, [pc, #520]	@ (8005df8 <USB_ActivateEndpoint+0x2c4>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	b21a      	sxth	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	b21b      	sxth	r3, r3
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	b21a      	sxth	r2, r3
 8005bfc:	2186      	movs	r1, #134	@ 0x86
 8005bfe:	187b      	adds	r3, r7, r1
 8005c00:	801a      	strh	r2, [r3, #0]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	18d3      	adds	r3, r2, r3
 8005c0c:	187a      	adds	r2, r7, r1
 8005c0e:	8812      	ldrh	r2, [r2, #0]
 8005c10:	4978      	ldr	r1, [pc, #480]	@ (8005df4 <USB_ActivateEndpoint+0x2c0>)
 8005c12:	430a      	orrs	r2, r1
 8005c14:	b292      	uxth	r2, r2
 8005c16:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	7b1b      	ldrb	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d000      	beq.n	8005c22 <USB_ActivateEndpoint+0xee>
 8005c20:	e185      	b.n	8005f2e <USB_ActivateEndpoint+0x3fa>
  {
    if (ep->is_in != 0U)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d100      	bne.n	8005c2c <USB_ActivateEndpoint+0xf8>
 8005c2a:	e07c      	b.n	8005d26 <USB_ActivateEndpoint+0x1f2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2250      	movs	r2, #80	@ 0x50
 8005c34:	5a9b      	ldrh	r3, [r3, r2]
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	001a      	movs	r2, r3
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	189b      	adds	r3, r3, r2
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	00da      	lsls	r2, r3, #3
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	18d3      	adds	r3, r2, r3
 8005c4a:	2280      	movs	r2, #128	@ 0x80
 8005c4c:	00d2      	lsls	r2, r2, #3
 8005c4e:	4694      	mov	ip, r2
 8005c50:	4463      	add	r3, ip
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	88db      	ldrh	r3, [r3, #6]
 8005c58:	085b      	lsrs	r3, r3, #1
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	18db      	adds	r3, r3, r3
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	18d2      	adds	r2, r2, r3
 8005c6e:	2112      	movs	r1, #18
 8005c70:	187b      	adds	r3, r7, r1
 8005c72:	8812      	ldrh	r2, [r2, #0]
 8005c74:	801a      	strh	r2, [r3, #0]
 8005c76:	187b      	adds	r3, r7, r1
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	2240      	movs	r2, #64	@ 0x40
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	d016      	beq.n	8005cae <USB_ActivateEndpoint+0x17a>
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	18d3      	adds	r3, r2, r3
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	2010      	movs	r0, #16
 8005c90:	183b      	adds	r3, r7, r0
 8005c92:	4959      	ldr	r1, [pc, #356]	@ (8005df8 <USB_ActivateEndpoint+0x2c4>)
 8005c94:	400a      	ands	r2, r1
 8005c96:	801a      	strh	r2, [r3, #0]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	18d3      	adds	r3, r2, r3
 8005ca2:	183a      	adds	r2, r7, r0
 8005ca4:	8812      	ldrh	r2, [r2, #0]
 8005ca6:	4955      	ldr	r1, [pc, #340]	@ (8005dfc <USB_ActivateEndpoint+0x2c8>)
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	b292      	uxth	r2, r2
 8005cac:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	78db      	ldrb	r3, [r3, #3]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d01e      	beq.n	8005cf4 <USB_ActivateEndpoint+0x1c0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	18d3      	adds	r3, r2, r3
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	200c      	movs	r0, #12
 8005cc6:	183b      	adds	r3, r7, r0
 8005cc8:	494d      	ldr	r1, [pc, #308]	@ (8005e00 <USB_ActivateEndpoint+0x2cc>)
 8005cca:	400a      	ands	r2, r1
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	183b      	adds	r3, r7, r0
 8005cd0:	183a      	adds	r2, r7, r0
 8005cd2:	8812      	ldrh	r2, [r2, #0]
 8005cd4:	2120      	movs	r1, #32
 8005cd6:	404a      	eors	r2, r1
 8005cd8:	801a      	strh	r2, [r3, #0]
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	18d3      	adds	r3, r2, r3
 8005ce4:	183a      	adds	r2, r7, r0
 8005ce6:	8812      	ldrh	r2, [r2, #0]
 8005ce8:	4942      	ldr	r1, [pc, #264]	@ (8005df4 <USB_ActivateEndpoint+0x2c0>)
 8005cea:	430a      	orrs	r2, r1
 8005cec:	b292      	uxth	r2, r2
 8005cee:	801a      	strh	r2, [r3, #0]
 8005cf0:	f000 fbdb 	bl	80064aa <USB_ActivateEndpoint+0x976>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	18d3      	adds	r3, r2, r3
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	200e      	movs	r0, #14
 8005d04:	183b      	adds	r3, r7, r0
 8005d06:	493e      	ldr	r1, [pc, #248]	@ (8005e00 <USB_ActivateEndpoint+0x2cc>)
 8005d08:	400a      	ands	r2, r1
 8005d0a:	801a      	strh	r2, [r3, #0]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	18d3      	adds	r3, r2, r3
 8005d16:	183a      	adds	r2, r7, r0
 8005d18:	8812      	ldrh	r2, [r2, #0]
 8005d1a:	4936      	ldr	r1, [pc, #216]	@ (8005df4 <USB_ActivateEndpoint+0x2c0>)
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	b292      	uxth	r2, r2
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	f000 fbc2 	bl	80064aa <USB_ActivateEndpoint+0x976>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2250      	movs	r2, #80	@ 0x50
 8005d2e:	5a9b      	ldrh	r3, [r3, r2]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	001a      	movs	r2, r3
 8005d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d36:	189b      	adds	r3, r3, r2
 8005d38:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	00da      	lsls	r2, r3, #3
 8005d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d42:	18d3      	adds	r3, r2, r3
 8005d44:	4a2f      	ldr	r2, [pc, #188]	@ (8005e04 <USB_ActivateEndpoint+0x2d0>)
 8005d46:	4694      	mov	ip, r2
 8005d48:	4463      	add	r3, ip
 8005d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	88db      	ldrh	r3, [r3, #6]
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	18db      	adds	r3, r3, r3
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2250      	movs	r2, #80	@ 0x50
 8005d64:	5a9b      	ldrh	r3, [r3, r2]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	001a      	movs	r2, r3
 8005d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6c:	189b      	adds	r3, r3, r2
 8005d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	00da      	lsls	r2, r3, #3
 8005d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d78:	18d3      	adds	r3, r2, r3
 8005d7a:	4a23      	ldr	r2, [pc, #140]	@ (8005e08 <USB_ActivateEndpoint+0x2d4>)
 8005d7c:	4694      	mov	ip, r2
 8005d7e:	4463      	add	r3, ip
 8005d80:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	059b      	lsls	r3, r3, #22
 8005d8a:	0d9b      	lsrs	r3, r3, #22
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d108      	bne.n	8005dac <USB_ActivateEndpoint+0x278>
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e0c <USB_ActivateEndpoint+0x2d8>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	e051      	b.n	8005e50 <USB_ActivateEndpoint+0x31c>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005db2:	d82d      	bhi.n	8005e10 <USB_ActivateEndpoint+0x2dc>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	2190      	movs	r1, #144	@ 0x90
 8005dbc:	187a      	adds	r2, r7, r1
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d004      	beq.n	8005dd4 <USB_ActivateEndpoint+0x2a0>
 8005dca:	187b      	adds	r3, r7, r1
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	187a      	adds	r2, r7, r1
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	2390      	movs	r3, #144	@ 0x90
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	029b      	lsls	r3, r3, #10
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	4313      	orrs	r3, r2
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	801a      	strh	r2, [r3, #0]
 8005dee:	e02f      	b.n	8005e50 <USB_ActivateEndpoint+0x31c>
 8005df0:	ffff898f 	.word	0xffff898f
 8005df4:	ffff8080 	.word	0xffff8080
 8005df8:	ffff8f8f 	.word	0xffff8f8f
 8005dfc:	ffff80c0 	.word	0xffff80c0
 8005e00:	ffff8fbf 	.word	0xffff8fbf
 8005e04:	00000404 	.word	0x00000404
 8005e08:	00000406 	.word	0x00000406
 8005e0c:	ffff8000 	.word	0xffff8000
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	095b      	lsrs	r3, r3, #5
 8005e16:	2190      	movs	r1, #144	@ 0x90
 8005e18:	187a      	adds	r2, r7, r1
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	221f      	movs	r2, #31
 8005e22:	4013      	ands	r3, r2
 8005e24:	d104      	bne.n	8005e30 <USB_ActivateEndpoint+0x2fc>
 8005e26:	187b      	adds	r3, r7, r1
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	187a      	adds	r2, r7, r1
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	2390      	movs	r3, #144	@ 0x90
 8005e38:	18fb      	adds	r3, r7, r3
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	029b      	lsls	r3, r3, #10
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	4313      	orrs	r3, r2
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	4acf      	ldr	r2, [pc, #828]	@ (8006184 <USB_ActivateEndpoint+0x650>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	18d2      	adds	r2, r2, r3
 8005e5a:	2122      	movs	r1, #34	@ 0x22
 8005e5c:	187b      	adds	r3, r7, r1
 8005e5e:	8812      	ldrh	r2, [r2, #0]
 8005e60:	801a      	strh	r2, [r3, #0]
 8005e62:	187b      	adds	r3, r7, r1
 8005e64:	881a      	ldrh	r2, [r3, #0]
 8005e66:	2380      	movs	r3, #128	@ 0x80
 8005e68:	01db      	lsls	r3, r3, #7
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d016      	beq.n	8005e9c <USB_ActivateEndpoint+0x368>
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	18d3      	adds	r3, r2, r3
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	2020      	movs	r0, #32
 8005e7e:	183b      	adds	r3, r7, r0
 8005e80:	49c1      	ldr	r1, [pc, #772]	@ (8006188 <USB_ActivateEndpoint+0x654>)
 8005e82:	400a      	ands	r2, r1
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	18d3      	adds	r3, r2, r3
 8005e90:	183a      	adds	r2, r7, r0
 8005e92:	8812      	ldrh	r2, [r2, #0]
 8005e94:	49bd      	ldr	r1, [pc, #756]	@ (800618c <USB_ActivateEndpoint+0x658>)
 8005e96:	430a      	orrs	r2, r1
 8005e98:	b292      	uxth	r2, r2
 8005e9a:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d125      	bne.n	8005ef0 <USB_ActivateEndpoint+0x3bc>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	18d3      	adds	r3, r2, r3
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	201c      	movs	r0, #28
 8005eb4:	183b      	adds	r3, r7, r0
 8005eb6:	49b6      	ldr	r1, [pc, #728]	@ (8006190 <USB_ActivateEndpoint+0x65c>)
 8005eb8:	400a      	ands	r2, r1
 8005eba:	801a      	strh	r2, [r3, #0]
 8005ebc:	183b      	adds	r3, r7, r0
 8005ebe:	183a      	adds	r2, r7, r0
 8005ec0:	8812      	ldrh	r2, [r2, #0]
 8005ec2:	2180      	movs	r1, #128	@ 0x80
 8005ec4:	0149      	lsls	r1, r1, #5
 8005ec6:	404a      	eors	r2, r1
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	183b      	adds	r3, r7, r0
 8005ecc:	183a      	adds	r2, r7, r0
 8005ece:	8812      	ldrh	r2, [r2, #0]
 8005ed0:	2180      	movs	r1, #128	@ 0x80
 8005ed2:	0189      	lsls	r1, r1, #6
 8005ed4:	404a      	eors	r2, r1
 8005ed6:	801a      	strh	r2, [r3, #0]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	18d3      	adds	r3, r2, r3
 8005ee2:	183a      	adds	r2, r7, r0
 8005ee4:	8812      	ldrh	r2, [r2, #0]
 8005ee6:	49ab      	ldr	r1, [pc, #684]	@ (8006194 <USB_ActivateEndpoint+0x660>)
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	b292      	uxth	r2, r2
 8005eec:	801a      	strh	r2, [r3, #0]
 8005eee:	e2dc      	b.n	80064aa <USB_ActivateEndpoint+0x976>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	18d3      	adds	r3, r2, r3
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	201e      	movs	r0, #30
 8005f00:	183b      	adds	r3, r7, r0
 8005f02:	49a3      	ldr	r1, [pc, #652]	@ (8006190 <USB_ActivateEndpoint+0x65c>)
 8005f04:	400a      	ands	r2, r1
 8005f06:	801a      	strh	r2, [r3, #0]
 8005f08:	183b      	adds	r3, r7, r0
 8005f0a:	183a      	adds	r2, r7, r0
 8005f0c:	8812      	ldrh	r2, [r2, #0]
 8005f0e:	2180      	movs	r1, #128	@ 0x80
 8005f10:	0189      	lsls	r1, r1, #6
 8005f12:	404a      	eors	r2, r1
 8005f14:	801a      	strh	r2, [r3, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	18d3      	adds	r3, r2, r3
 8005f20:	183a      	adds	r2, r7, r0
 8005f22:	8812      	ldrh	r2, [r2, #0]
 8005f24:	499b      	ldr	r1, [pc, #620]	@ (8006194 <USB_ActivateEndpoint+0x660>)
 8005f26:	430a      	orrs	r2, r1
 8005f28:	b292      	uxth	r2, r2
 8005f2a:	801a      	strh	r2, [r3, #0]
 8005f2c:	e2bd      	b.n	80064aa <USB_ActivateEndpoint+0x976>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	78db      	ldrb	r3, [r3, #3]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d117      	bne.n	8005f66 <USB_ActivateEndpoint+0x432>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	18d3      	adds	r3, r2, r3
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	2082      	movs	r0, #130	@ 0x82
 8005f46:	183b      	adds	r3, r7, r0
 8005f48:	498f      	ldr	r1, [pc, #572]	@ (8006188 <USB_ActivateEndpoint+0x654>)
 8005f4a:	400a      	ands	r2, r1
 8005f4c:	801a      	strh	r2, [r3, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	18d3      	adds	r3, r2, r3
 8005f58:	183a      	adds	r2, r7, r0
 8005f5a:	8812      	ldrh	r2, [r2, #0]
 8005f5c:	498e      	ldr	r1, [pc, #568]	@ (8006198 <USB_ActivateEndpoint+0x664>)
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	b292      	uxth	r2, r2
 8005f62:	801a      	strh	r2, [r3, #0]
 8005f64:	e016      	b.n	8005f94 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	18d3      	adds	r3, r2, r3
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	2084      	movs	r0, #132	@ 0x84
 8005f76:	183b      	adds	r3, r7, r0
 8005f78:	4988      	ldr	r1, [pc, #544]	@ (800619c <USB_ActivateEndpoint+0x668>)
 8005f7a:	400a      	ands	r2, r1
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	18d3      	adds	r3, r2, r3
 8005f88:	183a      	adds	r2, r7, r0
 8005f8a:	8812      	ldrh	r2, [r2, #0]
 8005f8c:	4981      	ldr	r1, [pc, #516]	@ (8006194 <USB_ActivateEndpoint+0x660>)
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	b292      	uxth	r2, r2
 8005f92:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2250      	movs	r2, #80	@ 0x50
 8005f9c:	5a9b      	ldrh	r3, [r3, r2]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	001a      	movs	r2, r3
 8005fa2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fa4:	189b      	adds	r3, r3, r2
 8005fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	00da      	lsls	r2, r3, #3
 8005fae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fb0:	18d3      	adds	r3, r2, r3
 8005fb2:	2280      	movs	r2, #128	@ 0x80
 8005fb4:	00d2      	lsls	r2, r2, #3
 8005fb6:	4694      	mov	ip, r2
 8005fb8:	4463      	add	r3, ip
 8005fba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	891b      	ldrh	r3, [r3, #8]
 8005fc0:	085b      	lsrs	r3, r3, #1
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	18db      	adds	r3, r3, r3
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fca:	801a      	strh	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2250      	movs	r2, #80	@ 0x50
 8005fd4:	5a9b      	ldrh	r3, [r3, r2]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	001a      	movs	r2, r3
 8005fda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fdc:	189b      	adds	r3, r3, r2
 8005fde:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	00da      	lsls	r2, r3, #3
 8005fe6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fe8:	18d3      	adds	r3, r2, r3
 8005fea:	4a6d      	ldr	r2, [pc, #436]	@ (80061a0 <USB_ActivateEndpoint+0x66c>)
 8005fec:	4694      	mov	ip, r2
 8005fee:	4463      	add	r3, ip
 8005ff0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	895b      	ldrh	r3, [r3, #10]
 8005ff6:	085b      	lsrs	r3, r3, #1
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	18db      	adds	r3, r3, r3
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006000:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d000      	beq.n	800600c <USB_ActivateEndpoint+0x4d8>
 800600a:	e1b3      	b.n	8006374 <USB_ActivateEndpoint+0x840>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	18d2      	adds	r2, r2, r3
 8006016:	2160      	movs	r1, #96	@ 0x60
 8006018:	187b      	adds	r3, r7, r1
 800601a:	8812      	ldrh	r2, [r2, #0]
 800601c:	801a      	strh	r2, [r3, #0]
 800601e:	187b      	adds	r3, r7, r1
 8006020:	881a      	ldrh	r2, [r3, #0]
 8006022:	2380      	movs	r3, #128	@ 0x80
 8006024:	01db      	lsls	r3, r3, #7
 8006026:	4013      	ands	r3, r2
 8006028:	d016      	beq.n	8006058 <USB_ActivateEndpoint+0x524>
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	18d3      	adds	r3, r2, r3
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29a      	uxth	r2, r3
 8006038:	205e      	movs	r0, #94	@ 0x5e
 800603a:	183b      	adds	r3, r7, r0
 800603c:	4952      	ldr	r1, [pc, #328]	@ (8006188 <USB_ActivateEndpoint+0x654>)
 800603e:	400a      	ands	r2, r1
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	18d3      	adds	r3, r2, r3
 800604c:	183a      	adds	r2, r7, r0
 800604e:	8812      	ldrh	r2, [r2, #0]
 8006050:	494e      	ldr	r1, [pc, #312]	@ (800618c <USB_ActivateEndpoint+0x658>)
 8006052:	430a      	orrs	r2, r1
 8006054:	b292      	uxth	r2, r2
 8006056:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	18d2      	adds	r2, r2, r3
 8006062:	215c      	movs	r1, #92	@ 0x5c
 8006064:	187b      	adds	r3, r7, r1
 8006066:	8812      	ldrh	r2, [r2, #0]
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	187b      	adds	r3, r7, r1
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	2240      	movs	r2, #64	@ 0x40
 8006070:	4013      	ands	r3, r2
 8006072:	d016      	beq.n	80060a2 <USB_ActivateEndpoint+0x56e>
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	18d3      	adds	r3, r2, r3
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	b29a      	uxth	r2, r3
 8006082:	205a      	movs	r0, #90	@ 0x5a
 8006084:	183b      	adds	r3, r7, r0
 8006086:	4940      	ldr	r1, [pc, #256]	@ (8006188 <USB_ActivateEndpoint+0x654>)
 8006088:	400a      	ands	r2, r1
 800608a:	801a      	strh	r2, [r3, #0]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	18d3      	adds	r3, r2, r3
 8006096:	183a      	adds	r2, r7, r0
 8006098:	8812      	ldrh	r2, [r2, #0]
 800609a:	4942      	ldr	r1, [pc, #264]	@ (80061a4 <USB_ActivateEndpoint+0x670>)
 800609c:	430a      	orrs	r2, r1
 800609e:	b292      	uxth	r2, r2
 80060a0:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d000      	beq.n	80060ac <USB_ActivateEndpoint+0x578>
 80060aa:	e07f      	b.n	80061ac <USB_ActivateEndpoint+0x678>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2250      	movs	r2, #80	@ 0x50
 80060b4:	5a9b      	ldrh	r3, [r3, r2]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	001a      	movs	r2, r3
 80060ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060bc:	189b      	adds	r3, r3, r2
 80060be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	00da      	lsls	r2, r3, #3
 80060c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060c8:	18d3      	adds	r3, r2, r3
 80060ca:	4a37      	ldr	r2, [pc, #220]	@ (80061a8 <USB_ActivateEndpoint+0x674>)
 80060cc:	4694      	mov	ip, r2
 80060ce:	4463      	add	r3, ip
 80060d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	059b      	lsls	r3, r3, #22
 80060da:	0d9b      	lsrs	r3, r3, #22
 80060dc:	b29a      	uxth	r2, r3
 80060de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060e0:	801a      	strh	r2, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d108      	bne.n	80060fc <USB_ActivateEndpoint+0x5c8>
 80060ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	4a24      	ldr	r2, [pc, #144]	@ (8006184 <USB_ActivateEndpoint+0x650>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060f8:	801a      	strh	r2, [r3, #0]
 80060fa:	e073      	b.n	80061e4 <USB_ActivateEndpoint+0x6b0>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	2b3e      	cmp	r3, #62	@ 0x3e
 8006102:	d81d      	bhi.n	8006140 <USB_ActivateEndpoint+0x60c>
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	218c      	movs	r1, #140	@ 0x8c
 800610c:	187a      	adds	r2, r7, r1
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	2201      	movs	r2, #1
 8006116:	4013      	ands	r3, r2
 8006118:	d004      	beq.n	8006124 <USB_ActivateEndpoint+0x5f0>
 800611a:	187b      	adds	r3, r7, r1
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	187a      	adds	r2, r7, r1
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29a      	uxth	r2, r3
 800612a:	238c      	movs	r3, #140	@ 0x8c
 800612c:	18fb      	adds	r3, r7, r3
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	b29b      	uxth	r3, r3
 8006132:	029b      	lsls	r3, r3, #10
 8006134:	b29b      	uxth	r3, r3
 8006136:	4313      	orrs	r3, r2
 8006138:	b29a      	uxth	r2, r3
 800613a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800613c:	801a      	strh	r2, [r3, #0]
 800613e:	e051      	b.n	80061e4 <USB_ActivateEndpoint+0x6b0>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	095b      	lsrs	r3, r3, #5
 8006146:	218c      	movs	r1, #140	@ 0x8c
 8006148:	187a      	adds	r2, r7, r1
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	221f      	movs	r2, #31
 8006152:	4013      	ands	r3, r2
 8006154:	d104      	bne.n	8006160 <USB_ActivateEndpoint+0x62c>
 8006156:	187b      	adds	r3, r7, r1
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3b01      	subs	r3, #1
 800615c:	187a      	adds	r2, r7, r1
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	b29a      	uxth	r2, r3
 8006166:	238c      	movs	r3, #140	@ 0x8c
 8006168:	18fb      	adds	r3, r7, r3
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	b29b      	uxth	r3, r3
 800616e:	029b      	lsls	r3, r3, #10
 8006170:	b29b      	uxth	r3, r3
 8006172:	4313      	orrs	r3, r2
 8006174:	b29b      	uxth	r3, r3
 8006176:	4a03      	ldr	r2, [pc, #12]	@ (8006184 <USB_ActivateEndpoint+0x650>)
 8006178:	4313      	orrs	r3, r2
 800617a:	b29a      	uxth	r2, r3
 800617c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e030      	b.n	80061e4 <USB_ActivateEndpoint+0x6b0>
 8006182:	46c0      	nop			@ (mov r8, r8)
 8006184:	ffff8000 	.word	0xffff8000
 8006188:	ffff8f8f 	.word	0xffff8f8f
 800618c:	ffffc080 	.word	0xffffc080
 8006190:	ffffbf8f 	.word	0xffffbf8f
 8006194:	ffff8080 	.word	0xffff8080
 8006198:	ffff8180 	.word	0xffff8180
 800619c:	ffff8e8f 	.word	0xffff8e8f
 80061a0:	00000404 	.word	0x00000404
 80061a4:	ffff80c0 	.word	0xffff80c0
 80061a8:	00000402 	.word	0x00000402
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	785b      	ldrb	r3, [r3, #1]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d117      	bne.n	80061e4 <USB_ActivateEndpoint+0x6b0>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2250      	movs	r2, #80	@ 0x50
 80061bc:	5a9b      	ldrh	r3, [r3, r2]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	001a      	movs	r2, r3
 80061c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061c4:	189b      	adds	r3, r3, r2
 80061c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	00da      	lsls	r2, r3, #3
 80061ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061d0:	18d3      	adds	r3, r2, r3
 80061d2:	4ab9      	ldr	r2, [pc, #740]	@ (80064b8 <USB_ActivateEndpoint+0x984>)
 80061d4:	4694      	mov	ip, r2
 80061d6:	4463      	add	r3, ip
 80061d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	b29a      	uxth	r2, r3
 80061e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80061e2:	801a      	strh	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d16a      	bne.n	80062c6 <USB_ActivateEndpoint+0x792>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2250      	movs	r2, #80	@ 0x50
 80061f8:	5a9b      	ldrh	r3, [r3, r2]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	001a      	movs	r2, r3
 80061fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006200:	189b      	adds	r3, r3, r2
 8006202:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	00da      	lsls	r2, r3, #3
 800620a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800620c:	18d3      	adds	r3, r2, r3
 800620e:	4aab      	ldr	r2, [pc, #684]	@ (80064bc <USB_ActivateEndpoint+0x988>)
 8006210:	4694      	mov	ip, r2
 8006212:	4463      	add	r3, ip
 8006214:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	059b      	lsls	r3, r3, #22
 800621e:	0d9b      	lsrs	r3, r3, #22
 8006220:	b29a      	uxth	r2, r3
 8006222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006224:	801a      	strh	r2, [r3, #0]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d108      	bne.n	8006240 <USB_ActivateEndpoint+0x70c>
 800622e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	4aa2      	ldr	r2, [pc, #648]	@ (80064c0 <USB_ActivateEndpoint+0x98c>)
 8006236:	4313      	orrs	r3, r2
 8006238:	b29a      	uxth	r2, r3
 800623a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	e05c      	b.n	80062fa <USB_ActivateEndpoint+0x7c6>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b3e      	cmp	r3, #62	@ 0x3e
 8006246:	d81d      	bhi.n	8006284 <USB_ActivateEndpoint+0x750>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	2188      	movs	r1, #136	@ 0x88
 8006250:	187a      	adds	r2, r7, r1
 8006252:	6013      	str	r3, [r2, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2201      	movs	r2, #1
 800625a:	4013      	ands	r3, r2
 800625c:	d004      	beq.n	8006268 <USB_ActivateEndpoint+0x734>
 800625e:	187b      	adds	r3, r7, r1
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3301      	adds	r3, #1
 8006264:	187a      	adds	r2, r7, r1
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	b29a      	uxth	r2, r3
 800626e:	2388      	movs	r3, #136	@ 0x88
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	b29b      	uxth	r3, r3
 8006276:	029b      	lsls	r3, r3, #10
 8006278:	b29b      	uxth	r3, r3
 800627a:	4313      	orrs	r3, r2
 800627c:	b29a      	uxth	r2, r3
 800627e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006280:	801a      	strh	r2, [r3, #0]
 8006282:	e03a      	b.n	80062fa <USB_ActivateEndpoint+0x7c6>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	2188      	movs	r1, #136	@ 0x88
 800628c:	187a      	adds	r2, r7, r1
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	221f      	movs	r2, #31
 8006296:	4013      	ands	r3, r2
 8006298:	d104      	bne.n	80062a4 <USB_ActivateEndpoint+0x770>
 800629a:	187b      	adds	r3, r7, r1
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3b01      	subs	r3, #1
 80062a0:	187a      	adds	r2, r7, r1
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	2388      	movs	r3, #136	@ 0x88
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	029b      	lsls	r3, r3, #10
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	4313      	orrs	r3, r2
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	4a81      	ldr	r2, [pc, #516]	@ (80064c0 <USB_ActivateEndpoint+0x98c>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	b29a      	uxth	r2, r3
 80062c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c2:	801a      	strh	r2, [r3, #0]
 80062c4:	e019      	b.n	80062fa <USB_ActivateEndpoint+0x7c6>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	785b      	ldrb	r3, [r3, #1]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d115      	bne.n	80062fa <USB_ActivateEndpoint+0x7c6>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2250      	movs	r2, #80	@ 0x50
 80062d2:	5a9b      	ldrh	r3, [r3, r2]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	001a      	movs	r2, r3
 80062d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062da:	189b      	adds	r3, r3, r2
 80062dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	00da      	lsls	r2, r3, #3
 80062e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062e6:	18d3      	adds	r3, r2, r3
 80062e8:	4a74      	ldr	r2, [pc, #464]	@ (80064bc <USB_ActivateEndpoint+0x988>)
 80062ea:	4694      	mov	ip, r2
 80062ec:	4463      	add	r3, ip
 80062ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062f8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	18d3      	adds	r3, r2, r3
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	b29a      	uxth	r2, r3
 8006308:	2036      	movs	r0, #54	@ 0x36
 800630a:	183b      	adds	r3, r7, r0
 800630c:	496d      	ldr	r1, [pc, #436]	@ (80064c4 <USB_ActivateEndpoint+0x990>)
 800630e:	400a      	ands	r2, r1
 8006310:	801a      	strh	r2, [r3, #0]
 8006312:	183b      	adds	r3, r7, r0
 8006314:	183a      	adds	r2, r7, r0
 8006316:	8812      	ldrh	r2, [r2, #0]
 8006318:	2180      	movs	r1, #128	@ 0x80
 800631a:	0149      	lsls	r1, r1, #5
 800631c:	404a      	eors	r2, r1
 800631e:	801a      	strh	r2, [r3, #0]
 8006320:	183b      	adds	r3, r7, r0
 8006322:	183a      	adds	r2, r7, r0
 8006324:	8812      	ldrh	r2, [r2, #0]
 8006326:	2180      	movs	r1, #128	@ 0x80
 8006328:	0189      	lsls	r1, r1, #6
 800632a:	404a      	eors	r2, r1
 800632c:	801a      	strh	r2, [r3, #0]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	18d3      	adds	r3, r2, r3
 8006338:	183a      	adds	r2, r7, r0
 800633a:	8812      	ldrh	r2, [r2, #0]
 800633c:	4962      	ldr	r1, [pc, #392]	@ (80064c8 <USB_ActivateEndpoint+0x994>)
 800633e:	430a      	orrs	r2, r1
 8006340:	b292      	uxth	r2, r2
 8006342:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	18d3      	adds	r3, r2, r3
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29a      	uxth	r2, r3
 8006352:	2034      	movs	r0, #52	@ 0x34
 8006354:	183b      	adds	r3, r7, r0
 8006356:	495d      	ldr	r1, [pc, #372]	@ (80064cc <USB_ActivateEndpoint+0x998>)
 8006358:	400a      	ands	r2, r1
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	18d3      	adds	r3, r2, r3
 8006366:	183a      	adds	r2, r7, r0
 8006368:	8812      	ldrh	r2, [r2, #0]
 800636a:	4957      	ldr	r1, [pc, #348]	@ (80064c8 <USB_ActivateEndpoint+0x994>)
 800636c:	430a      	orrs	r2, r1
 800636e:	b292      	uxth	r2, r2
 8006370:	801a      	strh	r2, [r3, #0]
 8006372:	e09a      	b.n	80064aa <USB_ActivateEndpoint+0x976>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	18d2      	adds	r2, r2, r3
 800637e:	216e      	movs	r1, #110	@ 0x6e
 8006380:	187b      	adds	r3, r7, r1
 8006382:	8812      	ldrh	r2, [r2, #0]
 8006384:	801a      	strh	r2, [r3, #0]
 8006386:	187b      	adds	r3, r7, r1
 8006388:	881a      	ldrh	r2, [r3, #0]
 800638a:	2380      	movs	r3, #128	@ 0x80
 800638c:	01db      	lsls	r3, r3, #7
 800638e:	4013      	ands	r3, r2
 8006390:	d016      	beq.n	80063c0 <USB_ActivateEndpoint+0x88c>
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	18d3      	adds	r3, r2, r3
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29a      	uxth	r2, r3
 80063a0:	206c      	movs	r0, #108	@ 0x6c
 80063a2:	183b      	adds	r3, r7, r0
 80063a4:	494a      	ldr	r1, [pc, #296]	@ (80064d0 <USB_ActivateEndpoint+0x99c>)
 80063a6:	400a      	ands	r2, r1
 80063a8:	801a      	strh	r2, [r3, #0]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	18d3      	adds	r3, r2, r3
 80063b4:	183a      	adds	r2, r7, r0
 80063b6:	8812      	ldrh	r2, [r2, #0]
 80063b8:	4946      	ldr	r1, [pc, #280]	@ (80064d4 <USB_ActivateEndpoint+0x9a0>)
 80063ba:	430a      	orrs	r2, r1
 80063bc:	b292      	uxth	r2, r2
 80063be:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	18d2      	adds	r2, r2, r3
 80063ca:	216a      	movs	r1, #106	@ 0x6a
 80063cc:	187b      	adds	r3, r7, r1
 80063ce:	8812      	ldrh	r2, [r2, #0]
 80063d0:	801a      	strh	r2, [r3, #0]
 80063d2:	187b      	adds	r3, r7, r1
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	2240      	movs	r2, #64	@ 0x40
 80063d8:	4013      	ands	r3, r2
 80063da:	d016      	beq.n	800640a <USB_ActivateEndpoint+0x8d6>
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	18d3      	adds	r3, r2, r3
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	2068      	movs	r0, #104	@ 0x68
 80063ec:	183b      	adds	r3, r7, r0
 80063ee:	4938      	ldr	r1, [pc, #224]	@ (80064d0 <USB_ActivateEndpoint+0x99c>)
 80063f0:	400a      	ands	r2, r1
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	18d3      	adds	r3, r2, r3
 80063fe:	183a      	adds	r2, r7, r0
 8006400:	8812      	ldrh	r2, [r2, #0]
 8006402:	4935      	ldr	r1, [pc, #212]	@ (80064d8 <USB_ActivateEndpoint+0x9a4>)
 8006404:	430a      	orrs	r2, r1
 8006406:	b292      	uxth	r2, r2
 8006408:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	78db      	ldrb	r3, [r3, #3]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d01d      	beq.n	800644e <USB_ActivateEndpoint+0x91a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	18d3      	adds	r3, r2, r3
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	b29a      	uxth	r2, r3
 8006420:	2064      	movs	r0, #100	@ 0x64
 8006422:	183b      	adds	r3, r7, r0
 8006424:	4929      	ldr	r1, [pc, #164]	@ (80064cc <USB_ActivateEndpoint+0x998>)
 8006426:	400a      	ands	r2, r1
 8006428:	801a      	strh	r2, [r3, #0]
 800642a:	183b      	adds	r3, r7, r0
 800642c:	183a      	adds	r2, r7, r0
 800642e:	8812      	ldrh	r2, [r2, #0]
 8006430:	2120      	movs	r1, #32
 8006432:	404a      	eors	r2, r1
 8006434:	801a      	strh	r2, [r3, #0]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	18d3      	adds	r3, r2, r3
 8006440:	183a      	adds	r2, r7, r0
 8006442:	8812      	ldrh	r2, [r2, #0]
 8006444:	4920      	ldr	r1, [pc, #128]	@ (80064c8 <USB_ActivateEndpoint+0x994>)
 8006446:	430a      	orrs	r2, r1
 8006448:	b292      	uxth	r2, r2
 800644a:	801a      	strh	r2, [r3, #0]
 800644c:	e016      	b.n	800647c <USB_ActivateEndpoint+0x948>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	18d3      	adds	r3, r2, r3
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	b29a      	uxth	r2, r3
 800645c:	2066      	movs	r0, #102	@ 0x66
 800645e:	183b      	adds	r3, r7, r0
 8006460:	491a      	ldr	r1, [pc, #104]	@ (80064cc <USB_ActivateEndpoint+0x998>)
 8006462:	400a      	ands	r2, r1
 8006464:	801a      	strh	r2, [r3, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	18d3      	adds	r3, r2, r3
 8006470:	183a      	adds	r2, r7, r0
 8006472:	8812      	ldrh	r2, [r2, #0]
 8006474:	4914      	ldr	r1, [pc, #80]	@ (80064c8 <USB_ActivateEndpoint+0x994>)
 8006476:	430a      	orrs	r2, r1
 8006478:	b292      	uxth	r2, r2
 800647a:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	18d3      	adds	r3, r2, r3
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29a      	uxth	r2, r3
 800648a:	2062      	movs	r0, #98	@ 0x62
 800648c:	183b      	adds	r3, r7, r0
 800648e:	490d      	ldr	r1, [pc, #52]	@ (80064c4 <USB_ActivateEndpoint+0x990>)
 8006490:	400a      	ands	r2, r1
 8006492:	801a      	strh	r2, [r3, #0]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	18d3      	adds	r3, r2, r3
 800649e:	183a      	adds	r2, r7, r0
 80064a0:	8812      	ldrh	r2, [r2, #0]
 80064a2:	4909      	ldr	r1, [pc, #36]	@ (80064c8 <USB_ActivateEndpoint+0x994>)
 80064a4:	430a      	orrs	r2, r1
 80064a6:	b292      	uxth	r2, r2
 80064a8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80064aa:	2397      	movs	r3, #151	@ 0x97
 80064ac:	18fb      	adds	r3, r7, r3
 80064ae:	781b      	ldrb	r3, [r3, #0]
}
 80064b0:	0018      	movs	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b026      	add	sp, #152	@ 0x98
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	00000402 	.word	0x00000402
 80064bc:	00000406 	.word	0x00000406
 80064c0:	ffff8000 	.word	0xffff8000
 80064c4:	ffffbf8f 	.word	0xffffbf8f
 80064c8:	ffff8080 	.word	0xffff8080
 80064cc:	ffff8fbf 	.word	0xffff8fbf
 80064d0:	ffff8f8f 	.word	0xffff8f8f
 80064d4:	ffffc080 	.word	0xffffc080
 80064d8:	ffff80c0 	.word	0xffff80c0

080064dc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08c      	sub	sp, #48	@ 0x30
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	7b1b      	ldrb	r3, [r3, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d000      	beq.n	80064f0 <USB_DeactivateEndpoint+0x14>
 80064ee:	e07e      	b.n	80065ee <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	785b      	ldrb	r3, [r3, #1]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d03c      	beq.n	8006572 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	18d2      	adds	r2, r2, r3
 8006502:	210c      	movs	r1, #12
 8006504:	187b      	adds	r3, r7, r1
 8006506:	8812      	ldrh	r2, [r2, #0]
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	187b      	adds	r3, r7, r1
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	2240      	movs	r2, #64	@ 0x40
 8006510:	4013      	ands	r3, r2
 8006512:	d016      	beq.n	8006542 <USB_DeactivateEndpoint+0x66>
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	18d3      	adds	r3, r2, r3
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29a      	uxth	r2, r3
 8006522:	200a      	movs	r0, #10
 8006524:	183b      	adds	r3, r7, r0
 8006526:	49c7      	ldr	r1, [pc, #796]	@ (8006844 <USB_DeactivateEndpoint+0x368>)
 8006528:	400a      	ands	r2, r1
 800652a:	801a      	strh	r2, [r3, #0]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	18d3      	adds	r3, r2, r3
 8006536:	183a      	adds	r2, r7, r0
 8006538:	8812      	ldrh	r2, [r2, #0]
 800653a:	49c3      	ldr	r1, [pc, #780]	@ (8006848 <USB_DeactivateEndpoint+0x36c>)
 800653c:	430a      	orrs	r2, r1
 800653e:	b292      	uxth	r2, r2
 8006540:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	18d3      	adds	r3, r2, r3
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29a      	uxth	r2, r3
 8006550:	2008      	movs	r0, #8
 8006552:	183b      	adds	r3, r7, r0
 8006554:	49bd      	ldr	r1, [pc, #756]	@ (800684c <USB_DeactivateEndpoint+0x370>)
 8006556:	400a      	ands	r2, r1
 8006558:	801a      	strh	r2, [r3, #0]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	18d3      	adds	r3, r2, r3
 8006564:	183a      	adds	r2, r7, r0
 8006566:	8812      	ldrh	r2, [r2, #0]
 8006568:	49b9      	ldr	r1, [pc, #740]	@ (8006850 <USB_DeactivateEndpoint+0x374>)
 800656a:	430a      	orrs	r2, r1
 800656c:	b292      	uxth	r2, r2
 800656e:	801a      	strh	r2, [r3, #0]
 8006570:	e163      	b.n	800683a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	18d2      	adds	r2, r2, r3
 800657c:	2112      	movs	r1, #18
 800657e:	187b      	adds	r3, r7, r1
 8006580:	8812      	ldrh	r2, [r2, #0]
 8006582:	801a      	strh	r2, [r3, #0]
 8006584:	187b      	adds	r3, r7, r1
 8006586:	881a      	ldrh	r2, [r3, #0]
 8006588:	2380      	movs	r3, #128	@ 0x80
 800658a:	01db      	lsls	r3, r3, #7
 800658c:	4013      	ands	r3, r2
 800658e:	d016      	beq.n	80065be <USB_DeactivateEndpoint+0xe2>
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	18d3      	adds	r3, r2, r3
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	b29a      	uxth	r2, r3
 800659e:	2010      	movs	r0, #16
 80065a0:	183b      	adds	r3, r7, r0
 80065a2:	49a8      	ldr	r1, [pc, #672]	@ (8006844 <USB_DeactivateEndpoint+0x368>)
 80065a4:	400a      	ands	r2, r1
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	18d3      	adds	r3, r2, r3
 80065b2:	183a      	adds	r2, r7, r0
 80065b4:	8812      	ldrh	r2, [r2, #0]
 80065b6:	49a7      	ldr	r1, [pc, #668]	@ (8006854 <USB_DeactivateEndpoint+0x378>)
 80065b8:	430a      	orrs	r2, r1
 80065ba:	b292      	uxth	r2, r2
 80065bc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	18d3      	adds	r3, r2, r3
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	200e      	movs	r0, #14
 80065ce:	183b      	adds	r3, r7, r0
 80065d0:	49a1      	ldr	r1, [pc, #644]	@ (8006858 <USB_DeactivateEndpoint+0x37c>)
 80065d2:	400a      	ands	r2, r1
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	18d3      	adds	r3, r2, r3
 80065e0:	183a      	adds	r2, r7, r0
 80065e2:	8812      	ldrh	r2, [r2, #0]
 80065e4:	499a      	ldr	r1, [pc, #616]	@ (8006850 <USB_DeactivateEndpoint+0x374>)
 80065e6:	430a      	orrs	r2, r1
 80065e8:	b292      	uxth	r2, r2
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	e125      	b.n	800683a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	785b      	ldrb	r3, [r3, #1]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d000      	beq.n	80065f8 <USB_DeactivateEndpoint+0x11c>
 80065f6:	e090      	b.n	800671a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	18d2      	adds	r2, r2, r3
 8006602:	2120      	movs	r1, #32
 8006604:	187b      	adds	r3, r7, r1
 8006606:	8812      	ldrh	r2, [r2, #0]
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	187b      	adds	r3, r7, r1
 800660c:	881a      	ldrh	r2, [r3, #0]
 800660e:	2380      	movs	r3, #128	@ 0x80
 8006610:	01db      	lsls	r3, r3, #7
 8006612:	4013      	ands	r3, r2
 8006614:	d016      	beq.n	8006644 <USB_DeactivateEndpoint+0x168>
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	18d3      	adds	r3, r2, r3
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29a      	uxth	r2, r3
 8006624:	201e      	movs	r0, #30
 8006626:	183b      	adds	r3, r7, r0
 8006628:	4986      	ldr	r1, [pc, #536]	@ (8006844 <USB_DeactivateEndpoint+0x368>)
 800662a:	400a      	ands	r2, r1
 800662c:	801a      	strh	r2, [r3, #0]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	18d3      	adds	r3, r2, r3
 8006638:	183a      	adds	r2, r7, r0
 800663a:	8812      	ldrh	r2, [r2, #0]
 800663c:	4985      	ldr	r1, [pc, #532]	@ (8006854 <USB_DeactivateEndpoint+0x378>)
 800663e:	430a      	orrs	r2, r1
 8006640:	b292      	uxth	r2, r2
 8006642:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	18d2      	adds	r2, r2, r3
 800664e:	211c      	movs	r1, #28
 8006650:	187b      	adds	r3, r7, r1
 8006652:	8812      	ldrh	r2, [r2, #0]
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	187b      	adds	r3, r7, r1
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	2240      	movs	r2, #64	@ 0x40
 800665c:	4013      	ands	r3, r2
 800665e:	d016      	beq.n	800668e <USB_DeactivateEndpoint+0x1b2>
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	18d3      	adds	r3, r2, r3
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29a      	uxth	r2, r3
 800666e:	201a      	movs	r0, #26
 8006670:	183b      	adds	r3, r7, r0
 8006672:	4974      	ldr	r1, [pc, #464]	@ (8006844 <USB_DeactivateEndpoint+0x368>)
 8006674:	400a      	ands	r2, r1
 8006676:	801a      	strh	r2, [r3, #0]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	18d3      	adds	r3, r2, r3
 8006682:	183a      	adds	r2, r7, r0
 8006684:	8812      	ldrh	r2, [r2, #0]
 8006686:	4970      	ldr	r1, [pc, #448]	@ (8006848 <USB_DeactivateEndpoint+0x36c>)
 8006688:	430a      	orrs	r2, r1
 800668a:	b292      	uxth	r2, r2
 800668c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	18d3      	adds	r3, r2, r3
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	b29a      	uxth	r2, r3
 800669c:	2018      	movs	r0, #24
 800669e:	183b      	adds	r3, r7, r0
 80066a0:	4968      	ldr	r1, [pc, #416]	@ (8006844 <USB_DeactivateEndpoint+0x368>)
 80066a2:	400a      	ands	r2, r1
 80066a4:	801a      	strh	r2, [r3, #0]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	18d3      	adds	r3, r2, r3
 80066b0:	183a      	adds	r2, r7, r0
 80066b2:	8812      	ldrh	r2, [r2, #0]
 80066b4:	4964      	ldr	r1, [pc, #400]	@ (8006848 <USB_DeactivateEndpoint+0x36c>)
 80066b6:	430a      	orrs	r2, r1
 80066b8:	b292      	uxth	r2, r2
 80066ba:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	18d3      	adds	r3, r2, r3
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	2016      	movs	r0, #22
 80066cc:	183b      	adds	r3, r7, r0
 80066ce:	4962      	ldr	r1, [pc, #392]	@ (8006858 <USB_DeactivateEndpoint+0x37c>)
 80066d0:	400a      	ands	r2, r1
 80066d2:	801a      	strh	r2, [r3, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	18d3      	adds	r3, r2, r3
 80066de:	183a      	adds	r2, r7, r0
 80066e0:	8812      	ldrh	r2, [r2, #0]
 80066e2:	495b      	ldr	r1, [pc, #364]	@ (8006850 <USB_DeactivateEndpoint+0x374>)
 80066e4:	430a      	orrs	r2, r1
 80066e6:	b292      	uxth	r2, r2
 80066e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	18d3      	adds	r3, r2, r3
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	2014      	movs	r0, #20
 80066fa:	183b      	adds	r3, r7, r0
 80066fc:	4953      	ldr	r1, [pc, #332]	@ (800684c <USB_DeactivateEndpoint+0x370>)
 80066fe:	400a      	ands	r2, r1
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	18d3      	adds	r3, r2, r3
 800670c:	183a      	adds	r2, r7, r0
 800670e:	8812      	ldrh	r2, [r2, #0]
 8006710:	494f      	ldr	r1, [pc, #316]	@ (8006850 <USB_DeactivateEndpoint+0x374>)
 8006712:	430a      	orrs	r2, r1
 8006714:	b292      	uxth	r2, r2
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	e08f      	b.n	800683a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	18d2      	adds	r2, r2, r3
 8006724:	212e      	movs	r1, #46	@ 0x2e
 8006726:	187b      	adds	r3, r7, r1
 8006728:	8812      	ldrh	r2, [r2, #0]
 800672a:	801a      	strh	r2, [r3, #0]
 800672c:	187b      	adds	r3, r7, r1
 800672e:	881a      	ldrh	r2, [r3, #0]
 8006730:	2380      	movs	r3, #128	@ 0x80
 8006732:	01db      	lsls	r3, r3, #7
 8006734:	4013      	ands	r3, r2
 8006736:	d016      	beq.n	8006766 <USB_DeactivateEndpoint+0x28a>
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	18d3      	adds	r3, r2, r3
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29a      	uxth	r2, r3
 8006746:	202c      	movs	r0, #44	@ 0x2c
 8006748:	183b      	adds	r3, r7, r0
 800674a:	493e      	ldr	r1, [pc, #248]	@ (8006844 <USB_DeactivateEndpoint+0x368>)
 800674c:	400a      	ands	r2, r1
 800674e:	801a      	strh	r2, [r3, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	18d3      	adds	r3, r2, r3
 800675a:	183a      	adds	r2, r7, r0
 800675c:	8812      	ldrh	r2, [r2, #0]
 800675e:	493d      	ldr	r1, [pc, #244]	@ (8006854 <USB_DeactivateEndpoint+0x378>)
 8006760:	430a      	orrs	r2, r1
 8006762:	b292      	uxth	r2, r2
 8006764:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	18d2      	adds	r2, r2, r3
 8006770:	212a      	movs	r1, #42	@ 0x2a
 8006772:	187b      	adds	r3, r7, r1
 8006774:	8812      	ldrh	r2, [r2, #0]
 8006776:	801a      	strh	r2, [r3, #0]
 8006778:	187b      	adds	r3, r7, r1
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	2240      	movs	r2, #64	@ 0x40
 800677e:	4013      	ands	r3, r2
 8006780:	d016      	beq.n	80067b0 <USB_DeactivateEndpoint+0x2d4>
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	18d3      	adds	r3, r2, r3
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b29a      	uxth	r2, r3
 8006790:	2028      	movs	r0, #40	@ 0x28
 8006792:	183b      	adds	r3, r7, r0
 8006794:	492b      	ldr	r1, [pc, #172]	@ (8006844 <USB_DeactivateEndpoint+0x368>)
 8006796:	400a      	ands	r2, r1
 8006798:	801a      	strh	r2, [r3, #0]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	18d3      	adds	r3, r2, r3
 80067a4:	183a      	adds	r2, r7, r0
 80067a6:	8812      	ldrh	r2, [r2, #0]
 80067a8:	4927      	ldr	r1, [pc, #156]	@ (8006848 <USB_DeactivateEndpoint+0x36c>)
 80067aa:	430a      	orrs	r2, r1
 80067ac:	b292      	uxth	r2, r2
 80067ae:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	18d3      	adds	r3, r2, r3
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29a      	uxth	r2, r3
 80067be:	2026      	movs	r0, #38	@ 0x26
 80067c0:	183b      	adds	r3, r7, r0
 80067c2:	4920      	ldr	r1, [pc, #128]	@ (8006844 <USB_DeactivateEndpoint+0x368>)
 80067c4:	400a      	ands	r2, r1
 80067c6:	801a      	strh	r2, [r3, #0]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	18d3      	adds	r3, r2, r3
 80067d2:	183a      	adds	r2, r7, r0
 80067d4:	8812      	ldrh	r2, [r2, #0]
 80067d6:	491f      	ldr	r1, [pc, #124]	@ (8006854 <USB_DeactivateEndpoint+0x378>)
 80067d8:	430a      	orrs	r2, r1
 80067da:	b292      	uxth	r2, r2
 80067dc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	18d3      	adds	r3, r2, r3
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	2024      	movs	r0, #36	@ 0x24
 80067ee:	183b      	adds	r3, r7, r0
 80067f0:	4916      	ldr	r1, [pc, #88]	@ (800684c <USB_DeactivateEndpoint+0x370>)
 80067f2:	400a      	ands	r2, r1
 80067f4:	801a      	strh	r2, [r3, #0]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	18d3      	adds	r3, r2, r3
 8006800:	183a      	adds	r2, r7, r0
 8006802:	8812      	ldrh	r2, [r2, #0]
 8006804:	4912      	ldr	r1, [pc, #72]	@ (8006850 <USB_DeactivateEndpoint+0x374>)
 8006806:	430a      	orrs	r2, r1
 8006808:	b292      	uxth	r2, r2
 800680a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	18d3      	adds	r3, r2, r3
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29a      	uxth	r2, r3
 800681a:	2022      	movs	r0, #34	@ 0x22
 800681c:	183b      	adds	r3, r7, r0
 800681e:	490e      	ldr	r1, [pc, #56]	@ (8006858 <USB_DeactivateEndpoint+0x37c>)
 8006820:	400a      	ands	r2, r1
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	18d3      	adds	r3, r2, r3
 800682e:	183a      	adds	r2, r7, r0
 8006830:	8812      	ldrh	r2, [r2, #0]
 8006832:	4907      	ldr	r1, [pc, #28]	@ (8006850 <USB_DeactivateEndpoint+0x374>)
 8006834:	430a      	orrs	r2, r1
 8006836:	b292      	uxth	r2, r2
 8006838:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	0018      	movs	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	b00c      	add	sp, #48	@ 0x30
 8006842:	bd80      	pop	{r7, pc}
 8006844:	ffff8f8f 	.word	0xffff8f8f
 8006848:	ffff80c0 	.word	0xffff80c0
 800684c:	ffff8fbf 	.word	0xffff8fbf
 8006850:	ffff8080 	.word	0xffff8080
 8006854:	ffffc080 	.word	0xffffc080
 8006858:	ffffbf8f 	.word	0xffffbf8f

0800685c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800685c:	b5b0      	push	{r4, r5, r7, lr}
 800685e:	b0ac      	sub	sp, #176	@ 0xb0
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	785b      	ldrb	r3, [r3, #1]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d001      	beq.n	8006872 <USB_EPStartXfer+0x16>
 800686e:	f000 fd07 	bl	8007280 <USB_EPStartXfer+0xa24>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	429a      	cmp	r2, r3
 800687c:	d905      	bls.n	800688a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	22ac      	movs	r2, #172	@ 0xac
 8006884:	18ba      	adds	r2, r7, r2
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	e004      	b.n	8006894 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	22ac      	movs	r2, #172	@ 0xac
 8006890:	18ba      	adds	r2, r7, r2
 8006892:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	7b1b      	ldrb	r3, [r3, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d124      	bne.n	80068e6 <USB_EPStartXfer+0x8a>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	6959      	ldr	r1, [r3, #20]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	88da      	ldrh	r2, [r3, #6]
 80068a4:	24ac      	movs	r4, #172	@ 0xac
 80068a6:	193b      	adds	r3, r7, r4
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fef5 	bl	800769c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2250      	movs	r2, #80	@ 0x50
 80068ba:	5a9b      	ldrh	r3, [r3, r2]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	001a      	movs	r2, r3
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	189b      	adds	r3, r3, r2
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	00da      	lsls	r2, r3, #3
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	18d3      	adds	r3, r2, r3
 80068d0:	4acf      	ldr	r2, [pc, #828]	@ (8006c10 <USB_EPStartXfer+0x3b4>)
 80068d2:	4694      	mov	ip, r2
 80068d4:	4463      	add	r3, ip
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	193b      	adds	r3, r7, r4
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	f000 fca9 	bl	8007238 <USB_EPStartXfer+0x9dc>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	78db      	ldrb	r3, [r3, #3]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d000      	beq.n	80068f0 <USB_EPStartXfer+0x94>
 80068ee:	e347      	b.n	8006f80 <USB_EPStartXfer+0x724>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	6a1a      	ldr	r2, [r3, #32]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d800      	bhi.n	80068fe <USB_EPStartXfer+0xa2>
 80068fc:	e2f0      	b.n	8006ee0 <USB_EPStartXfer+0x684>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	18d3      	adds	r3, r2, r3
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	b29a      	uxth	r2, r3
 800690c:	2056      	movs	r0, #86	@ 0x56
 800690e:	183b      	adds	r3, r7, r0
 8006910:	49c0      	ldr	r1, [pc, #768]	@ (8006c14 <USB_EPStartXfer+0x3b8>)
 8006912:	400a      	ands	r2, r1
 8006914:	801a      	strh	r2, [r3, #0]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	18d3      	adds	r3, r2, r3
 8006920:	183a      	adds	r2, r7, r0
 8006922:	8812      	ldrh	r2, [r2, #0]
 8006924:	49bc      	ldr	r1, [pc, #752]	@ (8006c18 <USB_EPStartXfer+0x3bc>)
 8006926:	430a      	orrs	r2, r1
 8006928:	b292      	uxth	r2, r2
 800692a:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	6a1a      	ldr	r2, [r3, #32]
 8006930:	21ac      	movs	r1, #172	@ 0xac
 8006932:	187b      	adds	r3, r7, r1
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	18d3      	adds	r3, r2, r3
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	001a      	movs	r2, r3
 800694c:	2340      	movs	r3, #64	@ 0x40
 800694e:	4013      	ands	r3, r2
 8006950:	d100      	bne.n	8006954 <USB_EPStartXfer+0xf8>
 8006952:	e167      	b.n	8006c24 <USB_EPStartXfer+0x3c8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	633b      	str	r3, [r7, #48]	@ 0x30
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	785b      	ldrb	r3, [r3, #1]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d16c      	bne.n	8006a3a <USB_EPStartXfer+0x1de>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2250      	movs	r2, #80	@ 0x50
 8006968:	5a9b      	ldrh	r3, [r3, r2]
 800696a:	b29b      	uxth	r3, r3
 800696c:	001a      	movs	r2, r3
 800696e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006970:	189b      	adds	r3, r3, r2
 8006972:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	00da      	lsls	r2, r3, #3
 800697a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697c:	18d3      	adds	r3, r2, r3
 800697e:	4aa7      	ldr	r2, [pc, #668]	@ (8006c1c <USB_EPStartXfer+0x3c0>)
 8006980:	4694      	mov	ip, r2
 8006982:	4463      	add	r3, ip
 8006984:	627b      	str	r3, [r7, #36]	@ 0x24
 8006986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	059b      	lsls	r3, r3, #22
 800698e:	0d9b      	lsrs	r3, r3, #22
 8006990:	b29a      	uxth	r2, r3
 8006992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006994:	801a      	strh	r2, [r3, #0]
 8006996:	187b      	adds	r3, r7, r1
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d108      	bne.n	80069b0 <USB_EPStartXfer+0x154>
 800699e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	4a9e      	ldr	r2, [pc, #632]	@ (8006c20 <USB_EPStartXfer+0x3c4>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	801a      	strh	r2, [r3, #0]
 80069ae:	e05f      	b.n	8006a70 <USB_EPStartXfer+0x214>
 80069b0:	22ac      	movs	r2, #172	@ 0xac
 80069b2:	18bb      	adds	r3, r7, r2
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80069b8:	d81d      	bhi.n	80069f6 <USB_EPStartXfer+0x19a>
 80069ba:	18bb      	adds	r3, r7, r2
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	21a8      	movs	r1, #168	@ 0xa8
 80069c2:	1878      	adds	r0, r7, r1
 80069c4:	6003      	str	r3, [r0, #0]
 80069c6:	18bb      	adds	r3, r7, r2
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2201      	movs	r2, #1
 80069cc:	4013      	ands	r3, r2
 80069ce:	d004      	beq.n	80069da <USB_EPStartXfer+0x17e>
 80069d0:	187b      	adds	r3, r7, r1
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3301      	adds	r3, #1
 80069d6:	187a      	adds	r2, r7, r1
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29a      	uxth	r2, r3
 80069e0:	23a8      	movs	r3, #168	@ 0xa8
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	029b      	lsls	r3, r3, #10
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	4313      	orrs	r3, r2
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f2:	801a      	strh	r2, [r3, #0]
 80069f4:	e03c      	b.n	8006a70 <USB_EPStartXfer+0x214>
 80069f6:	22ac      	movs	r2, #172	@ 0xac
 80069f8:	18bb      	adds	r3, r7, r2
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	21a8      	movs	r1, #168	@ 0xa8
 8006a00:	1878      	adds	r0, r7, r1
 8006a02:	6003      	str	r3, [r0, #0]
 8006a04:	18bb      	adds	r3, r7, r2
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	221f      	movs	r2, #31
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	d104      	bne.n	8006a18 <USB_EPStartXfer+0x1bc>
 8006a0e:	187b      	adds	r3, r7, r1
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	187a      	adds	r2, r7, r1
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	23a8      	movs	r3, #168	@ 0xa8
 8006a20:	18fb      	adds	r3, r7, r3
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	029b      	lsls	r3, r3, #10
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	4a7c      	ldr	r2, [pc, #496]	@ (8006c20 <USB_EPStartXfer+0x3c4>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	e01a      	b.n	8006a70 <USB_EPStartXfer+0x214>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d116      	bne.n	8006a70 <USB_EPStartXfer+0x214>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2250      	movs	r2, #80	@ 0x50
 8006a46:	5a9b      	ldrh	r3, [r3, r2]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	001a      	movs	r2, r3
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4e:	189b      	adds	r3, r3, r2
 8006a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	00da      	lsls	r2, r3, #3
 8006a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5a:	18d3      	adds	r3, r2, r3
 8006a5c:	4a6f      	ldr	r2, [pc, #444]	@ (8006c1c <USB_EPStartXfer+0x3c0>)
 8006a5e:	4694      	mov	ip, r2
 8006a60:	4463      	add	r3, ip
 8006a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a64:	23ac      	movs	r3, #172	@ 0xac
 8006a66:	18fb      	adds	r3, r7, r3
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a70:	2076      	movs	r0, #118	@ 0x76
 8006a72:	183b      	adds	r3, r7, r0
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	8952      	ldrh	r2, [r2, #10]
 8006a78:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	6959      	ldr	r1, [r3, #20]
 8006a7e:	25ac      	movs	r5, #172	@ 0xac
 8006a80:	197b      	adds	r3, r7, r5
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	b29c      	uxth	r4, r3
 8006a86:	183b      	adds	r3, r7, r0
 8006a88:	881a      	ldrh	r2, [r3, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	0023      	movs	r3, r4
 8006a8e:	f000 fe05 	bl	800769c <USB_WritePMA>
            ep->xfer_buff += len;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	695a      	ldr	r2, [r3, #20]
 8006a96:	197b      	adds	r3, r7, r5
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	18d2      	adds	r2, r2, r3
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	6a1a      	ldr	r2, [r3, #32]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d907      	bls.n	8006abc <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	6a1a      	ldr	r2, [r3, #32]
 8006ab0:	197b      	adds	r3, r7, r5
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	1ad2      	subs	r2, r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	621a      	str	r2, [r3, #32]
 8006aba:	e007      	b.n	8006acc <USB_EPStartXfer+0x270>
            }
            else
            {
              len = ep->xfer_len_db;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	22ac      	movs	r2, #172	@ 0xac
 8006ac2:	18ba      	adds	r2, r7, r2
 8006ac4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d16d      	bne.n	8006bb0 <USB_EPStartXfer+0x354>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	61bb      	str	r3, [r7, #24]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2250      	movs	r2, #80	@ 0x50
 8006adc:	5a9b      	ldrh	r3, [r3, r2]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	001a      	movs	r2, r3
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	189b      	adds	r3, r3, r2
 8006ae6:	61bb      	str	r3, [r7, #24]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	00da      	lsls	r2, r3, #3
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	18d3      	adds	r3, r2, r3
 8006af2:	4a47      	ldr	r2, [pc, #284]	@ (8006c10 <USB_EPStartXfer+0x3b4>)
 8006af4:	4694      	mov	ip, r2
 8006af6:	4463      	add	r3, ip
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	881b      	ldrh	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	059b      	lsls	r3, r3, #22
 8006b02:	0d9b      	lsrs	r3, r3, #22
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	801a      	strh	r2, [r3, #0]
 8006b0a:	23ac      	movs	r3, #172	@ 0xac
 8006b0c:	18fb      	adds	r3, r7, r3
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d108      	bne.n	8006b26 <USB_EPStartXfer+0x2ca>
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	4a41      	ldr	r2, [pc, #260]	@ (8006c20 <USB_EPStartXfer+0x3c4>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	801a      	strh	r2, [r3, #0]
 8006b24:	e061      	b.n	8006bea <USB_EPStartXfer+0x38e>
 8006b26:	22ac      	movs	r2, #172	@ 0xac
 8006b28:	18bb      	adds	r3, r7, r2
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b2e:	d81d      	bhi.n	8006b6c <USB_EPStartXfer+0x310>
 8006b30:	18bb      	adds	r3, r7, r2
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	085b      	lsrs	r3, r3, #1
 8006b36:	21a4      	movs	r1, #164	@ 0xa4
 8006b38:	1878      	adds	r0, r7, r1
 8006b3a:	6003      	str	r3, [r0, #0]
 8006b3c:	18bb      	adds	r3, r7, r2
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2201      	movs	r2, #1
 8006b42:	4013      	ands	r3, r2
 8006b44:	d004      	beq.n	8006b50 <USB_EPStartXfer+0x2f4>
 8006b46:	187b      	adds	r3, r7, r1
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	187a      	adds	r2, r7, r1
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	23a4      	movs	r3, #164	@ 0xa4
 8006b58:	18fb      	adds	r3, r7, r3
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	029b      	lsls	r3, r3, #10
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	4313      	orrs	r3, r2
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	801a      	strh	r2, [r3, #0]
 8006b6a:	e03e      	b.n	8006bea <USB_EPStartXfer+0x38e>
 8006b6c:	22ac      	movs	r2, #172	@ 0xac
 8006b6e:	18bb      	adds	r3, r7, r2
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	21a4      	movs	r1, #164	@ 0xa4
 8006b76:	1878      	adds	r0, r7, r1
 8006b78:	6003      	str	r3, [r0, #0]
 8006b7a:	18bb      	adds	r3, r7, r2
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	221f      	movs	r2, #31
 8006b80:	4013      	ands	r3, r2
 8006b82:	d104      	bne.n	8006b8e <USB_EPStartXfer+0x332>
 8006b84:	187b      	adds	r3, r7, r1
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	187a      	adds	r2, r7, r1
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	881b      	ldrh	r3, [r3, #0]
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	23a4      	movs	r3, #164	@ 0xa4
 8006b96:	18fb      	adds	r3, r7, r3
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	029b      	lsls	r3, r3, #10
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c20 <USB_EPStartXfer+0x3c4>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	801a      	strh	r2, [r3, #0]
 8006bae:	e01c      	b.n	8006bea <USB_EPStartXfer+0x38e>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	785b      	ldrb	r3, [r3, #1]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d118      	bne.n	8006bea <USB_EPStartXfer+0x38e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	623b      	str	r3, [r7, #32]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2250      	movs	r2, #80	@ 0x50
 8006bc0:	5a9b      	ldrh	r3, [r3, r2]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	001a      	movs	r2, r3
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	189b      	adds	r3, r3, r2
 8006bca:	623b      	str	r3, [r7, #32]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	00da      	lsls	r2, r3, #3
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	18d3      	adds	r3, r2, r3
 8006bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8006c10 <USB_EPStartXfer+0x3b4>)
 8006bd8:	4694      	mov	ip, r2
 8006bda:	4463      	add	r3, ip
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	23ac      	movs	r3, #172	@ 0xac
 8006be0:	18fb      	adds	r3, r7, r3
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006bea:	2076      	movs	r0, #118	@ 0x76
 8006bec:	183b      	adds	r3, r7, r0
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	8912      	ldrh	r2, [r2, #8]
 8006bf2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	6959      	ldr	r1, [r3, #20]
 8006bf8:	23ac      	movs	r3, #172	@ 0xac
 8006bfa:	18fb      	adds	r3, r7, r3
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	b29c      	uxth	r4, r3
 8006c00:	183b      	adds	r3, r7, r0
 8006c02:	881a      	ldrh	r2, [r3, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	0023      	movs	r3, r4
 8006c08:	f000 fd48 	bl	800769c <USB_WritePMA>
 8006c0c:	e314      	b.n	8007238 <USB_EPStartXfer+0x9dc>
 8006c0e:	46c0      	nop			@ (mov r8, r8)
 8006c10:	00000402 	.word	0x00000402
 8006c14:	ffff8f8f 	.word	0xffff8f8f
 8006c18:	ffff8180 	.word	0xffff8180
 8006c1c:	00000406 	.word	0x00000406
 8006c20:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d16d      	bne.n	8006d08 <USB_EPStartXfer+0x4ac>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2250      	movs	r2, #80	@ 0x50
 8006c34:	5a9b      	ldrh	r3, [r3, r2]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	001a      	movs	r2, r3
 8006c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c3c:	189b      	adds	r3, r3, r2
 8006c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	00da      	lsls	r2, r3, #3
 8006c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c48:	18d3      	adds	r3, r2, r3
 8006c4a:	4ac8      	ldr	r2, [pc, #800]	@ (8006f6c <USB_EPStartXfer+0x710>)
 8006c4c:	4694      	mov	ip, r2
 8006c4e:	4463      	add	r3, ip
 8006c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c54:	881b      	ldrh	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	059b      	lsls	r3, r3, #22
 8006c5a:	0d9b      	lsrs	r3, r3, #22
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c60:	801a      	strh	r2, [r3, #0]
 8006c62:	23ac      	movs	r3, #172	@ 0xac
 8006c64:	18fb      	adds	r3, r7, r3
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d108      	bne.n	8006c7e <USB_EPStartXfer+0x422>
 8006c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	4abf      	ldr	r2, [pc, #764]	@ (8006f70 <USB_EPStartXfer+0x714>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c7a:	801a      	strh	r2, [r3, #0]
 8006c7c:	e061      	b.n	8006d42 <USB_EPStartXfer+0x4e6>
 8006c7e:	22ac      	movs	r2, #172	@ 0xac
 8006c80:	18bb      	adds	r3, r7, r2
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c86:	d81d      	bhi.n	8006cc4 <USB_EPStartXfer+0x468>
 8006c88:	18bb      	adds	r3, r7, r2
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	21a0      	movs	r1, #160	@ 0xa0
 8006c90:	1878      	adds	r0, r7, r1
 8006c92:	6003      	str	r3, [r0, #0]
 8006c94:	18bb      	adds	r3, r7, r2
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	d004      	beq.n	8006ca8 <USB_EPStartXfer+0x44c>
 8006c9e:	187b      	adds	r3, r7, r1
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	187a      	adds	r2, r7, r1
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	23a0      	movs	r3, #160	@ 0xa0
 8006cb0:	18fb      	adds	r3, r7, r3
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	029b      	lsls	r3, r3, #10
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cc0:	801a      	strh	r2, [r3, #0]
 8006cc2:	e03e      	b.n	8006d42 <USB_EPStartXfer+0x4e6>
 8006cc4:	22ac      	movs	r2, #172	@ 0xac
 8006cc6:	18bb      	adds	r3, r7, r2
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	21a0      	movs	r1, #160	@ 0xa0
 8006cce:	1878      	adds	r0, r7, r1
 8006cd0:	6003      	str	r3, [r0, #0]
 8006cd2:	18bb      	adds	r3, r7, r2
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	221f      	movs	r2, #31
 8006cd8:	4013      	ands	r3, r2
 8006cda:	d104      	bne.n	8006ce6 <USB_EPStartXfer+0x48a>
 8006cdc:	187b      	adds	r3, r7, r1
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	187a      	adds	r2, r7, r1
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	23a0      	movs	r3, #160	@ 0xa0
 8006cee:	18fb      	adds	r3, r7, r3
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	029b      	lsls	r3, r3, #10
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	4a9c      	ldr	r2, [pc, #624]	@ (8006f70 <USB_EPStartXfer+0x714>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d04:	801a      	strh	r2, [r3, #0]
 8006d06:	e01c      	b.n	8006d42 <USB_EPStartXfer+0x4e6>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	785b      	ldrb	r3, [r3, #1]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d118      	bne.n	8006d42 <USB_EPStartXfer+0x4e6>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2250      	movs	r2, #80	@ 0x50
 8006d18:	5a9b      	ldrh	r3, [r3, r2]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	001a      	movs	r2, r3
 8006d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d20:	189b      	adds	r3, r3, r2
 8006d22:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	00da      	lsls	r2, r3, #3
 8006d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d2c:	18d3      	adds	r3, r2, r3
 8006d2e:	4a8f      	ldr	r2, [pc, #572]	@ (8006f6c <USB_EPStartXfer+0x710>)
 8006d30:	4694      	mov	ip, r2
 8006d32:	4463      	add	r3, ip
 8006d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d36:	23ac      	movs	r3, #172	@ 0xac
 8006d38:	18fb      	adds	r3, r7, r3
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d42:	2076      	movs	r0, #118	@ 0x76
 8006d44:	183b      	adds	r3, r7, r0
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	8912      	ldrh	r2, [r2, #8]
 8006d4a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	6959      	ldr	r1, [r3, #20]
 8006d50:	25ac      	movs	r5, #172	@ 0xac
 8006d52:	197b      	adds	r3, r7, r5
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	b29c      	uxth	r4, r3
 8006d58:	183b      	adds	r3, r7, r0
 8006d5a:	881a      	ldrh	r2, [r3, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	0023      	movs	r3, r4
 8006d60:	f000 fc9c 	bl	800769c <USB_WritePMA>
            ep->xfer_buff += len;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	695a      	ldr	r2, [r3, #20]
 8006d68:	197b      	adds	r3, r7, r5
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	18d2      	adds	r2, r2, r3
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	6a1a      	ldr	r2, [r3, #32]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d907      	bls.n	8006d8e <USB_EPStartXfer+0x532>
            {
              ep->xfer_len_db -= len;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6a1a      	ldr	r2, [r3, #32]
 8006d82:	197b      	adds	r3, r7, r5
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	1ad2      	subs	r2, r2, r3
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	621a      	str	r2, [r3, #32]
 8006d8c:	e007      	b.n	8006d9e <USB_EPStartXfer+0x542>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	22ac      	movs	r2, #172	@ 0xac
 8006d94:	18ba      	adds	r2, r7, r2
 8006d96:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d16d      	bne.n	8006e86 <USB_EPStartXfer+0x62a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2250      	movs	r2, #80	@ 0x50
 8006db2:	5a9b      	ldrh	r3, [r3, r2]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	001a      	movs	r2, r3
 8006db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dba:	189b      	adds	r3, r3, r2
 8006dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	00da      	lsls	r2, r3, #3
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc6:	18d3      	adds	r3, r2, r3
 8006dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8006f74 <USB_EPStartXfer+0x718>)
 8006dca:	4694      	mov	ip, r2
 8006dcc:	4463      	add	r3, ip
 8006dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	059b      	lsls	r3, r3, #22
 8006dd8:	0d9b      	lsrs	r3, r3, #22
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dde:	801a      	strh	r2, [r3, #0]
 8006de0:	23ac      	movs	r3, #172	@ 0xac
 8006de2:	18fb      	adds	r3, r7, r3
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d108      	bne.n	8006dfc <USB_EPStartXfer+0x5a0>
 8006dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	4a5f      	ldr	r2, [pc, #380]	@ (8006f70 <USB_EPStartXfer+0x714>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df8:	801a      	strh	r2, [r3, #0]
 8006dfa:	e05f      	b.n	8006ebc <USB_EPStartXfer+0x660>
 8006dfc:	22ac      	movs	r2, #172	@ 0xac
 8006dfe:	18bb      	adds	r3, r7, r2
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e04:	d81d      	bhi.n	8006e42 <USB_EPStartXfer+0x5e6>
 8006e06:	18bb      	adds	r3, r7, r2
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	085b      	lsrs	r3, r3, #1
 8006e0c:	219c      	movs	r1, #156	@ 0x9c
 8006e0e:	1878      	adds	r0, r7, r1
 8006e10:	6003      	str	r3, [r0, #0]
 8006e12:	18bb      	adds	r3, r7, r2
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2201      	movs	r2, #1
 8006e18:	4013      	ands	r3, r2
 8006e1a:	d004      	beq.n	8006e26 <USB_EPStartXfer+0x5ca>
 8006e1c:	187b      	adds	r3, r7, r1
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	187a      	adds	r2, r7, r1
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	239c      	movs	r3, #156	@ 0x9c
 8006e2e:	18fb      	adds	r3, r7, r3
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	029b      	lsls	r3, r3, #10
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3e:	801a      	strh	r2, [r3, #0]
 8006e40:	e03c      	b.n	8006ebc <USB_EPStartXfer+0x660>
 8006e42:	22ac      	movs	r2, #172	@ 0xac
 8006e44:	18bb      	adds	r3, r7, r2
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	219c      	movs	r1, #156	@ 0x9c
 8006e4c:	1878      	adds	r0, r7, r1
 8006e4e:	6003      	str	r3, [r0, #0]
 8006e50:	18bb      	adds	r3, r7, r2
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	221f      	movs	r2, #31
 8006e56:	4013      	ands	r3, r2
 8006e58:	d104      	bne.n	8006e64 <USB_EPStartXfer+0x608>
 8006e5a:	187b      	adds	r3, r7, r1
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	187a      	adds	r2, r7, r1
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	239c      	movs	r3, #156	@ 0x9c
 8006e6c:	18fb      	adds	r3, r7, r3
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	029b      	lsls	r3, r3, #10
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	4313      	orrs	r3, r2
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	4a3d      	ldr	r2, [pc, #244]	@ (8006f70 <USB_EPStartXfer+0x714>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e82:	801a      	strh	r2, [r3, #0]
 8006e84:	e01a      	b.n	8006ebc <USB_EPStartXfer+0x660>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d116      	bne.n	8006ebc <USB_EPStartXfer+0x660>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2250      	movs	r2, #80	@ 0x50
 8006e92:	5a9b      	ldrh	r3, [r3, r2]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	001a      	movs	r2, r3
 8006e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e9a:	189b      	adds	r3, r3, r2
 8006e9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	00da      	lsls	r2, r3, #3
 8006ea4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ea6:	18d3      	adds	r3, r2, r3
 8006ea8:	4a32      	ldr	r2, [pc, #200]	@ (8006f74 <USB_EPStartXfer+0x718>)
 8006eaa:	4694      	mov	ip, r2
 8006eac:	4463      	add	r3, ip
 8006eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb0:	23ac      	movs	r3, #172	@ 0xac
 8006eb2:	18fb      	adds	r3, r7, r3
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ebc:	2076      	movs	r0, #118	@ 0x76
 8006ebe:	183b      	adds	r3, r7, r0
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	8952      	ldrh	r2, [r2, #10]
 8006ec4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	6959      	ldr	r1, [r3, #20]
 8006eca:	23ac      	movs	r3, #172	@ 0xac
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	b29c      	uxth	r4, r3
 8006ed2:	183b      	adds	r3, r7, r0
 8006ed4:	881a      	ldrh	r2, [r3, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	0023      	movs	r3, r4
 8006eda:	f000 fbdf 	bl	800769c <USB_WritePMA>
 8006ede:	e1ab      	b.n	8007238 <USB_EPStartXfer+0x9dc>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	20ac      	movs	r0, #172	@ 0xac
 8006ee6:	183a      	adds	r2, r7, r0
 8006ee8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	18d3      	adds	r3, r2, r3
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	2462      	movs	r4, #98	@ 0x62
 8006efa:	193b      	adds	r3, r7, r4
 8006efc:	491e      	ldr	r1, [pc, #120]	@ (8006f78 <USB_EPStartXfer+0x71c>)
 8006efe:	400a      	ands	r2, r1
 8006f00:	801a      	strh	r2, [r3, #0]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	18d3      	adds	r3, r2, r3
 8006f0c:	193a      	adds	r2, r7, r4
 8006f0e:	8812      	ldrh	r2, [r2, #0]
 8006f10:	491a      	ldr	r1, [pc, #104]	@ (8006f7c <USB_EPStartXfer+0x720>)
 8006f12:	430a      	orrs	r2, r1
 8006f14:	b292      	uxth	r2, r2
 8006f16:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2250      	movs	r2, #80	@ 0x50
 8006f20:	5a9b      	ldrh	r3, [r3, r2]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	001a      	movs	r2, r3
 8006f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f28:	189b      	adds	r3, r3, r2
 8006f2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	00da      	lsls	r2, r3, #3
 8006f32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f34:	18d3      	adds	r3, r2, r3
 8006f36:	4a0d      	ldr	r2, [pc, #52]	@ (8006f6c <USB_EPStartXfer+0x710>)
 8006f38:	4694      	mov	ip, r2
 8006f3a:	4463      	add	r3, ip
 8006f3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f3e:	183b      	adds	r3, r7, r0
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f46:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f48:	2576      	movs	r5, #118	@ 0x76
 8006f4a:	197b      	adds	r3, r7, r5
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	8912      	ldrh	r2, [r2, #8]
 8006f50:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6959      	ldr	r1, [r3, #20]
 8006f56:	183b      	adds	r3, r7, r0
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	b29c      	uxth	r4, r3
 8006f5c:	197b      	adds	r3, r7, r5
 8006f5e:	881a      	ldrh	r2, [r3, #0]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	0023      	movs	r3, r4
 8006f64:	f000 fb9a 	bl	800769c <USB_WritePMA>
 8006f68:	e166      	b.n	8007238 <USB_EPStartXfer+0x9dc>
 8006f6a:	46c0      	nop			@ (mov r8, r8)
 8006f6c:	00000402 	.word	0x00000402
 8006f70:	ffff8000 	.word	0xffff8000
 8006f74:	00000406 	.word	0x00000406
 8006f78:	ffff8e8f 	.word	0xffff8e8f
 8006f7c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	6a1a      	ldr	r2, [r3, #32]
 8006f84:	21ac      	movs	r1, #172	@ 0xac
 8006f86:	187b      	adds	r3, r7, r1
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	1ad2      	subs	r2, r2, r3
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	18d3      	adds	r3, r2, r3
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	001a      	movs	r2, r3
 8006fa0:	2340      	movs	r3, #64	@ 0x40
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	d100      	bne.n	8006fa8 <USB_EPStartXfer+0x74c>
 8006fa6:	e09f      	b.n	80070e8 <USB_EPStartXfer+0x88c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d16c      	bne.n	800708e <USB_EPStartXfer+0x832>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2250      	movs	r2, #80	@ 0x50
 8006fbc:	5a9b      	ldrh	r3, [r3, r2]
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	001a      	movs	r2, r3
 8006fc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fc4:	189b      	adds	r3, r3, r2
 8006fc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	00da      	lsls	r2, r3, #3
 8006fce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fd0:	18d3      	adds	r3, r2, r3
 8006fd2:	4ad2      	ldr	r2, [pc, #840]	@ (800731c <USB_EPStartXfer+0xac0>)
 8006fd4:	4694      	mov	ip, r2
 8006fd6:	4463      	add	r3, ip
 8006fd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	059b      	lsls	r3, r3, #22
 8006fe2:	0d9b      	lsrs	r3, r3, #22
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fe8:	801a      	strh	r2, [r3, #0]
 8006fea:	187b      	adds	r3, r7, r1
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d108      	bne.n	8007004 <USB_EPStartXfer+0x7a8>
 8006ff2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	4ac9      	ldr	r2, [pc, #804]	@ (8007320 <USB_EPStartXfer+0xac4>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007000:	801a      	strh	r2, [r3, #0]
 8007002:	e05f      	b.n	80070c4 <USB_EPStartXfer+0x868>
 8007004:	22ac      	movs	r2, #172	@ 0xac
 8007006:	18bb      	adds	r3, r7, r2
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b3e      	cmp	r3, #62	@ 0x3e
 800700c:	d81d      	bhi.n	800704a <USB_EPStartXfer+0x7ee>
 800700e:	18bb      	adds	r3, r7, r2
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	085b      	lsrs	r3, r3, #1
 8007014:	2198      	movs	r1, #152	@ 0x98
 8007016:	1878      	adds	r0, r7, r1
 8007018:	6003      	str	r3, [r0, #0]
 800701a:	18bb      	adds	r3, r7, r2
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2201      	movs	r2, #1
 8007020:	4013      	ands	r3, r2
 8007022:	d004      	beq.n	800702e <USB_EPStartXfer+0x7d2>
 8007024:	187b      	adds	r3, r7, r1
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3301      	adds	r3, #1
 800702a:	187a      	adds	r2, r7, r1
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	b29a      	uxth	r2, r3
 8007034:	2398      	movs	r3, #152	@ 0x98
 8007036:	18fb      	adds	r3, r7, r3
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	b29b      	uxth	r3, r3
 800703c:	029b      	lsls	r3, r3, #10
 800703e:	b29b      	uxth	r3, r3
 8007040:	4313      	orrs	r3, r2
 8007042:	b29a      	uxth	r2, r3
 8007044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007046:	801a      	strh	r2, [r3, #0]
 8007048:	e03c      	b.n	80070c4 <USB_EPStartXfer+0x868>
 800704a:	22ac      	movs	r2, #172	@ 0xac
 800704c:	18bb      	adds	r3, r7, r2
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	095b      	lsrs	r3, r3, #5
 8007052:	2198      	movs	r1, #152	@ 0x98
 8007054:	1878      	adds	r0, r7, r1
 8007056:	6003      	str	r3, [r0, #0]
 8007058:	18bb      	adds	r3, r7, r2
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	221f      	movs	r2, #31
 800705e:	4013      	ands	r3, r2
 8007060:	d104      	bne.n	800706c <USB_EPStartXfer+0x810>
 8007062:	187b      	adds	r3, r7, r1
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3b01      	subs	r3, #1
 8007068:	187a      	adds	r2, r7, r1
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	b29a      	uxth	r2, r3
 8007072:	2398      	movs	r3, #152	@ 0x98
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	b29b      	uxth	r3, r3
 800707a:	029b      	lsls	r3, r3, #10
 800707c:	b29b      	uxth	r3, r3
 800707e:	4313      	orrs	r3, r2
 8007080:	b29b      	uxth	r3, r3
 8007082:	4aa7      	ldr	r2, [pc, #668]	@ (8007320 <USB_EPStartXfer+0xac4>)
 8007084:	4313      	orrs	r3, r2
 8007086:	b29a      	uxth	r2, r3
 8007088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800708a:	801a      	strh	r2, [r3, #0]
 800708c:	e01a      	b.n	80070c4 <USB_EPStartXfer+0x868>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	785b      	ldrb	r3, [r3, #1]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d116      	bne.n	80070c4 <USB_EPStartXfer+0x868>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2250      	movs	r2, #80	@ 0x50
 800709a:	5a9b      	ldrh	r3, [r3, r2]
 800709c:	b29b      	uxth	r3, r3
 800709e:	001a      	movs	r2, r3
 80070a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070a2:	189b      	adds	r3, r3, r2
 80070a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	00da      	lsls	r2, r3, #3
 80070ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070ae:	18d3      	adds	r3, r2, r3
 80070b0:	4a9a      	ldr	r2, [pc, #616]	@ (800731c <USB_EPStartXfer+0xac0>)
 80070b2:	4694      	mov	ip, r2
 80070b4:	4463      	add	r3, ip
 80070b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070b8:	23ac      	movs	r3, #172	@ 0xac
 80070ba:	18fb      	adds	r3, r7, r3
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	b29a      	uxth	r2, r3
 80070c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80070c4:	2076      	movs	r0, #118	@ 0x76
 80070c6:	183b      	adds	r3, r7, r0
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	8952      	ldrh	r2, [r2, #10]
 80070cc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	6959      	ldr	r1, [r3, #20]
 80070d2:	23ac      	movs	r3, #172	@ 0xac
 80070d4:	18fb      	adds	r3, r7, r3
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	b29c      	uxth	r4, r3
 80070da:	183b      	adds	r3, r7, r0
 80070dc:	881a      	ldrh	r2, [r3, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	0023      	movs	r3, r4
 80070e2:	f000 fadb 	bl	800769c <USB_WritePMA>
 80070e6:	e0a7      	b.n	8007238 <USB_EPStartXfer+0x9dc>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	785b      	ldrb	r3, [r3, #1]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d16d      	bne.n	80071cc <USB_EPStartXfer+0x970>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2250      	movs	r2, #80	@ 0x50
 80070f8:	5a9b      	ldrh	r3, [r3, r2]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	001a      	movs	r2, r3
 80070fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007100:	189b      	adds	r3, r3, r2
 8007102:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	00da      	lsls	r2, r3, #3
 800710a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800710c:	18d3      	adds	r3, r2, r3
 800710e:	4a85      	ldr	r2, [pc, #532]	@ (8007324 <USB_EPStartXfer+0xac8>)
 8007110:	4694      	mov	ip, r2
 8007112:	4463      	add	r3, ip
 8007114:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007116:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	b29b      	uxth	r3, r3
 800711c:	059b      	lsls	r3, r3, #22
 800711e:	0d9b      	lsrs	r3, r3, #22
 8007120:	b29a      	uxth	r2, r3
 8007122:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007124:	801a      	strh	r2, [r3, #0]
 8007126:	23ac      	movs	r3, #172	@ 0xac
 8007128:	18fb      	adds	r3, r7, r3
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d108      	bne.n	8007142 <USB_EPStartXfer+0x8e6>
 8007130:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	4a7a      	ldr	r2, [pc, #488]	@ (8007320 <USB_EPStartXfer+0xac4>)
 8007138:	4313      	orrs	r3, r2
 800713a:	b29a      	uxth	r2, r3
 800713c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	e069      	b.n	8007216 <USB_EPStartXfer+0x9ba>
 8007142:	22ac      	movs	r2, #172	@ 0xac
 8007144:	18bb      	adds	r3, r7, r2
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b3e      	cmp	r3, #62	@ 0x3e
 800714a:	d81d      	bhi.n	8007188 <USB_EPStartXfer+0x92c>
 800714c:	18bb      	adds	r3, r7, r2
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	085b      	lsrs	r3, r3, #1
 8007152:	2194      	movs	r1, #148	@ 0x94
 8007154:	1878      	adds	r0, r7, r1
 8007156:	6003      	str	r3, [r0, #0]
 8007158:	18bb      	adds	r3, r7, r2
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2201      	movs	r2, #1
 800715e:	4013      	ands	r3, r2
 8007160:	d004      	beq.n	800716c <USB_EPStartXfer+0x910>
 8007162:	187b      	adds	r3, r7, r1
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3301      	adds	r3, #1
 8007168:	187a      	adds	r2, r7, r1
 800716a:	6013      	str	r3, [r2, #0]
 800716c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29a      	uxth	r2, r3
 8007172:	2394      	movs	r3, #148	@ 0x94
 8007174:	18fb      	adds	r3, r7, r3
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	029b      	lsls	r3, r3, #10
 800717c:	b29b      	uxth	r3, r3
 800717e:	4313      	orrs	r3, r2
 8007180:	b29a      	uxth	r2, r3
 8007182:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007184:	801a      	strh	r2, [r3, #0]
 8007186:	e046      	b.n	8007216 <USB_EPStartXfer+0x9ba>
 8007188:	22ac      	movs	r2, #172	@ 0xac
 800718a:	18bb      	adds	r3, r7, r2
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	095b      	lsrs	r3, r3, #5
 8007190:	2194      	movs	r1, #148	@ 0x94
 8007192:	1878      	adds	r0, r7, r1
 8007194:	6003      	str	r3, [r0, #0]
 8007196:	18bb      	adds	r3, r7, r2
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	221f      	movs	r2, #31
 800719c:	4013      	ands	r3, r2
 800719e:	d104      	bne.n	80071aa <USB_EPStartXfer+0x94e>
 80071a0:	187b      	adds	r3, r7, r1
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	187a      	adds	r2, r7, r1
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	2394      	movs	r3, #148	@ 0x94
 80071b2:	18fb      	adds	r3, r7, r3
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	029b      	lsls	r3, r3, #10
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	4313      	orrs	r3, r2
 80071be:	b29b      	uxth	r3, r3
 80071c0:	4a57      	ldr	r2, [pc, #348]	@ (8007320 <USB_EPStartXfer+0xac4>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071c8:	801a      	strh	r2, [r3, #0]
 80071ca:	e024      	b.n	8007216 <USB_EPStartXfer+0x9ba>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	785b      	ldrb	r3, [r3, #1]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d120      	bne.n	8007216 <USB_EPStartXfer+0x9ba>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2184      	movs	r1, #132	@ 0x84
 80071d8:	187a      	adds	r2, r7, r1
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2250      	movs	r2, #80	@ 0x50
 80071e0:	5a9b      	ldrh	r3, [r3, r2]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	001a      	movs	r2, r3
 80071e6:	187b      	adds	r3, r7, r1
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	189b      	adds	r3, r3, r2
 80071ec:	187a      	adds	r2, r7, r1
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	00da      	lsls	r2, r3, #3
 80071f6:	187b      	adds	r3, r7, r1
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	18d3      	adds	r3, r2, r3
 80071fc:	4a49      	ldr	r2, [pc, #292]	@ (8007324 <USB_EPStartXfer+0xac8>)
 80071fe:	4694      	mov	ip, r2
 8007200:	4463      	add	r3, ip
 8007202:	2180      	movs	r1, #128	@ 0x80
 8007204:	187a      	adds	r2, r7, r1
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	23ac      	movs	r3, #172	@ 0xac
 800720a:	18fb      	adds	r3, r7, r3
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	b29a      	uxth	r2, r3
 8007210:	187b      	adds	r3, r7, r1
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007216:	2076      	movs	r0, #118	@ 0x76
 8007218:	183b      	adds	r3, r7, r0
 800721a:	683a      	ldr	r2, [r7, #0]
 800721c:	8912      	ldrh	r2, [r2, #8]
 800721e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	6959      	ldr	r1, [r3, #20]
 8007224:	23ac      	movs	r3, #172	@ 0xac
 8007226:	18fb      	adds	r3, r7, r3
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	b29c      	uxth	r4, r3
 800722c:	183b      	adds	r3, r7, r0
 800722e:	881a      	ldrh	r2, [r3, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	0023      	movs	r3, r4
 8007234:	f000 fa32 	bl	800769c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	18d3      	adds	r3, r2, r3
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29a      	uxth	r2, r3
 8007246:	200a      	movs	r0, #10
 8007248:	183b      	adds	r3, r7, r0
 800724a:	4937      	ldr	r1, [pc, #220]	@ (8007328 <USB_EPStartXfer+0xacc>)
 800724c:	400a      	ands	r2, r1
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	183b      	adds	r3, r7, r0
 8007252:	183a      	adds	r2, r7, r0
 8007254:	8812      	ldrh	r2, [r2, #0]
 8007256:	2110      	movs	r1, #16
 8007258:	404a      	eors	r2, r1
 800725a:	801a      	strh	r2, [r3, #0]
 800725c:	183b      	adds	r3, r7, r0
 800725e:	183a      	adds	r2, r7, r0
 8007260:	8812      	ldrh	r2, [r2, #0]
 8007262:	2120      	movs	r1, #32
 8007264:	404a      	eors	r2, r1
 8007266:	801a      	strh	r2, [r3, #0]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	18d3      	adds	r3, r2, r3
 8007272:	183a      	adds	r2, r7, r0
 8007274:	8812      	ldrh	r2, [r2, #0]
 8007276:	492d      	ldr	r1, [pc, #180]	@ (800732c <USB_EPStartXfer+0xad0>)
 8007278:	430a      	orrs	r2, r1
 800727a:	b292      	uxth	r2, r2
 800727c:	801a      	strh	r2, [r3, #0]
 800727e:	e0cc      	b.n	800741a <USB_EPStartXfer+0xbbe>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	7b1b      	ldrb	r3, [r3, #12]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d159      	bne.n	800733c <USB_EPStartXfer+0xae0>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d11b      	bne.n	80072c8 <USB_EPStartXfer+0xa6c>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	78db      	ldrb	r3, [r3, #3]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d117      	bne.n	80072c8 <USB_EPStartXfer+0xa6c>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	18d3      	adds	r3, r2, r3
 80072a2:	881b      	ldrh	r3, [r3, #0]
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	208e      	movs	r0, #142	@ 0x8e
 80072a8:	183b      	adds	r3, r7, r0
 80072aa:	4921      	ldr	r1, [pc, #132]	@ (8007330 <USB_EPStartXfer+0xad4>)
 80072ac:	400a      	ands	r2, r1
 80072ae:	801a      	strh	r2, [r3, #0]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	18d3      	adds	r3, r2, r3
 80072ba:	183a      	adds	r2, r7, r0
 80072bc:	8812      	ldrh	r2, [r2, #0]
 80072be:	491d      	ldr	r1, [pc, #116]	@ (8007334 <USB_EPStartXfer+0xad8>)
 80072c0:	430a      	orrs	r2, r1
 80072c2:	b292      	uxth	r2, r2
 80072c4:	801a      	strh	r2, [r3, #0]
 80072c6:	e016      	b.n	80072f6 <USB_EPStartXfer+0xa9a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	18d3      	adds	r3, r2, r3
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	208c      	movs	r0, #140	@ 0x8c
 80072d8:	183b      	adds	r3, r7, r0
 80072da:	4917      	ldr	r1, [pc, #92]	@ (8007338 <USB_EPStartXfer+0xadc>)
 80072dc:	400a      	ands	r2, r1
 80072de:	801a      	strh	r2, [r3, #0]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	18d3      	adds	r3, r2, r3
 80072ea:	183a      	adds	r2, r7, r0
 80072ec:	8812      	ldrh	r2, [r2, #0]
 80072ee:	490f      	ldr	r1, [pc, #60]	@ (800732c <USB_EPStartXfer+0xad0>)
 80072f0:	430a      	orrs	r2, r1
 80072f2:	b292      	uxth	r2, r2
 80072f4:	801a      	strh	r2, [r3, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d907      	bls.n	8007312 <USB_EPStartXfer+0xab6>
      {
        ep->xfer_len -= ep->maxpacket;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	699a      	ldr	r2, [r3, #24]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	1ad2      	subs	r2, r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	619a      	str	r2, [r3, #24]
 8007310:	e05e      	b.n	80073d0 <USB_EPStartXfer+0xb74>
      }
      else
      {
        ep->xfer_len = 0U;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2200      	movs	r2, #0
 8007316:	619a      	str	r2, [r3, #24]
 8007318:	e05a      	b.n	80073d0 <USB_EPStartXfer+0xb74>
 800731a:	46c0      	nop			@ (mov r8, r8)
 800731c:	00000406 	.word	0x00000406
 8007320:	ffff8000 	.word	0xffff8000
 8007324:	00000402 	.word	0x00000402
 8007328:	ffff8fbf 	.word	0xffff8fbf
 800732c:	ffff8080 	.word	0xffff8080
 8007330:	ffff8f8f 	.word	0xffff8f8f
 8007334:	ffff8180 	.word	0xffff8180
 8007338:	ffff8e8f 	.word	0xffff8e8f
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	78db      	ldrb	r3, [r3, #3]
 8007340:	2b02      	cmp	r3, #2
 8007342:	d13b      	bne.n	80073bc <USB_EPStartXfer+0xb60>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d041      	beq.n	80073d0 <USB_EPStartXfer+0xb74>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	18d2      	adds	r2, r2, r3
 8007356:	2192      	movs	r1, #146	@ 0x92
 8007358:	187b      	adds	r3, r7, r1
 800735a:	8812      	ldrh	r2, [r2, #0]
 800735c:	801a      	strh	r2, [r3, #0]

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800735e:	187b      	adds	r3, r7, r1
 8007360:	881a      	ldrh	r2, [r3, #0]
 8007362:	2380      	movs	r3, #128	@ 0x80
 8007364:	01db      	lsls	r3, r3, #7
 8007366:	4013      	ands	r3, r2
 8007368:	d004      	beq.n	8007374 <USB_EPStartXfer+0xb18>
 800736a:	187b      	adds	r3, r7, r1
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	2240      	movs	r2, #64	@ 0x40
 8007370:	4013      	ands	r3, r2
 8007372:	d10b      	bne.n	800738c <USB_EPStartXfer+0xb30>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007374:	2192      	movs	r1, #146	@ 0x92
 8007376:	187b      	adds	r3, r7, r1
 8007378:	881a      	ldrh	r2, [r3, #0]
 800737a:	2380      	movs	r3, #128	@ 0x80
 800737c:	01db      	lsls	r3, r3, #7
 800737e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007380:	d126      	bne.n	80073d0 <USB_EPStartXfer+0xb74>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007382:	187b      	adds	r3, r7, r1
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	2240      	movs	r2, #64	@ 0x40
 8007388:	4013      	ands	r3, r2
 800738a:	d121      	bne.n	80073d0 <USB_EPStartXfer+0xb74>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	18d3      	adds	r3, r2, r3
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29a      	uxth	r2, r3
 800739a:	2090      	movs	r0, #144	@ 0x90
 800739c:	183b      	adds	r3, r7, r0
 800739e:	4921      	ldr	r1, [pc, #132]	@ (8007424 <USB_EPStartXfer+0xbc8>)
 80073a0:	400a      	ands	r2, r1
 80073a2:	801a      	strh	r2, [r3, #0]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	18d3      	adds	r3, r2, r3
 80073ae:	183a      	adds	r2, r7, r0
 80073b0:	8812      	ldrh	r2, [r2, #0]
 80073b2:	491d      	ldr	r1, [pc, #116]	@ (8007428 <USB_EPStartXfer+0xbcc>)
 80073b4:	430a      	orrs	r2, r1
 80073b6:	b292      	uxth	r2, r2
 80073b8:	801a      	strh	r2, [r3, #0]
 80073ba:	e009      	b.n	80073d0 <USB_EPStartXfer+0xb74>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	78db      	ldrb	r3, [r3, #3]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d103      	bne.n	80073cc <USB_EPStartXfer+0xb70>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2200      	movs	r2, #0
 80073c8:	619a      	str	r2, [r3, #24]
 80073ca:	e001      	b.n	80073d0 <USB_EPStartXfer+0xb74>
      }
      else
      {
        return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e025      	b.n	800741c <USB_EPStartXfer+0xbc0>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	18d3      	adds	r3, r2, r3
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	208a      	movs	r0, #138	@ 0x8a
 80073e0:	183b      	adds	r3, r7, r0
 80073e2:	4912      	ldr	r1, [pc, #72]	@ (800742c <USB_EPStartXfer+0xbd0>)
 80073e4:	400a      	ands	r2, r1
 80073e6:	801a      	strh	r2, [r3, #0]
 80073e8:	183b      	adds	r3, r7, r0
 80073ea:	183a      	adds	r2, r7, r0
 80073ec:	8812      	ldrh	r2, [r2, #0]
 80073ee:	2180      	movs	r1, #128	@ 0x80
 80073f0:	0149      	lsls	r1, r1, #5
 80073f2:	404a      	eors	r2, r1
 80073f4:	801a      	strh	r2, [r3, #0]
 80073f6:	183b      	adds	r3, r7, r0
 80073f8:	183a      	adds	r2, r7, r0
 80073fa:	8812      	ldrh	r2, [r2, #0]
 80073fc:	2180      	movs	r1, #128	@ 0x80
 80073fe:	0189      	lsls	r1, r1, #6
 8007400:	404a      	eors	r2, r1
 8007402:	801a      	strh	r2, [r3, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	18d3      	adds	r3, r2, r3
 800740e:	183a      	adds	r2, r7, r0
 8007410:	8812      	ldrh	r2, [r2, #0]
 8007412:	4907      	ldr	r1, [pc, #28]	@ (8007430 <USB_EPStartXfer+0xbd4>)
 8007414:	430a      	orrs	r2, r1
 8007416:	b292      	uxth	r2, r2
 8007418:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	0018      	movs	r0, r3
 800741e:	46bd      	mov	sp, r7
 8007420:	b02c      	add	sp, #176	@ 0xb0
 8007422:	bdb0      	pop	{r4, r5, r7, pc}
 8007424:	ffff8f8f 	.word	0xffff8f8f
 8007428:	ffff80c0 	.word	0xffff80c0
 800742c:	ffffbf8f 	.word	0xffffbf8f
 8007430:	ffff8080 	.word	0xffff8080

08007434 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	785b      	ldrb	r3, [r3, #1]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01d      	beq.n	8007482 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	18d3      	adds	r3, r2, r3
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	b29a      	uxth	r2, r3
 8007454:	200c      	movs	r0, #12
 8007456:	183b      	adds	r3, r7, r0
 8007458:	491b      	ldr	r1, [pc, #108]	@ (80074c8 <USB_EPSetStall+0x94>)
 800745a:	400a      	ands	r2, r1
 800745c:	801a      	strh	r2, [r3, #0]
 800745e:	183b      	adds	r3, r7, r0
 8007460:	183a      	adds	r2, r7, r0
 8007462:	8812      	ldrh	r2, [r2, #0]
 8007464:	2110      	movs	r1, #16
 8007466:	404a      	eors	r2, r1
 8007468:	801a      	strh	r2, [r3, #0]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	18d3      	adds	r3, r2, r3
 8007474:	183a      	adds	r2, r7, r0
 8007476:	8812      	ldrh	r2, [r2, #0]
 8007478:	4914      	ldr	r1, [pc, #80]	@ (80074cc <USB_EPSetStall+0x98>)
 800747a:	430a      	orrs	r2, r1
 800747c:	b292      	uxth	r2, r2
 800747e:	801a      	strh	r2, [r3, #0]
 8007480:	e01d      	b.n	80074be <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	18d3      	adds	r3, r2, r3
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b29a      	uxth	r2, r3
 8007490:	200e      	movs	r0, #14
 8007492:	183b      	adds	r3, r7, r0
 8007494:	490e      	ldr	r1, [pc, #56]	@ (80074d0 <USB_EPSetStall+0x9c>)
 8007496:	400a      	ands	r2, r1
 8007498:	801a      	strh	r2, [r3, #0]
 800749a:	183b      	adds	r3, r7, r0
 800749c:	183a      	adds	r2, r7, r0
 800749e:	8812      	ldrh	r2, [r2, #0]
 80074a0:	2180      	movs	r1, #128	@ 0x80
 80074a2:	0149      	lsls	r1, r1, #5
 80074a4:	404a      	eors	r2, r1
 80074a6:	801a      	strh	r2, [r3, #0]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	18d3      	adds	r3, r2, r3
 80074b2:	183a      	adds	r2, r7, r0
 80074b4:	8812      	ldrh	r2, [r2, #0]
 80074b6:	4905      	ldr	r1, [pc, #20]	@ (80074cc <USB_EPSetStall+0x98>)
 80074b8:	430a      	orrs	r2, r1
 80074ba:	b292      	uxth	r2, r2
 80074bc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	0018      	movs	r0, r3
 80074c2:	46bd      	mov	sp, r7
 80074c4:	b004      	add	sp, #16
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	ffff8fbf 	.word	0xffff8fbf
 80074cc:	ffff8080 	.word	0xffff8080
 80074d0:	ffffbf8f 	.word	0xffffbf8f

080074d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	785b      	ldrb	r3, [r3, #1]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d046      	beq.n	8007574 <USB_EPClearStall+0xa0>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	18d2      	adds	r2, r2, r3
 80074f0:	2110      	movs	r1, #16
 80074f2:	187b      	adds	r3, r7, r1
 80074f4:	8812      	ldrh	r2, [r2, #0]
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	187b      	adds	r3, r7, r1
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	2240      	movs	r2, #64	@ 0x40
 80074fe:	4013      	ands	r3, r2
 8007500:	d016      	beq.n	8007530 <USB_EPClearStall+0x5c>
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	18d3      	adds	r3, r2, r3
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29a      	uxth	r2, r3
 8007510:	200e      	movs	r0, #14
 8007512:	183b      	adds	r3, r7, r0
 8007514:	493f      	ldr	r1, [pc, #252]	@ (8007614 <USB_EPClearStall+0x140>)
 8007516:	400a      	ands	r2, r1
 8007518:	801a      	strh	r2, [r3, #0]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	18d3      	adds	r3, r2, r3
 8007524:	183a      	adds	r2, r7, r0
 8007526:	8812      	ldrh	r2, [r2, #0]
 8007528:	493b      	ldr	r1, [pc, #236]	@ (8007618 <USB_EPClearStall+0x144>)
 800752a:	430a      	orrs	r2, r1
 800752c:	b292      	uxth	r2, r2
 800752e:	801a      	strh	r2, [r3, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	78db      	ldrb	r3, [r3, #3]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d068      	beq.n	800760a <USB_EPClearStall+0x136>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	18d3      	adds	r3, r2, r3
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	b29a      	uxth	r2, r3
 8007546:	200c      	movs	r0, #12
 8007548:	183b      	adds	r3, r7, r0
 800754a:	4934      	ldr	r1, [pc, #208]	@ (800761c <USB_EPClearStall+0x148>)
 800754c:	400a      	ands	r2, r1
 800754e:	801a      	strh	r2, [r3, #0]
 8007550:	183b      	adds	r3, r7, r0
 8007552:	183a      	adds	r2, r7, r0
 8007554:	8812      	ldrh	r2, [r2, #0]
 8007556:	2120      	movs	r1, #32
 8007558:	404a      	eors	r2, r1
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	18d3      	adds	r3, r2, r3
 8007566:	183a      	adds	r2, r7, r0
 8007568:	8812      	ldrh	r2, [r2, #0]
 800756a:	492d      	ldr	r1, [pc, #180]	@ (8007620 <USB_EPClearStall+0x14c>)
 800756c:	430a      	orrs	r2, r1
 800756e:	b292      	uxth	r2, r2
 8007570:	801a      	strh	r2, [r3, #0]
 8007572:	e04a      	b.n	800760a <USB_EPClearStall+0x136>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	18d2      	adds	r2, r2, r3
 800757e:	2116      	movs	r1, #22
 8007580:	187b      	adds	r3, r7, r1
 8007582:	8812      	ldrh	r2, [r2, #0]
 8007584:	801a      	strh	r2, [r3, #0]
 8007586:	187b      	adds	r3, r7, r1
 8007588:	881a      	ldrh	r2, [r3, #0]
 800758a:	2380      	movs	r3, #128	@ 0x80
 800758c:	01db      	lsls	r3, r3, #7
 800758e:	4013      	ands	r3, r2
 8007590:	d016      	beq.n	80075c0 <USB_EPClearStall+0xec>
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	18d3      	adds	r3, r2, r3
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	b29a      	uxth	r2, r3
 80075a0:	2014      	movs	r0, #20
 80075a2:	183b      	adds	r3, r7, r0
 80075a4:	491b      	ldr	r1, [pc, #108]	@ (8007614 <USB_EPClearStall+0x140>)
 80075a6:	400a      	ands	r2, r1
 80075a8:	801a      	strh	r2, [r3, #0]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	18d3      	adds	r3, r2, r3
 80075b4:	183a      	adds	r2, r7, r0
 80075b6:	8812      	ldrh	r2, [r2, #0]
 80075b8:	491a      	ldr	r1, [pc, #104]	@ (8007624 <USB_EPClearStall+0x150>)
 80075ba:	430a      	orrs	r2, r1
 80075bc:	b292      	uxth	r2, r2
 80075be:	801a      	strh	r2, [r3, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	18d3      	adds	r3, r2, r3
 80075ca:	881b      	ldrh	r3, [r3, #0]
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	2012      	movs	r0, #18
 80075d0:	183b      	adds	r3, r7, r0
 80075d2:	4915      	ldr	r1, [pc, #84]	@ (8007628 <USB_EPClearStall+0x154>)
 80075d4:	400a      	ands	r2, r1
 80075d6:	801a      	strh	r2, [r3, #0]
 80075d8:	183b      	adds	r3, r7, r0
 80075da:	183a      	adds	r2, r7, r0
 80075dc:	8812      	ldrh	r2, [r2, #0]
 80075de:	2180      	movs	r1, #128	@ 0x80
 80075e0:	0149      	lsls	r1, r1, #5
 80075e2:	404a      	eors	r2, r1
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	183b      	adds	r3, r7, r0
 80075e8:	183a      	adds	r2, r7, r0
 80075ea:	8812      	ldrh	r2, [r2, #0]
 80075ec:	2180      	movs	r1, #128	@ 0x80
 80075ee:	0189      	lsls	r1, r1, #6
 80075f0:	404a      	eors	r2, r1
 80075f2:	801a      	strh	r2, [r3, #0]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	18d3      	adds	r3, r2, r3
 80075fe:	183a      	adds	r2, r7, r0
 8007600:	8812      	ldrh	r2, [r2, #0]
 8007602:	4907      	ldr	r1, [pc, #28]	@ (8007620 <USB_EPClearStall+0x14c>)
 8007604:	430a      	orrs	r2, r1
 8007606:	b292      	uxth	r2, r2
 8007608:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	0018      	movs	r0, r3
 800760e:	46bd      	mov	sp, r7
 8007610:	b006      	add	sp, #24
 8007612:	bd80      	pop	{r7, pc}
 8007614:	ffff8f8f 	.word	0xffff8f8f
 8007618:	ffff80c0 	.word	0xffff80c0
 800761c:	ffff8fbf 	.word	0xffff8fbf
 8007620:	ffff8080 	.word	0xffff8080
 8007624:	ffffc080 	.word	0xffffc080
 8007628:	ffffbf8f 	.word	0xffffbf8f

0800762c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	000a      	movs	r2, r1
 8007636:	1cfb      	adds	r3, r7, #3
 8007638:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800763a:	1cfb      	adds	r3, r7, #3
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d103      	bne.n	800764a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	224c      	movs	r2, #76	@ 0x4c
 8007646:	2180      	movs	r1, #128	@ 0x80
 8007648:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	0018      	movs	r0, r3
 800764e:	46bd      	mov	sp, r7
 8007650:	b002      	add	sp, #8
 8007652:	bd80      	pop	{r7, pc}

08007654 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2258      	movs	r2, #88	@ 0x58
 8007660:	5a9b      	ldrh	r3, [r3, r2]
 8007662:	b29b      	uxth	r3, r3
 8007664:	4a05      	ldr	r2, [pc, #20]	@ (800767c <USB_DevConnect+0x28>)
 8007666:	4313      	orrs	r3, r2
 8007668:	b299      	uxth	r1, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2258      	movs	r2, #88	@ 0x58
 800766e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	0018      	movs	r0, r3
 8007674:	46bd      	mov	sp, r7
 8007676:	b002      	add	sp, #8
 8007678:	bd80      	pop	{r7, pc}
 800767a:	46c0      	nop			@ (mov r8, r8)
 800767c:	ffff8000 	.word	0xffff8000

08007680 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2244      	movs	r2, #68	@ 0x44
 800768c:	5a9b      	ldrh	r3, [r3, r2]
 800768e:	b29b      	uxth	r3, r3
 8007690:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007692:	68fb      	ldr	r3, [r7, #12]
}
 8007694:	0018      	movs	r0, r3
 8007696:	46bd      	mov	sp, r7
 8007698:	b004      	add	sp, #16
 800769a:	bd80      	pop	{r7, pc}

0800769c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08a      	sub	sp, #40	@ 0x28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	0019      	movs	r1, r3
 80076a8:	1dbb      	adds	r3, r7, #6
 80076aa:	801a      	strh	r2, [r3, #0]
 80076ac:	1d3b      	adds	r3, r7, #4
 80076ae:	1c0a      	adds	r2, r1, #0
 80076b0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80076b2:	1d3b      	adds	r3, r7, #4
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	3301      	adds	r3, #1
 80076b8:	085b      	lsrs	r3, r3, #1
 80076ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076c4:	1dbb      	adds	r3, r7, #6
 80076c6:	881a      	ldrh	r2, [r3, #0]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	18d3      	adds	r3, r2, r3
 80076cc:	2280      	movs	r2, #128	@ 0x80
 80076ce:	00d2      	lsls	r2, r2, #3
 80076d0:	4694      	mov	ip, r2
 80076d2:	4463      	add	r3, ip
 80076d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80076da:	e021      	b.n	8007720 <USB_WritePMA+0x84>
  {
    WrVal = pBuf[0];
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	781a      	ldrb	r2, [r3, #0]
 80076e0:	2112      	movs	r1, #18
 80076e2:	187b      	adds	r3, r7, r1
 80076e4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	3301      	adds	r3, #1
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	b21b      	sxth	r3, r3
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	b21a      	sxth	r2, r3
 80076f2:	187b      	adds	r3, r7, r1
 80076f4:	2000      	movs	r0, #0
 80076f6:	5e1b      	ldrsh	r3, [r3, r0]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	b21a      	sxth	r2, r3
 80076fc:	187b      	adds	r3, r7, r1
 80076fe:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	187a      	adds	r2, r7, r1
 8007704:	8812      	ldrh	r2, [r2, #0]
 8007706:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	3302      	adds	r3, #2
 800770c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	3301      	adds	r3, #1
 8007712:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	3301      	adds	r3, #1
 8007718:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	3b01      	subs	r3, #1
 800771e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1da      	bne.n	80076dc <USB_WritePMA+0x40>
  }
}
 8007726:	46c0      	nop			@ (mov r8, r8)
 8007728:	46c0      	nop			@ (mov r8, r8)
 800772a:	46bd      	mov	sp, r7
 800772c:	b00a      	add	sp, #40	@ 0x28
 800772e:	bd80      	pop	{r7, pc}

08007730 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08a      	sub	sp, #40	@ 0x28
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	0019      	movs	r1, r3
 800773c:	1dbb      	adds	r3, r7, #6
 800773e:	801a      	strh	r2, [r3, #0]
 8007740:	1d3b      	adds	r3, r7, #4
 8007742:	1c0a      	adds	r2, r1, #0
 8007744:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007746:	1d3b      	adds	r3, r7, #4
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	085b      	lsrs	r3, r3, #1
 800774c:	b29b      	uxth	r3, r3
 800774e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007758:	1dbb      	adds	r3, r7, #6
 800775a:	881a      	ldrh	r2, [r3, #0]
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	18d3      	adds	r3, r2, r3
 8007760:	2280      	movs	r2, #128	@ 0x80
 8007762:	00d2      	lsls	r2, r2, #3
 8007764:	4694      	mov	ip, r2
 8007766:	4463      	add	r3, ip
 8007768:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	627b      	str	r3, [r7, #36]	@ 0x24
 800776e:	e018      	b.n	80077a2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	b29b      	uxth	r3, r3
 8007776:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	3302      	adds	r3, #2
 800777c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	b2da      	uxtb	r2, r3
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	3301      	adds	r3, #1
 800778a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	b2da      	uxtb	r2, r3
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	3301      	adds	r3, #1
 800779a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800779c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779e:	3b01      	subs	r3, #1
 80077a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80077a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e3      	bne.n	8007770 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80077a8:	1d3b      	adds	r3, r7, #4
 80077aa:	881b      	ldrh	r3, [r3, #0]
 80077ac:	2201      	movs	r2, #1
 80077ae:	4013      	ands	r3, r2
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d007      	beq.n	80077c6 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	701a      	strb	r2, [r3, #0]
  }
}
 80077c6:	46c0      	nop			@ (mov r8, r8)
 80077c8:	46bd      	mov	sp, r7
 80077ca:	b00a      	add	sp, #40	@ 0x28
 80077cc:	bd80      	pop	{r7, pc}

080077ce <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	000a      	movs	r2, r1
 80077d8:	1cfb      	adds	r3, r7, #3
 80077da:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	2304      	movs	r3, #4
 80077e0:	2203      	movs	r2, #3
 80077e2:	2181      	movs	r1, #129	@ 0x81
 80077e4:	f001 fe31 	bl	800944a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80077ee:	2010      	movs	r0, #16
 80077f0:	f001 ffac 	bl	800974c <USBD_static_malloc>
 80077f4:	0001      	movs	r1, r0
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	23ae      	movs	r3, #174	@ 0xae
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	23ae      	movs	r3, #174	@ 0xae
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	58d3      	ldr	r3, [r2, r3]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 800780a:	2302      	movs	r3, #2
 800780c:	e006      	b.n	800781c <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	23ae      	movs	r3, #174	@ 0xae
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	58d3      	ldr	r3, [r2, r3]
 8007816:	2200      	movs	r2, #0
 8007818:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	0018      	movs	r0, r3
 800781e:	46bd      	mov	sp, r7
 8007820:	b002      	add	sp, #8
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	000a      	movs	r2, r1
 800782e:	1cfb      	adds	r3, r7, #3
 8007830:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2181      	movs	r1, #129	@ 0x81
 8007836:	0018      	movs	r0, r3
 8007838:	f001 fe3e 	bl	80094b8 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	23ae      	movs	r3, #174	@ 0xae
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	58d3      	ldr	r3, [r2, r3]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00b      	beq.n	8007866 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	23ae      	movs	r3, #174	@ 0xae
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	58d3      	ldr	r3, [r2, r3]
 8007856:	0018      	movs	r0, r3
 8007858:	f001 ff84 	bl	8009764 <USBD_static_free>
    pdev->pClassData = NULL;
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	23ae      	movs	r3, #174	@ 0xae
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	2100      	movs	r1, #0
 8007864:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	0018      	movs	r0, r3
 800786a:	46bd      	mov	sp, r7
 800786c:	b002      	add	sp, #8
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	23ae      	movs	r3, #174	@ 0xae
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	58d3      	ldr	r3, [r2, r3]
 8007882:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007884:	231e      	movs	r3, #30
 8007886:	18fb      	adds	r3, r7, r3
 8007888:	2200      	movs	r2, #0
 800788a:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800788c:	2300      	movs	r3, #0
 800788e:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007890:	230e      	movs	r3, #14
 8007892:	18fb      	adds	r3, r7, r3
 8007894:	2200      	movs	r2, #0
 8007896:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007898:	2317      	movs	r3, #23
 800789a:	18fb      	adds	r3, r7, r3
 800789c:	2200      	movs	r2, #0
 800789e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	001a      	movs	r2, r3
 80078a6:	2360      	movs	r3, #96	@ 0x60
 80078a8:	4013      	ands	r3, r2
 80078aa:	d03a      	beq.n	8007922 <USBD_HID_Setup+0xb2>
 80078ac:	2b20      	cmp	r3, #32
 80078ae:	d000      	beq.n	80078b2 <USBD_HID_Setup+0x42>
 80078b0:	e0d6      	b.n	8007a60 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	2b0b      	cmp	r3, #11
 80078b8:	d008      	beq.n	80078cc <USBD_HID_Setup+0x5c>
 80078ba:	dc26      	bgt.n	800790a <USBD_HID_Setup+0x9a>
 80078bc:	2b0a      	cmp	r3, #10
 80078be:	d013      	beq.n	80078e8 <USBD_HID_Setup+0x78>
 80078c0:	dc23      	bgt.n	800790a <USBD_HID_Setup+0x9a>
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d019      	beq.n	80078fa <USBD_HID_Setup+0x8a>
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	d007      	beq.n	80078da <USBD_HID_Setup+0x6a>
 80078ca:	e01e      	b.n	800790a <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	885b      	ldrh	r3, [r3, #2]
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	001a      	movs	r2, r3
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	601a      	str	r2, [r3, #0]
          break;
 80078d8:	e022      	b.n	8007920 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80078da:	6939      	ldr	r1, [r7, #16]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	0018      	movs	r0, r3
 80078e2:	f001 fa96 	bl	8008e12 <USBD_CtlSendData>
          break;
 80078e6:	e01b      	b.n	8007920 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	885b      	ldrh	r3, [r3, #2]
 80078ec:	0a1b      	lsrs	r3, r3, #8
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	001a      	movs	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	605a      	str	r2, [r3, #4]
          break;
 80078f8:	e012      	b.n	8007920 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1d19      	adds	r1, r3, #4
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	0018      	movs	r0, r3
 8007904:	f001 fa85 	bl	8008e12 <USBD_CtlSendData>
          break;
 8007908:	e00a      	b.n	8007920 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	0011      	movs	r1, r2
 8007910:	0018      	movs	r0, r3
 8007912:	f001 fa00 	bl	8008d16 <USBD_CtlError>
          ret = USBD_FAIL;
 8007916:	2317      	movs	r3, #23
 8007918:	18fb      	adds	r3, r7, r3
 800791a:	2202      	movs	r2, #2
 800791c:	701a      	strb	r2, [r3, #0]
          break;
 800791e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8007920:	e0a9      	b.n	8007a76 <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	785b      	ldrb	r3, [r3, #1]
 8007926:	2b0b      	cmp	r3, #11
 8007928:	d100      	bne.n	800792c <USBD_HID_Setup+0xbc>
 800792a:	e075      	b.n	8007a18 <USBD_HID_Setup+0x1a8>
 800792c:	dd00      	ble.n	8007930 <USBD_HID_Setup+0xc0>
 800792e:	e08b      	b.n	8007a48 <USBD_HID_Setup+0x1d8>
 8007930:	2b0a      	cmp	r3, #10
 8007932:	d057      	beq.n	80079e4 <USBD_HID_Setup+0x174>
 8007934:	dd00      	ble.n	8007938 <USBD_HID_Setup+0xc8>
 8007936:	e087      	b.n	8007a48 <USBD_HID_Setup+0x1d8>
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <USBD_HID_Setup+0xd2>
 800793c:	2b06      	cmp	r3, #6
 800793e:	d019      	beq.n	8007974 <USBD_HID_Setup+0x104>
 8007940:	e082      	b.n	8007a48 <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	23a7      	movs	r3, #167	@ 0xa7
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	5cd3      	ldrb	r3, [r2, r3]
 800794a:	2b03      	cmp	r3, #3
 800794c:	d107      	bne.n	800795e <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800794e:	230e      	movs	r3, #14
 8007950:	18f9      	adds	r1, r7, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2202      	movs	r2, #2
 8007956:	0018      	movs	r0, r3
 8007958:	f001 fa5b 	bl	8008e12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800795c:	e07f      	b.n	8007a5e <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	0011      	movs	r1, r2
 8007964:	0018      	movs	r0, r3
 8007966:	f001 f9d6 	bl	8008d16 <USBD_CtlError>
            ret = USBD_FAIL;
 800796a:	2317      	movs	r3, #23
 800796c:	18fb      	adds	r3, r7, r3
 800796e:	2202      	movs	r2, #2
 8007970:	701a      	strb	r2, [r3, #0]
          break;
 8007972:	e074      	b.n	8007a5e <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	885b      	ldrh	r3, [r3, #2]
 8007978:	0a1b      	lsrs	r3, r3, #8
 800797a:	b29b      	uxth	r3, r3
 800797c:	2b22      	cmp	r3, #34	@ 0x22
 800797e:	d10b      	bne.n	8007998 <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	88db      	ldrh	r3, [r3, #6]
 8007984:	221e      	movs	r2, #30
 8007986:	18ba      	adds	r2, r7, r2
 8007988:	b299      	uxth	r1, r3
 800798a:	294a      	cmp	r1, #74	@ 0x4a
 800798c:	d900      	bls.n	8007990 <USBD_HID_Setup+0x120>
 800798e:	234a      	movs	r3, #74	@ 0x4a
 8007990:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 8007992:	4b3c      	ldr	r3, [pc, #240]	@ (8007a84 <USBD_HID_Setup+0x214>)
 8007994:	61bb      	str	r3, [r7, #24]
 8007996:	e01c      	b.n	80079d2 <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	885b      	ldrh	r3, [r3, #2]
 800799c:	0a1b      	lsrs	r3, r3, #8
 800799e:	b29b      	uxth	r3, r3
 80079a0:	2b21      	cmp	r3, #33	@ 0x21
 80079a2:	d10b      	bne.n	80079bc <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 80079a4:	4b38      	ldr	r3, [pc, #224]	@ (8007a88 <USBD_HID_Setup+0x218>)
 80079a6:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	88db      	ldrh	r3, [r3, #6]
 80079ac:	221e      	movs	r2, #30
 80079ae:	18ba      	adds	r2, r7, r2
 80079b0:	b299      	uxth	r1, r3
 80079b2:	2909      	cmp	r1, #9
 80079b4:	d900      	bls.n	80079b8 <USBD_HID_Setup+0x148>
 80079b6:	2309      	movs	r3, #9
 80079b8:	8013      	strh	r3, [r2, #0]
 80079ba:	e00a      	b.n	80079d2 <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	0011      	movs	r1, r2
 80079c2:	0018      	movs	r0, r3
 80079c4:	f001 f9a7 	bl	8008d16 <USBD_CtlError>
            ret = USBD_FAIL;
 80079c8:	2317      	movs	r3, #23
 80079ca:	18fb      	adds	r3, r7, r3
 80079cc:	2202      	movs	r2, #2
 80079ce:	701a      	strb	r2, [r3, #0]
            break;
 80079d0:	e045      	b.n	8007a5e <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80079d2:	231e      	movs	r3, #30
 80079d4:	18fb      	adds	r3, r7, r3
 80079d6:	881a      	ldrh	r2, [r3, #0]
 80079d8:	69b9      	ldr	r1, [r7, #24]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	0018      	movs	r0, r3
 80079de:	f001 fa18 	bl	8008e12 <USBD_CtlSendData>
          break;
 80079e2:	e03c      	b.n	8007a5e <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	23a7      	movs	r3, #167	@ 0xa7
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	5cd3      	ldrb	r3, [r2, r3]
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d108      	bne.n	8007a02 <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	3308      	adds	r3, #8
 80079f4:	0019      	movs	r1, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	0018      	movs	r0, r3
 80079fc:	f001 fa09 	bl	8008e12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a00:	e02d      	b.n	8007a5e <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	0011      	movs	r1, r2
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f001 f984 	bl	8008d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a0e:	2317      	movs	r3, #23
 8007a10:	18fb      	adds	r3, r7, r3
 8007a12:	2202      	movs	r2, #2
 8007a14:	701a      	strb	r2, [r3, #0]
          break;
 8007a16:	e022      	b.n	8007a5e <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	23a7      	movs	r3, #167	@ 0xa7
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	5cd3      	ldrb	r3, [r2, r3]
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d106      	bne.n	8007a32 <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	885b      	ldrh	r3, [r3, #2]
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	001a      	movs	r2, r3
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a30:	e015      	b.n	8007a5e <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	0011      	movs	r1, r2
 8007a38:	0018      	movs	r0, r3
 8007a3a:	f001 f96c 	bl	8008d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a3e:	2317      	movs	r3, #23
 8007a40:	18fb      	adds	r3, r7, r3
 8007a42:	2202      	movs	r2, #2
 8007a44:	701a      	strb	r2, [r3, #0]
          break;
 8007a46:	e00a      	b.n	8007a5e <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	0011      	movs	r1, r2
 8007a4e:	0018      	movs	r0, r3
 8007a50:	f001 f961 	bl	8008d16 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a54:	2317      	movs	r3, #23
 8007a56:	18fb      	adds	r3, r7, r3
 8007a58:	2202      	movs	r2, #2
 8007a5a:	701a      	strb	r2, [r3, #0]
          break;
 8007a5c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8007a5e:	e00a      	b.n	8007a76 <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	0011      	movs	r1, r2
 8007a66:	0018      	movs	r0, r3
 8007a68:	f001 f955 	bl	8008d16 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a6c:	2317      	movs	r3, #23
 8007a6e:	18fb      	adds	r3, r7, r3
 8007a70:	2202      	movs	r2, #2
 8007a72:	701a      	strb	r2, [r3, #0]
      break;
 8007a74:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8007a76:	2317      	movs	r3, #23
 8007a78:	18fb      	adds	r3, r7, r3
 8007a7a:	781b      	ldrb	r3, [r3, #0]
}
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	b008      	add	sp, #32
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	200000c8 	.word	0x200000c8
 8007a88:	200000b0 	.word	0x200000b0

08007a8c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2222      	movs	r2, #34	@ 0x22
 8007a98:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007a9a:	4b02      	ldr	r3, [pc, #8]	@ (8007aa4 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	b002      	add	sp, #8
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	20000044 	.word	0x20000044

08007aa8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2222      	movs	r2, #34	@ 0x22
 8007ab4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007ab6:	4b02      	ldr	r3, [pc, #8]	@ (8007ac0 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8007ab8:	0018      	movs	r0, r3
 8007aba:	46bd      	mov	sp, r7
 8007abc:	b002      	add	sp, #8
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	20000068 	.word	0x20000068

08007ac4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2222      	movs	r2, #34	@ 0x22
 8007ad0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007ad2:	4b02      	ldr	r3, [pc, #8]	@ (8007adc <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	b002      	add	sp, #8
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	2000008c 	.word	0x2000008c

08007ae0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	000a      	movs	r2, r1
 8007aea:	1cfb      	adds	r3, r7, #3
 8007aec:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	23ae      	movs	r3, #174	@ 0xae
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	58d3      	ldr	r3, [r2, r3]
 8007af6:	2200      	movs	r2, #0
 8007af8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	0018      	movs	r0, r3
 8007afe:	46bd      	mov	sp, r7
 8007b00:	b002      	add	sp, #8
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	220a      	movs	r2, #10
 8007b10:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007b12:	4b02      	ldr	r3, [pc, #8]	@ (8007b1c <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8007b14:	0018      	movs	r0, r3
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b002      	add	sp, #8
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	200000bc 	.word	0x200000bc

08007b20 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	1dfb      	adds	r3, r7, #7
 8007b2c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b34:	2302      	movs	r3, #2
 8007b36:	e020      	b.n	8007b7a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	23ad      	movs	r3, #173	@ 0xad
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	58d3      	ldr	r3, [r2, r3]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d004      	beq.n	8007b4e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	23ad      	movs	r3, #173	@ 0xad
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d004      	beq.n	8007b5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	23ac      	movs	r3, #172	@ 0xac
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	23a7      	movs	r3, #167	@ 0xa7
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	2101      	movs	r1, #1
 8007b66:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	1dfa      	adds	r2, r7, #7
 8007b6c:	7812      	ldrb	r2, [r2, #0]
 8007b6e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	0018      	movs	r0, r3
 8007b74:	f001 fbf4 	bl	8009360 <USBD_LL_Init>

  return USBD_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	b004      	add	sp, #16
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
 8007b8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007b8c:	200f      	movs	r0, #15
 8007b8e:	183b      	adds	r3, r7, r0
 8007b90:	2200      	movs	r2, #0
 8007b92:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	23ad      	movs	r3, #173	@ 0xad
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007ba4:	183b      	adds	r3, r7, r0
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
 8007baa:	e003      	b.n	8007bb4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007bac:	230f      	movs	r3, #15
 8007bae:	18fb      	adds	r3, r7, r3
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007bb4:	230f      	movs	r3, #15
 8007bb6:	18fb      	adds	r3, r7, r3
 8007bb8:	781b      	ldrb	r3, [r3, #0]
}
 8007bba:	0018      	movs	r0, r3
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	b004      	add	sp, #16
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b082      	sub	sp, #8
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	0018      	movs	r0, r3
 8007bce:	f001 fc17 	bl	8009400 <USBD_LL_Start>

  return USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	b002      	add	sp, #8
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	0018      	movs	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b002      	add	sp, #8
 8007bec:	bd80      	pop	{r7, pc}

08007bee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007bee:	b590      	push	{r4, r7, lr}
 8007bf0:	b085      	sub	sp, #20
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
 8007bf6:	000a      	movs	r2, r1
 8007bf8:	1cfb      	adds	r3, r7, #3
 8007bfa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007bfc:	240f      	movs	r4, #15
 8007bfe:	193b      	adds	r3, r7, r4
 8007c00:	2202      	movs	r2, #2
 8007c02:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	23ad      	movs	r3, #173	@ 0xad
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	58d3      	ldr	r3, [r2, r3]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00e      	beq.n	8007c2e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	23ad      	movs	r3, #173	@ 0xad
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	58d3      	ldr	r3, [r2, r3]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	1cfa      	adds	r2, r7, #3
 8007c1c:	7811      	ldrb	r1, [r2, #0]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	0010      	movs	r0, r2
 8007c22:	4798      	blx	r3
 8007c24:	1e03      	subs	r3, r0, #0
 8007c26:	d102      	bne.n	8007c2e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8007c28:	193b      	adds	r3, r7, r4
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8007c2e:	230f      	movs	r3, #15
 8007c30:	18fb      	adds	r3, r7, r3
 8007c32:	781b      	ldrb	r3, [r3, #0]
}
 8007c34:	0018      	movs	r0, r3
 8007c36:	46bd      	mov	sp, r7
 8007c38:	b005      	add	sp, #20
 8007c3a:	bd90      	pop	{r4, r7, pc}

08007c3c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	000a      	movs	r2, r1
 8007c46:	1cfb      	adds	r3, r7, #3
 8007c48:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	23ad      	movs	r3, #173	@ 0xad
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	58d3      	ldr	r3, [r2, r3]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	1cfa      	adds	r2, r7, #3
 8007c56:	7811      	ldrb	r1, [r2, #0]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	0010      	movs	r0, r2
 8007c5c:	4798      	blx	r3

  return USBD_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	0018      	movs	r0, r3
 8007c62:	46bd      	mov	sp, r7
 8007c64:	b002      	add	sp, #8
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	22aa      	movs	r2, #170	@ 0xaa
 8007c76:	0092      	lsls	r2, r2, #2
 8007c78:	4694      	mov	ip, r2
 8007c7a:	4463      	add	r3, ip
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	0011      	movs	r1, r2
 8007c80:	0018      	movs	r0, r3
 8007c82:	f001 f810 	bl	8008ca6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	23a5      	movs	r3, #165	@ 0xa5
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a23      	ldr	r2, [pc, #140]	@ (8007d20 <USBD_LL_SetupStage+0xb8>)
 8007c94:	5a9b      	ldrh	r3, [r3, r2]
 8007c96:	0019      	movs	r1, r3
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	23a6      	movs	r3, #166	@ 0xa6
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	23aa      	movs	r3, #170	@ 0xaa
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	5cd3      	ldrb	r3, [r2, r3]
 8007ca8:	001a      	movs	r2, r3
 8007caa:	231f      	movs	r3, #31
 8007cac:	4013      	ands	r3, r2
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d019      	beq.n	8007ce6 <USBD_LL_SetupStage+0x7e>
 8007cb2:	d822      	bhi.n	8007cfa <USBD_LL_SetupStage+0x92>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <USBD_LL_SetupStage+0x56>
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d00a      	beq.n	8007cd2 <USBD_LL_SetupStage+0x6a>
 8007cbc:	e01d      	b.n	8007cfa <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	22aa      	movs	r2, #170	@ 0xaa
 8007cc2:	0092      	lsls	r2, r2, #2
 8007cc4:	189a      	adds	r2, r3, r2
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	0011      	movs	r1, r2
 8007cca:	0018      	movs	r0, r3
 8007ccc:	f000 fa10 	bl	80080f0 <USBD_StdDevReq>
      break;
 8007cd0:	e020      	b.n	8007d14 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	22aa      	movs	r2, #170	@ 0xaa
 8007cd6:	0092      	lsls	r2, r2, #2
 8007cd8:	189a      	adds	r2, r3, r2
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	0011      	movs	r1, r2
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f000 fa78 	bl	80081d4 <USBD_StdItfReq>
      break;
 8007ce4:	e016      	b.n	8007d14 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	22aa      	movs	r2, #170	@ 0xaa
 8007cea:	0092      	lsls	r2, r2, #2
 8007cec:	189a      	adds	r2, r3, r2
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	0011      	movs	r1, r2
 8007cf2:	0018      	movs	r0, r3
 8007cf4:	f000 fac5 	bl	8008282 <USBD_StdEPReq>
      break;
 8007cf8:	e00c      	b.n	8007d14 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	23aa      	movs	r3, #170	@ 0xaa
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	5cd3      	ldrb	r3, [r2, r3]
 8007d02:	227f      	movs	r2, #127	@ 0x7f
 8007d04:	4393      	bics	r3, r2
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	0011      	movs	r1, r2
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f001 fbfe 	bl	800950e <USBD_LL_StallEP>
      break;
 8007d12:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	0018      	movs	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b002      	add	sp, #8
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	46c0      	nop			@ (mov r8, r8)
 8007d20:	000002ae 	.word	0x000002ae

08007d24 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	607a      	str	r2, [r7, #4]
 8007d2e:	200b      	movs	r0, #11
 8007d30:	183b      	adds	r3, r7, r0
 8007d32:	1c0a      	adds	r2, r1, #0
 8007d34:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d36:	183b      	adds	r3, r7, r0
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d154      	bne.n	8007de8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3355      	adds	r3, #85	@ 0x55
 8007d42:	33ff      	adds	r3, #255	@ 0xff
 8007d44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	23a5      	movs	r3, #165	@ 0xa5
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	58d3      	ldr	r3, [r2, r3]
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d139      	bne.n	8007dc6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d919      	bls.n	8007d92 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	68da      	ldr	r2, [r3, #12]
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	1ad2      	subs	r2, r2, r3
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d203      	bcs.n	8007d80 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	e002      	b.n	8007d86 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	6879      	ldr	r1, [r7, #4]
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	001a      	movs	r2, r3
 8007d8c:	f001 f874 	bl	8008e78 <USBD_CtlContinueRx>
 8007d90:	e045      	b.n	8007e1e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	23ad      	movs	r3, #173	@ 0xad
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	58d3      	ldr	r3, [r2, r3]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00d      	beq.n	8007dbc <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	23a7      	movs	r3, #167	@ 0xa7
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d107      	bne.n	8007dbc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	23ad      	movs	r3, #173	@ 0xad
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	58d3      	ldr	r3, [r2, r3]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	0010      	movs	r0, r2
 8007dba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	0018      	movs	r0, r3
 8007dc0:	f001 f86d 	bl	8008e9e <USBD_CtlSendStatus>
 8007dc4:	e02b      	b.n	8007e1e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	23a5      	movs	r3, #165	@ 0xa5
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	58d3      	ldr	r3, [r2, r3]
 8007dce:	2b05      	cmp	r3, #5
 8007dd0:	d125      	bne.n	8007e1e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	23a5      	movs	r3, #165	@ 0xa5
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	2100      	movs	r1, #0
 8007dda:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2100      	movs	r1, #0
 8007de0:	0018      	movs	r0, r3
 8007de2:	f001 fb94 	bl	800950e <USBD_LL_StallEP>
 8007de6:	e01a      	b.n	8007e1e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	23ad      	movs	r3, #173	@ 0xad
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	58d3      	ldr	r3, [r2, r3]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d011      	beq.n	8007e1a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	23a7      	movs	r3, #167	@ 0xa7
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8007dfe:	2b03      	cmp	r3, #3
 8007e00:	d10b      	bne.n	8007e1a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	23ad      	movs	r3, #173	@ 0xad
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	58d3      	ldr	r3, [r2, r3]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	220b      	movs	r2, #11
 8007e0e:	18ba      	adds	r2, r7, r2
 8007e10:	7811      	ldrb	r1, [r2, #0]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	0010      	movs	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	e001      	b.n	8007e1e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e000      	b.n	8007e20 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	0018      	movs	r0, r3
 8007e22:	46bd      	mov	sp, r7
 8007e24:	b006      	add	sp, #24
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	607a      	str	r2, [r7, #4]
 8007e32:	200b      	movs	r0, #11
 8007e34:	183b      	adds	r3, r7, r0
 8007e36:	1c0a      	adds	r2, r1, #0
 8007e38:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e3a:	183b      	adds	r3, r7, r0
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d000      	beq.n	8007e44 <USBD_LL_DataInStage+0x1c>
 8007e42:	e08e      	b.n	8007f62 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3314      	adds	r3, #20
 8007e48:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	23a5      	movs	r3, #165	@ 0xa5
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	58d3      	ldr	r3, [r2, r3]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d164      	bne.n	8007f20 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d915      	bls.n	8007e8e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	1ad2      	subs	r2, r2, r3
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f000 ffe9 	bl	8008e52 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	2300      	movs	r3, #0
 8007e84:	2200      	movs	r2, #0
 8007e86:	2100      	movs	r1, #0
 8007e88:	f001 fc29 	bl	80096de <USBD_LL_PrepareReceive>
 8007e8c:	e059      	b.n	8007f42 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	0019      	movs	r1, r3
 8007e98:	0010      	movs	r0, r2
 8007e9a:	f7f8 f9bb 	bl	8000214 <__aeabi_uidivmod>
 8007e9e:	1e0b      	subs	r3, r1, #0
 8007ea0:	d11f      	bne.n	8007ee2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	689a      	ldr	r2, [r3, #8]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d319      	bcc.n	8007ee2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	689a      	ldr	r2, [r3, #8]
 8007eb2:	68f9      	ldr	r1, [r7, #12]
 8007eb4:	23a6      	movs	r3, #166	@ 0xa6
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d211      	bcs.n	8007ee2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	f000 ffc4 	bl	8008e52 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	23a6      	movs	r3, #166	@ 0xa6
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2100      	movs	r1, #0
 8007edc:	f001 fbff 	bl	80096de <USBD_LL_PrepareReceive>
 8007ee0:	e02f      	b.n	8007f42 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	23ad      	movs	r3, #173	@ 0xad
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	58d3      	ldr	r3, [r2, r3]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00d      	beq.n	8007f0c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	23a7      	movs	r3, #167	@ 0xa7
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ef8:	2b03      	cmp	r3, #3
 8007efa:	d107      	bne.n	8007f0c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	23ad      	movs	r3, #173	@ 0xad
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	58d3      	ldr	r3, [r2, r3]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	0010      	movs	r0, r2
 8007f0a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2180      	movs	r1, #128	@ 0x80
 8007f10:	0018      	movs	r0, r3
 8007f12:	f001 fafc 	bl	800950e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f000 ffd4 	bl	8008ec6 <USBD_CtlReceiveStatus>
 8007f1e:	e010      	b.n	8007f42 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	23a5      	movs	r3, #165	@ 0xa5
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	58d3      	ldr	r3, [r2, r3]
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	d005      	beq.n	8007f38 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	23a5      	movs	r3, #165	@ 0xa5
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d104      	bne.n	8007f42 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2180      	movs	r1, #128	@ 0x80
 8007f3c:	0018      	movs	r0, r3
 8007f3e:	f001 fae6 	bl	800950e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	23a8      	movs	r3, #168	@ 0xa8
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	5cd3      	ldrb	r3, [r2, r3]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d124      	bne.n	8007f98 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	0018      	movs	r0, r3
 8007f52:	f7ff fe43 	bl	8007bdc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	23a8      	movs	r3, #168	@ 0xa8
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	54d1      	strb	r1, [r2, r3]
 8007f60:	e01a      	b.n	8007f98 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	23ad      	movs	r3, #173	@ 0xad
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	58d3      	ldr	r3, [r2, r3]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d011      	beq.n	8007f94 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	23a7      	movs	r3, #167	@ 0xa7
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d10b      	bne.n	8007f94 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	23ad      	movs	r3, #173	@ 0xad
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	58d3      	ldr	r3, [r2, r3]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	220b      	movs	r2, #11
 8007f88:	18ba      	adds	r2, r7, r2
 8007f8a:	7811      	ldrb	r1, [r2, #0]
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	0010      	movs	r0, r2
 8007f90:	4798      	blx	r3
 8007f92:	e001      	b.n	8007f98 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f94:	2302      	movs	r3, #2
 8007f96:	e000      	b.n	8007f9a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	b006      	add	sp, #24
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b082      	sub	sp, #8
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	2340      	movs	r3, #64	@ 0x40
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	f001 fa4a 	bl	800944a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	23ac      	movs	r3, #172	@ 0xac
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	23b2      	movs	r3, #178	@ 0xb2
 8007fc4:	005b      	lsls	r3, r3, #1
 8007fc6:	2140      	movs	r1, #64	@ 0x40
 8007fc8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	2340      	movs	r3, #64	@ 0x40
 8007fce:	2200      	movs	r2, #0
 8007fd0:	2180      	movs	r1, #128	@ 0x80
 8007fd2:	f001 fa3a 	bl	800944a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2240      	movs	r2, #64	@ 0x40
 8007fe0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	23a7      	movs	r3, #167	@ 0xa7
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	2101      	movs	r1, #1
 8007fea:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	23a5      	movs	r3, #165	@ 0xa5
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	23a9      	movs	r3, #169	@ 0xa9
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	2100      	movs	r1, #0
 8008004:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	23ae      	movs	r3, #174	@ 0xae
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	58d3      	ldr	r3, [r2, r3]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	23ad      	movs	r3, #173	@ 0xad
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	58d3      	ldr	r3, [r2, r3]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	b2d9      	uxtb	r1, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	0018      	movs	r0, r3
 8008026:	4790      	blx	r2
  }

  return USBD_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	0018      	movs	r0, r3
 800802c:	46bd      	mov	sp, r7
 800802e:	b002      	add	sp, #8
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	000a      	movs	r2, r1
 800803c:	1cfb      	adds	r3, r7, #3
 800803e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	1cfa      	adds	r2, r7, #3
 8008044:	7812      	ldrb	r2, [r2, #0]
 8008046:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	0018      	movs	r0, r3
 800804c:	46bd      	mov	sp, r7
 800804e:	b002      	add	sp, #8
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	23a7      	movs	r3, #167	@ 0xa7
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	5cd1      	ldrb	r1, [r2, r3]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a06      	ldr	r2, [pc, #24]	@ (8008080 <USBD_LL_Suspend+0x2c>)
 8008068:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	23a7      	movs	r3, #167	@ 0xa7
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	2104      	movs	r1, #4
 8008072:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	0018      	movs	r0, r3
 8008078:	46bd      	mov	sp, r7
 800807a:	b002      	add	sp, #8
 800807c:	bd80      	pop	{r7, pc}
 800807e:	46c0      	nop			@ (mov r8, r8)
 8008080:	0000029d 	.word	0x0000029d

08008084 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	23a7      	movs	r3, #167	@ 0xa7
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	5cd3      	ldrb	r3, [r2, r3]
 8008094:	2b04      	cmp	r3, #4
 8008096:	d106      	bne.n	80080a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a05      	ldr	r2, [pc, #20]	@ (80080b0 <USBD_LL_Resume+0x2c>)
 800809c:	5c99      	ldrb	r1, [r3, r2]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	23a7      	movs	r3, #167	@ 0xa7
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	0018      	movs	r0, r3
 80080aa:	46bd      	mov	sp, r7
 80080ac:	b002      	add	sp, #8
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	0000029d 	.word	0x0000029d

080080b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	23a7      	movs	r3, #167	@ 0xa7
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	5cd3      	ldrb	r3, [r2, r3]
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d10e      	bne.n	80080e6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	23ad      	movs	r3, #173	@ 0xad
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	58d3      	ldr	r3, [r2, r3]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d007      	beq.n	80080e6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	23ad      	movs	r3, #173	@ 0xad
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	58d3      	ldr	r3, [r2, r3]
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	0010      	movs	r0, r2
 80080e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	0018      	movs	r0, r3
 80080ea:	46bd      	mov	sp, r7
 80080ec:	b002      	add	sp, #8
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080fa:	230f      	movs	r3, #15
 80080fc:	18fb      	adds	r3, r7, r3
 80080fe:	2200      	movs	r2, #0
 8008100:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	001a      	movs	r2, r3
 8008108:	2360      	movs	r3, #96	@ 0x60
 800810a:	4013      	ands	r3, r2
 800810c:	2b40      	cmp	r3, #64	@ 0x40
 800810e:	d004      	beq.n	800811a <USBD_StdDevReq+0x2a>
 8008110:	d84f      	bhi.n	80081b2 <USBD_StdDevReq+0xc2>
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00b      	beq.n	800812e <USBD_StdDevReq+0x3e>
 8008116:	2b20      	cmp	r3, #32
 8008118:	d14b      	bne.n	80081b2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	23ad      	movs	r3, #173	@ 0xad
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	58d3      	ldr	r3, [r2, r3]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	6839      	ldr	r1, [r7, #0]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	0010      	movs	r0, r2
 800812a:	4798      	blx	r3
      break;
 800812c:	e048      	b.n	80081c0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	785b      	ldrb	r3, [r3, #1]
 8008132:	2b09      	cmp	r3, #9
 8008134:	d835      	bhi.n	80081a2 <USBD_StdDevReq+0xb2>
 8008136:	009a      	lsls	r2, r3, #2
 8008138:	4b25      	ldr	r3, [pc, #148]	@ (80081d0 <USBD_StdDevReq+0xe0>)
 800813a:	18d3      	adds	r3, r2, r3
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	0011      	movs	r1, r2
 8008146:	0018      	movs	r0, r3
 8008148:	f000 fa52 	bl	80085f0 <USBD_GetDescriptor>
          break;
 800814c:	e030      	b.n	80081b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	0011      	movs	r1, r2
 8008154:	0018      	movs	r0, r3
 8008156:	f000 fbfd 	bl	8008954 <USBD_SetAddress>
          break;
 800815a:	e029      	b.n	80081b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	0011      	movs	r1, r2
 8008162:	0018      	movs	r0, r3
 8008164:	f000 fc4a 	bl	80089fc <USBD_SetConfig>
          break;
 8008168:	e022      	b.n	80081b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	0011      	movs	r1, r2
 8008170:	0018      	movs	r0, r3
 8008172:	f000 fce7 	bl	8008b44 <USBD_GetConfig>
          break;
 8008176:	e01b      	b.n	80081b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	0011      	movs	r1, r2
 800817e:	0018      	movs	r0, r3
 8008180:	f000 fd1b 	bl	8008bba <USBD_GetStatus>
          break;
 8008184:	e014      	b.n	80081b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	0011      	movs	r1, r2
 800818c:	0018      	movs	r0, r3
 800818e:	f000 fd4e 	bl	8008c2e <USBD_SetFeature>
          break;
 8008192:	e00d      	b.n	80081b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	0011      	movs	r1, r2
 800819a:	0018      	movs	r0, r3
 800819c:	f000 fd5d 	bl	8008c5a <USBD_ClrFeature>
          break;
 80081a0:	e006      	b.n	80081b0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	0011      	movs	r1, r2
 80081a8:	0018      	movs	r0, r3
 80081aa:	f000 fdb4 	bl	8008d16 <USBD_CtlError>
          break;
 80081ae:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80081b0:	e006      	b.n	80081c0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	0011      	movs	r1, r2
 80081b8:	0018      	movs	r0, r3
 80081ba:	f000 fdac 	bl	8008d16 <USBD_CtlError>
      break;
 80081be:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80081c0:	230f      	movs	r3, #15
 80081c2:	18fb      	adds	r3, r7, r3
 80081c4:	781b      	ldrb	r3, [r3, #0]
}
 80081c6:	0018      	movs	r0, r3
 80081c8:	46bd      	mov	sp, r7
 80081ca:	b004      	add	sp, #16
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	46c0      	nop			@ (mov r8, r8)
 80081d0:	08009980 	.word	0x08009980

080081d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80081d4:	b5b0      	push	{r4, r5, r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081de:	230f      	movs	r3, #15
 80081e0:	18fb      	adds	r3, r7, r3
 80081e2:	2200      	movs	r2, #0
 80081e4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	001a      	movs	r2, r3
 80081ec:	2360      	movs	r3, #96	@ 0x60
 80081ee:	4013      	ands	r3, r2
 80081f0:	2b40      	cmp	r3, #64	@ 0x40
 80081f2:	d004      	beq.n	80081fe <USBD_StdItfReq+0x2a>
 80081f4:	d839      	bhi.n	800826a <USBD_StdItfReq+0x96>
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <USBD_StdItfReq+0x2a>
 80081fa:	2b20      	cmp	r3, #32
 80081fc:	d135      	bne.n	800826a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	23a7      	movs	r3, #167	@ 0xa7
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	5cd3      	ldrb	r3, [r2, r3]
 8008206:	3b01      	subs	r3, #1
 8008208:	2b02      	cmp	r3, #2
 800820a:	d825      	bhi.n	8008258 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	889b      	ldrh	r3, [r3, #4]
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b01      	cmp	r3, #1
 8008214:	d819      	bhi.n	800824a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	23ad      	movs	r3, #173	@ 0xad
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	58d3      	ldr	r3, [r2, r3]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	250f      	movs	r5, #15
 8008222:	197c      	adds	r4, r7, r5
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	0010      	movs	r0, r2
 800822a:	4798      	blx	r3
 800822c:	0003      	movs	r3, r0
 800822e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	88db      	ldrh	r3, [r3, #6]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d116      	bne.n	8008266 <USBD_StdItfReq+0x92>
 8008238:	197b      	adds	r3, r7, r5
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d112      	bne.n	8008266 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	0018      	movs	r0, r3
 8008244:	f000 fe2b 	bl	8008e9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008248:	e00d      	b.n	8008266 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	0011      	movs	r1, r2
 8008250:	0018      	movs	r0, r3
 8008252:	f000 fd60 	bl	8008d16 <USBD_CtlError>
          break;
 8008256:	e006      	b.n	8008266 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	0011      	movs	r1, r2
 800825e:	0018      	movs	r0, r3
 8008260:	f000 fd59 	bl	8008d16 <USBD_CtlError>
          break;
 8008264:	e000      	b.n	8008268 <USBD_StdItfReq+0x94>
          break;
 8008266:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8008268:	e006      	b.n	8008278 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	0011      	movs	r1, r2
 8008270:	0018      	movs	r0, r3
 8008272:	f000 fd50 	bl	8008d16 <USBD_CtlError>
      break;
 8008276:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	0018      	movs	r0, r3
 800827c:	46bd      	mov	sp, r7
 800827e:	b004      	add	sp, #16
 8008280:	bdb0      	pop	{r4, r5, r7, pc}

08008282 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008282:	b5b0      	push	{r4, r5, r7, lr}
 8008284:	b084      	sub	sp, #16
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800828c:	230f      	movs	r3, #15
 800828e:	18fb      	adds	r3, r7, r3
 8008290:	2200      	movs	r2, #0
 8008292:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	889a      	ldrh	r2, [r3, #4]
 8008298:	230e      	movs	r3, #14
 800829a:	18fb      	adds	r3, r7, r3
 800829c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	001a      	movs	r2, r3
 80082a4:	2360      	movs	r3, #96	@ 0x60
 80082a6:	4013      	ands	r3, r2
 80082a8:	2b40      	cmp	r3, #64	@ 0x40
 80082aa:	d006      	beq.n	80082ba <USBD_StdEPReq+0x38>
 80082ac:	d900      	bls.n	80082b0 <USBD_StdEPReq+0x2e>
 80082ae:	e190      	b.n	80085d2 <USBD_StdEPReq+0x350>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00c      	beq.n	80082ce <USBD_StdEPReq+0x4c>
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d000      	beq.n	80082ba <USBD_StdEPReq+0x38>
 80082b8:	e18b      	b.n	80085d2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	23ad      	movs	r3, #173	@ 0xad
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	58d3      	ldr	r3, [r2, r3]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	0010      	movs	r0, r2
 80082ca:	4798      	blx	r3
      break;
 80082cc:	e188      	b.n	80085e0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	001a      	movs	r2, r3
 80082d4:	2360      	movs	r3, #96	@ 0x60
 80082d6:	4013      	ands	r3, r2
 80082d8:	2b20      	cmp	r3, #32
 80082da:	d10f      	bne.n	80082fc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	23ad      	movs	r3, #173	@ 0xad
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	58d3      	ldr	r3, [r2, r3]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	250f      	movs	r5, #15
 80082e8:	197c      	adds	r4, r7, r5
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	0010      	movs	r0, r2
 80082f0:	4798      	blx	r3
 80082f2:	0003      	movs	r3, r0
 80082f4:	7023      	strb	r3, [r4, #0]

        return ret;
 80082f6:	197b      	adds	r3, r7, r5
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	e174      	b.n	80085e6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	785b      	ldrb	r3, [r3, #1]
 8008300:	2b03      	cmp	r3, #3
 8008302:	d007      	beq.n	8008314 <USBD_StdEPReq+0x92>
 8008304:	dd00      	ble.n	8008308 <USBD_StdEPReq+0x86>
 8008306:	e15c      	b.n	80085c2 <USBD_StdEPReq+0x340>
 8008308:	2b00      	cmp	r3, #0
 800830a:	d100      	bne.n	800830e <USBD_StdEPReq+0x8c>
 800830c:	e092      	b.n	8008434 <USBD_StdEPReq+0x1b2>
 800830e:	2b01      	cmp	r3, #1
 8008310:	d04b      	beq.n	80083aa <USBD_StdEPReq+0x128>
 8008312:	e156      	b.n	80085c2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	23a7      	movs	r3, #167	@ 0xa7
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	5cd3      	ldrb	r3, [r2, r3]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d002      	beq.n	8008326 <USBD_StdEPReq+0xa4>
 8008320:	2b03      	cmp	r3, #3
 8008322:	d01d      	beq.n	8008360 <USBD_StdEPReq+0xde>
 8008324:	e039      	b.n	800839a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008326:	220e      	movs	r2, #14
 8008328:	18bb      	adds	r3, r7, r2
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d010      	beq.n	8008352 <USBD_StdEPReq+0xd0>
 8008330:	18bb      	adds	r3, r7, r2
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b80      	cmp	r3, #128	@ 0x80
 8008336:	d00c      	beq.n	8008352 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008338:	18bb      	adds	r3, r7, r2
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	0011      	movs	r1, r2
 8008340:	0018      	movs	r0, r3
 8008342:	f001 f8e4 	bl	800950e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2180      	movs	r1, #128	@ 0x80
 800834a:	0018      	movs	r0, r3
 800834c:	f001 f8df 	bl	800950e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008350:	e02a      	b.n	80083a8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	0011      	movs	r1, r2
 8008358:	0018      	movs	r0, r3
 800835a:	f000 fcdc 	bl	8008d16 <USBD_CtlError>
              break;
 800835e:	e023      	b.n	80083a8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	885b      	ldrh	r3, [r3, #2]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d113      	bne.n	8008390 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8008368:	220e      	movs	r2, #14
 800836a:	18bb      	adds	r3, r7, r2
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00e      	beq.n	8008390 <USBD_StdEPReq+0x10e>
 8008372:	18bb      	adds	r3, r7, r2
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	2b80      	cmp	r3, #128	@ 0x80
 8008378:	d00a      	beq.n	8008390 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	88db      	ldrh	r3, [r3, #6]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d106      	bne.n	8008390 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008382:	18bb      	adds	r3, r7, r2
 8008384:	781a      	ldrb	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	0011      	movs	r1, r2
 800838a:	0018      	movs	r0, r3
 800838c:	f001 f8bf 	bl	800950e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	0018      	movs	r0, r3
 8008394:	f000 fd83 	bl	8008e9e <USBD_CtlSendStatus>

              break;
 8008398:	e006      	b.n	80083a8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	0011      	movs	r1, r2
 80083a0:	0018      	movs	r0, r3
 80083a2:	f000 fcb8 	bl	8008d16 <USBD_CtlError>
              break;
 80083a6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80083a8:	e112      	b.n	80085d0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	23a7      	movs	r3, #167	@ 0xa7
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	5cd3      	ldrb	r3, [r2, r3]
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d002      	beq.n	80083bc <USBD_StdEPReq+0x13a>
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	d01d      	beq.n	80083f6 <USBD_StdEPReq+0x174>
 80083ba:	e032      	b.n	8008422 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083bc:	220e      	movs	r2, #14
 80083be:	18bb      	adds	r3, r7, r2
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d010      	beq.n	80083e8 <USBD_StdEPReq+0x166>
 80083c6:	18bb      	adds	r3, r7, r2
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b80      	cmp	r3, #128	@ 0x80
 80083cc:	d00c      	beq.n	80083e8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80083ce:	18bb      	adds	r3, r7, r2
 80083d0:	781a      	ldrb	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	0011      	movs	r1, r2
 80083d6:	0018      	movs	r0, r3
 80083d8:	f001 f899 	bl	800950e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2180      	movs	r1, #128	@ 0x80
 80083e0:	0018      	movs	r0, r3
 80083e2:	f001 f894 	bl	800950e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083e6:	e024      	b.n	8008432 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	0011      	movs	r1, r2
 80083ee:	0018      	movs	r0, r3
 80083f0:	f000 fc91 	bl	8008d16 <USBD_CtlError>
              break;
 80083f4:	e01d      	b.n	8008432 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	885b      	ldrh	r3, [r3, #2]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d118      	bne.n	8008430 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80083fe:	210e      	movs	r1, #14
 8008400:	187b      	adds	r3, r7, r1
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	227f      	movs	r2, #127	@ 0x7f
 8008406:	4013      	ands	r3, r2
 8008408:	d006      	beq.n	8008418 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800840a:	187b      	adds	r3, r7, r1
 800840c:	781a      	ldrb	r2, [r3, #0]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	0011      	movs	r1, r2
 8008412:	0018      	movs	r0, r3
 8008414:	f001 f8a6 	bl	8009564 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	0018      	movs	r0, r3
 800841c:	f000 fd3f 	bl	8008e9e <USBD_CtlSendStatus>
              }
              break;
 8008420:	e006      	b.n	8008430 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	0011      	movs	r1, r2
 8008428:	0018      	movs	r0, r3
 800842a:	f000 fc74 	bl	8008d16 <USBD_CtlError>
              break;
 800842e:	e000      	b.n	8008432 <USBD_StdEPReq+0x1b0>
              break;
 8008430:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8008432:	e0cd      	b.n	80085d0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	23a7      	movs	r3, #167	@ 0xa7
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	5cd3      	ldrb	r3, [r2, r3]
 800843c:	2b02      	cmp	r3, #2
 800843e:	d002      	beq.n	8008446 <USBD_StdEPReq+0x1c4>
 8008440:	2b03      	cmp	r3, #3
 8008442:	d03c      	beq.n	80084be <USBD_StdEPReq+0x23c>
 8008444:	e0b5      	b.n	80085b2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008446:	220e      	movs	r2, #14
 8008448:	18bb      	adds	r3, r7, r2
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <USBD_StdEPReq+0x1e4>
 8008450:	18bb      	adds	r3, r7, r2
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b80      	cmp	r3, #128	@ 0x80
 8008456:	d006      	beq.n	8008466 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	0011      	movs	r1, r2
 800845e:	0018      	movs	r0, r3
 8008460:	f000 fc59 	bl	8008d16 <USBD_CtlError>
                break;
 8008464:	e0ac      	b.n	80085c0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008466:	220e      	movs	r2, #14
 8008468:	18bb      	adds	r3, r7, r2
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	b25b      	sxtb	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	da0c      	bge.n	800848c <USBD_StdEPReq+0x20a>
 8008472:	18bb      	adds	r3, r7, r2
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	227f      	movs	r2, #127	@ 0x7f
 8008478:	401a      	ands	r2, r3
 800847a:	0013      	movs	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	189b      	adds	r3, r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	3310      	adds	r3, #16
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	18d3      	adds	r3, r2, r3
 8008488:	3304      	adds	r3, #4
 800848a:	e00d      	b.n	80084a8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800848c:	230e      	movs	r3, #14
 800848e:	18fb      	adds	r3, r7, r3
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	227f      	movs	r2, #127	@ 0x7f
 8008494:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008496:	0013      	movs	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	189b      	adds	r3, r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	3351      	adds	r3, #81	@ 0x51
 80084a0:	33ff      	adds	r3, #255	@ 0xff
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	18d3      	adds	r3, r2, r3
 80084a6:	3304      	adds	r3, #4
 80084a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2200      	movs	r2, #0
 80084ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80084b0:	68b9      	ldr	r1, [r7, #8]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2202      	movs	r2, #2
 80084b6:	0018      	movs	r0, r3
 80084b8:	f000 fcab 	bl	8008e12 <USBD_CtlSendData>
              break;
 80084bc:	e080      	b.n	80085c0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80084be:	220e      	movs	r2, #14
 80084c0:	18bb      	adds	r3, r7, r2
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	b25b      	sxtb	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	da14      	bge.n	80084f4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80084ca:	18bb      	adds	r3, r7, r2
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	220f      	movs	r2, #15
 80084d0:	401a      	ands	r2, r3
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	0013      	movs	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	189b      	adds	r3, r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	18cb      	adds	r3, r1, r3
 80084de:	3318      	adds	r3, #24
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d11e      	bne.n	8008524 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	0011      	movs	r1, r2
 80084ec:	0018      	movs	r0, r3
 80084ee:	f000 fc12 	bl	8008d16 <USBD_CtlError>
                  break;
 80084f2:	e065      	b.n	80085c0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80084f4:	230e      	movs	r3, #14
 80084f6:	18fb      	adds	r3, r7, r3
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	220f      	movs	r2, #15
 80084fc:	401a      	ands	r2, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	23ac      	movs	r3, #172	@ 0xac
 8008502:	0059      	lsls	r1, r3, #1
 8008504:	0013      	movs	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	189b      	adds	r3, r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	18c3      	adds	r3, r0, r3
 800850e:	185b      	adds	r3, r3, r1
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d106      	bne.n	8008524 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	0011      	movs	r1, r2
 800851c:	0018      	movs	r0, r3
 800851e:	f000 fbfa 	bl	8008d16 <USBD_CtlError>
                  break;
 8008522:	e04d      	b.n	80085c0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008524:	220e      	movs	r2, #14
 8008526:	18bb      	adds	r3, r7, r2
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	b25b      	sxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	da0c      	bge.n	800854a <USBD_StdEPReq+0x2c8>
 8008530:	18bb      	adds	r3, r7, r2
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	227f      	movs	r2, #127	@ 0x7f
 8008536:	401a      	ands	r2, r3
 8008538:	0013      	movs	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	189b      	adds	r3, r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	3310      	adds	r3, #16
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	18d3      	adds	r3, r2, r3
 8008546:	3304      	adds	r3, #4
 8008548:	e00d      	b.n	8008566 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800854a:	230e      	movs	r3, #14
 800854c:	18fb      	adds	r3, r7, r3
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	227f      	movs	r2, #127	@ 0x7f
 8008552:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008554:	0013      	movs	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	189b      	adds	r3, r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	3351      	adds	r3, #81	@ 0x51
 800855e:	33ff      	adds	r3, #255	@ 0xff
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	18d3      	adds	r3, r2, r3
 8008564:	3304      	adds	r3, #4
 8008566:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008568:	220e      	movs	r2, #14
 800856a:	18bb      	adds	r3, r7, r2
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <USBD_StdEPReq+0x2f8>
 8008572:	18bb      	adds	r3, r7, r2
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b80      	cmp	r3, #128	@ 0x80
 8008578:	d103      	bne.n	8008582 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	e010      	b.n	80085a4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008582:	230e      	movs	r3, #14
 8008584:	18fb      	adds	r3, r7, r3
 8008586:	781a      	ldrb	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	0011      	movs	r1, r2
 800858c:	0018      	movs	r0, r3
 800858e:	f001 f814 	bl	80095ba <USBD_LL_IsStallEP>
 8008592:	1e03      	subs	r3, r0, #0
 8008594:	d003      	beq.n	800859e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2201      	movs	r2, #1
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	e002      	b.n	80085a4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085a4:	68b9      	ldr	r1, [r7, #8]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2202      	movs	r2, #2
 80085aa:	0018      	movs	r0, r3
 80085ac:	f000 fc31 	bl	8008e12 <USBD_CtlSendData>
              break;
 80085b0:	e006      	b.n	80085c0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	0011      	movs	r1, r2
 80085b8:	0018      	movs	r0, r3
 80085ba:	f000 fbac 	bl	8008d16 <USBD_CtlError>
              break;
 80085be:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80085c0:	e006      	b.n	80085d0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	0011      	movs	r1, r2
 80085c8:	0018      	movs	r0, r3
 80085ca:	f000 fba4 	bl	8008d16 <USBD_CtlError>
          break;
 80085ce:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80085d0:	e006      	b.n	80085e0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	0011      	movs	r1, r2
 80085d8:	0018      	movs	r0, r3
 80085da:	f000 fb9c 	bl	8008d16 <USBD_CtlError>
      break;
 80085de:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80085e0:	230f      	movs	r3, #15
 80085e2:	18fb      	adds	r3, r7, r3
 80085e4:	781b      	ldrb	r3, [r3, #0]
}
 80085e6:	0018      	movs	r0, r3
 80085e8:	46bd      	mov	sp, r7
 80085ea:	b004      	add	sp, #16
 80085ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080085f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085fa:	2308      	movs	r3, #8
 80085fc:	18fb      	adds	r3, r7, r3
 80085fe:	2200      	movs	r2, #0
 8008600:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008606:	230b      	movs	r3, #11
 8008608:	18fb      	adds	r3, r7, r3
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	885b      	ldrh	r3, [r3, #2]
 8008612:	0a1b      	lsrs	r3, r3, #8
 8008614:	b29b      	uxth	r3, r3
 8008616:	2b07      	cmp	r3, #7
 8008618:	d900      	bls.n	800861c <USBD_GetDescriptor+0x2c>
 800861a:	e159      	b.n	80088d0 <USBD_GetDescriptor+0x2e0>
 800861c:	009a      	lsls	r2, r3, #2
 800861e:	4bcb      	ldr	r3, [pc, #812]	@ (800894c <USBD_GetDescriptor+0x35c>)
 8008620:	18d3      	adds	r3, r2, r3
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	23ac      	movs	r3, #172	@ 0xac
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	58d3      	ldr	r3, [r2, r3]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	7c12      	ldrb	r2, [r2, #16]
 8008634:	2108      	movs	r1, #8
 8008636:	1879      	adds	r1, r7, r1
 8008638:	0010      	movs	r0, r2
 800863a:	4798      	blx	r3
 800863c:	0003      	movs	r3, r0
 800863e:	60fb      	str	r3, [r7, #12]
      break;
 8008640:	e153      	b.n	80088ea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	7c1b      	ldrb	r3, [r3, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10f      	bne.n	800866a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	23ad      	movs	r3, #173	@ 0xad
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	58d3      	ldr	r3, [r2, r3]
 8008652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008654:	2208      	movs	r2, #8
 8008656:	18ba      	adds	r2, r7, r2
 8008658:	0010      	movs	r0, r2
 800865a:	4798      	blx	r3
 800865c:	0003      	movs	r3, r0
 800865e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3301      	adds	r3, #1
 8008664:	2202      	movs	r2, #2
 8008666:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008668:	e13f      	b.n	80088ea <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	23ad      	movs	r3, #173	@ 0xad
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	58d3      	ldr	r3, [r2, r3]
 8008672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008674:	2208      	movs	r2, #8
 8008676:	18ba      	adds	r2, r7, r2
 8008678:	0010      	movs	r0, r2
 800867a:	4798      	blx	r3
 800867c:	0003      	movs	r3, r0
 800867e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3301      	adds	r3, #1
 8008684:	2202      	movs	r2, #2
 8008686:	701a      	strb	r2, [r3, #0]
      break;
 8008688:	e12f      	b.n	80088ea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	885b      	ldrh	r3, [r3, #2]
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b05      	cmp	r3, #5
 8008692:	d900      	bls.n	8008696 <USBD_GetDescriptor+0xa6>
 8008694:	e0d0      	b.n	8008838 <USBD_GetDescriptor+0x248>
 8008696:	009a      	lsls	r2, r3, #2
 8008698:	4bad      	ldr	r3, [pc, #692]	@ (8008950 <USBD_GetDescriptor+0x360>)
 800869a:	18d3      	adds	r3, r2, r3
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	23ac      	movs	r3, #172	@ 0xac
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	58d3      	ldr	r3, [r2, r3]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00d      	beq.n	80086ca <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	23ac      	movs	r3, #172	@ 0xac
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	58d3      	ldr	r3, [r2, r3]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	7c12      	ldrb	r2, [r2, #16]
 80086bc:	2108      	movs	r1, #8
 80086be:	1879      	adds	r1, r7, r1
 80086c0:	0010      	movs	r0, r2
 80086c2:	4798      	blx	r3
 80086c4:	0003      	movs	r3, r0
 80086c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086c8:	e0c3      	b.n	8008852 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	0011      	movs	r1, r2
 80086d0:	0018      	movs	r0, r3
 80086d2:	f000 fb20 	bl	8008d16 <USBD_CtlError>
            err++;
 80086d6:	210b      	movs	r1, #11
 80086d8:	187b      	adds	r3, r7, r1
 80086da:	781a      	ldrb	r2, [r3, #0]
 80086dc:	187b      	adds	r3, r7, r1
 80086de:	3201      	adds	r2, #1
 80086e0:	701a      	strb	r2, [r3, #0]
          break;
 80086e2:	e0b6      	b.n	8008852 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	23ac      	movs	r3, #172	@ 0xac
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	58d3      	ldr	r3, [r2, r3]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00d      	beq.n	800870e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	23ac      	movs	r3, #172	@ 0xac
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	58d3      	ldr	r3, [r2, r3]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	7c12      	ldrb	r2, [r2, #16]
 8008700:	2108      	movs	r1, #8
 8008702:	1879      	adds	r1, r7, r1
 8008704:	0010      	movs	r0, r2
 8008706:	4798      	blx	r3
 8008708:	0003      	movs	r3, r0
 800870a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800870c:	e0a1      	b.n	8008852 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	0011      	movs	r1, r2
 8008714:	0018      	movs	r0, r3
 8008716:	f000 fafe 	bl	8008d16 <USBD_CtlError>
            err++;
 800871a:	210b      	movs	r1, #11
 800871c:	187b      	adds	r3, r7, r1
 800871e:	781a      	ldrb	r2, [r3, #0]
 8008720:	187b      	adds	r3, r7, r1
 8008722:	3201      	adds	r2, #1
 8008724:	701a      	strb	r2, [r3, #0]
          break;
 8008726:	e094      	b.n	8008852 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	23ac      	movs	r3, #172	@ 0xac
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	58d3      	ldr	r3, [r2, r3]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00d      	beq.n	8008752 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	23ac      	movs	r3, #172	@ 0xac
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	58d3      	ldr	r3, [r2, r3]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	7c12      	ldrb	r2, [r2, #16]
 8008744:	2108      	movs	r1, #8
 8008746:	1879      	adds	r1, r7, r1
 8008748:	0010      	movs	r0, r2
 800874a:	4798      	blx	r3
 800874c:	0003      	movs	r3, r0
 800874e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008750:	e07f      	b.n	8008852 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	0011      	movs	r1, r2
 8008758:	0018      	movs	r0, r3
 800875a:	f000 fadc 	bl	8008d16 <USBD_CtlError>
            err++;
 800875e:	210b      	movs	r1, #11
 8008760:	187b      	adds	r3, r7, r1
 8008762:	781a      	ldrb	r2, [r3, #0]
 8008764:	187b      	adds	r3, r7, r1
 8008766:	3201      	adds	r2, #1
 8008768:	701a      	strb	r2, [r3, #0]
          break;
 800876a:	e072      	b.n	8008852 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	23ac      	movs	r3, #172	@ 0xac
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	58d3      	ldr	r3, [r2, r3]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00d      	beq.n	8008796 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	23ac      	movs	r3, #172	@ 0xac
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	58d3      	ldr	r3, [r2, r3]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	7c12      	ldrb	r2, [r2, #16]
 8008788:	2108      	movs	r1, #8
 800878a:	1879      	adds	r1, r7, r1
 800878c:	0010      	movs	r0, r2
 800878e:	4798      	blx	r3
 8008790:	0003      	movs	r3, r0
 8008792:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008794:	e05d      	b.n	8008852 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	0011      	movs	r1, r2
 800879c:	0018      	movs	r0, r3
 800879e:	f000 faba 	bl	8008d16 <USBD_CtlError>
            err++;
 80087a2:	210b      	movs	r1, #11
 80087a4:	187b      	adds	r3, r7, r1
 80087a6:	781a      	ldrb	r2, [r3, #0]
 80087a8:	187b      	adds	r3, r7, r1
 80087aa:	3201      	adds	r2, #1
 80087ac:	701a      	strb	r2, [r3, #0]
          break;
 80087ae:	e050      	b.n	8008852 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	23ac      	movs	r3, #172	@ 0xac
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	58d3      	ldr	r3, [r2, r3]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00d      	beq.n	80087da <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	23ac      	movs	r3, #172	@ 0xac
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	58d3      	ldr	r3, [r2, r3]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	7c12      	ldrb	r2, [r2, #16]
 80087cc:	2108      	movs	r1, #8
 80087ce:	1879      	adds	r1, r7, r1
 80087d0:	0010      	movs	r0, r2
 80087d2:	4798      	blx	r3
 80087d4:	0003      	movs	r3, r0
 80087d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087d8:	e03b      	b.n	8008852 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	0011      	movs	r1, r2
 80087e0:	0018      	movs	r0, r3
 80087e2:	f000 fa98 	bl	8008d16 <USBD_CtlError>
            err++;
 80087e6:	210b      	movs	r1, #11
 80087e8:	187b      	adds	r3, r7, r1
 80087ea:	781a      	ldrb	r2, [r3, #0]
 80087ec:	187b      	adds	r3, r7, r1
 80087ee:	3201      	adds	r2, #1
 80087f0:	701a      	strb	r2, [r3, #0]
          break;
 80087f2:	e02e      	b.n	8008852 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	23ac      	movs	r3, #172	@ 0xac
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	58d3      	ldr	r3, [r2, r3]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00d      	beq.n	800881e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	23ac      	movs	r3, #172	@ 0xac
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	58d3      	ldr	r3, [r2, r3]
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	7c12      	ldrb	r2, [r2, #16]
 8008810:	2108      	movs	r1, #8
 8008812:	1879      	adds	r1, r7, r1
 8008814:	0010      	movs	r0, r2
 8008816:	4798      	blx	r3
 8008818:	0003      	movs	r3, r0
 800881a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800881c:	e019      	b.n	8008852 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	0011      	movs	r1, r2
 8008824:	0018      	movs	r0, r3
 8008826:	f000 fa76 	bl	8008d16 <USBD_CtlError>
            err++;
 800882a:	210b      	movs	r1, #11
 800882c:	187b      	adds	r3, r7, r1
 800882e:	781a      	ldrb	r2, [r3, #0]
 8008830:	187b      	adds	r3, r7, r1
 8008832:	3201      	adds	r2, #1
 8008834:	701a      	strb	r2, [r3, #0]
          break;
 8008836:	e00c      	b.n	8008852 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	0011      	movs	r1, r2
 800883e:	0018      	movs	r0, r3
 8008840:	f000 fa69 	bl	8008d16 <USBD_CtlError>
          err++;
 8008844:	210b      	movs	r1, #11
 8008846:	187b      	adds	r3, r7, r1
 8008848:	781a      	ldrb	r2, [r3, #0]
 800884a:	187b      	adds	r3, r7, r1
 800884c:	3201      	adds	r2, #1
 800884e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8008850:	e04b      	b.n	80088ea <USBD_GetDescriptor+0x2fa>
 8008852:	e04a      	b.n	80088ea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	7c1b      	ldrb	r3, [r3, #16]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10b      	bne.n	8008874 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	23ad      	movs	r3, #173	@ 0xad
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	58d3      	ldr	r3, [r2, r3]
 8008864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008866:	2208      	movs	r2, #8
 8008868:	18ba      	adds	r2, r7, r2
 800886a:	0010      	movs	r0, r2
 800886c:	4798      	blx	r3
 800886e:	0003      	movs	r3, r0
 8008870:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008872:	e03a      	b.n	80088ea <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	0011      	movs	r1, r2
 800887a:	0018      	movs	r0, r3
 800887c:	f000 fa4b 	bl	8008d16 <USBD_CtlError>
        err++;
 8008880:	210b      	movs	r1, #11
 8008882:	187b      	adds	r3, r7, r1
 8008884:	781a      	ldrb	r2, [r3, #0]
 8008886:	187b      	adds	r3, r7, r1
 8008888:	3201      	adds	r2, #1
 800888a:	701a      	strb	r2, [r3, #0]
      break;
 800888c:	e02d      	b.n	80088ea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	7c1b      	ldrb	r3, [r3, #16]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10f      	bne.n	80088b6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	23ad      	movs	r3, #173	@ 0xad
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	58d3      	ldr	r3, [r2, r3]
 800889e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a0:	2208      	movs	r2, #8
 80088a2:	18ba      	adds	r2, r7, r2
 80088a4:	0010      	movs	r0, r2
 80088a6:	4798      	blx	r3
 80088a8:	0003      	movs	r3, r0
 80088aa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3301      	adds	r3, #1
 80088b0:	2207      	movs	r2, #7
 80088b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088b4:	e019      	b.n	80088ea <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	0011      	movs	r1, r2
 80088bc:	0018      	movs	r0, r3
 80088be:	f000 fa2a 	bl	8008d16 <USBD_CtlError>
        err++;
 80088c2:	210b      	movs	r1, #11
 80088c4:	187b      	adds	r3, r7, r1
 80088c6:	781a      	ldrb	r2, [r3, #0]
 80088c8:	187b      	adds	r3, r7, r1
 80088ca:	3201      	adds	r2, #1
 80088cc:	701a      	strb	r2, [r3, #0]
      break;
 80088ce:	e00c      	b.n	80088ea <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	0011      	movs	r1, r2
 80088d6:	0018      	movs	r0, r3
 80088d8:	f000 fa1d 	bl	8008d16 <USBD_CtlError>
      err++;
 80088dc:	210b      	movs	r1, #11
 80088de:	187b      	adds	r3, r7, r1
 80088e0:	781a      	ldrb	r2, [r3, #0]
 80088e2:	187b      	adds	r3, r7, r1
 80088e4:	3201      	adds	r2, #1
 80088e6:	701a      	strb	r2, [r3, #0]
      break;
 80088e8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80088ea:	230b      	movs	r3, #11
 80088ec:	18fb      	adds	r3, r7, r3
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d127      	bne.n	8008944 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80088f4:	2108      	movs	r1, #8
 80088f6:	187b      	adds	r3, r7, r1
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d019      	beq.n	8008932 <USBD_GetDescriptor+0x342>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	88db      	ldrh	r3, [r3, #6]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d015      	beq.n	8008932 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	88da      	ldrh	r2, [r3, #6]
 800890a:	187b      	adds	r3, r7, r1
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	1c18      	adds	r0, r3, #0
 8008910:	1c11      	adds	r1, r2, #0
 8008912:	b28a      	uxth	r2, r1
 8008914:	b283      	uxth	r3, r0
 8008916:	429a      	cmp	r2, r3
 8008918:	d900      	bls.n	800891c <USBD_GetDescriptor+0x32c>
 800891a:	1c01      	adds	r1, r0, #0
 800891c:	b28a      	uxth	r2, r1
 800891e:	2108      	movs	r1, #8
 8008920:	187b      	adds	r3, r7, r1
 8008922:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008924:	187b      	adds	r3, r7, r1
 8008926:	881a      	ldrh	r2, [r3, #0]
 8008928:	68f9      	ldr	r1, [r7, #12]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	0018      	movs	r0, r3
 800892e:	f000 fa70 	bl	8008e12 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	88db      	ldrh	r3, [r3, #6]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d105      	bne.n	8008946 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	0018      	movs	r0, r3
 800893e:	f000 faae 	bl	8008e9e <USBD_CtlSendStatus>
 8008942:	e000      	b.n	8008946 <USBD_GetDescriptor+0x356>
    return;
 8008944:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8008946:	46bd      	mov	sp, r7
 8008948:	b004      	add	sp, #16
 800894a:	bd80      	pop	{r7, pc}
 800894c:	080099a8 	.word	0x080099a8
 8008950:	080099c8 	.word	0x080099c8

08008954 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008954:	b590      	push	{r4, r7, lr}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	889b      	ldrh	r3, [r3, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d13d      	bne.n	80089e2 <USBD_SetAddress+0x8e>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	88db      	ldrh	r3, [r3, #6]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d139      	bne.n	80089e2 <USBD_SetAddress+0x8e>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	885b      	ldrh	r3, [r3, #2]
 8008972:	2b7f      	cmp	r3, #127	@ 0x7f
 8008974:	d835      	bhi.n	80089e2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	885b      	ldrh	r3, [r3, #2]
 800897a:	b2da      	uxtb	r2, r3
 800897c:	230f      	movs	r3, #15
 800897e:	18fb      	adds	r3, r7, r3
 8008980:	217f      	movs	r1, #127	@ 0x7f
 8008982:	400a      	ands	r2, r1
 8008984:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	23a7      	movs	r3, #167	@ 0xa7
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	5cd3      	ldrb	r3, [r2, r3]
 800898e:	2b03      	cmp	r3, #3
 8008990:	d106      	bne.n	80089a0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	0011      	movs	r1, r2
 8008998:	0018      	movs	r0, r3
 800899a:	f000 f9bc 	bl	8008d16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899e:	e027      	b.n	80089f0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	240f      	movs	r4, #15
 80089a4:	193a      	adds	r2, r7, r4
 80089a6:	4914      	ldr	r1, [pc, #80]	@ (80089f8 <USBD_SetAddress+0xa4>)
 80089a8:	7812      	ldrb	r2, [r2, #0]
 80089aa:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089ac:	193b      	adds	r3, r7, r4
 80089ae:	781a      	ldrb	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	0011      	movs	r1, r2
 80089b4:	0018      	movs	r0, r3
 80089b6:	f000 fe30 	bl	800961a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	0018      	movs	r0, r3
 80089be:	f000 fa6e 	bl	8008e9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089c2:	193b      	adds	r3, r7, r4
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d005      	beq.n	80089d6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	23a7      	movs	r3, #167	@ 0xa7
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	2102      	movs	r1, #2
 80089d2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d4:	e00c      	b.n	80089f0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	23a7      	movs	r3, #167	@ 0xa7
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	2101      	movs	r1, #1
 80089de:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e0:	e006      	b.n	80089f0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	0011      	movs	r1, r2
 80089e8:	0018      	movs	r0, r3
 80089ea:	f000 f994 	bl	8008d16 <USBD_CtlError>
  }
}
 80089ee:	46c0      	nop			@ (mov r8, r8)
 80089f0:	46c0      	nop			@ (mov r8, r8)
 80089f2:	46bd      	mov	sp, r7
 80089f4:	b005      	add	sp, #20
 80089f6:	bd90      	pop	{r4, r7, pc}
 80089f8:	0000029e 	.word	0x0000029e

080089fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	885b      	ldrh	r3, [r3, #2]
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	4b4c      	ldr	r3, [pc, #304]	@ (8008b40 <USBD_SetConfig+0x144>)
 8008a0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a10:	4b4b      	ldr	r3, [pc, #300]	@ (8008b40 <USBD_SetConfig+0x144>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d906      	bls.n	8008a26 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8008a18:	683a      	ldr	r2, [r7, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	0011      	movs	r1, r2
 8008a1e:	0018      	movs	r0, r3
 8008a20:	f000 f979 	bl	8008d16 <USBD_CtlError>
 8008a24:	e088      	b.n	8008b38 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	23a7      	movs	r3, #167	@ 0xa7
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	5cd3      	ldrb	r3, [r2, r3]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d002      	beq.n	8008a38 <USBD_SetConfig+0x3c>
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d029      	beq.n	8008a8a <USBD_SetConfig+0x8e>
 8008a36:	e071      	b.n	8008b1c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008a38:	4b41      	ldr	r3, [pc, #260]	@ (8008b40 <USBD_SetConfig+0x144>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d01f      	beq.n	8008a80 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8008a40:	4b3f      	ldr	r3, [pc, #252]	@ (8008b40 <USBD_SetConfig+0x144>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	001a      	movs	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	23a7      	movs	r3, #167	@ 0xa7
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	2103      	movs	r1, #3
 8008a52:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a54:	4b3a      	ldr	r3, [pc, #232]	@ (8008b40 <USBD_SetConfig+0x144>)
 8008a56:	781a      	ldrb	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	0011      	movs	r1, r2
 8008a5c:	0018      	movs	r0, r3
 8008a5e:	f7ff f8c6 	bl	8007bee <USBD_SetClassConfig>
 8008a62:	0003      	movs	r3, r0
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d106      	bne.n	8008a76 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	0011      	movs	r1, r2
 8008a6e:	0018      	movs	r0, r3
 8008a70:	f000 f951 	bl	8008d16 <USBD_CtlError>
            return;
 8008a74:	e060      	b.n	8008b38 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	0018      	movs	r0, r3
 8008a7a:	f000 fa10 	bl	8008e9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a7e:	e05b      	b.n	8008b38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	0018      	movs	r0, r3
 8008a84:	f000 fa0b 	bl	8008e9e <USBD_CtlSendStatus>
        break;
 8008a88:	e056      	b.n	8008b38 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8008b40 <USBD_SetConfig+0x144>)
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d115      	bne.n	8008abe <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	23a7      	movs	r3, #167	@ 0xa7
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	2102      	movs	r1, #2
 8008a9a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8008a9c:	4b28      	ldr	r3, [pc, #160]	@ (8008b40 <USBD_SetConfig+0x144>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	001a      	movs	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008aa6:	4b26      	ldr	r3, [pc, #152]	@ (8008b40 <USBD_SetConfig+0x144>)
 8008aa8:	781a      	ldrb	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	0011      	movs	r1, r2
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f7ff f8c4 	bl	8007c3c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	0018      	movs	r0, r3
 8008ab8:	f000 f9f1 	bl	8008e9e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008abc:	e03c      	b.n	8008b38 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8008abe:	4b20      	ldr	r3, [pc, #128]	@ (8008b40 <USBD_SetConfig+0x144>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	001a      	movs	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d022      	beq.n	8008b12 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	0011      	movs	r1, r2
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	f7ff f8b0 	bl	8007c3c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008adc:	4b18      	ldr	r3, [pc, #96]	@ (8008b40 <USBD_SetConfig+0x144>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	001a      	movs	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ae6:	4b16      	ldr	r3, [pc, #88]	@ (8008b40 <USBD_SetConfig+0x144>)
 8008ae8:	781a      	ldrb	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	0011      	movs	r1, r2
 8008aee:	0018      	movs	r0, r3
 8008af0:	f7ff f87d 	bl	8007bee <USBD_SetClassConfig>
 8008af4:	0003      	movs	r3, r0
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d106      	bne.n	8008b08 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	0011      	movs	r1, r2
 8008b00:	0018      	movs	r0, r3
 8008b02:	f000 f908 	bl	8008d16 <USBD_CtlError>
            return;
 8008b06:	e017      	b.n	8008b38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f000 f9c7 	bl	8008e9e <USBD_CtlSendStatus>
        break;
 8008b10:	e012      	b.n	8008b38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	0018      	movs	r0, r3
 8008b16:	f000 f9c2 	bl	8008e9e <USBD_CtlSendStatus>
        break;
 8008b1a:	e00d      	b.n	8008b38 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	0011      	movs	r1, r2
 8008b22:	0018      	movs	r0, r3
 8008b24:	f000 f8f7 	bl	8008d16 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b28:	4b05      	ldr	r3, [pc, #20]	@ (8008b40 <USBD_SetConfig+0x144>)
 8008b2a:	781a      	ldrb	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	0011      	movs	r1, r2
 8008b30:	0018      	movs	r0, r3
 8008b32:	f7ff f883 	bl	8007c3c <USBD_ClrClassConfig>
        break;
 8008b36:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	b002      	add	sp, #8
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	46c0      	nop			@ (mov r8, r8)
 8008b40:	20000200 	.word	0x20000200

08008b44 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	88db      	ldrh	r3, [r3, #6]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d006      	beq.n	8008b64 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	0011      	movs	r1, r2
 8008b5c:	0018      	movs	r0, r3
 8008b5e:	f000 f8da 	bl	8008d16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b62:	e026      	b.n	8008bb2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	23a7      	movs	r3, #167	@ 0xa7
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	5cd3      	ldrb	r3, [r2, r3]
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	dc02      	bgt.n	8008b76 <USBD_GetConfig+0x32>
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	dc03      	bgt.n	8008b7c <USBD_GetConfig+0x38>
 8008b74:	e016      	b.n	8008ba4 <USBD_GetConfig+0x60>
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d00c      	beq.n	8008b94 <USBD_GetConfig+0x50>
 8008b7a:	e013      	b.n	8008ba4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3308      	adds	r3, #8
 8008b86:	0019      	movs	r1, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	0018      	movs	r0, r3
 8008b8e:	f000 f940 	bl	8008e12 <USBD_CtlSendData>
        break;
 8008b92:	e00e      	b.n	8008bb2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	1d19      	adds	r1, r3, #4
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	f000 f938 	bl	8008e12 <USBD_CtlSendData>
        break;
 8008ba2:	e006      	b.n	8008bb2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	0011      	movs	r1, r2
 8008baa:	0018      	movs	r0, r3
 8008bac:	f000 f8b3 	bl	8008d16 <USBD_CtlError>
        break;
 8008bb0:	46c0      	nop			@ (mov r8, r8)
}
 8008bb2:	46c0      	nop			@ (mov r8, r8)
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	b002      	add	sp, #8
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	23a7      	movs	r3, #167	@ 0xa7
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	5cd3      	ldrb	r3, [r2, r3]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d822      	bhi.n	8008c18 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	88db      	ldrh	r3, [r3, #6]
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d006      	beq.n	8008be8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	0011      	movs	r1, r2
 8008be0:	0018      	movs	r0, r3
 8008be2:	f000 f898 	bl	8008d16 <USBD_CtlError>
        break;
 8008be6:	e01e      	b.n	8008c26 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	23a9      	movs	r3, #169	@ 0xa9
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	58d3      	ldr	r3, [r2, r3]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d005      	beq.n	8008c06 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	2202      	movs	r2, #2
 8008c00:	431a      	orrs	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	330c      	adds	r3, #12
 8008c0a:	0019      	movs	r1, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	0018      	movs	r0, r3
 8008c12:	f000 f8fe 	bl	8008e12 <USBD_CtlSendData>
      break;
 8008c16:	e006      	b.n	8008c26 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	0011      	movs	r1, r2
 8008c1e:	0018      	movs	r0, r3
 8008c20:	f000 f879 	bl	8008d16 <USBD_CtlError>
      break;
 8008c24:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008c26:	46c0      	nop			@ (mov r8, r8)
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	b002      	add	sp, #8
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	885b      	ldrh	r3, [r3, #2]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d108      	bne.n	8008c52 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	23a9      	movs	r3, #169	@ 0xa9
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	2101      	movs	r1, #1
 8008c48:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f000 f926 	bl	8008e9e <USBD_CtlSendStatus>
  }
}
 8008c52:	46c0      	nop			@ (mov r8, r8)
 8008c54:	46bd      	mov	sp, r7
 8008c56:	b002      	add	sp, #8
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	23a7      	movs	r3, #167	@ 0xa7
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	5cd3      	ldrb	r3, [r2, r3]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d80d      	bhi.n	8008c8e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	885b      	ldrh	r3, [r3, #2]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d110      	bne.n	8008c9c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	23a9      	movs	r3, #169	@ 0xa9
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	2100      	movs	r1, #0
 8008c82:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	0018      	movs	r0, r3
 8008c88:	f000 f909 	bl	8008e9e <USBD_CtlSendStatus>
      }
      break;
 8008c8c:	e006      	b.n	8008c9c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	0011      	movs	r1, r2
 8008c94:	0018      	movs	r0, r3
 8008c96:	f000 f83e 	bl	8008d16 <USBD_CtlError>
      break;
 8008c9a:	e000      	b.n	8008c9e <USBD_ClrFeature+0x44>
      break;
 8008c9c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008c9e:	46c0      	nop			@ (mov r8, r8)
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	b002      	add	sp, #8
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b082      	sub	sp, #8
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781a      	ldrb	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	785a      	ldrb	r2, [r3, #1]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	3302      	adds	r3, #2
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	001a      	movs	r2, r3
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	3303      	adds	r3, #3
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	021b      	lsls	r3, r3, #8
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	18d3      	adds	r3, r2, r3
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	001a      	movs	r2, r3
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	3305      	adds	r3, #5
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	021b      	lsls	r3, r3, #8
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	18d3      	adds	r3, r2, r3
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	3306      	adds	r3, #6
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	001a      	movs	r2, r3
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	3307      	adds	r3, #7
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	021b      	lsls	r3, r3, #8
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	18d3      	adds	r3, r2, r3
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	80da      	strh	r2, [r3, #6]

}
 8008d0e:	46c0      	nop			@ (mov r8, r8)
 8008d10:	46bd      	mov	sp, r7
 8008d12:	b002      	add	sp, #8
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2180      	movs	r1, #128	@ 0x80
 8008d24:	0018      	movs	r0, r3
 8008d26:	f000 fbf2 	bl	800950e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	0018      	movs	r0, r3
 8008d30:	f000 fbed 	bl	800950e <USBD_LL_StallEP>
}
 8008d34:	46c0      	nop			@ (mov r8, r8)
 8008d36:	46bd      	mov	sp, r7
 8008d38:	b002      	add	sp, #8
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d3c:	b590      	push	{r4, r7, lr}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d48:	2417      	movs	r4, #23
 8008d4a:	193b      	adds	r3, r7, r4
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d03c      	beq.n	8008dd0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f000 f83d 	bl	8008dd8 <USBD_GetLen>
 8008d5e:	0003      	movs	r3, r0
 8008d60:	3301      	adds	r3, #1
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	18db      	adds	r3, r3, r3
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008d6c:	193b      	adds	r3, r7, r4
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	193a      	adds	r2, r7, r4
 8008d72:	1c59      	adds	r1, r3, #1
 8008d74:	7011      	strb	r1, [r2, #0]
 8008d76:	001a      	movs	r2, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	189b      	adds	r3, r3, r2
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	7812      	ldrb	r2, [r2, #0]
 8008d80:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008d82:	193b      	adds	r3, r7, r4
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	193a      	adds	r2, r7, r4
 8008d88:	1c59      	adds	r1, r3, #1
 8008d8a:	7011      	strb	r1, [r2, #0]
 8008d8c:	001a      	movs	r2, r3
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	189b      	adds	r3, r3, r2
 8008d92:	2203      	movs	r2, #3
 8008d94:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008d96:	e017      	b.n	8008dc8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	60fa      	str	r2, [r7, #12]
 8008d9e:	2417      	movs	r4, #23
 8008da0:	193a      	adds	r2, r7, r4
 8008da2:	7812      	ldrb	r2, [r2, #0]
 8008da4:	1939      	adds	r1, r7, r4
 8008da6:	1c50      	adds	r0, r2, #1
 8008da8:	7008      	strb	r0, [r1, #0]
 8008daa:	0011      	movs	r1, r2
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	1852      	adds	r2, r2, r1
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008db4:	193b      	adds	r3, r7, r4
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	193a      	adds	r2, r7, r4
 8008dba:	1c59      	adds	r1, r3, #1
 8008dbc:	7011      	strb	r1, [r2, #0]
 8008dbe:	001a      	movs	r2, r3
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	189b      	adds	r3, r3, r2
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1e3      	bne.n	8008d98 <USBD_GetString+0x5c>
    }
  }
}
 8008dd0:	46c0      	nop			@ (mov r8, r8)
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	b007      	add	sp, #28
 8008dd6:	bd90      	pop	{r4, r7, pc}

08008dd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008de0:	230f      	movs	r3, #15
 8008de2:	18fb      	adds	r3, r7, r3
 8008de4:	2200      	movs	r2, #0
 8008de6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8008de8:	e008      	b.n	8008dfc <USBD_GetLen+0x24>
  {
    len++;
 8008dea:	210f      	movs	r1, #15
 8008dec:	187b      	adds	r3, r7, r1
 8008dee:	781a      	ldrb	r2, [r3, #0]
 8008df0:	187b      	adds	r3, r7, r1
 8008df2:	3201      	adds	r2, #1
 8008df4:	701a      	strb	r2, [r3, #0]
    buf++;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1f2      	bne.n	8008dea <USBD_GetLen+0x12>
  }

  return len;
 8008e04:	230f      	movs	r3, #15
 8008e06:	18fb      	adds	r3, r7, r3
 8008e08:	781b      	ldrb	r3, [r3, #0]
}
 8008e0a:	0018      	movs	r0, r3
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	b004      	add	sp, #16
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	60f8      	str	r0, [r7, #12]
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	1dbb      	adds	r3, r7, #6
 8008e1e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	23a5      	movs	r3, #165	@ 0xa5
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	2102      	movs	r1, #2
 8008e28:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8008e2a:	1dbb      	adds	r3, r7, #6
 8008e2c:	881a      	ldrh	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008e32:	1dbb      	adds	r3, r7, #6
 8008e34:	881a      	ldrh	r2, [r3, #0]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e3a:	1dbb      	adds	r3, r7, #6
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	2100      	movs	r1, #0
 8008e44:	f000 fc14 	bl	8009670 <USBD_LL_Transmit>

  return USBD_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	b004      	add	sp, #16
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	1dbb      	adds	r3, r7, #6
 8008e5e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e60:	1dbb      	adds	r3, r7, #6
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	2100      	movs	r1, #0
 8008e6a:	f000 fc01 	bl	8009670 <USBD_LL_Transmit>

  return USBD_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	0018      	movs	r0, r3
 8008e72:	46bd      	mov	sp, r7
 8008e74:	b004      	add	sp, #16
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	1dbb      	adds	r3, r7, #6
 8008e84:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e86:	1dbb      	adds	r3, r7, #6
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	2100      	movs	r1, #0
 8008e90:	f000 fc25 	bl	80096de <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	0018      	movs	r0, r3
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	b004      	add	sp, #16
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b082      	sub	sp, #8
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	23a5      	movs	r3, #165	@ 0xa5
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	2104      	movs	r1, #4
 8008eae:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	f000 fbda 	bl	8009670 <USBD_LL_Transmit>

  return USBD_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	0018      	movs	r0, r3
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	b002      	add	sp, #8
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b082      	sub	sp, #8
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	23a5      	movs	r3, #165	@ 0xa5
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	2105      	movs	r1, #5
 8008ed6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	2300      	movs	r3, #0
 8008edc:	2200      	movs	r2, #0
 8008ede:	2100      	movs	r1, #0
 8008ee0:	f000 fbfd 	bl	80096de <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	b002      	add	sp, #8
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ef4:	490f      	ldr	r1, [pc, #60]	@ (8008f34 <MX_USB_DEVICE_Init+0x44>)
 8008ef6:	4b10      	ldr	r3, [pc, #64]	@ (8008f38 <MX_USB_DEVICE_Init+0x48>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	0018      	movs	r0, r3
 8008efc:	f7fe fe10 	bl	8007b20 <USBD_Init>
 8008f00:	1e03      	subs	r3, r0, #0
 8008f02:	d001      	beq.n	8008f08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f04:	f7f8 fe3c 	bl	8001b80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008f08:	4a0c      	ldr	r2, [pc, #48]	@ (8008f3c <MX_USB_DEVICE_Init+0x4c>)
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f38 <MX_USB_DEVICE_Init+0x48>)
 8008f0c:	0011      	movs	r1, r2
 8008f0e:	0018      	movs	r0, r3
 8008f10:	f7fe fe37 	bl	8007b82 <USBD_RegisterClass>
 8008f14:	1e03      	subs	r3, r0, #0
 8008f16:	d001      	beq.n	8008f1c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8008f18:	f7f8 fe32 	bl	8001b80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f1c:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <MX_USB_DEVICE_Init+0x48>)
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f7fe fe4f 	bl	8007bc2 <USBD_Start>
 8008f24:	1e03      	subs	r3, r0, #0
 8008f26:	d001      	beq.n	8008f2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f28:	f7f8 fe2a 	bl	8001b80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f2c:	46c0      	nop			@ (mov r8, r8)
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	46c0      	nop			@ (mov r8, r8)
 8008f34:	20000114 	.word	0x20000114
 8008f38:	20000204 	.word	0x20000204
 8008f3c:	2000000c 	.word	0x2000000c

08008f40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	0002      	movs	r2, r0
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	1dfb      	adds	r3, r7, #7
 8008f4c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2212      	movs	r2, #18
 8008f52:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f54:	4b02      	ldr	r3, [pc, #8]	@ (8008f60 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f56:	0018      	movs	r0, r3
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	b002      	add	sp, #8
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	46c0      	nop			@ (mov r8, r8)
 8008f60:	20000130 	.word	0x20000130

08008f64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	0002      	movs	r2, r0
 8008f6c:	6039      	str	r1, [r7, #0]
 8008f6e:	1dfb      	adds	r3, r7, #7
 8008f70:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2204      	movs	r2, #4
 8008f76:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f78:	4b02      	ldr	r3, [pc, #8]	@ (8008f84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f7a:	0018      	movs	r0, r3
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	b002      	add	sp, #8
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	46c0      	nop			@ (mov r8, r8)
 8008f84:	20000144 	.word	0x20000144

08008f88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	0002      	movs	r2, r0
 8008f90:	6039      	str	r1, [r7, #0]
 8008f92:	1dfb      	adds	r3, r7, #7
 8008f94:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008f96:	1dfb      	adds	r3, r7, #7
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	4908      	ldr	r1, [pc, #32]	@ (8008fc4 <USBD_FS_ProductStrDescriptor+0x3c>)
 8008fa2:	4b09      	ldr	r3, [pc, #36]	@ (8008fc8 <USBD_FS_ProductStrDescriptor+0x40>)
 8008fa4:	0018      	movs	r0, r3
 8008fa6:	f7ff fec9 	bl	8008d3c <USBD_GetString>
 8008faa:	e005      	b.n	8008fb8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	4905      	ldr	r1, [pc, #20]	@ (8008fc4 <USBD_FS_ProductStrDescriptor+0x3c>)
 8008fb0:	4b05      	ldr	r3, [pc, #20]	@ (8008fc8 <USBD_FS_ProductStrDescriptor+0x40>)
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	f7ff fec2 	bl	8008d3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fb8:	4b02      	ldr	r3, [pc, #8]	@ (8008fc4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8008fba:	0018      	movs	r0, r3
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	b002      	add	sp, #8
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	46c0      	nop			@ (mov r8, r8)
 8008fc4:	200004c8 	.word	0x200004c8
 8008fc8:	08009860 	.word	0x08009860

08008fcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	0002      	movs	r2, r0
 8008fd4:	6039      	str	r1, [r7, #0]
 8008fd6:	1dfb      	adds	r3, r7, #7
 8008fd8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	4904      	ldr	r1, [pc, #16]	@ (8008ff0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008fde:	4b05      	ldr	r3, [pc, #20]	@ (8008ff4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8008fe0:	0018      	movs	r0, r3
 8008fe2:	f7ff feab 	bl	8008d3c <USBD_GetString>
  return USBD_StrDesc;
 8008fe6:	4b02      	ldr	r3, [pc, #8]	@ (8008ff0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8008fe8:	0018      	movs	r0, r3
 8008fea:	46bd      	mov	sp, r7
 8008fec:	b002      	add	sp, #8
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	200004c8 	.word	0x200004c8
 8008ff4:	08009878 	.word	0x08009878

08008ff8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	0002      	movs	r2, r0
 8009000:	6039      	str	r1, [r7, #0]
 8009002:	1dfb      	adds	r3, r7, #7
 8009004:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	221a      	movs	r2, #26
 800900a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800900c:	f000 f84c 	bl	80090a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009010:	4b02      	ldr	r3, [pc, #8]	@ (800901c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8009012:	0018      	movs	r0, r3
 8009014:	46bd      	mov	sp, r7
 8009016:	b002      	add	sp, #8
 8009018:	bd80      	pop	{r7, pc}
 800901a:	46c0      	nop			@ (mov r8, r8)
 800901c:	20000148 	.word	0x20000148

08009020 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	0002      	movs	r2, r0
 8009028:	6039      	str	r1, [r7, #0]
 800902a:	1dfb      	adds	r3, r7, #7
 800902c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800902e:	1dfb      	adds	r3, r7, #7
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d106      	bne.n	8009044 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	4908      	ldr	r1, [pc, #32]	@ (800905c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800903a:	4b09      	ldr	r3, [pc, #36]	@ (8009060 <USBD_FS_ConfigStrDescriptor+0x40>)
 800903c:	0018      	movs	r0, r3
 800903e:	f7ff fe7d 	bl	8008d3c <USBD_GetString>
 8009042:	e005      	b.n	8009050 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	4905      	ldr	r1, [pc, #20]	@ (800905c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009048:	4b05      	ldr	r3, [pc, #20]	@ (8009060 <USBD_FS_ConfigStrDescriptor+0x40>)
 800904a:	0018      	movs	r0, r3
 800904c:	f7ff fe76 	bl	8008d3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009050:	4b02      	ldr	r3, [pc, #8]	@ (800905c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8009052:	0018      	movs	r0, r3
 8009054:	46bd      	mov	sp, r7
 8009056:	b002      	add	sp, #8
 8009058:	bd80      	pop	{r7, pc}
 800905a:	46c0      	nop			@ (mov r8, r8)
 800905c:	200004c8 	.word	0x200004c8
 8009060:	0800988c 	.word	0x0800988c

08009064 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	0002      	movs	r2, r0
 800906c:	6039      	str	r1, [r7, #0]
 800906e:	1dfb      	adds	r3, r7, #7
 8009070:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009072:	1dfb      	adds	r3, r7, #7
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d106      	bne.n	8009088 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	4908      	ldr	r1, [pc, #32]	@ (80090a0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800907e:	4b09      	ldr	r3, [pc, #36]	@ (80090a4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009080:	0018      	movs	r0, r3
 8009082:	f7ff fe5b 	bl	8008d3c <USBD_GetString>
 8009086:	e005      	b.n	8009094 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	4905      	ldr	r1, [pc, #20]	@ (80090a0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800908c:	4b05      	ldr	r3, [pc, #20]	@ (80090a4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800908e:	0018      	movs	r0, r3
 8009090:	f7ff fe54 	bl	8008d3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009094:	4b02      	ldr	r3, [pc, #8]	@ (80090a0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8009096:	0018      	movs	r0, r3
 8009098:	46bd      	mov	sp, r7
 800909a:	b002      	add	sp, #8
 800909c:	bd80      	pop	{r7, pc}
 800909e:	46c0      	nop			@ (mov r8, r8)
 80090a0:	200004c8 	.word	0x200004c8
 80090a4:	08009898 	.word	0x08009898

080090a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090ae:	4b10      	ldr	r3, [pc, #64]	@ (80090f0 <Get_SerialNum+0x48>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090b4:	4b0f      	ldr	r3, [pc, #60]	@ (80090f4 <Get_SerialNum+0x4c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090ba:	4b0f      	ldr	r3, [pc, #60]	@ (80090f8 <Get_SerialNum+0x50>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	18d3      	adds	r3, r2, r3
 80090c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00b      	beq.n	80090e6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090ce:	490b      	ldr	r1, [pc, #44]	@ (80090fc <Get_SerialNum+0x54>)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2208      	movs	r2, #8
 80090d4:	0018      	movs	r0, r3
 80090d6:	f000 f815 	bl	8009104 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090da:	4909      	ldr	r1, [pc, #36]	@ (8009100 <Get_SerialNum+0x58>)
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2204      	movs	r2, #4
 80090e0:	0018      	movs	r0, r3
 80090e2:	f000 f80f 	bl	8009104 <IntToUnicode>
  }
}
 80090e6:	46c0      	nop			@ (mov r8, r8)
 80090e8:	46bd      	mov	sp, r7
 80090ea:	b004      	add	sp, #16
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	46c0      	nop			@ (mov r8, r8)
 80090f0:	1ff80050 	.word	0x1ff80050
 80090f4:	1ff80054 	.word	0x1ff80054
 80090f8:	1ff80058 	.word	0x1ff80058
 80090fc:	2000014a 	.word	0x2000014a
 8009100:	2000015a 	.word	0x2000015a

08009104 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	1dfb      	adds	r3, r7, #7
 8009110:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8009112:	2117      	movs	r1, #23
 8009114:	187b      	adds	r3, r7, r1
 8009116:	2200      	movs	r2, #0
 8009118:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800911a:	187b      	adds	r3, r7, r1
 800911c:	2200      	movs	r2, #0
 800911e:	701a      	strb	r2, [r3, #0]
 8009120:	e02f      	b.n	8009182 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	0f1b      	lsrs	r3, r3, #28
 8009126:	2b09      	cmp	r3, #9
 8009128:	d80d      	bhi.n	8009146 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	0f1b      	lsrs	r3, r3, #28
 800912e:	b2da      	uxtb	r2, r3
 8009130:	2317      	movs	r3, #23
 8009132:	18fb      	adds	r3, r7, r3
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	0019      	movs	r1, r3
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	185b      	adds	r3, r3, r1
 800913e:	3230      	adds	r2, #48	@ 0x30
 8009140:	b2d2      	uxtb	r2, r2
 8009142:	701a      	strb	r2, [r3, #0]
 8009144:	e00c      	b.n	8009160 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	0f1b      	lsrs	r3, r3, #28
 800914a:	b2da      	uxtb	r2, r3
 800914c:	2317      	movs	r3, #23
 800914e:	18fb      	adds	r3, r7, r3
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	005b      	lsls	r3, r3, #1
 8009154:	0019      	movs	r1, r3
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	185b      	adds	r3, r3, r1
 800915a:	3237      	adds	r2, #55	@ 0x37
 800915c:	b2d2      	uxtb	r2, r2
 800915e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009166:	2117      	movs	r1, #23
 8009168:	187b      	adds	r3, r7, r1
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	3301      	adds	r3, #1
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	18d3      	adds	r3, r2, r3
 8009174:	2200      	movs	r2, #0
 8009176:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009178:	187b      	adds	r3, r7, r1
 800917a:	781a      	ldrb	r2, [r3, #0]
 800917c:	187b      	adds	r3, r7, r1
 800917e:	3201      	adds	r2, #1
 8009180:	701a      	strb	r2, [r3, #0]
 8009182:	2317      	movs	r3, #23
 8009184:	18fa      	adds	r2, r7, r3
 8009186:	1dfb      	adds	r3, r7, #7
 8009188:	7812      	ldrb	r2, [r2, #0]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	429a      	cmp	r2, r3
 800918e:	d3c8      	bcc.n	8009122 <IntToUnicode+0x1e>
  }
}
 8009190:	46c0      	nop			@ (mov r8, r8)
 8009192:	46c0      	nop			@ (mov r8, r8)
 8009194:	46bd      	mov	sp, r7
 8009196:	b006      	add	sp, #24
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a0a      	ldr	r2, [pc, #40]	@ (80091d4 <HAL_PCD_MspInit+0x38>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d10e      	bne.n	80091cc <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80091ae:	4b0a      	ldr	r3, [pc, #40]	@ (80091d8 <HAL_PCD_MspInit+0x3c>)
 80091b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091b2:	4b09      	ldr	r3, [pc, #36]	@ (80091d8 <HAL_PCD_MspInit+0x3c>)
 80091b4:	2180      	movs	r1, #128	@ 0x80
 80091b6:	0409      	lsls	r1, r1, #16
 80091b8:	430a      	orrs	r2, r1
 80091ba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80091bc:	2200      	movs	r2, #0
 80091be:	2100      	movs	r1, #0
 80091c0:	201f      	movs	r0, #31
 80091c2:	f7f8 fed3 	bl	8001f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80091c6:	201f      	movs	r0, #31
 80091c8:	f7f8 fee5 	bl	8001f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80091cc:	46c0      	nop			@ (mov r8, r8)
 80091ce:	46bd      	mov	sp, r7
 80091d0:	b002      	add	sp, #8
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	40005c00 	.word	0x40005c00
 80091d8:	40021000 	.word	0x40021000

080091dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	23b6      	movs	r3, #182	@ 0xb6
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	58d2      	ldr	r2, [r2, r3]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	21a6      	movs	r1, #166	@ 0xa6
 80091f0:	0089      	lsls	r1, r1, #2
 80091f2:	468c      	mov	ip, r1
 80091f4:	4463      	add	r3, ip
 80091f6:	0019      	movs	r1, r3
 80091f8:	0010      	movs	r0, r2
 80091fa:	f7fe fd35 	bl	8007c68 <USBD_LL_SetupStage>
}
 80091fe:	46c0      	nop			@ (mov r8, r8)
 8009200:	46bd      	mov	sp, r7
 8009202:	b002      	add	sp, #8
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009206:	b590      	push	{r4, r7, lr}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	000a      	movs	r2, r1
 8009210:	1cfb      	adds	r3, r7, #3
 8009212:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	23b6      	movs	r3, #182	@ 0xb6
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	58d4      	ldr	r4, [r2, r3]
 800921c:	1cfb      	adds	r3, r7, #3
 800921e:	781a      	ldrb	r2, [r3, #0]
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	23b2      	movs	r3, #178	@ 0xb2
 8009224:	0059      	lsls	r1, r3, #1
 8009226:	0013      	movs	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	189b      	adds	r3, r3, r2
 800922c:	00db      	lsls	r3, r3, #3
 800922e:	18c3      	adds	r3, r0, r3
 8009230:	185b      	adds	r3, r3, r1
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	1cfb      	adds	r3, r7, #3
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	0019      	movs	r1, r3
 800923a:	0020      	movs	r0, r4
 800923c:	f7fe fd72 	bl	8007d24 <USBD_LL_DataOutStage>
}
 8009240:	46c0      	nop			@ (mov r8, r8)
 8009242:	46bd      	mov	sp, r7
 8009244:	b003      	add	sp, #12
 8009246:	bd90      	pop	{r4, r7, pc}

08009248 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	000a      	movs	r2, r1
 8009252:	1cfb      	adds	r3, r7, #3
 8009254:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	23b6      	movs	r3, #182	@ 0xb6
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	58d0      	ldr	r0, [r2, r3]
 800925e:	1cfb      	adds	r3, r7, #3
 8009260:	781a      	ldrb	r2, [r3, #0]
 8009262:	6879      	ldr	r1, [r7, #4]
 8009264:	0013      	movs	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	189b      	adds	r3, r3, r2
 800926a:	00db      	lsls	r3, r3, #3
 800926c:	18cb      	adds	r3, r1, r3
 800926e:	3324      	adds	r3, #36	@ 0x24
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	1cfb      	adds	r3, r7, #3
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	0019      	movs	r1, r3
 8009278:	f7fe fdd6 	bl	8007e28 <USBD_LL_DataInStage>
}
 800927c:	46c0      	nop			@ (mov r8, r8)
 800927e:	46bd      	mov	sp, r7
 8009280:	b002      	add	sp, #8
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	23b6      	movs	r3, #182	@ 0xb6
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	58d3      	ldr	r3, [r2, r3]
 8009294:	0018      	movs	r0, r3
 8009296:	f7fe ff0d 	bl	80080b4 <USBD_LL_SOF>
}
 800929a:	46c0      	nop			@ (mov r8, r8)
 800929c:	46bd      	mov	sp, r7
 800929e:	b002      	add	sp, #8
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092aa:	230f      	movs	r3, #15
 80092ac:	18fb      	adds	r3, r7, r3
 80092ae:	2201      	movs	r2, #1
 80092b0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	795b      	ldrb	r3, [r3, #5]
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d001      	beq.n	80092be <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80092ba:	f7f8 fc61 	bl	8001b80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	23b6      	movs	r3, #182	@ 0xb6
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	58d2      	ldr	r2, [r2, r3]
 80092c6:	230f      	movs	r3, #15
 80092c8:	18fb      	adds	r3, r7, r3
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	0019      	movs	r1, r3
 80092ce:	0010      	movs	r0, r2
 80092d0:	f7fe feaf 	bl	8008032 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	23b6      	movs	r3, #182	@ 0xb6
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	58d3      	ldr	r3, [r2, r3]
 80092dc:	0018      	movs	r0, r3
 80092de:	f7fe fe60 	bl	8007fa2 <USBD_LL_Reset>
}
 80092e2:	46c0      	nop			@ (mov r8, r8)
 80092e4:	46bd      	mov	sp, r7
 80092e6:	b004      	add	sp, #16
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	23b6      	movs	r3, #182	@ 0xb6
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	58d3      	ldr	r3, [r2, r3]
 80092fc:	0018      	movs	r0, r3
 80092fe:	f7fe fea9 	bl	8008054 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	7a5b      	ldrb	r3, [r3, #9]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d005      	beq.n	8009316 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800930a:	4b05      	ldr	r3, [pc, #20]	@ (8009320 <HAL_PCD_SuspendCallback+0x34>)
 800930c:	691a      	ldr	r2, [r3, #16]
 800930e:	4b04      	ldr	r3, [pc, #16]	@ (8009320 <HAL_PCD_SuspendCallback+0x34>)
 8009310:	2106      	movs	r1, #6
 8009312:	430a      	orrs	r2, r1
 8009314:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8009316:	46c0      	nop			@ (mov r8, r8)
 8009318:	46bd      	mov	sp, r7
 800931a:	b002      	add	sp, #8
 800931c:	bd80      	pop	{r7, pc}
 800931e:	46c0      	nop			@ (mov r8, r8)
 8009320:	e000ed00 	.word	0xe000ed00

08009324 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	7a5b      	ldrb	r3, [r3, #9]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d007      	beq.n	8009344 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009334:	4b09      	ldr	r3, [pc, #36]	@ (800935c <HAL_PCD_ResumeCallback+0x38>)
 8009336:	691a      	ldr	r2, [r3, #16]
 8009338:	4b08      	ldr	r3, [pc, #32]	@ (800935c <HAL_PCD_ResumeCallback+0x38>)
 800933a:	2106      	movs	r1, #6
 800933c:	438a      	bics	r2, r1
 800933e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8009340:	f000 fa18 	bl	8009774 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	23b6      	movs	r3, #182	@ 0xb6
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	58d3      	ldr	r3, [r2, r3]
 800934c:	0018      	movs	r0, r3
 800934e:	f7fe fe99 	bl	8008084 <USBD_LL_Resume>
}
 8009352:	46c0      	nop			@ (mov r8, r8)
 8009354:	46bd      	mov	sp, r7
 8009356:	b002      	add	sp, #8
 8009358:	bd80      	pop	{r7, pc}
 800935a:	46c0      	nop			@ (mov r8, r8)
 800935c:	e000ed00 	.word	0xe000ed00

08009360 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009368:	4a23      	ldr	r2, [pc, #140]	@ (80093f8 <USBD_LL_Init+0x98>)
 800936a:	23b6      	movs	r3, #182	@ 0xb6
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	6879      	ldr	r1, [r7, #4]
 8009370:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	23b0      	movs	r3, #176	@ 0xb0
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	491f      	ldr	r1, [pc, #124]	@ (80093f8 <USBD_LL_Init+0x98>)
 800937a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800937c:	4b1e      	ldr	r3, [pc, #120]	@ (80093f8 <USBD_LL_Init+0x98>)
 800937e:	4a1f      	ldr	r2, [pc, #124]	@ (80093fc <USBD_LL_Init+0x9c>)
 8009380:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009382:	4b1d      	ldr	r3, [pc, #116]	@ (80093f8 <USBD_LL_Init+0x98>)
 8009384:	2208      	movs	r2, #8
 8009386:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009388:	4b1b      	ldr	r3, [pc, #108]	@ (80093f8 <USBD_LL_Init+0x98>)
 800938a:	2202      	movs	r2, #2
 800938c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800938e:	4b1a      	ldr	r3, [pc, #104]	@ (80093f8 <USBD_LL_Init+0x98>)
 8009390:	2202      	movs	r2, #2
 8009392:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009394:	4b18      	ldr	r3, [pc, #96]	@ (80093f8 <USBD_LL_Init+0x98>)
 8009396:	2200      	movs	r2, #0
 8009398:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800939a:	4b17      	ldr	r3, [pc, #92]	@ (80093f8 <USBD_LL_Init+0x98>)
 800939c:	2200      	movs	r2, #0
 800939e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80093a0:	4b15      	ldr	r3, [pc, #84]	@ (80093f8 <USBD_LL_Init+0x98>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80093a6:	4b14      	ldr	r3, [pc, #80]	@ (80093f8 <USBD_LL_Init+0x98>)
 80093a8:	0018      	movs	r0, r3
 80093aa:	f7f9 fe23 	bl	8002ff4 <HAL_PCD_Init>
 80093ae:	1e03      	subs	r3, r0, #0
 80093b0:	d001      	beq.n	80093b6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80093b2:	f7f8 fbe5 	bl	8001b80 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	23b0      	movs	r3, #176	@ 0xb0
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	58d0      	ldr	r0, [r2, r3]
 80093be:	2318      	movs	r3, #24
 80093c0:	2200      	movs	r2, #0
 80093c2:	2100      	movs	r1, #0
 80093c4:	f7fb fbc6 	bl	8004b54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	23b0      	movs	r3, #176	@ 0xb0
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	58d0      	ldr	r0, [r2, r3]
 80093d0:	2358      	movs	r3, #88	@ 0x58
 80093d2:	2200      	movs	r2, #0
 80093d4:	2180      	movs	r1, #128	@ 0x80
 80093d6:	f7fb fbbd 	bl	8004b54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	23b0      	movs	r3, #176	@ 0xb0
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	58d0      	ldr	r0, [r2, r3]
 80093e2:	2380      	movs	r3, #128	@ 0x80
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	2200      	movs	r2, #0
 80093e8:	2181      	movs	r1, #129	@ 0x81
 80093ea:	f7fb fbb3 	bl	8004b54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	0018      	movs	r0, r3
 80093f2:	46bd      	mov	sp, r7
 80093f4:	b002      	add	sp, #8
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	200006c8 	.word	0x200006c8
 80093fc:	40005c00 	.word	0x40005c00

08009400 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009408:	210f      	movs	r1, #15
 800940a:	187b      	adds	r3, r7, r1
 800940c:	2200      	movs	r2, #0
 800940e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009410:	260e      	movs	r6, #14
 8009412:	19bb      	adds	r3, r7, r6
 8009414:	2200      	movs	r2, #0
 8009416:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	23b0      	movs	r3, #176	@ 0xb0
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	58d3      	ldr	r3, [r2, r3]
 8009420:	000d      	movs	r5, r1
 8009422:	187c      	adds	r4, r7, r1
 8009424:	0018      	movs	r0, r3
 8009426:	f7f9 fed9 	bl	80031dc <HAL_PCD_Start>
 800942a:	0003      	movs	r3, r0
 800942c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800942e:	19bc      	adds	r4, r7, r6
 8009430:	197b      	adds	r3, r7, r5
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	0018      	movs	r0, r3
 8009436:	f000 f9a4 	bl	8009782 <USBD_Get_USB_Status>
 800943a:	0003      	movs	r3, r0
 800943c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800943e:	19bb      	adds	r3, r7, r6
 8009440:	781b      	ldrb	r3, [r3, #0]
}
 8009442:	0018      	movs	r0, r3
 8009444:	46bd      	mov	sp, r7
 8009446:	b005      	add	sp, #20
 8009448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800944a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800944a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	000c      	movs	r4, r1
 8009454:	0010      	movs	r0, r2
 8009456:	0019      	movs	r1, r3
 8009458:	1cfb      	adds	r3, r7, #3
 800945a:	1c22      	adds	r2, r4, #0
 800945c:	701a      	strb	r2, [r3, #0]
 800945e:	1cbb      	adds	r3, r7, #2
 8009460:	1c02      	adds	r2, r0, #0
 8009462:	701a      	strb	r2, [r3, #0]
 8009464:	003b      	movs	r3, r7
 8009466:	1c0a      	adds	r2, r1, #0
 8009468:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800946a:	260f      	movs	r6, #15
 800946c:	19bb      	adds	r3, r7, r6
 800946e:	2200      	movs	r2, #0
 8009470:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009472:	250e      	movs	r5, #14
 8009474:	197b      	adds	r3, r7, r5
 8009476:	2200      	movs	r2, #0
 8009478:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	23b0      	movs	r3, #176	@ 0xb0
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	58d0      	ldr	r0, [r2, r3]
 8009482:	19bc      	adds	r4, r7, r6
 8009484:	1cbb      	adds	r3, r7, #2
 8009486:	781d      	ldrb	r5, [r3, #0]
 8009488:	003b      	movs	r3, r7
 800948a:	881a      	ldrh	r2, [r3, #0]
 800948c:	1cfb      	adds	r3, r7, #3
 800948e:	7819      	ldrb	r1, [r3, #0]
 8009490:	002b      	movs	r3, r5
 8009492:	f7fa f837 	bl	8003504 <HAL_PCD_EP_Open>
 8009496:	0003      	movs	r3, r0
 8009498:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800949a:	250e      	movs	r5, #14
 800949c:	197c      	adds	r4, r7, r5
 800949e:	19bb      	adds	r3, r7, r6
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	0018      	movs	r0, r3
 80094a4:	f000 f96d 	bl	8009782 <USBD_Get_USB_Status>
 80094a8:	0003      	movs	r3, r0
 80094aa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80094ac:	197b      	adds	r3, r7, r5
 80094ae:	781b      	ldrb	r3, [r3, #0]
}
 80094b0:	0018      	movs	r0, r3
 80094b2:	46bd      	mov	sp, r7
 80094b4:	b005      	add	sp, #20
 80094b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094b8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	000a      	movs	r2, r1
 80094c2:	1cfb      	adds	r3, r7, #3
 80094c4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c6:	210f      	movs	r1, #15
 80094c8:	187b      	adds	r3, r7, r1
 80094ca:	2200      	movs	r2, #0
 80094cc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ce:	260e      	movs	r6, #14
 80094d0:	19bb      	adds	r3, r7, r6
 80094d2:	2200      	movs	r2, #0
 80094d4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	23b0      	movs	r3, #176	@ 0xb0
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	58d2      	ldr	r2, [r2, r3]
 80094de:	000d      	movs	r5, r1
 80094e0:	187c      	adds	r4, r7, r1
 80094e2:	1cfb      	adds	r3, r7, #3
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	0019      	movs	r1, r3
 80094e8:	0010      	movs	r0, r2
 80094ea:	f7fa f87c 	bl	80035e6 <HAL_PCD_EP_Close>
 80094ee:	0003      	movs	r3, r0
 80094f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f2:	19bc      	adds	r4, r7, r6
 80094f4:	197b      	adds	r3, r7, r5
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	0018      	movs	r0, r3
 80094fa:	f000 f942 	bl	8009782 <USBD_Get_USB_Status>
 80094fe:	0003      	movs	r3, r0
 8009500:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009502:	19bb      	adds	r3, r7, r6
 8009504:	781b      	ldrb	r3, [r3, #0]
}
 8009506:	0018      	movs	r0, r3
 8009508:	46bd      	mov	sp, r7
 800950a:	b005      	add	sp, #20
 800950c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800950e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800950e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009510:	b085      	sub	sp, #20
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	000a      	movs	r2, r1
 8009518:	1cfb      	adds	r3, r7, #3
 800951a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800951c:	210f      	movs	r1, #15
 800951e:	187b      	adds	r3, r7, r1
 8009520:	2200      	movs	r2, #0
 8009522:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009524:	260e      	movs	r6, #14
 8009526:	19bb      	adds	r3, r7, r6
 8009528:	2200      	movs	r2, #0
 800952a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	23b0      	movs	r3, #176	@ 0xb0
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	58d2      	ldr	r2, [r2, r3]
 8009534:	000d      	movs	r5, r1
 8009536:	187c      	adds	r4, r7, r1
 8009538:	1cfb      	adds	r3, r7, #3
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	0019      	movs	r1, r3
 800953e:	0010      	movs	r0, r2
 8009540:	f7fa f915 	bl	800376e <HAL_PCD_EP_SetStall>
 8009544:	0003      	movs	r3, r0
 8009546:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009548:	19bc      	adds	r4, r7, r6
 800954a:	197b      	adds	r3, r7, r5
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	0018      	movs	r0, r3
 8009550:	f000 f917 	bl	8009782 <USBD_Get_USB_Status>
 8009554:	0003      	movs	r3, r0
 8009556:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009558:	19bb      	adds	r3, r7, r6
 800955a:	781b      	ldrb	r3, [r3, #0]
}
 800955c:	0018      	movs	r0, r3
 800955e:	46bd      	mov	sp, r7
 8009560:	b005      	add	sp, #20
 8009562:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009564 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	000a      	movs	r2, r1
 800956e:	1cfb      	adds	r3, r7, #3
 8009570:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009572:	210f      	movs	r1, #15
 8009574:	187b      	adds	r3, r7, r1
 8009576:	2200      	movs	r2, #0
 8009578:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800957a:	260e      	movs	r6, #14
 800957c:	19bb      	adds	r3, r7, r6
 800957e:	2200      	movs	r2, #0
 8009580:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	23b0      	movs	r3, #176	@ 0xb0
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	58d2      	ldr	r2, [r2, r3]
 800958a:	000d      	movs	r5, r1
 800958c:	187c      	adds	r4, r7, r1
 800958e:	1cfb      	adds	r3, r7, #3
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	0019      	movs	r1, r3
 8009594:	0010      	movs	r0, r2
 8009596:	f7fa f946 	bl	8003826 <HAL_PCD_EP_ClrStall>
 800959a:	0003      	movs	r3, r0
 800959c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800959e:	19bc      	adds	r4, r7, r6
 80095a0:	197b      	adds	r3, r7, r5
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	0018      	movs	r0, r3
 80095a6:	f000 f8ec 	bl	8009782 <USBD_Get_USB_Status>
 80095aa:	0003      	movs	r3, r0
 80095ac:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80095ae:	19bb      	adds	r3, r7, r6
 80095b0:	781b      	ldrb	r3, [r3, #0]
}
 80095b2:	0018      	movs	r0, r3
 80095b4:	46bd      	mov	sp, r7
 80095b6:	b005      	add	sp, #20
 80095b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095ba <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b084      	sub	sp, #16
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	000a      	movs	r2, r1
 80095c4:	1cfb      	adds	r3, r7, #3
 80095c6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	23b0      	movs	r3, #176	@ 0xb0
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	58d3      	ldr	r3, [r2, r3]
 80095d0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095d2:	1cfb      	adds	r3, r7, #3
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	b25b      	sxtb	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	da0c      	bge.n	80095f6 <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095dc:	1cfb      	adds	r3, r7, #3
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	227f      	movs	r2, #127	@ 0x7f
 80095e2:	401a      	ands	r2, r3
 80095e4:	68f9      	ldr	r1, [r7, #12]
 80095e6:	0013      	movs	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	189b      	adds	r3, r3, r2
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	18cb      	adds	r3, r1, r3
 80095f0:	3312      	adds	r3, #18
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	e00d      	b.n	8009612 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095f6:	1cfb      	adds	r3, r7, #3
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	227f      	movs	r2, #127	@ 0x7f
 80095fc:	401a      	ands	r2, r3
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	23a9      	movs	r3, #169	@ 0xa9
 8009602:	0059      	lsls	r1, r3, #1
 8009604:	0013      	movs	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	189b      	adds	r3, r3, r2
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	18c3      	adds	r3, r0, r3
 800960e:	185b      	adds	r3, r3, r1
 8009610:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009612:	0018      	movs	r0, r3
 8009614:	46bd      	mov	sp, r7
 8009616:	b004      	add	sp, #16
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800961a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800961c:	b085      	sub	sp, #20
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	000a      	movs	r2, r1
 8009624:	1cfb      	adds	r3, r7, #3
 8009626:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009628:	210f      	movs	r1, #15
 800962a:	187b      	adds	r3, r7, r1
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009630:	260e      	movs	r6, #14
 8009632:	19bb      	adds	r3, r7, r6
 8009634:	2200      	movs	r2, #0
 8009636:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	23b0      	movs	r3, #176	@ 0xb0
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	58d2      	ldr	r2, [r2, r3]
 8009640:	000d      	movs	r5, r1
 8009642:	187c      	adds	r4, r7, r1
 8009644:	1cfb      	adds	r3, r7, #3
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	0019      	movs	r1, r3
 800964a:	0010      	movs	r0, r2
 800964c:	f7f9 ff30 	bl	80034b0 <HAL_PCD_SetAddress>
 8009650:	0003      	movs	r3, r0
 8009652:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009654:	19bc      	adds	r4, r7, r6
 8009656:	197b      	adds	r3, r7, r5
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	0018      	movs	r0, r3
 800965c:	f000 f891 	bl	8009782 <USBD_Get_USB_Status>
 8009660:	0003      	movs	r3, r0
 8009662:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009664:	19bb      	adds	r3, r7, r6
 8009666:	781b      	ldrb	r3, [r3, #0]
}
 8009668:	0018      	movs	r0, r3
 800966a:	46bd      	mov	sp, r7
 800966c:	b005      	add	sp, #20
 800966e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009670 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	0008      	movs	r0, r1
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	0019      	movs	r1, r3
 800967e:	230b      	movs	r3, #11
 8009680:	18fb      	adds	r3, r7, r3
 8009682:	1c02      	adds	r2, r0, #0
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	2408      	movs	r4, #8
 8009688:	193b      	adds	r3, r7, r4
 800968a:	1c0a      	adds	r2, r1, #0
 800968c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800968e:	2117      	movs	r1, #23
 8009690:	187b      	adds	r3, r7, r1
 8009692:	2200      	movs	r2, #0
 8009694:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009696:	2516      	movs	r5, #22
 8009698:	197b      	adds	r3, r7, r5
 800969a:	2200      	movs	r2, #0
 800969c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	23b0      	movs	r3, #176	@ 0xb0
 80096a2:	009b      	lsls	r3, r3, #2
 80096a4:	58d0      	ldr	r0, [r2, r3]
 80096a6:	193b      	adds	r3, r7, r4
 80096a8:	881d      	ldrh	r5, [r3, #0]
 80096aa:	000e      	movs	r6, r1
 80096ac:	187c      	adds	r4, r7, r1
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	230b      	movs	r3, #11
 80096b2:	18fb      	adds	r3, r7, r3
 80096b4:	7819      	ldrb	r1, [r3, #0]
 80096b6:	002b      	movs	r3, r5
 80096b8:	f7fa f81d 	bl	80036f6 <HAL_PCD_EP_Transmit>
 80096bc:	0003      	movs	r3, r0
 80096be:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c0:	2516      	movs	r5, #22
 80096c2:	197c      	adds	r4, r7, r5
 80096c4:	19bb      	adds	r3, r7, r6
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	0018      	movs	r0, r3
 80096ca:	f000 f85a 	bl	8009782 <USBD_Get_USB_Status>
 80096ce:	0003      	movs	r3, r0
 80096d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80096d2:	197b      	adds	r3, r7, r5
 80096d4:	781b      	ldrb	r3, [r3, #0]
}
 80096d6:	0018      	movs	r0, r3
 80096d8:	46bd      	mov	sp, r7
 80096da:	b007      	add	sp, #28
 80096dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096de <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80096de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096e0:	b087      	sub	sp, #28
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	60f8      	str	r0, [r7, #12]
 80096e6:	0008      	movs	r0, r1
 80096e8:	607a      	str	r2, [r7, #4]
 80096ea:	0019      	movs	r1, r3
 80096ec:	230b      	movs	r3, #11
 80096ee:	18fb      	adds	r3, r7, r3
 80096f0:	1c02      	adds	r2, r0, #0
 80096f2:	701a      	strb	r2, [r3, #0]
 80096f4:	2408      	movs	r4, #8
 80096f6:	193b      	adds	r3, r7, r4
 80096f8:	1c0a      	adds	r2, r1, #0
 80096fa:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096fc:	2117      	movs	r1, #23
 80096fe:	187b      	adds	r3, r7, r1
 8009700:	2200      	movs	r2, #0
 8009702:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009704:	2516      	movs	r5, #22
 8009706:	197b      	adds	r3, r7, r5
 8009708:	2200      	movs	r2, #0
 800970a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	23b0      	movs	r3, #176	@ 0xb0
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	58d0      	ldr	r0, [r2, r3]
 8009714:	193b      	adds	r3, r7, r4
 8009716:	881d      	ldrh	r5, [r3, #0]
 8009718:	000e      	movs	r6, r1
 800971a:	187c      	adds	r4, r7, r1
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	230b      	movs	r3, #11
 8009720:	18fb      	adds	r3, r7, r3
 8009722:	7819      	ldrb	r1, [r3, #0]
 8009724:	002b      	movs	r3, r5
 8009726:	f7f9 ffaf 	bl	8003688 <HAL_PCD_EP_Receive>
 800972a:	0003      	movs	r3, r0
 800972c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800972e:	2516      	movs	r5, #22
 8009730:	197c      	adds	r4, r7, r5
 8009732:	19bb      	adds	r3, r7, r6
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	0018      	movs	r0, r3
 8009738:	f000 f823 	bl	8009782 <USBD_Get_USB_Status>
 800973c:	0003      	movs	r3, r0
 800973e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009740:	197b      	adds	r3, r7, r5
 8009742:	781b      	ldrb	r3, [r3, #0]
}
 8009744:	0018      	movs	r0, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	b007      	add	sp, #28
 800974a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800974c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009754:	4b02      	ldr	r3, [pc, #8]	@ (8009760 <USBD_static_malloc+0x14>)
}
 8009756:	0018      	movs	r0, r3
 8009758:	46bd      	mov	sp, r7
 800975a:	b002      	add	sp, #8
 800975c:	bd80      	pop	{r7, pc}
 800975e:	46c0      	nop			@ (mov r8, r8)
 8009760:	200009a4 	.word	0x200009a4

08009764 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]

}
 800976c:	46c0      	nop			@ (mov r8, r8)
 800976e:	46bd      	mov	sp, r7
 8009770:	b002      	add	sp, #8
 8009772:	bd80      	pop	{r7, pc}

08009774 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009778:	f7f8 f900 	bl	800197c <SystemClock_Config>
}
 800977c:	46c0      	nop			@ (mov r8, r8)
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	0002      	movs	r2, r0
 800978a:	1dfb      	adds	r3, r7, #7
 800978c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800978e:	230f      	movs	r3, #15
 8009790:	18fb      	adds	r3, r7, r3
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8009796:	1dfb      	adds	r3, r7, #7
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	2b03      	cmp	r3, #3
 800979c:	d017      	beq.n	80097ce <USBD_Get_USB_Status+0x4c>
 800979e:	dc1b      	bgt.n	80097d8 <USBD_Get_USB_Status+0x56>
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	d00f      	beq.n	80097c4 <USBD_Get_USB_Status+0x42>
 80097a4:	dc18      	bgt.n	80097d8 <USBD_Get_USB_Status+0x56>
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <USBD_Get_USB_Status+0x2e>
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d005      	beq.n	80097ba <USBD_Get_USB_Status+0x38>
 80097ae:	e013      	b.n	80097d8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097b0:	230f      	movs	r3, #15
 80097b2:	18fb      	adds	r3, r7, r3
 80097b4:	2200      	movs	r2, #0
 80097b6:	701a      	strb	r2, [r3, #0]
    break;
 80097b8:	e013      	b.n	80097e2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097ba:	230f      	movs	r3, #15
 80097bc:	18fb      	adds	r3, r7, r3
 80097be:	2202      	movs	r2, #2
 80097c0:	701a      	strb	r2, [r3, #0]
    break;
 80097c2:	e00e      	b.n	80097e2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097c4:	230f      	movs	r3, #15
 80097c6:	18fb      	adds	r3, r7, r3
 80097c8:	2201      	movs	r2, #1
 80097ca:	701a      	strb	r2, [r3, #0]
    break;
 80097cc:	e009      	b.n	80097e2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097ce:	230f      	movs	r3, #15
 80097d0:	18fb      	adds	r3, r7, r3
 80097d2:	2202      	movs	r2, #2
 80097d4:	701a      	strb	r2, [r3, #0]
    break;
 80097d6:	e004      	b.n	80097e2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80097d8:	230f      	movs	r3, #15
 80097da:	18fb      	adds	r3, r7, r3
 80097dc:	2202      	movs	r2, #2
 80097de:	701a      	strb	r2, [r3, #0]
    break;
 80097e0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80097e2:	230f      	movs	r3, #15
 80097e4:	18fb      	adds	r3, r7, r3
 80097e6:	781b      	ldrb	r3, [r3, #0]
}
 80097e8:	0018      	movs	r0, r3
 80097ea:	46bd      	mov	sp, r7
 80097ec:	b004      	add	sp, #16
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <memset>:
 80097f0:	0003      	movs	r3, r0
 80097f2:	1882      	adds	r2, r0, r2
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d100      	bne.n	80097fa <memset+0xa>
 80097f8:	4770      	bx	lr
 80097fa:	7019      	strb	r1, [r3, #0]
 80097fc:	3301      	adds	r3, #1
 80097fe:	e7f9      	b.n	80097f4 <memset+0x4>

08009800 <__libc_init_array>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	2600      	movs	r6, #0
 8009804:	4c0c      	ldr	r4, [pc, #48]	@ (8009838 <__libc_init_array+0x38>)
 8009806:	4d0d      	ldr	r5, [pc, #52]	@ (800983c <__libc_init_array+0x3c>)
 8009808:	1b64      	subs	r4, r4, r5
 800980a:	10a4      	asrs	r4, r4, #2
 800980c:	42a6      	cmp	r6, r4
 800980e:	d109      	bne.n	8009824 <__libc_init_array+0x24>
 8009810:	2600      	movs	r6, #0
 8009812:	f000 f819 	bl	8009848 <_init>
 8009816:	4c0a      	ldr	r4, [pc, #40]	@ (8009840 <__libc_init_array+0x40>)
 8009818:	4d0a      	ldr	r5, [pc, #40]	@ (8009844 <__libc_init_array+0x44>)
 800981a:	1b64      	subs	r4, r4, r5
 800981c:	10a4      	asrs	r4, r4, #2
 800981e:	42a6      	cmp	r6, r4
 8009820:	d105      	bne.n	800982e <__libc_init_array+0x2e>
 8009822:	bd70      	pop	{r4, r5, r6, pc}
 8009824:	00b3      	lsls	r3, r6, #2
 8009826:	58eb      	ldr	r3, [r5, r3]
 8009828:	4798      	blx	r3
 800982a:	3601      	adds	r6, #1
 800982c:	e7ee      	b.n	800980c <__libc_init_array+0xc>
 800982e:	00b3      	lsls	r3, r6, #2
 8009830:	58eb      	ldr	r3, [r5, r3]
 8009832:	4798      	blx	r3
 8009834:	3601      	adds	r6, #1
 8009836:	e7f2      	b.n	800981e <__libc_init_array+0x1e>
 8009838:	080099e0 	.word	0x080099e0
 800983c:	080099e0 	.word	0x080099e0
 8009840:	080099e4 	.word	0x080099e4
 8009844:	080099e0 	.word	0x080099e0

08009848 <_init>:
 8009848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984a:	46c0      	nop			@ (mov r8, r8)
 800984c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984e:	bc08      	pop	{r3}
 8009850:	469e      	mov	lr, r3
 8009852:	4770      	bx	lr

08009854 <_fini>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	46c0      	nop			@ (mov r8, r8)
 8009858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985a:	bc08      	pop	{r3}
 800985c:	469e      	mov	lr, r3
 800985e:	4770      	bx	lr


NUCLEO - LowPowerTime PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b10  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001bd0  08001bd0  00002bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bec  08001bec  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001bec  08001bec  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001bec  08001bec  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bec  08001bec  00002bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001bf0  08001bf0  00002bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001bf4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  2000000c  08001c00  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001c00  00003060  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000042cb  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011fb  00000000  00000000  000072ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000598  00000000  00000000  00008500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000421  00000000  00000000  00008a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001229e  00000000  00000000  00008eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000063a8  00000000  00000000  0001b157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fcd4  00000000  00000000  000214ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000911d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001288  00000000  00000000  00091218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000924a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001bb8 	.word	0x08001bb8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001bb8 	.word	0x08001bb8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <HAL_LPTIM_CompareMatchCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_LPTIM1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	increment++;
 8000228:	4b04      	ldr	r3, [pc, #16]	@ (800023c <HAL_LPTIM_CompareMatchCallback+0x1c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3301      	adds	r3, #1
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b02      	ldr	r3, [pc, #8]	@ (800023c <HAL_LPTIM_CompareMatchCallback+0x1c>)
 8000232:	701a      	strb	r2, [r3, #0]
}
 8000234:	46c0      	nop			@ (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000058 	.word	0x20000058

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f000 f93e 	bl	80004c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f810 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_LPTIM1_Init();
 800024c:	f000 f880 	bl	8000350 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

//  HAL_LPTIM_PWM_Start(&hlptim1, 65500, 31260);
  HAL_LPTIM_TimeOut_Start_IT(&hlptim1, 65500, 31250);
 8000250:	4a03      	ldr	r2, [pc, #12]	@ (8000260 <main+0x20>)
 8000252:	4904      	ldr	r1, [pc, #16]	@ (8000264 <main+0x24>)
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <main+0x28>)
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fb0e 	bl	8000878 <HAL_LPTIM_TimeOut_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 800025c:	46c0      	nop			@ (mov r8, r8)
 800025e:	e7fd      	b.n	800025c <main+0x1c>
 8000260:	00007a12 	.word	0x00007a12
 8000264:	0000ffdc 	.word	0x0000ffdc
 8000268:	20000028 	.word	0x20000028

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b09d      	sub	sp, #116	@ 0x74
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	2438      	movs	r4, #56	@ 0x38
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	2338      	movs	r3, #56	@ 0x38
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f001 fc6f 	bl	8001b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000282:	2324      	movs	r3, #36	@ 0x24
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	0018      	movs	r0, r3
 8000288:	2314      	movs	r3, #20
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f001 fc67 	bl	8001b60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000292:	003b      	movs	r3, r7
 8000294:	0018      	movs	r0, r3
 8000296:	2324      	movs	r3, #36	@ 0x24
 8000298:	001a      	movs	r2, r3
 800029a:	2100      	movs	r1, #0
 800029c:	f001 fc60 	bl	8001b60 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a0:	4b29      	ldr	r3, [pc, #164]	@ (8000348 <SystemClock_Config+0xdc>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a29      	ldr	r2, [pc, #164]	@ (800034c <SystemClock_Config+0xe0>)
 80002a6:	401a      	ands	r2, r3
 80002a8:	4b27      	ldr	r3, [pc, #156]	@ (8000348 <SystemClock_Config+0xdc>)
 80002aa:	2180      	movs	r1, #128	@ 0x80
 80002ac:	0109      	lsls	r1, r1, #4
 80002ae:	430a      	orrs	r2, r1
 80002b0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b2:	0021      	movs	r1, r4
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2202      	movs	r2, #2
 80002b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2201      	movs	r2, #1
 80002be:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2210      	movs	r2, #16
 80002c4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2202      	movs	r2, #2
 80002ca:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2200      	movs	r2, #0
 80002d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2280      	movs	r2, #128	@ 0x80
 80002d6:	0312      	lsls	r2, r2, #12
 80002d8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2280      	movs	r2, #128	@ 0x80
 80002de:	0412      	lsls	r2, r2, #16
 80002e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fd1b 	bl	8000d20 <HAL_RCC_OscConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80002ee:	f000 f859 	bl	80003a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	2124      	movs	r1, #36	@ 0x24
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	220f      	movs	r2, #15
 80002f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2203      	movs	r2, #3
 80002fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	22c0      	movs	r2, #192	@ 0xc0
 8000304:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2200      	movs	r2, #0
 800030a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2100      	movs	r1, #0
 8000316:	0018      	movs	r0, r3
 8000318:	f001 f8c6 	bl	80014a8 <HAL_RCC_ClockConfig>
 800031c:	1e03      	subs	r3, r0, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000320:	f000 f840 	bl	80003a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000324:	003b      	movs	r3, r7
 8000326:	2280      	movs	r2, #128	@ 0x80
 8000328:	601a      	str	r2, [r3, #0]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800032a:	003b      	movs	r3, r7
 800032c:	2200      	movs	r2, #0
 800032e:	61da      	str	r2, [r3, #28]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000330:	003b      	movs	r3, r7
 8000332:	0018      	movs	r0, r3
 8000334:	f001 fa86 	bl	8001844 <HAL_RCCEx_PeriphCLKConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800033c:	f000 f832 	bl	80003a4 <Error_Handler>
  }
}
 8000340:	46c0      	nop			@ (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b01d      	add	sp, #116	@ 0x74
 8000346:	bd90      	pop	{r4, r7, pc}
 8000348:	40007000 	.word	0x40007000
 800034c:	ffffe7ff 	.word	0xffffe7ff

08000350 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000354:	4b10      	ldr	r3, [pc, #64]	@ (8000398 <MX_LPTIM1_Init+0x48>)
 8000356:	4a11      	ldr	r2, [pc, #68]	@ (800039c <MX_LPTIM1_Init+0x4c>)
 8000358:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800035a:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <MX_LPTIM1_Init+0x48>)
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV8;
 8000360:	4b0d      	ldr	r3, [pc, #52]	@ (8000398 <MX_LPTIM1_Init+0x48>)
 8000362:	22c0      	movs	r2, #192	@ 0xc0
 8000364:	00d2      	lsls	r2, r2, #3
 8000366:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000368:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <MX_LPTIM1_Init+0x48>)
 800036a:	4a0d      	ldr	r2, [pc, #52]	@ (80003a0 <MX_LPTIM1_Init+0x50>)
 800036c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800036e:	4b0a      	ldr	r3, [pc, #40]	@ (8000398 <MX_LPTIM1_Init+0x48>)
 8000370:	2200      	movs	r2, #0
 8000372:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000374:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <MX_LPTIM1_Init+0x48>)
 8000376:	2200      	movs	r2, #0
 8000378:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800037a:	4b07      	ldr	r3, [pc, #28]	@ (8000398 <MX_LPTIM1_Init+0x48>)
 800037c:	2200      	movs	r2, #0
 800037e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000380:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <MX_LPTIM1_Init+0x48>)
 8000382:	0018      	movs	r0, r3
 8000384:	f000 f9ec 	bl	8000760 <HAL_LPTIM_Init>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d001      	beq.n	8000390 <MX_LPTIM1_Init+0x40>
  {
    Error_Handler();
 800038c:	f000 f80a 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000390:	46c0      	nop			@ (mov r8, r8)
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	46c0      	nop			@ (mov r8, r8)
 8000398:	20000028 	.word	0x20000028
 800039c:	40007c00 	.word	0x40007c00
 80003a0:	0000ffff 	.word	0x0000ffff

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	46c0      	nop			@ (mov r8, r8)
 80003ae:	e7fd      	b.n	80003ac <Error_Handler+0x8>

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003b4:	4b07      	ldr	r3, [pc, #28]	@ (80003d4 <HAL_MspInit+0x24>)
 80003b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003b8:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <HAL_MspInit+0x24>)
 80003ba:	2101      	movs	r1, #1
 80003bc:	430a      	orrs	r2, r1
 80003be:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c0:	4b04      	ldr	r3, [pc, #16]	@ (80003d4 <HAL_MspInit+0x24>)
 80003c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80003c4:	4b03      	ldr	r3, [pc, #12]	@ (80003d4 <HAL_MspInit+0x24>)
 80003c6:	2180      	movs	r1, #128	@ 0x80
 80003c8:	0549      	lsls	r1, r1, #21
 80003ca:	430a      	orrs	r2, r1
 80003cc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ce:	46c0      	nop			@ (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	40021000 	.word	0x40021000

080003d8 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000410 <HAL_LPTIM_MspInit+0x38>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d10e      	bne.n	8000408 <HAL_LPTIM_MspInit+0x30>
  {
    /* USER CODE BEGIN LPTIM1_MspInit 0 */

    /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80003ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000414 <HAL_LPTIM_MspInit+0x3c>)
 80003ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80003ee:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <HAL_LPTIM_MspInit+0x3c>)
 80003f0:	2180      	movs	r1, #128	@ 0x80
 80003f2:	0609      	lsls	r1, r1, #24
 80003f4:	430a      	orrs	r2, r1
 80003f6:	639a      	str	r2, [r3, #56]	@ 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2100      	movs	r1, #0
 80003fc:	200d      	movs	r0, #13
 80003fe:	f000 f97d 	bl	80006fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000402:	200d      	movs	r0, #13
 8000404:	f000 f98f 	bl	8000726 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 8000408:	46c0      	nop			@ (mov r8, r8)
 800040a:	46bd      	mov	sp, r7
 800040c:	b002      	add	sp, #8
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40007c00 	.word	0x40007c00
 8000414:	40021000 	.word	0x40021000

08000418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800041c:	46c0      	nop			@ (mov r8, r8)
 800041e:	e7fd      	b.n	800041c <NMI_Handler+0x4>

08000420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000424:	46c0      	nop			@ (mov r8, r8)
 8000426:	e7fd      	b.n	8000424 <HardFault_Handler+0x4>

08000428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800042c:	46c0      	nop			@ (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000440:	f000 f894 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000444:	46c0      	nop			@ (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000450:	4b03      	ldr	r3, [pc, #12]	@ (8000460 <LPTIM1_IRQHandler+0x14>)
 8000452:	0018      	movs	r0, r3
 8000454:	f000 fa86 	bl	8000964 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000458:	46c0      	nop			@ (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	20000028 	.word	0x20000028

08000464 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000468:	46c0      	nop			@ (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000470:	480d      	ldr	r0, [pc, #52]	@ (80004a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000472:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000474:	f7ff fff6 	bl	8000464 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000478:	480c      	ldr	r0, [pc, #48]	@ (80004ac <LoopForever+0x6>)
  ldr r1, =_edata
 800047a:	490d      	ldr	r1, [pc, #52]	@ (80004b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800047c:	4a0d      	ldr	r2, [pc, #52]	@ (80004b4 <LoopForever+0xe>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000480:	e002      	b.n	8000488 <LoopCopyDataInit>

08000482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000486:	3304      	adds	r3, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800048c:	d3f9      	bcc.n	8000482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048e:	4a0a      	ldr	r2, [pc, #40]	@ (80004b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000490:	4c0a      	ldr	r4, [pc, #40]	@ (80004bc <LoopForever+0x16>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000494:	e001      	b.n	800049a <LoopFillZerobss>

08000496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000498:	3204      	adds	r2, #4

0800049a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800049c:	d3fb      	bcc.n	8000496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800049e:	f001 fb67 	bl	8001b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004a2:	f7ff fecd 	bl	8000240 <main>

080004a6 <LoopForever>:

LoopForever:
    b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   r0, =_estack
 80004a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004b4:	08001bf4 	.word	0x08001bf4
  ldr r2, =_sbss
 80004b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004bc:	20000060 	.word	0x20000060

080004c0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC1_COMP_IRQHandler>
	...

080004c4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80004d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000500 <HAL_Init+0x3c>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <HAL_Init+0x3c>)
 80004d6:	2140      	movs	r1, #64	@ 0x40
 80004d8:	430a      	orrs	r2, r1
 80004da:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 f811 	bl	8000504 <HAL_InitTick>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d003      	beq.n	80004ee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	2201      	movs	r2, #1
 80004ea:	701a      	strb	r2, [r3, #0]
 80004ec:	e001      	b.n	80004f2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004ee:	f7ff ff5f 	bl	80003b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	781b      	ldrb	r3, [r3, #0]
}
 80004f6:	0018      	movs	r0, r3
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	40022000 	.word	0x40022000

08000504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050c:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <HAL_InitTick+0x5c>)
 800050e:	681c      	ldr	r4, [r3, #0]
 8000510:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <HAL_InitTick+0x60>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	0019      	movs	r1, r3
 8000516:	23fa      	movs	r3, #250	@ 0xfa
 8000518:	0098      	lsls	r0, r3, #2
 800051a:	f7ff fdf5 	bl	8000108 <__udivsi3>
 800051e:	0003      	movs	r3, r0
 8000520:	0019      	movs	r1, r3
 8000522:	0020      	movs	r0, r4
 8000524:	f7ff fdf0 	bl	8000108 <__udivsi3>
 8000528:	0003      	movs	r3, r0
 800052a:	0018      	movs	r0, r3
 800052c:	f000 f90b 	bl	8000746 <HAL_SYSTICK_Config>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000534:	2301      	movs	r3, #1
 8000536:	e00f      	b.n	8000558 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b03      	cmp	r3, #3
 800053c:	d80b      	bhi.n	8000556 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	2301      	movs	r3, #1
 8000542:	425b      	negs	r3, r3
 8000544:	2200      	movs	r2, #0
 8000546:	0018      	movs	r0, r3
 8000548:	f000 f8d8 	bl	80006fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <HAL_InitTick+0x64>)
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	0018      	movs	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	b003      	add	sp, #12
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	20000000 	.word	0x20000000
 8000564:	20000008 	.word	0x20000008
 8000568:	20000004 	.word	0x20000004

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b05      	ldr	r3, [pc, #20]	@ (8000588 <HAL_IncTick+0x1c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	001a      	movs	r2, r3
 8000576:	4b05      	ldr	r3, [pc, #20]	@ (800058c <HAL_IncTick+0x20>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	18d2      	adds	r2, r2, r3
 800057c:	4b03      	ldr	r3, [pc, #12]	@ (800058c <HAL_IncTick+0x20>)
 800057e:	601a      	str	r2, [r3, #0]
}
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	20000008 	.word	0x20000008
 800058c:	2000005c 	.word	0x2000005c

08000590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  return uwTick;
 8000594:	4b02      	ldr	r3, [pc, #8]	@ (80005a0 <HAL_GetTick+0x10>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	0018      	movs	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	2000005c 	.word	0x2000005c

080005a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	0002      	movs	r2, r0
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80005b6:	d809      	bhi.n	80005cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	001a      	movs	r2, r3
 80005be:	231f      	movs	r3, #31
 80005c0:	401a      	ands	r2, r3
 80005c2:	4b04      	ldr	r3, [pc, #16]	@ (80005d4 <__NVIC_EnableIRQ+0x30>)
 80005c4:	2101      	movs	r1, #1
 80005c6:	4091      	lsls	r1, r2
 80005c8:	000a      	movs	r2, r1
 80005ca:	601a      	str	r2, [r3, #0]
  }
}
 80005cc:	46c0      	nop			@ (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b002      	add	sp, #8
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	e000e100 	.word	0xe000e100

080005d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	0002      	movs	r2, r0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80005ec:	d828      	bhi.n	8000640 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ee:	4a2f      	ldr	r2, [pc, #188]	@ (80006ac <__NVIC_SetPriority+0xd4>)
 80005f0:	1dfb      	adds	r3, r7, #7
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b25b      	sxtb	r3, r3
 80005f6:	089b      	lsrs	r3, r3, #2
 80005f8:	33c0      	adds	r3, #192	@ 0xc0
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	589b      	ldr	r3, [r3, r2]
 80005fe:	1dfa      	adds	r2, r7, #7
 8000600:	7812      	ldrb	r2, [r2, #0]
 8000602:	0011      	movs	r1, r2
 8000604:	2203      	movs	r2, #3
 8000606:	400a      	ands	r2, r1
 8000608:	00d2      	lsls	r2, r2, #3
 800060a:	21ff      	movs	r1, #255	@ 0xff
 800060c:	4091      	lsls	r1, r2
 800060e:	000a      	movs	r2, r1
 8000610:	43d2      	mvns	r2, r2
 8000612:	401a      	ands	r2, r3
 8000614:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	019b      	lsls	r3, r3, #6
 800061a:	22ff      	movs	r2, #255	@ 0xff
 800061c:	401a      	ands	r2, r3
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	0018      	movs	r0, r3
 8000624:	2303      	movs	r3, #3
 8000626:	4003      	ands	r3, r0
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800062c:	481f      	ldr	r0, [pc, #124]	@ (80006ac <__NVIC_SetPriority+0xd4>)
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b25b      	sxtb	r3, r3
 8000634:	089b      	lsrs	r3, r3, #2
 8000636:	430a      	orrs	r2, r1
 8000638:	33c0      	adds	r3, #192	@ 0xc0
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800063e:	e031      	b.n	80006a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000640:	4a1b      	ldr	r2, [pc, #108]	@ (80006b0 <__NVIC_SetPriority+0xd8>)
 8000642:	1dfb      	adds	r3, r7, #7
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	0019      	movs	r1, r3
 8000648:	230f      	movs	r3, #15
 800064a:	400b      	ands	r3, r1
 800064c:	3b08      	subs	r3, #8
 800064e:	089b      	lsrs	r3, r3, #2
 8000650:	3306      	adds	r3, #6
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	18d3      	adds	r3, r2, r3
 8000656:	3304      	adds	r3, #4
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	1dfa      	adds	r2, r7, #7
 800065c:	7812      	ldrb	r2, [r2, #0]
 800065e:	0011      	movs	r1, r2
 8000660:	2203      	movs	r2, #3
 8000662:	400a      	ands	r2, r1
 8000664:	00d2      	lsls	r2, r2, #3
 8000666:	21ff      	movs	r1, #255	@ 0xff
 8000668:	4091      	lsls	r1, r2
 800066a:	000a      	movs	r2, r1
 800066c:	43d2      	mvns	r2, r2
 800066e:	401a      	ands	r2, r3
 8000670:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	019b      	lsls	r3, r3, #6
 8000676:	22ff      	movs	r2, #255	@ 0xff
 8000678:	401a      	ands	r2, r3
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	0018      	movs	r0, r3
 8000680:	2303      	movs	r3, #3
 8000682:	4003      	ands	r3, r0
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000688:	4809      	ldr	r0, [pc, #36]	@ (80006b0 <__NVIC_SetPriority+0xd8>)
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	001c      	movs	r4, r3
 8000690:	230f      	movs	r3, #15
 8000692:	4023      	ands	r3, r4
 8000694:	3b08      	subs	r3, #8
 8000696:	089b      	lsrs	r3, r3, #2
 8000698:	430a      	orrs	r2, r1
 800069a:	3306      	adds	r3, #6
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	18c3      	adds	r3, r0, r3
 80006a0:	3304      	adds	r3, #4
 80006a2:	601a      	str	r2, [r3, #0]
}
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b003      	add	sp, #12
 80006aa:	bd90      	pop	{r4, r7, pc}
 80006ac:	e000e100 	.word	0xe000e100
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	1e5a      	subs	r2, r3, #1
 80006c0:	2380      	movs	r3, #128	@ 0x80
 80006c2:	045b      	lsls	r3, r3, #17
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d301      	bcc.n	80006cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006c8:	2301      	movs	r3, #1
 80006ca:	e010      	b.n	80006ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <SysTick_Config+0x44>)
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	3a01      	subs	r2, #1
 80006d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006d4:	2301      	movs	r3, #1
 80006d6:	425b      	negs	r3, r3
 80006d8:	2103      	movs	r1, #3
 80006da:	0018      	movs	r0, r3
 80006dc:	f7ff ff7c 	bl	80005d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e0:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <SysTick_Config+0x44>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <SysTick_Config+0x44>)
 80006e8:	2207      	movs	r2, #7
 80006ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	0018      	movs	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b002      	add	sp, #8
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	e000e010 	.word	0xe000e010

080006fc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
 8000706:	210f      	movs	r1, #15
 8000708:	187b      	adds	r3, r7, r1
 800070a:	1c02      	adds	r2, r0, #0
 800070c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	187b      	adds	r3, r7, r1
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b25b      	sxtb	r3, r3
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff ff5d 	bl	80005d8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b004      	add	sp, #16
 8000724:	bd80      	pop	{r7, pc}

08000726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	0002      	movs	r2, r0
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b25b      	sxtb	r3, r3
 8000738:	0018      	movs	r0, r3
 800073a:	f7ff ff33 	bl	80005a4 <__NVIC_EnableIRQ>
}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b002      	add	sp, #8
 8000744:	bd80      	pop	{r7, pc}

08000746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	0018      	movs	r0, r3
 8000752:	f7ff ffaf 	bl	80006b4 <SysTick_Config>
 8000756:	0003      	movs	r3, r0
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}

08000760 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d101      	bne.n	8000772 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e078      	b.n	8000864 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	222e      	movs	r2, #46	@ 0x2e
 8000776:	5c9b      	ldrb	r3, [r3, r2]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d107      	bne.n	800078e <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	222d      	movs	r2, #45	@ 0x2d
 8000782:	2100      	movs	r1, #0
 8000784:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	0018      	movs	r0, r3
 800078a:	f7ff fe25 	bl	80003d8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	222e      	movs	r2, #46	@ 0x2e
 8000792:	2102      	movs	r1, #2
 8000794:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d005      	beq.n	80007b2 <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80007aa:	2380      	movs	r3, #128	@ 0x80
 80007ac:	041b      	lsls	r3, r3, #16
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d103      	bne.n	80007ba <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	221e      	movs	r2, #30
 80007b6:	4393      	bics	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a2b      	ldr	r2, [pc, #172]	@ (800086c <HAL_LPTIM_Init+0x10c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d003      	beq.n	80007cc <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000870 <HAL_LPTIM_Init+0x110>)
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4a29      	ldr	r2, [pc, #164]	@ (8000874 <HAL_LPTIM_Init+0x114>)
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80007dc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80007e2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80007e8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80007ee:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d107      	bne.n	800080e <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8000806:	4313      	orrs	r3, r2
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	4313      	orrs	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d005      	beq.n	8000822 <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800081a:	2380      	movs	r3, #128	@ 0x80
 800081c:	041b      	lsls	r3, r3, #16
 800081e:	429a      	cmp	r2, r3
 8000820:	d107      	bne.n	8000832 <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800082a:	4313      	orrs	r3, r2
 800082c:	68fa      	ldr	r2, [r7, #12]
 800082e:	4313      	orrs	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a0d      	ldr	r2, [pc, #52]	@ (800086c <HAL_LPTIM_Init+0x10c>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d00a      	beq.n	8000852 <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8000844:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800084a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	4313      	orrs	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	222e      	movs	r2, #46	@ 0x2e
 800085e:	2101      	movs	r1, #1
 8000860:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
}
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	b004      	add	sp, #16
 800086a:	bd80      	pop	{r7, pc}
 800086c:	0000ffff 	.word	0x0000ffff
 8000870:	ffff1f3f 	.word	0xffff1f3f
 8000874:	ff19f1fe 	.word	0xff19f1fe

08000878 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	222e      	movs	r2, #46	@ 0x2e
 8000888:	2102      	movs	r1, #2
 800088a:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 800088c:	4b34      	ldr	r3, [pc, #208]	@ (8000960 <HAL_LPTIM_TimeOut_Start_IT+0xe8>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b33      	ldr	r3, [pc, #204]	@ (8000960 <HAL_LPTIM_TimeOut_Start_IT+0xe8>)
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	0589      	lsls	r1, r1, #22
 8000896:	430a      	orrs	r2, r1
 8000898:	601a      	str	r2, [r3, #0]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2180      	movs	r1, #128	@ 0x80
 80008a6:	0309      	lsls	r1, r1, #12
 80008a8:	430a      	orrs	r2, r1
 80008aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	691a      	ldr	r2, [r3, #16]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	2101      	movs	r1, #1
 80008b8:	430a      	orrs	r2, r1
 80008ba:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2210      	movs	r2, #16
 80008c2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	68ba      	ldr	r2, [r7, #8]
 80008ca:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2110      	movs	r1, #16
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 f925 	bl	8000b20 <LPTIM_WaitForFlag>
 80008d6:	0003      	movs	r3, r0
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d101      	bne.n	80008e0 <HAL_LPTIM_TimeOut_Start_IT+0x68>
  {
    return HAL_TIMEOUT;
 80008dc:	2303      	movs	r3, #3
 80008de:	e03b      	b.n	8000958 <HAL_LPTIM_TimeOut_Start_IT+0xe0>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2208      	movs	r2, #8
 80008e6:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2108      	movs	r1, #8
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 f913 	bl	8000b20 <LPTIM_WaitForFlag>
 80008fa:	0003      	movs	r3, r0
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d101      	bne.n	8000904 <HAL_LPTIM_TimeOut_Start_IT+0x8c>
  {
    return HAL_TIMEOUT;
 8000900:	2303      	movs	r3, #3
 8000902:	e029      	b.n	8000958 <HAL_LPTIM_TimeOut_Start_IT+0xe0>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f942 	bl	8000b90 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	0018      	movs	r0, r3
 8000910:	f000 f8fa 	bl	8000b08 <HAL_LPTIM_GetState>
 8000914:	0003      	movs	r3, r0
 8000916:	2b03      	cmp	r3, #3
 8000918:	d101      	bne.n	800091e <HAL_LPTIM_TimeOut_Start_IT+0xa6>
  {
    return HAL_TIMEOUT;
 800091a:	2303      	movs	r3, #3
 800091c:	e01c      	b.n	8000958 <HAL_LPTIM_TimeOut_Start_IT+0xe0>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	689a      	ldr	r2, [r3, #8]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	691a      	ldr	r2, [r3, #16]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2101      	movs	r1, #1
 800093a:	430a      	orrs	r2, r1
 800093c:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	691a      	ldr	r2, [r3, #16]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2104      	movs	r1, #4
 800094a:	430a      	orrs	r2, r1
 800094c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	222e      	movs	r2, #46	@ 0x2e
 8000952:	2101      	movs	r1, #1
 8000954:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000956:	2300      	movs	r3, #0
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b004      	add	sp, #16
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40010400 	.word	0x40010400

08000964 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2201      	movs	r2, #1
 8000974:	4013      	ands	r3, r2
 8000976:	2b01      	cmp	r3, #1
 8000978:	d10e      	bne.n	8000998 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	2201      	movs	r2, #1
 8000982:	4013      	ands	r3, r2
 8000984:	2b01      	cmp	r3, #1
 8000986:	d107      	bne.n	8000998 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2201      	movs	r2, #1
 800098e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff fc44 	bl	8000220 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2202      	movs	r2, #2
 80009a0:	4013      	ands	r3, r2
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d10e      	bne.n	80009c4 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	2202      	movs	r2, #2
 80009ae:	4013      	ands	r3, r2
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d107      	bne.n	80009c4 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2202      	movs	r2, #2
 80009ba:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 f872 	bl	8000aa8 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2204      	movs	r2, #4
 80009cc:	4013      	ands	r3, r2
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d10e      	bne.n	80009f0 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	2204      	movs	r2, #4
 80009da:	4013      	ands	r3, r2
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d107      	bne.n	80009f0 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2204      	movs	r2, #4
 80009e6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 f864 	bl	8000ab8 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2208      	movs	r2, #8
 80009f8:	4013      	ands	r3, r2
 80009fa:	2b08      	cmp	r3, #8
 80009fc:	d10e      	bne.n	8000a1c <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	2208      	movs	r2, #8
 8000a06:	4013      	ands	r3, r2
 8000a08:	2b08      	cmp	r3, #8
 8000a0a:	d107      	bne.n	8000a1c <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2208      	movs	r2, #8
 8000a12:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 f856 	bl	8000ac8 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2210      	movs	r2, #16
 8000a24:	4013      	ands	r3, r2
 8000a26:	2b10      	cmp	r3, #16
 8000a28:	d10e      	bne.n	8000a48 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	2210      	movs	r2, #16
 8000a32:	4013      	ands	r3, r2
 8000a34:	2b10      	cmp	r3, #16
 8000a36:	d107      	bne.n	8000a48 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2210      	movs	r2, #16
 8000a3e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 f848 	bl	8000ad8 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2220      	movs	r2, #32
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b20      	cmp	r3, #32
 8000a54:	d10e      	bne.n	8000a74 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	4013      	ands	r3, r2
 8000a60:	2b20      	cmp	r3, #32
 8000a62:	d107      	bne.n	8000a74 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2220      	movs	r2, #32
 8000a6a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 f83a 	bl	8000ae8 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2240      	movs	r2, #64	@ 0x40
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	2b40      	cmp	r3, #64	@ 0x40
 8000a80:	d10e      	bne.n	8000aa0 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	2240      	movs	r2, #64	@ 0x40
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	2b40      	cmp	r3, #64	@ 0x40
 8000a8e:	d107      	bne.n	8000aa0 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2240      	movs	r2, #64	@ 0x40
 8000a96:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 f82c 	bl	8000af8 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8000ab0:	46c0      	nop			@ (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	b002      	add	sp, #8
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b002      	add	sp, #8
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b002      	add	sp, #8
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	222e      	movs	r2, #46	@ 0x2e
 8000b14:	5c9b      	ldrb	r3, [r3, r2]
 8000b16:	b2db      	uxtb	r3, r3
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8000b32:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <LPTIM_WaitForFlag+0x68>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4915      	ldr	r1, [pc, #84]	@ (8000b8c <LPTIM_WaitForFlag+0x6c>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff fae5 	bl	8000108 <__udivsi3>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	001a      	movs	r2, r3
 8000b42:	0013      	movs	r3, r2
 8000b44:	015b      	lsls	r3, r3, #5
 8000b46:	1a9b      	subs	r3, r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	189b      	adds	r3, r3, r2
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d103      	bne.n	8000b64 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	2203      	movs	r2, #3
 8000b62:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d002      	beq.n	8000b7a <LPTIM_WaitForFlag+0x5a>
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1ea      	bne.n	8000b50 <LPTIM_WaitForFlag+0x30>

  return result;
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
}
 8000b80:	0018      	movs	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b004      	add	sp, #16
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	00004e20 	.word	0x00004e20

08000b90 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	@ 0x30
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8000ba0:	613b      	str	r3, [r7, #16]
  return(result);
 8000ba2:	693b      	ldr	r3, [r7, #16]
  uint32_t tmpCMP;
  uint32_t tmpARR;
  uint32_t primask_bit;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	f383 8810 	msr	PRIMASK, r3
}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	4b56      	ldr	r3, [pc, #344]	@ (8000d14 <LPTIM_Disable+0x184>)
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d106      	bne.n	8000bcc <LPTIM_Disable+0x3c>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8000bbe:	4b56      	ldr	r3, [pc, #344]	@ (8000d18 <LPTIM_Disable+0x188>)
 8000bc0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bc2:	23c0      	movs	r3, #192	@ 0xc0
 8000bc4:	031b      	lsls	r3, r3, #12
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8000bca:	e000      	b.n	8000bce <LPTIM_Disable+0x3e>
    default:
      break;
 8000bcc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	001a      	movs	r2, r3
 8000bf4:	4b47      	ldr	r3, [pc, #284]	@ (8000d14 <LPTIM_Disable+0x184>)
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d10d      	bne.n	8000c16 <LPTIM_Disable+0x86>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8000bfa:	4b47      	ldr	r3, [pc, #284]	@ (8000d18 <LPTIM_Disable+0x188>)
 8000bfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000bfe:	4b46      	ldr	r3, [pc, #280]	@ (8000d18 <LPTIM_Disable+0x188>)
 8000c00:	2180      	movs	r1, #128	@ 0x80
 8000c02:	0609      	lsls	r1, r1, #24
 8000c04:	430a      	orrs	r2, r1
 8000c06:	629a      	str	r2, [r3, #40]	@ 0x28
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8000c08:	4b43      	ldr	r3, [pc, #268]	@ (8000d18 <LPTIM_Disable+0x188>)
 8000c0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c0c:	4b42      	ldr	r3, [pc, #264]	@ (8000d18 <LPTIM_Disable+0x188>)
 8000c0e:	0052      	lsls	r2, r2, #1
 8000c10:	0852      	lsrs	r2, r2, #1
 8000c12:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8000c14:	e000      	b.n	8000c18 <LPTIM_Disable+0x88>
    default:
      break;
 8000c16:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d102      	bne.n	8000c24 <LPTIM_Disable+0x94>
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d05c      	beq.n	8000cde <LPTIM_Disable+0x14e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	001a      	movs	r2, r3
 8000c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d14 <LPTIM_Disable+0x184>)
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d106      	bne.n	8000c3e <LPTIM_Disable+0xae>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8000c30:	4b39      	ldr	r3, [pc, #228]	@ (8000d18 <LPTIM_Disable+0x188>)
 8000c32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000c34:	4b38      	ldr	r3, [pc, #224]	@ (8000d18 <LPTIM_Disable+0x188>)
 8000c36:	4939      	ldr	r1, [pc, #228]	@ (8000d1c <LPTIM_Disable+0x18c>)
 8000c38:	400a      	ands	r2, r1
 8000c3a:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8000c3c:	e000      	b.n	8000c40 <LPTIM_Disable+0xb0>
      default:
        break;
 8000c3e:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d01b      	beq.n	8000c7e <LPTIM_Disable+0xee>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	691a      	ldr	r2, [r3, #16]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2101      	movs	r1, #1
 8000c52:	430a      	orrs	r2, r1
 8000c54:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2108      	movs	r1, #8
 8000c62:	0018      	movs	r0, r3
 8000c64:	f7ff ff5c 	bl	8000b20 <LPTIM_WaitForFlag>
 8000c68:	0003      	movs	r3, r0
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d103      	bne.n	8000c76 <LPTIM_Disable+0xe6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	222e      	movs	r2, #46	@ 0x2e
 8000c72:	2103      	movs	r1, #3
 8000c74:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d01b      	beq.n	8000cbc <LPTIM_Disable+0x12c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	691a      	ldr	r2, [r3, #16]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2101      	movs	r1, #1
 8000c90:	430a      	orrs	r2, r1
 8000c92:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff ff3d 	bl	8000b20 <LPTIM_WaitForFlag>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d103      	bne.n	8000cb4 <LPTIM_Disable+0x124>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	222e      	movs	r2, #46	@ 0x2e
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2210      	movs	r2, #16
 8000cba:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <LPTIM_Disable+0x184>)
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d109      	bne.n	8000cdc <LPTIM_Disable+0x14c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8000cc8:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <LPTIM_Disable+0x188>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ccc:	4a13      	ldr	r2, [pc, #76]	@ (8000d1c <LPTIM_Disable+0x18c>)
 8000cce:	4013      	ands	r3, r2
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <LPTIM_Disable+0x188>)
 8000cd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8000cda:	e000      	b.n	8000cde <LPTIM_Disable+0x14e>
      default:
        break;
 8000cdc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	438a      	bics	r2, r1
 8000cec:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cf4:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6a3a      	ldr	r2, [r7, #32]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f383 8810 	msr	PRIMASK, r3
}
 8000d08:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b00c      	add	sp, #48	@ 0x30
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	40007c00 	.word	0x40007c00
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	fff3ffff 	.word	0xfff3ffff

08000d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d20:	b5b0      	push	{r4, r5, r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d102      	bne.n	8000d34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	f000 fbaf 	bl	8001492 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d34:	4bcf      	ldr	r3, [pc, #828]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	220c      	movs	r2, #12
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d3e:	4bcd      	ldr	r3, [pc, #820]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	2380      	movs	r3, #128	@ 0x80
 8000d44:	025b      	lsls	r3, r3, #9
 8000d46:	4013      	ands	r3, r2
 8000d48:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4013      	ands	r3, r2
 8000d52:	d100      	bne.n	8000d56 <HAL_RCC_OscConfig+0x36>
 8000d54:	e07e      	b.n	8000e54 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	2b08      	cmp	r3, #8
 8000d5a:	d007      	beq.n	8000d6c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	2b0c      	cmp	r3, #12
 8000d60:	d112      	bne.n	8000d88 <HAL_RCC_OscConfig+0x68>
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	2380      	movs	r3, #128	@ 0x80
 8000d66:	025b      	lsls	r3, r3, #9
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d10d      	bne.n	8000d88 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d6c:	4bc1      	ldr	r3, [pc, #772]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	2380      	movs	r3, #128	@ 0x80
 8000d72:	029b      	lsls	r3, r3, #10
 8000d74:	4013      	ands	r3, r2
 8000d76:	d100      	bne.n	8000d7a <HAL_RCC_OscConfig+0x5a>
 8000d78:	e06b      	b.n	8000e52 <HAL_RCC_OscConfig+0x132>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d167      	bne.n	8000e52 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f000 fb85 	bl	8001492 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	025b      	lsls	r3, r3, #9
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d107      	bne.n	8000da4 <HAL_RCC_OscConfig+0x84>
 8000d94:	4bb7      	ldr	r3, [pc, #732]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4bb6      	ldr	r3, [pc, #728]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000d9a:	2180      	movs	r1, #128	@ 0x80
 8000d9c:	0249      	lsls	r1, r1, #9
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	e027      	b.n	8000df4 <HAL_RCC_OscConfig+0xd4>
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	23a0      	movs	r3, #160	@ 0xa0
 8000daa:	02db      	lsls	r3, r3, #11
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d10e      	bne.n	8000dce <HAL_RCC_OscConfig+0xae>
 8000db0:	4bb0      	ldr	r3, [pc, #704]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4baf      	ldr	r3, [pc, #700]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000db6:	2180      	movs	r1, #128	@ 0x80
 8000db8:	02c9      	lsls	r1, r1, #11
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	4bad      	ldr	r3, [pc, #692]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	4bac      	ldr	r3, [pc, #688]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000dc4:	2180      	movs	r1, #128	@ 0x80
 8000dc6:	0249      	lsls	r1, r1, #9
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e012      	b.n	8000df4 <HAL_RCC_OscConfig+0xd4>
 8000dce:	4ba9      	ldr	r3, [pc, #676]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4ba8      	ldr	r3, [pc, #672]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000dd4:	49a8      	ldr	r1, [pc, #672]	@ (8001078 <HAL_RCC_OscConfig+0x358>)
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	4ba6      	ldr	r3, [pc, #664]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	2380      	movs	r3, #128	@ 0x80
 8000de0:	025b      	lsls	r3, r3, #9
 8000de2:	4013      	ands	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4ba2      	ldr	r3, [pc, #648]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4ba1      	ldr	r3, [pc, #644]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000dee:	49a3      	ldr	r1, [pc, #652]	@ (800107c <HAL_RCC_OscConfig+0x35c>)
 8000df0:	400a      	ands	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d015      	beq.n	8000e28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fbc8 	bl	8000590 <HAL_GetTick>
 8000e00:	0003      	movs	r3, r0
 8000e02:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e04:	e009      	b.n	8000e1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e06:	f7ff fbc3 	bl	8000590 <HAL_GetTick>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b64      	cmp	r3, #100	@ 0x64
 8000e12:	d902      	bls.n	8000e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	f000 fb3c 	bl	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e1a:	4b96      	ldr	r3, [pc, #600]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	2380      	movs	r3, #128	@ 0x80
 8000e20:	029b      	lsls	r3, r3, #10
 8000e22:	4013      	ands	r3, r2
 8000e24:	d0ef      	beq.n	8000e06 <HAL_RCC_OscConfig+0xe6>
 8000e26:	e015      	b.n	8000e54 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e28:	f7ff fbb2 	bl	8000590 <HAL_GetTick>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e32:	f7ff fbad 	bl	8000590 <HAL_GetTick>
 8000e36:	0002      	movs	r2, r0
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b64      	cmp	r3, #100	@ 0x64
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e326      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e44:	4b8b      	ldr	r3, [pc, #556]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	2380      	movs	r3, #128	@ 0x80
 8000e4a:	029b      	lsls	r3, r3, #10
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	d1f0      	bne.n	8000e32 <HAL_RCC_OscConfig+0x112>
 8000e50:	e000      	b.n	8000e54 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e52:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2202      	movs	r2, #2
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d100      	bne.n	8000e60 <HAL_RCC_OscConfig+0x140>
 8000e5e:	e08b      	b.n	8000f78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d005      	beq.n	8000e78 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000e6c:	6a3b      	ldr	r3, [r7, #32]
 8000e6e:	2b0c      	cmp	r3, #12
 8000e70:	d13e      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x1d0>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d13b      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000e78:	4b7e      	ldr	r3, [pc, #504]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2204      	movs	r2, #4
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d004      	beq.n	8000e8c <HAL_RCC_OscConfig+0x16c>
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e302      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	4b79      	ldr	r3, [pc, #484]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	4a7b      	ldr	r2, [pc, #492]	@ (8001080 <HAL_RCC_OscConfig+0x360>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	0019      	movs	r1, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	021a      	lsls	r2, r3, #8
 8000e9c:	4b75      	ldr	r3, [pc, #468]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ea2:	4b74      	ldr	r3, [pc, #464]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2209      	movs	r2, #9
 8000ea8:	4393      	bics	r3, r2
 8000eaa:	0019      	movs	r1, r3
 8000eac:	4b71      	ldr	r3, [pc, #452]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000eae:	697a      	ldr	r2, [r7, #20]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000eb4:	f000 fc40 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 8000eb8:	0001      	movs	r1, r0
 8000eba:	4b6e      	ldr	r3, [pc, #440]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	4a6f      	ldr	r2, [pc, #444]	@ (8001084 <HAL_RCC_OscConfig+0x364>)
 8000ec6:	5cd3      	ldrb	r3, [r2, r3]
 8000ec8:	000a      	movs	r2, r1
 8000eca:	40da      	lsrs	r2, r3
 8000ecc:	4b6e      	ldr	r3, [pc, #440]	@ (8001088 <HAL_RCC_OscConfig+0x368>)
 8000ece:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000ed0:	4b6e      	ldr	r3, [pc, #440]	@ (800108c <HAL_RCC_OscConfig+0x36c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2513      	movs	r5, #19
 8000ed6:	197c      	adds	r4, r7, r5
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff fb13 	bl	8000504 <HAL_InitTick>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000ee2:	197b      	adds	r3, r7, r5
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d046      	beq.n	8000f78 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000eea:	197b      	adds	r3, r7, r5
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	e2d0      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d027      	beq.n	8000f46 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2209      	movs	r2, #9
 8000efc:	4393      	bics	r3, r2
 8000efe:	0019      	movs	r1, r3
 8000f00:	4b5c      	ldr	r3, [pc, #368]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fb42 	bl	8000590 <HAL_GetTick>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f12:	f7ff fb3d 	bl	8000590 <HAL_GetTick>
 8000f16:	0002      	movs	r2, r0
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e2b6      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f24:	4b53      	ldr	r3, [pc, #332]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2204      	movs	r2, #4
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d0f1      	beq.n	8000f12 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2e:	4b51      	ldr	r3, [pc, #324]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4a53      	ldr	r2, [pc, #332]	@ (8001080 <HAL_RCC_OscConfig+0x360>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	0019      	movs	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	021a      	lsls	r2, r3, #8
 8000f3e:	4b4d      	ldr	r3, [pc, #308]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f40:	430a      	orrs	r2, r1
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	e018      	b.n	8000f78 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f46:	4b4b      	ldr	r3, [pc, #300]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	438a      	bics	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f52:	f7ff fb1d 	bl	8000590 <HAL_GetTick>
 8000f56:	0003      	movs	r3, r0
 8000f58:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f5c:	f7ff fb18 	bl	8000590 <HAL_GetTick>
 8000f60:	0002      	movs	r2, r0
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e291      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f6e:	4b41      	ldr	r3, [pc, #260]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2204      	movs	r2, #4
 8000f74:	4013      	ands	r3, r2
 8000f76:	d1f1      	bne.n	8000f5c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	4013      	ands	r3, r2
 8000f80:	d100      	bne.n	8000f84 <HAL_RCC_OscConfig+0x264>
 8000f82:	e0a1      	b.n	80010c8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f84:	6a3b      	ldr	r3, [r7, #32]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d140      	bne.n	800100c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	2380      	movs	r3, #128	@ 0x80
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4013      	ands	r3, r2
 8000f94:	d005      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x282>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e277      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fa2:	4b34      	ldr	r3, [pc, #208]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	4a3a      	ldr	r2, [pc, #232]	@ (8001090 <HAL_RCC_OscConfig+0x370>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	0019      	movs	r1, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fb0:	4b30      	ldr	r3, [pc, #192]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	0a19      	lsrs	r1, r3, #8
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	061a      	lsls	r2, r3, #24
 8000fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fce:	0b5b      	lsrs	r3, r3, #13
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	2280      	movs	r2, #128	@ 0x80
 8000fd4:	0212      	lsls	r2, r2, #8
 8000fd6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000fd8:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	091b      	lsrs	r3, r3, #4
 8000fde:	210f      	movs	r1, #15
 8000fe0:	400b      	ands	r3, r1
 8000fe2:	4928      	ldr	r1, [pc, #160]	@ (8001084 <HAL_RCC_OscConfig+0x364>)
 8000fe4:	5ccb      	ldrb	r3, [r1, r3]
 8000fe6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000fe8:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <HAL_RCC_OscConfig+0x368>)
 8000fea:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000fec:	4b27      	ldr	r3, [pc, #156]	@ (800108c <HAL_RCC_OscConfig+0x36c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2513      	movs	r5, #19
 8000ff2:	197c      	adds	r4, r7, r5
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff fa85 	bl	8000504 <HAL_InitTick>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000ffe:	197b      	adds	r3, r7, r5
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d060      	beq.n	80010c8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001006:	197b      	adds	r3, r7, r5
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	e242      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d03f      	beq.n	8001094 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001014:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b16      	ldr	r3, [pc, #88]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 800101a:	2180      	movs	r1, #128	@ 0x80
 800101c:	0049      	lsls	r1, r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fab5 	bl	8000590 <HAL_GetTick>
 8001026:	0003      	movs	r3, r0
 8001028:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800102c:	f7ff fab0 	bl	8000590 <HAL_GetTick>
 8001030:	0002      	movs	r2, r0
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e229      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	2380      	movs	r3, #128	@ 0x80
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4013      	ands	r3, r2
 8001048:	d0f0      	beq.n	800102c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	4a10      	ldr	r2, [pc, #64]	@ (8001090 <HAL_RCC_OscConfig+0x370>)
 8001050:	4013      	ands	r3, r2
 8001052:	0019      	movs	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 800105a:	430a      	orrs	r2, r1
 800105c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800105e:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	0a19      	lsrs	r1, r3, #8
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a1b      	ldr	r3, [r3, #32]
 800106a:	061a      	lsls	r2, r3, #24
 800106c:	4b01      	ldr	r3, [pc, #4]	@ (8001074 <HAL_RCC_OscConfig+0x354>)
 800106e:	430a      	orrs	r2, r1
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	e029      	b.n	80010c8 <HAL_RCC_OscConfig+0x3a8>
 8001074:	40021000 	.word	0x40021000
 8001078:	fffeffff 	.word	0xfffeffff
 800107c:	fffbffff 	.word	0xfffbffff
 8001080:	ffffe0ff 	.word	0xffffe0ff
 8001084:	08001bd0 	.word	0x08001bd0
 8001088:	20000000 	.word	0x20000000
 800108c:	20000004 	.word	0x20000004
 8001090:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001094:	4bbd      	ldr	r3, [pc, #756]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4bbc      	ldr	r3, [pc, #752]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 800109a:	49bd      	ldr	r1, [pc, #756]	@ (8001390 <HAL_RCC_OscConfig+0x670>)
 800109c:	400a      	ands	r2, r1
 800109e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fa76 	bl	8000590 <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010aa:	f7ff fa71 	bl	8000590 <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e1ea      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80010bc:	4bb3      	ldr	r3, [pc, #716]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	@ 0x80
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4013      	ands	r3, r2
 80010c6:	d1f0      	bne.n	80010aa <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2208      	movs	r2, #8
 80010ce:	4013      	ands	r3, r2
 80010d0:	d036      	beq.n	8001140 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d019      	beq.n	800110e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010da:	4bac      	ldr	r3, [pc, #688]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80010dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010de:	4bab      	ldr	r3, [pc, #684]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80010e0:	2101      	movs	r1, #1
 80010e2:	430a      	orrs	r2, r1
 80010e4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fa53 	bl	8000590 <HAL_GetTick>
 80010ea:	0003      	movs	r3, r0
 80010ec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fa4e 	bl	8000590 <HAL_GetTick>
 80010f4:	0002      	movs	r2, r0
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e1c7      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001102:	4ba2      	ldr	r3, [pc, #648]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001106:	2202      	movs	r2, #2
 8001108:	4013      	ands	r3, r2
 800110a:	d0f1      	beq.n	80010f0 <HAL_RCC_OscConfig+0x3d0>
 800110c:	e018      	b.n	8001140 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800110e:	4b9f      	ldr	r3, [pc, #636]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001110:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001112:	4b9e      	ldr	r3, [pc, #632]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001114:	2101      	movs	r1, #1
 8001116:	438a      	bics	r2, r1
 8001118:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111a:	f7ff fa39 	bl	8000590 <HAL_GetTick>
 800111e:	0003      	movs	r3, r0
 8001120:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001124:	f7ff fa34 	bl	8000590 <HAL_GetTick>
 8001128:	0002      	movs	r2, r0
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e1ad      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001136:	4b95      	ldr	r3, [pc, #596]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800113a:	2202      	movs	r2, #2
 800113c:	4013      	ands	r3, r2
 800113e:	d1f1      	bne.n	8001124 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2204      	movs	r2, #4
 8001146:	4013      	ands	r3, r2
 8001148:	d100      	bne.n	800114c <HAL_RCC_OscConfig+0x42c>
 800114a:	e0ae      	b.n	80012aa <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114c:	2027      	movs	r0, #39	@ 0x27
 800114e:	183b      	adds	r3, r7, r0
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001154:	4b8d      	ldr	r3, [pc, #564]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001156:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	055b      	lsls	r3, r3, #21
 800115c:	4013      	ands	r3, r2
 800115e:	d109      	bne.n	8001174 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	4b8a      	ldr	r3, [pc, #552]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001164:	4b89      	ldr	r3, [pc, #548]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001166:	2180      	movs	r1, #128	@ 0x80
 8001168:	0549      	lsls	r1, r1, #21
 800116a:	430a      	orrs	r2, r1
 800116c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800116e:	183b      	adds	r3, r7, r0
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001174:	4b87      	ldr	r3, [pc, #540]	@ (8001394 <HAL_RCC_OscConfig+0x674>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2380      	movs	r3, #128	@ 0x80
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4013      	ands	r3, r2
 800117e:	d11a      	bne.n	80011b6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001180:	4b84      	ldr	r3, [pc, #528]	@ (8001394 <HAL_RCC_OscConfig+0x674>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b83      	ldr	r3, [pc, #524]	@ (8001394 <HAL_RCC_OscConfig+0x674>)
 8001186:	2180      	movs	r1, #128	@ 0x80
 8001188:	0049      	lsls	r1, r1, #1
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118e:	f7ff f9ff 	bl	8000590 <HAL_GetTick>
 8001192:	0003      	movs	r3, r0
 8001194:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001198:	f7ff f9fa 	bl	8000590 <HAL_GetTick>
 800119c:	0002      	movs	r2, r0
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	@ 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e173      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011aa:	4b7a      	ldr	r3, [pc, #488]	@ (8001394 <HAL_RCC_OscConfig+0x674>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4013      	ands	r3, r2
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	2380      	movs	r3, #128	@ 0x80
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	429a      	cmp	r2, r3
 80011c0:	d107      	bne.n	80011d2 <HAL_RCC_OscConfig+0x4b2>
 80011c2:	4b72      	ldr	r3, [pc, #456]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80011c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80011c6:	4b71      	ldr	r3, [pc, #452]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80011c8:	2180      	movs	r1, #128	@ 0x80
 80011ca:	0049      	lsls	r1, r1, #1
 80011cc:	430a      	orrs	r2, r1
 80011ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80011d0:	e031      	b.n	8001236 <HAL_RCC_OscConfig+0x516>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x4d4>
 80011da:	4b6c      	ldr	r3, [pc, #432]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80011dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80011de:	4b6b      	ldr	r3, [pc, #428]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80011e0:	496b      	ldr	r1, [pc, #428]	@ (8001390 <HAL_RCC_OscConfig+0x670>)
 80011e2:	400a      	ands	r2, r1
 80011e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80011e6:	4b69      	ldr	r3, [pc, #420]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80011e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80011ea:	4b68      	ldr	r3, [pc, #416]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80011ec:	496a      	ldr	r1, [pc, #424]	@ (8001398 <HAL_RCC_OscConfig+0x678>)
 80011ee:	400a      	ands	r2, r1
 80011f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80011f2:	e020      	b.n	8001236 <HAL_RCC_OscConfig+0x516>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	23a0      	movs	r3, #160	@ 0xa0
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d10e      	bne.n	800121e <HAL_RCC_OscConfig+0x4fe>
 8001200:	4b62      	ldr	r3, [pc, #392]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001202:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001204:	4b61      	ldr	r3, [pc, #388]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001206:	2180      	movs	r1, #128	@ 0x80
 8001208:	00c9      	lsls	r1, r1, #3
 800120a:	430a      	orrs	r2, r1
 800120c:	651a      	str	r2, [r3, #80]	@ 0x50
 800120e:	4b5f      	ldr	r3, [pc, #380]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001210:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001212:	4b5e      	ldr	r3, [pc, #376]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001214:	2180      	movs	r1, #128	@ 0x80
 8001216:	0049      	lsls	r1, r1, #1
 8001218:	430a      	orrs	r2, r1
 800121a:	651a      	str	r2, [r3, #80]	@ 0x50
 800121c:	e00b      	b.n	8001236 <HAL_RCC_OscConfig+0x516>
 800121e:	4b5b      	ldr	r3, [pc, #364]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001220:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001222:	4b5a      	ldr	r3, [pc, #360]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001224:	495a      	ldr	r1, [pc, #360]	@ (8001390 <HAL_RCC_OscConfig+0x670>)
 8001226:	400a      	ands	r2, r1
 8001228:	651a      	str	r2, [r3, #80]	@ 0x50
 800122a:	4b58      	ldr	r3, [pc, #352]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 800122c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800122e:	4b57      	ldr	r3, [pc, #348]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001230:	4959      	ldr	r1, [pc, #356]	@ (8001398 <HAL_RCC_OscConfig+0x678>)
 8001232:	400a      	ands	r2, r1
 8001234:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d015      	beq.n	800126a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff f9a7 	bl	8000590 <HAL_GetTick>
 8001242:	0003      	movs	r3, r0
 8001244:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001246:	e009      	b.n	800125c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001248:	f7ff f9a2 	bl	8000590 <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	4a52      	ldr	r2, [pc, #328]	@ (800139c <HAL_RCC_OscConfig+0x67c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e11a      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800125c:	4b4b      	ldr	r3, [pc, #300]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 800125e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001260:	2380      	movs	r3, #128	@ 0x80
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4013      	ands	r3, r2
 8001266:	d0ef      	beq.n	8001248 <HAL_RCC_OscConfig+0x528>
 8001268:	e014      	b.n	8001294 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff f991 	bl	8000590 <HAL_GetTick>
 800126e:	0003      	movs	r3, r0
 8001270:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001272:	e009      	b.n	8001288 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001274:	f7ff f98c 	bl	8000590 <HAL_GetTick>
 8001278:	0002      	movs	r2, r0
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	4a47      	ldr	r2, [pc, #284]	@ (800139c <HAL_RCC_OscConfig+0x67c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e104      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001288:	4b40      	ldr	r3, [pc, #256]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 800128a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800128c:	2380      	movs	r3, #128	@ 0x80
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4013      	ands	r3, r2
 8001292:	d1ef      	bne.n	8001274 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001294:	2327      	movs	r3, #39	@ 0x27
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d105      	bne.n	80012aa <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800129e:	4b3b      	ldr	r3, [pc, #236]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80012a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012a2:	4b3a      	ldr	r3, [pc, #232]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80012a4:	493e      	ldr	r1, [pc, #248]	@ (80013a0 <HAL_RCC_OscConfig+0x680>)
 80012a6:	400a      	ands	r2, r1
 80012a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2220      	movs	r2, #32
 80012b0:	4013      	ands	r3, r2
 80012b2:	d049      	beq.n	8001348 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d026      	beq.n	800130a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80012bc:	4b33      	ldr	r3, [pc, #204]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	4b32      	ldr	r3, [pc, #200]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80012c2:	2101      	movs	r1, #1
 80012c4:	430a      	orrs	r2, r1
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	4b30      	ldr	r3, [pc, #192]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80012ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012cc:	4b2f      	ldr	r3, [pc, #188]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 80012ce:	2101      	movs	r1, #1
 80012d0:	430a      	orrs	r2, r1
 80012d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80012d4:	4b33      	ldr	r3, [pc, #204]	@ (80013a4 <HAL_RCC_OscConfig+0x684>)
 80012d6:	6a1a      	ldr	r2, [r3, #32]
 80012d8:	4b32      	ldr	r3, [pc, #200]	@ (80013a4 <HAL_RCC_OscConfig+0x684>)
 80012da:	2180      	movs	r1, #128	@ 0x80
 80012dc:	0189      	lsls	r1, r1, #6
 80012de:	430a      	orrs	r2, r1
 80012e0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff f955 	bl	8000590 <HAL_GetTick>
 80012e6:	0003      	movs	r3, r0
 80012e8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ec:	f7ff f950 	bl	8000590 <HAL_GetTick>
 80012f0:	0002      	movs	r2, r0
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0c9      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2202      	movs	r2, #2
 8001304:	4013      	ands	r3, r2
 8001306:	d0f1      	beq.n	80012ec <HAL_RCC_OscConfig+0x5cc>
 8001308:	e01e      	b.n	8001348 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001310:	2101      	movs	r1, #1
 8001312:	438a      	bics	r2, r1
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <HAL_RCC_OscConfig+0x684>)
 8001318:	6a1a      	ldr	r2, [r3, #32]
 800131a:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <HAL_RCC_OscConfig+0x684>)
 800131c:	4922      	ldr	r1, [pc, #136]	@ (80013a8 <HAL_RCC_OscConfig+0x688>)
 800131e:	400a      	ands	r2, r1
 8001320:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7ff f935 	bl	8000590 <HAL_GetTick>
 8001326:	0003      	movs	r3, r0
 8001328:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800132c:	f7ff f930 	bl	8000590 <HAL_GetTick>
 8001330:	0002      	movs	r2, r0
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e0a9      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800133e:	4b13      	ldr	r3, [pc, #76]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2202      	movs	r2, #2
 8001344:	4013      	ands	r3, r2
 8001346:	d1f1      	bne.n	800132c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134c:	2b00      	cmp	r3, #0
 800134e:	d100      	bne.n	8001352 <HAL_RCC_OscConfig+0x632>
 8001350:	e09e      	b.n	8001490 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	2b0c      	cmp	r3, #12
 8001356:	d100      	bne.n	800135a <HAL_RCC_OscConfig+0x63a>
 8001358:	e077      	b.n	800144a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135e:	2b02      	cmp	r3, #2
 8001360:	d158      	bne.n	8001414 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_RCC_OscConfig+0x66c>)
 8001368:	4910      	ldr	r1, [pc, #64]	@ (80013ac <HAL_RCC_OscConfig+0x68c>)
 800136a:	400a      	ands	r2, r1
 800136c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136e:	f7ff f90f 	bl	8000590 <HAL_GetTick>
 8001372:	0003      	movs	r3, r0
 8001374:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001376:	e01b      	b.n	80013b0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001378:	f7ff f90a 	bl	8000590 <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d914      	bls.n	80013b0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e083      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	40021000 	.word	0x40021000
 8001390:	fffffeff 	.word	0xfffffeff
 8001394:	40007000 	.word	0x40007000
 8001398:	fffffbff 	.word	0xfffffbff
 800139c:	00001388 	.word	0x00001388
 80013a0:	efffffff 	.word	0xefffffff
 80013a4:	40010000 	.word	0x40010000
 80013a8:	ffffdfff 	.word	0xffffdfff
 80013ac:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80013b0:	4b3a      	ldr	r3, [pc, #232]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	049b      	lsls	r3, r3, #18
 80013b8:	4013      	ands	r3, r2
 80013ba:	d1dd      	bne.n	8001378 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013bc:	4b37      	ldr	r3, [pc, #220]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4a37      	ldr	r2, [pc, #220]	@ (80014a0 <HAL_RCC_OscConfig+0x780>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	0019      	movs	r1, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d4:	431a      	orrs	r2, r3
 80013d6:	4b31      	ldr	r3, [pc, #196]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 80013d8:	430a      	orrs	r2, r1
 80013da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013dc:	4b2f      	ldr	r3, [pc, #188]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b2e      	ldr	r3, [pc, #184]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 80013e2:	2180      	movs	r1, #128	@ 0x80
 80013e4:	0449      	lsls	r1, r1, #17
 80013e6:	430a      	orrs	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff f8d1 	bl	8000590 <HAL_GetTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f4:	f7ff f8cc 	bl	8000590 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e045      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001406:	4b25      	ldr	r3, [pc, #148]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	@ 0x80
 800140c:	049b      	lsls	r3, r3, #18
 800140e:	4013      	ands	r3, r2
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x6d4>
 8001412:	e03d      	b.n	8001490 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001414:	4b21      	ldr	r3, [pc, #132]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 800141a:	4922      	ldr	r1, [pc, #136]	@ (80014a4 <HAL_RCC_OscConfig+0x784>)
 800141c:	400a      	ands	r2, r1
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff f8b6 	bl	8000590 <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff f8b1 	bl	8000590 <HAL_GetTick>
 800142e:	0002      	movs	r2, r0
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e02a      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800143c:	4b17      	ldr	r3, [pc, #92]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	049b      	lsls	r3, r3, #18
 8001444:	4013      	ands	r3, r2
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x70a>
 8001448:	e022      	b.n	8001490 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e01d      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <HAL_RCC_OscConfig+0x77c>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	2380      	movs	r3, #128	@ 0x80
 8001460:	025b      	lsls	r3, r3, #9
 8001462:	401a      	ands	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001468:	429a      	cmp	r2, r3
 800146a:	d10f      	bne.n	800148c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	23f0      	movs	r3, #240	@ 0xf0
 8001470:	039b      	lsls	r3, r3, #14
 8001472:	401a      	ands	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001478:	429a      	cmp	r2, r3
 800147a:	d107      	bne.n	800148c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	23c0      	movs	r3, #192	@ 0xc0
 8001480:	041b      	lsls	r3, r3, #16
 8001482:	401a      	ands	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	0018      	movs	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	b00a      	add	sp, #40	@ 0x28
 8001498:	bdb0      	pop	{r4, r5, r7, pc}
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	40021000 	.word	0x40021000
 80014a0:	ff02ffff 	.word	0xff02ffff
 80014a4:	feffffff 	.word	0xfeffffff

080014a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a8:	b5b0      	push	{r4, r5, r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e128      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014bc:	4b96      	ldr	r3, [pc, #600]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2201      	movs	r2, #1
 80014c2:	4013      	ands	r3, r2
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d91e      	bls.n	8001508 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b93      	ldr	r3, [pc, #588]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4393      	bics	r3, r2
 80014d2:	0019      	movs	r1, r3
 80014d4:	4b90      	ldr	r3, [pc, #576]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014dc:	f7ff f858 	bl	8000590 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e4:	e009      	b.n	80014fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e6:	f7ff f853 	bl	8000590 <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	4a8a      	ldr	r2, [pc, #552]	@ (800171c <HAL_RCC_ClockConfig+0x274>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e109      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b87      	ldr	r3, [pc, #540]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2201      	movs	r2, #1
 8001500:	4013      	ands	r3, r2
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d1ee      	bne.n	80014e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2202      	movs	r2, #2
 800150e:	4013      	ands	r3, r2
 8001510:	d009      	beq.n	8001526 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001512:	4b83      	ldr	r3, [pc, #524]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	22f0      	movs	r2, #240	@ 0xf0
 8001518:	4393      	bics	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	4b7f      	ldr	r3, [pc, #508]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 8001522:	430a      	orrs	r2, r1
 8001524:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	4013      	ands	r3, r2
 800152e:	d100      	bne.n	8001532 <HAL_RCC_ClockConfig+0x8a>
 8001530:	e089      	b.n	8001646 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d107      	bne.n	800154a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800153a:	4b79      	ldr	r3, [pc, #484]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	2380      	movs	r3, #128	@ 0x80
 8001540:	029b      	lsls	r3, r3, #10
 8001542:	4013      	ands	r3, r2
 8001544:	d120      	bne.n	8001588 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e0e1      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001552:	4b73      	ldr	r3, [pc, #460]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	2380      	movs	r3, #128	@ 0x80
 8001558:	049b      	lsls	r3, r3, #18
 800155a:	4013      	ands	r3, r2
 800155c:	d114      	bne.n	8001588 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0d5      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d106      	bne.n	8001578 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800156a:	4b6d      	ldr	r3, [pc, #436]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2204      	movs	r2, #4
 8001570:	4013      	ands	r3, r2
 8001572:	d109      	bne.n	8001588 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0ca      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001578:	4b69      	ldr	r3, [pc, #420]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0c2      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001588:	4b65      	ldr	r3, [pc, #404]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2203      	movs	r2, #3
 800158e:	4393      	bics	r3, r2
 8001590:	0019      	movs	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4b62      	ldr	r3, [pc, #392]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 8001598:	430a      	orrs	r2, r1
 800159a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800159c:	f7fe fff8 	bl	8000590 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d111      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ac:	e009      	b.n	80015c2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015ae:	f7fe ffef 	bl	8000590 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	4a58      	ldr	r2, [pc, #352]	@ (800171c <HAL_RCC_ClockConfig+0x274>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e0a5      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c2:	4b57      	ldr	r3, [pc, #348]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	220c      	movs	r2, #12
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d1ef      	bne.n	80015ae <HAL_RCC_ClockConfig+0x106>
 80015ce:	e03a      	b.n	8001646 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d111      	bne.n	80015fc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d8:	e009      	b.n	80015ee <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015da:	f7fe ffd9 	bl	8000590 <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	4a4d      	ldr	r2, [pc, #308]	@ (800171c <HAL_RCC_ClockConfig+0x274>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e08f      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	220c      	movs	r2, #12
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d1ef      	bne.n	80015da <HAL_RCC_ClockConfig+0x132>
 80015fa:	e024      	b.n	8001646 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d11b      	bne.n	800163c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001604:	e009      	b.n	800161a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001606:	f7fe ffc3 	bl	8000590 <HAL_GetTick>
 800160a:	0002      	movs	r2, r0
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	4a42      	ldr	r2, [pc, #264]	@ (800171c <HAL_RCC_ClockConfig+0x274>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e079      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800161a:	4b41      	ldr	r3, [pc, #260]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	220c      	movs	r2, #12
 8001620:	4013      	ands	r3, r2
 8001622:	2b04      	cmp	r3, #4
 8001624:	d1ef      	bne.n	8001606 <HAL_RCC_ClockConfig+0x15e>
 8001626:	e00e      	b.n	8001646 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001628:	f7fe ffb2 	bl	8000590 <HAL_GetTick>
 800162c:	0002      	movs	r2, r0
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	4a3a      	ldr	r2, [pc, #232]	@ (800171c <HAL_RCC_ClockConfig+0x274>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d901      	bls.n	800163c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e068      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800163c:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	220c      	movs	r2, #12
 8001642:	4013      	ands	r3, r2
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001646:	4b34      	ldr	r3, [pc, #208]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2201      	movs	r2, #1
 800164c:	4013      	ands	r3, r2
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d21e      	bcs.n	8001692 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001654:	4b30      	ldr	r3, [pc, #192]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	4393      	bics	r3, r2
 800165c:	0019      	movs	r1, r3
 800165e:	4b2e      	ldr	r3, [pc, #184]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001666:	f7fe ff93 	bl	8000590 <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	e009      	b.n	8001684 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001670:	f7fe ff8e 	bl	8000590 <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	4a28      	ldr	r2, [pc, #160]	@ (800171c <HAL_RCC_ClockConfig+0x274>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e044      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001684:	4b24      	ldr	r3, [pc, #144]	@ (8001718 <HAL_RCC_ClockConfig+0x270>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2201      	movs	r2, #1
 800168a:	4013      	ands	r3, r2
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d1ee      	bne.n	8001670 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2204      	movs	r2, #4
 8001698:	4013      	ands	r3, r2
 800169a:	d009      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800169c:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4a20      	ldr	r2, [pc, #128]	@ (8001724 <HAL_RCC_ClockConfig+0x27c>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	0019      	movs	r1, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 80016ac:	430a      	orrs	r2, r1
 80016ae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2208      	movs	r2, #8
 80016b6:	4013      	ands	r3, r2
 80016b8:	d00a      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ba:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	4a1a      	ldr	r2, [pc, #104]	@ (8001728 <HAL_RCC_ClockConfig+0x280>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	0019      	movs	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	00da      	lsls	r2, r3, #3
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 80016cc:	430a      	orrs	r2, r1
 80016ce:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d0:	f000 f832 	bl	8001738 <HAL_RCC_GetSysClockFreq>
 80016d4:	0001      	movs	r1, r0
 80016d6:	4b12      	ldr	r3, [pc, #72]	@ (8001720 <HAL_RCC_ClockConfig+0x278>)
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	220f      	movs	r2, #15
 80016de:	4013      	ands	r3, r2
 80016e0:	4a12      	ldr	r2, [pc, #72]	@ (800172c <HAL_RCC_ClockConfig+0x284>)
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	000a      	movs	r2, r1
 80016e6:	40da      	lsrs	r2, r3
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_RCC_ClockConfig+0x288>)
 80016ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_RCC_ClockConfig+0x28c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	250b      	movs	r5, #11
 80016f2:	197c      	adds	r4, r7, r5
 80016f4:	0018      	movs	r0, r3
 80016f6:	f7fe ff05 	bl	8000504 <HAL_InitTick>
 80016fa:	0003      	movs	r3, r0
 80016fc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80016fe:	197b      	adds	r3, r7, r5
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d002      	beq.n	800170c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001706:	197b      	adds	r3, r7, r5
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	e000      	b.n	800170e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bdb0      	pop	{r4, r5, r7, pc}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	40022000 	.word	0x40022000
 800171c:	00001388 	.word	0x00001388
 8001720:	40021000 	.word	0x40021000
 8001724:	fffff8ff 	.word	0xfffff8ff
 8001728:	ffffc7ff 	.word	0xffffc7ff
 800172c:	08001bd0 	.word	0x08001bd0
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800173e:	4b3c      	ldr	r3, [pc, #240]	@ (8001830 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	220c      	movs	r2, #12
 8001748:	4013      	ands	r3, r2
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d013      	beq.n	8001776 <HAL_RCC_GetSysClockFreq+0x3e>
 800174e:	d85c      	bhi.n	800180a <HAL_RCC_GetSysClockFreq+0xd2>
 8001750:	2b04      	cmp	r3, #4
 8001752:	d002      	beq.n	800175a <HAL_RCC_GetSysClockFreq+0x22>
 8001754:	2b08      	cmp	r3, #8
 8001756:	d00b      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0x38>
 8001758:	e057      	b.n	800180a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800175a:	4b35      	ldr	r3, [pc, #212]	@ (8001830 <HAL_RCC_GetSysClockFreq+0xf8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2210      	movs	r2, #16
 8001760:	4013      	ands	r3, r2
 8001762:	d002      	beq.n	800176a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001764:	4b33      	ldr	r3, [pc, #204]	@ (8001834 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001766:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001768:	e05d      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800176a:	4b33      	ldr	r3, [pc, #204]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x100>)
 800176c:	613b      	str	r3, [r7, #16]
      break;
 800176e:	e05a      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001770:	4b32      	ldr	r3, [pc, #200]	@ (800183c <HAL_RCC_GetSysClockFreq+0x104>)
 8001772:	613b      	str	r3, [r7, #16]
      break;
 8001774:	e057      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	0c9b      	lsrs	r3, r3, #18
 800177a:	220f      	movs	r2, #15
 800177c:	4013      	ands	r3, r2
 800177e:	4a30      	ldr	r2, [pc, #192]	@ (8001840 <HAL_RCC_GetSysClockFreq+0x108>)
 8001780:	5cd3      	ldrb	r3, [r2, r3]
 8001782:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	0d9b      	lsrs	r3, r3, #22
 8001788:	2203      	movs	r2, #3
 800178a:	4013      	ands	r3, r2
 800178c:	3301      	adds	r3, #1
 800178e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001790:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	2380      	movs	r3, #128	@ 0x80
 8001796:	025b      	lsls	r3, r3, #9
 8001798:	4013      	ands	r3, r2
 800179a:	d00f      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	000a      	movs	r2, r1
 80017a0:	0152      	lsls	r2, r2, #5
 80017a2:	1a52      	subs	r2, r2, r1
 80017a4:	0193      	lsls	r3, r2, #6
 80017a6:	1a9b      	subs	r3, r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	185b      	adds	r3, r3, r1
 80017ac:	025b      	lsls	r3, r3, #9
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7fe fca9 	bl	8000108 <__udivsi3>
 80017b6:	0003      	movs	r3, r0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	e023      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80017bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2210      	movs	r2, #16
 80017c2:	4013      	ands	r3, r2
 80017c4:	d00f      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80017c6:	68b9      	ldr	r1, [r7, #8]
 80017c8:	000a      	movs	r2, r1
 80017ca:	0152      	lsls	r2, r2, #5
 80017cc:	1a52      	subs	r2, r2, r1
 80017ce:	0193      	lsls	r3, r2, #6
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	185b      	adds	r3, r3, r1
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	0018      	movs	r0, r3
 80017dc:	f7fe fc94 	bl	8000108 <__udivsi3>
 80017e0:	0003      	movs	r3, r0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e00e      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	000a      	movs	r2, r1
 80017ea:	0152      	lsls	r2, r2, #5
 80017ec:	1a52      	subs	r2, r2, r1
 80017ee:	0193      	lsls	r3, r2, #6
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	185b      	adds	r3, r3, r1
 80017f6:	029b      	lsls	r3, r3, #10
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	0018      	movs	r0, r3
 80017fc:	f7fe fc84 	bl	8000108 <__udivsi3>
 8001800:	0003      	movs	r3, r0
 8001802:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
      break;
 8001808:	e00d      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_RCC_GetSysClockFreq+0xf8>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	0b5b      	lsrs	r3, r3, #13
 8001810:	2207      	movs	r2, #7
 8001812:	4013      	ands	r3, r2
 8001814:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	2280      	movs	r2, #128	@ 0x80
 800181c:	0212      	lsls	r2, r2, #8
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
      break;
 8001824:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001826:	693b      	ldr	r3, [r7, #16]
}
 8001828:	0018      	movs	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	b006      	add	sp, #24
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000
 8001834:	003d0900 	.word	0x003d0900
 8001838:	00f42400 	.word	0x00f42400
 800183c:	007a1200 	.word	0x007a1200
 8001840:	08001be0 	.word	0x08001be0

08001844 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800184c:	2317      	movs	r3, #23
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2220      	movs	r2, #32
 800185a:	4013      	ands	r3, r2
 800185c:	d106      	bne.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2380      	movs	r3, #128	@ 0x80
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	4013      	ands	r3, r2
 8001868:	d100      	bne.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800186a:	e104      	b.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186c:	4bb1      	ldr	r3, [pc, #708]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800186e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001870:	2380      	movs	r3, #128	@ 0x80
 8001872:	055b      	lsls	r3, r3, #21
 8001874:	4013      	ands	r3, r2
 8001876:	d10a      	bne.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001878:	4bae      	ldr	r3, [pc, #696]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800187a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800187c:	4bad      	ldr	r3, [pc, #692]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800187e:	2180      	movs	r1, #128	@ 0x80
 8001880:	0549      	lsls	r1, r1, #21
 8001882:	430a      	orrs	r2, r1
 8001884:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001886:	2317      	movs	r3, #23
 8001888:	18fb      	adds	r3, r7, r3
 800188a:	2201      	movs	r2, #1
 800188c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	4baa      	ldr	r3, [pc, #680]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2380      	movs	r3, #128	@ 0x80
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4013      	ands	r3, r2
 8001898:	d11a      	bne.n	80018d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189a:	4ba7      	ldr	r3, [pc, #668]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4ba6      	ldr	r3, [pc, #664]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	0049      	lsls	r1, r1, #1
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a8:	f7fe fe72 	bl	8000590 <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b0:	e008      	b.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b2:	f7fe fe6d 	bl	8000590 <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b64      	cmp	r3, #100	@ 0x64
 80018be:	d901      	bls.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e133      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	4b9c      	ldr	r3, [pc, #624]	@ (8001b38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2380      	movs	r3, #128	@ 0x80
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4013      	ands	r3, r2
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80018d0:	4b98      	ldr	r3, [pc, #608]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	23c0      	movs	r3, #192	@ 0xc0
 80018d6:	039b      	lsls	r3, r3, #14
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	23c0      	movs	r3, #192	@ 0xc0
 80018e2:	039b      	lsls	r3, r3, #14
 80018e4:	4013      	ands	r3, r2
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d107      	bne.n	80018fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	23c0      	movs	r3, #192	@ 0xc0
 80018f2:	039b      	lsls	r3, r3, #14
 80018f4:	4013      	ands	r3, r2
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d013      	beq.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	23c0      	movs	r3, #192	@ 0xc0
 8001902:	029b      	lsls	r3, r3, #10
 8001904:	401a      	ands	r2, r3
 8001906:	23c0      	movs	r3, #192	@ 0xc0
 8001908:	029b      	lsls	r3, r3, #10
 800190a:	429a      	cmp	r2, r3
 800190c:	d10a      	bne.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800190e:	4b89      	ldr	r3, [pc, #548]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	@ 0x80
 8001914:	029b      	lsls	r3, r3, #10
 8001916:	401a      	ands	r2, r3
 8001918:	2380      	movs	r3, #128	@ 0x80
 800191a:	029b      	lsls	r3, r3, #10
 800191c:	429a      	cmp	r2, r3
 800191e:	d101      	bne.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e103      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001924:	4b83      	ldr	r3, [pc, #524]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001926:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001928:	23c0      	movs	r3, #192	@ 0xc0
 800192a:	029b      	lsls	r3, r3, #10
 800192c:	4013      	ands	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d049      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	23c0      	movs	r3, #192	@ 0xc0
 800193c:	029b      	lsls	r3, r3, #10
 800193e:	4013      	ands	r3, r2
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	429a      	cmp	r2, r3
 8001944:	d004      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2220      	movs	r2, #32
 800194c:	4013      	ands	r3, r2
 800194e:	d10d      	bne.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	23c0      	movs	r3, #192	@ 0xc0
 8001956:	029b      	lsls	r3, r3, #10
 8001958:	4013      	ands	r3, r2
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d034      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	@ 0x80
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4013      	ands	r3, r2
 800196a:	d02e      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800196c:	4b71      	ldr	r3, [pc, #452]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800196e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001970:	4a72      	ldr	r2, [pc, #456]	@ (8001b3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001972:	4013      	ands	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001976:	4b6f      	ldr	r3, [pc, #444]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001978:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800197a:	4b6e      	ldr	r3, [pc, #440]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800197c:	2180      	movs	r1, #128	@ 0x80
 800197e:	0309      	lsls	r1, r1, #12
 8001980:	430a      	orrs	r2, r1
 8001982:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001984:	4b6b      	ldr	r3, [pc, #428]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001986:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001988:	4b6a      	ldr	r3, [pc, #424]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800198a:	496d      	ldr	r1, [pc, #436]	@ (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800198c:	400a      	ands	r2, r1
 800198e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001990:	4b68      	ldr	r3, [pc, #416]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4013      	ands	r3, r2
 800199e:	d014      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7fe fdf6 	bl	8000590 <HAL_GetTick>
 80019a4:	0003      	movs	r3, r0
 80019a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019a8:	e009      	b.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7fe fdf1 	bl	8000590 <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	4a63      	ldr	r2, [pc, #396]	@ (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e0b6      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019be:	4b5d      	ldr	r3, [pc, #372]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80019c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019c2:	2380      	movs	r3, #128	@ 0x80
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4013      	ands	r3, r2
 80019c8:	d0ef      	beq.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	2380      	movs	r3, #128	@ 0x80
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4013      	ands	r3, r2
 80019d4:	d01f      	beq.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	23c0      	movs	r3, #192	@ 0xc0
 80019dc:	029b      	lsls	r3, r3, #10
 80019de:	401a      	ands	r2, r3
 80019e0:	23c0      	movs	r3, #192	@ 0xc0
 80019e2:	029b      	lsls	r3, r3, #10
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d10c      	bne.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80019e8:	4b52      	ldr	r3, [pc, #328]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a56      	ldr	r2, [pc, #344]	@ (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	0019      	movs	r1, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	23c0      	movs	r3, #192	@ 0xc0
 80019f8:	039b      	lsls	r3, r3, #14
 80019fa:	401a      	ands	r2, r3
 80019fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80019fe:	430a      	orrs	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	4b4c      	ldr	r3, [pc, #304]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a04:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	23c0      	movs	r3, #192	@ 0xc0
 8001a0c:	029b      	lsls	r3, r3, #10
 8001a0e:	401a      	ands	r2, r3
 8001a10:	4b48      	ldr	r3, [pc, #288]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a12:	430a      	orrs	r2, r1
 8001a14:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d01f      	beq.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	23c0      	movs	r3, #192	@ 0xc0
 8001a26:	029b      	lsls	r3, r3, #10
 8001a28:	401a      	ands	r2, r3
 8001a2a:	23c0      	movs	r3, #192	@ 0xc0
 8001a2c:	029b      	lsls	r3, r3, #10
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001a32:	4b40      	ldr	r3, [pc, #256]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a44      	ldr	r2, [pc, #272]	@ (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	23c0      	movs	r3, #192	@ 0xc0
 8001a42:	039b      	lsls	r3, r3, #14
 8001a44:	401a      	ands	r2, r3
 8001a46:	4b3b      	ldr	r3, [pc, #236]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	4b39      	ldr	r3, [pc, #228]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a4e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	23c0      	movs	r3, #192	@ 0xc0
 8001a56:	029b      	lsls	r3, r3, #10
 8001a58:	401a      	ands	r2, r3
 8001a5a:	4b36      	ldr	r3, [pc, #216]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a60:	2317      	movs	r3, #23
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d105      	bne.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6a:	4b32      	ldr	r3, [pc, #200]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a6e:	4b31      	ldr	r3, [pc, #196]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a70:	4936      	ldr	r1, [pc, #216]	@ (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001a72:	400a      	ands	r2, r1
 8001a74:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d009      	beq.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a80:	4b2c      	ldr	r3, [pc, #176]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a84:	2203      	movs	r2, #3
 8001a86:	4393      	bics	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	4b29      	ldr	r3, [pc, #164]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001a90:	430a      	orrs	r2, r1
 8001a92:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d009      	beq.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a9e:	4b25      	ldr	r3, [pc, #148]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	4393      	bics	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	4b21      	ldr	r3, [pc, #132]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d009      	beq.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001abc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac0:	4a23      	ldr	r2, [pc, #140]	@ (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	4b1a      	ldr	r3, [pc, #104]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001acc:	430a      	orrs	r2, r1
 8001ace:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ada:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	4a1d      	ldr	r2, [pc, #116]	@ (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	4b12      	ldr	r3, [pc, #72]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001aea:	430a      	orrs	r2, r1
 8001aec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2240      	movs	r2, #64	@ 0x40
 8001af4:	4013      	ands	r3, r2
 8001af6:	d009      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001af8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afc:	4a16      	ldr	r2, [pc, #88]	@ (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1a      	ldr	r2, [r3, #32]
 8001b06:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	4013      	ands	r3, r2
 8001b14:	d009      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001b16:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1a:	4a10      	ldr	r2, [pc, #64]	@ (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	0019      	movs	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69da      	ldr	r2, [r3, #28]
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b26:	430a      	orrs	r2, r1
 8001b28:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b006      	add	sp, #24
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	fffcffff 	.word	0xfffcffff
 8001b40:	fff7ffff 	.word	0xfff7ffff
 8001b44:	00001388 	.word	0x00001388
 8001b48:	ffcfffff 	.word	0xffcfffff
 8001b4c:	efffffff 	.word	0xefffffff
 8001b50:	fffff3ff 	.word	0xfffff3ff
 8001b54:	ffffcfff 	.word	0xffffcfff
 8001b58:	fbffffff 	.word	0xfbffffff
 8001b5c:	fff3ffff 	.word	0xfff3ffff

08001b60 <memset>:
 8001b60:	0003      	movs	r3, r0
 8001b62:	1882      	adds	r2, r0, r2
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d100      	bne.n	8001b6a <memset+0xa>
 8001b68:	4770      	bx	lr
 8001b6a:	7019      	strb	r1, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	e7f9      	b.n	8001b64 <memset+0x4>

08001b70 <__libc_init_array>:
 8001b70:	b570      	push	{r4, r5, r6, lr}
 8001b72:	2600      	movs	r6, #0
 8001b74:	4c0c      	ldr	r4, [pc, #48]	@ (8001ba8 <__libc_init_array+0x38>)
 8001b76:	4d0d      	ldr	r5, [pc, #52]	@ (8001bac <__libc_init_array+0x3c>)
 8001b78:	1b64      	subs	r4, r4, r5
 8001b7a:	10a4      	asrs	r4, r4, #2
 8001b7c:	42a6      	cmp	r6, r4
 8001b7e:	d109      	bne.n	8001b94 <__libc_init_array+0x24>
 8001b80:	2600      	movs	r6, #0
 8001b82:	f000 f819 	bl	8001bb8 <_init>
 8001b86:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb0 <__libc_init_array+0x40>)
 8001b88:	4d0a      	ldr	r5, [pc, #40]	@ (8001bb4 <__libc_init_array+0x44>)
 8001b8a:	1b64      	subs	r4, r4, r5
 8001b8c:	10a4      	asrs	r4, r4, #2
 8001b8e:	42a6      	cmp	r6, r4
 8001b90:	d105      	bne.n	8001b9e <__libc_init_array+0x2e>
 8001b92:	bd70      	pop	{r4, r5, r6, pc}
 8001b94:	00b3      	lsls	r3, r6, #2
 8001b96:	58eb      	ldr	r3, [r5, r3]
 8001b98:	4798      	blx	r3
 8001b9a:	3601      	adds	r6, #1
 8001b9c:	e7ee      	b.n	8001b7c <__libc_init_array+0xc>
 8001b9e:	00b3      	lsls	r3, r6, #2
 8001ba0:	58eb      	ldr	r3, [r5, r3]
 8001ba2:	4798      	blx	r3
 8001ba4:	3601      	adds	r6, #1
 8001ba6:	e7f2      	b.n	8001b8e <__libc_init_array+0x1e>
 8001ba8:	08001bec 	.word	0x08001bec
 8001bac:	08001bec 	.word	0x08001bec
 8001bb0:	08001bf0 	.word	0x08001bf0
 8001bb4:	08001bec 	.word	0x08001bec

08001bb8 <_init>:
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bbe:	bc08      	pop	{r3}
 8001bc0:	469e      	mov	lr, r3
 8001bc2:	4770      	bx	lr

08001bc4 <_fini>:
 8001bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bca:	bc08      	pop	{r3}
 8001bcc:	469e      	mov	lr, r3
 8001bce:	4770      	bx	lr

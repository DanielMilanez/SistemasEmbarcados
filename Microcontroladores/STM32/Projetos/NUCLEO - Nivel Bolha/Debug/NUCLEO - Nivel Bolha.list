
NUCLEO - Nivel Bolha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08004da8  08004da8  00005da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec4  08004ec4  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004ec4  08004ec4  00006010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004ec4  08004ec4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec4  08004ec4  00005ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ec8  08004ec8  00005ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004ecc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000010  08004edc  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08004edc  000060f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abf9  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be3  00000000  00000000  00010c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00012818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090c  00000000  00000000  000133c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135bb  00000000  00000000  00013cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc34  00000000  00000000  0002728f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000789ca  00000000  00000000  00034ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad88d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b3c  00000000  00000000  000ad8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000b040c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d90 	.word	0x08004d90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004d90 	.word	0x08004d90

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_fdiv>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	4646      	mov	r6, r8
 80003f8:	464f      	mov	r7, r9
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0245      	lsls	r5, r0, #9
 80003fe:	b5c0      	push	{r6, r7, lr}
 8000400:	0fc3      	lsrs	r3, r0, #31
 8000402:	0047      	lsls	r7, r0, #1
 8000404:	4698      	mov	r8, r3
 8000406:	1c0e      	adds	r6, r1, #0
 8000408:	0a6d      	lsrs	r5, r5, #9
 800040a:	0e3f      	lsrs	r7, r7, #24
 800040c:	d05b      	beq.n	80004c6 <__aeabi_fdiv+0xd2>
 800040e:	2fff      	cmp	r7, #255	@ 0xff
 8000410:	d021      	beq.n	8000456 <__aeabi_fdiv+0x62>
 8000412:	2380      	movs	r3, #128	@ 0x80
 8000414:	00ed      	lsls	r5, r5, #3
 8000416:	04db      	lsls	r3, r3, #19
 8000418:	431d      	orrs	r5, r3
 800041a:	2300      	movs	r3, #0
 800041c:	4699      	mov	r9, r3
 800041e:	469a      	mov	sl, r3
 8000420:	3f7f      	subs	r7, #127	@ 0x7f
 8000422:	0274      	lsls	r4, r6, #9
 8000424:	0073      	lsls	r3, r6, #1
 8000426:	0a64      	lsrs	r4, r4, #9
 8000428:	0e1b      	lsrs	r3, r3, #24
 800042a:	0ff6      	lsrs	r6, r6, #31
 800042c:	2b00      	cmp	r3, #0
 800042e:	d020      	beq.n	8000472 <__aeabi_fdiv+0x7e>
 8000430:	2bff      	cmp	r3, #255	@ 0xff
 8000432:	d043      	beq.n	80004bc <__aeabi_fdiv+0xc8>
 8000434:	2280      	movs	r2, #128	@ 0x80
 8000436:	2000      	movs	r0, #0
 8000438:	00e4      	lsls	r4, r4, #3
 800043a:	04d2      	lsls	r2, r2, #19
 800043c:	4314      	orrs	r4, r2
 800043e:	3b7f      	subs	r3, #127	@ 0x7f
 8000440:	4642      	mov	r2, r8
 8000442:	1aff      	subs	r7, r7, r3
 8000444:	464b      	mov	r3, r9
 8000446:	4072      	eors	r2, r6
 8000448:	2b0f      	cmp	r3, #15
 800044a:	d900      	bls.n	800044e <__aeabi_fdiv+0x5a>
 800044c:	e09d      	b.n	800058a <__aeabi_fdiv+0x196>
 800044e:	4971      	ldr	r1, [pc, #452]	@ (8000614 <__aeabi_fdiv+0x220>)
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	58cb      	ldr	r3, [r1, r3]
 8000454:	469f      	mov	pc, r3
 8000456:	2d00      	cmp	r5, #0
 8000458:	d15a      	bne.n	8000510 <__aeabi_fdiv+0x11c>
 800045a:	2308      	movs	r3, #8
 800045c:	4699      	mov	r9, r3
 800045e:	3b06      	subs	r3, #6
 8000460:	0274      	lsls	r4, r6, #9
 8000462:	469a      	mov	sl, r3
 8000464:	0073      	lsls	r3, r6, #1
 8000466:	27ff      	movs	r7, #255	@ 0xff
 8000468:	0a64      	lsrs	r4, r4, #9
 800046a:	0e1b      	lsrs	r3, r3, #24
 800046c:	0ff6      	lsrs	r6, r6, #31
 800046e:	2b00      	cmp	r3, #0
 8000470:	d1de      	bne.n	8000430 <__aeabi_fdiv+0x3c>
 8000472:	2c00      	cmp	r4, #0
 8000474:	d13b      	bne.n	80004ee <__aeabi_fdiv+0xfa>
 8000476:	2301      	movs	r3, #1
 8000478:	4642      	mov	r2, r8
 800047a:	4649      	mov	r1, r9
 800047c:	4072      	eors	r2, r6
 800047e:	4319      	orrs	r1, r3
 8000480:	290e      	cmp	r1, #14
 8000482:	d818      	bhi.n	80004b6 <__aeabi_fdiv+0xc2>
 8000484:	4864      	ldr	r0, [pc, #400]	@ (8000618 <__aeabi_fdiv+0x224>)
 8000486:	0089      	lsls	r1, r1, #2
 8000488:	5841      	ldr	r1, [r0, r1]
 800048a:	468f      	mov	pc, r1
 800048c:	4653      	mov	r3, sl
 800048e:	2b02      	cmp	r3, #2
 8000490:	d100      	bne.n	8000494 <__aeabi_fdiv+0xa0>
 8000492:	e0b8      	b.n	8000606 <__aeabi_fdiv+0x212>
 8000494:	2b03      	cmp	r3, #3
 8000496:	d06e      	beq.n	8000576 <__aeabi_fdiv+0x182>
 8000498:	4642      	mov	r2, r8
 800049a:	002c      	movs	r4, r5
 800049c:	2b01      	cmp	r3, #1
 800049e:	d140      	bne.n	8000522 <__aeabi_fdiv+0x12e>
 80004a0:	2000      	movs	r0, #0
 80004a2:	2400      	movs	r4, #0
 80004a4:	05c0      	lsls	r0, r0, #23
 80004a6:	4320      	orrs	r0, r4
 80004a8:	07d2      	lsls	r2, r2, #31
 80004aa:	4310      	orrs	r0, r2
 80004ac:	bce0      	pop	{r5, r6, r7}
 80004ae:	46ba      	mov	sl, r7
 80004b0:	46b1      	mov	r9, r6
 80004b2:	46a8      	mov	r8, r5
 80004b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b6:	20ff      	movs	r0, #255	@ 0xff
 80004b8:	2400      	movs	r4, #0
 80004ba:	e7f3      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 80004bc:	2c00      	cmp	r4, #0
 80004be:	d120      	bne.n	8000502 <__aeabi_fdiv+0x10e>
 80004c0:	2302      	movs	r3, #2
 80004c2:	3fff      	subs	r7, #255	@ 0xff
 80004c4:	e7d8      	b.n	8000478 <__aeabi_fdiv+0x84>
 80004c6:	2d00      	cmp	r5, #0
 80004c8:	d105      	bne.n	80004d6 <__aeabi_fdiv+0xe2>
 80004ca:	2304      	movs	r3, #4
 80004cc:	4699      	mov	r9, r3
 80004ce:	3b03      	subs	r3, #3
 80004d0:	2700      	movs	r7, #0
 80004d2:	469a      	mov	sl, r3
 80004d4:	e7a5      	b.n	8000422 <__aeabi_fdiv+0x2e>
 80004d6:	0028      	movs	r0, r5
 80004d8:	f001 f89a 	bl	8001610 <__clzsi2>
 80004dc:	2776      	movs	r7, #118	@ 0x76
 80004de:	1f43      	subs	r3, r0, #5
 80004e0:	409d      	lsls	r5, r3
 80004e2:	2300      	movs	r3, #0
 80004e4:	427f      	negs	r7, r7
 80004e6:	4699      	mov	r9, r3
 80004e8:	469a      	mov	sl, r3
 80004ea:	1a3f      	subs	r7, r7, r0
 80004ec:	e799      	b.n	8000422 <__aeabi_fdiv+0x2e>
 80004ee:	0020      	movs	r0, r4
 80004f0:	f001 f88e 	bl	8001610 <__clzsi2>
 80004f4:	1f43      	subs	r3, r0, #5
 80004f6:	409c      	lsls	r4, r3
 80004f8:	2376      	movs	r3, #118	@ 0x76
 80004fa:	425b      	negs	r3, r3
 80004fc:	1a1b      	subs	r3, r3, r0
 80004fe:	2000      	movs	r0, #0
 8000500:	e79e      	b.n	8000440 <__aeabi_fdiv+0x4c>
 8000502:	2303      	movs	r3, #3
 8000504:	464a      	mov	r2, r9
 8000506:	431a      	orrs	r2, r3
 8000508:	4691      	mov	r9, r2
 800050a:	2003      	movs	r0, #3
 800050c:	33fc      	adds	r3, #252	@ 0xfc
 800050e:	e797      	b.n	8000440 <__aeabi_fdiv+0x4c>
 8000510:	230c      	movs	r3, #12
 8000512:	4699      	mov	r9, r3
 8000514:	3b09      	subs	r3, #9
 8000516:	27ff      	movs	r7, #255	@ 0xff
 8000518:	469a      	mov	sl, r3
 800051a:	e782      	b.n	8000422 <__aeabi_fdiv+0x2e>
 800051c:	2803      	cmp	r0, #3
 800051e:	d02c      	beq.n	800057a <__aeabi_fdiv+0x186>
 8000520:	0032      	movs	r2, r6
 8000522:	0038      	movs	r0, r7
 8000524:	307f      	adds	r0, #127	@ 0x7f
 8000526:	2800      	cmp	r0, #0
 8000528:	dd47      	ble.n	80005ba <__aeabi_fdiv+0x1c6>
 800052a:	0763      	lsls	r3, r4, #29
 800052c:	d004      	beq.n	8000538 <__aeabi_fdiv+0x144>
 800052e:	230f      	movs	r3, #15
 8000530:	4023      	ands	r3, r4
 8000532:	2b04      	cmp	r3, #4
 8000534:	d000      	beq.n	8000538 <__aeabi_fdiv+0x144>
 8000536:	3404      	adds	r4, #4
 8000538:	0123      	lsls	r3, r4, #4
 800053a:	d503      	bpl.n	8000544 <__aeabi_fdiv+0x150>
 800053c:	0038      	movs	r0, r7
 800053e:	4b37      	ldr	r3, [pc, #220]	@ (800061c <__aeabi_fdiv+0x228>)
 8000540:	3080      	adds	r0, #128	@ 0x80
 8000542:	401c      	ands	r4, r3
 8000544:	28fe      	cmp	r0, #254	@ 0xfe
 8000546:	dcb6      	bgt.n	80004b6 <__aeabi_fdiv+0xc2>
 8000548:	01a4      	lsls	r4, r4, #6
 800054a:	0a64      	lsrs	r4, r4, #9
 800054c:	b2c0      	uxtb	r0, r0
 800054e:	e7a9      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 8000550:	2480      	movs	r4, #128	@ 0x80
 8000552:	2200      	movs	r2, #0
 8000554:	20ff      	movs	r0, #255	@ 0xff
 8000556:	03e4      	lsls	r4, r4, #15
 8000558:	e7a4      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 800055a:	2380      	movs	r3, #128	@ 0x80
 800055c:	03db      	lsls	r3, r3, #15
 800055e:	421d      	tst	r5, r3
 8000560:	d001      	beq.n	8000566 <__aeabi_fdiv+0x172>
 8000562:	421c      	tst	r4, r3
 8000564:	d00b      	beq.n	800057e <__aeabi_fdiv+0x18a>
 8000566:	2480      	movs	r4, #128	@ 0x80
 8000568:	03e4      	lsls	r4, r4, #15
 800056a:	432c      	orrs	r4, r5
 800056c:	0264      	lsls	r4, r4, #9
 800056e:	4642      	mov	r2, r8
 8000570:	20ff      	movs	r0, #255	@ 0xff
 8000572:	0a64      	lsrs	r4, r4, #9
 8000574:	e796      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 8000576:	4646      	mov	r6, r8
 8000578:	002c      	movs	r4, r5
 800057a:	2380      	movs	r3, #128	@ 0x80
 800057c:	03db      	lsls	r3, r3, #15
 800057e:	431c      	orrs	r4, r3
 8000580:	0264      	lsls	r4, r4, #9
 8000582:	0032      	movs	r2, r6
 8000584:	20ff      	movs	r0, #255	@ 0xff
 8000586:	0a64      	lsrs	r4, r4, #9
 8000588:	e78c      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 800058a:	016d      	lsls	r5, r5, #5
 800058c:	0160      	lsls	r0, r4, #5
 800058e:	4285      	cmp	r5, r0
 8000590:	d22d      	bcs.n	80005ee <__aeabi_fdiv+0x1fa>
 8000592:	231b      	movs	r3, #27
 8000594:	2400      	movs	r4, #0
 8000596:	3f01      	subs	r7, #1
 8000598:	2601      	movs	r6, #1
 800059a:	0029      	movs	r1, r5
 800059c:	0064      	lsls	r4, r4, #1
 800059e:	006d      	lsls	r5, r5, #1
 80005a0:	2900      	cmp	r1, #0
 80005a2:	db01      	blt.n	80005a8 <__aeabi_fdiv+0x1b4>
 80005a4:	4285      	cmp	r5, r0
 80005a6:	d301      	bcc.n	80005ac <__aeabi_fdiv+0x1b8>
 80005a8:	1a2d      	subs	r5, r5, r0
 80005aa:	4334      	orrs	r4, r6
 80005ac:	3b01      	subs	r3, #1
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1f3      	bne.n	800059a <__aeabi_fdiv+0x1a6>
 80005b2:	1e6b      	subs	r3, r5, #1
 80005b4:	419d      	sbcs	r5, r3
 80005b6:	432c      	orrs	r4, r5
 80005b8:	e7b3      	b.n	8000522 <__aeabi_fdiv+0x12e>
 80005ba:	2301      	movs	r3, #1
 80005bc:	1a1b      	subs	r3, r3, r0
 80005be:	2b1b      	cmp	r3, #27
 80005c0:	dd00      	ble.n	80005c4 <__aeabi_fdiv+0x1d0>
 80005c2:	e76d      	b.n	80004a0 <__aeabi_fdiv+0xac>
 80005c4:	0021      	movs	r1, r4
 80005c6:	379e      	adds	r7, #158	@ 0x9e
 80005c8:	40d9      	lsrs	r1, r3
 80005ca:	40bc      	lsls	r4, r7
 80005cc:	000b      	movs	r3, r1
 80005ce:	1e61      	subs	r1, r4, #1
 80005d0:	418c      	sbcs	r4, r1
 80005d2:	4323      	orrs	r3, r4
 80005d4:	0759      	lsls	r1, r3, #29
 80005d6:	d004      	beq.n	80005e2 <__aeabi_fdiv+0x1ee>
 80005d8:	210f      	movs	r1, #15
 80005da:	4019      	ands	r1, r3
 80005dc:	2904      	cmp	r1, #4
 80005de:	d000      	beq.n	80005e2 <__aeabi_fdiv+0x1ee>
 80005e0:	3304      	adds	r3, #4
 80005e2:	0159      	lsls	r1, r3, #5
 80005e4:	d413      	bmi.n	800060e <__aeabi_fdiv+0x21a>
 80005e6:	019b      	lsls	r3, r3, #6
 80005e8:	2000      	movs	r0, #0
 80005ea:	0a5c      	lsrs	r4, r3, #9
 80005ec:	e75a      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 80005ee:	231a      	movs	r3, #26
 80005f0:	2401      	movs	r4, #1
 80005f2:	1a2d      	subs	r5, r5, r0
 80005f4:	e7d0      	b.n	8000598 <__aeabi_fdiv+0x1a4>
 80005f6:	1e98      	subs	r0, r3, #2
 80005f8:	4243      	negs	r3, r0
 80005fa:	4158      	adcs	r0, r3
 80005fc:	4240      	negs	r0, r0
 80005fe:	0032      	movs	r2, r6
 8000600:	2400      	movs	r4, #0
 8000602:	b2c0      	uxtb	r0, r0
 8000604:	e74e      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 8000606:	4642      	mov	r2, r8
 8000608:	20ff      	movs	r0, #255	@ 0xff
 800060a:	2400      	movs	r4, #0
 800060c:	e74a      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 800060e:	2001      	movs	r0, #1
 8000610:	2400      	movs	r4, #0
 8000612:	e747      	b.n	80004a4 <__aeabi_fdiv+0xb0>
 8000614:	08004da8 	.word	0x08004da8
 8000618:	08004de8 	.word	0x08004de8
 800061c:	f7ffffff 	.word	0xf7ffffff

08000620 <__aeabi_i2f>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	2800      	cmp	r0, #0
 8000624:	d012      	beq.n	800064c <__aeabi_i2f+0x2c>
 8000626:	17c3      	asrs	r3, r0, #31
 8000628:	18c5      	adds	r5, r0, r3
 800062a:	405d      	eors	r5, r3
 800062c:	0fc4      	lsrs	r4, r0, #31
 800062e:	0028      	movs	r0, r5
 8000630:	f000 ffee 	bl	8001610 <__clzsi2>
 8000634:	239e      	movs	r3, #158	@ 0x9e
 8000636:	1a1b      	subs	r3, r3, r0
 8000638:	2b96      	cmp	r3, #150	@ 0x96
 800063a:	dc0f      	bgt.n	800065c <__aeabi_i2f+0x3c>
 800063c:	2808      	cmp	r0, #8
 800063e:	d038      	beq.n	80006b2 <__aeabi_i2f+0x92>
 8000640:	3808      	subs	r0, #8
 8000642:	4085      	lsls	r5, r0
 8000644:	026d      	lsls	r5, r5, #9
 8000646:	0a6d      	lsrs	r5, r5, #9
 8000648:	b2d8      	uxtb	r0, r3
 800064a:	e002      	b.n	8000652 <__aeabi_i2f+0x32>
 800064c:	2400      	movs	r4, #0
 800064e:	2000      	movs	r0, #0
 8000650:	2500      	movs	r5, #0
 8000652:	05c0      	lsls	r0, r0, #23
 8000654:	4328      	orrs	r0, r5
 8000656:	07e4      	lsls	r4, r4, #31
 8000658:	4320      	orrs	r0, r4
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	2b99      	cmp	r3, #153	@ 0x99
 800065e:	dc14      	bgt.n	800068a <__aeabi_i2f+0x6a>
 8000660:	1f42      	subs	r2, r0, #5
 8000662:	4095      	lsls	r5, r2
 8000664:	002a      	movs	r2, r5
 8000666:	4915      	ldr	r1, [pc, #84]	@ (80006bc <__aeabi_i2f+0x9c>)
 8000668:	4011      	ands	r1, r2
 800066a:	0755      	lsls	r5, r2, #29
 800066c:	d01c      	beq.n	80006a8 <__aeabi_i2f+0x88>
 800066e:	250f      	movs	r5, #15
 8000670:	402a      	ands	r2, r5
 8000672:	2a04      	cmp	r2, #4
 8000674:	d018      	beq.n	80006a8 <__aeabi_i2f+0x88>
 8000676:	3104      	adds	r1, #4
 8000678:	08ca      	lsrs	r2, r1, #3
 800067a:	0149      	lsls	r1, r1, #5
 800067c:	d515      	bpl.n	80006aa <__aeabi_i2f+0x8a>
 800067e:	239f      	movs	r3, #159	@ 0x9f
 8000680:	0252      	lsls	r2, r2, #9
 8000682:	1a18      	subs	r0, r3, r0
 8000684:	0a55      	lsrs	r5, r2, #9
 8000686:	b2c0      	uxtb	r0, r0
 8000688:	e7e3      	b.n	8000652 <__aeabi_i2f+0x32>
 800068a:	2205      	movs	r2, #5
 800068c:	0029      	movs	r1, r5
 800068e:	1a12      	subs	r2, r2, r0
 8000690:	40d1      	lsrs	r1, r2
 8000692:	0002      	movs	r2, r0
 8000694:	321b      	adds	r2, #27
 8000696:	4095      	lsls	r5, r2
 8000698:	002a      	movs	r2, r5
 800069a:	1e55      	subs	r5, r2, #1
 800069c:	41aa      	sbcs	r2, r5
 800069e:	430a      	orrs	r2, r1
 80006a0:	4906      	ldr	r1, [pc, #24]	@ (80006bc <__aeabi_i2f+0x9c>)
 80006a2:	4011      	ands	r1, r2
 80006a4:	0755      	lsls	r5, r2, #29
 80006a6:	d1e2      	bne.n	800066e <__aeabi_i2f+0x4e>
 80006a8:	08ca      	lsrs	r2, r1, #3
 80006aa:	0252      	lsls	r2, r2, #9
 80006ac:	0a55      	lsrs	r5, r2, #9
 80006ae:	b2d8      	uxtb	r0, r3
 80006b0:	e7cf      	b.n	8000652 <__aeabi_i2f+0x32>
 80006b2:	026d      	lsls	r5, r5, #9
 80006b4:	0a6d      	lsrs	r5, r5, #9
 80006b6:	308e      	adds	r0, #142	@ 0x8e
 80006b8:	e7cb      	b.n	8000652 <__aeabi_i2f+0x32>
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	fbffffff 	.word	0xfbffffff

080006c0 <__aeabi_dadd>:
 80006c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006c2:	464f      	mov	r7, r9
 80006c4:	4646      	mov	r6, r8
 80006c6:	46d6      	mov	lr, sl
 80006c8:	b5c0      	push	{r6, r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	9000      	str	r0, [sp, #0]
 80006ce:	9101      	str	r1, [sp, #4]
 80006d0:	030e      	lsls	r6, r1, #12
 80006d2:	004c      	lsls	r4, r1, #1
 80006d4:	0fcd      	lsrs	r5, r1, #31
 80006d6:	0a71      	lsrs	r1, r6, #9
 80006d8:	9e00      	ldr	r6, [sp, #0]
 80006da:	005f      	lsls	r7, r3, #1
 80006dc:	0f76      	lsrs	r6, r6, #29
 80006de:	430e      	orrs	r6, r1
 80006e0:	9900      	ldr	r1, [sp, #0]
 80006e2:	9200      	str	r2, [sp, #0]
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	00c9      	lsls	r1, r1, #3
 80006e8:	4689      	mov	r9, r1
 80006ea:	0319      	lsls	r1, r3, #12
 80006ec:	0d7b      	lsrs	r3, r7, #21
 80006ee:	4698      	mov	r8, r3
 80006f0:	9b01      	ldr	r3, [sp, #4]
 80006f2:	0a49      	lsrs	r1, r1, #9
 80006f4:	0fdb      	lsrs	r3, r3, #31
 80006f6:	469c      	mov	ip, r3
 80006f8:	9b00      	ldr	r3, [sp, #0]
 80006fa:	9a00      	ldr	r2, [sp, #0]
 80006fc:	0f5b      	lsrs	r3, r3, #29
 80006fe:	430b      	orrs	r3, r1
 8000700:	4641      	mov	r1, r8
 8000702:	0d64      	lsrs	r4, r4, #21
 8000704:	00d2      	lsls	r2, r2, #3
 8000706:	1a61      	subs	r1, r4, r1
 8000708:	4565      	cmp	r5, ip
 800070a:	d100      	bne.n	800070e <__aeabi_dadd+0x4e>
 800070c:	e0a6      	b.n	800085c <__aeabi_dadd+0x19c>
 800070e:	2900      	cmp	r1, #0
 8000710:	dd72      	ble.n	80007f8 <__aeabi_dadd+0x138>
 8000712:	4647      	mov	r7, r8
 8000714:	2f00      	cmp	r7, #0
 8000716:	d100      	bne.n	800071a <__aeabi_dadd+0x5a>
 8000718:	e0dd      	b.n	80008d6 <__aeabi_dadd+0x216>
 800071a:	4fcc      	ldr	r7, [pc, #816]	@ (8000a4c <__aeabi_dadd+0x38c>)
 800071c:	42bc      	cmp	r4, r7
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x62>
 8000720:	e19a      	b.n	8000a58 <__aeabi_dadd+0x398>
 8000722:	2701      	movs	r7, #1
 8000724:	2938      	cmp	r1, #56	@ 0x38
 8000726:	dc17      	bgt.n	8000758 <__aeabi_dadd+0x98>
 8000728:	2780      	movs	r7, #128	@ 0x80
 800072a:	043f      	lsls	r7, r7, #16
 800072c:	433b      	orrs	r3, r7
 800072e:	291f      	cmp	r1, #31
 8000730:	dd00      	ble.n	8000734 <__aeabi_dadd+0x74>
 8000732:	e1dd      	b.n	8000af0 <__aeabi_dadd+0x430>
 8000734:	2720      	movs	r7, #32
 8000736:	1a78      	subs	r0, r7, r1
 8000738:	001f      	movs	r7, r3
 800073a:	4087      	lsls	r7, r0
 800073c:	46ba      	mov	sl, r7
 800073e:	0017      	movs	r7, r2
 8000740:	40cf      	lsrs	r7, r1
 8000742:	4684      	mov	ip, r0
 8000744:	0038      	movs	r0, r7
 8000746:	4657      	mov	r7, sl
 8000748:	4307      	orrs	r7, r0
 800074a:	4660      	mov	r0, ip
 800074c:	4082      	lsls	r2, r0
 800074e:	40cb      	lsrs	r3, r1
 8000750:	1e50      	subs	r0, r2, #1
 8000752:	4182      	sbcs	r2, r0
 8000754:	1af6      	subs	r6, r6, r3
 8000756:	4317      	orrs	r7, r2
 8000758:	464b      	mov	r3, r9
 800075a:	1bdf      	subs	r7, r3, r7
 800075c:	45b9      	cmp	r9, r7
 800075e:	4180      	sbcs	r0, r0
 8000760:	4240      	negs	r0, r0
 8000762:	1a36      	subs	r6, r6, r0
 8000764:	0233      	lsls	r3, r6, #8
 8000766:	d400      	bmi.n	800076a <__aeabi_dadd+0xaa>
 8000768:	e0ff      	b.n	800096a <__aeabi_dadd+0x2aa>
 800076a:	0276      	lsls	r6, r6, #9
 800076c:	0a76      	lsrs	r6, r6, #9
 800076e:	2e00      	cmp	r6, #0
 8000770:	d100      	bne.n	8000774 <__aeabi_dadd+0xb4>
 8000772:	e13c      	b.n	80009ee <__aeabi_dadd+0x32e>
 8000774:	0030      	movs	r0, r6
 8000776:	f000 ff4b 	bl	8001610 <__clzsi2>
 800077a:	0003      	movs	r3, r0
 800077c:	3b08      	subs	r3, #8
 800077e:	2120      	movs	r1, #32
 8000780:	0038      	movs	r0, r7
 8000782:	1aca      	subs	r2, r1, r3
 8000784:	40d0      	lsrs	r0, r2
 8000786:	409e      	lsls	r6, r3
 8000788:	0002      	movs	r2, r0
 800078a:	409f      	lsls	r7, r3
 800078c:	4332      	orrs	r2, r6
 800078e:	429c      	cmp	r4, r3
 8000790:	dd00      	ble.n	8000794 <__aeabi_dadd+0xd4>
 8000792:	e1a6      	b.n	8000ae2 <__aeabi_dadd+0x422>
 8000794:	1b18      	subs	r0, r3, r4
 8000796:	3001      	adds	r0, #1
 8000798:	1a09      	subs	r1, r1, r0
 800079a:	003e      	movs	r6, r7
 800079c:	408f      	lsls	r7, r1
 800079e:	40c6      	lsrs	r6, r0
 80007a0:	1e7b      	subs	r3, r7, #1
 80007a2:	419f      	sbcs	r7, r3
 80007a4:	0013      	movs	r3, r2
 80007a6:	408b      	lsls	r3, r1
 80007a8:	4337      	orrs	r7, r6
 80007aa:	431f      	orrs	r7, r3
 80007ac:	40c2      	lsrs	r2, r0
 80007ae:	003b      	movs	r3, r7
 80007b0:	0016      	movs	r6, r2
 80007b2:	2400      	movs	r4, #0
 80007b4:	4313      	orrs	r3, r2
 80007b6:	d100      	bne.n	80007ba <__aeabi_dadd+0xfa>
 80007b8:	e1df      	b.n	8000b7a <__aeabi_dadd+0x4ba>
 80007ba:	077b      	lsls	r3, r7, #29
 80007bc:	d100      	bne.n	80007c0 <__aeabi_dadd+0x100>
 80007be:	e332      	b.n	8000e26 <__aeabi_dadd+0x766>
 80007c0:	230f      	movs	r3, #15
 80007c2:	003a      	movs	r2, r7
 80007c4:	403b      	ands	r3, r7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d004      	beq.n	80007d4 <__aeabi_dadd+0x114>
 80007ca:	1d3a      	adds	r2, r7, #4
 80007cc:	42ba      	cmp	r2, r7
 80007ce:	41bf      	sbcs	r7, r7
 80007d0:	427f      	negs	r7, r7
 80007d2:	19f6      	adds	r6, r6, r7
 80007d4:	0233      	lsls	r3, r6, #8
 80007d6:	d400      	bmi.n	80007da <__aeabi_dadd+0x11a>
 80007d8:	e323      	b.n	8000e22 <__aeabi_dadd+0x762>
 80007da:	4b9c      	ldr	r3, [pc, #624]	@ (8000a4c <__aeabi_dadd+0x38c>)
 80007dc:	3401      	adds	r4, #1
 80007de:	429c      	cmp	r4, r3
 80007e0:	d100      	bne.n	80007e4 <__aeabi_dadd+0x124>
 80007e2:	e0b4      	b.n	800094e <__aeabi_dadd+0x28e>
 80007e4:	4b9a      	ldr	r3, [pc, #616]	@ (8000a50 <__aeabi_dadd+0x390>)
 80007e6:	0564      	lsls	r4, r4, #21
 80007e8:	401e      	ands	r6, r3
 80007ea:	0d64      	lsrs	r4, r4, #21
 80007ec:	0777      	lsls	r7, r6, #29
 80007ee:	08d2      	lsrs	r2, r2, #3
 80007f0:	0276      	lsls	r6, r6, #9
 80007f2:	4317      	orrs	r7, r2
 80007f4:	0b36      	lsrs	r6, r6, #12
 80007f6:	e0ac      	b.n	8000952 <__aeabi_dadd+0x292>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_dadd+0x13e>
 80007fc:	e07e      	b.n	80008fc <__aeabi_dadd+0x23c>
 80007fe:	4641      	mov	r1, r8
 8000800:	1b09      	subs	r1, r1, r4
 8000802:	2c00      	cmp	r4, #0
 8000804:	d000      	beq.n	8000808 <__aeabi_dadd+0x148>
 8000806:	e160      	b.n	8000aca <__aeabi_dadd+0x40a>
 8000808:	0034      	movs	r4, r6
 800080a:	4648      	mov	r0, r9
 800080c:	4304      	orrs	r4, r0
 800080e:	d100      	bne.n	8000812 <__aeabi_dadd+0x152>
 8000810:	e1c9      	b.n	8000ba6 <__aeabi_dadd+0x4e6>
 8000812:	1e4c      	subs	r4, r1, #1
 8000814:	2901      	cmp	r1, #1
 8000816:	d100      	bne.n	800081a <__aeabi_dadd+0x15a>
 8000818:	e22e      	b.n	8000c78 <__aeabi_dadd+0x5b8>
 800081a:	4d8c      	ldr	r5, [pc, #560]	@ (8000a4c <__aeabi_dadd+0x38c>)
 800081c:	42a9      	cmp	r1, r5
 800081e:	d100      	bne.n	8000822 <__aeabi_dadd+0x162>
 8000820:	e224      	b.n	8000c6c <__aeabi_dadd+0x5ac>
 8000822:	2701      	movs	r7, #1
 8000824:	2c38      	cmp	r4, #56	@ 0x38
 8000826:	dc11      	bgt.n	800084c <__aeabi_dadd+0x18c>
 8000828:	0021      	movs	r1, r4
 800082a:	291f      	cmp	r1, #31
 800082c:	dd00      	ble.n	8000830 <__aeabi_dadd+0x170>
 800082e:	e20b      	b.n	8000c48 <__aeabi_dadd+0x588>
 8000830:	2420      	movs	r4, #32
 8000832:	0037      	movs	r7, r6
 8000834:	4648      	mov	r0, r9
 8000836:	1a64      	subs	r4, r4, r1
 8000838:	40a7      	lsls	r7, r4
 800083a:	40c8      	lsrs	r0, r1
 800083c:	4307      	orrs	r7, r0
 800083e:	4648      	mov	r0, r9
 8000840:	40a0      	lsls	r0, r4
 8000842:	40ce      	lsrs	r6, r1
 8000844:	1e44      	subs	r4, r0, #1
 8000846:	41a0      	sbcs	r0, r4
 8000848:	1b9b      	subs	r3, r3, r6
 800084a:	4307      	orrs	r7, r0
 800084c:	1bd7      	subs	r7, r2, r7
 800084e:	42ba      	cmp	r2, r7
 8000850:	4192      	sbcs	r2, r2
 8000852:	4252      	negs	r2, r2
 8000854:	4665      	mov	r5, ip
 8000856:	4644      	mov	r4, r8
 8000858:	1a9e      	subs	r6, r3, r2
 800085a:	e783      	b.n	8000764 <__aeabi_dadd+0xa4>
 800085c:	2900      	cmp	r1, #0
 800085e:	dc00      	bgt.n	8000862 <__aeabi_dadd+0x1a2>
 8000860:	e09c      	b.n	800099c <__aeabi_dadd+0x2dc>
 8000862:	4647      	mov	r7, r8
 8000864:	2f00      	cmp	r7, #0
 8000866:	d167      	bne.n	8000938 <__aeabi_dadd+0x278>
 8000868:	001f      	movs	r7, r3
 800086a:	4317      	orrs	r7, r2
 800086c:	d100      	bne.n	8000870 <__aeabi_dadd+0x1b0>
 800086e:	e0e4      	b.n	8000a3a <__aeabi_dadd+0x37a>
 8000870:	1e48      	subs	r0, r1, #1
 8000872:	2901      	cmp	r1, #1
 8000874:	d100      	bne.n	8000878 <__aeabi_dadd+0x1b8>
 8000876:	e19b      	b.n	8000bb0 <__aeabi_dadd+0x4f0>
 8000878:	4f74      	ldr	r7, [pc, #464]	@ (8000a4c <__aeabi_dadd+0x38c>)
 800087a:	42b9      	cmp	r1, r7
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x1c0>
 800087e:	e0eb      	b.n	8000a58 <__aeabi_dadd+0x398>
 8000880:	2701      	movs	r7, #1
 8000882:	0001      	movs	r1, r0
 8000884:	2838      	cmp	r0, #56	@ 0x38
 8000886:	dc11      	bgt.n	80008ac <__aeabi_dadd+0x1ec>
 8000888:	291f      	cmp	r1, #31
 800088a:	dd00      	ble.n	800088e <__aeabi_dadd+0x1ce>
 800088c:	e1c7      	b.n	8000c1e <__aeabi_dadd+0x55e>
 800088e:	2720      	movs	r7, #32
 8000890:	1a78      	subs	r0, r7, r1
 8000892:	001f      	movs	r7, r3
 8000894:	4684      	mov	ip, r0
 8000896:	4087      	lsls	r7, r0
 8000898:	0010      	movs	r0, r2
 800089a:	40c8      	lsrs	r0, r1
 800089c:	4307      	orrs	r7, r0
 800089e:	4660      	mov	r0, ip
 80008a0:	4082      	lsls	r2, r0
 80008a2:	40cb      	lsrs	r3, r1
 80008a4:	1e50      	subs	r0, r2, #1
 80008a6:	4182      	sbcs	r2, r0
 80008a8:	18f6      	adds	r6, r6, r3
 80008aa:	4317      	orrs	r7, r2
 80008ac:	444f      	add	r7, r9
 80008ae:	454f      	cmp	r7, r9
 80008b0:	4180      	sbcs	r0, r0
 80008b2:	4240      	negs	r0, r0
 80008b4:	1836      	adds	r6, r6, r0
 80008b6:	0233      	lsls	r3, r6, #8
 80008b8:	d557      	bpl.n	800096a <__aeabi_dadd+0x2aa>
 80008ba:	4b64      	ldr	r3, [pc, #400]	@ (8000a4c <__aeabi_dadd+0x38c>)
 80008bc:	3401      	adds	r4, #1
 80008be:	429c      	cmp	r4, r3
 80008c0:	d045      	beq.n	800094e <__aeabi_dadd+0x28e>
 80008c2:	2101      	movs	r1, #1
 80008c4:	4b62      	ldr	r3, [pc, #392]	@ (8000a50 <__aeabi_dadd+0x390>)
 80008c6:	087a      	lsrs	r2, r7, #1
 80008c8:	401e      	ands	r6, r3
 80008ca:	4039      	ands	r1, r7
 80008cc:	430a      	orrs	r2, r1
 80008ce:	07f7      	lsls	r7, r6, #31
 80008d0:	4317      	orrs	r7, r2
 80008d2:	0876      	lsrs	r6, r6, #1
 80008d4:	e771      	b.n	80007ba <__aeabi_dadd+0xfa>
 80008d6:	001f      	movs	r7, r3
 80008d8:	4317      	orrs	r7, r2
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x21e>
 80008dc:	e0ad      	b.n	8000a3a <__aeabi_dadd+0x37a>
 80008de:	1e4f      	subs	r7, r1, #1
 80008e0:	46bc      	mov	ip, r7
 80008e2:	2901      	cmp	r1, #1
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x228>
 80008e6:	e182      	b.n	8000bee <__aeabi_dadd+0x52e>
 80008e8:	4f58      	ldr	r7, [pc, #352]	@ (8000a4c <__aeabi_dadd+0x38c>)
 80008ea:	42b9      	cmp	r1, r7
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x230>
 80008ee:	e190      	b.n	8000c12 <__aeabi_dadd+0x552>
 80008f0:	4661      	mov	r1, ip
 80008f2:	2701      	movs	r7, #1
 80008f4:	2938      	cmp	r1, #56	@ 0x38
 80008f6:	dd00      	ble.n	80008fa <__aeabi_dadd+0x23a>
 80008f8:	e72e      	b.n	8000758 <__aeabi_dadd+0x98>
 80008fa:	e718      	b.n	800072e <__aeabi_dadd+0x6e>
 80008fc:	4f55      	ldr	r7, [pc, #340]	@ (8000a54 <__aeabi_dadd+0x394>)
 80008fe:	1c61      	adds	r1, r4, #1
 8000900:	4239      	tst	r1, r7
 8000902:	d000      	beq.n	8000906 <__aeabi_dadd+0x246>
 8000904:	e0d0      	b.n	8000aa8 <__aeabi_dadd+0x3e8>
 8000906:	0031      	movs	r1, r6
 8000908:	4648      	mov	r0, r9
 800090a:	001f      	movs	r7, r3
 800090c:	4301      	orrs	r1, r0
 800090e:	4317      	orrs	r7, r2
 8000910:	2c00      	cmp	r4, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x256>
 8000914:	e13d      	b.n	8000b92 <__aeabi_dadd+0x4d2>
 8000916:	2900      	cmp	r1, #0
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x25c>
 800091a:	e1bc      	b.n	8000c96 <__aeabi_dadd+0x5d6>
 800091c:	2f00      	cmp	r7, #0
 800091e:	d000      	beq.n	8000922 <__aeabi_dadd+0x262>
 8000920:	e1bf      	b.n	8000ca2 <__aeabi_dadd+0x5e2>
 8000922:	464b      	mov	r3, r9
 8000924:	2100      	movs	r1, #0
 8000926:	08d8      	lsrs	r0, r3, #3
 8000928:	0777      	lsls	r7, r6, #29
 800092a:	4307      	orrs	r7, r0
 800092c:	08f0      	lsrs	r0, r6, #3
 800092e:	0306      	lsls	r6, r0, #12
 8000930:	054c      	lsls	r4, r1, #21
 8000932:	0b36      	lsrs	r6, r6, #12
 8000934:	0d64      	lsrs	r4, r4, #21
 8000936:	e00c      	b.n	8000952 <__aeabi_dadd+0x292>
 8000938:	4f44      	ldr	r7, [pc, #272]	@ (8000a4c <__aeabi_dadd+0x38c>)
 800093a:	42bc      	cmp	r4, r7
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x280>
 800093e:	e08b      	b.n	8000a58 <__aeabi_dadd+0x398>
 8000940:	2701      	movs	r7, #1
 8000942:	2938      	cmp	r1, #56	@ 0x38
 8000944:	dcb2      	bgt.n	80008ac <__aeabi_dadd+0x1ec>
 8000946:	2780      	movs	r7, #128	@ 0x80
 8000948:	043f      	lsls	r7, r7, #16
 800094a:	433b      	orrs	r3, r7
 800094c:	e79c      	b.n	8000888 <__aeabi_dadd+0x1c8>
 800094e:	2600      	movs	r6, #0
 8000950:	2700      	movs	r7, #0
 8000952:	0524      	lsls	r4, r4, #20
 8000954:	4334      	orrs	r4, r6
 8000956:	07ed      	lsls	r5, r5, #31
 8000958:	432c      	orrs	r4, r5
 800095a:	0038      	movs	r0, r7
 800095c:	0021      	movs	r1, r4
 800095e:	b002      	add	sp, #8
 8000960:	bce0      	pop	{r5, r6, r7}
 8000962:	46ba      	mov	sl, r7
 8000964:	46b1      	mov	r9, r6
 8000966:	46a8      	mov	r8, r5
 8000968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096a:	077b      	lsls	r3, r7, #29
 800096c:	d004      	beq.n	8000978 <__aeabi_dadd+0x2b8>
 800096e:	230f      	movs	r3, #15
 8000970:	403b      	ands	r3, r7
 8000972:	2b04      	cmp	r3, #4
 8000974:	d000      	beq.n	8000978 <__aeabi_dadd+0x2b8>
 8000976:	e728      	b.n	80007ca <__aeabi_dadd+0x10a>
 8000978:	08f8      	lsrs	r0, r7, #3
 800097a:	4b34      	ldr	r3, [pc, #208]	@ (8000a4c <__aeabi_dadd+0x38c>)
 800097c:	0777      	lsls	r7, r6, #29
 800097e:	4307      	orrs	r7, r0
 8000980:	08f0      	lsrs	r0, r6, #3
 8000982:	429c      	cmp	r4, r3
 8000984:	d000      	beq.n	8000988 <__aeabi_dadd+0x2c8>
 8000986:	e24a      	b.n	8000e1e <__aeabi_dadd+0x75e>
 8000988:	003b      	movs	r3, r7
 800098a:	4303      	orrs	r3, r0
 800098c:	d059      	beq.n	8000a42 <__aeabi_dadd+0x382>
 800098e:	2680      	movs	r6, #128	@ 0x80
 8000990:	0336      	lsls	r6, r6, #12
 8000992:	4306      	orrs	r6, r0
 8000994:	0336      	lsls	r6, r6, #12
 8000996:	4c2d      	ldr	r4, [pc, #180]	@ (8000a4c <__aeabi_dadd+0x38c>)
 8000998:	0b36      	lsrs	r6, r6, #12
 800099a:	e7da      	b.n	8000952 <__aeabi_dadd+0x292>
 800099c:	2900      	cmp	r1, #0
 800099e:	d061      	beq.n	8000a64 <__aeabi_dadd+0x3a4>
 80009a0:	4641      	mov	r1, r8
 80009a2:	1b09      	subs	r1, r1, r4
 80009a4:	2c00      	cmp	r4, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_dadd+0x2ea>
 80009a8:	e0b9      	b.n	8000b1e <__aeabi_dadd+0x45e>
 80009aa:	4c28      	ldr	r4, [pc, #160]	@ (8000a4c <__aeabi_dadd+0x38c>)
 80009ac:	45a0      	cmp	r8, r4
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dadd+0x2f2>
 80009b0:	e1a5      	b.n	8000cfe <__aeabi_dadd+0x63e>
 80009b2:	2701      	movs	r7, #1
 80009b4:	2938      	cmp	r1, #56	@ 0x38
 80009b6:	dc13      	bgt.n	80009e0 <__aeabi_dadd+0x320>
 80009b8:	2480      	movs	r4, #128	@ 0x80
 80009ba:	0424      	lsls	r4, r4, #16
 80009bc:	4326      	orrs	r6, r4
 80009be:	291f      	cmp	r1, #31
 80009c0:	dd00      	ble.n	80009c4 <__aeabi_dadd+0x304>
 80009c2:	e1c8      	b.n	8000d56 <__aeabi_dadd+0x696>
 80009c4:	2420      	movs	r4, #32
 80009c6:	0037      	movs	r7, r6
 80009c8:	4648      	mov	r0, r9
 80009ca:	1a64      	subs	r4, r4, r1
 80009cc:	40a7      	lsls	r7, r4
 80009ce:	40c8      	lsrs	r0, r1
 80009d0:	4307      	orrs	r7, r0
 80009d2:	4648      	mov	r0, r9
 80009d4:	40a0      	lsls	r0, r4
 80009d6:	40ce      	lsrs	r6, r1
 80009d8:	1e44      	subs	r4, r0, #1
 80009da:	41a0      	sbcs	r0, r4
 80009dc:	199b      	adds	r3, r3, r6
 80009de:	4307      	orrs	r7, r0
 80009e0:	18bf      	adds	r7, r7, r2
 80009e2:	4297      	cmp	r7, r2
 80009e4:	4192      	sbcs	r2, r2
 80009e6:	4252      	negs	r2, r2
 80009e8:	4644      	mov	r4, r8
 80009ea:	18d6      	adds	r6, r2, r3
 80009ec:	e763      	b.n	80008b6 <__aeabi_dadd+0x1f6>
 80009ee:	0038      	movs	r0, r7
 80009f0:	f000 fe0e 	bl	8001610 <__clzsi2>
 80009f4:	0003      	movs	r3, r0
 80009f6:	3318      	adds	r3, #24
 80009f8:	2b1f      	cmp	r3, #31
 80009fa:	dc00      	bgt.n	80009fe <__aeabi_dadd+0x33e>
 80009fc:	e6bf      	b.n	800077e <__aeabi_dadd+0xbe>
 80009fe:	003a      	movs	r2, r7
 8000a00:	3808      	subs	r0, #8
 8000a02:	4082      	lsls	r2, r0
 8000a04:	429c      	cmp	r4, r3
 8000a06:	dd00      	ble.n	8000a0a <__aeabi_dadd+0x34a>
 8000a08:	e083      	b.n	8000b12 <__aeabi_dadd+0x452>
 8000a0a:	1b1b      	subs	r3, r3, r4
 8000a0c:	1c58      	adds	r0, r3, #1
 8000a0e:	281f      	cmp	r0, #31
 8000a10:	dc00      	bgt.n	8000a14 <__aeabi_dadd+0x354>
 8000a12:	e1b4      	b.n	8000d7e <__aeabi_dadd+0x6be>
 8000a14:	0017      	movs	r7, r2
 8000a16:	3b1f      	subs	r3, #31
 8000a18:	40df      	lsrs	r7, r3
 8000a1a:	2820      	cmp	r0, #32
 8000a1c:	d005      	beq.n	8000a2a <__aeabi_dadd+0x36a>
 8000a1e:	2340      	movs	r3, #64	@ 0x40
 8000a20:	1a1b      	subs	r3, r3, r0
 8000a22:	409a      	lsls	r2, r3
 8000a24:	1e53      	subs	r3, r2, #1
 8000a26:	419a      	sbcs	r2, r3
 8000a28:	4317      	orrs	r7, r2
 8000a2a:	2400      	movs	r4, #0
 8000a2c:	2f00      	cmp	r7, #0
 8000a2e:	d00a      	beq.n	8000a46 <__aeabi_dadd+0x386>
 8000a30:	077b      	lsls	r3, r7, #29
 8000a32:	d000      	beq.n	8000a36 <__aeabi_dadd+0x376>
 8000a34:	e6c4      	b.n	80007c0 <__aeabi_dadd+0x100>
 8000a36:	0026      	movs	r6, r4
 8000a38:	e79e      	b.n	8000978 <__aeabi_dadd+0x2b8>
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	000c      	movs	r4, r1
 8000a3e:	08d8      	lsrs	r0, r3, #3
 8000a40:	e79b      	b.n	800097a <__aeabi_dadd+0x2ba>
 8000a42:	2700      	movs	r7, #0
 8000a44:	4c01      	ldr	r4, [pc, #4]	@ (8000a4c <__aeabi_dadd+0x38c>)
 8000a46:	2600      	movs	r6, #0
 8000a48:	e783      	b.n	8000952 <__aeabi_dadd+0x292>
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	000007ff 	.word	0x000007ff
 8000a50:	ff7fffff 	.word	0xff7fffff
 8000a54:	000007fe 	.word	0x000007fe
 8000a58:	464b      	mov	r3, r9
 8000a5a:	0777      	lsls	r7, r6, #29
 8000a5c:	08d8      	lsrs	r0, r3, #3
 8000a5e:	4307      	orrs	r7, r0
 8000a60:	08f0      	lsrs	r0, r6, #3
 8000a62:	e791      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000a64:	4fcd      	ldr	r7, [pc, #820]	@ (8000d9c <__aeabi_dadd+0x6dc>)
 8000a66:	1c61      	adds	r1, r4, #1
 8000a68:	4239      	tst	r1, r7
 8000a6a:	d16b      	bne.n	8000b44 <__aeabi_dadd+0x484>
 8000a6c:	0031      	movs	r1, r6
 8000a6e:	4648      	mov	r0, r9
 8000a70:	4301      	orrs	r1, r0
 8000a72:	2c00      	cmp	r4, #0
 8000a74:	d000      	beq.n	8000a78 <__aeabi_dadd+0x3b8>
 8000a76:	e14b      	b.n	8000d10 <__aeabi_dadd+0x650>
 8000a78:	001f      	movs	r7, r3
 8000a7a:	4317      	orrs	r7, r2
 8000a7c:	2900      	cmp	r1, #0
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dadd+0x3c2>
 8000a80:	e181      	b.n	8000d86 <__aeabi_dadd+0x6c6>
 8000a82:	2f00      	cmp	r7, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dadd+0x3c8>
 8000a86:	e74c      	b.n	8000922 <__aeabi_dadd+0x262>
 8000a88:	444a      	add	r2, r9
 8000a8a:	454a      	cmp	r2, r9
 8000a8c:	4180      	sbcs	r0, r0
 8000a8e:	18f6      	adds	r6, r6, r3
 8000a90:	4240      	negs	r0, r0
 8000a92:	1836      	adds	r6, r6, r0
 8000a94:	0233      	lsls	r3, r6, #8
 8000a96:	d500      	bpl.n	8000a9a <__aeabi_dadd+0x3da>
 8000a98:	e1b0      	b.n	8000dfc <__aeabi_dadd+0x73c>
 8000a9a:	0017      	movs	r7, r2
 8000a9c:	4691      	mov	r9, r2
 8000a9e:	4337      	orrs	r7, r6
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dadd+0x3e4>
 8000aa2:	e73e      	b.n	8000922 <__aeabi_dadd+0x262>
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	e754      	b.n	8000952 <__aeabi_dadd+0x292>
 8000aa8:	4649      	mov	r1, r9
 8000aaa:	1a89      	subs	r1, r1, r2
 8000aac:	4688      	mov	r8, r1
 8000aae:	45c1      	cmp	r9, r8
 8000ab0:	41bf      	sbcs	r7, r7
 8000ab2:	1af1      	subs	r1, r6, r3
 8000ab4:	427f      	negs	r7, r7
 8000ab6:	1bc9      	subs	r1, r1, r7
 8000ab8:	020f      	lsls	r7, r1, #8
 8000aba:	d461      	bmi.n	8000b80 <__aeabi_dadd+0x4c0>
 8000abc:	4647      	mov	r7, r8
 8000abe:	430f      	orrs	r7, r1
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_dadd+0x404>
 8000ac2:	e0bd      	b.n	8000c40 <__aeabi_dadd+0x580>
 8000ac4:	000e      	movs	r6, r1
 8000ac6:	4647      	mov	r7, r8
 8000ac8:	e651      	b.n	800076e <__aeabi_dadd+0xae>
 8000aca:	4cb5      	ldr	r4, [pc, #724]	@ (8000da0 <__aeabi_dadd+0x6e0>)
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dadd+0x412>
 8000ad0:	e100      	b.n	8000cd4 <__aeabi_dadd+0x614>
 8000ad2:	2701      	movs	r7, #1
 8000ad4:	2938      	cmp	r1, #56	@ 0x38
 8000ad6:	dd00      	ble.n	8000ada <__aeabi_dadd+0x41a>
 8000ad8:	e6b8      	b.n	800084c <__aeabi_dadd+0x18c>
 8000ada:	2480      	movs	r4, #128	@ 0x80
 8000adc:	0424      	lsls	r4, r4, #16
 8000ade:	4326      	orrs	r6, r4
 8000ae0:	e6a3      	b.n	800082a <__aeabi_dadd+0x16a>
 8000ae2:	4eb0      	ldr	r6, [pc, #704]	@ (8000da4 <__aeabi_dadd+0x6e4>)
 8000ae4:	1ae4      	subs	r4, r4, r3
 8000ae6:	4016      	ands	r6, r2
 8000ae8:	077b      	lsls	r3, r7, #29
 8000aea:	d000      	beq.n	8000aee <__aeabi_dadd+0x42e>
 8000aec:	e73f      	b.n	800096e <__aeabi_dadd+0x2ae>
 8000aee:	e743      	b.n	8000978 <__aeabi_dadd+0x2b8>
 8000af0:	000f      	movs	r7, r1
 8000af2:	0018      	movs	r0, r3
 8000af4:	3f20      	subs	r7, #32
 8000af6:	40f8      	lsrs	r0, r7
 8000af8:	4684      	mov	ip, r0
 8000afa:	2920      	cmp	r1, #32
 8000afc:	d003      	beq.n	8000b06 <__aeabi_dadd+0x446>
 8000afe:	2740      	movs	r7, #64	@ 0x40
 8000b00:	1a79      	subs	r1, r7, r1
 8000b02:	408b      	lsls	r3, r1
 8000b04:	431a      	orrs	r2, r3
 8000b06:	1e53      	subs	r3, r2, #1
 8000b08:	419a      	sbcs	r2, r3
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	0017      	movs	r7, r2
 8000b0e:	431f      	orrs	r7, r3
 8000b10:	e622      	b.n	8000758 <__aeabi_dadd+0x98>
 8000b12:	48a4      	ldr	r0, [pc, #656]	@ (8000da4 <__aeabi_dadd+0x6e4>)
 8000b14:	1ae1      	subs	r1, r4, r3
 8000b16:	4010      	ands	r0, r2
 8000b18:	0747      	lsls	r7, r0, #29
 8000b1a:	08c0      	lsrs	r0, r0, #3
 8000b1c:	e707      	b.n	800092e <__aeabi_dadd+0x26e>
 8000b1e:	0034      	movs	r4, r6
 8000b20:	4648      	mov	r0, r9
 8000b22:	4304      	orrs	r4, r0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_dadd+0x468>
 8000b26:	e0fa      	b.n	8000d1e <__aeabi_dadd+0x65e>
 8000b28:	1e4c      	subs	r4, r1, #1
 8000b2a:	2901      	cmp	r1, #1
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0x470>
 8000b2e:	e0d7      	b.n	8000ce0 <__aeabi_dadd+0x620>
 8000b30:	4f9b      	ldr	r7, [pc, #620]	@ (8000da0 <__aeabi_dadd+0x6e0>)
 8000b32:	42b9      	cmp	r1, r7
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x478>
 8000b36:	e0e2      	b.n	8000cfe <__aeabi_dadd+0x63e>
 8000b38:	2701      	movs	r7, #1
 8000b3a:	2c38      	cmp	r4, #56	@ 0x38
 8000b3c:	dd00      	ble.n	8000b40 <__aeabi_dadd+0x480>
 8000b3e:	e74f      	b.n	80009e0 <__aeabi_dadd+0x320>
 8000b40:	0021      	movs	r1, r4
 8000b42:	e73c      	b.n	80009be <__aeabi_dadd+0x2fe>
 8000b44:	4c96      	ldr	r4, [pc, #600]	@ (8000da0 <__aeabi_dadd+0x6e0>)
 8000b46:	42a1      	cmp	r1, r4
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x48c>
 8000b4a:	e0dd      	b.n	8000d08 <__aeabi_dadd+0x648>
 8000b4c:	444a      	add	r2, r9
 8000b4e:	454a      	cmp	r2, r9
 8000b50:	4180      	sbcs	r0, r0
 8000b52:	18f3      	adds	r3, r6, r3
 8000b54:	4240      	negs	r0, r0
 8000b56:	1818      	adds	r0, r3, r0
 8000b58:	07c7      	lsls	r7, r0, #31
 8000b5a:	0852      	lsrs	r2, r2, #1
 8000b5c:	4317      	orrs	r7, r2
 8000b5e:	0846      	lsrs	r6, r0, #1
 8000b60:	0752      	lsls	r2, r2, #29
 8000b62:	d005      	beq.n	8000b70 <__aeabi_dadd+0x4b0>
 8000b64:	220f      	movs	r2, #15
 8000b66:	000c      	movs	r4, r1
 8000b68:	403a      	ands	r2, r7
 8000b6a:	2a04      	cmp	r2, #4
 8000b6c:	d000      	beq.n	8000b70 <__aeabi_dadd+0x4b0>
 8000b6e:	e62c      	b.n	80007ca <__aeabi_dadd+0x10a>
 8000b70:	0776      	lsls	r6, r6, #29
 8000b72:	08ff      	lsrs	r7, r7, #3
 8000b74:	4337      	orrs	r7, r6
 8000b76:	0900      	lsrs	r0, r0, #4
 8000b78:	e6d9      	b.n	800092e <__aeabi_dadd+0x26e>
 8000b7a:	2700      	movs	r7, #0
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	e6e8      	b.n	8000952 <__aeabi_dadd+0x292>
 8000b80:	4649      	mov	r1, r9
 8000b82:	1a57      	subs	r7, r2, r1
 8000b84:	42ba      	cmp	r2, r7
 8000b86:	4192      	sbcs	r2, r2
 8000b88:	1b9e      	subs	r6, r3, r6
 8000b8a:	4252      	negs	r2, r2
 8000b8c:	4665      	mov	r5, ip
 8000b8e:	1ab6      	subs	r6, r6, r2
 8000b90:	e5ed      	b.n	800076e <__aeabi_dadd+0xae>
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d000      	beq.n	8000b98 <__aeabi_dadd+0x4d8>
 8000b96:	e0c6      	b.n	8000d26 <__aeabi_dadd+0x666>
 8000b98:	2f00      	cmp	r7, #0
 8000b9a:	d167      	bne.n	8000c6c <__aeabi_dadd+0x5ac>
 8000b9c:	2680      	movs	r6, #128	@ 0x80
 8000b9e:	2500      	movs	r5, #0
 8000ba0:	4c7f      	ldr	r4, [pc, #508]	@ (8000da0 <__aeabi_dadd+0x6e0>)
 8000ba2:	0336      	lsls	r6, r6, #12
 8000ba4:	e6d5      	b.n	8000952 <__aeabi_dadd+0x292>
 8000ba6:	4665      	mov	r5, ip
 8000ba8:	000c      	movs	r4, r1
 8000baa:	001e      	movs	r6, r3
 8000bac:	08d0      	lsrs	r0, r2, #3
 8000bae:	e6e4      	b.n	800097a <__aeabi_dadd+0x2ba>
 8000bb0:	444a      	add	r2, r9
 8000bb2:	454a      	cmp	r2, r9
 8000bb4:	4180      	sbcs	r0, r0
 8000bb6:	18f3      	adds	r3, r6, r3
 8000bb8:	4240      	negs	r0, r0
 8000bba:	1818      	adds	r0, r3, r0
 8000bbc:	0011      	movs	r1, r2
 8000bbe:	0203      	lsls	r3, r0, #8
 8000bc0:	d400      	bmi.n	8000bc4 <__aeabi_dadd+0x504>
 8000bc2:	e096      	b.n	8000cf2 <__aeabi_dadd+0x632>
 8000bc4:	4b77      	ldr	r3, [pc, #476]	@ (8000da4 <__aeabi_dadd+0x6e4>)
 8000bc6:	0849      	lsrs	r1, r1, #1
 8000bc8:	4018      	ands	r0, r3
 8000bca:	07c3      	lsls	r3, r0, #31
 8000bcc:	430b      	orrs	r3, r1
 8000bce:	0844      	lsrs	r4, r0, #1
 8000bd0:	0749      	lsls	r1, r1, #29
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dadd+0x516>
 8000bd4:	e129      	b.n	8000e2a <__aeabi_dadd+0x76a>
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	401a      	ands	r2, r3
 8000bda:	2a04      	cmp	r2, #4
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x520>
 8000bde:	e0ea      	b.n	8000db6 <__aeabi_dadd+0x6f6>
 8000be0:	1d1f      	adds	r7, r3, #4
 8000be2:	429f      	cmp	r7, r3
 8000be4:	41b6      	sbcs	r6, r6
 8000be6:	4276      	negs	r6, r6
 8000be8:	1936      	adds	r6, r6, r4
 8000bea:	2402      	movs	r4, #2
 8000bec:	e6c4      	b.n	8000978 <__aeabi_dadd+0x2b8>
 8000bee:	4649      	mov	r1, r9
 8000bf0:	1a8f      	subs	r7, r1, r2
 8000bf2:	45b9      	cmp	r9, r7
 8000bf4:	4180      	sbcs	r0, r0
 8000bf6:	1af6      	subs	r6, r6, r3
 8000bf8:	4240      	negs	r0, r0
 8000bfa:	1a36      	subs	r6, r6, r0
 8000bfc:	0233      	lsls	r3, r6, #8
 8000bfe:	d406      	bmi.n	8000c0e <__aeabi_dadd+0x54e>
 8000c00:	0773      	lsls	r3, r6, #29
 8000c02:	08ff      	lsrs	r7, r7, #3
 8000c04:	2101      	movs	r1, #1
 8000c06:	431f      	orrs	r7, r3
 8000c08:	08f0      	lsrs	r0, r6, #3
 8000c0a:	e690      	b.n	800092e <__aeabi_dadd+0x26e>
 8000c0c:	4665      	mov	r5, ip
 8000c0e:	2401      	movs	r4, #1
 8000c10:	e5ab      	b.n	800076a <__aeabi_dadd+0xaa>
 8000c12:	464b      	mov	r3, r9
 8000c14:	0777      	lsls	r7, r6, #29
 8000c16:	08d8      	lsrs	r0, r3, #3
 8000c18:	4307      	orrs	r7, r0
 8000c1a:	08f0      	lsrs	r0, r6, #3
 8000c1c:	e6b4      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000c1e:	000f      	movs	r7, r1
 8000c20:	0018      	movs	r0, r3
 8000c22:	3f20      	subs	r7, #32
 8000c24:	40f8      	lsrs	r0, r7
 8000c26:	4684      	mov	ip, r0
 8000c28:	2920      	cmp	r1, #32
 8000c2a:	d003      	beq.n	8000c34 <__aeabi_dadd+0x574>
 8000c2c:	2740      	movs	r7, #64	@ 0x40
 8000c2e:	1a79      	subs	r1, r7, r1
 8000c30:	408b      	lsls	r3, r1
 8000c32:	431a      	orrs	r2, r3
 8000c34:	1e53      	subs	r3, r2, #1
 8000c36:	419a      	sbcs	r2, r3
 8000c38:	4663      	mov	r3, ip
 8000c3a:	0017      	movs	r7, r2
 8000c3c:	431f      	orrs	r7, r3
 8000c3e:	e635      	b.n	80008ac <__aeabi_dadd+0x1ec>
 8000c40:	2500      	movs	r5, #0
 8000c42:	2400      	movs	r4, #0
 8000c44:	2600      	movs	r6, #0
 8000c46:	e684      	b.n	8000952 <__aeabi_dadd+0x292>
 8000c48:	000c      	movs	r4, r1
 8000c4a:	0035      	movs	r5, r6
 8000c4c:	3c20      	subs	r4, #32
 8000c4e:	40e5      	lsrs	r5, r4
 8000c50:	2920      	cmp	r1, #32
 8000c52:	d005      	beq.n	8000c60 <__aeabi_dadd+0x5a0>
 8000c54:	2440      	movs	r4, #64	@ 0x40
 8000c56:	1a61      	subs	r1, r4, r1
 8000c58:	408e      	lsls	r6, r1
 8000c5a:	4649      	mov	r1, r9
 8000c5c:	4331      	orrs	r1, r6
 8000c5e:	4689      	mov	r9, r1
 8000c60:	4648      	mov	r0, r9
 8000c62:	1e41      	subs	r1, r0, #1
 8000c64:	4188      	sbcs	r0, r1
 8000c66:	0007      	movs	r7, r0
 8000c68:	432f      	orrs	r7, r5
 8000c6a:	e5ef      	b.n	800084c <__aeabi_dadd+0x18c>
 8000c6c:	08d2      	lsrs	r2, r2, #3
 8000c6e:	075f      	lsls	r7, r3, #29
 8000c70:	4665      	mov	r5, ip
 8000c72:	4317      	orrs	r7, r2
 8000c74:	08d8      	lsrs	r0, r3, #3
 8000c76:	e687      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000c78:	1a17      	subs	r7, r2, r0
 8000c7a:	42ba      	cmp	r2, r7
 8000c7c:	4192      	sbcs	r2, r2
 8000c7e:	1b9e      	subs	r6, r3, r6
 8000c80:	4252      	negs	r2, r2
 8000c82:	1ab6      	subs	r6, r6, r2
 8000c84:	0233      	lsls	r3, r6, #8
 8000c86:	d4c1      	bmi.n	8000c0c <__aeabi_dadd+0x54c>
 8000c88:	0773      	lsls	r3, r6, #29
 8000c8a:	08ff      	lsrs	r7, r7, #3
 8000c8c:	4665      	mov	r5, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	431f      	orrs	r7, r3
 8000c92:	08f0      	lsrs	r0, r6, #3
 8000c94:	e64b      	b.n	800092e <__aeabi_dadd+0x26e>
 8000c96:	2f00      	cmp	r7, #0
 8000c98:	d07b      	beq.n	8000d92 <__aeabi_dadd+0x6d2>
 8000c9a:	4665      	mov	r5, ip
 8000c9c:	001e      	movs	r6, r3
 8000c9e:	4691      	mov	r9, r2
 8000ca0:	e63f      	b.n	8000922 <__aeabi_dadd+0x262>
 8000ca2:	1a81      	subs	r1, r0, r2
 8000ca4:	4688      	mov	r8, r1
 8000ca6:	45c1      	cmp	r9, r8
 8000ca8:	41a4      	sbcs	r4, r4
 8000caa:	1af1      	subs	r1, r6, r3
 8000cac:	4264      	negs	r4, r4
 8000cae:	1b09      	subs	r1, r1, r4
 8000cb0:	2480      	movs	r4, #128	@ 0x80
 8000cb2:	0424      	lsls	r4, r4, #16
 8000cb4:	4221      	tst	r1, r4
 8000cb6:	d077      	beq.n	8000da8 <__aeabi_dadd+0x6e8>
 8000cb8:	1a10      	subs	r0, r2, r0
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	4192      	sbcs	r2, r2
 8000cbe:	0007      	movs	r7, r0
 8000cc0:	1b9e      	subs	r6, r3, r6
 8000cc2:	4252      	negs	r2, r2
 8000cc4:	1ab6      	subs	r6, r6, r2
 8000cc6:	4337      	orrs	r7, r6
 8000cc8:	d000      	beq.n	8000ccc <__aeabi_dadd+0x60c>
 8000cca:	e0a0      	b.n	8000e0e <__aeabi_dadd+0x74e>
 8000ccc:	4665      	mov	r5, ip
 8000cce:	2400      	movs	r4, #0
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e63e      	b.n	8000952 <__aeabi_dadd+0x292>
 8000cd4:	075f      	lsls	r7, r3, #29
 8000cd6:	08d2      	lsrs	r2, r2, #3
 8000cd8:	4665      	mov	r5, ip
 8000cda:	4317      	orrs	r7, r2
 8000cdc:	08d8      	lsrs	r0, r3, #3
 8000cde:	e653      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000ce0:	1881      	adds	r1, r0, r2
 8000ce2:	4291      	cmp	r1, r2
 8000ce4:	4192      	sbcs	r2, r2
 8000ce6:	18f0      	adds	r0, r6, r3
 8000ce8:	4252      	negs	r2, r2
 8000cea:	1880      	adds	r0, r0, r2
 8000cec:	0203      	lsls	r3, r0, #8
 8000cee:	d500      	bpl.n	8000cf2 <__aeabi_dadd+0x632>
 8000cf0:	e768      	b.n	8000bc4 <__aeabi_dadd+0x504>
 8000cf2:	0747      	lsls	r7, r0, #29
 8000cf4:	08c9      	lsrs	r1, r1, #3
 8000cf6:	430f      	orrs	r7, r1
 8000cf8:	08c0      	lsrs	r0, r0, #3
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	e617      	b.n	800092e <__aeabi_dadd+0x26e>
 8000cfe:	08d2      	lsrs	r2, r2, #3
 8000d00:	075f      	lsls	r7, r3, #29
 8000d02:	4317      	orrs	r7, r2
 8000d04:	08d8      	lsrs	r0, r3, #3
 8000d06:	e63f      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000d08:	000c      	movs	r4, r1
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	e620      	b.n	8000952 <__aeabi_dadd+0x292>
 8000d10:	2900      	cmp	r1, #0
 8000d12:	d156      	bne.n	8000dc2 <__aeabi_dadd+0x702>
 8000d14:	075f      	lsls	r7, r3, #29
 8000d16:	08d2      	lsrs	r2, r2, #3
 8000d18:	4317      	orrs	r7, r2
 8000d1a:	08d8      	lsrs	r0, r3, #3
 8000d1c:	e634      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000d1e:	000c      	movs	r4, r1
 8000d20:	001e      	movs	r6, r3
 8000d22:	08d0      	lsrs	r0, r2, #3
 8000d24:	e629      	b.n	800097a <__aeabi_dadd+0x2ba>
 8000d26:	08c1      	lsrs	r1, r0, #3
 8000d28:	0770      	lsls	r0, r6, #29
 8000d2a:	4301      	orrs	r1, r0
 8000d2c:	08f0      	lsrs	r0, r6, #3
 8000d2e:	2f00      	cmp	r7, #0
 8000d30:	d062      	beq.n	8000df8 <__aeabi_dadd+0x738>
 8000d32:	2480      	movs	r4, #128	@ 0x80
 8000d34:	0324      	lsls	r4, r4, #12
 8000d36:	4220      	tst	r0, r4
 8000d38:	d007      	beq.n	8000d4a <__aeabi_dadd+0x68a>
 8000d3a:	08de      	lsrs	r6, r3, #3
 8000d3c:	4226      	tst	r6, r4
 8000d3e:	d104      	bne.n	8000d4a <__aeabi_dadd+0x68a>
 8000d40:	4665      	mov	r5, ip
 8000d42:	0030      	movs	r0, r6
 8000d44:	08d1      	lsrs	r1, r2, #3
 8000d46:	075b      	lsls	r3, r3, #29
 8000d48:	4319      	orrs	r1, r3
 8000d4a:	0f4f      	lsrs	r7, r1, #29
 8000d4c:	00c9      	lsls	r1, r1, #3
 8000d4e:	08c9      	lsrs	r1, r1, #3
 8000d50:	077f      	lsls	r7, r7, #29
 8000d52:	430f      	orrs	r7, r1
 8000d54:	e618      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000d56:	000c      	movs	r4, r1
 8000d58:	0030      	movs	r0, r6
 8000d5a:	3c20      	subs	r4, #32
 8000d5c:	40e0      	lsrs	r0, r4
 8000d5e:	4684      	mov	ip, r0
 8000d60:	2920      	cmp	r1, #32
 8000d62:	d005      	beq.n	8000d70 <__aeabi_dadd+0x6b0>
 8000d64:	2440      	movs	r4, #64	@ 0x40
 8000d66:	1a61      	subs	r1, r4, r1
 8000d68:	408e      	lsls	r6, r1
 8000d6a:	4649      	mov	r1, r9
 8000d6c:	4331      	orrs	r1, r6
 8000d6e:	4689      	mov	r9, r1
 8000d70:	4648      	mov	r0, r9
 8000d72:	1e41      	subs	r1, r0, #1
 8000d74:	4188      	sbcs	r0, r1
 8000d76:	4661      	mov	r1, ip
 8000d78:	0007      	movs	r7, r0
 8000d7a:	430f      	orrs	r7, r1
 8000d7c:	e630      	b.n	80009e0 <__aeabi_dadd+0x320>
 8000d7e:	2120      	movs	r1, #32
 8000d80:	2700      	movs	r7, #0
 8000d82:	1a09      	subs	r1, r1, r0
 8000d84:	e50e      	b.n	80007a4 <__aeabi_dadd+0xe4>
 8000d86:	001e      	movs	r6, r3
 8000d88:	2f00      	cmp	r7, #0
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_dadd+0x6ce>
 8000d8c:	e522      	b.n	80007d4 <__aeabi_dadd+0x114>
 8000d8e:	2400      	movs	r4, #0
 8000d90:	e758      	b.n	8000c44 <__aeabi_dadd+0x584>
 8000d92:	2500      	movs	r5, #0
 8000d94:	2400      	movs	r4, #0
 8000d96:	2600      	movs	r6, #0
 8000d98:	e5db      	b.n	8000952 <__aeabi_dadd+0x292>
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	000007fe 	.word	0x000007fe
 8000da0:	000007ff 	.word	0x000007ff
 8000da4:	ff7fffff 	.word	0xff7fffff
 8000da8:	4647      	mov	r7, r8
 8000daa:	430f      	orrs	r7, r1
 8000dac:	d100      	bne.n	8000db0 <__aeabi_dadd+0x6f0>
 8000dae:	e747      	b.n	8000c40 <__aeabi_dadd+0x580>
 8000db0:	000e      	movs	r6, r1
 8000db2:	46c1      	mov	r9, r8
 8000db4:	e5b5      	b.n	8000922 <__aeabi_dadd+0x262>
 8000db6:	08df      	lsrs	r7, r3, #3
 8000db8:	0764      	lsls	r4, r4, #29
 8000dba:	2102      	movs	r1, #2
 8000dbc:	4327      	orrs	r7, r4
 8000dbe:	0900      	lsrs	r0, r0, #4
 8000dc0:	e5b5      	b.n	800092e <__aeabi_dadd+0x26e>
 8000dc2:	0019      	movs	r1, r3
 8000dc4:	08c0      	lsrs	r0, r0, #3
 8000dc6:	0777      	lsls	r7, r6, #29
 8000dc8:	4307      	orrs	r7, r0
 8000dca:	4311      	orrs	r1, r2
 8000dcc:	08f0      	lsrs	r0, r6, #3
 8000dce:	2900      	cmp	r1, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_dadd+0x714>
 8000dd2:	e5d9      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000dd4:	2180      	movs	r1, #128	@ 0x80
 8000dd6:	0309      	lsls	r1, r1, #12
 8000dd8:	4208      	tst	r0, r1
 8000dda:	d007      	beq.n	8000dec <__aeabi_dadd+0x72c>
 8000ddc:	08dc      	lsrs	r4, r3, #3
 8000dde:	420c      	tst	r4, r1
 8000de0:	d104      	bne.n	8000dec <__aeabi_dadd+0x72c>
 8000de2:	08d2      	lsrs	r2, r2, #3
 8000de4:	075b      	lsls	r3, r3, #29
 8000de6:	431a      	orrs	r2, r3
 8000de8:	0017      	movs	r7, r2
 8000dea:	0020      	movs	r0, r4
 8000dec:	0f7b      	lsrs	r3, r7, #29
 8000dee:	00ff      	lsls	r7, r7, #3
 8000df0:	08ff      	lsrs	r7, r7, #3
 8000df2:	075b      	lsls	r3, r3, #29
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e5c7      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000df8:	000f      	movs	r7, r1
 8000dfa:	e5c5      	b.n	8000988 <__aeabi_dadd+0x2c8>
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <__aeabi_dadd+0x788>)
 8000dfe:	08d2      	lsrs	r2, r2, #3
 8000e00:	4033      	ands	r3, r6
 8000e02:	075f      	lsls	r7, r3, #29
 8000e04:	025b      	lsls	r3, r3, #9
 8000e06:	2401      	movs	r4, #1
 8000e08:	4317      	orrs	r7, r2
 8000e0a:	0b1e      	lsrs	r6, r3, #12
 8000e0c:	e5a1      	b.n	8000952 <__aeabi_dadd+0x292>
 8000e0e:	4226      	tst	r6, r4
 8000e10:	d012      	beq.n	8000e38 <__aeabi_dadd+0x778>
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <__aeabi_dadd+0x788>)
 8000e14:	4665      	mov	r5, ip
 8000e16:	0002      	movs	r2, r0
 8000e18:	2401      	movs	r4, #1
 8000e1a:	401e      	ands	r6, r3
 8000e1c:	e4e6      	b.n	80007ec <__aeabi_dadd+0x12c>
 8000e1e:	0021      	movs	r1, r4
 8000e20:	e585      	b.n	800092e <__aeabi_dadd+0x26e>
 8000e22:	0017      	movs	r7, r2
 8000e24:	e5a8      	b.n	8000978 <__aeabi_dadd+0x2b8>
 8000e26:	003a      	movs	r2, r7
 8000e28:	e4d4      	b.n	80007d4 <__aeabi_dadd+0x114>
 8000e2a:	08db      	lsrs	r3, r3, #3
 8000e2c:	0764      	lsls	r4, r4, #29
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	0027      	movs	r7, r4
 8000e32:	2102      	movs	r1, #2
 8000e34:	0900      	lsrs	r0, r0, #4
 8000e36:	e57a      	b.n	800092e <__aeabi_dadd+0x26e>
 8000e38:	08c0      	lsrs	r0, r0, #3
 8000e3a:	0777      	lsls	r7, r6, #29
 8000e3c:	4307      	orrs	r7, r0
 8000e3e:	4665      	mov	r5, ip
 8000e40:	2100      	movs	r1, #0
 8000e42:	08f0      	lsrs	r0, r6, #3
 8000e44:	e573      	b.n	800092e <__aeabi_dadd+0x26e>
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	ff7fffff 	.word	0xff7fffff

08000e4c <__aeabi_ddiv>:
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	46de      	mov	lr, fp
 8000e50:	4645      	mov	r5, r8
 8000e52:	4657      	mov	r7, sl
 8000e54:	464e      	mov	r6, r9
 8000e56:	b5e0      	push	{r5, r6, r7, lr}
 8000e58:	b087      	sub	sp, #28
 8000e5a:	9200      	str	r2, [sp, #0]
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	030b      	lsls	r3, r1, #12
 8000e60:	0b1b      	lsrs	r3, r3, #12
 8000e62:	469b      	mov	fp, r3
 8000e64:	0fca      	lsrs	r2, r1, #31
 8000e66:	004b      	lsls	r3, r1, #1
 8000e68:	0004      	movs	r4, r0
 8000e6a:	4680      	mov	r8, r0
 8000e6c:	0d5b      	lsrs	r3, r3, #21
 8000e6e:	9202      	str	r2, [sp, #8]
 8000e70:	d100      	bne.n	8000e74 <__aeabi_ddiv+0x28>
 8000e72:	e098      	b.n	8000fa6 <__aeabi_ddiv+0x15a>
 8000e74:	4a7c      	ldr	r2, [pc, #496]	@ (8001068 <__aeabi_ddiv+0x21c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d037      	beq.n	8000eea <__aeabi_ddiv+0x9e>
 8000e7a:	4659      	mov	r1, fp
 8000e7c:	0f42      	lsrs	r2, r0, #29
 8000e7e:	00c9      	lsls	r1, r1, #3
 8000e80:	430a      	orrs	r2, r1
 8000e82:	2180      	movs	r1, #128	@ 0x80
 8000e84:	0409      	lsls	r1, r1, #16
 8000e86:	4311      	orrs	r1, r2
 8000e88:	00c2      	lsls	r2, r0, #3
 8000e8a:	4690      	mov	r8, r2
 8000e8c:	4a77      	ldr	r2, [pc, #476]	@ (800106c <__aeabi_ddiv+0x220>)
 8000e8e:	4689      	mov	r9, r1
 8000e90:	4692      	mov	sl, r2
 8000e92:	449a      	add	sl, r3
 8000e94:	2300      	movs	r3, #0
 8000e96:	2400      	movs	r4, #0
 8000e98:	9303      	str	r3, [sp, #12]
 8000e9a:	9e00      	ldr	r6, [sp, #0]
 8000e9c:	9f01      	ldr	r7, [sp, #4]
 8000e9e:	033b      	lsls	r3, r7, #12
 8000ea0:	0b1b      	lsrs	r3, r3, #12
 8000ea2:	469b      	mov	fp, r3
 8000ea4:	007b      	lsls	r3, r7, #1
 8000ea6:	0030      	movs	r0, r6
 8000ea8:	0d5b      	lsrs	r3, r3, #21
 8000eaa:	0ffd      	lsrs	r5, r7, #31
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d059      	beq.n	8000f64 <__aeabi_ddiv+0x118>
 8000eb0:	4a6d      	ldr	r2, [pc, #436]	@ (8001068 <__aeabi_ddiv+0x21c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d048      	beq.n	8000f48 <__aeabi_ddiv+0xfc>
 8000eb6:	4659      	mov	r1, fp
 8000eb8:	0f72      	lsrs	r2, r6, #29
 8000eba:	00c9      	lsls	r1, r1, #3
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	2180      	movs	r1, #128	@ 0x80
 8000ec0:	0409      	lsls	r1, r1, #16
 8000ec2:	4311      	orrs	r1, r2
 8000ec4:	468b      	mov	fp, r1
 8000ec6:	4969      	ldr	r1, [pc, #420]	@ (800106c <__aeabi_ddiv+0x220>)
 8000ec8:	00f2      	lsls	r2, r6, #3
 8000eca:	468c      	mov	ip, r1
 8000ecc:	4651      	mov	r1, sl
 8000ece:	4463      	add	r3, ip
 8000ed0:	1acb      	subs	r3, r1, r3
 8000ed2:	469a      	mov	sl, r3
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	9e02      	ldr	r6, [sp, #8]
 8000ed8:	406e      	eors	r6, r5
 8000eda:	b2f6      	uxtb	r6, r6
 8000edc:	2c0f      	cmp	r4, #15
 8000ede:	d900      	bls.n	8000ee2 <__aeabi_ddiv+0x96>
 8000ee0:	e0ce      	b.n	8001080 <__aeabi_ddiv+0x234>
 8000ee2:	4b63      	ldr	r3, [pc, #396]	@ (8001070 <__aeabi_ddiv+0x224>)
 8000ee4:	00a4      	lsls	r4, r4, #2
 8000ee6:	591b      	ldr	r3, [r3, r4]
 8000ee8:	469f      	mov	pc, r3
 8000eea:	465a      	mov	r2, fp
 8000eec:	4302      	orrs	r2, r0
 8000eee:	4691      	mov	r9, r2
 8000ef0:	d000      	beq.n	8000ef4 <__aeabi_ddiv+0xa8>
 8000ef2:	e090      	b.n	8001016 <__aeabi_ddiv+0x1ca>
 8000ef4:	469a      	mov	sl, r3
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	4690      	mov	r8, r2
 8000efa:	2408      	movs	r4, #8
 8000efc:	9303      	str	r3, [sp, #12]
 8000efe:	e7cc      	b.n	8000e9a <__aeabi_ddiv+0x4e>
 8000f00:	46cb      	mov	fp, r9
 8000f02:	4642      	mov	r2, r8
 8000f04:	9d02      	ldr	r5, [sp, #8]
 8000f06:	9903      	ldr	r1, [sp, #12]
 8000f08:	2902      	cmp	r1, #2
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_ddiv+0xc2>
 8000f0c:	e1de      	b.n	80012cc <__aeabi_ddiv+0x480>
 8000f0e:	2903      	cmp	r1, #3
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0xc8>
 8000f12:	e08d      	b.n	8001030 <__aeabi_ddiv+0x1e4>
 8000f14:	2901      	cmp	r1, #1
 8000f16:	d000      	beq.n	8000f1a <__aeabi_ddiv+0xce>
 8000f18:	e179      	b.n	800120e <__aeabi_ddiv+0x3c2>
 8000f1a:	002e      	movs	r6, r5
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2400      	movs	r4, #0
 8000f22:	4690      	mov	r8, r2
 8000f24:	051b      	lsls	r3, r3, #20
 8000f26:	4323      	orrs	r3, r4
 8000f28:	07f6      	lsls	r6, r6, #31
 8000f2a:	4333      	orrs	r3, r6
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	0019      	movs	r1, r3
 8000f30:	b007      	add	sp, #28
 8000f32:	bcf0      	pop	{r4, r5, r6, r7}
 8000f34:	46bb      	mov	fp, r7
 8000f36:	46b2      	mov	sl, r6
 8000f38:	46a9      	mov	r9, r5
 8000f3a:	46a0      	mov	r8, r4
 8000f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2400      	movs	r4, #0
 8000f42:	4690      	mov	r8, r2
 8000f44:	4b48      	ldr	r3, [pc, #288]	@ (8001068 <__aeabi_ddiv+0x21c>)
 8000f46:	e7ed      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 8000f48:	465a      	mov	r2, fp
 8000f4a:	9b00      	ldr	r3, [sp, #0]
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	4b49      	ldr	r3, [pc, #292]	@ (8001074 <__aeabi_ddiv+0x228>)
 8000f50:	469c      	mov	ip, r3
 8000f52:	44e2      	add	sl, ip
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	d159      	bne.n	800100c <__aeabi_ddiv+0x1c0>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	431c      	orrs	r4, r3
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	2102      	movs	r1, #2
 8000f60:	469b      	mov	fp, r3
 8000f62:	e7b8      	b.n	8000ed6 <__aeabi_ddiv+0x8a>
 8000f64:	465a      	mov	r2, fp
 8000f66:	9b00      	ldr	r3, [sp, #0]
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	d049      	beq.n	8001000 <__aeabi_ddiv+0x1b4>
 8000f6c:	465b      	mov	r3, fp
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <__aeabi_ddiv+0x128>
 8000f72:	e19c      	b.n	80012ae <__aeabi_ddiv+0x462>
 8000f74:	4658      	mov	r0, fp
 8000f76:	f000 fb4b 	bl	8001610 <__clzsi2>
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	3a0b      	subs	r2, #11
 8000f80:	271d      	movs	r7, #29
 8000f82:	9e00      	ldr	r6, [sp, #0]
 8000f84:	1aba      	subs	r2, r7, r2
 8000f86:	0019      	movs	r1, r3
 8000f88:	4658      	mov	r0, fp
 8000f8a:	40d6      	lsrs	r6, r2
 8000f8c:	3908      	subs	r1, #8
 8000f8e:	4088      	lsls	r0, r1
 8000f90:	0032      	movs	r2, r6
 8000f92:	4302      	orrs	r2, r0
 8000f94:	4693      	mov	fp, r2
 8000f96:	9a00      	ldr	r2, [sp, #0]
 8000f98:	408a      	lsls	r2, r1
 8000f9a:	4937      	ldr	r1, [pc, #220]	@ (8001078 <__aeabi_ddiv+0x22c>)
 8000f9c:	4453      	add	r3, sl
 8000f9e:	468a      	mov	sl, r1
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	449a      	add	sl, r3
 8000fa4:	e797      	b.n	8000ed6 <__aeabi_ddiv+0x8a>
 8000fa6:	465b      	mov	r3, fp
 8000fa8:	4303      	orrs	r3, r0
 8000faa:	4699      	mov	r9, r3
 8000fac:	d021      	beq.n	8000ff2 <__aeabi_ddiv+0x1a6>
 8000fae:	465b      	mov	r3, fp
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_ddiv+0x16a>
 8000fb4:	e169      	b.n	800128a <__aeabi_ddiv+0x43e>
 8000fb6:	4658      	mov	r0, fp
 8000fb8:	f000 fb2a 	bl	8001610 <__clzsi2>
 8000fbc:	230b      	movs	r3, #11
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	469c      	mov	ip, r3
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	4484      	add	ip, r0
 8000fc6:	4666      	mov	r6, ip
 8000fc8:	231d      	movs	r3, #29
 8000fca:	1b9b      	subs	r3, r3, r6
 8000fcc:	0026      	movs	r6, r4
 8000fce:	0011      	movs	r1, r2
 8000fd0:	4658      	mov	r0, fp
 8000fd2:	40de      	lsrs	r6, r3
 8000fd4:	3908      	subs	r1, #8
 8000fd6:	4088      	lsls	r0, r1
 8000fd8:	0033      	movs	r3, r6
 8000fda:	4303      	orrs	r3, r0
 8000fdc:	4699      	mov	r9, r3
 8000fde:	0023      	movs	r3, r4
 8000fe0:	408b      	lsls	r3, r1
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	4b25      	ldr	r3, [pc, #148]	@ (800107c <__aeabi_ddiv+0x230>)
 8000fe6:	2400      	movs	r4, #0
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	469a      	mov	sl, r3
 8000fec:	2300      	movs	r3, #0
 8000fee:	9303      	str	r3, [sp, #12]
 8000ff0:	e753      	b.n	8000e9a <__aeabi_ddiv+0x4e>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	4698      	mov	r8, r3
 8000ff6:	469a      	mov	sl, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	2404      	movs	r4, #4
 8000ffc:	9303      	str	r3, [sp, #12]
 8000ffe:	e74c      	b.n	8000e9a <__aeabi_ddiv+0x4e>
 8001000:	2301      	movs	r3, #1
 8001002:	431c      	orrs	r4, r3
 8001004:	2300      	movs	r3, #0
 8001006:	2101      	movs	r1, #1
 8001008:	469b      	mov	fp, r3
 800100a:	e764      	b.n	8000ed6 <__aeabi_ddiv+0x8a>
 800100c:	2303      	movs	r3, #3
 800100e:	0032      	movs	r2, r6
 8001010:	2103      	movs	r1, #3
 8001012:	431c      	orrs	r4, r3
 8001014:	e75f      	b.n	8000ed6 <__aeabi_ddiv+0x8a>
 8001016:	469a      	mov	sl, r3
 8001018:	2303      	movs	r3, #3
 800101a:	46d9      	mov	r9, fp
 800101c:	240c      	movs	r4, #12
 800101e:	9303      	str	r3, [sp, #12]
 8001020:	e73b      	b.n	8000e9a <__aeabi_ddiv+0x4e>
 8001022:	2300      	movs	r3, #0
 8001024:	2480      	movs	r4, #128	@ 0x80
 8001026:	4698      	mov	r8, r3
 8001028:	2600      	movs	r6, #0
 800102a:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <__aeabi_ddiv+0x21c>)
 800102c:	0324      	lsls	r4, r4, #12
 800102e:	e779      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 8001030:	2480      	movs	r4, #128	@ 0x80
 8001032:	465b      	mov	r3, fp
 8001034:	0324      	lsls	r4, r4, #12
 8001036:	431c      	orrs	r4, r3
 8001038:	0324      	lsls	r4, r4, #12
 800103a:	002e      	movs	r6, r5
 800103c:	4690      	mov	r8, r2
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <__aeabi_ddiv+0x21c>)
 8001040:	0b24      	lsrs	r4, r4, #12
 8001042:	e76f      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 8001044:	2480      	movs	r4, #128	@ 0x80
 8001046:	464b      	mov	r3, r9
 8001048:	0324      	lsls	r4, r4, #12
 800104a:	4223      	tst	r3, r4
 800104c:	d002      	beq.n	8001054 <__aeabi_ddiv+0x208>
 800104e:	465b      	mov	r3, fp
 8001050:	4223      	tst	r3, r4
 8001052:	d0f0      	beq.n	8001036 <__aeabi_ddiv+0x1ea>
 8001054:	2480      	movs	r4, #128	@ 0x80
 8001056:	464b      	mov	r3, r9
 8001058:	0324      	lsls	r4, r4, #12
 800105a:	431c      	orrs	r4, r3
 800105c:	0324      	lsls	r4, r4, #12
 800105e:	9e02      	ldr	r6, [sp, #8]
 8001060:	4b01      	ldr	r3, [pc, #4]	@ (8001068 <__aeabi_ddiv+0x21c>)
 8001062:	0b24      	lsrs	r4, r4, #12
 8001064:	e75e      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	000007ff 	.word	0x000007ff
 800106c:	fffffc01 	.word	0xfffffc01
 8001070:	08004e24 	.word	0x08004e24
 8001074:	fffff801 	.word	0xfffff801
 8001078:	000003f3 	.word	0x000003f3
 800107c:	fffffc0d 	.word	0xfffffc0d
 8001080:	45cb      	cmp	fp, r9
 8001082:	d200      	bcs.n	8001086 <__aeabi_ddiv+0x23a>
 8001084:	e0f8      	b.n	8001278 <__aeabi_ddiv+0x42c>
 8001086:	d100      	bne.n	800108a <__aeabi_ddiv+0x23e>
 8001088:	e0f3      	b.n	8001272 <__aeabi_ddiv+0x426>
 800108a:	2301      	movs	r3, #1
 800108c:	425b      	negs	r3, r3
 800108e:	469c      	mov	ip, r3
 8001090:	4644      	mov	r4, r8
 8001092:	4648      	mov	r0, r9
 8001094:	2500      	movs	r5, #0
 8001096:	44e2      	add	sl, ip
 8001098:	465b      	mov	r3, fp
 800109a:	0e17      	lsrs	r7, r2, #24
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	431f      	orrs	r7, r3
 80010a0:	0c19      	lsrs	r1, r3, #16
 80010a2:	043b      	lsls	r3, r7, #16
 80010a4:	0212      	lsls	r2, r2, #8
 80010a6:	9700      	str	r7, [sp, #0]
 80010a8:	0c1f      	lsrs	r7, r3, #16
 80010aa:	4691      	mov	r9, r2
 80010ac:	9102      	str	r1, [sp, #8]
 80010ae:	9703      	str	r7, [sp, #12]
 80010b0:	f7ff f8b0 	bl	8000214 <__aeabi_uidivmod>
 80010b4:	0002      	movs	r2, r0
 80010b6:	437a      	muls	r2, r7
 80010b8:	040b      	lsls	r3, r1, #16
 80010ba:	0c21      	lsrs	r1, r4, #16
 80010bc:	4680      	mov	r8, r0
 80010be:	4319      	orrs	r1, r3
 80010c0:	428a      	cmp	r2, r1
 80010c2:	d909      	bls.n	80010d8 <__aeabi_ddiv+0x28c>
 80010c4:	9f00      	ldr	r7, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	46bc      	mov	ip, r7
 80010ca:	425b      	negs	r3, r3
 80010cc:	4461      	add	r1, ip
 80010ce:	469c      	mov	ip, r3
 80010d0:	44e0      	add	r8, ip
 80010d2:	428f      	cmp	r7, r1
 80010d4:	d800      	bhi.n	80010d8 <__aeabi_ddiv+0x28c>
 80010d6:	e15c      	b.n	8001392 <__aeabi_ddiv+0x546>
 80010d8:	1a88      	subs	r0, r1, r2
 80010da:	9902      	ldr	r1, [sp, #8]
 80010dc:	f7ff f89a 	bl	8000214 <__aeabi_uidivmod>
 80010e0:	9a03      	ldr	r2, [sp, #12]
 80010e2:	0424      	lsls	r4, r4, #16
 80010e4:	4342      	muls	r2, r0
 80010e6:	0409      	lsls	r1, r1, #16
 80010e8:	0c24      	lsrs	r4, r4, #16
 80010ea:	0003      	movs	r3, r0
 80010ec:	430c      	orrs	r4, r1
 80010ee:	42a2      	cmp	r2, r4
 80010f0:	d906      	bls.n	8001100 <__aeabi_ddiv+0x2b4>
 80010f2:	9900      	ldr	r1, [sp, #0]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	468c      	mov	ip, r1
 80010f8:	4464      	add	r4, ip
 80010fa:	42a1      	cmp	r1, r4
 80010fc:	d800      	bhi.n	8001100 <__aeabi_ddiv+0x2b4>
 80010fe:	e142      	b.n	8001386 <__aeabi_ddiv+0x53a>
 8001100:	1aa0      	subs	r0, r4, r2
 8001102:	4642      	mov	r2, r8
 8001104:	0412      	lsls	r2, r2, #16
 8001106:	431a      	orrs	r2, r3
 8001108:	4693      	mov	fp, r2
 800110a:	464b      	mov	r3, r9
 800110c:	4659      	mov	r1, fp
 800110e:	0c1b      	lsrs	r3, r3, #16
 8001110:	001f      	movs	r7, r3
 8001112:	9304      	str	r3, [sp, #16]
 8001114:	040b      	lsls	r3, r1, #16
 8001116:	4649      	mov	r1, r9
 8001118:	0409      	lsls	r1, r1, #16
 800111a:	0c09      	lsrs	r1, r1, #16
 800111c:	000c      	movs	r4, r1
 800111e:	0c1b      	lsrs	r3, r3, #16
 8001120:	435c      	muls	r4, r3
 8001122:	0c12      	lsrs	r2, r2, #16
 8001124:	437b      	muls	r3, r7
 8001126:	4688      	mov	r8, r1
 8001128:	4351      	muls	r1, r2
 800112a:	437a      	muls	r2, r7
 800112c:	0c27      	lsrs	r7, r4, #16
 800112e:	46bc      	mov	ip, r7
 8001130:	185b      	adds	r3, r3, r1
 8001132:	4463      	add	r3, ip
 8001134:	4299      	cmp	r1, r3
 8001136:	d903      	bls.n	8001140 <__aeabi_ddiv+0x2f4>
 8001138:	2180      	movs	r1, #128	@ 0x80
 800113a:	0249      	lsls	r1, r1, #9
 800113c:	468c      	mov	ip, r1
 800113e:	4462      	add	r2, ip
 8001140:	0c19      	lsrs	r1, r3, #16
 8001142:	0424      	lsls	r4, r4, #16
 8001144:	041b      	lsls	r3, r3, #16
 8001146:	0c24      	lsrs	r4, r4, #16
 8001148:	188a      	adds	r2, r1, r2
 800114a:	191c      	adds	r4, r3, r4
 800114c:	4290      	cmp	r0, r2
 800114e:	d302      	bcc.n	8001156 <__aeabi_ddiv+0x30a>
 8001150:	d116      	bne.n	8001180 <__aeabi_ddiv+0x334>
 8001152:	42a5      	cmp	r5, r4
 8001154:	d214      	bcs.n	8001180 <__aeabi_ddiv+0x334>
 8001156:	465b      	mov	r3, fp
 8001158:	9f00      	ldr	r7, [sp, #0]
 800115a:	3b01      	subs	r3, #1
 800115c:	444d      	add	r5, r9
 800115e:	9305      	str	r3, [sp, #20]
 8001160:	454d      	cmp	r5, r9
 8001162:	419b      	sbcs	r3, r3
 8001164:	46bc      	mov	ip, r7
 8001166:	425b      	negs	r3, r3
 8001168:	4463      	add	r3, ip
 800116a:	18c0      	adds	r0, r0, r3
 800116c:	4287      	cmp	r7, r0
 800116e:	d300      	bcc.n	8001172 <__aeabi_ddiv+0x326>
 8001170:	e102      	b.n	8001378 <__aeabi_ddiv+0x52c>
 8001172:	4282      	cmp	r2, r0
 8001174:	d900      	bls.n	8001178 <__aeabi_ddiv+0x32c>
 8001176:	e129      	b.n	80013cc <__aeabi_ddiv+0x580>
 8001178:	d100      	bne.n	800117c <__aeabi_ddiv+0x330>
 800117a:	e124      	b.n	80013c6 <__aeabi_ddiv+0x57a>
 800117c:	9b05      	ldr	r3, [sp, #20]
 800117e:	469b      	mov	fp, r3
 8001180:	1b2c      	subs	r4, r5, r4
 8001182:	42a5      	cmp	r5, r4
 8001184:	41ad      	sbcs	r5, r5
 8001186:	9b00      	ldr	r3, [sp, #0]
 8001188:	1a80      	subs	r0, r0, r2
 800118a:	426d      	negs	r5, r5
 800118c:	1b40      	subs	r0, r0, r5
 800118e:	4283      	cmp	r3, r0
 8001190:	d100      	bne.n	8001194 <__aeabi_ddiv+0x348>
 8001192:	e10f      	b.n	80013b4 <__aeabi_ddiv+0x568>
 8001194:	9902      	ldr	r1, [sp, #8]
 8001196:	f7ff f83d 	bl	8000214 <__aeabi_uidivmod>
 800119a:	9a03      	ldr	r2, [sp, #12]
 800119c:	040b      	lsls	r3, r1, #16
 800119e:	4342      	muls	r2, r0
 80011a0:	0c21      	lsrs	r1, r4, #16
 80011a2:	0005      	movs	r5, r0
 80011a4:	4319      	orrs	r1, r3
 80011a6:	428a      	cmp	r2, r1
 80011a8:	d900      	bls.n	80011ac <__aeabi_ddiv+0x360>
 80011aa:	e0cb      	b.n	8001344 <__aeabi_ddiv+0x4f8>
 80011ac:	1a88      	subs	r0, r1, r2
 80011ae:	9902      	ldr	r1, [sp, #8]
 80011b0:	f7ff f830 	bl	8000214 <__aeabi_uidivmod>
 80011b4:	9a03      	ldr	r2, [sp, #12]
 80011b6:	0424      	lsls	r4, r4, #16
 80011b8:	4342      	muls	r2, r0
 80011ba:	0409      	lsls	r1, r1, #16
 80011bc:	0c24      	lsrs	r4, r4, #16
 80011be:	0003      	movs	r3, r0
 80011c0:	430c      	orrs	r4, r1
 80011c2:	42a2      	cmp	r2, r4
 80011c4:	d900      	bls.n	80011c8 <__aeabi_ddiv+0x37c>
 80011c6:	e0ca      	b.n	800135e <__aeabi_ddiv+0x512>
 80011c8:	4641      	mov	r1, r8
 80011ca:	1aa4      	subs	r4, r4, r2
 80011cc:	042a      	lsls	r2, r5, #16
 80011ce:	431a      	orrs	r2, r3
 80011d0:	9f04      	ldr	r7, [sp, #16]
 80011d2:	0413      	lsls	r3, r2, #16
 80011d4:	0c1b      	lsrs	r3, r3, #16
 80011d6:	4359      	muls	r1, r3
 80011d8:	4640      	mov	r0, r8
 80011da:	437b      	muls	r3, r7
 80011dc:	469c      	mov	ip, r3
 80011de:	0c15      	lsrs	r5, r2, #16
 80011e0:	4368      	muls	r0, r5
 80011e2:	0c0b      	lsrs	r3, r1, #16
 80011e4:	4484      	add	ip, r0
 80011e6:	4463      	add	r3, ip
 80011e8:	437d      	muls	r5, r7
 80011ea:	4298      	cmp	r0, r3
 80011ec:	d903      	bls.n	80011f6 <__aeabi_ddiv+0x3aa>
 80011ee:	2080      	movs	r0, #128	@ 0x80
 80011f0:	0240      	lsls	r0, r0, #9
 80011f2:	4684      	mov	ip, r0
 80011f4:	4465      	add	r5, ip
 80011f6:	0c18      	lsrs	r0, r3, #16
 80011f8:	0409      	lsls	r1, r1, #16
 80011fa:	041b      	lsls	r3, r3, #16
 80011fc:	0c09      	lsrs	r1, r1, #16
 80011fe:	1940      	adds	r0, r0, r5
 8001200:	185b      	adds	r3, r3, r1
 8001202:	4284      	cmp	r4, r0
 8001204:	d327      	bcc.n	8001256 <__aeabi_ddiv+0x40a>
 8001206:	d023      	beq.n	8001250 <__aeabi_ddiv+0x404>
 8001208:	2301      	movs	r3, #1
 800120a:	0035      	movs	r5, r6
 800120c:	431a      	orrs	r2, r3
 800120e:	4b94      	ldr	r3, [pc, #592]	@ (8001460 <__aeabi_ddiv+0x614>)
 8001210:	4453      	add	r3, sl
 8001212:	2b00      	cmp	r3, #0
 8001214:	dd60      	ble.n	80012d8 <__aeabi_ddiv+0x48c>
 8001216:	0751      	lsls	r1, r2, #29
 8001218:	d000      	beq.n	800121c <__aeabi_ddiv+0x3d0>
 800121a:	e086      	b.n	800132a <__aeabi_ddiv+0x4de>
 800121c:	002e      	movs	r6, r5
 800121e:	08d1      	lsrs	r1, r2, #3
 8001220:	465a      	mov	r2, fp
 8001222:	01d2      	lsls	r2, r2, #7
 8001224:	d506      	bpl.n	8001234 <__aeabi_ddiv+0x3e8>
 8001226:	465a      	mov	r2, fp
 8001228:	4b8e      	ldr	r3, [pc, #568]	@ (8001464 <__aeabi_ddiv+0x618>)
 800122a:	401a      	ands	r2, r3
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	4693      	mov	fp, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4453      	add	r3, sl
 8001234:	4a8c      	ldr	r2, [pc, #560]	@ (8001468 <__aeabi_ddiv+0x61c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	dd00      	ble.n	800123c <__aeabi_ddiv+0x3f0>
 800123a:	e680      	b.n	8000f3e <__aeabi_ddiv+0xf2>
 800123c:	465a      	mov	r2, fp
 800123e:	0752      	lsls	r2, r2, #29
 8001240:	430a      	orrs	r2, r1
 8001242:	4690      	mov	r8, r2
 8001244:	465a      	mov	r2, fp
 8001246:	055b      	lsls	r3, r3, #21
 8001248:	0254      	lsls	r4, r2, #9
 800124a:	0b24      	lsrs	r4, r4, #12
 800124c:	0d5b      	lsrs	r3, r3, #21
 800124e:	e669      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 8001250:	0035      	movs	r5, r6
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0db      	beq.n	800120e <__aeabi_ddiv+0x3c2>
 8001256:	9d00      	ldr	r5, [sp, #0]
 8001258:	1e51      	subs	r1, r2, #1
 800125a:	46ac      	mov	ip, r5
 800125c:	4464      	add	r4, ip
 800125e:	42ac      	cmp	r4, r5
 8001260:	d200      	bcs.n	8001264 <__aeabi_ddiv+0x418>
 8001262:	e09e      	b.n	80013a2 <__aeabi_ddiv+0x556>
 8001264:	4284      	cmp	r4, r0
 8001266:	d200      	bcs.n	800126a <__aeabi_ddiv+0x41e>
 8001268:	e0e1      	b.n	800142e <__aeabi_ddiv+0x5e2>
 800126a:	d100      	bne.n	800126e <__aeabi_ddiv+0x422>
 800126c:	e0ee      	b.n	800144c <__aeabi_ddiv+0x600>
 800126e:	000a      	movs	r2, r1
 8001270:	e7ca      	b.n	8001208 <__aeabi_ddiv+0x3bc>
 8001272:	4542      	cmp	r2, r8
 8001274:	d900      	bls.n	8001278 <__aeabi_ddiv+0x42c>
 8001276:	e708      	b.n	800108a <__aeabi_ddiv+0x23e>
 8001278:	464b      	mov	r3, r9
 800127a:	07dc      	lsls	r4, r3, #31
 800127c:	0858      	lsrs	r0, r3, #1
 800127e:	4643      	mov	r3, r8
 8001280:	085b      	lsrs	r3, r3, #1
 8001282:	431c      	orrs	r4, r3
 8001284:	4643      	mov	r3, r8
 8001286:	07dd      	lsls	r5, r3, #31
 8001288:	e706      	b.n	8001098 <__aeabi_ddiv+0x24c>
 800128a:	f000 f9c1 	bl	8001610 <__clzsi2>
 800128e:	2315      	movs	r3, #21
 8001290:	469c      	mov	ip, r3
 8001292:	4484      	add	ip, r0
 8001294:	0002      	movs	r2, r0
 8001296:	4663      	mov	r3, ip
 8001298:	3220      	adds	r2, #32
 800129a:	2b1c      	cmp	r3, #28
 800129c:	dc00      	bgt.n	80012a0 <__aeabi_ddiv+0x454>
 800129e:	e692      	b.n	8000fc6 <__aeabi_ddiv+0x17a>
 80012a0:	0023      	movs	r3, r4
 80012a2:	3808      	subs	r0, #8
 80012a4:	4083      	lsls	r3, r0
 80012a6:	4699      	mov	r9, r3
 80012a8:	2300      	movs	r3, #0
 80012aa:	4698      	mov	r8, r3
 80012ac:	e69a      	b.n	8000fe4 <__aeabi_ddiv+0x198>
 80012ae:	f000 f9af 	bl	8001610 <__clzsi2>
 80012b2:	0002      	movs	r2, r0
 80012b4:	0003      	movs	r3, r0
 80012b6:	3215      	adds	r2, #21
 80012b8:	3320      	adds	r3, #32
 80012ba:	2a1c      	cmp	r2, #28
 80012bc:	dc00      	bgt.n	80012c0 <__aeabi_ddiv+0x474>
 80012be:	e65f      	b.n	8000f80 <__aeabi_ddiv+0x134>
 80012c0:	9900      	ldr	r1, [sp, #0]
 80012c2:	3808      	subs	r0, #8
 80012c4:	4081      	lsls	r1, r0
 80012c6:	2200      	movs	r2, #0
 80012c8:	468b      	mov	fp, r1
 80012ca:	e666      	b.n	8000f9a <__aeabi_ddiv+0x14e>
 80012cc:	2200      	movs	r2, #0
 80012ce:	002e      	movs	r6, r5
 80012d0:	2400      	movs	r4, #0
 80012d2:	4690      	mov	r8, r2
 80012d4:	4b65      	ldr	r3, [pc, #404]	@ (800146c <__aeabi_ddiv+0x620>)
 80012d6:	e625      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 80012d8:	002e      	movs	r6, r5
 80012da:	2101      	movs	r1, #1
 80012dc:	1ac9      	subs	r1, r1, r3
 80012de:	2938      	cmp	r1, #56	@ 0x38
 80012e0:	dd00      	ble.n	80012e4 <__aeabi_ddiv+0x498>
 80012e2:	e61b      	b.n	8000f1c <__aeabi_ddiv+0xd0>
 80012e4:	291f      	cmp	r1, #31
 80012e6:	dc7e      	bgt.n	80013e6 <__aeabi_ddiv+0x59a>
 80012e8:	4861      	ldr	r0, [pc, #388]	@ (8001470 <__aeabi_ddiv+0x624>)
 80012ea:	0014      	movs	r4, r2
 80012ec:	4450      	add	r0, sl
 80012ee:	465b      	mov	r3, fp
 80012f0:	4082      	lsls	r2, r0
 80012f2:	4083      	lsls	r3, r0
 80012f4:	40cc      	lsrs	r4, r1
 80012f6:	1e50      	subs	r0, r2, #1
 80012f8:	4182      	sbcs	r2, r0
 80012fa:	4323      	orrs	r3, r4
 80012fc:	431a      	orrs	r2, r3
 80012fe:	465b      	mov	r3, fp
 8001300:	40cb      	lsrs	r3, r1
 8001302:	0751      	lsls	r1, r2, #29
 8001304:	d009      	beq.n	800131a <__aeabi_ddiv+0x4ce>
 8001306:	210f      	movs	r1, #15
 8001308:	4011      	ands	r1, r2
 800130a:	2904      	cmp	r1, #4
 800130c:	d005      	beq.n	800131a <__aeabi_ddiv+0x4ce>
 800130e:	1d11      	adds	r1, r2, #4
 8001310:	4291      	cmp	r1, r2
 8001312:	4192      	sbcs	r2, r2
 8001314:	4252      	negs	r2, r2
 8001316:	189b      	adds	r3, r3, r2
 8001318:	000a      	movs	r2, r1
 800131a:	0219      	lsls	r1, r3, #8
 800131c:	d400      	bmi.n	8001320 <__aeabi_ddiv+0x4d4>
 800131e:	e09b      	b.n	8001458 <__aeabi_ddiv+0x60c>
 8001320:	2200      	movs	r2, #0
 8001322:	2301      	movs	r3, #1
 8001324:	2400      	movs	r4, #0
 8001326:	4690      	mov	r8, r2
 8001328:	e5fc      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 800132a:	210f      	movs	r1, #15
 800132c:	4011      	ands	r1, r2
 800132e:	2904      	cmp	r1, #4
 8001330:	d100      	bne.n	8001334 <__aeabi_ddiv+0x4e8>
 8001332:	e773      	b.n	800121c <__aeabi_ddiv+0x3d0>
 8001334:	1d11      	adds	r1, r2, #4
 8001336:	4291      	cmp	r1, r2
 8001338:	4192      	sbcs	r2, r2
 800133a:	4252      	negs	r2, r2
 800133c:	002e      	movs	r6, r5
 800133e:	08c9      	lsrs	r1, r1, #3
 8001340:	4493      	add	fp, r2
 8001342:	e76d      	b.n	8001220 <__aeabi_ddiv+0x3d4>
 8001344:	9b00      	ldr	r3, [sp, #0]
 8001346:	3d01      	subs	r5, #1
 8001348:	469c      	mov	ip, r3
 800134a:	4461      	add	r1, ip
 800134c:	428b      	cmp	r3, r1
 800134e:	d900      	bls.n	8001352 <__aeabi_ddiv+0x506>
 8001350:	e72c      	b.n	80011ac <__aeabi_ddiv+0x360>
 8001352:	428a      	cmp	r2, r1
 8001354:	d800      	bhi.n	8001358 <__aeabi_ddiv+0x50c>
 8001356:	e729      	b.n	80011ac <__aeabi_ddiv+0x360>
 8001358:	1e85      	subs	r5, r0, #2
 800135a:	4461      	add	r1, ip
 800135c:	e726      	b.n	80011ac <__aeabi_ddiv+0x360>
 800135e:	9900      	ldr	r1, [sp, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	468c      	mov	ip, r1
 8001364:	4464      	add	r4, ip
 8001366:	42a1      	cmp	r1, r4
 8001368:	d900      	bls.n	800136c <__aeabi_ddiv+0x520>
 800136a:	e72d      	b.n	80011c8 <__aeabi_ddiv+0x37c>
 800136c:	42a2      	cmp	r2, r4
 800136e:	d800      	bhi.n	8001372 <__aeabi_ddiv+0x526>
 8001370:	e72a      	b.n	80011c8 <__aeabi_ddiv+0x37c>
 8001372:	1e83      	subs	r3, r0, #2
 8001374:	4464      	add	r4, ip
 8001376:	e727      	b.n	80011c8 <__aeabi_ddiv+0x37c>
 8001378:	4287      	cmp	r7, r0
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x532>
 800137c:	e6fe      	b.n	800117c <__aeabi_ddiv+0x330>
 800137e:	45a9      	cmp	r9, r5
 8001380:	d900      	bls.n	8001384 <__aeabi_ddiv+0x538>
 8001382:	e6fb      	b.n	800117c <__aeabi_ddiv+0x330>
 8001384:	e6f5      	b.n	8001172 <__aeabi_ddiv+0x326>
 8001386:	42a2      	cmp	r2, r4
 8001388:	d800      	bhi.n	800138c <__aeabi_ddiv+0x540>
 800138a:	e6b9      	b.n	8001100 <__aeabi_ddiv+0x2b4>
 800138c:	1e83      	subs	r3, r0, #2
 800138e:	4464      	add	r4, ip
 8001390:	e6b6      	b.n	8001100 <__aeabi_ddiv+0x2b4>
 8001392:	428a      	cmp	r2, r1
 8001394:	d800      	bhi.n	8001398 <__aeabi_ddiv+0x54c>
 8001396:	e69f      	b.n	80010d8 <__aeabi_ddiv+0x28c>
 8001398:	46bc      	mov	ip, r7
 800139a:	1e83      	subs	r3, r0, #2
 800139c:	4698      	mov	r8, r3
 800139e:	4461      	add	r1, ip
 80013a0:	e69a      	b.n	80010d8 <__aeabi_ddiv+0x28c>
 80013a2:	000a      	movs	r2, r1
 80013a4:	4284      	cmp	r4, r0
 80013a6:	d000      	beq.n	80013aa <__aeabi_ddiv+0x55e>
 80013a8:	e72e      	b.n	8001208 <__aeabi_ddiv+0x3bc>
 80013aa:	454b      	cmp	r3, r9
 80013ac:	d000      	beq.n	80013b0 <__aeabi_ddiv+0x564>
 80013ae:	e72b      	b.n	8001208 <__aeabi_ddiv+0x3bc>
 80013b0:	0035      	movs	r5, r6
 80013b2:	e72c      	b.n	800120e <__aeabi_ddiv+0x3c2>
 80013b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001460 <__aeabi_ddiv+0x614>)
 80013b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001474 <__aeabi_ddiv+0x628>)
 80013b8:	4453      	add	r3, sl
 80013ba:	4592      	cmp	sl, r2
 80013bc:	db43      	blt.n	8001446 <__aeabi_ddiv+0x5fa>
 80013be:	2201      	movs	r2, #1
 80013c0:	2100      	movs	r1, #0
 80013c2:	4493      	add	fp, r2
 80013c4:	e72c      	b.n	8001220 <__aeabi_ddiv+0x3d4>
 80013c6:	42ac      	cmp	r4, r5
 80013c8:	d800      	bhi.n	80013cc <__aeabi_ddiv+0x580>
 80013ca:	e6d7      	b.n	800117c <__aeabi_ddiv+0x330>
 80013cc:	2302      	movs	r3, #2
 80013ce:	425b      	negs	r3, r3
 80013d0:	469c      	mov	ip, r3
 80013d2:	9900      	ldr	r1, [sp, #0]
 80013d4:	444d      	add	r5, r9
 80013d6:	454d      	cmp	r5, r9
 80013d8:	419b      	sbcs	r3, r3
 80013da:	44e3      	add	fp, ip
 80013dc:	468c      	mov	ip, r1
 80013de:	425b      	negs	r3, r3
 80013e0:	4463      	add	r3, ip
 80013e2:	18c0      	adds	r0, r0, r3
 80013e4:	e6cc      	b.n	8001180 <__aeabi_ddiv+0x334>
 80013e6:	201f      	movs	r0, #31
 80013e8:	4240      	negs	r0, r0
 80013ea:	1ac3      	subs	r3, r0, r3
 80013ec:	4658      	mov	r0, fp
 80013ee:	40d8      	lsrs	r0, r3
 80013f0:	2920      	cmp	r1, #32
 80013f2:	d004      	beq.n	80013fe <__aeabi_ddiv+0x5b2>
 80013f4:	4659      	mov	r1, fp
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <__aeabi_ddiv+0x62c>)
 80013f8:	4453      	add	r3, sl
 80013fa:	4099      	lsls	r1, r3
 80013fc:	430a      	orrs	r2, r1
 80013fe:	1e53      	subs	r3, r2, #1
 8001400:	419a      	sbcs	r2, r3
 8001402:	2307      	movs	r3, #7
 8001404:	0019      	movs	r1, r3
 8001406:	4302      	orrs	r2, r0
 8001408:	2400      	movs	r4, #0
 800140a:	4011      	ands	r1, r2
 800140c:	4213      	tst	r3, r2
 800140e:	d009      	beq.n	8001424 <__aeabi_ddiv+0x5d8>
 8001410:	3308      	adds	r3, #8
 8001412:	4013      	ands	r3, r2
 8001414:	2b04      	cmp	r3, #4
 8001416:	d01d      	beq.n	8001454 <__aeabi_ddiv+0x608>
 8001418:	1d13      	adds	r3, r2, #4
 800141a:	4293      	cmp	r3, r2
 800141c:	4189      	sbcs	r1, r1
 800141e:	001a      	movs	r2, r3
 8001420:	4249      	negs	r1, r1
 8001422:	0749      	lsls	r1, r1, #29
 8001424:	08d2      	lsrs	r2, r2, #3
 8001426:	430a      	orrs	r2, r1
 8001428:	4690      	mov	r8, r2
 800142a:	2300      	movs	r3, #0
 800142c:	e57a      	b.n	8000f24 <__aeabi_ddiv+0xd8>
 800142e:	4649      	mov	r1, r9
 8001430:	9f00      	ldr	r7, [sp, #0]
 8001432:	004d      	lsls	r5, r1, #1
 8001434:	454d      	cmp	r5, r9
 8001436:	4189      	sbcs	r1, r1
 8001438:	46bc      	mov	ip, r7
 800143a:	4249      	negs	r1, r1
 800143c:	4461      	add	r1, ip
 800143e:	46a9      	mov	r9, r5
 8001440:	3a02      	subs	r2, #2
 8001442:	1864      	adds	r4, r4, r1
 8001444:	e7ae      	b.n	80013a4 <__aeabi_ddiv+0x558>
 8001446:	2201      	movs	r2, #1
 8001448:	4252      	negs	r2, r2
 800144a:	e746      	b.n	80012da <__aeabi_ddiv+0x48e>
 800144c:	4599      	cmp	r9, r3
 800144e:	d3ee      	bcc.n	800142e <__aeabi_ddiv+0x5e2>
 8001450:	000a      	movs	r2, r1
 8001452:	e7aa      	b.n	80013aa <__aeabi_ddiv+0x55e>
 8001454:	2100      	movs	r1, #0
 8001456:	e7e5      	b.n	8001424 <__aeabi_ddiv+0x5d8>
 8001458:	0759      	lsls	r1, r3, #29
 800145a:	025b      	lsls	r3, r3, #9
 800145c:	0b1c      	lsrs	r4, r3, #12
 800145e:	e7e1      	b.n	8001424 <__aeabi_ddiv+0x5d8>
 8001460:	000003ff 	.word	0x000003ff
 8001464:	feffffff 	.word	0xfeffffff
 8001468:	000007fe 	.word	0x000007fe
 800146c:	000007ff 	.word	0x000007ff
 8001470:	0000041e 	.word	0x0000041e
 8001474:	fffffc02 	.word	0xfffffc02
 8001478:	0000043e 	.word	0x0000043e

0800147c <__aeabi_f2d>:
 800147c:	b570      	push	{r4, r5, r6, lr}
 800147e:	0242      	lsls	r2, r0, #9
 8001480:	0043      	lsls	r3, r0, #1
 8001482:	0fc4      	lsrs	r4, r0, #31
 8001484:	20fe      	movs	r0, #254	@ 0xfe
 8001486:	0e1b      	lsrs	r3, r3, #24
 8001488:	1c59      	adds	r1, r3, #1
 800148a:	0a55      	lsrs	r5, r2, #9
 800148c:	4208      	tst	r0, r1
 800148e:	d00c      	beq.n	80014aa <__aeabi_f2d+0x2e>
 8001490:	21e0      	movs	r1, #224	@ 0xe0
 8001492:	0089      	lsls	r1, r1, #2
 8001494:	468c      	mov	ip, r1
 8001496:	076d      	lsls	r5, r5, #29
 8001498:	0b12      	lsrs	r2, r2, #12
 800149a:	4463      	add	r3, ip
 800149c:	051b      	lsls	r3, r3, #20
 800149e:	4313      	orrs	r3, r2
 80014a0:	07e4      	lsls	r4, r4, #31
 80014a2:	4323      	orrs	r3, r4
 80014a4:	0028      	movs	r0, r5
 80014a6:	0019      	movs	r1, r3
 80014a8:	bd70      	pop	{r4, r5, r6, pc}
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d114      	bne.n	80014d8 <__aeabi_f2d+0x5c>
 80014ae:	2d00      	cmp	r5, #0
 80014b0:	d01b      	beq.n	80014ea <__aeabi_f2d+0x6e>
 80014b2:	0028      	movs	r0, r5
 80014b4:	f000 f8ac 	bl	8001610 <__clzsi2>
 80014b8:	280a      	cmp	r0, #10
 80014ba:	dc1c      	bgt.n	80014f6 <__aeabi_f2d+0x7a>
 80014bc:	230b      	movs	r3, #11
 80014be:	002a      	movs	r2, r5
 80014c0:	1a1b      	subs	r3, r3, r0
 80014c2:	40da      	lsrs	r2, r3
 80014c4:	0003      	movs	r3, r0
 80014c6:	3315      	adds	r3, #21
 80014c8:	409d      	lsls	r5, r3
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <__aeabi_f2d+0x88>)
 80014cc:	0312      	lsls	r2, r2, #12
 80014ce:	1a1b      	subs	r3, r3, r0
 80014d0:	055b      	lsls	r3, r3, #21
 80014d2:	0b12      	lsrs	r2, r2, #12
 80014d4:	0d5b      	lsrs	r3, r3, #21
 80014d6:	e7e1      	b.n	800149c <__aeabi_f2d+0x20>
 80014d8:	2d00      	cmp	r5, #0
 80014da:	d009      	beq.n	80014f0 <__aeabi_f2d+0x74>
 80014dc:	0b13      	lsrs	r3, r2, #12
 80014de:	2280      	movs	r2, #128	@ 0x80
 80014e0:	0312      	lsls	r2, r2, #12
 80014e2:	431a      	orrs	r2, r3
 80014e4:	076d      	lsls	r5, r5, #29
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <__aeabi_f2d+0x8c>)
 80014e8:	e7d8      	b.n	800149c <__aeabi_f2d+0x20>
 80014ea:	2300      	movs	r3, #0
 80014ec:	2200      	movs	r2, #0
 80014ee:	e7d5      	b.n	800149c <__aeabi_f2d+0x20>
 80014f0:	2200      	movs	r2, #0
 80014f2:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <__aeabi_f2d+0x8c>)
 80014f4:	e7d2      	b.n	800149c <__aeabi_f2d+0x20>
 80014f6:	0003      	movs	r3, r0
 80014f8:	002a      	movs	r2, r5
 80014fa:	3b0b      	subs	r3, #11
 80014fc:	409a      	lsls	r2, r3
 80014fe:	2500      	movs	r5, #0
 8001500:	e7e3      	b.n	80014ca <__aeabi_f2d+0x4e>
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	00000389 	.word	0x00000389
 8001508:	000007ff 	.word	0x000007ff

0800150c <__aeabi_d2f>:
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150e:	004b      	lsls	r3, r1, #1
 8001510:	030f      	lsls	r7, r1, #12
 8001512:	0d5b      	lsrs	r3, r3, #21
 8001514:	4c3a      	ldr	r4, [pc, #232]	@ (8001600 <__aeabi_d2f+0xf4>)
 8001516:	0f45      	lsrs	r5, r0, #29
 8001518:	b083      	sub	sp, #12
 800151a:	0a7f      	lsrs	r7, r7, #9
 800151c:	1c5e      	adds	r6, r3, #1
 800151e:	432f      	orrs	r7, r5
 8001520:	9000      	str	r0, [sp, #0]
 8001522:	9101      	str	r1, [sp, #4]
 8001524:	0fca      	lsrs	r2, r1, #31
 8001526:	00c5      	lsls	r5, r0, #3
 8001528:	4226      	tst	r6, r4
 800152a:	d00b      	beq.n	8001544 <__aeabi_d2f+0x38>
 800152c:	4935      	ldr	r1, [pc, #212]	@ (8001604 <__aeabi_d2f+0xf8>)
 800152e:	185c      	adds	r4, r3, r1
 8001530:	2cfe      	cmp	r4, #254	@ 0xfe
 8001532:	dd13      	ble.n	800155c <__aeabi_d2f+0x50>
 8001534:	20ff      	movs	r0, #255	@ 0xff
 8001536:	2300      	movs	r3, #0
 8001538:	05c0      	lsls	r0, r0, #23
 800153a:	4318      	orrs	r0, r3
 800153c:	07d2      	lsls	r2, r2, #31
 800153e:	4310      	orrs	r0, r2
 8001540:	b003      	add	sp, #12
 8001542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001544:	433d      	orrs	r5, r7
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <__aeabi_d2f+0x42>
 800154a:	2000      	movs	r0, #0
 800154c:	e7f4      	b.n	8001538 <__aeabi_d2f+0x2c>
 800154e:	2d00      	cmp	r5, #0
 8001550:	d0f0      	beq.n	8001534 <__aeabi_d2f+0x28>
 8001552:	2380      	movs	r3, #128	@ 0x80
 8001554:	03db      	lsls	r3, r3, #15
 8001556:	20ff      	movs	r0, #255	@ 0xff
 8001558:	433b      	orrs	r3, r7
 800155a:	e7ed      	b.n	8001538 <__aeabi_d2f+0x2c>
 800155c:	2c00      	cmp	r4, #0
 800155e:	dd0c      	ble.n	800157a <__aeabi_d2f+0x6e>
 8001560:	9b00      	ldr	r3, [sp, #0]
 8001562:	00ff      	lsls	r7, r7, #3
 8001564:	019b      	lsls	r3, r3, #6
 8001566:	1e58      	subs	r0, r3, #1
 8001568:	4183      	sbcs	r3, r0
 800156a:	0f69      	lsrs	r1, r5, #29
 800156c:	433b      	orrs	r3, r7
 800156e:	430b      	orrs	r3, r1
 8001570:	0759      	lsls	r1, r3, #29
 8001572:	d127      	bne.n	80015c4 <__aeabi_d2f+0xb8>
 8001574:	08db      	lsrs	r3, r3, #3
 8001576:	b2e0      	uxtb	r0, r4
 8001578:	e7de      	b.n	8001538 <__aeabi_d2f+0x2c>
 800157a:	0021      	movs	r1, r4
 800157c:	3117      	adds	r1, #23
 800157e:	db31      	blt.n	80015e4 <__aeabi_d2f+0xd8>
 8001580:	2180      	movs	r1, #128	@ 0x80
 8001582:	201e      	movs	r0, #30
 8001584:	0409      	lsls	r1, r1, #16
 8001586:	4339      	orrs	r1, r7
 8001588:	1b00      	subs	r0, r0, r4
 800158a:	281f      	cmp	r0, #31
 800158c:	dd2d      	ble.n	80015ea <__aeabi_d2f+0xde>
 800158e:	2602      	movs	r6, #2
 8001590:	4276      	negs	r6, r6
 8001592:	1b34      	subs	r4, r6, r4
 8001594:	000e      	movs	r6, r1
 8001596:	40e6      	lsrs	r6, r4
 8001598:	0034      	movs	r4, r6
 800159a:	2820      	cmp	r0, #32
 800159c:	d004      	beq.n	80015a8 <__aeabi_d2f+0x9c>
 800159e:	481a      	ldr	r0, [pc, #104]	@ (8001608 <__aeabi_d2f+0xfc>)
 80015a0:	4684      	mov	ip, r0
 80015a2:	4463      	add	r3, ip
 80015a4:	4099      	lsls	r1, r3
 80015a6:	430d      	orrs	r5, r1
 80015a8:	002b      	movs	r3, r5
 80015aa:	1e59      	subs	r1, r3, #1
 80015ac:	418b      	sbcs	r3, r1
 80015ae:	4323      	orrs	r3, r4
 80015b0:	0759      	lsls	r1, r3, #29
 80015b2:	d003      	beq.n	80015bc <__aeabi_d2f+0xb0>
 80015b4:	210f      	movs	r1, #15
 80015b6:	4019      	ands	r1, r3
 80015b8:	2904      	cmp	r1, #4
 80015ba:	d10b      	bne.n	80015d4 <__aeabi_d2f+0xc8>
 80015bc:	019b      	lsls	r3, r3, #6
 80015be:	2000      	movs	r0, #0
 80015c0:	0a5b      	lsrs	r3, r3, #9
 80015c2:	e7b9      	b.n	8001538 <__aeabi_d2f+0x2c>
 80015c4:	210f      	movs	r1, #15
 80015c6:	4019      	ands	r1, r3
 80015c8:	2904      	cmp	r1, #4
 80015ca:	d104      	bne.n	80015d6 <__aeabi_d2f+0xca>
 80015cc:	019b      	lsls	r3, r3, #6
 80015ce:	0a5b      	lsrs	r3, r3, #9
 80015d0:	b2e0      	uxtb	r0, r4
 80015d2:	e7b1      	b.n	8001538 <__aeabi_d2f+0x2c>
 80015d4:	2400      	movs	r4, #0
 80015d6:	3304      	adds	r3, #4
 80015d8:	0159      	lsls	r1, r3, #5
 80015da:	d5f7      	bpl.n	80015cc <__aeabi_d2f+0xc0>
 80015dc:	3401      	adds	r4, #1
 80015de:	2300      	movs	r3, #0
 80015e0:	b2e0      	uxtb	r0, r4
 80015e2:	e7a9      	b.n	8001538 <__aeabi_d2f+0x2c>
 80015e4:	2000      	movs	r0, #0
 80015e6:	2300      	movs	r3, #0
 80015e8:	e7a6      	b.n	8001538 <__aeabi_d2f+0x2c>
 80015ea:	4c08      	ldr	r4, [pc, #32]	@ (800160c <__aeabi_d2f+0x100>)
 80015ec:	191c      	adds	r4, r3, r4
 80015ee:	002b      	movs	r3, r5
 80015f0:	40a5      	lsls	r5, r4
 80015f2:	40c3      	lsrs	r3, r0
 80015f4:	40a1      	lsls	r1, r4
 80015f6:	1e68      	subs	r0, r5, #1
 80015f8:	4185      	sbcs	r5, r0
 80015fa:	4329      	orrs	r1, r5
 80015fc:	430b      	orrs	r3, r1
 80015fe:	e7d7      	b.n	80015b0 <__aeabi_d2f+0xa4>
 8001600:	000007fe 	.word	0x000007fe
 8001604:	fffffc80 	.word	0xfffffc80
 8001608:	fffffca2 	.word	0xfffffca2
 800160c:	fffffc82 	.word	0xfffffc82

08001610 <__clzsi2>:
 8001610:	211c      	movs	r1, #28
 8001612:	2301      	movs	r3, #1
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	4298      	cmp	r0, r3
 8001618:	d301      	bcc.n	800161e <__clzsi2+0xe>
 800161a:	0c00      	lsrs	r0, r0, #16
 800161c:	3910      	subs	r1, #16
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	4298      	cmp	r0, r3
 8001622:	d301      	bcc.n	8001628 <__clzsi2+0x18>
 8001624:	0a00      	lsrs	r0, r0, #8
 8001626:	3908      	subs	r1, #8
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	4298      	cmp	r0, r3
 800162c:	d301      	bcc.n	8001632 <__clzsi2+0x22>
 800162e:	0900      	lsrs	r0, r0, #4
 8001630:	3904      	subs	r1, #4
 8001632:	a202      	add	r2, pc, #8	@ (adr r2, 800163c <__clzsi2+0x2c>)
 8001634:	5c10      	ldrb	r0, [r2, r0]
 8001636:	1840      	adds	r0, r0, r1
 8001638:	4770      	bx	lr
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	02020304 	.word	0x02020304
 8001640:	01010101 	.word	0x01010101
	...

0800164c <HAL_TIM_PeriodElapsedCallback>:
int MPU6050_StartUp(void);
void MPU6050_GetValues(void);

void StateMachine(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if(htim == &htim6){
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001658:	429a      	cmp	r2, r3
 800165a:	d135      	bne.n	80016c8 <HAL_TIM_PeriodElapsedCallback+0x7c>
		seconds++;
 800165c:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001666:	701a      	strb	r2, [r3, #0]

		if(seconds >= 1){
 8001668:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d02b      	beq.n	80016c8 <HAL_TIM_PeriodElapsedCallback+0x7c>
			if(pointX > 4) pointX--;
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b04      	cmp	r3, #4
 8001676:	d905      	bls.n	8001684 <HAL_TIM_PeriodElapsedCallback+0x38>
 8001678:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	3b01      	subs	r3, #1
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001682:	701a      	strb	r2, [r3, #0]
			if(pointY > 4) pointY--;
 8001684:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d905      	bls.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x4c>
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	3b01      	subs	r3, #1
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001696:	701a      	strb	r2, [r3, #0]
			if (pointX < 4) pointX++;
 8001698:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d805      	bhi.n	80016ac <HAL_TIM_PeriodElapsedCallback+0x60>
 80016a0:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016aa:	701a      	strb	r2, [r3, #0]
			if (pointY < 4) pointY++;
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d805      	bhi.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0x74>
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016be:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim6);
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80016c2:	0018      	movs	r0, r3
 80016c4:	f003 f974 	bl	80049b0 <HAL_TIM_Base_Stop_IT>
		}
	}
}
 80016c8:	46c0      	nop			@ (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000080 	.word	0x20000080
 80016d4:	200000ec 	.word	0x200000ec
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000001 	.word	0x20000001

080016e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e4:	f000 ff1a 	bl	800251c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e8:	f000 f834 	bl	8001754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ec:	f000 f916 	bl	800191c <MX_GPIO_Init>
  MX_I2C1_Init();
 80016f0:	f000 f898 	bl	8001824 <MX_I2C1_Init>
  MX_TIM6_Init();
 80016f4:	f000 f8d6 	bl	80018a4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  MATRIX_Interpreter(4, 4);
 80016f8:	2104      	movs	r1, #4
 80016fa:	2004      	movs	r0, #4
 80016fc:	f000 f99a 	bl	8001a34 <MATRIX_Interpreter>
  verify = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 3, HAL_MAX_DELAY);
 8001700:	2301      	movs	r3, #1
 8001702:	425b      	negs	r3, r3
 8001704:	480f      	ldr	r0, [pc, #60]	@ (8001744 <main+0x64>)
 8001706:	2203      	movs	r2, #3
 8001708:	21d0      	movs	r1, #208	@ 0xd0
 800170a:	f001 fd15 	bl	8003138 <HAL_I2C_IsDeviceReady>
 800170e:	0003      	movs	r3, r0
 8001710:	001a      	movs	r2, r3
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <main+0x68>)
 8001714:	701a      	strb	r2, [r3, #0]
  if(verify == HAL_OK) MPU6050_StartUp();
 8001716:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <main+0x68>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <main+0x42>
 800171e:	f000 fc67 	bl	8001ff0 <MPU6050_StartUp>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  MATRIX_Interpreter(pointX, pointY);
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <main+0x6c>)
 8001724:	781a      	ldrb	r2, [r3, #0]
 8001726:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <main+0x70>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	0019      	movs	r1, r3
 800172c:	0010      	movs	r0, r2
 800172e:	f000 f981 	bl	8001a34 <MATRIX_Interpreter>
	  MPU6050_GetValues();
 8001732:	f000 fcb7 	bl	80020a4 <MPU6050_GetValues>
	  StateMachine();
 8001736:	f000 fd85 	bl	8002244 <StateMachine>
	  HAL_Delay(10);
 800173a:	200a      	movs	r0, #10
 800173c:	f000 ff5e 	bl	80025fc <HAL_Delay>
	  MATRIX_Interpreter(pointX, pointY);
 8001740:	46c0      	nop			@ (mov r8, r8)
 8001742:	e7ee      	b.n	8001722 <main+0x42>
 8001744:	2000002c 	.word	0x2000002c
 8001748:	200000d8 	.word	0x200000d8
 800174c:	20000000 	.word	0x20000000
 8001750:	20000001 	.word	0x20000001

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b09d      	sub	sp, #116	@ 0x74
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	2438      	movs	r4, #56	@ 0x38
 800175c:	193b      	adds	r3, r7, r4
 800175e:	0018      	movs	r0, r3
 8001760:	2338      	movs	r3, #56	@ 0x38
 8001762:	001a      	movs	r2, r3
 8001764:	2100      	movs	r1, #0
 8001766:	f003 fae7 	bl	8004d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176a:	2324      	movs	r3, #36	@ 0x24
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	0018      	movs	r0, r3
 8001770:	2314      	movs	r3, #20
 8001772:	001a      	movs	r2, r3
 8001774:	2100      	movs	r1, #0
 8001776:	f003 fadf 	bl	8004d38 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800177a:	003b      	movs	r3, r7
 800177c:	0018      	movs	r0, r3
 800177e:	2324      	movs	r3, #36	@ 0x24
 8001780:	001a      	movs	r2, r3
 8001782:	2100      	movs	r1, #0
 8001784:	f003 fad8 	bl	8004d38 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001788:	4b24      	ldr	r3, [pc, #144]	@ (800181c <SystemClock_Config+0xc8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a24      	ldr	r2, [pc, #144]	@ (8001820 <SystemClock_Config+0xcc>)
 800178e:	401a      	ands	r2, r3
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <SystemClock_Config+0xc8>)
 8001792:	2180      	movs	r1, #128	@ 0x80
 8001794:	0109      	lsls	r1, r1, #4
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800179a:	0021      	movs	r1, r4
 800179c:	187b      	adds	r3, r7, r1
 800179e:	2202      	movs	r2, #2
 80017a0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2201      	movs	r2, #1
 80017a6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	2210      	movs	r2, #16
 80017ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2200      	movs	r2, #0
 80017b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	0018      	movs	r0, r3
 80017b8:	f002 f94e 	bl	8003a58 <HAL_RCC_OscConfig>
 80017bc:	1e03      	subs	r3, r0, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80017c0:	f000 fdd6 	bl	8002370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c4:	2124      	movs	r1, #36	@ 0x24
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	220f      	movs	r2, #15
 80017ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	2201      	movs	r2, #1
 80017d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2280      	movs	r2, #128	@ 0x80
 80017d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	2100      	movs	r1, #0
 80017e8:	0018      	movs	r0, r3
 80017ea:	f002 fcf9 	bl	80041e0 <HAL_RCC_ClockConfig>
 80017ee:	1e03      	subs	r3, r0, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80017f2:	f000 fdbd 	bl	8002370 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017f6:	003b      	movs	r3, r7
 80017f8:	2208      	movs	r2, #8
 80017fa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017fc:	003b      	movs	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001802:	003b      	movs	r3, r7
 8001804:	0018      	movs	r0, r3
 8001806:	f002 feb9 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 800180a:	1e03      	subs	r3, r0, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800180e:	f000 fdaf 	bl	8002370 <Error_Handler>
  }
}
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b01d      	add	sp, #116	@ 0x74
 8001818:	bd90      	pop	{r4, r7, pc}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	40007000 	.word	0x40007000
 8001820:	ffffe7ff 	.word	0xffffe7ff

08001824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <MX_I2C1_Init+0x74>)
 800182a:	4a1c      	ldr	r2, [pc, #112]	@ (800189c <MX_I2C1_Init+0x78>)
 800182c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800182e:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001830:	4a1b      	ldr	r2, [pc, #108]	@ (80018a0 <MX_I2C1_Init+0x7c>)
 8001832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001834:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800183a:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MX_I2C1_Init+0x74>)
 800183c:	2201      	movs	r2, #1
 800183e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001846:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <MX_I2C1_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001858:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <MX_I2C1_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001860:	0018      	movs	r0, r3
 8001862:	f001 f961 	bl	8002b28 <HAL_I2C_Init>
 8001866:	1e03      	subs	r3, r0, #0
 8001868:	d001      	beq.n	800186e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800186a:	f000 fd81 	bl	8002370 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800186e:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001870:	2100      	movs	r1, #0
 8001872:	0018      	movs	r0, r3
 8001874:	f002 f858 	bl	8003928 <HAL_I2CEx_ConfigAnalogFilter>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d001      	beq.n	8001880 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800187c:	f000 fd78 	bl	8002370 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001882:	2100      	movs	r1, #0
 8001884:	0018      	movs	r0, r3
 8001886:	f002 f89b 	bl	80039c0 <HAL_I2CEx_ConfigDigitalFilter>
 800188a:	1e03      	subs	r3, r0, #0
 800188c:	d001      	beq.n	8001892 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800188e:	f000 fd6f 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2000002c 	.word	0x2000002c
 800189c:	40005400 	.word	0x40005400
 80018a0:	00201d2b 	.word	0x00201d2b

080018a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018aa:	003b      	movs	r3, r7
 80018ac:	0018      	movs	r0, r3
 80018ae:	2308      	movs	r3, #8
 80018b0:	001a      	movs	r2, r3
 80018b2:	2100      	movs	r1, #0
 80018b4:	f003 fa40 	bl	8004d38 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018b8:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <MX_TIM6_Init+0x6c>)
 80018ba:	4a16      	ldr	r2, [pc, #88]	@ (8001914 <MX_TIM6_Init+0x70>)
 80018bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 80018be:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <MX_TIM6_Init+0x6c>)
 80018c0:	4a15      	ldr	r2, [pc, #84]	@ (8001918 <MX_TIM6_Init+0x74>)
 80018c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <MX_TIM6_Init+0x6c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200-1;
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <MX_TIM6_Init+0x6c>)
 80018cc:	22c7      	movs	r2, #199	@ 0xc7
 80018ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <MX_TIM6_Init+0x6c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <MX_TIM6_Init+0x6c>)
 80018d8:	0018      	movs	r0, r3
 80018da:	f002 ffdd 	bl	8004898 <HAL_TIM_Base_Init>
 80018de:	1e03      	subs	r3, r0, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80018e2:	f000 fd45 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e6:	003b      	movs	r3, r7
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ec:	003b      	movs	r3, r7
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018f2:	003a      	movs	r2, r7
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <MX_TIM6_Init+0x6c>)
 80018f6:	0011      	movs	r1, r2
 80018f8:	0018      	movs	r0, r3
 80018fa:	f003 f9c5 	bl	8004c88 <HAL_TIMEx_MasterConfigSynchronization>
 80018fe:	1e03      	subs	r3, r0, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001902:	f000 fd35 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b002      	add	sp, #8
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	20000080 	.word	0x20000080
 8001914:	40001000 	.word	0x40001000
 8001918:	00001f3f 	.word	0x00001f3f

0800191c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b089      	sub	sp, #36	@ 0x24
 8001920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001922:	240c      	movs	r4, #12
 8001924:	193b      	adds	r3, r7, r4
 8001926:	0018      	movs	r0, r3
 8001928:	2314      	movs	r3, #20
 800192a:	001a      	movs	r2, r3
 800192c:	2100      	movs	r1, #0
 800192e:	f003 fa03 	bl	8004d38 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b3d      	ldr	r3, [pc, #244]	@ (8001a28 <MX_GPIO_Init+0x10c>)
 8001934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001936:	4b3c      	ldr	r3, [pc, #240]	@ (8001a28 <MX_GPIO_Init+0x10c>)
 8001938:	2101      	movs	r1, #1
 800193a:	430a      	orrs	r2, r1
 800193c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800193e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a28 <MX_GPIO_Init+0x10c>)
 8001940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001942:	2201      	movs	r2, #1
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	4b37      	ldr	r3, [pc, #220]	@ (8001a28 <MX_GPIO_Init+0x10c>)
 800194c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800194e:	4b36      	ldr	r3, [pc, #216]	@ (8001a28 <MX_GPIO_Init+0x10c>)
 8001950:	2104      	movs	r1, #4
 8001952:	430a      	orrs	r2, r1
 8001954:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001956:	4b34      	ldr	r3, [pc, #208]	@ (8001a28 <MX_GPIO_Init+0x10c>)
 8001958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195a:	2204      	movs	r2, #4
 800195c:	4013      	ands	r3, r2
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	4b31      	ldr	r3, [pc, #196]	@ (8001a28 <MX_GPIO_Init+0x10c>)
 8001964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001966:	4b30      	ldr	r3, [pc, #192]	@ (8001a28 <MX_GPIO_Init+0x10c>)
 8001968:	2102      	movs	r1, #2
 800196a:	430a      	orrs	r2, r1
 800196c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800196e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a28 <MX_GPIO_Init+0x10c>)
 8001970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001972:	2202      	movs	r2, #2
 8001974:	4013      	ands	r3, r2
 8001976:	603b      	str	r3, [r7, #0]
 8001978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LINE_5_Pin|LINE_6_Pin|LINE_7_Pin|COL_8_Pin
 800197a:	239f      	movs	r3, #159	@ 0x9f
 800197c:	0159      	lsls	r1, r3, #5
 800197e:	23a0      	movs	r3, #160	@ 0xa0
 8001980:	05db      	lsls	r3, r3, #23
 8001982:	2200      	movs	r2, #0
 8001984:	0018      	movs	r0, r3
 8001986:	f001 f8b1 	bl	8002aec <HAL_GPIO_WritePin>
                          |COL_7_Pin|LINE_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LINE_3_Pin|LINE_2_Pin|COL_6_Pin|LINE_1_Pin
 800198a:	23f8      	movs	r3, #248	@ 0xf8
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4827      	ldr	r0, [pc, #156]	@ (8001a2c <MX_GPIO_Init+0x110>)
 8001990:	2200      	movs	r2, #0
 8001992:	0019      	movs	r1, r3
 8001994:	f001 f8aa 	bl	8002aec <HAL_GPIO_WritePin>
                          |LINE_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL_1_Pin|COL_4_Pin|COL_2_Pin|COL_3_Pin
 8001998:	238f      	movs	r3, #143	@ 0x8f
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4824      	ldr	r0, [pc, #144]	@ (8001a30 <MX_GPIO_Init+0x114>)
 800199e:	2200      	movs	r2, #0
 80019a0:	0019      	movs	r1, r3
 80019a2:	f001 f8a3 	bl	8002aec <HAL_GPIO_WritePin>
                          |COL_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LINE_5_Pin LINE_6_Pin LINE_7_Pin COL_8_Pin
                           COL_7_Pin LINE_4_Pin */
  GPIO_InitStruct.Pin = LINE_5_Pin|LINE_6_Pin|LINE_7_Pin|COL_8_Pin
 80019a6:	193b      	adds	r3, r7, r4
 80019a8:	229f      	movs	r2, #159	@ 0x9f
 80019aa:	0152      	lsls	r2, r2, #5
 80019ac:	601a      	str	r2, [r3, #0]
                          |COL_7_Pin|LINE_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	2201      	movs	r2, #1
 80019b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	193b      	adds	r3, r7, r4
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	193a      	adds	r2, r7, r4
 80019c2:	23a0      	movs	r3, #160	@ 0xa0
 80019c4:	05db      	lsls	r3, r3, #23
 80019c6:	0011      	movs	r1, r2
 80019c8:	0018      	movs	r0, r3
 80019ca:	f000 ff19 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_3_Pin LINE_2_Pin COL_6_Pin LINE_1_Pin
                           LINE_8_Pin */
  GPIO_InitStruct.Pin = LINE_3_Pin|LINE_2_Pin|COL_6_Pin|LINE_1_Pin
 80019ce:	0021      	movs	r1, r4
 80019d0:	187b      	adds	r3, r7, r1
 80019d2:	22f8      	movs	r2, #248	@ 0xf8
 80019d4:	0092      	lsls	r2, r2, #2
 80019d6:	601a      	str	r2, [r3, #0]
                          |LINE_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	000c      	movs	r4, r1
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2201      	movs	r2, #1
 80019de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	2200      	movs	r2, #0
 80019ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	193b      	adds	r3, r7, r4
 80019ee:	4a0f      	ldr	r2, [pc, #60]	@ (8001a2c <MX_GPIO_Init+0x110>)
 80019f0:	0019      	movs	r1, r3
 80019f2:	0010      	movs	r0, r2
 80019f4:	f000 ff04 	bl	8002800 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL_1_Pin COL_4_Pin COL_2_Pin COL_3_Pin
                           COL_5_Pin */
  GPIO_InitStruct.Pin = COL_1_Pin|COL_4_Pin|COL_2_Pin|COL_3_Pin
 80019f8:	0021      	movs	r1, r4
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	228f      	movs	r2, #143	@ 0x8f
 80019fe:	00d2      	lsls	r2, r2, #3
 8001a00:	601a      	str	r2, [r3, #0]
                          |COL_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2201      	movs	r2, #1
 8001a06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	4a06      	ldr	r2, [pc, #24]	@ (8001a30 <MX_GPIO_Init+0x114>)
 8001a18:	0019      	movs	r1, r3
 8001a1a:	0010      	movs	r0, r2
 8001a1c:	f000 fef0 	bl	8002800 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a20:	46c0      	nop			@ (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b009      	add	sp, #36	@ 0x24
 8001a26:	bd90      	pop	{r4, r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	50000800 	.word	0x50000800
 8001a30:	50000400 	.word	0x50000400

08001a34 <MATRIX_Interpreter>:

/* USER CODE BEGIN 4 */
void MATRIX_Interpreter(uint8_t line, uint8_t colum){
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	0002      	movs	r2, r0
 8001a3c:	1dfb      	adds	r3, r7, #7
 8001a3e:	701a      	strb	r2, [r3, #0]
 8001a40:	1dbb      	adds	r3, r7, #6
 8001a42:	1c0a      	adds	r2, r1, #0
 8001a44:	701a      	strb	r2, [r3, #0]
	switch(colum){
 8001a46:	1dbb      	adds	r3, r7, #6
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	3b03      	subs	r3, #3
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d81c      	bhi.n	8001a8a <MATRIX_Interpreter+0x56>
 8001a50:	009a      	lsls	r2, r3, #2
 8001a52:	4b65      	ldr	r3, [pc, #404]	@ (8001be8 <MATRIX_Interpreter+0x1b4>)
 8001a54:	18d3      	adds	r3, r2, r3
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	469f      	mov	pc, r3
		case 3: colum = 0x04; break;
 8001a5a:	1dbb      	adds	r3, r7, #6
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	e013      	b.n	8001a8a <MATRIX_Interpreter+0x56>
		case 4: colum = 0x08; break;
 8001a62:	1dbb      	adds	r3, r7, #6
 8001a64:	2208      	movs	r2, #8
 8001a66:	701a      	strb	r2, [r3, #0]
 8001a68:	e00f      	b.n	8001a8a <MATRIX_Interpreter+0x56>
		case 5: colum = 0x10; break;
 8001a6a:	1dbb      	adds	r3, r7, #6
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e00b      	b.n	8001a8a <MATRIX_Interpreter+0x56>
		case 6: colum = 0x20; break;
 8001a72:	1dbb      	adds	r3, r7, #6
 8001a74:	2220      	movs	r2, #32
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	e007      	b.n	8001a8a <MATRIX_Interpreter+0x56>
		case 7: colum = 0x40; break;
 8001a7a:	1dbb      	adds	r3, r7, #6
 8001a7c:	2240      	movs	r2, #64	@ 0x40
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	e003      	b.n	8001a8a <MATRIX_Interpreter+0x56>
		case 8: colum = 0x80; break;
 8001a82:	1dbb      	adds	r3, r7, #6
 8001a84:	2280      	movs	r2, #128	@ 0x80
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	46c0      	nop			@ (mov r8, r8)
	}

	switch(line){
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	3b03      	subs	r3, #3
 8001a90:	2b05      	cmp	r3, #5
 8001a92:	d81c      	bhi.n	8001ace <MATRIX_Interpreter+0x9a>
 8001a94:	009a      	lsls	r2, r3, #2
 8001a96:	4b55      	ldr	r3, [pc, #340]	@ (8001bec <MATRIX_Interpreter+0x1b8>)
 8001a98:	18d3      	adds	r3, r2, r3
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	469f      	mov	pc, r3
		case 3: line = 0x04; break;
 8001a9e:	1dfb      	adds	r3, r7, #7
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	e013      	b.n	8001ace <MATRIX_Interpreter+0x9a>
		case 4: line = 0x08; break;
 8001aa6:	1dfb      	adds	r3, r7, #7
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e00f      	b.n	8001ace <MATRIX_Interpreter+0x9a>
		case 5: line = 0x10; break;
 8001aae:	1dfb      	adds	r3, r7, #7
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	e00b      	b.n	8001ace <MATRIX_Interpreter+0x9a>
		case 6: line = 0x20; break;
 8001ab6:	1dfb      	adds	r3, r7, #7
 8001ab8:	2220      	movs	r2, #32
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	e007      	b.n	8001ace <MATRIX_Interpreter+0x9a>
		case 7: line = 0x40; break;
 8001abe:	1dfb      	adds	r3, r7, #7
 8001ac0:	2240      	movs	r2, #64	@ 0x40
 8001ac2:	701a      	strb	r2, [r3, #0]
 8001ac4:	e003      	b.n	8001ace <MATRIX_Interpreter+0x9a>
		case 8: line = 0x80; break;
 8001ac6:	1dfb      	adds	r3, r7, #7
 8001ac8:	2280      	movs	r2, #128	@ 0x80
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	46c0      	nop			@ (mov r8, r8)
	}

	table[0][0] = (colum >> 0) & 1;
 8001ace:	1dbb      	adds	r3, r7, #6
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	4b45      	ldr	r3, [pc, #276]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001ada:	701a      	strb	r2, [r3, #0]
	table[0][1] = (colum >> 1) & 1;
 8001adc:	1dbb      	adds	r3, r7, #6
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b41      	ldr	r3, [pc, #260]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001aec:	705a      	strb	r2, [r3, #1]
	table[0][2] = (colum >> 2) & 1;
 8001aee:	1dbb      	adds	r3, r7, #6
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2201      	movs	r2, #1
 8001af8:	4013      	ands	r3, r2
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001afe:	709a      	strb	r2, [r3, #2]
	table[0][3] = (colum >> 3) & 1;
 8001b00:	1dbb      	adds	r3, r7, #6
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	08db      	lsrs	r3, r3, #3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b38      	ldr	r3, [pc, #224]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001b10:	70da      	strb	r2, [r3, #3]
	table[0][4] = (colum >> 4) & 1;
 8001b12:	1dbb      	adds	r3, r7, #6
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	091b      	lsrs	r3, r3, #4
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b33      	ldr	r3, [pc, #204]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001b22:	711a      	strb	r2, [r3, #4]
	table[0][5] = (colum >> 5) & 1;
 8001b24:	1dbb      	adds	r3, r7, #6
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	095b      	lsrs	r3, r3, #5
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001b34:	715a      	strb	r2, [r3, #5]
	table[0][6] = (colum >> 6) & 1;
 8001b36:	1dbb      	adds	r3, r7, #6
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	099b      	lsrs	r3, r3, #6
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4013      	ands	r3, r2
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001b46:	719a      	strb	r2, [r3, #6]
	table[0][7] = (colum >> 7) & 1;
 8001b48:	1dbb      	adds	r3, r7, #6
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	09db      	lsrs	r3, r3, #7
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001b52:	71da      	strb	r2, [r3, #7]

	table[1][0] = (line >> 0) & 1;
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001b60:	721a      	strb	r2, [r3, #8]
	table[1][1] = (line >> 1) & 1;
 8001b62:	1dfb      	adds	r3, r7, #7
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001b72:	725a      	strb	r2, [r3, #9]
	table[1][2] = (line >> 2) & 1;
 8001b74:	1dfb      	adds	r3, r7, #7
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4013      	ands	r3, r2
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001b84:	729a      	strb	r2, [r3, #10]
	table[1][3] = (line >> 3) & 1;
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	08db      	lsrs	r3, r3, #3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4013      	ands	r3, r2
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001b96:	72da      	strb	r2, [r3, #11]
	table[1][4] = (line >> 4) & 1;
 8001b98:	1dfb      	adds	r3, r7, #7
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	091b      	lsrs	r3, r3, #4
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001ba8:	731a      	strb	r2, [r3, #12]
	table[1][5] = (line >> 5) & 1;
 8001baa:	1dfb      	adds	r3, r7, #7
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001bba:	735a      	strb	r2, [r3, #13]
	table[1][6] = (line >> 6) & 1;
 8001bbc:	1dfb      	adds	r3, r7, #7
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	099b      	lsrs	r3, r3, #6
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001bcc:	739a      	strb	r2, [r3, #14]
	table[1][7] = (line >> 7) & 1;
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	09db      	lsrs	r3, r3, #7
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <MATRIX_Interpreter+0x1bc>)
 8001bd8:	73da      	strb	r2, [r3, #15]

	MATRIX_Control();
 8001bda:	f000 f80b 	bl	8001bf4 <MATRIX_Control>
}
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	08004e64 	.word	0x08004e64
 8001bec:	08004e7c 	.word	0x08004e7c
 8001bf0:	200000dc 	.word	0x200000dc

08001bf4 <MATRIX_Control>:
void MATRIX_Control(void){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
	for(int i = 0; i <= 8; ++i){
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	e00e      	b.n	8001c1e <MATRIX_Control+0x2a>
		if(table[0][i] == 1){
 8001c00:	4a11      	ldr	r2, [pc, #68]	@ (8001c48 <MATRIX_Control+0x54>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	18d3      	adds	r3, r2, r3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <MATRIX_Control+0x24>
			table[0][i + 1] = 1;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	4a0d      	ldr	r2, [pc, #52]	@ (8001c48 <MATRIX_Control+0x54>)
 8001c12:	2101      	movs	r1, #1
 8001c14:	54d1      	strb	r1, [r2, r3]
			break;
 8001c16:	e005      	b.n	8001c24 <MATRIX_Control+0x30>
	for(int i = 0; i <= 8; ++i){
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	dded      	ble.n	8001c00 <MATRIX_Control+0xc>
		}
	}

	for(int i = 0; i <= 8; ++i){
 8001c24:	2300      	movs	r3, #0
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	e013      	b.n	8001c52 <MATRIX_Control+0x5e>
		if(table[1][i] == 1){
 8001c2a:	4a07      	ldr	r2, [pc, #28]	@ (8001c48 <MATRIX_Control+0x54>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	18d3      	adds	r3, r2, r3
 8001c30:	3308      	adds	r3, #8
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d109      	bne.n	8001c4c <MATRIX_Control+0x58>
			table[1][i + 1] = 1;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	4a02      	ldr	r2, [pc, #8]	@ (8001c48 <MATRIX_Control+0x54>)
 8001c3e:	18d3      	adds	r3, r2, r3
 8001c40:	2201      	movs	r2, #1
 8001c42:	721a      	strb	r2, [r3, #8]
			break;
 8001c44:	e008      	b.n	8001c58 <MATRIX_Control+0x64>
 8001c46:	46c0      	nop			@ (mov r8, r8)
 8001c48:	200000dc 	.word	0x200000dc
	for(int i = 0; i <= 8; ++i){
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	dde8      	ble.n	8001c2a <MATRIX_Control+0x36>
		}
	}

	Pinout.P0  = !(table[0][0]);
 8001c58:	4be1      	ldr	r3, [pc, #900]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	425a      	negs	r2, r3
 8001c5e:	4153      	adcs	r3, r2
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4be0      	ldr	r3, [pc, #896]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001c64:	2101      	movs	r1, #1
 8001c66:	400a      	ands	r2, r1
 8001c68:	0010      	movs	r0, r2
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	438a      	bics	r2, r1
 8001c70:	1c11      	adds	r1, r2, #0
 8001c72:	1c02      	adds	r2, r0, #0
 8001c74:	430a      	orrs	r2, r1
 8001c76:	701a      	strb	r2, [r3, #0]
	Pinout.P1  = !(table[0][1]);
 8001c78:	4bd9      	ldr	r3, [pc, #868]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	425a      	negs	r2, r3
 8001c7e:	4153      	adcs	r3, r2
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4bd8      	ldr	r3, [pc, #864]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001c84:	2101      	movs	r1, #1
 8001c86:	400a      	ands	r2, r1
 8001c88:	1890      	adds	r0, r2, r2
 8001c8a:	781a      	ldrb	r2, [r3, #0]
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	438a      	bics	r2, r1
 8001c90:	1c11      	adds	r1, r2, #0
 8001c92:	1c02      	adds	r2, r0, #0
 8001c94:	430a      	orrs	r2, r1
 8001c96:	701a      	strb	r2, [r3, #0]
	Pinout.P2  = !(table[0][2]);
 8001c98:	4bd1      	ldr	r3, [pc, #836]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001c9a:	789b      	ldrb	r3, [r3, #2]
 8001c9c:	425a      	negs	r2, r3
 8001c9e:	4153      	adcs	r3, r2
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4bd0      	ldr	r3, [pc, #832]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	0090      	lsls	r0, r2, #2
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	2104      	movs	r1, #4
 8001cae:	438a      	bics	r2, r1
 8001cb0:	1c11      	adds	r1, r2, #0
 8001cb2:	1c02      	adds	r2, r0, #0
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	701a      	strb	r2, [r3, #0]
	Pinout.P3  = !(table[0][3]);
 8001cb8:	4bc9      	ldr	r3, [pc, #804]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001cba:	78db      	ldrb	r3, [r3, #3]
 8001cbc:	425a      	negs	r2, r3
 8001cbe:	4153      	adcs	r3, r2
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4bc8      	ldr	r3, [pc, #800]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	00d0      	lsls	r0, r2, #3
 8001cca:	781a      	ldrb	r2, [r3, #0]
 8001ccc:	2108      	movs	r1, #8
 8001cce:	438a      	bics	r2, r1
 8001cd0:	1c11      	adds	r1, r2, #0
 8001cd2:	1c02      	adds	r2, r0, #0
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	701a      	strb	r2, [r3, #0]
	Pinout.P4  = !(table[0][4]);
 8001cd8:	4bc1      	ldr	r3, [pc, #772]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001cda:	791b      	ldrb	r3, [r3, #4]
 8001cdc:	425a      	negs	r2, r3
 8001cde:	4153      	adcs	r3, r2
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4bc0      	ldr	r3, [pc, #768]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	400a      	ands	r2, r1
 8001ce8:	0110      	lsls	r0, r2, #4
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	2110      	movs	r1, #16
 8001cee:	438a      	bics	r2, r1
 8001cf0:	1c11      	adds	r1, r2, #0
 8001cf2:	1c02      	adds	r2, r0, #0
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	701a      	strb	r2, [r3, #0]
	Pinout.P5  = !(table[0][5]);
 8001cf8:	4bb9      	ldr	r3, [pc, #740]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001cfa:	795b      	ldrb	r3, [r3, #5]
 8001cfc:	425a      	negs	r2, r3
 8001cfe:	4153      	adcs	r3, r2
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4bb8      	ldr	r3, [pc, #736]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	400a      	ands	r2, r1
 8001d08:	0150      	lsls	r0, r2, #5
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	2120      	movs	r1, #32
 8001d0e:	438a      	bics	r2, r1
 8001d10:	1c11      	adds	r1, r2, #0
 8001d12:	1c02      	adds	r2, r0, #0
 8001d14:	430a      	orrs	r2, r1
 8001d16:	701a      	strb	r2, [r3, #0]
	Pinout.P6  = !(table[0][6]);
 8001d18:	4bb1      	ldr	r3, [pc, #708]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001d1a:	799b      	ldrb	r3, [r3, #6]
 8001d1c:	425a      	negs	r2, r3
 8001d1e:	4153      	adcs	r3, r2
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4bb0      	ldr	r3, [pc, #704]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001d24:	2101      	movs	r1, #1
 8001d26:	400a      	ands	r2, r1
 8001d28:	0190      	lsls	r0, r2, #6
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	2140      	movs	r1, #64	@ 0x40
 8001d2e:	438a      	bics	r2, r1
 8001d30:	1c11      	adds	r1, r2, #0
 8001d32:	1c02      	adds	r2, r0, #0
 8001d34:	430a      	orrs	r2, r1
 8001d36:	701a      	strb	r2, [r3, #0]
	Pinout.P7  = !(table[0][7]);
 8001d38:	4ba9      	ldr	r3, [pc, #676]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001d3a:	79db      	ldrb	r3, [r3, #7]
 8001d3c:	425a      	negs	r2, r3
 8001d3e:	4153      	adcs	r3, r2
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4ba8      	ldr	r3, [pc, #672]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001d44:	01d0      	lsls	r0, r2, #7
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	217f      	movs	r1, #127	@ 0x7f
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	1c11      	adds	r1, r2, #0
 8001d4e:	1c02      	adds	r2, r0, #0
 8001d50:	430a      	orrs	r2, r1
 8001d52:	701a      	strb	r2, [r3, #0]

	Pinout.P8  = table[1][0];
 8001d54:	4ba2      	ldr	r3, [pc, #648]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001d56:	7a1b      	ldrb	r3, [r3, #8]
 8001d58:	1c1a      	adds	r2, r3, #0
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	4ba0      	ldr	r3, [pc, #640]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001d62:	2101      	movs	r1, #1
 8001d64:	400a      	ands	r2, r1
 8001d66:	0010      	movs	r0, r2
 8001d68:	785a      	ldrb	r2, [r3, #1]
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	438a      	bics	r2, r1
 8001d6e:	1c11      	adds	r1, r2, #0
 8001d70:	1c02      	adds	r2, r0, #0
 8001d72:	430a      	orrs	r2, r1
 8001d74:	705a      	strb	r2, [r3, #1]
	Pinout.P9  = table[1][1];
 8001d76:	4b9a      	ldr	r3, [pc, #616]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001d78:	7a5b      	ldrb	r3, [r3, #9]
 8001d7a:	1c1a      	adds	r2, r3, #0
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b98      	ldr	r3, [pc, #608]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	400a      	ands	r2, r1
 8001d88:	1890      	adds	r0, r2, r2
 8001d8a:	785a      	ldrb	r2, [r3, #1]
 8001d8c:	2102      	movs	r1, #2
 8001d8e:	438a      	bics	r2, r1
 8001d90:	1c11      	adds	r1, r2, #0
 8001d92:	1c02      	adds	r2, r0, #0
 8001d94:	430a      	orrs	r2, r1
 8001d96:	705a      	strb	r2, [r3, #1]
	Pinout.P10 = table[1][2];
 8001d98:	4b91      	ldr	r3, [pc, #580]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001d9a:	7a9b      	ldrb	r3, [r3, #10]
 8001d9c:	1c1a      	adds	r2, r3, #0
 8001d9e:	2301      	movs	r3, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	4b8f      	ldr	r3, [pc, #572]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001da6:	2101      	movs	r1, #1
 8001da8:	400a      	ands	r2, r1
 8001daa:	0090      	lsls	r0, r2, #2
 8001dac:	785a      	ldrb	r2, [r3, #1]
 8001dae:	2104      	movs	r1, #4
 8001db0:	438a      	bics	r2, r1
 8001db2:	1c11      	adds	r1, r2, #0
 8001db4:	1c02      	adds	r2, r0, #0
 8001db6:	430a      	orrs	r2, r1
 8001db8:	705a      	strb	r2, [r3, #1]
	Pinout.P11 = table[1][3];
 8001dba:	4b89      	ldr	r3, [pc, #548]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001dbc:	7adb      	ldrb	r3, [r3, #11]
 8001dbe:	1c1a      	adds	r2, r3, #0
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b87      	ldr	r3, [pc, #540]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001dc8:	2101      	movs	r1, #1
 8001dca:	400a      	ands	r2, r1
 8001dcc:	00d0      	lsls	r0, r2, #3
 8001dce:	785a      	ldrb	r2, [r3, #1]
 8001dd0:	2108      	movs	r1, #8
 8001dd2:	438a      	bics	r2, r1
 8001dd4:	1c11      	adds	r1, r2, #0
 8001dd6:	1c02      	adds	r2, r0, #0
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	705a      	strb	r2, [r3, #1]
	Pinout.P12 = table[1][4];
 8001ddc:	4b80      	ldr	r3, [pc, #512]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001dde:	7b1b      	ldrb	r3, [r3, #12]
 8001de0:	1c1a      	adds	r2, r3, #0
 8001de2:	2301      	movs	r3, #1
 8001de4:	4013      	ands	r3, r2
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	4b7e      	ldr	r3, [pc, #504]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001dea:	2101      	movs	r1, #1
 8001dec:	400a      	ands	r2, r1
 8001dee:	0110      	lsls	r0, r2, #4
 8001df0:	785a      	ldrb	r2, [r3, #1]
 8001df2:	2110      	movs	r1, #16
 8001df4:	438a      	bics	r2, r1
 8001df6:	1c11      	adds	r1, r2, #0
 8001df8:	1c02      	adds	r2, r0, #0
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	705a      	strb	r2, [r3, #1]
	Pinout.P13 = table[1][5];
 8001dfe:	4b78      	ldr	r3, [pc, #480]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001e00:	7b5b      	ldrb	r3, [r3, #13]
 8001e02:	1c1a      	adds	r2, r3, #0
 8001e04:	2301      	movs	r3, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4b76      	ldr	r3, [pc, #472]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	400a      	ands	r2, r1
 8001e10:	0150      	lsls	r0, r2, #5
 8001e12:	785a      	ldrb	r2, [r3, #1]
 8001e14:	2120      	movs	r1, #32
 8001e16:	438a      	bics	r2, r1
 8001e18:	1c11      	adds	r1, r2, #0
 8001e1a:	1c02      	adds	r2, r0, #0
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	705a      	strb	r2, [r3, #1]
	Pinout.P14 = table[1][6];
 8001e20:	4b6f      	ldr	r3, [pc, #444]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001e22:	7b9b      	ldrb	r3, [r3, #14]
 8001e24:	1c1a      	adds	r2, r3, #0
 8001e26:	2301      	movs	r3, #1
 8001e28:	4013      	ands	r3, r2
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	4b6d      	ldr	r3, [pc, #436]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	400a      	ands	r2, r1
 8001e32:	0190      	lsls	r0, r2, #6
 8001e34:	785a      	ldrb	r2, [r3, #1]
 8001e36:	2140      	movs	r1, #64	@ 0x40
 8001e38:	438a      	bics	r2, r1
 8001e3a:	1c11      	adds	r1, r2, #0
 8001e3c:	1c02      	adds	r2, r0, #0
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	705a      	strb	r2, [r3, #1]
	Pinout.P15 = table[1][7];
 8001e42:	4b67      	ldr	r3, [pc, #412]	@ (8001fe0 <MATRIX_Control+0x3ec>)
 8001e44:	7bdb      	ldrb	r3, [r3, #15]
 8001e46:	1c1a      	adds	r2, r3, #0
 8001e48:	2301      	movs	r3, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4b65      	ldr	r3, [pc, #404]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001e50:	01d0      	lsls	r0, r2, #7
 8001e52:	785a      	ldrb	r2, [r3, #1]
 8001e54:	217f      	movs	r1, #127	@ 0x7f
 8001e56:	400a      	ands	r2, r1
 8001e58:	1c11      	adds	r1, r2, #0
 8001e5a:	1c02      	adds	r2, r0, #0
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	705a      	strb	r2, [r3, #1]


	HAL_GPIO_WritePin(LINE_1_GPIO_Port, LINE_1_Pin, Pinout.P0);
 8001e60:	4b60      	ldr	r3, [pc, #384]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	07db      	lsls	r3, r3, #31
 8001e66:	0fdb      	lsrs	r3, r3, #31
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	485d      	ldr	r0, [pc, #372]	@ (8001fe8 <MATRIX_Control+0x3f4>)
 8001e72:	0019      	movs	r1, r3
 8001e74:	f000 fe3a 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_2_GPIO_Port, LINE_2_Pin, Pinout.P1);
 8001e78:	4b5a      	ldr	r3, [pc, #360]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	079b      	lsls	r3, r3, #30
 8001e7e:	0fdb      	lsrs	r3, r3, #31
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	001a      	movs	r2, r3
 8001e84:	4b58      	ldr	r3, [pc, #352]	@ (8001fe8 <MATRIX_Control+0x3f4>)
 8001e86:	2140      	movs	r1, #64	@ 0x40
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 fe2f 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_3_GPIO_Port, LINE_3_Pin, Pinout.P2);
 8001e8e:	4b55      	ldr	r3, [pc, #340]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	075b      	lsls	r3, r3, #29
 8001e94:	0fdb      	lsrs	r3, r3, #31
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	001a      	movs	r2, r3
 8001e9a:	4b53      	ldr	r3, [pc, #332]	@ (8001fe8 <MATRIX_Control+0x3f4>)
 8001e9c:	2120      	movs	r1, #32
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f000 fe24 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_4_GPIO_Port, LINE_4_Pin, Pinout.P3);
 8001ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	071b      	lsls	r3, r3, #28
 8001eaa:	0fdb      	lsrs	r3, r3, #31
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	001a      	movs	r2, r3
 8001eb0:	2380      	movs	r3, #128	@ 0x80
 8001eb2:	0159      	lsls	r1, r3, #5
 8001eb4:	23a0      	movs	r3, #160	@ 0xa0
 8001eb6:	05db      	lsls	r3, r3, #23
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 fe17 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_5_GPIO_Port, LINE_5_Pin, Pinout.P4);
 8001ebe:	4b49      	ldr	r3, [pc, #292]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	06db      	lsls	r3, r3, #27
 8001ec4:	0fdb      	lsrs	r3, r3, #31
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	001a      	movs	r2, r3
 8001eca:	23a0      	movs	r3, #160	@ 0xa0
 8001ecc:	05db      	lsls	r3, r3, #23
 8001ece:	2120      	movs	r1, #32
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f000 fe0b 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_6_GPIO_Port, LINE_6_Pin, Pinout.P5);
 8001ed6:	4b43      	ldr	r3, [pc, #268]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	069b      	lsls	r3, r3, #26
 8001edc:	0fdb      	lsrs	r3, r3, #31
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	23a0      	movs	r3, #160	@ 0xa0
 8001ee4:	05db      	lsls	r3, r3, #23
 8001ee6:	2140      	movs	r1, #64	@ 0x40
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f000 fdff 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_7_GPIO_Port, LINE_7_Pin, Pinout.P6);
 8001eee:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	065b      	lsls	r3, r3, #25
 8001ef4:	0fdb      	lsrs	r3, r3, #31
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	001a      	movs	r2, r3
 8001efa:	23a0      	movs	r3, #160	@ 0xa0
 8001efc:	05db      	lsls	r3, r3, #23
 8001efe:	2180      	movs	r1, #128	@ 0x80
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 fdf3 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LINE_8_GPIO_Port, LINE_8_Pin, Pinout.P7);
 8001f06:	4b37      	ldr	r3, [pc, #220]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	061b      	lsls	r3, r3, #24
 8001f0c:	0fdb      	lsrs	r3, r3, #31
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	001a      	movs	r2, r3
 8001f12:	2380      	movs	r3, #128	@ 0x80
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4834      	ldr	r0, [pc, #208]	@ (8001fe8 <MATRIX_Control+0x3f4>)
 8001f18:	0019      	movs	r1, r3
 8001f1a:	f000 fde7 	bl	8002aec <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(COL_1_GPIO_Port, COL_1_Pin, Pinout.P8);
 8001f1e:	4b31      	ldr	r3, [pc, #196]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001f20:	785b      	ldrb	r3, [r3, #1]
 8001f22:	07db      	lsls	r3, r3, #31
 8001f24:	0fdb      	lsrs	r3, r3, #31
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	001a      	movs	r2, r3
 8001f2a:	2380      	movs	r3, #128	@ 0x80
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	482f      	ldr	r0, [pc, #188]	@ (8001fec <MATRIX_Control+0x3f8>)
 8001f30:	0019      	movs	r1, r3
 8001f32:	f000 fddb 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL_2_GPIO_Port, COL_2_Pin, Pinout.P9);
 8001f36:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001f38:	785b      	ldrb	r3, [r3, #1]
 8001f3a:	079b      	lsls	r3, r3, #30
 8001f3c:	0fdb      	lsrs	r3, r3, #31
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	001a      	movs	r2, r3
 8001f42:	4b2a      	ldr	r3, [pc, #168]	@ (8001fec <MATRIX_Control+0x3f8>)
 8001f44:	2110      	movs	r1, #16
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 fdd0 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL_3_GPIO_Port, COL_3_Pin, Pinout.P10);
 8001f4c:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001f4e:	785b      	ldrb	r3, [r3, #1]
 8001f50:	075b      	lsls	r3, r3, #29
 8001f52:	0fdb      	lsrs	r3, r3, #31
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	001a      	movs	r2, r3
 8001f58:	4b24      	ldr	r3, [pc, #144]	@ (8001fec <MATRIX_Control+0x3f8>)
 8001f5a:	2120      	movs	r1, #32
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f000 fdc5 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL_4_GPIO_Port, COL_4_Pin, Pinout.P11);
 8001f62:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001f64:	785b      	ldrb	r3, [r3, #1]
 8001f66:	071b      	lsls	r3, r3, #28
 8001f68:	0fdb      	lsrs	r3, r3, #31
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fec <MATRIX_Control+0x3f8>)
 8001f70:	2108      	movs	r1, #8
 8001f72:	0018      	movs	r0, r3
 8001f74:	f000 fdba 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL_5_GPIO_Port, COL_5_Pin, Pinout.P12);
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001f7a:	785b      	ldrb	r3, [r3, #1]
 8001f7c:	06db      	lsls	r3, r3, #27
 8001f7e:	0fdb      	lsrs	r3, r3, #31
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	001a      	movs	r2, r3
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <MATRIX_Control+0x3f8>)
 8001f86:	2140      	movs	r1, #64	@ 0x40
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f000 fdaf 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL_6_GPIO_Port, COL_6_Pin, Pinout.P13);
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001f90:	785b      	ldrb	r3, [r3, #1]
 8001f92:	069b      	lsls	r3, r3, #26
 8001f94:	0fdb      	lsrs	r3, r3, #31
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	001a      	movs	r2, r3
 8001f9a:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <MATRIX_Control+0x3f4>)
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f000 fda4 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL_7_GPIO_Port, COL_7_Pin, Pinout.P14);
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001fa6:	785b      	ldrb	r3, [r3, #1]
 8001fa8:	065b      	lsls	r3, r3, #25
 8001faa:	0fdb      	lsrs	r3, r3, #31
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	001a      	movs	r2, r3
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	0099      	lsls	r1, r3, #2
 8001fb4:	23a0      	movs	r3, #160	@ 0xa0
 8001fb6:	05db      	lsls	r3, r3, #23
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f000 fd97 	bl	8002aec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COL_8_GPIO_Port, COL_8_Pin, Pinout.P15);
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <MATRIX_Control+0x3f0>)
 8001fc0:	785b      	ldrb	r3, [r3, #1]
 8001fc2:	061b      	lsls	r3, r3, #24
 8001fc4:	0fdb      	lsrs	r3, r3, #31
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	001a      	movs	r2, r3
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	0059      	lsls	r1, r3, #1
 8001fce:	23a0      	movs	r3, #160	@ 0xa0
 8001fd0:	05db      	lsls	r3, r3, #23
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f000 fd8a 	bl	8002aec <HAL_GPIO_WritePin>

}
 8001fd8:	46c0      	nop			@ (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b002      	add	sp, #8
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	200000dc 	.word	0x200000dc
 8001fe4:	200000c0 	.word	0x200000c0
 8001fe8:	50000800 	.word	0x50000800
 8001fec:	50000400 	.word	0x50000400

08001ff0 <MPU6050_StartUp>:

int MPU6050_StartUp(void){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af04      	add	r7, sp, #16
	uint8_t data_to_send = 0x00;
 8001ff6:	1dfb      	adds	r3, r7, #7
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]

	verify = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_GYRO_ADDR, 1, &data_to_send, 1, HAL_MAX_DELAY);
 8001ffc:	4827      	ldr	r0, [pc, #156]	@ (800209c <MPU6050_StartUp+0xac>)
 8001ffe:	2301      	movs	r3, #1
 8002000:	425b      	negs	r3, r3
 8002002:	9302      	str	r3, [sp, #8]
 8002004:	2301      	movs	r3, #1
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	1dfb      	adds	r3, r7, #7
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2301      	movs	r3, #1
 800200e:	221b      	movs	r2, #27
 8002010:	21d0      	movs	r1, #208	@ 0xd0
 8002012:	f000 fe2f 	bl	8002c74 <HAL_I2C_Mem_Write>
 8002016:	0003      	movs	r3, r0
 8002018:	001a      	movs	r2, r3
 800201a:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <MPU6050_StartUp+0xb0>)
 800201c:	701a      	strb	r2, [r3, #0]
	if(verify != HAL_OK) return -1;
 800201e:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <MPU6050_StartUp+0xb0>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <MPU6050_StartUp+0x3c>
 8002026:	2301      	movs	r3, #1
 8002028:	425b      	negs	r3, r3
 800202a:	e033      	b.n	8002094 <MPU6050_StartUp+0xa4>

	verify = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_ACC_ADDR, 1, &data_to_send, 1, HAL_MAX_DELAY);
 800202c:	481b      	ldr	r0, [pc, #108]	@ (800209c <MPU6050_StartUp+0xac>)
 800202e:	2301      	movs	r3, #1
 8002030:	425b      	negs	r3, r3
 8002032:	9302      	str	r3, [sp, #8]
 8002034:	2301      	movs	r3, #1
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	1dfb      	adds	r3, r7, #7
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2301      	movs	r3, #1
 800203e:	221c      	movs	r2, #28
 8002040:	21d0      	movs	r1, #208	@ 0xd0
 8002042:	f000 fe17 	bl	8002c74 <HAL_I2C_Mem_Write>
 8002046:	0003      	movs	r3, r0
 8002048:	001a      	movs	r2, r3
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <MPU6050_StartUp+0xb0>)
 800204c:	701a      	strb	r2, [r3, #0]
	if(verify != HAL_OK) return -2;
 800204e:	4b14      	ldr	r3, [pc, #80]	@ (80020a0 <MPU6050_StartUp+0xb0>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <MPU6050_StartUp+0x6c>
 8002056:	2302      	movs	r3, #2
 8002058:	425b      	negs	r3, r3
 800205a:	e01b      	b.n	8002094 <MPU6050_StartUp+0xa4>

	data_to_send = 0x00;
 800205c:	1dfb      	adds	r3, r7, #7
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]

	verify = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_CTRL, 1, &data_to_send, 1, HAL_MAX_DELAY);
 8002062:	480e      	ldr	r0, [pc, #56]	@ (800209c <MPU6050_StartUp+0xac>)
 8002064:	2301      	movs	r3, #1
 8002066:	425b      	negs	r3, r3
 8002068:	9302      	str	r3, [sp, #8]
 800206a:	2301      	movs	r3, #1
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	1dfb      	adds	r3, r7, #7
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2301      	movs	r3, #1
 8002074:	226b      	movs	r2, #107	@ 0x6b
 8002076:	21d0      	movs	r1, #208	@ 0xd0
 8002078:	f000 fdfc 	bl	8002c74 <HAL_I2C_Mem_Write>
 800207c:	0003      	movs	r3, r0
 800207e:	001a      	movs	r2, r3
 8002080:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <MPU6050_StartUp+0xb0>)
 8002082:	701a      	strb	r2, [r3, #0]
	if(verify != HAL_OK) return -3;
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <MPU6050_StartUp+0xb0>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <MPU6050_StartUp+0xa2>
 800208c:	2303      	movs	r3, #3
 800208e:	425b      	negs	r3, r3
 8002090:	e000      	b.n	8002094 <MPU6050_StartUp+0xa4>

	return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}
 800209c:	2000002c 	.word	0x2000002c
 80020a0:	200000d8 	.word	0x200000d8

080020a4 <MPU6050_GetValues>:
void MPU6050_GetValues(void){
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b08b      	sub	sp, #44	@ 0x2c
 80020a8:	af04      	add	r7, sp, #16
	uint8_t readDataAcc[6];
	uint8_t readDataGyro[6];
	uint8_t readDataTemp[2];

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR + 1, MPU6050_ACC_READ, 1, readDataAcc, 6, HAL_MAX_DELAY);
 80020aa:	4860      	ldr	r0, [pc, #384]	@ (800222c <MPU6050_GetValues+0x188>)
 80020ac:	2301      	movs	r3, #1
 80020ae:	425b      	negs	r3, r3
 80020b0:	9302      	str	r3, [sp, #8]
 80020b2:	2306      	movs	r3, #6
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	2410      	movs	r4, #16
 80020b8:	193b      	adds	r3, r7, r4
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2301      	movs	r3, #1
 80020be:	223b      	movs	r2, #59	@ 0x3b
 80020c0:	21d1      	movs	r1, #209	@ 0xd1
 80020c2:	f000 ff05 	bl	8002ed0 <HAL_I2C_Mem_Read>

	MPU6050_val.AccX = (int16_t)((readDataAcc[0] << 8) + readDataAcc[1]) / 360;
 80020c6:	193b      	adds	r3, r7, r4
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	193a      	adds	r2, r7, r4
 80020d0:	7852      	ldrb	r2, [r2, #1]
 80020d2:	189b      	adds	r3, r3, r2
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	22b4      	movs	r2, #180	@ 0xb4
 80020da:	0051      	lsls	r1, r2, #1
 80020dc:	0018      	movs	r0, r3
 80020de:	f7fe f89d 	bl	800021c <__divsi3>
 80020e2:	0003      	movs	r3, r0
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	4b52      	ldr	r3, [pc, #328]	@ (8002230 <MPU6050_GetValues+0x18c>)
 80020e8:	80da      	strh	r2, [r3, #6]
	MPU6050_val.AccY = (int16_t)((readDataAcc[2] << 8) + readDataAcc[3]) / 360;
 80020ea:	193b      	adds	r3, r7, r4
 80020ec:	789b      	ldrb	r3, [r3, #2]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	193a      	adds	r2, r7, r4
 80020f4:	78d2      	ldrb	r2, [r2, #3]
 80020f6:	189b      	adds	r3, r3, r2
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	22b4      	movs	r2, #180	@ 0xb4
 80020fe:	0051      	lsls	r1, r2, #1
 8002100:	0018      	movs	r0, r3
 8002102:	f7fe f88b 	bl	800021c <__divsi3>
 8002106:	0003      	movs	r3, r0
 8002108:	b21a      	sxth	r2, r3
 800210a:	4b49      	ldr	r3, [pc, #292]	@ (8002230 <MPU6050_GetValues+0x18c>)
 800210c:	811a      	strh	r2, [r3, #8]
	MPU6050_val.AccZ = (int16_t)((readDataAcc[4] << 8) + readDataAcc[5]) / 360;
 800210e:	193b      	adds	r3, r7, r4
 8002110:	791b      	ldrb	r3, [r3, #4]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b29b      	uxth	r3, r3
 8002116:	193a      	adds	r2, r7, r4
 8002118:	7952      	ldrb	r2, [r2, #5]
 800211a:	189b      	adds	r3, r3, r2
 800211c:	b29b      	uxth	r3, r3
 800211e:	b21b      	sxth	r3, r3
 8002120:	22b4      	movs	r2, #180	@ 0xb4
 8002122:	0051      	lsls	r1, r2, #1
 8002124:	0018      	movs	r0, r3
 8002126:	f7fe f879 	bl	800021c <__divsi3>
 800212a:	0003      	movs	r3, r0
 800212c:	b21a      	sxth	r2, r3
 800212e:	4b40      	ldr	r3, [pc, #256]	@ (8002230 <MPU6050_GetValues+0x18c>)
 8002130:	815a      	strh	r2, [r3, #10]

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR + 1, MPU6050_GYRO_READ, 1, readDataGyro, 6, HAL_MAX_DELAY);
 8002132:	483e      	ldr	r0, [pc, #248]	@ (800222c <MPU6050_GetValues+0x188>)
 8002134:	2301      	movs	r3, #1
 8002136:	425b      	negs	r3, r3
 8002138:	9302      	str	r3, [sp, #8]
 800213a:	2306      	movs	r3, #6
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	2408      	movs	r4, #8
 8002140:	193b      	adds	r3, r7, r4
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2301      	movs	r3, #1
 8002146:	2243      	movs	r2, #67	@ 0x43
 8002148:	21d1      	movs	r1, #209	@ 0xd1
 800214a:	f000 fec1 	bl	8002ed0 <HAL_I2C_Mem_Read>
	MPU6050_val.GyroX = (int16_t)((readDataGyro[0] << 8) + readDataGyro[1]) / 360;
 800214e:	193b      	adds	r3, r7, r4
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	b29b      	uxth	r3, r3
 8002156:	193a      	adds	r2, r7, r4
 8002158:	7852      	ldrb	r2, [r2, #1]
 800215a:	189b      	adds	r3, r3, r2
 800215c:	b29b      	uxth	r3, r3
 800215e:	b21b      	sxth	r3, r3
 8002160:	22b4      	movs	r2, #180	@ 0xb4
 8002162:	0051      	lsls	r1, r2, #1
 8002164:	0018      	movs	r0, r3
 8002166:	f7fe f859 	bl	800021c <__divsi3>
 800216a:	0003      	movs	r3, r0
 800216c:	b21a      	sxth	r2, r3
 800216e:	4b30      	ldr	r3, [pc, #192]	@ (8002230 <MPU6050_GetValues+0x18c>)
 8002170:	801a      	strh	r2, [r3, #0]
	MPU6050_val.GyroY = (int16_t)((readDataGyro[2] << 8) + readDataGyro[3]) / 360;
 8002172:	193b      	adds	r3, r7, r4
 8002174:	789b      	ldrb	r3, [r3, #2]
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	b29b      	uxth	r3, r3
 800217a:	193a      	adds	r2, r7, r4
 800217c:	78d2      	ldrb	r2, [r2, #3]
 800217e:	189b      	adds	r3, r3, r2
 8002180:	b29b      	uxth	r3, r3
 8002182:	b21b      	sxth	r3, r3
 8002184:	22b4      	movs	r2, #180	@ 0xb4
 8002186:	0051      	lsls	r1, r2, #1
 8002188:	0018      	movs	r0, r3
 800218a:	f7fe f847 	bl	800021c <__divsi3>
 800218e:	0003      	movs	r3, r0
 8002190:	b21a      	sxth	r2, r3
 8002192:	4b27      	ldr	r3, [pc, #156]	@ (8002230 <MPU6050_GetValues+0x18c>)
 8002194:	805a      	strh	r2, [r3, #2]
	MPU6050_val.GyroZ = (int16_t)((readDataGyro[4] << 8) + readDataGyro[5]) / 360;
 8002196:	193b      	adds	r3, r7, r4
 8002198:	791b      	ldrb	r3, [r3, #4]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b29b      	uxth	r3, r3
 800219e:	193a      	adds	r2, r7, r4
 80021a0:	7952      	ldrb	r2, [r2, #5]
 80021a2:	189b      	adds	r3, r3, r2
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	22b4      	movs	r2, #180	@ 0xb4
 80021aa:	0051      	lsls	r1, r2, #1
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7fe f835 	bl	800021c <__divsi3>
 80021b2:	0003      	movs	r3, r0
 80021b4:	b21a      	sxth	r2, r3
 80021b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <MPU6050_GetValues+0x18c>)
 80021b8:	809a      	strh	r2, [r3, #4]

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR + 1, MPU6050_TEMP_READ, 1, readDataTemp, 2, HAL_MAX_DELAY);
 80021ba:	481c      	ldr	r0, [pc, #112]	@ (800222c <MPU6050_GetValues+0x188>)
 80021bc:	2301      	movs	r3, #1
 80021be:	425b      	negs	r3, r3
 80021c0:	9302      	str	r3, [sp, #8]
 80021c2:	2302      	movs	r3, #2
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2301      	movs	r3, #1
 80021cc:	2241      	movs	r2, #65	@ 0x41
 80021ce:	21d1      	movs	r1, #209	@ 0xd1
 80021d0:	f000 fe7e 	bl	8002ed0 <HAL_I2C_Mem_Read>

	MPU6050_val.temperature = (((float)((readDataTemp[0] << 8) + readDataTemp[1])) / 340 + 36.53) / 8.0;
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	021b      	lsls	r3, r3, #8
 80021da:	1d3a      	adds	r2, r7, #4
 80021dc:	7852      	ldrb	r2, [r2, #1]
 80021de:	189b      	adds	r3, r3, r2
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7fe fa1d 	bl	8000620 <__aeabi_i2f>
 80021e6:	1c03      	adds	r3, r0, #0
 80021e8:	4912      	ldr	r1, [pc, #72]	@ (8002234 <MPU6050_GetValues+0x190>)
 80021ea:	1c18      	adds	r0, r3, #0
 80021ec:	f7fe f902 	bl	80003f4 <__aeabi_fdiv>
 80021f0:	1c03      	adds	r3, r0, #0
 80021f2:	1c18      	adds	r0, r3, #0
 80021f4:	f7ff f942 	bl	800147c <__aeabi_f2d>
 80021f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002238 <MPU6050_GetValues+0x194>)
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <MPU6050_GetValues+0x198>)
 80021fc:	f7fe fa60 	bl	80006c0 <__aeabi_dadd>
 8002200:	0002      	movs	r2, r0
 8002202:	000b      	movs	r3, r1
 8002204:	0010      	movs	r0, r2
 8002206:	0019      	movs	r1, r3
 8002208:	2200      	movs	r2, #0
 800220a:	4b0d      	ldr	r3, [pc, #52]	@ (8002240 <MPU6050_GetValues+0x19c>)
 800220c:	f7fe fe1e 	bl	8000e4c <__aeabi_ddiv>
 8002210:	0002      	movs	r2, r0
 8002212:	000b      	movs	r3, r1
 8002214:	0010      	movs	r0, r2
 8002216:	0019      	movs	r1, r3
 8002218:	f7ff f978 	bl	800150c <__aeabi_d2f>
 800221c:	1c02      	adds	r2, r0, #0
 800221e:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <MPU6050_GetValues+0x18c>)
 8002220:	60da      	str	r2, [r3, #12]
}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	46bd      	mov	sp, r7
 8002226:	b007      	add	sp, #28
 8002228:	bd90      	pop	{r4, r7, pc}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	2000002c 	.word	0x2000002c
 8002230:	200000c8 	.word	0x200000c8
 8002234:	43aa0000 	.word	0x43aa0000
 8002238:	0a3d70a4 	.word	0x0a3d70a4
 800223c:	404243d7 	.word	0x404243d7
 8002240:	40200000 	.word	0x40200000

08002244 <StateMachine>:

void StateMachine(void){
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0

	if(MPU6050_val.AccX > 10) mode = UP;
 8002248:	4b43      	ldr	r3, [pc, #268]	@ (8002358 <StateMachine+0x114>)
 800224a:	2206      	movs	r2, #6
 800224c:	5e9b      	ldrsh	r3, [r3, r2]
 800224e:	2b0a      	cmp	r3, #10
 8002250:	dd03      	ble.n	800225a <StateMachine+0x16>
 8002252:	4b42      	ldr	r3, [pc, #264]	@ (800235c <StateMachine+0x118>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e01d      	b.n	8002296 <StateMachine+0x52>
	else if (MPU6050_val.AccX < -10) mode = DOWN;
 800225a:	4b3f      	ldr	r3, [pc, #252]	@ (8002358 <StateMachine+0x114>)
 800225c:	2206      	movs	r2, #6
 800225e:	5e9b      	ldrsh	r3, [r3, r2]
 8002260:	330a      	adds	r3, #10
 8002262:	da03      	bge.n	800226c <StateMachine+0x28>
 8002264:	4b3d      	ldr	r3, [pc, #244]	@ (800235c <StateMachine+0x118>)
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e014      	b.n	8002296 <StateMachine+0x52>
	else if (MPU6050_val.AccY < -10) mode = RIGHT;
 800226c:	4b3a      	ldr	r3, [pc, #232]	@ (8002358 <StateMachine+0x114>)
 800226e:	2208      	movs	r2, #8
 8002270:	5e9b      	ldrsh	r3, [r3, r2]
 8002272:	330a      	adds	r3, #10
 8002274:	da03      	bge.n	800227e <StateMachine+0x3a>
 8002276:	4b39      	ldr	r3, [pc, #228]	@ (800235c <StateMachine+0x118>)
 8002278:	2204      	movs	r2, #4
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	e00b      	b.n	8002296 <StateMachine+0x52>
	else if(MPU6050_val.AccY > 10) mode = LEFT;
 800227e:	4b36      	ldr	r3, [pc, #216]	@ (8002358 <StateMachine+0x114>)
 8002280:	2208      	movs	r2, #8
 8002282:	5e9b      	ldrsh	r3, [r3, r2]
 8002284:	2b0a      	cmp	r3, #10
 8002286:	dd03      	ble.n	8002290 <StateMachine+0x4c>
 8002288:	4b34      	ldr	r3, [pc, #208]	@ (800235c <StateMachine+0x118>)
 800228a:	2203      	movs	r2, #3
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	e002      	b.n	8002296 <StateMachine+0x52>
	else mode = STOPED;
 8002290:	4b32      	ldr	r3, [pc, #200]	@ (800235c <StateMachine+0x118>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]

	switch(mode){
 8002296:	4b31      	ldr	r3, [pc, #196]	@ (800235c <StateMachine+0x118>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b04      	cmp	r3, #4
 800229c:	d850      	bhi.n	8002340 <StateMachine+0xfc>
 800229e:	009a      	lsls	r2, r3, #2
 80022a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002360 <StateMachine+0x11c>)
 80022a2:	18d3      	adds	r3, r2, r3
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	469f      	mov	pc, r3
//		case UP: 	if(pointY <= 6) pointX++; break;
//		case DOWN:  if(pointY >= 2) pointX--; break;
//		case LEFT:  if(pointX >= 2) pointY++; break;
//		case RIGHT: if(pointX <= 6) pointY--; break;
		case UP:
			pointX--;
 80022a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002364 <StateMachine+0x120>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002364 <StateMachine+0x120>)
 80022b2:	701a      	strb	r2, [r3, #0]
			if(pointX <= 1) pointX = 1;
 80022b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002364 <StateMachine+0x120>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d83a      	bhi.n	8002332 <StateMachine+0xee>
 80022bc:	4b29      	ldr	r3, [pc, #164]	@ (8002364 <StateMachine+0x120>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
			break;
 80022c2:	e036      	b.n	8002332 <StateMachine+0xee>

		case DOWN:
			pointX++;
 80022c4:	4b27      	ldr	r3, [pc, #156]	@ (8002364 <StateMachine+0x120>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	3301      	adds	r3, #1
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	4b25      	ldr	r3, [pc, #148]	@ (8002364 <StateMachine+0x120>)
 80022ce:	701a      	strb	r2, [r3, #0]
			if(pointX >= 7) pointX = 7;
 80022d0:	4b24      	ldr	r3, [pc, #144]	@ (8002364 <StateMachine+0x120>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d92e      	bls.n	8002336 <StateMachine+0xf2>
 80022d8:	4b22      	ldr	r3, [pc, #136]	@ (8002364 <StateMachine+0x120>)
 80022da:	2207      	movs	r2, #7
 80022dc:	701a      	strb	r2, [r3, #0]
			break;
 80022de:	e02a      	b.n	8002336 <StateMachine+0xf2>

		case LEFT:
			pointY--;
 80022e0:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <StateMachine+0x124>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002368 <StateMachine+0x124>)
 80022ea:	701a      	strb	r2, [r3, #0]
			if(pointY <= 1) pointY = 1;
 80022ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002368 <StateMachine+0x124>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d822      	bhi.n	800233a <StateMachine+0xf6>
 80022f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002368 <StateMachine+0x124>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
			break;
 80022fa:	e01e      	b.n	800233a <StateMachine+0xf6>

		case RIGHT:
			pointY++;
 80022fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002368 <StateMachine+0x124>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	b2da      	uxtb	r2, r3
 8002304:	4b18      	ldr	r3, [pc, #96]	@ (8002368 <StateMachine+0x124>)
 8002306:	701a      	strb	r2, [r3, #0]
			if(pointY >= 7) pointY = 7;
 8002308:	4b17      	ldr	r3, [pc, #92]	@ (8002368 <StateMachine+0x124>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b06      	cmp	r3, #6
 800230e:	d916      	bls.n	800233e <StateMachine+0xfa>
 8002310:	4b15      	ldr	r3, [pc, #84]	@ (8002368 <StateMachine+0x124>)
 8002312:	2207      	movs	r2, #7
 8002314:	701a      	strb	r2, [r3, #0]
			break;
 8002316:	e012      	b.n	800233e <StateMachine+0xfa>

		case STOPED:
			pointY = pointY;
 8002318:	4b13      	ldr	r3, [pc, #76]	@ (8002368 <StateMachine+0x124>)
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <StateMachine+0x124>)
 800231e:	701a      	strb	r2, [r3, #0]
			pointX = pointX;
 8002320:	4b10      	ldr	r3, [pc, #64]	@ (8002364 <StateMachine+0x120>)
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	4b0f      	ldr	r3, [pc, #60]	@ (8002364 <StateMachine+0x120>)
 8002326:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim6);
 8002328:	4b10      	ldr	r3, [pc, #64]	@ (800236c <StateMachine+0x128>)
 800232a:	0018      	movs	r0, r3
 800232c:	f002 faf4 	bl	8004918 <HAL_TIM_Base_Start_IT>
			break;
 8002330:	e006      	b.n	8002340 <StateMachine+0xfc>
			break;
 8002332:	46c0      	nop			@ (mov r8, r8)
 8002334:	e004      	b.n	8002340 <StateMachine+0xfc>
			break;
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	e002      	b.n	8002340 <StateMachine+0xfc>
			break;
 800233a:	46c0      	nop			@ (mov r8, r8)
 800233c:	e000      	b.n	8002340 <StateMachine+0xfc>
			break;
 800233e:	46c0      	nop			@ (mov r8, r8)
	}

	if(mode != STOPED){
 8002340:	4b06      	ldr	r3, [pc, #24]	@ (800235c <StateMachine+0x118>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <StateMachine+0x10c>
		HAL_TIM_Base_Stop_IT(&htim6);
 8002348:	4b08      	ldr	r3, [pc, #32]	@ (800236c <StateMachine+0x128>)
 800234a:	0018      	movs	r0, r3
 800234c:	f002 fb30 	bl	80049b0 <HAL_TIM_Base_Stop_IT>
	}
}
 8002350:	46c0      	nop			@ (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	200000c8 	.word	0x200000c8
 800235c:	200000c4 	.word	0x200000c4
 8002360:	08004e94 	.word	0x08004e94
 8002364:	20000000 	.word	0x20000000
 8002368:	20000001 	.word	0x20000001
 800236c:	20000080 	.word	0x20000080

08002370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002374:	b672      	cpsid	i
}
 8002376:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002378:	46c0      	nop			@ (mov r8, r8)
 800237a:	e7fd      	b.n	8002378 <Error_Handler+0x8>

0800237c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002380:	4b07      	ldr	r3, [pc, #28]	@ (80023a0 <HAL_MspInit+0x24>)
 8002382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002384:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_MspInit+0x24>)
 8002386:	2101      	movs	r1, #1
 8002388:	430a      	orrs	r2, r1
 800238a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <HAL_MspInit+0x24>)
 800238e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002390:	4b03      	ldr	r3, [pc, #12]	@ (80023a0 <HAL_MspInit+0x24>)
 8002392:	2180      	movs	r1, #128	@ 0x80
 8002394:	0549      	lsls	r1, r1, #21
 8002396:	430a      	orrs	r2, r1
 8002398:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b089      	sub	sp, #36	@ 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	240c      	movs	r4, #12
 80023ae:	193b      	adds	r3, r7, r4
 80023b0:	0018      	movs	r0, r3
 80023b2:	2314      	movs	r3, #20
 80023b4:	001a      	movs	r2, r3
 80023b6:	2100      	movs	r1, #0
 80023b8:	f002 fcbe 	bl	8004d38 <memset>
  if(hi2c->Instance==I2C1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a18      	ldr	r2, [pc, #96]	@ (8002424 <HAL_I2C_MspInit+0x80>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d129      	bne.n	800241a <HAL_I2C_MspInit+0x76>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c6:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <HAL_I2C_MspInit+0x84>)
 80023c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ca:	4b17      	ldr	r3, [pc, #92]	@ (8002428 <HAL_I2C_MspInit+0x84>)
 80023cc:	2102      	movs	r1, #2
 80023ce:	430a      	orrs	r2, r1
 80023d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023d2:	4b15      	ldr	r3, [pc, #84]	@ (8002428 <HAL_I2C_MspInit+0x84>)
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	2202      	movs	r2, #2
 80023d8:	4013      	ands	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023de:	193b      	adds	r3, r7, r4
 80023e0:	22c0      	movs	r2, #192	@ 0xc0
 80023e2:	0092      	lsls	r2, r2, #2
 80023e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e6:	0021      	movs	r1, r4
 80023e8:	187b      	adds	r3, r7, r1
 80023ea:	2212      	movs	r2, #18
 80023ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f4:	187b      	adds	r3, r7, r1
 80023f6:	2203      	movs	r2, #3
 80023f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023fa:	187b      	adds	r3, r7, r1
 80023fc:	2204      	movs	r2, #4
 80023fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002400:	187b      	adds	r3, r7, r1
 8002402:	4a0a      	ldr	r2, [pc, #40]	@ (800242c <HAL_I2C_MspInit+0x88>)
 8002404:	0019      	movs	r1, r3
 8002406:	0010      	movs	r0, r2
 8002408:	f000 f9fa 	bl	8002800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_I2C_MspInit+0x84>)
 800240e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002410:	4b05      	ldr	r3, [pc, #20]	@ (8002428 <HAL_I2C_MspInit+0x84>)
 8002412:	2180      	movs	r1, #128	@ 0x80
 8002414:	0389      	lsls	r1, r1, #14
 8002416:	430a      	orrs	r2, r1
 8002418:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	b009      	add	sp, #36	@ 0x24
 8002420:	bd90      	pop	{r4, r7, pc}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	40005400 	.word	0x40005400
 8002428:	40021000 	.word	0x40021000
 800242c:	50000400 	.word	0x50000400

08002430 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0a      	ldr	r2, [pc, #40]	@ (8002468 <HAL_TIM_Base_MspInit+0x38>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d10d      	bne.n	800245e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002442:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <HAL_TIM_Base_MspInit+0x3c>)
 8002444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002446:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_TIM_Base_MspInit+0x3c>)
 8002448:	2110      	movs	r1, #16
 800244a:	430a      	orrs	r2, r1
 800244c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2100      	movs	r1, #0
 8002452:	2011      	movs	r0, #17
 8002454:	f000 f9a2 	bl	800279c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002458:	2011      	movs	r0, #17
 800245a:	f000 f9b4 	bl	80027c6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b002      	add	sp, #8
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			@ (mov r8, r8)
 8002468:	40001000 	.word	0x40001000
 800246c:	40021000 	.word	0x40021000

08002470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002474:	46c0      	nop			@ (mov r8, r8)
 8002476:	e7fd      	b.n	8002474 <NMI_Handler+0x4>

08002478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800247c:	46c0      	nop			@ (mov r8, r8)
 800247e:	e7fd      	b.n	800247c <HardFault_Handler+0x4>

08002480 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002484:	46c0      	nop			@ (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002498:	f000 f894 	bl	80025c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800249c:	46c0      	nop			@ (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024a8:	4b03      	ldr	r3, [pc, #12]	@ (80024b8 <TIM6_DAC_IRQHandler+0x14>)
 80024aa:	0018      	movs	r0, r3
 80024ac:	f002 faa6 	bl	80049fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024b0:	46c0      	nop			@ (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	20000080 	.word	0x20000080

080024bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c0:	46c0      	nop			@ (mov r8, r8)
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80024c8:	480d      	ldr	r0, [pc, #52]	@ (8002500 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80024cc:	f7ff fff6 	bl	80024bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d0:	480c      	ldr	r0, [pc, #48]	@ (8002504 <LoopForever+0x6>)
  ldr r1, =_edata
 80024d2:	490d      	ldr	r1, [pc, #52]	@ (8002508 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024d4:	4a0d      	ldr	r2, [pc, #52]	@ (800250c <LoopForever+0xe>)
  movs r3, #0
 80024d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d8:	e002      	b.n	80024e0 <LoopCopyDataInit>

080024da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024de:	3304      	adds	r3, #4

080024e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e4:	d3f9      	bcc.n	80024da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002510 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002514 <LoopForever+0x16>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024ec:	e001      	b.n	80024f2 <LoopFillZerobss>

080024ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f0:	3204      	adds	r2, #4

080024f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f4:	d3fb      	bcc.n	80024ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024f6:	f002 fc27 	bl	8004d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024fa:	f7ff f8f1 	bl	80016e0 <main>

080024fe <LoopForever>:

LoopForever:
    b LoopForever
 80024fe:	e7fe      	b.n	80024fe <LoopForever>
  ldr   r0, =_estack
 8002500:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002508:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800250c:	08004ecc 	.word	0x08004ecc
  ldr r2, =_sbss
 8002510:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002514:	200000f4 	.word	0x200000f4

08002518 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <ADC1_COMP_IRQHandler>
	...

0800251c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002522:	1dfb      	adds	r3, r7, #7
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002528:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_Init+0x3c>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <HAL_Init+0x3c>)
 800252e:	2140      	movs	r1, #64	@ 0x40
 8002530:	430a      	orrs	r2, r1
 8002532:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002534:	2000      	movs	r0, #0
 8002536:	f000 f811 	bl	800255c <HAL_InitTick>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d003      	beq.n	8002546 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800253e:	1dfb      	adds	r3, r7, #7
 8002540:	2201      	movs	r2, #1
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e001      	b.n	800254a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002546:	f7ff ff19 	bl	800237c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800254a:	1dfb      	adds	r3, r7, #7
 800254c:	781b      	ldrb	r3, [r3, #0]
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b002      	add	sp, #8
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	40022000 	.word	0x40022000

0800255c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <HAL_InitTick+0x5c>)
 8002566:	681c      	ldr	r4, [r3, #0]
 8002568:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <HAL_InitTick+0x60>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	0019      	movs	r1, r3
 800256e:	23fa      	movs	r3, #250	@ 0xfa
 8002570:	0098      	lsls	r0, r3, #2
 8002572:	f7fd fdc9 	bl	8000108 <__udivsi3>
 8002576:	0003      	movs	r3, r0
 8002578:	0019      	movs	r1, r3
 800257a:	0020      	movs	r0, r4
 800257c:	f7fd fdc4 	bl	8000108 <__udivsi3>
 8002580:	0003      	movs	r3, r0
 8002582:	0018      	movs	r0, r3
 8002584:	f000 f92f 	bl	80027e6 <HAL_SYSTICK_Config>
 8002588:	1e03      	subs	r3, r0, #0
 800258a:	d001      	beq.n	8002590 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e00f      	b.n	80025b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d80b      	bhi.n	80025ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	2301      	movs	r3, #1
 800259a:	425b      	negs	r3, r3
 800259c:	2200      	movs	r2, #0
 800259e:	0018      	movs	r0, r3
 80025a0:	f000 f8fc 	bl	800279c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_InitTick+0x64>)
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e000      	b.n	80025b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	0018      	movs	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b003      	add	sp, #12
 80025b6:	bd90      	pop	{r4, r7, pc}
 80025b8:	20000004 	.word	0x20000004
 80025bc:	2000000c 	.word	0x2000000c
 80025c0:	20000008 	.word	0x20000008

080025c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c8:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_IncTick+0x1c>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	001a      	movs	r2, r3
 80025ce:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <HAL_IncTick+0x20>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	18d2      	adds	r2, r2, r3
 80025d4:	4b03      	ldr	r3, [pc, #12]	@ (80025e4 <HAL_IncTick+0x20>)
 80025d6:	601a      	str	r2, [r3, #0]
}
 80025d8:	46c0      	nop			@ (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	2000000c 	.word	0x2000000c
 80025e4:	200000f0 	.word	0x200000f0

080025e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  return uwTick;
 80025ec:	4b02      	ldr	r3, [pc, #8]	@ (80025f8 <HAL_GetTick+0x10>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	0018      	movs	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	200000f0 	.word	0x200000f0

080025fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff fff0 	bl	80025e8 <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3301      	adds	r3, #1
 8002614:	d005      	beq.n	8002622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_Delay+0x44>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	001a      	movs	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	189b      	adds	r3, r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	f7ff ffe0 	bl	80025e8 <HAL_GetTick>
 8002628:	0002      	movs	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	429a      	cmp	r2, r3
 8002632:	d8f7      	bhi.n	8002624 <HAL_Delay+0x28>
  {
  }
}
 8002634:	46c0      	nop			@ (mov r8, r8)
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	46bd      	mov	sp, r7
 800263a:	b004      	add	sp, #16
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			@ (mov r8, r8)
 8002640:	2000000c 	.word	0x2000000c

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	0002      	movs	r2, r0
 800264c:	1dfb      	adds	r3, r7, #7
 800264e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002650:	1dfb      	adds	r3, r7, #7
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b7f      	cmp	r3, #127	@ 0x7f
 8002656:	d809      	bhi.n	800266c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002658:	1dfb      	adds	r3, r7, #7
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	001a      	movs	r2, r3
 800265e:	231f      	movs	r3, #31
 8002660:	401a      	ands	r2, r3
 8002662:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <__NVIC_EnableIRQ+0x30>)
 8002664:	2101      	movs	r1, #1
 8002666:	4091      	lsls	r1, r2
 8002668:	000a      	movs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
  }
}
 800266c:	46c0      	nop			@ (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	0002      	movs	r2, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	1dfb      	adds	r3, r7, #7
 8002684:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002686:	1dfb      	adds	r3, r7, #7
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b7f      	cmp	r3, #127	@ 0x7f
 800268c:	d828      	bhi.n	80026e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800268e:	4a2f      	ldr	r2, [pc, #188]	@ (800274c <__NVIC_SetPriority+0xd4>)
 8002690:	1dfb      	adds	r3, r7, #7
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b25b      	sxtb	r3, r3
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	33c0      	adds	r3, #192	@ 0xc0
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	589b      	ldr	r3, [r3, r2]
 800269e:	1dfa      	adds	r2, r7, #7
 80026a0:	7812      	ldrb	r2, [r2, #0]
 80026a2:	0011      	movs	r1, r2
 80026a4:	2203      	movs	r2, #3
 80026a6:	400a      	ands	r2, r1
 80026a8:	00d2      	lsls	r2, r2, #3
 80026aa:	21ff      	movs	r1, #255	@ 0xff
 80026ac:	4091      	lsls	r1, r2
 80026ae:	000a      	movs	r2, r1
 80026b0:	43d2      	mvns	r2, r2
 80026b2:	401a      	ands	r2, r3
 80026b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	22ff      	movs	r2, #255	@ 0xff
 80026bc:	401a      	ands	r2, r3
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	0018      	movs	r0, r3
 80026c4:	2303      	movs	r3, #3
 80026c6:	4003      	ands	r3, r0
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026cc:	481f      	ldr	r0, [pc, #124]	@ (800274c <__NVIC_SetPriority+0xd4>)
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	b25b      	sxtb	r3, r3
 80026d4:	089b      	lsrs	r3, r3, #2
 80026d6:	430a      	orrs	r2, r1
 80026d8:	33c0      	adds	r3, #192	@ 0xc0
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80026de:	e031      	b.n	8002744 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002750 <__NVIC_SetPriority+0xd8>)
 80026e2:	1dfb      	adds	r3, r7, #7
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	0019      	movs	r1, r3
 80026e8:	230f      	movs	r3, #15
 80026ea:	400b      	ands	r3, r1
 80026ec:	3b08      	subs	r3, #8
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	3306      	adds	r3, #6
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	18d3      	adds	r3, r2, r3
 80026f6:	3304      	adds	r3, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	1dfa      	adds	r2, r7, #7
 80026fc:	7812      	ldrb	r2, [r2, #0]
 80026fe:	0011      	movs	r1, r2
 8002700:	2203      	movs	r2, #3
 8002702:	400a      	ands	r2, r1
 8002704:	00d2      	lsls	r2, r2, #3
 8002706:	21ff      	movs	r1, #255	@ 0xff
 8002708:	4091      	lsls	r1, r2
 800270a:	000a      	movs	r2, r1
 800270c:	43d2      	mvns	r2, r2
 800270e:	401a      	ands	r2, r3
 8002710:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	22ff      	movs	r2, #255	@ 0xff
 8002718:	401a      	ands	r2, r3
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	0018      	movs	r0, r3
 8002720:	2303      	movs	r3, #3
 8002722:	4003      	ands	r3, r0
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002728:	4809      	ldr	r0, [pc, #36]	@ (8002750 <__NVIC_SetPriority+0xd8>)
 800272a:	1dfb      	adds	r3, r7, #7
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	001c      	movs	r4, r3
 8002730:	230f      	movs	r3, #15
 8002732:	4023      	ands	r3, r4
 8002734:	3b08      	subs	r3, #8
 8002736:	089b      	lsrs	r3, r3, #2
 8002738:	430a      	orrs	r2, r1
 800273a:	3306      	adds	r3, #6
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	18c3      	adds	r3, r0, r3
 8002740:	3304      	adds	r3, #4
 8002742:	601a      	str	r2, [r3, #0]
}
 8002744:	46c0      	nop			@ (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b003      	add	sp, #12
 800274a:	bd90      	pop	{r4, r7, pc}
 800274c:	e000e100 	.word	0xe000e100
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	1e5a      	subs	r2, r3, #1
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	045b      	lsls	r3, r3, #17
 8002764:	429a      	cmp	r2, r3
 8002766:	d301      	bcc.n	800276c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002768:	2301      	movs	r3, #1
 800276a:	e010      	b.n	800278e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276c:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <SysTick_Config+0x44>)
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	3a01      	subs	r2, #1
 8002772:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002774:	2301      	movs	r3, #1
 8002776:	425b      	negs	r3, r3
 8002778:	2103      	movs	r1, #3
 800277a:	0018      	movs	r0, r3
 800277c:	f7ff ff7c 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <SysTick_Config+0x44>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002786:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <SysTick_Config+0x44>)
 8002788:	2207      	movs	r2, #7
 800278a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800278c:	2300      	movs	r3, #0
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b002      	add	sp, #8
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	e000e010 	.word	0xe000e010

0800279c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	210f      	movs	r1, #15
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	1c02      	adds	r2, r0, #0
 80027ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b25b      	sxtb	r3, r3
 80027b6:	0011      	movs	r1, r2
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7ff ff5d 	bl	8002678 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b004      	add	sp, #16
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	0002      	movs	r2, r0
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d2:	1dfb      	adds	r3, r7, #7
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b25b      	sxtb	r3, r3
 80027d8:	0018      	movs	r0, r3
 80027da:	f7ff ff33 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b002      	add	sp, #8
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7ff ffaf 	bl	8002754 <SysTick_Config>
 80027f6:	0003      	movs	r3, r0
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002816:	e14f      	b.n	8002ab8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4091      	lsls	r1, r2
 8002822:	000a      	movs	r2, r1
 8002824:	4013      	ands	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d100      	bne.n	8002830 <HAL_GPIO_Init+0x30>
 800282e:	e140      	b.n	8002ab2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2203      	movs	r2, #3
 8002836:	4013      	ands	r3, r2
 8002838:	2b01      	cmp	r3, #1
 800283a:	d005      	beq.n	8002848 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2203      	movs	r2, #3
 8002842:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002844:	2b02      	cmp	r3, #2
 8002846:	d130      	bne.n	80028aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	409a      	lsls	r2, r3
 8002856:	0013      	movs	r3, r2
 8002858:	43da      	mvns	r2, r3
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	409a      	lsls	r2, r3
 800286a:	0013      	movs	r3, r2
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800287e:	2201      	movs	r2, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	409a      	lsls	r2, r3
 8002884:	0013      	movs	r3, r2
 8002886:	43da      	mvns	r2, r3
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	2201      	movs	r2, #1
 8002896:	401a      	ands	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	409a      	lsls	r2, r3
 800289c:	0013      	movs	r3, r2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2203      	movs	r2, #3
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d017      	beq.n	80028e6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2203      	movs	r2, #3
 80028c2:	409a      	lsls	r2, r3
 80028c4:	0013      	movs	r3, r2
 80028c6:	43da      	mvns	r2, r3
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4013      	ands	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	409a      	lsls	r2, r3
 80028d8:	0013      	movs	r3, r2
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2203      	movs	r2, #3
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d123      	bne.n	800293a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	08da      	lsrs	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3208      	adds	r2, #8
 80028fa:	0092      	lsls	r2, r2, #2
 80028fc:	58d3      	ldr	r3, [r2, r3]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2207      	movs	r2, #7
 8002904:	4013      	ands	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	409a      	lsls	r2, r3
 800290c:	0013      	movs	r3, r2
 800290e:	43da      	mvns	r2, r3
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2107      	movs	r1, #7
 800291e:	400b      	ands	r3, r1
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	409a      	lsls	r2, r3
 8002924:	0013      	movs	r3, r2
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	08da      	lsrs	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3208      	adds	r2, #8
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	6939      	ldr	r1, [r7, #16]
 8002938:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	2203      	movs	r2, #3
 8002946:	409a      	lsls	r2, r3
 8002948:	0013      	movs	r3, r2
 800294a:	43da      	mvns	r2, r3
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2203      	movs	r2, #3
 8002958:	401a      	ands	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	409a      	lsls	r2, r3
 8002960:	0013      	movs	r3, r2
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	23c0      	movs	r3, #192	@ 0xc0
 8002974:	029b      	lsls	r3, r3, #10
 8002976:	4013      	ands	r3, r2
 8002978:	d100      	bne.n	800297c <HAL_GPIO_Init+0x17c>
 800297a:	e09a      	b.n	8002ab2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297c:	4b54      	ldr	r3, [pc, #336]	@ (8002ad0 <HAL_GPIO_Init+0x2d0>)
 800297e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002980:	4b53      	ldr	r3, [pc, #332]	@ (8002ad0 <HAL_GPIO_Init+0x2d0>)
 8002982:	2101      	movs	r1, #1
 8002984:	430a      	orrs	r2, r1
 8002986:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002988:	4a52      	ldr	r2, [pc, #328]	@ (8002ad4 <HAL_GPIO_Init+0x2d4>)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	589b      	ldr	r3, [r3, r2]
 8002994:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2203      	movs	r2, #3
 800299a:	4013      	ands	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	409a      	lsls	r2, r3
 80029a2:	0013      	movs	r3, r2
 80029a4:	43da      	mvns	r2, r3
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	23a0      	movs	r3, #160	@ 0xa0
 80029b0:	05db      	lsls	r3, r3, #23
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d019      	beq.n	80029ea <HAL_GPIO_Init+0x1ea>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a47      	ldr	r2, [pc, #284]	@ (8002ad8 <HAL_GPIO_Init+0x2d8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_GPIO_Init+0x1e6>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a46      	ldr	r2, [pc, #280]	@ (8002adc <HAL_GPIO_Init+0x2dc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00d      	beq.n	80029e2 <HAL_GPIO_Init+0x1e2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a45      	ldr	r2, [pc, #276]	@ (8002ae0 <HAL_GPIO_Init+0x2e0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <HAL_GPIO_Init+0x1de>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a44      	ldr	r2, [pc, #272]	@ (8002ae4 <HAL_GPIO_Init+0x2e4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d101      	bne.n	80029da <HAL_GPIO_Init+0x1da>
 80029d6:	2305      	movs	r3, #5
 80029d8:	e008      	b.n	80029ec <HAL_GPIO_Init+0x1ec>
 80029da:	2306      	movs	r3, #6
 80029dc:	e006      	b.n	80029ec <HAL_GPIO_Init+0x1ec>
 80029de:	2303      	movs	r3, #3
 80029e0:	e004      	b.n	80029ec <HAL_GPIO_Init+0x1ec>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e002      	b.n	80029ec <HAL_GPIO_Init+0x1ec>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_GPIO_Init+0x1ec>
 80029ea:	2300      	movs	r3, #0
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	2103      	movs	r1, #3
 80029f0:	400a      	ands	r2, r1
 80029f2:	0092      	lsls	r2, r2, #2
 80029f4:	4093      	lsls	r3, r2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029fc:	4935      	ldr	r1, [pc, #212]	@ (8002ad4 <HAL_GPIO_Init+0x2d4>)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	089b      	lsrs	r3, r3, #2
 8002a02:	3302      	adds	r3, #2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a0a:	4b37      	ldr	r3, [pc, #220]	@ (8002ae8 <HAL_GPIO_Init+0x2e8>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43da      	mvns	r2, r3
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	2380      	movs	r3, #128	@ 0x80
 8002a20:	035b      	lsls	r3, r3, #13
 8002a22:	4013      	ands	r3, r2
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae8 <HAL_GPIO_Init+0x2e8>)
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002a34:	4b2c      	ldr	r3, [pc, #176]	@ (8002ae8 <HAL_GPIO_Init+0x2e8>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	43da      	mvns	r2, r3
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	2380      	movs	r3, #128	@ 0x80
 8002a4a:	039b      	lsls	r3, r3, #14
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a58:	4b23      	ldr	r3, [pc, #140]	@ (8002ae8 <HAL_GPIO_Init+0x2e8>)
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002a5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ae8 <HAL_GPIO_Init+0x2e8>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	43da      	mvns	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	2380      	movs	r3, #128	@ 0x80
 8002a74:	029b      	lsls	r3, r3, #10
 8002a76:	4013      	ands	r3, r2
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a82:	4b19      	ldr	r3, [pc, #100]	@ (8002ae8 <HAL_GPIO_Init+0x2e8>)
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a88:	4b17      	ldr	r3, [pc, #92]	@ (8002ae8 <HAL_GPIO_Init+0x2e8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	43da      	mvns	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	025b      	lsls	r3, r3, #9
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d003      	beq.n	8002aac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002aac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <HAL_GPIO_Init+0x2e8>)
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	40da      	lsrs	r2, r3
 8002ac0:	1e13      	subs	r3, r2, #0
 8002ac2:	d000      	beq.n	8002ac6 <HAL_GPIO_Init+0x2c6>
 8002ac4:	e6a8      	b.n	8002818 <HAL_GPIO_Init+0x18>
  }
}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	46c0      	nop			@ (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b006      	add	sp, #24
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	50000400 	.word	0x50000400
 8002adc:	50000800 	.word	0x50000800
 8002ae0:	50000c00 	.word	0x50000c00
 8002ae4:	50001c00 	.word	0x50001c00
 8002ae8:	40010400 	.word	0x40010400

08002aec <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	0008      	movs	r0, r1
 8002af6:	0011      	movs	r1, r2
 8002af8:	1cbb      	adds	r3, r7, #2
 8002afa:	1c02      	adds	r2, r0, #0
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	1c7b      	adds	r3, r7, #1
 8002b00:	1c0a      	adds	r2, r1, #0
 8002b02:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b04:	1c7b      	adds	r3, r7, #1
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d004      	beq.n	8002b16 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0c:	1cbb      	adds	r3, r7, #2
 8002b0e:	881a      	ldrh	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002b14:	e003      	b.n	8002b1e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002b16:	1cbb      	adds	r3, r7, #2
 8002b18:	881a      	ldrh	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b002      	add	sp, #8
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e08f      	b.n	8002c5a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2241      	movs	r2, #65	@ 0x41
 8002b3e:	5c9b      	ldrb	r3, [r3, r2]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d107      	bne.n	8002b56 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2240      	movs	r2, #64	@ 0x40
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7ff fc27 	bl	80023a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2241      	movs	r2, #65	@ 0x41
 8002b5a:	2124      	movs	r1, #36	@ 0x24
 8002b5c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	438a      	bics	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	493b      	ldr	r1, [pc, #236]	@ (8002c64 <HAL_I2C_Init+0x13c>)
 8002b78:	400a      	ands	r2, r1
 8002b7a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4938      	ldr	r1, [pc, #224]	@ (8002c68 <HAL_I2C_Init+0x140>)
 8002b88:	400a      	ands	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d108      	bne.n	8002ba6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2180      	movs	r1, #128	@ 0x80
 8002b9e:	0209      	lsls	r1, r1, #8
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	e007      	b.n	8002bb6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2184      	movs	r1, #132	@ 0x84
 8002bb0:	0209      	lsls	r1, r1, #8
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d109      	bne.n	8002bd2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2180      	movs	r1, #128	@ 0x80
 8002bca:	0109      	lsls	r1, r1, #4
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	605a      	str	r2, [r3, #4]
 8002bd0:	e007      	b.n	8002be2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4923      	ldr	r1, [pc, #140]	@ (8002c6c <HAL_I2C_Init+0x144>)
 8002bde:	400a      	ands	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4920      	ldr	r1, [pc, #128]	@ (8002c70 <HAL_I2C_Init+0x148>)
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	491a      	ldr	r1, [pc, #104]	@ (8002c68 <HAL_I2C_Init+0x140>)
 8002bfe:	400a      	ands	r2, r1
 8002c00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69d9      	ldr	r1, [r3, #28]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1a      	ldr	r2, [r3, #32]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2101      	movs	r1, #1
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2241      	movs	r2, #65	@ 0x41
 8002c46:	2120      	movs	r1, #32
 8002c48:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2242      	movs	r2, #66	@ 0x42
 8002c54:	2100      	movs	r1, #0
 8002c56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b002      	add	sp, #8
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	f0ffffff 	.word	0xf0ffffff
 8002c68:	ffff7fff 	.word	0xffff7fff
 8002c6c:	fffff7ff 	.word	0xfffff7ff
 8002c70:	02008000 	.word	0x02008000

08002c74 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b590      	push	{r4, r7, lr}
 8002c76:	b089      	sub	sp, #36	@ 0x24
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	000c      	movs	r4, r1
 8002c7e:	0010      	movs	r0, r2
 8002c80:	0019      	movs	r1, r3
 8002c82:	230a      	movs	r3, #10
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	1c22      	adds	r2, r4, #0
 8002c88:	801a      	strh	r2, [r3, #0]
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	1c02      	adds	r2, r0, #0
 8002c90:	801a      	strh	r2, [r3, #0]
 8002c92:	1dbb      	adds	r3, r7, #6
 8002c94:	1c0a      	adds	r2, r1, #0
 8002c96:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2241      	movs	r2, #65	@ 0x41
 8002c9c:	5c9b      	ldrb	r3, [r3, r2]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d000      	beq.n	8002ca6 <HAL_I2C_Mem_Write+0x32>
 8002ca4:	e10c      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d004      	beq.n	8002cb6 <HAL_I2C_Mem_Write+0x42>
 8002cac:	232c      	movs	r3, #44	@ 0x2c
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2280      	movs	r2, #128	@ 0x80
 8002cba:	0092      	lsls	r2, r2, #2
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e0ff      	b.n	8002ec2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2240      	movs	r2, #64	@ 0x40
 8002cc6:	5c9b      	ldrb	r3, [r3, r2]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_I2C_Mem_Write+0x5c>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e0f8      	b.n	8002ec2 <HAL_I2C_Mem_Write+0x24e>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2240      	movs	r2, #64	@ 0x40
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cd8:	f7ff fc86 	bl	80025e8 <HAL_GetTick>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ce0:	2380      	movs	r3, #128	@ 0x80
 8002ce2:	0219      	lsls	r1, r3, #8
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	2319      	movs	r3, #25
 8002cec:	2201      	movs	r2, #1
 8002cee:	f000 fc07 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	1e03      	subs	r3, r0, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0e3      	b.n	8002ec2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2241      	movs	r2, #65	@ 0x41
 8002cfe:	2121      	movs	r1, #33	@ 0x21
 8002d00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2242      	movs	r2, #66	@ 0x42
 8002d06:	2140      	movs	r1, #64	@ 0x40
 8002d08:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	222c      	movs	r2, #44	@ 0x2c
 8002d1a:	18ba      	adds	r2, r7, r2
 8002d1c:	8812      	ldrh	r2, [r2, #0]
 8002d1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d26:	1dbb      	adds	r3, r7, #6
 8002d28:	881c      	ldrh	r4, [r3, #0]
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	881a      	ldrh	r2, [r3, #0]
 8002d30:	230a      	movs	r3, #10
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	8819      	ldrh	r1, [r3, #0]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	0023      	movs	r3, r4
 8002d42:	f000 faf5 	bl	8003330 <I2C_RequestMemoryWrite>
 8002d46:	1e03      	subs	r3, r0, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2240      	movs	r2, #64	@ 0x40
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e0b5      	b.n	8002ec2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2bff      	cmp	r3, #255	@ 0xff
 8002d5e:	d911      	bls.n	8002d84 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	22ff      	movs	r2, #255	@ 0xff
 8002d64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	2380      	movs	r3, #128	@ 0x80
 8002d6e:	045c      	lsls	r4, r3, #17
 8002d70:	230a      	movs	r3, #10
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	8819      	ldrh	r1, [r3, #0]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	0023      	movs	r3, r4
 8002d7e:	f000 fd99 	bl	80038b4 <I2C_TransferConfig>
 8002d82:	e012      	b.n	8002daa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	2380      	movs	r3, #128	@ 0x80
 8002d96:	049c      	lsls	r4, r3, #18
 8002d98:	230a      	movs	r3, #10
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	8819      	ldrh	r1, [r3, #0]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	2300      	movs	r3, #0
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	0023      	movs	r3, r4
 8002da6:	f000 fd85 	bl	80038b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f000 fbfd 	bl	80035b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002db6:	1e03      	subs	r3, r0, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e081      	b.n	8002ec2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d03a      	beq.n	8002e6e <HAL_I2C_Mem_Write+0x1fa>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d136      	bne.n	8002e6e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	0013      	movs	r3, r2
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2180      	movs	r1, #128	@ 0x80
 8002e0e:	f000 fb77 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e053      	b.n	8002ec2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2bff      	cmp	r3, #255	@ 0xff
 8002e22:	d911      	bls.n	8002e48 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	22ff      	movs	r2, #255	@ 0xff
 8002e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	045c      	lsls	r4, r3, #17
 8002e34:	230a      	movs	r3, #10
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	8819      	ldrh	r1, [r3, #0]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	0023      	movs	r3, r4
 8002e42:	f000 fd37 	bl	80038b4 <I2C_TransferConfig>
 8002e46:	e012      	b.n	8002e6e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	2380      	movs	r3, #128	@ 0x80
 8002e5a:	049c      	lsls	r4, r3, #18
 8002e5c:	230a      	movs	r3, #10
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	8819      	ldrh	r1, [r3, #0]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	2300      	movs	r3, #0
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	0023      	movs	r3, r4
 8002e6a:	f000 fd23 	bl	80038b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d198      	bne.n	8002daa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 fbdc 	bl	800363c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e84:	1e03      	subs	r3, r0, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e01a      	b.n	8002ec2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2220      	movs	r2, #32
 8002e92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	490b      	ldr	r1, [pc, #44]	@ (8002ecc <HAL_I2C_Mem_Write+0x258>)
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2241      	movs	r2, #65	@ 0x41
 8002ea8:	2120      	movs	r1, #32
 8002eaa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2242      	movs	r2, #66	@ 0x42
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2240      	movs	r2, #64	@ 0x40
 8002eb8:	2100      	movs	r1, #0
 8002eba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	e000      	b.n	8002ec2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002ec0:	2302      	movs	r3, #2
  }
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b007      	add	sp, #28
 8002ec8:	bd90      	pop	{r4, r7, pc}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	fe00e800 	.word	0xfe00e800

08002ed0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b089      	sub	sp, #36	@ 0x24
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	000c      	movs	r4, r1
 8002eda:	0010      	movs	r0, r2
 8002edc:	0019      	movs	r1, r3
 8002ede:	230a      	movs	r3, #10
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	1c22      	adds	r2, r4, #0
 8002ee4:	801a      	strh	r2, [r3, #0]
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	18fb      	adds	r3, r7, r3
 8002eea:	1c02      	adds	r2, r0, #0
 8002eec:	801a      	strh	r2, [r3, #0]
 8002eee:	1dbb      	adds	r3, r7, #6
 8002ef0:	1c0a      	adds	r2, r1, #0
 8002ef2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2241      	movs	r2, #65	@ 0x41
 8002ef8:	5c9b      	ldrb	r3, [r3, r2]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d000      	beq.n	8002f02 <HAL_I2C_Mem_Read+0x32>
 8002f00:	e110      	b.n	8003124 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d004      	beq.n	8002f12 <HAL_I2C_Mem_Read+0x42>
 8002f08:	232c      	movs	r3, #44	@ 0x2c
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d105      	bne.n	8002f1e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2280      	movs	r2, #128	@ 0x80
 8002f16:	0092      	lsls	r2, r2, #2
 8002f18:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e103      	b.n	8003126 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2240      	movs	r2, #64	@ 0x40
 8002f22:	5c9b      	ldrb	r3, [r3, r2]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_I2C_Mem_Read+0x5c>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e0fc      	b.n	8003126 <HAL_I2C_Mem_Read+0x256>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2240      	movs	r2, #64	@ 0x40
 8002f30:	2101      	movs	r1, #1
 8002f32:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f34:	f7ff fb58 	bl	80025e8 <HAL_GetTick>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f3c:	2380      	movs	r3, #128	@ 0x80
 8002f3e:	0219      	lsls	r1, r3, #8
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2319      	movs	r3, #25
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f000 fad9 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8002f4e:	1e03      	subs	r3, r0, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0e7      	b.n	8003126 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2241      	movs	r2, #65	@ 0x41
 8002f5a:	2122      	movs	r1, #34	@ 0x22
 8002f5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2242      	movs	r2, #66	@ 0x42
 8002f62:	2140      	movs	r1, #64	@ 0x40
 8002f64:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	222c      	movs	r2, #44	@ 0x2c
 8002f76:	18ba      	adds	r2, r7, r2
 8002f78:	8812      	ldrh	r2, [r2, #0]
 8002f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f82:	1dbb      	adds	r3, r7, #6
 8002f84:	881c      	ldrh	r4, [r3, #0]
 8002f86:	2308      	movs	r3, #8
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	881a      	ldrh	r2, [r3, #0]
 8002f8c:	230a      	movs	r3, #10
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	8819      	ldrh	r1, [r3, #0]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	0023      	movs	r3, r4
 8002f9e:	f000 fa2b 	bl	80033f8 <I2C_RequestMemoryRead>
 8002fa2:	1e03      	subs	r3, r0, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2240      	movs	r2, #64	@ 0x40
 8002faa:	2100      	movs	r1, #0
 8002fac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0b9      	b.n	8003126 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2bff      	cmp	r3, #255	@ 0xff
 8002fba:	d911      	bls.n	8002fe0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	045c      	lsls	r4, r3, #17
 8002fcc:	230a      	movs	r3, #10
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	8819      	ldrh	r1, [r3, #0]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	4b56      	ldr	r3, [pc, #344]	@ (8003130 <HAL_I2C_Mem_Read+0x260>)
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	0023      	movs	r3, r4
 8002fda:	f000 fc6b 	bl	80038b4 <I2C_TransferConfig>
 8002fde:	e012      	b.n	8003006 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	2380      	movs	r3, #128	@ 0x80
 8002ff2:	049c      	lsls	r4, r3, #18
 8002ff4:	230a      	movs	r3, #10
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	8819      	ldrh	r1, [r3, #0]
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	4b4c      	ldr	r3, [pc, #304]	@ (8003130 <HAL_I2C_Mem_Read+0x260>)
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	0023      	movs	r3, r4
 8003002:	f000 fc57 	bl	80038b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	0013      	movs	r3, r2
 8003010:	2200      	movs	r2, #0
 8003012:	2104      	movs	r1, #4
 8003014:	f000 fa74 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8003018:	1e03      	subs	r3, r0, #0
 800301a:	d001      	beq.n	8003020 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e082      	b.n	8003126 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d03a      	beq.n	80030d2 <HAL_I2C_Mem_Read+0x202>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003060:	2b00      	cmp	r3, #0
 8003062:	d136      	bne.n	80030d2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	0013      	movs	r3, r2
 800306e:	2200      	movs	r2, #0
 8003070:	2180      	movs	r1, #128	@ 0x80
 8003072:	f000 fa45 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 8003076:	1e03      	subs	r3, r0, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e053      	b.n	8003126 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	2bff      	cmp	r3, #255	@ 0xff
 8003086:	d911      	bls.n	80030ac <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003092:	b2da      	uxtb	r2, r3
 8003094:	2380      	movs	r3, #128	@ 0x80
 8003096:	045c      	lsls	r4, r3, #17
 8003098:	230a      	movs	r3, #10
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	8819      	ldrh	r1, [r3, #0]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	2300      	movs	r3, #0
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	0023      	movs	r3, r4
 80030a6:	f000 fc05 	bl	80038b4 <I2C_TransferConfig>
 80030aa:	e012      	b.n	80030d2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	049c      	lsls	r4, r3, #18
 80030c0:	230a      	movs	r3, #10
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	8819      	ldrh	r1, [r3, #0]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	2300      	movs	r3, #0
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	0023      	movs	r3, r4
 80030ce:	f000 fbf1 	bl	80038b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d194      	bne.n	8003006 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 faaa 	bl	800363c <I2C_WaitOnSTOPFlagUntilTimeout>
 80030e8:	1e03      	subs	r3, r0, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e01a      	b.n	8003126 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2220      	movs	r2, #32
 80030f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	490c      	ldr	r1, [pc, #48]	@ (8003134 <HAL_I2C_Mem_Read+0x264>)
 8003104:	400a      	ands	r2, r1
 8003106:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2241      	movs	r2, #65	@ 0x41
 800310c:	2120      	movs	r1, #32
 800310e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2242      	movs	r2, #66	@ 0x42
 8003114:	2100      	movs	r1, #0
 8003116:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2240      	movs	r2, #64	@ 0x40
 800311c:	2100      	movs	r1, #0
 800311e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	0018      	movs	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	b007      	add	sp, #28
 800312c:	bd90      	pop	{r4, r7, pc}
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	80002400 	.word	0x80002400
 8003134:	fe00e800 	.word	0xfe00e800

08003138 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	@ 0x28
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	230a      	movs	r3, #10
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	1c0a      	adds	r2, r1, #0
 800314a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2241      	movs	r2, #65	@ 0x41
 8003154:	5c9b      	ldrb	r3, [r3, r2]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b20      	cmp	r3, #32
 800315a:	d000      	beq.n	800315e <HAL_I2C_IsDeviceReady+0x26>
 800315c:	e0df      	b.n	800331e <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	2380      	movs	r3, #128	@ 0x80
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	401a      	ands	r2, r3
 800316a:	2380      	movs	r3, #128	@ 0x80
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	429a      	cmp	r2, r3
 8003170:	d101      	bne.n	8003176 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003172:	2302      	movs	r3, #2
 8003174:	e0d4      	b.n	8003320 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2240      	movs	r2, #64	@ 0x40
 800317a:	5c9b      	ldrb	r3, [r3, r2]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_I2C_IsDeviceReady+0x4c>
 8003180:	2302      	movs	r3, #2
 8003182:	e0cd      	b.n	8003320 <HAL_I2C_IsDeviceReady+0x1e8>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2240      	movs	r2, #64	@ 0x40
 8003188:	2101      	movs	r1, #1
 800318a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2241      	movs	r2, #65	@ 0x41
 8003190:	2124      	movs	r1, #36	@ 0x24
 8003192:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_I2C_IsDeviceReady+0x7a>
 80031a2:	230a      	movs	r3, #10
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	059b      	lsls	r3, r3, #22
 80031aa:	0d9b      	lsrs	r3, r3, #22
 80031ac:	4a5e      	ldr	r2, [pc, #376]	@ (8003328 <HAL_I2C_IsDeviceReady+0x1f0>)
 80031ae:	431a      	orrs	r2, r3
 80031b0:	e006      	b.n	80031c0 <HAL_I2C_IsDeviceReady+0x88>
 80031b2:	230a      	movs	r3, #10
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	059b      	lsls	r3, r3, #22
 80031ba:	0d9b      	lsrs	r3, r3, #22
 80031bc:	4a5b      	ldr	r2, [pc, #364]	@ (800332c <HAL_I2C_IsDeviceReady+0x1f4>)
 80031be:	431a      	orrs	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80031c6:	f7ff fa0f 	bl	80025e8 <HAL_GetTick>
 80031ca:	0003      	movs	r3, r0
 80031cc:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	2220      	movs	r2, #32
 80031d6:	4013      	ands	r3, r2
 80031d8:	3b20      	subs	r3, #32
 80031da:	425a      	negs	r2, r3
 80031dc:	4153      	adcs	r3, r2
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	231f      	movs	r3, #31
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2210      	movs	r2, #16
 80031ee:	4013      	ands	r3, r2
 80031f0:	3b10      	subs	r3, #16
 80031f2:	425a      	negs	r2, r3
 80031f4:	4153      	adcs	r3, r2
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	231e      	movs	r3, #30
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80031fe:	e035      	b.n	800326c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	3301      	adds	r3, #1
 8003204:	d01a      	beq.n	800323c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003206:	f7ff f9ef 	bl	80025e8 <HAL_GetTick>
 800320a:	0002      	movs	r2, r0
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <HAL_I2C_IsDeviceReady+0xe4>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10f      	bne.n	800323c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2241      	movs	r2, #65	@ 0x41
 8003220:	2120      	movs	r1, #32
 8003222:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003228:	2220      	movs	r2, #32
 800322a:	431a      	orrs	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2240      	movs	r2, #64	@ 0x40
 8003234:	2100      	movs	r1, #0
 8003236:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e071      	b.n	8003320 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2220      	movs	r2, #32
 8003244:	4013      	ands	r3, r2
 8003246:	3b20      	subs	r3, #32
 8003248:	425a      	negs	r2, r3
 800324a:	4153      	adcs	r3, r2
 800324c:	b2da      	uxtb	r2, r3
 800324e:	231f      	movs	r3, #31
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2210      	movs	r2, #16
 800325c:	4013      	ands	r3, r2
 800325e:	3b10      	subs	r3, #16
 8003260:	425a      	negs	r2, r3
 8003262:	4153      	adcs	r3, r2
 8003264:	b2da      	uxtb	r2, r3
 8003266:	231e      	movs	r3, #30
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800326c:	231f      	movs	r3, #31
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d104      	bne.n	8003280 <HAL_I2C_IsDeviceReady+0x148>
 8003276:	231e      	movs	r3, #30
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0bf      	beq.n	8003200 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2210      	movs	r2, #16
 8003288:	4013      	ands	r3, r2
 800328a:	2b10      	cmp	r3, #16
 800328c:	d01a      	beq.n	80032c4 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	0013      	movs	r3, r2
 8003298:	2200      	movs	r2, #0
 800329a:	2120      	movs	r1, #32
 800329c:	f000 f930 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 80032a0:	1e03      	subs	r3, r0, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e03b      	b.n	8003320 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2220      	movs	r2, #32
 80032ae:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2241      	movs	r2, #65	@ 0x41
 80032b4:	2120      	movs	r1, #32
 80032b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2240      	movs	r2, #64	@ 0x40
 80032bc:	2100      	movs	r1, #0
 80032be:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e02d      	b.n	8003320 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	0013      	movs	r3, r2
 80032ce:	2200      	movs	r2, #0
 80032d0:	2120      	movs	r1, #32
 80032d2:	f000 f915 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 80032d6:	1e03      	subs	r3, r0, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e020      	b.n	8003320 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2210      	movs	r2, #16
 80032e4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2220      	movs	r2, #32
 80032ec:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	3301      	adds	r3, #1
 80032f2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d900      	bls.n	80032fe <HAL_I2C_IsDeviceReady+0x1c6>
 80032fc:	e74d      	b.n	800319a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2241      	movs	r2, #65	@ 0x41
 8003302:	2120      	movs	r1, #32
 8003304:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330a:	2220      	movs	r2, #32
 800330c:	431a      	orrs	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2240      	movs	r2, #64	@ 0x40
 8003316:	2100      	movs	r1, #0
 8003318:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800331e:	2302      	movs	r3, #2
  }
}
 8003320:	0018      	movs	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	b008      	add	sp, #32
 8003326:	bd80      	pop	{r7, pc}
 8003328:	02002000 	.word	0x02002000
 800332c:	02002800 	.word	0x02002800

08003330 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	000c      	movs	r4, r1
 800333a:	0010      	movs	r0, r2
 800333c:	0019      	movs	r1, r3
 800333e:	250a      	movs	r5, #10
 8003340:	197b      	adds	r3, r7, r5
 8003342:	1c22      	adds	r2, r4, #0
 8003344:	801a      	strh	r2, [r3, #0]
 8003346:	2308      	movs	r3, #8
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	1c02      	adds	r2, r0, #0
 800334c:	801a      	strh	r2, [r3, #0]
 800334e:	1dbb      	adds	r3, r7, #6
 8003350:	1c0a      	adds	r2, r1, #0
 8003352:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003354:	1dbb      	adds	r3, r7, #6
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	2380      	movs	r3, #128	@ 0x80
 800335c:	045c      	lsls	r4, r3, #17
 800335e:	197b      	adds	r3, r7, r5
 8003360:	8819      	ldrh	r1, [r3, #0]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	4b23      	ldr	r3, [pc, #140]	@ (80033f4 <I2C_RequestMemoryWrite+0xc4>)
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	0023      	movs	r3, r4
 800336a:	f000 faa3 	bl	80038b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800336e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003370:	6a39      	ldr	r1, [r7, #32]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	0018      	movs	r0, r3
 8003376:	f000 f91b 	bl	80035b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800337a:	1e03      	subs	r3, r0, #0
 800337c:	d001      	beq.n	8003382 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e033      	b.n	80033ea <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003382:	1dbb      	adds	r3, r7, #6
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d107      	bne.n	800339a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800338a:	2308      	movs	r3, #8
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	629a      	str	r2, [r3, #40]	@ 0x28
 8003398:	e019      	b.n	80033ce <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800339a:	2308      	movs	r3, #8
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	0a1b      	lsrs	r3, r3, #8
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ae:	6a39      	ldr	r1, [r7, #32]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 f8fc 	bl	80035b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d001      	beq.n	80033c0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e014      	b.n	80033ea <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033c0:	2308      	movs	r3, #8
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033ce:	6a3a      	ldr	r2, [r7, #32]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	0013      	movs	r3, r2
 80033d8:	2200      	movs	r2, #0
 80033da:	2180      	movs	r1, #128	@ 0x80
 80033dc:	f000 f890 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d001      	beq.n	80033e8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	0018      	movs	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b004      	add	sp, #16
 80033f0:	bdb0      	pop	{r4, r5, r7, pc}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	80002000 	.word	0x80002000

080033f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80033f8:	b5b0      	push	{r4, r5, r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	000c      	movs	r4, r1
 8003402:	0010      	movs	r0, r2
 8003404:	0019      	movs	r1, r3
 8003406:	250a      	movs	r5, #10
 8003408:	197b      	adds	r3, r7, r5
 800340a:	1c22      	adds	r2, r4, #0
 800340c:	801a      	strh	r2, [r3, #0]
 800340e:	2308      	movs	r3, #8
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	1c02      	adds	r2, r0, #0
 8003414:	801a      	strh	r2, [r3, #0]
 8003416:	1dbb      	adds	r3, r7, #6
 8003418:	1c0a      	adds	r2, r1, #0
 800341a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800341c:	1dbb      	adds	r3, r7, #6
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	b2da      	uxtb	r2, r3
 8003422:	197b      	adds	r3, r7, r5
 8003424:	8819      	ldrh	r1, [r3, #0]
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <I2C_RequestMemoryRead+0xc0>)
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	2300      	movs	r3, #0
 800342e:	f000 fa41 	bl	80038b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003434:	6a39      	ldr	r1, [r7, #32]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	0018      	movs	r0, r3
 800343a:	f000 f8b9 	bl	80035b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800343e:	1e03      	subs	r3, r0, #0
 8003440:	d001      	beq.n	8003446 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e033      	b.n	80034ae <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003446:	1dbb      	adds	r3, r7, #6
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d107      	bne.n	800345e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800344e:	2308      	movs	r3, #8
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	629a      	str	r2, [r3, #40]	@ 0x28
 800345c:	e019      	b.n	8003492 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800345e:	2308      	movs	r3, #8
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	b29b      	uxth	r3, r3
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003472:	6a39      	ldr	r1, [r7, #32]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	0018      	movs	r0, r3
 8003478:	f000 f89a 	bl	80035b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800347c:	1e03      	subs	r3, r0, #0
 800347e:	d001      	beq.n	8003484 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e014      	b.n	80034ae <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003484:	2308      	movs	r3, #8
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003492:	6a3a      	ldr	r2, [r7, #32]
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	0013      	movs	r3, r2
 800349c:	2200      	movs	r2, #0
 800349e:	2140      	movs	r1, #64	@ 0x40
 80034a0:	f000 f82e 	bl	8003500 <I2C_WaitOnFlagUntilTimeout>
 80034a4:	1e03      	subs	r3, r0, #0
 80034a6:	d001      	beq.n	80034ac <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bdb0      	pop	{r4, r5, r7, pc}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	80002000 	.word	0x80002000

080034bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2202      	movs	r2, #2
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d103      	bne.n	80034da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2201      	movs	r2, #1
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d007      	beq.n	80034f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2101      	movs	r1, #1
 80034f4:	430a      	orrs	r2, r1
 80034f6:	619a      	str	r2, [r3, #24]
  }
}
 80034f8:	46c0      	nop			@ (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	1dfb      	adds	r3, r7, #7
 800350e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003510:	e03a      	b.n	8003588 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	6839      	ldr	r1, [r7, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	0018      	movs	r0, r3
 800351a:	f000 f8d3 	bl	80036c4 <I2C_IsErrorOccurred>
 800351e:	1e03      	subs	r3, r0, #0
 8003520:	d001      	beq.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e040      	b.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	d02d      	beq.n	8003588 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352c:	f7ff f85c 	bl	80025e8 <HAL_GetTick>
 8003530:	0002      	movs	r2, r0
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d302      	bcc.n	8003542 <I2C_WaitOnFlagUntilTimeout+0x42>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d122      	bne.n	8003588 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	4013      	ands	r3, r2
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	425a      	negs	r2, r3
 8003552:	4153      	adcs	r3, r2
 8003554:	b2db      	uxtb	r3, r3
 8003556:	001a      	movs	r2, r3
 8003558:	1dfb      	adds	r3, r7, #7
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d113      	bne.n	8003588 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003564:	2220      	movs	r2, #32
 8003566:	431a      	orrs	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2241      	movs	r2, #65	@ 0x41
 8003570:	2120      	movs	r1, #32
 8003572:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2242      	movs	r2, #66	@ 0x42
 8003578:	2100      	movs	r1, #0
 800357a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2240      	movs	r2, #64	@ 0x40
 8003580:	2100      	movs	r1, #0
 8003582:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e00f      	b.n	80035a8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	4013      	ands	r3, r2
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	425a      	negs	r2, r3
 8003598:	4153      	adcs	r3, r2
 800359a:	b2db      	uxtb	r3, r3
 800359c:	001a      	movs	r2, r3
 800359e:	1dfb      	adds	r3, r7, #7
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d0b5      	beq.n	8003512 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b004      	add	sp, #16
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035bc:	e032      	b.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 f87d 	bl	80036c4 <I2C_IsErrorOccurred>
 80035ca:	1e03      	subs	r3, r0, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e030      	b.n	8003634 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	3301      	adds	r3, #1
 80035d6:	d025      	beq.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d8:	f7ff f806 	bl	80025e8 <HAL_GetTick>
 80035dc:	0002      	movs	r2, r0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d302      	bcc.n	80035ee <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d11a      	bne.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2202      	movs	r2, #2
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d013      	beq.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003600:	2220      	movs	r2, #32
 8003602:	431a      	orrs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2241      	movs	r2, #65	@ 0x41
 800360c:	2120      	movs	r1, #32
 800360e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2242      	movs	r2, #66	@ 0x42
 8003614:	2100      	movs	r1, #0
 8003616:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2240      	movs	r2, #64	@ 0x40
 800361c:	2100      	movs	r1, #0
 800361e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e007      	b.n	8003634 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2202      	movs	r2, #2
 800362c:	4013      	ands	r3, r2
 800362e:	2b02      	cmp	r3, #2
 8003630:	d1c5      	bne.n	80035be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b004      	add	sp, #16
 800363a:	bd80      	pop	{r7, pc}

0800363c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003648:	e02f      	b.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	0018      	movs	r0, r3
 8003652:	f000 f837 	bl	80036c4 <I2C_IsErrorOccurred>
 8003656:	1e03      	subs	r3, r0, #0
 8003658:	d001      	beq.n	800365e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e02d      	b.n	80036ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365e:	f7fe ffc3 	bl	80025e8 <HAL_GetTick>
 8003662:	0002      	movs	r2, r0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	429a      	cmp	r2, r3
 800366c:	d302      	bcc.n	8003674 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d11a      	bne.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2220      	movs	r2, #32
 800367c:	4013      	ands	r3, r2
 800367e:	2b20      	cmp	r3, #32
 8003680:	d013      	beq.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	2220      	movs	r2, #32
 8003688:	431a      	orrs	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2241      	movs	r2, #65	@ 0x41
 8003692:	2120      	movs	r1, #32
 8003694:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2242      	movs	r2, #66	@ 0x42
 800369a:	2100      	movs	r1, #0
 800369c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2240      	movs	r2, #64	@ 0x40
 80036a2:	2100      	movs	r1, #0
 80036a4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e007      	b.n	80036ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2220      	movs	r2, #32
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d1c8      	bne.n	800364a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	0018      	movs	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	b004      	add	sp, #16
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b08a      	sub	sp, #40	@ 0x28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2327      	movs	r3, #39	@ 0x27
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2210      	movs	r2, #16
 80036ec:	4013      	ands	r3, r2
 80036ee:	d100      	bne.n	80036f2 <I2C_IsErrorOccurred+0x2e>
 80036f0:	e079      	b.n	80037e6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2210      	movs	r2, #16
 80036f8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036fa:	e057      	b.n	80037ac <I2C_IsErrorOccurred+0xe8>
 80036fc:	2227      	movs	r2, #39	@ 0x27
 80036fe:	18bb      	adds	r3, r7, r2
 8003700:	18ba      	adds	r2, r7, r2
 8003702:	7812      	ldrb	r2, [r2, #0]
 8003704:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	3301      	adds	r3, #1
 800370a:	d04f      	beq.n	80037ac <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800370c:	f7fe ff6c 	bl	80025e8 <HAL_GetTick>
 8003710:	0002      	movs	r2, r0
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	429a      	cmp	r2, r3
 800371a:	d302      	bcc.n	8003722 <I2C_IsErrorOccurred+0x5e>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d144      	bne.n	80037ac <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	2380      	movs	r3, #128	@ 0x80
 800372a:	01db      	lsls	r3, r3, #7
 800372c:	4013      	ands	r3, r2
 800372e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003730:	2013      	movs	r0, #19
 8003732:	183b      	adds	r3, r7, r0
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	2142      	movs	r1, #66	@ 0x42
 8003738:	5c52      	ldrb	r2, [r2, r1]
 800373a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	2380      	movs	r3, #128	@ 0x80
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	401a      	ands	r2, r3
 8003748:	2380      	movs	r3, #128	@ 0x80
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	429a      	cmp	r2, r3
 800374e:	d126      	bne.n	800379e <I2C_IsErrorOccurred+0xda>
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	2380      	movs	r3, #128	@ 0x80
 8003754:	01db      	lsls	r3, r3, #7
 8003756:	429a      	cmp	r2, r3
 8003758:	d021      	beq.n	800379e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800375a:	183b      	adds	r3, r7, r0
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b20      	cmp	r3, #32
 8003760:	d01d      	beq.n	800379e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2180      	movs	r1, #128	@ 0x80
 800376e:	01c9      	lsls	r1, r1, #7
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003774:	f7fe ff38 	bl	80025e8 <HAL_GetTick>
 8003778:	0003      	movs	r3, r0
 800377a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800377c:	e00f      	b.n	800379e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800377e:	f7fe ff33 	bl	80025e8 <HAL_GetTick>
 8003782:	0002      	movs	r2, r0
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b19      	cmp	r3, #25
 800378a:	d908      	bls.n	800379e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	2220      	movs	r2, #32
 8003790:	4313      	orrs	r3, r2
 8003792:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003794:	2327      	movs	r3, #39	@ 0x27
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	2201      	movs	r2, #1
 800379a:	701a      	strb	r2, [r3, #0]

              break;
 800379c:	e006      	b.n	80037ac <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	2220      	movs	r2, #32
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d1e8      	bne.n	800377e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2220      	movs	r2, #32
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d004      	beq.n	80037c4 <I2C_IsErrorOccurred+0x100>
 80037ba:	2327      	movs	r3, #39	@ 0x27
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d09b      	beq.n	80036fc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037c4:	2327      	movs	r3, #39	@ 0x27
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2220      	movs	r2, #32
 80037d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	2204      	movs	r2, #4
 80037da:	4313      	orrs	r3, r2
 80037dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037de:	2327      	movs	r3, #39	@ 0x27
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	2380      	movs	r3, #128	@ 0x80
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4013      	ands	r3, r2
 80037f6:	d00c      	beq.n	8003812 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	2201      	movs	r2, #1
 80037fc:	4313      	orrs	r3, r2
 80037fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2280      	movs	r2, #128	@ 0x80
 8003806:	0052      	lsls	r2, r2, #1
 8003808:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800380a:	2327      	movs	r3, #39	@ 0x27
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	2380      	movs	r3, #128	@ 0x80
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4013      	ands	r3, r2
 800381a:	d00c      	beq.n	8003836 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	2208      	movs	r2, #8
 8003820:	4313      	orrs	r3, r2
 8003822:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2280      	movs	r2, #128	@ 0x80
 800382a:	00d2      	lsls	r2, r2, #3
 800382c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800382e:	2327      	movs	r3, #39	@ 0x27
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	2380      	movs	r3, #128	@ 0x80
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4013      	ands	r3, r2
 800383e:	d00c      	beq.n	800385a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	2202      	movs	r2, #2
 8003844:	4313      	orrs	r3, r2
 8003846:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2280      	movs	r2, #128	@ 0x80
 800384e:	0092      	lsls	r2, r2, #2
 8003850:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003852:	2327      	movs	r3, #39	@ 0x27
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800385a:	2327      	movs	r3, #39	@ 0x27
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01d      	beq.n	80038a0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	0018      	movs	r0, r3
 8003868:	f7ff fe28 	bl	80034bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	490e      	ldr	r1, [pc, #56]	@ (80038b0 <I2C_IsErrorOccurred+0x1ec>)
 8003878:	400a      	ands	r2, r1
 800387a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	431a      	orrs	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2241      	movs	r2, #65	@ 0x41
 800388c:	2120      	movs	r1, #32
 800388e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2242      	movs	r2, #66	@ 0x42
 8003894:	2100      	movs	r1, #0
 8003896:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2240      	movs	r2, #64	@ 0x40
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80038a0:	2327      	movs	r3, #39	@ 0x27
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	781b      	ldrb	r3, [r3, #0]
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b00a      	add	sp, #40	@ 0x28
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	fe00e800 	.word	0xfe00e800

080038b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038b4:	b590      	push	{r4, r7, lr}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	0008      	movs	r0, r1
 80038be:	0011      	movs	r1, r2
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	240a      	movs	r4, #10
 80038c4:	193b      	adds	r3, r7, r4
 80038c6:	1c02      	adds	r2, r0, #0
 80038c8:	801a      	strh	r2, [r3, #0]
 80038ca:	2009      	movs	r0, #9
 80038cc:	183b      	adds	r3, r7, r0
 80038ce:	1c0a      	adds	r2, r1, #0
 80038d0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038d2:	193b      	adds	r3, r7, r4
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	059b      	lsls	r3, r3, #22
 80038d8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038da:	183b      	adds	r3, r7, r0
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	0419      	lsls	r1, r3, #16
 80038e0:	23ff      	movs	r3, #255	@ 0xff
 80038e2:	041b      	lsls	r3, r3, #16
 80038e4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038e6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ee:	4313      	orrs	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	085b      	lsrs	r3, r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038fe:	0d51      	lsrs	r1, r2, #21
 8003900:	2280      	movs	r2, #128	@ 0x80
 8003902:	00d2      	lsls	r2, r2, #3
 8003904:	400a      	ands	r2, r1
 8003906:	4907      	ldr	r1, [pc, #28]	@ (8003924 <I2C_TransferConfig+0x70>)
 8003908:	430a      	orrs	r2, r1
 800390a:	43d2      	mvns	r2, r2
 800390c:	401a      	ands	r2, r3
 800390e:	0011      	movs	r1, r2
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	46bd      	mov	sp, r7
 800391e:	b007      	add	sp, #28
 8003920:	bd90      	pop	{r4, r7, pc}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	03ff63ff 	.word	0x03ff63ff

08003928 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2241      	movs	r2, #65	@ 0x41
 8003936:	5c9b      	ldrb	r3, [r3, r2]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b20      	cmp	r3, #32
 800393c:	d138      	bne.n	80039b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2240      	movs	r2, #64	@ 0x40
 8003942:	5c9b      	ldrb	r3, [r3, r2]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003948:	2302      	movs	r3, #2
 800394a:	e032      	b.n	80039b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2240      	movs	r2, #64	@ 0x40
 8003950:	2101      	movs	r1, #1
 8003952:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2241      	movs	r2, #65	@ 0x41
 8003958:	2124      	movs	r1, #36	@ 0x24
 800395a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2101      	movs	r1, #1
 8003968:	438a      	bics	r2, r1
 800396a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4911      	ldr	r1, [pc, #68]	@ (80039bc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003978:	400a      	ands	r2, r1
 800397a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6819      	ldr	r1, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2101      	movs	r1, #1
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2241      	movs	r2, #65	@ 0x41
 80039a0:	2120      	movs	r1, #32
 80039a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2240      	movs	r2, #64	@ 0x40
 80039a8:	2100      	movs	r1, #0
 80039aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	e000      	b.n	80039b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039b0:	2302      	movs	r3, #2
  }
}
 80039b2:	0018      	movs	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b002      	add	sp, #8
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	ffffefff 	.word	0xffffefff

080039c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2241      	movs	r2, #65	@ 0x41
 80039ce:	5c9b      	ldrb	r3, [r3, r2]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d139      	bne.n	8003a4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2240      	movs	r2, #64	@ 0x40
 80039da:	5c9b      	ldrb	r3, [r3, r2]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e033      	b.n	8003a4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2240      	movs	r2, #64	@ 0x40
 80039e8:	2101      	movs	r1, #1
 80039ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2241      	movs	r2, #65	@ 0x41
 80039f0:	2124      	movs	r1, #36	@ 0x24
 80039f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2101      	movs	r1, #1
 8003a00:	438a      	bics	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a11      	ldr	r2, [pc, #68]	@ (8003a54 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2101      	movs	r1, #1
 8003a32:	430a      	orrs	r2, r1
 8003a34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2241      	movs	r2, #65	@ 0x41
 8003a3a:	2120      	movs	r1, #32
 8003a3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2240      	movs	r2, #64	@ 0x40
 8003a42:	2100      	movs	r1, #0
 8003a44:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e000      	b.n	8003a4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a4a:	2302      	movs	r3, #2
  }
}
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b004      	add	sp, #16
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	fffff0ff 	.word	0xfffff0ff

08003a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a58:	b5b0      	push	{r4, r5, r7, lr}
 8003a5a:	b08a      	sub	sp, #40	@ 0x28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f000 fbaf 	bl	80041ca <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a6c:	4bcf      	ldr	r3, [pc, #828]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	220c      	movs	r2, #12
 8003a72:	4013      	ands	r3, r2
 8003a74:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a76:	4bcd      	ldr	r3, [pc, #820]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	2380      	movs	r3, #128	@ 0x80
 8003a7c:	025b      	lsls	r3, r3, #9
 8003a7e:	4013      	ands	r3, r2
 8003a80:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d100      	bne.n	8003a8e <HAL_RCC_OscConfig+0x36>
 8003a8c:	e07e      	b.n	8003b8c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d007      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d112      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x68>
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	025b      	lsls	r3, r3, #9
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa4:	4bc1      	ldr	r3, [pc, #772]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	2380      	movs	r3, #128	@ 0x80
 8003aaa:	029b      	lsls	r3, r3, #10
 8003aac:	4013      	ands	r3, r2
 8003aae:	d100      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x5a>
 8003ab0:	e06b      	b.n	8003b8a <HAL_RCC_OscConfig+0x132>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d167      	bne.n	8003b8a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	f000 fb85 	bl	80041ca <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	025b      	lsls	r3, r3, #9
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d107      	bne.n	8003adc <HAL_RCC_OscConfig+0x84>
 8003acc:	4bb7      	ldr	r3, [pc, #732]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4bb6      	ldr	r3, [pc, #728]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003ad2:	2180      	movs	r1, #128	@ 0x80
 8003ad4:	0249      	lsls	r1, r1, #9
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e027      	b.n	8003b2c <HAL_RCC_OscConfig+0xd4>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	23a0      	movs	r3, #160	@ 0xa0
 8003ae2:	02db      	lsls	r3, r3, #11
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d10e      	bne.n	8003b06 <HAL_RCC_OscConfig+0xae>
 8003ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4baf      	ldr	r3, [pc, #700]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003aee:	2180      	movs	r1, #128	@ 0x80
 8003af0:	02c9      	lsls	r1, r1, #11
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	4bad      	ldr	r3, [pc, #692]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4bac      	ldr	r3, [pc, #688]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003afc:	2180      	movs	r1, #128	@ 0x80
 8003afe:	0249      	lsls	r1, r1, #9
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	e012      	b.n	8003b2c <HAL_RCC_OscConfig+0xd4>
 8003b06:	4ba9      	ldr	r3, [pc, #676]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4ba8      	ldr	r3, [pc, #672]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003b0c:	49a8      	ldr	r1, [pc, #672]	@ (8003db0 <HAL_RCC_OscConfig+0x358>)
 8003b0e:	400a      	ands	r2, r1
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	4ba6      	ldr	r3, [pc, #664]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	2380      	movs	r3, #128	@ 0x80
 8003b18:	025b      	lsls	r3, r3, #9
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4ba2      	ldr	r3, [pc, #648]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4ba1      	ldr	r3, [pc, #644]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003b26:	49a3      	ldr	r1, [pc, #652]	@ (8003db4 <HAL_RCC_OscConfig+0x35c>)
 8003b28:	400a      	ands	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d015      	beq.n	8003b60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fe fd58 	bl	80025e8 <HAL_GetTick>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b3c:	e009      	b.n	8003b52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b3e:	f7fe fd53 	bl	80025e8 <HAL_GetTick>
 8003b42:	0002      	movs	r2, r0
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b64      	cmp	r3, #100	@ 0x64
 8003b4a:	d902      	bls.n	8003b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	f000 fb3c 	bl	80041ca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b52:	4b96      	ldr	r3, [pc, #600]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	2380      	movs	r3, #128	@ 0x80
 8003b58:	029b      	lsls	r3, r3, #10
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d0ef      	beq.n	8003b3e <HAL_RCC_OscConfig+0xe6>
 8003b5e:	e015      	b.n	8003b8c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fe fd42 	bl	80025e8 <HAL_GetTick>
 8003b64:	0003      	movs	r3, r0
 8003b66:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b6a:	f7fe fd3d 	bl	80025e8 <HAL_GetTick>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	@ 0x64
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e326      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b7c:	4b8b      	ldr	r3, [pc, #556]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	2380      	movs	r3, #128	@ 0x80
 8003b82:	029b      	lsls	r3, r3, #10
 8003b84:	4013      	ands	r3, r2
 8003b86:	d1f0      	bne.n	8003b6a <HAL_RCC_OscConfig+0x112>
 8003b88:	e000      	b.n	8003b8c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b8a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2202      	movs	r2, #2
 8003b92:	4013      	ands	r3, r2
 8003b94:	d100      	bne.n	8003b98 <HAL_RCC_OscConfig+0x140>
 8003b96:	e08b      	b.n	8003cb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	2b0c      	cmp	r3, #12
 8003ba8:	d13e      	bne.n	8003c28 <HAL_RCC_OscConfig+0x1d0>
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d13b      	bne.n	8003c28 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003bb0:	4b7e      	ldr	r3, [pc, #504]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d004      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x16c>
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e302      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc4:	4b79      	ldr	r3, [pc, #484]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4a7b      	ldr	r2, [pc, #492]	@ (8003db8 <HAL_RCC_OscConfig+0x360>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	0019      	movs	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	021a      	lsls	r2, r3, #8
 8003bd4:	4b75      	ldr	r3, [pc, #468]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003bda:	4b74      	ldr	r3, [pc, #464]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2209      	movs	r2, #9
 8003be0:	4393      	bics	r3, r2
 8003be2:	0019      	movs	r1, r3
 8003be4:	4b71      	ldr	r3, [pc, #452]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bec:	f000 fc40 	bl	8004470 <HAL_RCC_GetSysClockFreq>
 8003bf0:	0001      	movs	r1, r0
 8003bf2:	4b6e      	ldr	r3, [pc, #440]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	091b      	lsrs	r3, r3, #4
 8003bf8:	220f      	movs	r2, #15
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	4a6f      	ldr	r2, [pc, #444]	@ (8003dbc <HAL_RCC_OscConfig+0x364>)
 8003bfe:	5cd3      	ldrb	r3, [r2, r3]
 8003c00:	000a      	movs	r2, r1
 8003c02:	40da      	lsrs	r2, r3
 8003c04:	4b6e      	ldr	r3, [pc, #440]	@ (8003dc0 <HAL_RCC_OscConfig+0x368>)
 8003c06:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003c08:	4b6e      	ldr	r3, [pc, #440]	@ (8003dc4 <HAL_RCC_OscConfig+0x36c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2513      	movs	r5, #19
 8003c0e:	197c      	adds	r4, r7, r5
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7fe fca3 	bl	800255c <HAL_InitTick>
 8003c16:	0003      	movs	r3, r0
 8003c18:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003c1a:	197b      	adds	r3, r7, r5
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d046      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8003c22:	197b      	adds	r3, r7, r5
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	e2d0      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d027      	beq.n	8003c7e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003c2e:	4b5f      	ldr	r3, [pc, #380]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2209      	movs	r2, #9
 8003c34:	4393      	bics	r3, r2
 8003c36:	0019      	movs	r1, r3
 8003c38:	4b5c      	ldr	r3, [pc, #368]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fe fcd2 	bl	80025e8 <HAL_GetTick>
 8003c44:	0003      	movs	r3, r0
 8003c46:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c4a:	f7fe fccd 	bl	80025e8 <HAL_GetTick>
 8003c4e:	0002      	movs	r2, r0
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e2b6      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c5c:	4b53      	ldr	r3, [pc, #332]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2204      	movs	r2, #4
 8003c62:	4013      	ands	r3, r2
 8003c64:	d0f1      	beq.n	8003c4a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c66:	4b51      	ldr	r3, [pc, #324]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4a53      	ldr	r2, [pc, #332]	@ (8003db8 <HAL_RCC_OscConfig+0x360>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	0019      	movs	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	021a      	lsls	r2, r3, #8
 8003c76:	4b4d      	ldr	r3, [pc, #308]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]
 8003c7c:	e018      	b.n	8003cb0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	4b4a      	ldr	r3, [pc, #296]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003c84:	2101      	movs	r1, #1
 8003c86:	438a      	bics	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7fe fcad 	bl	80025e8 <HAL_GetTick>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c94:	f7fe fca8 	bl	80025e8 <HAL_GetTick>
 8003c98:	0002      	movs	r2, r0
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e291      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ca6:	4b41      	ldr	r3, [pc, #260]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2204      	movs	r2, #4
 8003cac:	4013      	ands	r3, r2
 8003cae:	d1f1      	bne.n	8003c94 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d100      	bne.n	8003cbc <HAL_RCC_OscConfig+0x264>
 8003cba:	e0a1      	b.n	8003e00 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d140      	bne.n	8003d44 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cc2:	4b3a      	ldr	r3, [pc, #232]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	2380      	movs	r3, #128	@ 0x80
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d005      	beq.n	8003cda <HAL_RCC_OscConfig+0x282>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e277      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cda:	4b34      	ldr	r3, [pc, #208]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4a3a      	ldr	r2, [pc, #232]	@ (8003dc8 <HAL_RCC_OscConfig+0x370>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	0019      	movs	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ce8:	4b30      	ldr	r3, [pc, #192]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cee:	4b2f      	ldr	r3, [pc, #188]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	0a19      	lsrs	r1, r3, #8
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	061a      	lsls	r2, r3, #24
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	0b5b      	lsrs	r3, r3, #13
 8003d08:	3301      	adds	r3, #1
 8003d0a:	2280      	movs	r2, #128	@ 0x80
 8003d0c:	0212      	lsls	r2, r2, #8
 8003d0e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003d10:	4b26      	ldr	r3, [pc, #152]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	210f      	movs	r1, #15
 8003d18:	400b      	ands	r3, r1
 8003d1a:	4928      	ldr	r1, [pc, #160]	@ (8003dbc <HAL_RCC_OscConfig+0x364>)
 8003d1c:	5ccb      	ldrb	r3, [r1, r3]
 8003d1e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003d20:	4b27      	ldr	r3, [pc, #156]	@ (8003dc0 <HAL_RCC_OscConfig+0x368>)
 8003d22:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003d24:	4b27      	ldr	r3, [pc, #156]	@ (8003dc4 <HAL_RCC_OscConfig+0x36c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2513      	movs	r5, #19
 8003d2a:	197c      	adds	r4, r7, r5
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fe fc15 	bl	800255c <HAL_InitTick>
 8003d32:	0003      	movs	r3, r0
 8003d34:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003d36:	197b      	adds	r3, r7, r5
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d060      	beq.n	8003e00 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003d3e:	197b      	adds	r3, r7, r5
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	e242      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d03f      	beq.n	8003dcc <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d4c:	4b17      	ldr	r3, [pc, #92]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	4b16      	ldr	r3, [pc, #88]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003d52:	2180      	movs	r1, #128	@ 0x80
 8003d54:	0049      	lsls	r1, r1, #1
 8003d56:	430a      	orrs	r2, r1
 8003d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5a:	f7fe fc45 	bl	80025e8 <HAL_GetTick>
 8003d5e:	0003      	movs	r3, r0
 8003d60:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d64:	f7fe fc40 	bl	80025e8 <HAL_GetTick>
 8003d68:	0002      	movs	r2, r0
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e229      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d76:	4b0d      	ldr	r3, [pc, #52]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	2380      	movs	r3, #128	@ 0x80
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d82:	4b0a      	ldr	r3, [pc, #40]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4a10      	ldr	r2, [pc, #64]	@ (8003dc8 <HAL_RCC_OscConfig+0x370>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	0019      	movs	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d90:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d96:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	0a19      	lsrs	r1, r3, #8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	061a      	lsls	r2, r3, #24
 8003da4:	4b01      	ldr	r3, [pc, #4]	@ (8003dac <HAL_RCC_OscConfig+0x354>)
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
 8003daa:	e029      	b.n	8003e00 <HAL_RCC_OscConfig+0x3a8>
 8003dac:	40021000 	.word	0x40021000
 8003db0:	fffeffff 	.word	0xfffeffff
 8003db4:	fffbffff 	.word	0xfffbffff
 8003db8:	ffffe0ff 	.word	0xffffe0ff
 8003dbc:	08004ea8 	.word	0x08004ea8
 8003dc0:	20000004 	.word	0x20000004
 8003dc4:	20000008 	.word	0x20000008
 8003dc8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dcc:	4bbd      	ldr	r3, [pc, #756]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4bbc      	ldr	r3, [pc, #752]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003dd2:	49bd      	ldr	r1, [pc, #756]	@ (80040c8 <HAL_RCC_OscConfig+0x670>)
 8003dd4:	400a      	ands	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd8:	f7fe fc06 	bl	80025e8 <HAL_GetTick>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003de2:	f7fe fc01 	bl	80025e8 <HAL_GetTick>
 8003de6:	0002      	movs	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e1ea      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003df4:	4bb3      	ldr	r3, [pc, #716]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	2380      	movs	r3, #128	@ 0x80
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d1f0      	bne.n	8003de2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2208      	movs	r2, #8
 8003e06:	4013      	ands	r3, r2
 8003e08:	d036      	beq.n	8003e78 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d019      	beq.n	8003e46 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e12:	4bac      	ldr	r3, [pc, #688]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003e14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e16:	4bab      	ldr	r3, [pc, #684]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003e18:	2101      	movs	r1, #1
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1e:	f7fe fbe3 	bl	80025e8 <HAL_GetTick>
 8003e22:	0003      	movs	r3, r0
 8003e24:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e28:	f7fe fbde 	bl	80025e8 <HAL_GetTick>
 8003e2c:	0002      	movs	r2, r0
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e1c7      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e3a:	4ba2      	ldr	r3, [pc, #648]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3e:	2202      	movs	r2, #2
 8003e40:	4013      	ands	r3, r2
 8003e42:	d0f1      	beq.n	8003e28 <HAL_RCC_OscConfig+0x3d0>
 8003e44:	e018      	b.n	8003e78 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e46:	4b9f      	ldr	r3, [pc, #636]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003e48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e4a:	4b9e      	ldr	r3, [pc, #632]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	438a      	bics	r2, r1
 8003e50:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e52:	f7fe fbc9 	bl	80025e8 <HAL_GetTick>
 8003e56:	0003      	movs	r3, r0
 8003e58:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e5c:	f7fe fbc4 	bl	80025e8 <HAL_GetTick>
 8003e60:	0002      	movs	r2, r0
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e1ad      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e6e:	4b95      	ldr	r3, [pc, #596]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e72:	2202      	movs	r2, #2
 8003e74:	4013      	ands	r3, r2
 8003e76:	d1f1      	bne.n	8003e5c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	4013      	ands	r3, r2
 8003e80:	d100      	bne.n	8003e84 <HAL_RCC_OscConfig+0x42c>
 8003e82:	e0ae      	b.n	8003fe2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e84:	2027      	movs	r0, #39	@ 0x27
 8003e86:	183b      	adds	r3, r7, r0
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e8c:	4b8d      	ldr	r3, [pc, #564]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e90:	2380      	movs	r3, #128	@ 0x80
 8003e92:	055b      	lsls	r3, r3, #21
 8003e94:	4013      	ands	r3, r2
 8003e96:	d109      	bne.n	8003eac <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e98:	4b8a      	ldr	r3, [pc, #552]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003e9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e9c:	4b89      	ldr	r3, [pc, #548]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003e9e:	2180      	movs	r1, #128	@ 0x80
 8003ea0:	0549      	lsls	r1, r1, #21
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003ea6:	183b      	adds	r3, r7, r0
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eac:	4b87      	ldr	r3, [pc, #540]	@ (80040cc <HAL_RCC_OscConfig+0x674>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	2380      	movs	r3, #128	@ 0x80
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d11a      	bne.n	8003eee <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eb8:	4b84      	ldr	r3, [pc, #528]	@ (80040cc <HAL_RCC_OscConfig+0x674>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b83      	ldr	r3, [pc, #524]	@ (80040cc <HAL_RCC_OscConfig+0x674>)
 8003ebe:	2180      	movs	r1, #128	@ 0x80
 8003ec0:	0049      	lsls	r1, r1, #1
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fb8f 	bl	80025e8 <HAL_GetTick>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed0:	f7fe fb8a 	bl	80025e8 <HAL_GetTick>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	@ 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e173      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee2:	4b7a      	ldr	r3, [pc, #488]	@ (80040cc <HAL_RCC_OscConfig+0x674>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	2380      	movs	r3, #128	@ 0x80
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4013      	ands	r3, r2
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d107      	bne.n	8003f0a <HAL_RCC_OscConfig+0x4b2>
 8003efa:	4b72      	ldr	r3, [pc, #456]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003efc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003efe:	4b71      	ldr	r3, [pc, #452]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f00:	2180      	movs	r1, #128	@ 0x80
 8003f02:	0049      	lsls	r1, r1, #1
 8003f04:	430a      	orrs	r2, r1
 8003f06:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f08:	e031      	b.n	8003f6e <HAL_RCC_OscConfig+0x516>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x4d4>
 8003f12:	4b6c      	ldr	r3, [pc, #432]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f16:	4b6b      	ldr	r3, [pc, #428]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f18:	496b      	ldr	r1, [pc, #428]	@ (80040c8 <HAL_RCC_OscConfig+0x670>)
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f1e:	4b69      	ldr	r3, [pc, #420]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f22:	4b68      	ldr	r3, [pc, #416]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f24:	496a      	ldr	r1, [pc, #424]	@ (80040d0 <HAL_RCC_OscConfig+0x678>)
 8003f26:	400a      	ands	r2, r1
 8003f28:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f2a:	e020      	b.n	8003f6e <HAL_RCC_OscConfig+0x516>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	23a0      	movs	r3, #160	@ 0xa0
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d10e      	bne.n	8003f56 <HAL_RCC_OscConfig+0x4fe>
 8003f38:	4b62      	ldr	r3, [pc, #392]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f3c:	4b61      	ldr	r3, [pc, #388]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f3e:	2180      	movs	r1, #128	@ 0x80
 8003f40:	00c9      	lsls	r1, r1, #3
 8003f42:	430a      	orrs	r2, r1
 8003f44:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f46:	4b5f      	ldr	r3, [pc, #380]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f4a:	4b5e      	ldr	r3, [pc, #376]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f4c:	2180      	movs	r1, #128	@ 0x80
 8003f4e:	0049      	lsls	r1, r1, #1
 8003f50:	430a      	orrs	r2, r1
 8003f52:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f54:	e00b      	b.n	8003f6e <HAL_RCC_OscConfig+0x516>
 8003f56:	4b5b      	ldr	r3, [pc, #364]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f5a:	4b5a      	ldr	r3, [pc, #360]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f5c:	495a      	ldr	r1, [pc, #360]	@ (80040c8 <HAL_RCC_OscConfig+0x670>)
 8003f5e:	400a      	ands	r2, r1
 8003f60:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f62:	4b58      	ldr	r3, [pc, #352]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f66:	4b57      	ldr	r3, [pc, #348]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f68:	4959      	ldr	r1, [pc, #356]	@ (80040d0 <HAL_RCC_OscConfig+0x678>)
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d015      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f76:	f7fe fb37 	bl	80025e8 <HAL_GetTick>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f7e:	e009      	b.n	8003f94 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fe fb32 	bl	80025e8 <HAL_GetTick>
 8003f84:	0002      	movs	r2, r0
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	4a52      	ldr	r2, [pc, #328]	@ (80040d4 <HAL_RCC_OscConfig+0x67c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e11a      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f94:	4b4b      	ldr	r3, [pc, #300]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003f96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f98:	2380      	movs	r3, #128	@ 0x80
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d0ef      	beq.n	8003f80 <HAL_RCC_OscConfig+0x528>
 8003fa0:	e014      	b.n	8003fcc <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa2:	f7fe fb21 	bl	80025e8 <HAL_GetTick>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003faa:	e009      	b.n	8003fc0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fac:	f7fe fb1c 	bl	80025e8 <HAL_GetTick>
 8003fb0:	0002      	movs	r2, r0
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	4a47      	ldr	r2, [pc, #284]	@ (80040d4 <HAL_RCC_OscConfig+0x67c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e104      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003fc0:	4b40      	ldr	r3, [pc, #256]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003fc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003fc4:	2380      	movs	r3, #128	@ 0x80
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d1ef      	bne.n	8003fac <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fcc:	2327      	movs	r3, #39	@ 0x27
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d105      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fda:	4b3a      	ldr	r3, [pc, #232]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003fdc:	493e      	ldr	r1, [pc, #248]	@ (80040d8 <HAL_RCC_OscConfig+0x680>)
 8003fde:	400a      	ands	r2, r1
 8003fe0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d049      	beq.n	8004080 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d026      	beq.n	8004042 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003ff4:	4b33      	ldr	r3, [pc, #204]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	4b32      	ldr	r3, [pc, #200]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	4b30      	ldr	r3, [pc, #192]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8004002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004004:	4b2f      	ldr	r3, [pc, #188]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8004006:	2101      	movs	r1, #1
 8004008:	430a      	orrs	r2, r1
 800400a:	635a      	str	r2, [r3, #52]	@ 0x34
 800400c:	4b33      	ldr	r3, [pc, #204]	@ (80040dc <HAL_RCC_OscConfig+0x684>)
 800400e:	6a1a      	ldr	r2, [r3, #32]
 8004010:	4b32      	ldr	r3, [pc, #200]	@ (80040dc <HAL_RCC_OscConfig+0x684>)
 8004012:	2180      	movs	r1, #128	@ 0x80
 8004014:	0189      	lsls	r1, r1, #6
 8004016:	430a      	orrs	r2, r1
 8004018:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401a:	f7fe fae5 	bl	80025e8 <HAL_GetTick>
 800401e:	0003      	movs	r3, r0
 8004020:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004024:	f7fe fae0 	bl	80025e8 <HAL_GetTick>
 8004028:	0002      	movs	r2, r0
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e0c9      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004036:	4b23      	ldr	r3, [pc, #140]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2202      	movs	r2, #2
 800403c:	4013      	ands	r3, r2
 800403e:	d0f1      	beq.n	8004024 <HAL_RCC_OscConfig+0x5cc>
 8004040:	e01e      	b.n	8004080 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004042:	4b20      	ldr	r3, [pc, #128]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	4b1f      	ldr	r3, [pc, #124]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8004048:	2101      	movs	r1, #1
 800404a:	438a      	bics	r2, r1
 800404c:	609a      	str	r2, [r3, #8]
 800404e:	4b23      	ldr	r3, [pc, #140]	@ (80040dc <HAL_RCC_OscConfig+0x684>)
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	4b22      	ldr	r3, [pc, #136]	@ (80040dc <HAL_RCC_OscConfig+0x684>)
 8004054:	4922      	ldr	r1, [pc, #136]	@ (80040e0 <HAL_RCC_OscConfig+0x688>)
 8004056:	400a      	ands	r2, r1
 8004058:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405a:	f7fe fac5 	bl	80025e8 <HAL_GetTick>
 800405e:	0003      	movs	r3, r0
 8004060:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004064:	f7fe fac0 	bl	80025e8 <HAL_GetTick>
 8004068:	0002      	movs	r2, r0
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e0a9      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004076:	4b13      	ldr	r3, [pc, #76]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2202      	movs	r2, #2
 800407c:	4013      	ands	r3, r2
 800407e:	d1f1      	bne.n	8004064 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d100      	bne.n	800408a <HAL_RCC_OscConfig+0x632>
 8004088:	e09e      	b.n	80041c8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	2b0c      	cmp	r3, #12
 800408e:	d100      	bne.n	8004092 <HAL_RCC_OscConfig+0x63a>
 8004090:	e077      	b.n	8004182 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004096:	2b02      	cmp	r3, #2
 8004098:	d158      	bne.n	800414c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409a:	4b0a      	ldr	r3, [pc, #40]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b09      	ldr	r3, [pc, #36]	@ (80040c4 <HAL_RCC_OscConfig+0x66c>)
 80040a0:	4910      	ldr	r1, [pc, #64]	@ (80040e4 <HAL_RCC_OscConfig+0x68c>)
 80040a2:	400a      	ands	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fe fa9f 	bl	80025e8 <HAL_GetTick>
 80040aa:	0003      	movs	r3, r0
 80040ac:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040ae:	e01b      	b.n	80040e8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b0:	f7fe fa9a 	bl	80025e8 <HAL_GetTick>
 80040b4:	0002      	movs	r2, r0
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d914      	bls.n	80040e8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e083      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	40021000 	.word	0x40021000
 80040c8:	fffffeff 	.word	0xfffffeff
 80040cc:	40007000 	.word	0x40007000
 80040d0:	fffffbff 	.word	0xfffffbff
 80040d4:	00001388 	.word	0x00001388
 80040d8:	efffffff 	.word	0xefffffff
 80040dc:	40010000 	.word	0x40010000
 80040e0:	ffffdfff 	.word	0xffffdfff
 80040e4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040e8:	4b3a      	ldr	r3, [pc, #232]	@ (80041d4 <HAL_RCC_OscConfig+0x77c>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2380      	movs	r3, #128	@ 0x80
 80040ee:	049b      	lsls	r3, r3, #18
 80040f0:	4013      	ands	r3, r2
 80040f2:	d1dd      	bne.n	80040b0 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f4:	4b37      	ldr	r3, [pc, #220]	@ (80041d4 <HAL_RCC_OscConfig+0x77c>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a37      	ldr	r2, [pc, #220]	@ (80041d8 <HAL_RCC_OscConfig+0x780>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	0019      	movs	r1, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410c:	431a      	orrs	r2, r3
 800410e:	4b31      	ldr	r3, [pc, #196]	@ (80041d4 <HAL_RCC_OscConfig+0x77c>)
 8004110:	430a      	orrs	r2, r1
 8004112:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004114:	4b2f      	ldr	r3, [pc, #188]	@ (80041d4 <HAL_RCC_OscConfig+0x77c>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b2e      	ldr	r3, [pc, #184]	@ (80041d4 <HAL_RCC_OscConfig+0x77c>)
 800411a:	2180      	movs	r1, #128	@ 0x80
 800411c:	0449      	lsls	r1, r1, #17
 800411e:	430a      	orrs	r2, r1
 8004120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004122:	f7fe fa61 	bl	80025e8 <HAL_GetTick>
 8004126:	0003      	movs	r3, r0
 8004128:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800412c:	f7fe fa5c 	bl	80025e8 <HAL_GetTick>
 8004130:	0002      	movs	r2, r0
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e045      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800413e:	4b25      	ldr	r3, [pc, #148]	@ (80041d4 <HAL_RCC_OscConfig+0x77c>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	2380      	movs	r3, #128	@ 0x80
 8004144:	049b      	lsls	r3, r3, #18
 8004146:	4013      	ands	r3, r2
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0x6d4>
 800414a:	e03d      	b.n	80041c8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414c:	4b21      	ldr	r3, [pc, #132]	@ (80041d4 <HAL_RCC_OscConfig+0x77c>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b20      	ldr	r3, [pc, #128]	@ (80041d4 <HAL_RCC_OscConfig+0x77c>)
 8004152:	4922      	ldr	r1, [pc, #136]	@ (80041dc <HAL_RCC_OscConfig+0x784>)
 8004154:	400a      	ands	r2, r1
 8004156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fe fa46 	bl	80025e8 <HAL_GetTick>
 800415c:	0003      	movs	r3, r0
 800415e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004162:	f7fe fa41 	bl	80025e8 <HAL_GetTick>
 8004166:	0002      	movs	r2, r0
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e02a      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004174:	4b17      	ldr	r3, [pc, #92]	@ (80041d4 <HAL_RCC_OscConfig+0x77c>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	2380      	movs	r3, #128	@ 0x80
 800417a:	049b      	lsls	r3, r3, #18
 800417c:	4013      	ands	r3, r2
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x70a>
 8004180:	e022      	b.n	80041c8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e01d      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800418e:	4b11      	ldr	r3, [pc, #68]	@ (80041d4 <HAL_RCC_OscConfig+0x77c>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	2380      	movs	r3, #128	@ 0x80
 8004198:	025b      	lsls	r3, r3, #9
 800419a:	401a      	ands	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d10f      	bne.n	80041c4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80041a4:	69fa      	ldr	r2, [r7, #28]
 80041a6:	23f0      	movs	r3, #240	@ 0xf0
 80041a8:	039b      	lsls	r3, r3, #14
 80041aa:	401a      	ands	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	23c0      	movs	r3, #192	@ 0xc0
 80041b8:	041b      	lsls	r3, r3, #16
 80041ba:	401a      	ands	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b00a      	add	sp, #40	@ 0x28
 80041d0:	bdb0      	pop	{r4, r5, r7, pc}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	40021000 	.word	0x40021000
 80041d8:	ff02ffff 	.word	0xff02ffff
 80041dc:	feffffff 	.word	0xfeffffff

080041e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e0:	b5b0      	push	{r4, r5, r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e128      	b.n	8004446 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041f4:	4b96      	ldr	r3, [pc, #600]	@ (8004450 <HAL_RCC_ClockConfig+0x270>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2201      	movs	r2, #1
 80041fa:	4013      	ands	r3, r2
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d91e      	bls.n	8004240 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004202:	4b93      	ldr	r3, [pc, #588]	@ (8004450 <HAL_RCC_ClockConfig+0x270>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2201      	movs	r2, #1
 8004208:	4393      	bics	r3, r2
 800420a:	0019      	movs	r1, r3
 800420c:	4b90      	ldr	r3, [pc, #576]	@ (8004450 <HAL_RCC_ClockConfig+0x270>)
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004214:	f7fe f9e8 	bl	80025e8 <HAL_GetTick>
 8004218:	0003      	movs	r3, r0
 800421a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421c:	e009      	b.n	8004232 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421e:	f7fe f9e3 	bl	80025e8 <HAL_GetTick>
 8004222:	0002      	movs	r2, r0
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	4a8a      	ldr	r2, [pc, #552]	@ (8004454 <HAL_RCC_ClockConfig+0x274>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e109      	b.n	8004446 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b87      	ldr	r3, [pc, #540]	@ (8004450 <HAL_RCC_ClockConfig+0x270>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2201      	movs	r2, #1
 8004238:	4013      	ands	r3, r2
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d1ee      	bne.n	800421e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2202      	movs	r2, #2
 8004246:	4013      	ands	r3, r2
 8004248:	d009      	beq.n	800425e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800424a:	4b83      	ldr	r3, [pc, #524]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	22f0      	movs	r2, #240	@ 0xf0
 8004250:	4393      	bics	r3, r2
 8004252:	0019      	movs	r1, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	4b7f      	ldr	r3, [pc, #508]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 800425a:	430a      	orrs	r2, r1
 800425c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2201      	movs	r2, #1
 8004264:	4013      	ands	r3, r2
 8004266:	d100      	bne.n	800426a <HAL_RCC_ClockConfig+0x8a>
 8004268:	e089      	b.n	800437e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d107      	bne.n	8004282 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004272:	4b79      	ldr	r3, [pc, #484]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	2380      	movs	r3, #128	@ 0x80
 8004278:	029b      	lsls	r3, r3, #10
 800427a:	4013      	ands	r3, r2
 800427c:	d120      	bne.n	80042c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e0e1      	b.n	8004446 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b03      	cmp	r3, #3
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800428a:	4b73      	ldr	r3, [pc, #460]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	2380      	movs	r3, #128	@ 0x80
 8004290:	049b      	lsls	r3, r3, #18
 8004292:	4013      	ands	r3, r2
 8004294:	d114      	bne.n	80042c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e0d5      	b.n	8004446 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d106      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2204      	movs	r2, #4
 80042a8:	4013      	ands	r3, r2
 80042aa:	d109      	bne.n	80042c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0ca      	b.n	8004446 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80042b0:	4b69      	ldr	r3, [pc, #420]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	2380      	movs	r3, #128	@ 0x80
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4013      	ands	r3, r2
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0c2      	b.n	8004446 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042c0:	4b65      	ldr	r3, [pc, #404]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2203      	movs	r2, #3
 80042c6:	4393      	bics	r3, r2
 80042c8:	0019      	movs	r1, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	4b62      	ldr	r3, [pc, #392]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 80042d0:	430a      	orrs	r2, r1
 80042d2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042d4:	f7fe f988 	bl	80025e8 <HAL_GetTick>
 80042d8:	0003      	movs	r3, r0
 80042da:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d111      	bne.n	8004308 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042e4:	e009      	b.n	80042fa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e6:	f7fe f97f 	bl	80025e8 <HAL_GetTick>
 80042ea:	0002      	movs	r2, r0
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	4a58      	ldr	r2, [pc, #352]	@ (8004454 <HAL_RCC_ClockConfig+0x274>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e0a5      	b.n	8004446 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042fa:	4b57      	ldr	r3, [pc, #348]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	220c      	movs	r2, #12
 8004300:	4013      	ands	r3, r2
 8004302:	2b08      	cmp	r3, #8
 8004304:	d1ef      	bne.n	80042e6 <HAL_RCC_ClockConfig+0x106>
 8004306:	e03a      	b.n	800437e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b03      	cmp	r3, #3
 800430e:	d111      	bne.n	8004334 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004310:	e009      	b.n	8004326 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004312:	f7fe f969 	bl	80025e8 <HAL_GetTick>
 8004316:	0002      	movs	r2, r0
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	4a4d      	ldr	r2, [pc, #308]	@ (8004454 <HAL_RCC_ClockConfig+0x274>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e08f      	b.n	8004446 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004326:	4b4c      	ldr	r3, [pc, #304]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	220c      	movs	r2, #12
 800432c:	4013      	ands	r3, r2
 800432e:	2b0c      	cmp	r3, #12
 8004330:	d1ef      	bne.n	8004312 <HAL_RCC_ClockConfig+0x132>
 8004332:	e024      	b.n	800437e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d11b      	bne.n	8004374 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800433c:	e009      	b.n	8004352 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800433e:	f7fe f953 	bl	80025e8 <HAL_GetTick>
 8004342:	0002      	movs	r2, r0
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	4a42      	ldr	r2, [pc, #264]	@ (8004454 <HAL_RCC_ClockConfig+0x274>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e079      	b.n	8004446 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004352:	4b41      	ldr	r3, [pc, #260]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	220c      	movs	r2, #12
 8004358:	4013      	ands	r3, r2
 800435a:	2b04      	cmp	r3, #4
 800435c:	d1ef      	bne.n	800433e <HAL_RCC_ClockConfig+0x15e>
 800435e:	e00e      	b.n	800437e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004360:	f7fe f942 	bl	80025e8 <HAL_GetTick>
 8004364:	0002      	movs	r2, r0
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	4a3a      	ldr	r2, [pc, #232]	@ (8004454 <HAL_RCC_ClockConfig+0x274>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e068      	b.n	8004446 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004374:	4b38      	ldr	r3, [pc, #224]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	220c      	movs	r2, #12
 800437a:	4013      	ands	r3, r2
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800437e:	4b34      	ldr	r3, [pc, #208]	@ (8004450 <HAL_RCC_ClockConfig+0x270>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2201      	movs	r2, #1
 8004384:	4013      	ands	r3, r2
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d21e      	bcs.n	80043ca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438c:	4b30      	ldr	r3, [pc, #192]	@ (8004450 <HAL_RCC_ClockConfig+0x270>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2201      	movs	r2, #1
 8004392:	4393      	bics	r3, r2
 8004394:	0019      	movs	r1, r3
 8004396:	4b2e      	ldr	r3, [pc, #184]	@ (8004450 <HAL_RCC_ClockConfig+0x270>)
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800439e:	f7fe f923 	bl	80025e8 <HAL_GetTick>
 80043a2:	0003      	movs	r3, r0
 80043a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a6:	e009      	b.n	80043bc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fe f91e 	bl	80025e8 <HAL_GetTick>
 80043ac:	0002      	movs	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	4a28      	ldr	r2, [pc, #160]	@ (8004454 <HAL_RCC_ClockConfig+0x274>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e044      	b.n	8004446 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043bc:	4b24      	ldr	r3, [pc, #144]	@ (8004450 <HAL_RCC_ClockConfig+0x270>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2201      	movs	r2, #1
 80043c2:	4013      	ands	r3, r2
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d1ee      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2204      	movs	r2, #4
 80043d0:	4013      	ands	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d4:	4b20      	ldr	r3, [pc, #128]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	4a20      	ldr	r2, [pc, #128]	@ (800445c <HAL_RCC_ClockConfig+0x27c>)
 80043da:	4013      	ands	r3, r2
 80043dc:	0019      	movs	r1, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 80043e4:	430a      	orrs	r2, r1
 80043e6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2208      	movs	r2, #8
 80043ee:	4013      	ands	r3, r2
 80043f0:	d00a      	beq.n	8004408 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043f2:	4b19      	ldr	r3, [pc, #100]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004460 <HAL_RCC_ClockConfig+0x280>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	0019      	movs	r1, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	00da      	lsls	r2, r3, #3
 8004402:	4b15      	ldr	r3, [pc, #84]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 8004404:	430a      	orrs	r2, r1
 8004406:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004408:	f000 f832 	bl	8004470 <HAL_RCC_GetSysClockFreq>
 800440c:	0001      	movs	r1, r0
 800440e:	4b12      	ldr	r3, [pc, #72]	@ (8004458 <HAL_RCC_ClockConfig+0x278>)
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	220f      	movs	r2, #15
 8004416:	4013      	ands	r3, r2
 8004418:	4a12      	ldr	r2, [pc, #72]	@ (8004464 <HAL_RCC_ClockConfig+0x284>)
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	000a      	movs	r2, r1
 800441e:	40da      	lsrs	r2, r3
 8004420:	4b11      	ldr	r3, [pc, #68]	@ (8004468 <HAL_RCC_ClockConfig+0x288>)
 8004422:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004424:	4b11      	ldr	r3, [pc, #68]	@ (800446c <HAL_RCC_ClockConfig+0x28c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	250b      	movs	r5, #11
 800442a:	197c      	adds	r4, r7, r5
 800442c:	0018      	movs	r0, r3
 800442e:	f7fe f895 	bl	800255c <HAL_InitTick>
 8004432:	0003      	movs	r3, r0
 8004434:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004436:	197b      	adds	r3, r7, r5
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800443e:	197b      	adds	r3, r7, r5
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	e000      	b.n	8004446 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b004      	add	sp, #16
 800444c:	bdb0      	pop	{r4, r5, r7, pc}
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	40022000 	.word	0x40022000
 8004454:	00001388 	.word	0x00001388
 8004458:	40021000 	.word	0x40021000
 800445c:	fffff8ff 	.word	0xfffff8ff
 8004460:	ffffc7ff 	.word	0xffffc7ff
 8004464:	08004ea8 	.word	0x08004ea8
 8004468:	20000004 	.word	0x20000004
 800446c:	20000008 	.word	0x20000008

08004470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b086      	sub	sp, #24
 8004474:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004476:	4b3c      	ldr	r3, [pc, #240]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	220c      	movs	r2, #12
 8004480:	4013      	ands	r3, r2
 8004482:	2b0c      	cmp	r3, #12
 8004484:	d013      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0x3e>
 8004486:	d85c      	bhi.n	8004542 <HAL_RCC_GetSysClockFreq+0xd2>
 8004488:	2b04      	cmp	r3, #4
 800448a:	d002      	beq.n	8004492 <HAL_RCC_GetSysClockFreq+0x22>
 800448c:	2b08      	cmp	r3, #8
 800448e:	d00b      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0x38>
 8004490:	e057      	b.n	8004542 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004492:	4b35      	ldr	r3, [pc, #212]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2210      	movs	r2, #16
 8004498:	4013      	ands	r3, r2
 800449a:	d002      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800449c:	4b33      	ldr	r3, [pc, #204]	@ (800456c <HAL_RCC_GetSysClockFreq+0xfc>)
 800449e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80044a0:	e05d      	b.n	800455e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80044a2:	4b33      	ldr	r3, [pc, #204]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x100>)
 80044a4:	613b      	str	r3, [r7, #16]
      break;
 80044a6:	e05a      	b.n	800455e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044a8:	4b32      	ldr	r3, [pc, #200]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x104>)
 80044aa:	613b      	str	r3, [r7, #16]
      break;
 80044ac:	e057      	b.n	800455e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	0c9b      	lsrs	r3, r3, #18
 80044b2:	220f      	movs	r2, #15
 80044b4:	4013      	ands	r3, r2
 80044b6:	4a30      	ldr	r2, [pc, #192]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b8:	5cd3      	ldrb	r3, [r2, r3]
 80044ba:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	0d9b      	lsrs	r3, r3, #22
 80044c0:	2203      	movs	r2, #3
 80044c2:	4013      	ands	r3, r2
 80044c4:	3301      	adds	r3, #1
 80044c6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044c8:	4b27      	ldr	r3, [pc, #156]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	2380      	movs	r3, #128	@ 0x80
 80044ce:	025b      	lsls	r3, r3, #9
 80044d0:	4013      	ands	r3, r2
 80044d2:	d00f      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80044d4:	68b9      	ldr	r1, [r7, #8]
 80044d6:	000a      	movs	r2, r1
 80044d8:	0152      	lsls	r2, r2, #5
 80044da:	1a52      	subs	r2, r2, r1
 80044dc:	0193      	lsls	r3, r2, #6
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	185b      	adds	r3, r3, r1
 80044e4:	025b      	lsls	r3, r3, #9
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	0018      	movs	r0, r3
 80044ea:	f7fb fe0d 	bl	8000108 <__udivsi3>
 80044ee:	0003      	movs	r3, r0
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	e023      	b.n	800453c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80044f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2210      	movs	r2, #16
 80044fa:	4013      	ands	r3, r2
 80044fc:	d00f      	beq.n	800451e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	000a      	movs	r2, r1
 8004502:	0152      	lsls	r2, r2, #5
 8004504:	1a52      	subs	r2, r2, r1
 8004506:	0193      	lsls	r3, r2, #6
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	185b      	adds	r3, r3, r1
 800450e:	021b      	lsls	r3, r3, #8
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	0018      	movs	r0, r3
 8004514:	f7fb fdf8 	bl	8000108 <__udivsi3>
 8004518:	0003      	movs	r3, r0
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	e00e      	b.n	800453c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	000a      	movs	r2, r1
 8004522:	0152      	lsls	r2, r2, #5
 8004524:	1a52      	subs	r2, r2, r1
 8004526:	0193      	lsls	r3, r2, #6
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	185b      	adds	r3, r3, r1
 800452e:	029b      	lsls	r3, r3, #10
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	0018      	movs	r0, r3
 8004534:	f7fb fde8 	bl	8000108 <__udivsi3>
 8004538:	0003      	movs	r3, r0
 800453a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	613b      	str	r3, [r7, #16]
      break;
 8004540:	e00d      	b.n	800455e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004542:	4b09      	ldr	r3, [pc, #36]	@ (8004568 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	0b5b      	lsrs	r3, r3, #13
 8004548:	2207      	movs	r2, #7
 800454a:	4013      	ands	r3, r2
 800454c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	2280      	movs	r2, #128	@ 0x80
 8004554:	0212      	lsls	r2, r2, #8
 8004556:	409a      	lsls	r2, r3
 8004558:	0013      	movs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
      break;
 800455c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800455e:	693b      	ldr	r3, [r7, #16]
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b006      	add	sp, #24
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40021000 	.word	0x40021000
 800456c:	003d0900 	.word	0x003d0900
 8004570:	00f42400 	.word	0x00f42400
 8004574:	007a1200 	.word	0x007a1200
 8004578:	08004eb8 	.word	0x08004eb8

0800457c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004584:	2317      	movs	r3, #23
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2220      	movs	r2, #32
 8004592:	4013      	ands	r3, r2
 8004594:	d106      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	2380      	movs	r3, #128	@ 0x80
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	4013      	ands	r3, r2
 80045a0:	d100      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80045a2:	e104      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a4:	4bb1      	ldr	r3, [pc, #708]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	055b      	lsls	r3, r3, #21
 80045ac:	4013      	ands	r3, r2
 80045ae:	d10a      	bne.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b0:	4bae      	ldr	r3, [pc, #696]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045b4:	4bad      	ldr	r3, [pc, #692]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045b6:	2180      	movs	r1, #128	@ 0x80
 80045b8:	0549      	lsls	r1, r1, #21
 80045ba:	430a      	orrs	r2, r1
 80045bc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80045be:	2317      	movs	r3, #23
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	2201      	movs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c6:	4baa      	ldr	r3, [pc, #680]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	4013      	ands	r3, r2
 80045d0:	d11a      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d2:	4ba7      	ldr	r3, [pc, #668]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4ba6      	ldr	r3, [pc, #664]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045d8:	2180      	movs	r1, #128	@ 0x80
 80045da:	0049      	lsls	r1, r1, #1
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e0:	f7fe f802 	bl	80025e8 <HAL_GetTick>
 80045e4:	0003      	movs	r3, r0
 80045e6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e8:	e008      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ea:	f7fd fffd 	bl	80025e8 <HAL_GetTick>
 80045ee:	0002      	movs	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b64      	cmp	r3, #100	@ 0x64
 80045f6:	d901      	bls.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e133      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fc:	4b9c      	ldr	r3, [pc, #624]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	2380      	movs	r3, #128	@ 0x80
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	4013      	ands	r3, r2
 8004606:	d0f0      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004608:	4b98      	ldr	r3, [pc, #608]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	23c0      	movs	r3, #192	@ 0xc0
 800460e:	039b      	lsls	r3, r3, #14
 8004610:	4013      	ands	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	23c0      	movs	r3, #192	@ 0xc0
 800461a:	039b      	lsls	r3, r3, #14
 800461c:	4013      	ands	r3, r2
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	429a      	cmp	r2, r3
 8004622:	d107      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	23c0      	movs	r3, #192	@ 0xc0
 800462a:	039b      	lsls	r3, r3, #14
 800462c:	4013      	ands	r3, r2
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	429a      	cmp	r2, r3
 8004632:	d013      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	23c0      	movs	r3, #192	@ 0xc0
 800463a:	029b      	lsls	r3, r3, #10
 800463c:	401a      	ands	r2, r3
 800463e:	23c0      	movs	r3, #192	@ 0xc0
 8004640:	029b      	lsls	r3, r3, #10
 8004642:	429a      	cmp	r2, r3
 8004644:	d10a      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004646:	4b89      	ldr	r3, [pc, #548]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	2380      	movs	r3, #128	@ 0x80
 800464c:	029b      	lsls	r3, r3, #10
 800464e:	401a      	ands	r2, r3
 8004650:	2380      	movs	r3, #128	@ 0x80
 8004652:	029b      	lsls	r3, r3, #10
 8004654:	429a      	cmp	r2, r3
 8004656:	d101      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e103      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800465c:	4b83      	ldr	r3, [pc, #524]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800465e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004660:	23c0      	movs	r3, #192	@ 0xc0
 8004662:	029b      	lsls	r3, r3, #10
 8004664:	4013      	ands	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d049      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	23c0      	movs	r3, #192	@ 0xc0
 8004674:	029b      	lsls	r3, r3, #10
 8004676:	4013      	ands	r3, r2
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	429a      	cmp	r2, r3
 800467c:	d004      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2220      	movs	r2, #32
 8004684:	4013      	ands	r3, r2
 8004686:	d10d      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	23c0      	movs	r3, #192	@ 0xc0
 800468e:	029b      	lsls	r3, r3, #10
 8004690:	4013      	ands	r3, r2
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	429a      	cmp	r2, r3
 8004696:	d034      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	2380      	movs	r3, #128	@ 0x80
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	4013      	ands	r3, r2
 80046a2:	d02e      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80046a4:	4b71      	ldr	r3, [pc, #452]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a8:	4a72      	ldr	r2, [pc, #456]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ae:	4b6f      	ldr	r3, [pc, #444]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046b2:	4b6e      	ldr	r3, [pc, #440]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046b4:	2180      	movs	r1, #128	@ 0x80
 80046b6:	0309      	lsls	r1, r1, #12
 80046b8:	430a      	orrs	r2, r1
 80046ba:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046bc:	4b6b      	ldr	r3, [pc, #428]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046c0:	4b6a      	ldr	r3, [pc, #424]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046c2:	496d      	ldr	r1, [pc, #436]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80046c4:	400a      	ands	r2, r1
 80046c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80046c8:	4b68      	ldr	r3, [pc, #416]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	2380      	movs	r3, #128	@ 0x80
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4013      	ands	r3, r2
 80046d6:	d014      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fd ff86 	bl	80025e8 <HAL_GetTick>
 80046dc:	0003      	movs	r3, r0
 80046de:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046e0:	e009      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fd ff81 	bl	80025e8 <HAL_GetTick>
 80046e6:	0002      	movs	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	4a63      	ldr	r2, [pc, #396]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e0b6      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046f6:	4b5d      	ldr	r3, [pc, #372]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046fa:	2380      	movs	r3, #128	@ 0x80
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4013      	ands	r3, r2
 8004700:	d0ef      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	2380      	movs	r3, #128	@ 0x80
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	4013      	ands	r3, r2
 800470c:	d01f      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	23c0      	movs	r3, #192	@ 0xc0
 8004714:	029b      	lsls	r3, r3, #10
 8004716:	401a      	ands	r2, r3
 8004718:	23c0      	movs	r3, #192	@ 0xc0
 800471a:	029b      	lsls	r3, r3, #10
 800471c:	429a      	cmp	r2, r3
 800471e:	d10c      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004720:	4b52      	ldr	r3, [pc, #328]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a56      	ldr	r2, [pc, #344]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004726:	4013      	ands	r3, r2
 8004728:	0019      	movs	r1, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	23c0      	movs	r3, #192	@ 0xc0
 8004730:	039b      	lsls	r3, r3, #14
 8004732:	401a      	ands	r2, r3
 8004734:	4b4d      	ldr	r3, [pc, #308]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004736:	430a      	orrs	r2, r1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	4b4c      	ldr	r3, [pc, #304]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800473c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	23c0      	movs	r3, #192	@ 0xc0
 8004744:	029b      	lsls	r3, r3, #10
 8004746:	401a      	ands	r2, r3
 8004748:	4b48      	ldr	r3, [pc, #288]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800474a:	430a      	orrs	r2, r1
 800474c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2220      	movs	r2, #32
 8004754:	4013      	ands	r3, r2
 8004756:	d01f      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	23c0      	movs	r3, #192	@ 0xc0
 800475e:	029b      	lsls	r3, r3, #10
 8004760:	401a      	ands	r2, r3
 8004762:	23c0      	movs	r3, #192	@ 0xc0
 8004764:	029b      	lsls	r3, r3, #10
 8004766:	429a      	cmp	r2, r3
 8004768:	d10c      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800476a:	4b40      	ldr	r3, [pc, #256]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a44      	ldr	r2, [pc, #272]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004770:	4013      	ands	r3, r2
 8004772:	0019      	movs	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	23c0      	movs	r3, #192	@ 0xc0
 800477a:	039b      	lsls	r3, r3, #14
 800477c:	401a      	ands	r2, r3
 800477e:	4b3b      	ldr	r3, [pc, #236]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004780:	430a      	orrs	r2, r1
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	4b39      	ldr	r3, [pc, #228]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004786:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	23c0      	movs	r3, #192	@ 0xc0
 800478e:	029b      	lsls	r3, r3, #10
 8004790:	401a      	ands	r2, r3
 8004792:	4b36      	ldr	r3, [pc, #216]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004794:	430a      	orrs	r2, r1
 8004796:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004798:	2317      	movs	r3, #23
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d105      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a2:	4b32      	ldr	r3, [pc, #200]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047a6:	4b31      	ldr	r3, [pc, #196]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047a8:	4936      	ldr	r1, [pc, #216]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80047aa:	400a      	ands	r2, r1
 80047ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2201      	movs	r2, #1
 80047b4:	4013      	ands	r3, r2
 80047b6:	d009      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047b8:	4b2c      	ldr	r3, [pc, #176]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047bc:	2203      	movs	r2, #3
 80047be:	4393      	bics	r3, r2
 80047c0:	0019      	movs	r1, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	4b29      	ldr	r3, [pc, #164]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047c8:	430a      	orrs	r2, r1
 80047ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2202      	movs	r2, #2
 80047d2:	4013      	ands	r3, r2
 80047d4:	d009      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047d6:	4b25      	ldr	r3, [pc, #148]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047da:	220c      	movs	r2, #12
 80047dc:	4393      	bics	r3, r2
 80047de:	0019      	movs	r1, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	4b21      	ldr	r3, [pc, #132]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047e6:	430a      	orrs	r2, r1
 80047e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2204      	movs	r2, #4
 80047f0:	4013      	ands	r3, r2
 80047f2:	d009      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047f4:	4b1d      	ldr	r3, [pc, #116]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f8:	4a23      	ldr	r2, [pc, #140]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	0019      	movs	r1, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695a      	ldr	r2, [r3, #20]
 8004802:	4b1a      	ldr	r3, [pc, #104]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004804:	430a      	orrs	r2, r1
 8004806:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2208      	movs	r2, #8
 800480e:	4013      	ands	r3, r2
 8004810:	d009      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004812:	4b16      	ldr	r3, [pc, #88]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004816:	4a1d      	ldr	r2, [pc, #116]	@ (800488c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004818:	4013      	ands	r3, r2
 800481a:	0019      	movs	r1, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699a      	ldr	r2, [r3, #24]
 8004820:	4b12      	ldr	r3, [pc, #72]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004822:	430a      	orrs	r2, r1
 8004824:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2240      	movs	r2, #64	@ 0x40
 800482c:	4013      	ands	r3, r2
 800482e:	d009      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004830:	4b0e      	ldr	r3, [pc, #56]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004834:	4a16      	ldr	r2, [pc, #88]	@ (8004890 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004836:	4013      	ands	r3, r2
 8004838:	0019      	movs	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1a      	ldr	r2, [r3, #32]
 800483e:	4b0b      	ldr	r3, [pc, #44]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004840:	430a      	orrs	r2, r1
 8004842:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2280      	movs	r2, #128	@ 0x80
 800484a:	4013      	ands	r3, r2
 800484c:	d009      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800484e:	4b07      	ldr	r3, [pc, #28]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004852:	4a10      	ldr	r2, [pc, #64]	@ (8004894 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004854:	4013      	ands	r3, r2
 8004856:	0019      	movs	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	4b03      	ldr	r3, [pc, #12]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800485e:	430a      	orrs	r2, r1
 8004860:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b006      	add	sp, #24
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	40007000 	.word	0x40007000
 8004874:	fffcffff 	.word	0xfffcffff
 8004878:	fff7ffff 	.word	0xfff7ffff
 800487c:	00001388 	.word	0x00001388
 8004880:	ffcfffff 	.word	0xffcfffff
 8004884:	efffffff 	.word	0xefffffff
 8004888:	fffff3ff 	.word	0xfffff3ff
 800488c:	ffffcfff 	.word	0xffffcfff
 8004890:	fbffffff 	.word	0xfbffffff
 8004894:	fff3ffff 	.word	0xfff3ffff

08004898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e032      	b.n	8004910 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2239      	movs	r2, #57	@ 0x39
 80048ae:	5c9b      	ldrb	r3, [r3, r2]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d107      	bne.n	80048c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2238      	movs	r2, #56	@ 0x38
 80048ba:	2100      	movs	r1, #0
 80048bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fd fdb5 	bl	8002430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2239      	movs	r2, #57	@ 0x39
 80048ca:	2102      	movs	r1, #2
 80048cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	0019      	movs	r1, r3
 80048d8:	0010      	movs	r0, r2
 80048da:	f000 f97b 	bl	8004bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	223e      	movs	r2, #62	@ 0x3e
 80048e2:	2101      	movs	r1, #1
 80048e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	223a      	movs	r2, #58	@ 0x3a
 80048ea:	2101      	movs	r1, #1
 80048ec:	5499      	strb	r1, [r3, r2]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	223b      	movs	r2, #59	@ 0x3b
 80048f2:	2101      	movs	r1, #1
 80048f4:	5499      	strb	r1, [r3, r2]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	223c      	movs	r2, #60	@ 0x3c
 80048fa:	2101      	movs	r1, #1
 80048fc:	5499      	strb	r1, [r3, r2]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	223d      	movs	r2, #61	@ 0x3d
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2239      	movs	r2, #57	@ 0x39
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	0018      	movs	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	b002      	add	sp, #8
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2239      	movs	r2, #57	@ 0x39
 8004924:	5c9b      	ldrb	r3, [r3, r2]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b01      	cmp	r3, #1
 800492a:	d001      	beq.n	8004930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e036      	b.n	800499e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2239      	movs	r2, #57	@ 0x39
 8004934:	2102      	movs	r1, #2
 8004936:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2101      	movs	r1, #1
 8004944:	430a      	orrs	r2, r1
 8004946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	2380      	movs	r3, #128	@ 0x80
 800494e:	05db      	lsls	r3, r3, #23
 8004950:	429a      	cmp	r2, r3
 8004952:	d009      	beq.n	8004968 <HAL_TIM_Base_Start_IT+0x50>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a13      	ldr	r2, [pc, #76]	@ (80049a8 <HAL_TIM_Base_Start_IT+0x90>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d004      	beq.n	8004968 <HAL_TIM_Base_Start_IT+0x50>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a12      	ldr	r2, [pc, #72]	@ (80049ac <HAL_TIM_Base_Start_IT+0x94>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d111      	bne.n	800498c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2207      	movs	r2, #7
 8004970:	4013      	ands	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b06      	cmp	r3, #6
 8004978:	d010      	beq.n	800499c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2101      	movs	r1, #1
 8004986:	430a      	orrs	r2, r1
 8004988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498a:	e007      	b.n	800499c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2101      	movs	r1, #1
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	0018      	movs	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b004      	add	sp, #16
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	40010800 	.word	0x40010800
 80049ac:	40011400 	.word	0x40011400

080049b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2101      	movs	r1, #1
 80049c4:	438a      	bics	r2, r1
 80049c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	4a0a      	ldr	r2, [pc, #40]	@ (80049f8 <HAL_TIM_Base_Stop_IT+0x48>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	d107      	bne.n	80049e4 <HAL_TIM_Base_Stop_IT+0x34>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2101      	movs	r1, #1
 80049e0:	438a      	bics	r2, r1
 80049e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2239      	movs	r2, #57	@ 0x39
 80049e8:	2101      	movs	r1, #1
 80049ea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	0018      	movs	r0, r3
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b002      	add	sp, #8
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	00001111 	.word	0x00001111

080049fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2202      	movs	r2, #2
 8004a18:	4013      	ands	r3, r2
 8004a1a:	d021      	beq.n	8004a60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	4013      	ands	r3, r2
 8004a22:	d01d      	beq.n	8004a60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2203      	movs	r2, #3
 8004a2a:	4252      	negs	r2, r2
 8004a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d004      	beq.n	8004a4a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 f8ae 	bl	8004ba4 <HAL_TIM_IC_CaptureCallback>
 8004a48:	e007      	b.n	8004a5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f000 f8a1 	bl	8004b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 f8ad 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2204      	movs	r2, #4
 8004a64:	4013      	ands	r3, r2
 8004a66:	d022      	beq.n	8004aae <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2204      	movs	r2, #4
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d01e      	beq.n	8004aae <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2205      	movs	r2, #5
 8004a76:	4252      	negs	r2, r2
 8004a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	23c0      	movs	r3, #192	@ 0xc0
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f000 f887 	bl	8004ba4 <HAL_TIM_IC_CaptureCallback>
 8004a96:	e007      	b.n	8004aa8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f000 f87a 	bl	8004b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f000 f886 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d021      	beq.n	8004afa <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2208      	movs	r2, #8
 8004aba:	4013      	ands	r3, r2
 8004abc:	d01d      	beq.n	8004afa <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2209      	movs	r2, #9
 8004ac4:	4252      	negs	r2, r2
 8004ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2204      	movs	r2, #4
 8004acc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d004      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	0018      	movs	r0, r3
 8004ade:	f000 f861 	bl	8004ba4 <HAL_TIM_IC_CaptureCallback>
 8004ae2:	e007      	b.n	8004af4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f000 f854 	bl	8004b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	0018      	movs	r0, r3
 8004af0:	f000 f860 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2210      	movs	r2, #16
 8004afe:	4013      	ands	r3, r2
 8004b00:	d022      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2210      	movs	r2, #16
 8004b06:	4013      	ands	r3, r2
 8004b08:	d01e      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2211      	movs	r2, #17
 8004b10:	4252      	negs	r2, r2
 8004b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2208      	movs	r2, #8
 8004b18:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	23c0      	movs	r3, #192	@ 0xc0
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4013      	ands	r3, r2
 8004b26:	d004      	beq.n	8004b32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f000 f83a 	bl	8004ba4 <HAL_TIM_IC_CaptureCallback>
 8004b30:	e007      	b.n	8004b42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	0018      	movs	r0, r3
 8004b36:	f000 f82d 	bl	8004b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f000 f839 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d00c      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	4013      	ands	r3, r2
 8004b56:	d008      	beq.n	8004b6a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	4252      	negs	r2, r2
 8004b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7fc fd71 	bl	800164c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2240      	movs	r2, #64	@ 0x40
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d00c      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2240      	movs	r2, #64	@ 0x40
 8004b76:	4013      	ands	r3, r2
 8004b78:	d008      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2241      	movs	r2, #65	@ 0x41
 8004b80:	4252      	negs	r2, r2
 8004b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	0018      	movs	r0, r3
 8004b88:	f000 f81c 	bl	8004bc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b004      	add	sp, #16
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b9c:	46c0      	nop			@ (mov r8, r8)
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b002      	add	sp, #8
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bac:	46c0      	nop			@ (mov r8, r8)
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	b002      	add	sp, #8
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bbc:	46c0      	nop			@ (mov r8, r8)
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b002      	add	sp, #8
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bcc:	46c0      	nop			@ (mov r8, r8)
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	b002      	add	sp, #8
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	2380      	movs	r3, #128	@ 0x80
 8004be8:	05db      	lsls	r3, r3, #23
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d007      	beq.n	8004bfe <TIM_Base_SetConfig+0x2a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a22      	ldr	r2, [pc, #136]	@ (8004c7c <TIM_Base_SetConfig+0xa8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_Base_SetConfig+0x2a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a21      	ldr	r2, [pc, #132]	@ (8004c80 <TIM_Base_SetConfig+0xac>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d108      	bne.n	8004c10 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2270      	movs	r2, #112	@ 0x70
 8004c02:	4393      	bics	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	2380      	movs	r3, #128	@ 0x80
 8004c14:	05db      	lsls	r3, r3, #23
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d007      	beq.n	8004c2a <TIM_Base_SetConfig+0x56>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a17      	ldr	r2, [pc, #92]	@ (8004c7c <TIM_Base_SetConfig+0xa8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d003      	beq.n	8004c2a <TIM_Base_SetConfig+0x56>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a16      	ldr	r2, [pc, #88]	@ (8004c80 <TIM_Base_SetConfig+0xac>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d108      	bne.n	8004c3c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4a15      	ldr	r2, [pc, #84]	@ (8004c84 <TIM_Base_SetConfig+0xb0>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2280      	movs	r2, #128	@ 0x80
 8004c40:	4393      	bics	r3, r2
 8004c42:	001a      	movs	r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2204      	movs	r2, #4
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	601a      	str	r2, [r3, #0]
}
 8004c74:	46c0      	nop			@ (mov r8, r8)
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b004      	add	sp, #16
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40010800 	.word	0x40010800
 8004c80:	40011400 	.word	0x40011400
 8004c84:	fffffcff 	.word	0xfffffcff

08004c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2238      	movs	r2, #56	@ 0x38
 8004c96:	5c9b      	ldrb	r3, [r3, r2]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d101      	bne.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e042      	b.n	8004d26 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2238      	movs	r2, #56	@ 0x38
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2239      	movs	r2, #57	@ 0x39
 8004cac:	2102      	movs	r1, #2
 8004cae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2270      	movs	r2, #112	@ 0x70
 8004cc4:	4393      	bics	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	2380      	movs	r3, #128	@ 0x80
 8004ce0:	05db      	lsls	r3, r3, #23
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d009      	beq.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a11      	ldr	r2, [pc, #68]	@ (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d10c      	bne.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2280      	movs	r2, #128	@ 0x80
 8004cfe:	4393      	bics	r3, r2
 8004d00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2239      	movs	r2, #57	@ 0x39
 8004d18:	2101      	movs	r1, #1
 8004d1a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2238      	movs	r2, #56	@ 0x38
 8004d20:	2100      	movs	r1, #0
 8004d22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	0018      	movs	r0, r3
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	b004      	add	sp, #16
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	46c0      	nop			@ (mov r8, r8)
 8004d30:	40010800 	.word	0x40010800
 8004d34:	40011400 	.word	0x40011400

08004d38 <memset>:
 8004d38:	0003      	movs	r3, r0
 8004d3a:	1882      	adds	r2, r0, r2
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d100      	bne.n	8004d42 <memset+0xa>
 8004d40:	4770      	bx	lr
 8004d42:	7019      	strb	r1, [r3, #0]
 8004d44:	3301      	adds	r3, #1
 8004d46:	e7f9      	b.n	8004d3c <memset+0x4>

08004d48 <__libc_init_array>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	4c0c      	ldr	r4, [pc, #48]	@ (8004d80 <__libc_init_array+0x38>)
 8004d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8004d84 <__libc_init_array+0x3c>)
 8004d50:	1b64      	subs	r4, r4, r5
 8004d52:	10a4      	asrs	r4, r4, #2
 8004d54:	42a6      	cmp	r6, r4
 8004d56:	d109      	bne.n	8004d6c <__libc_init_array+0x24>
 8004d58:	2600      	movs	r6, #0
 8004d5a:	f000 f819 	bl	8004d90 <_init>
 8004d5e:	4c0a      	ldr	r4, [pc, #40]	@ (8004d88 <__libc_init_array+0x40>)
 8004d60:	4d0a      	ldr	r5, [pc, #40]	@ (8004d8c <__libc_init_array+0x44>)
 8004d62:	1b64      	subs	r4, r4, r5
 8004d64:	10a4      	asrs	r4, r4, #2
 8004d66:	42a6      	cmp	r6, r4
 8004d68:	d105      	bne.n	8004d76 <__libc_init_array+0x2e>
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	00b3      	lsls	r3, r6, #2
 8004d6e:	58eb      	ldr	r3, [r5, r3]
 8004d70:	4798      	blx	r3
 8004d72:	3601      	adds	r6, #1
 8004d74:	e7ee      	b.n	8004d54 <__libc_init_array+0xc>
 8004d76:	00b3      	lsls	r3, r6, #2
 8004d78:	58eb      	ldr	r3, [r5, r3]
 8004d7a:	4798      	blx	r3
 8004d7c:	3601      	adds	r6, #1
 8004d7e:	e7f2      	b.n	8004d66 <__libc_init_array+0x1e>
 8004d80:	08004ec4 	.word	0x08004ec4
 8004d84:	08004ec4 	.word	0x08004ec4
 8004d88:	08004ec8 	.word	0x08004ec8
 8004d8c:	08004ec4 	.word	0x08004ec4

08004d90 <_init>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	46c0      	nop			@ (mov r8, r8)
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr

08004d9c <_fini>:
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da2:	bc08      	pop	{r3}
 8004da4:	469e      	mov	lr, r3
 8004da6:	4770      	bx	lr


Projeto Comunicate SERVO MASTER - S.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08003f90  08003f90  00004f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040bc  080040bc  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080040bc  080040bc  000050bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040c4  080040c4  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c4  080040c4  000050c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040c8  080040c8  000050c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080040cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000014  080040e0  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080040e0  000060c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cb6  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a85  00000000  00000000  0000fcf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00011778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000061d  00000000  00000000  00011f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013a8b  00000000  00000000  00012585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abe1  00000000  00000000  00026010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078795  00000000  00000000  00030bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9386  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b5c  00000000  00000000  000a93cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  000aaf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f78 	.word	0x08003f78

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003f78 	.word	0x08003f78

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__udivmoddi4>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	4645      	mov	r5, r8
 800027c:	46de      	mov	lr, fp
 800027e:	b5e0      	push	{r5, r6, r7, lr}
 8000280:	0004      	movs	r4, r0
 8000282:	000d      	movs	r5, r1
 8000284:	4692      	mov	sl, r2
 8000286:	4699      	mov	r9, r3
 8000288:	b083      	sub	sp, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d830      	bhi.n	80002f0 <__udivmoddi4+0x7c>
 800028e:	d02d      	beq.n	80002ec <__udivmoddi4+0x78>
 8000290:	4649      	mov	r1, r9
 8000292:	4650      	mov	r0, sl
 8000294:	f000 f8ba 	bl	800040c <__clzdi2>
 8000298:	0029      	movs	r1, r5
 800029a:	0006      	movs	r6, r0
 800029c:	0020      	movs	r0, r4
 800029e:	f000 f8b5 	bl	800040c <__clzdi2>
 80002a2:	1a33      	subs	r3, r6, r0
 80002a4:	4698      	mov	r8, r3
 80002a6:	3b20      	subs	r3, #32
 80002a8:	d434      	bmi.n	8000314 <__udivmoddi4+0xa0>
 80002aa:	469b      	mov	fp, r3
 80002ac:	4653      	mov	r3, sl
 80002ae:	465a      	mov	r2, fp
 80002b0:	4093      	lsls	r3, r2
 80002b2:	4642      	mov	r2, r8
 80002b4:	001f      	movs	r7, r3
 80002b6:	4653      	mov	r3, sl
 80002b8:	4093      	lsls	r3, r2
 80002ba:	001e      	movs	r6, r3
 80002bc:	42af      	cmp	r7, r5
 80002be:	d83b      	bhi.n	8000338 <__udivmoddi4+0xc4>
 80002c0:	42af      	cmp	r7, r5
 80002c2:	d100      	bne.n	80002c6 <__udivmoddi4+0x52>
 80002c4:	e079      	b.n	80003ba <__udivmoddi4+0x146>
 80002c6:	465b      	mov	r3, fp
 80002c8:	1ba4      	subs	r4, r4, r6
 80002ca:	41bd      	sbcs	r5, r7
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	da00      	bge.n	80002d2 <__udivmoddi4+0x5e>
 80002d0:	e076      	b.n	80003c0 <__udivmoddi4+0x14c>
 80002d2:	2200      	movs	r2, #0
 80002d4:	2300      	movs	r3, #0
 80002d6:	9200      	str	r2, [sp, #0]
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	465a      	mov	r2, fp
 80002de:	4093      	lsls	r3, r2
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	2301      	movs	r3, #1
 80002e4:	4642      	mov	r2, r8
 80002e6:	4093      	lsls	r3, r2
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	e029      	b.n	8000340 <__udivmoddi4+0xcc>
 80002ec:	4282      	cmp	r2, r0
 80002ee:	d9cf      	bls.n	8000290 <__udivmoddi4+0x1c>
 80002f0:	2200      	movs	r2, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	9200      	str	r2, [sp, #0]
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <__udivmoddi4+0x8e>
 80002fe:	601c      	str	r4, [r3, #0]
 8000300:	605d      	str	r5, [r3, #4]
 8000302:	9800      	ldr	r0, [sp, #0]
 8000304:	9901      	ldr	r1, [sp, #4]
 8000306:	b003      	add	sp, #12
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	46bb      	mov	fp, r7
 800030c:	46b2      	mov	sl, r6
 800030e:	46a9      	mov	r9, r5
 8000310:	46a0      	mov	r8, r4
 8000312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000314:	4642      	mov	r2, r8
 8000316:	469b      	mov	fp, r3
 8000318:	2320      	movs	r3, #32
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	4652      	mov	r2, sl
 800031e:	40da      	lsrs	r2, r3
 8000320:	4641      	mov	r1, r8
 8000322:	0013      	movs	r3, r2
 8000324:	464a      	mov	r2, r9
 8000326:	408a      	lsls	r2, r1
 8000328:	0017      	movs	r7, r2
 800032a:	4642      	mov	r2, r8
 800032c:	431f      	orrs	r7, r3
 800032e:	4653      	mov	r3, sl
 8000330:	4093      	lsls	r3, r2
 8000332:	001e      	movs	r6, r3
 8000334:	42af      	cmp	r7, r5
 8000336:	d9c3      	bls.n	80002c0 <__udivmoddi4+0x4c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	4643      	mov	r3, r8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d0d8      	beq.n	80002f8 <__udivmoddi4+0x84>
 8000346:	07fb      	lsls	r3, r7, #31
 8000348:	0872      	lsrs	r2, r6, #1
 800034a:	431a      	orrs	r2, r3
 800034c:	4646      	mov	r6, r8
 800034e:	087b      	lsrs	r3, r7, #1
 8000350:	e00e      	b.n	8000370 <__udivmoddi4+0xfc>
 8000352:	42ab      	cmp	r3, r5
 8000354:	d101      	bne.n	800035a <__udivmoddi4+0xe6>
 8000356:	42a2      	cmp	r2, r4
 8000358:	d80c      	bhi.n	8000374 <__udivmoddi4+0x100>
 800035a:	1aa4      	subs	r4, r4, r2
 800035c:	419d      	sbcs	r5, r3
 800035e:	2001      	movs	r0, #1
 8000360:	1924      	adds	r4, r4, r4
 8000362:	416d      	adcs	r5, r5
 8000364:	2100      	movs	r1, #0
 8000366:	3e01      	subs	r6, #1
 8000368:	1824      	adds	r4, r4, r0
 800036a:	414d      	adcs	r5, r1
 800036c:	2e00      	cmp	r6, #0
 800036e:	d006      	beq.n	800037e <__udivmoddi4+0x10a>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d9ee      	bls.n	8000352 <__udivmoddi4+0xde>
 8000374:	3e01      	subs	r6, #1
 8000376:	1924      	adds	r4, r4, r4
 8000378:	416d      	adcs	r5, r5
 800037a:	2e00      	cmp	r6, #0
 800037c:	d1f8      	bne.n	8000370 <__udivmoddi4+0xfc>
 800037e:	9800      	ldr	r0, [sp, #0]
 8000380:	9901      	ldr	r1, [sp, #4]
 8000382:	465b      	mov	r3, fp
 8000384:	1900      	adds	r0, r0, r4
 8000386:	4169      	adcs	r1, r5
 8000388:	2b00      	cmp	r3, #0
 800038a:	db24      	blt.n	80003d6 <__udivmoddi4+0x162>
 800038c:	002b      	movs	r3, r5
 800038e:	465a      	mov	r2, fp
 8000390:	4644      	mov	r4, r8
 8000392:	40d3      	lsrs	r3, r2
 8000394:	002a      	movs	r2, r5
 8000396:	40e2      	lsrs	r2, r4
 8000398:	001c      	movs	r4, r3
 800039a:	465b      	mov	r3, fp
 800039c:	0015      	movs	r5, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db2a      	blt.n	80003f8 <__udivmoddi4+0x184>
 80003a2:	0026      	movs	r6, r4
 80003a4:	409e      	lsls	r6, r3
 80003a6:	0033      	movs	r3, r6
 80003a8:	0026      	movs	r6, r4
 80003aa:	4647      	mov	r7, r8
 80003ac:	40be      	lsls	r6, r7
 80003ae:	0032      	movs	r2, r6
 80003b0:	1a80      	subs	r0, r0, r2
 80003b2:	4199      	sbcs	r1, r3
 80003b4:	9000      	str	r0, [sp, #0]
 80003b6:	9101      	str	r1, [sp, #4]
 80003b8:	e79e      	b.n	80002f8 <__udivmoddi4+0x84>
 80003ba:	42a3      	cmp	r3, r4
 80003bc:	d8bc      	bhi.n	8000338 <__udivmoddi4+0xc4>
 80003be:	e782      	b.n	80002c6 <__udivmoddi4+0x52>
 80003c0:	4642      	mov	r2, r8
 80003c2:	2320      	movs	r3, #32
 80003c4:	2100      	movs	r1, #0
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	2200      	movs	r2, #0
 80003ca:	9100      	str	r1, [sp, #0]
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	2201      	movs	r2, #1
 80003d0:	40da      	lsrs	r2, r3
 80003d2:	9201      	str	r2, [sp, #4]
 80003d4:	e785      	b.n	80002e2 <__udivmoddi4+0x6e>
 80003d6:	4642      	mov	r2, r8
 80003d8:	2320      	movs	r3, #32
 80003da:	1a9b      	subs	r3, r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	4646      	mov	r6, r8
 80003e0:	409a      	lsls	r2, r3
 80003e2:	0023      	movs	r3, r4
 80003e4:	40f3      	lsrs	r3, r6
 80003e6:	4644      	mov	r4, r8
 80003e8:	4313      	orrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	dad4      	bge.n	80003a2 <__udivmoddi4+0x12e>
 80003f8:	4642      	mov	r2, r8
 80003fa:	002f      	movs	r7, r5
 80003fc:	2320      	movs	r3, #32
 80003fe:	0026      	movs	r6, r4
 8000400:	4097      	lsls	r7, r2
 8000402:	1a9b      	subs	r3, r3, r2
 8000404:	40de      	lsrs	r6, r3
 8000406:	003b      	movs	r3, r7
 8000408:	4333      	orrs	r3, r6
 800040a:	e7cd      	b.n	80003a8 <__udivmoddi4+0x134>

0800040c <__clzdi2>:
 800040c:	b510      	push	{r4, lr}
 800040e:	2900      	cmp	r1, #0
 8000410:	d103      	bne.n	800041a <__clzdi2+0xe>
 8000412:	f000 f807 	bl	8000424 <__clzsi2>
 8000416:	3020      	adds	r0, #32
 8000418:	e002      	b.n	8000420 <__clzdi2+0x14>
 800041a:	0008      	movs	r0, r1
 800041c:	f000 f802 	bl	8000424 <__clzsi2>
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__clzsi2>:
 8000424:	211c      	movs	r1, #28
 8000426:	2301      	movs	r3, #1
 8000428:	041b      	lsls	r3, r3, #16
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0xe>
 800042e:	0c00      	lsrs	r0, r0, #16
 8000430:	3910      	subs	r1, #16
 8000432:	0a1b      	lsrs	r3, r3, #8
 8000434:	4298      	cmp	r0, r3
 8000436:	d301      	bcc.n	800043c <__clzsi2+0x18>
 8000438:	0a00      	lsrs	r0, r0, #8
 800043a:	3908      	subs	r1, #8
 800043c:	091b      	lsrs	r3, r3, #4
 800043e:	4298      	cmp	r0, r3
 8000440:	d301      	bcc.n	8000446 <__clzsi2+0x22>
 8000442:	0900      	lsrs	r0, r0, #4
 8000444:	3904      	subs	r1, #4
 8000446:	a202      	add	r2, pc, #8	@ (adr r2, 8000450 <__clzsi2+0x2c>)
 8000448:	5c10      	ldrb	r0, [r2, r0]
 800044a:	1840      	adds	r0, r0, r1
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	02020304 	.word	0x02020304
 8000454:	01010101 	.word	0x01010101
	...

08000460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000466:	f000 ff07 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046a:	f000 f853 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800046e:	f000 f8e9 	bl	8000644 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000472:	f000 f8b7 	bl	80005e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  Start_LCD();
 8000476:	f000 fc85 	bl	8000d84 <Start_LCD>
  M8x8_Manager(0x00, "GREEN");
 800047a:	4b20      	ldr	r3, [pc, #128]	@ (80004fc <main+0x9c>)
 800047c:	0019      	movs	r1, r3
 800047e:	2000      	movs	r0, #0
 8000480:	f000 f96a 	bl	8000758 <M8x8_Manager>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  	HAL_UART_Receive_IT(&huart1, ressive, BUFFER_SIZE);
 8000484:	491e      	ldr	r1, [pc, #120]	@ (8000500 <main+0xa0>)
 8000486:	4b1f      	ldr	r3, [pc, #124]	@ (8000504 <main+0xa4>)
 8000488:	2206      	movs	r2, #6
 800048a:	0018      	movs	r0, r3
 800048c:	f002 fa46 	bl	800291c <HAL_UART_Receive_IT>

		for(int i = 0; ressive[i] != '\0'; ++i){
 8000490:	2300      	movs	r3, #0
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	e00d      	b.n	80004b2 <main+0x52>
			if (ressive[i] == '\n') ressive[i] = '\0';
 8000496:	4a1a      	ldr	r2, [pc, #104]	@ (8000500 <main+0xa0>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	18d3      	adds	r3, r2, r3
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b0a      	cmp	r3, #10
 80004a0:	d104      	bne.n	80004ac <main+0x4c>
 80004a2:	4a17      	ldr	r2, [pc, #92]	@ (8000500 <main+0xa0>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	18d3      	adds	r3, r2, r3
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
		for(int i = 0; ressive[i] != '\0'; ++i){
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	3301      	adds	r3, #1
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	4a13      	ldr	r2, [pc, #76]	@ (8000500 <main+0xa0>)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	18d3      	adds	r3, r2, r3
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d1eb      	bne.n	8000496 <main+0x36>
		}

		if (ressive[0] == '\0') {
 80004be:	4b10      	ldr	r3, [pc, #64]	@ (8000500 <main+0xa0>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d108      	bne.n	80004d8 <main+0x78>
			Send_Message("AGUARDANDO DADOS");
 80004c6:	4b10      	ldr	r3, [pc, #64]	@ (8000508 <main+0xa8>)
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 fdf3 	bl	80010b4 <Send_Message>
			Data_Manager_LCD(0x80, INSTRUCTION);
 80004ce:	2100      	movs	r1, #0
 80004d0:	2080      	movs	r0, #128	@ 0x80
 80004d2:	f000 fcb9 	bl	8000e48 <Data_Manager_LCD>
 80004d6:	e7d5      	b.n	8000484 <main+0x24>
		}

		else {
			Data_Manager_LCD(0x80, INSTRUCTION);
 80004d8:	2100      	movs	r1, #0
 80004da:	2080      	movs	r0, #128	@ 0x80
 80004dc:	f000 fcb4 	bl	8000e48 <Data_Manager_LCD>
			Send_Message("COMANDO RECEBIDO");
 80004e0:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <main+0xac>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fde6 	bl	80010b4 <Send_Message>

			Data_Ressive_Interpreter((char *) ressive);
 80004e8:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <main+0xa0>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fbc4 	bl	8000c78 <Data_Ressive_Interpreter>
			M8x8_Animation(animationSelect);
 80004f0:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <main+0xb0>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 fac5 	bl	8000a84 <M8x8_Animation>
	  	HAL_UART_Receive_IT(&huart1, ressive, BUFFER_SIZE);
 80004fa:	e7c3      	b.n	8000484 <main+0x24>
 80004fc:	08003f90 	.word	0x08003f90
 8000500:	200000bc 	.word	0x200000bc
 8000504:	20000030 	.word	0x20000030
 8000508:	08003f98 	.word	0x08003f98
 800050c:	08003fac 	.word	0x08003fac
 8000510:	200000c2 	.word	0x200000c2

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b09d      	sub	sp, #116	@ 0x74
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	2438      	movs	r4, #56	@ 0x38
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2338      	movs	r3, #56	@ 0x38
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f003 fcfb 	bl	8003f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052a:	2324      	movs	r3, #36	@ 0x24
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	0018      	movs	r0, r3
 8000530:	2314      	movs	r3, #20
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f003 fcf3 	bl	8003f20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053a:	003b      	movs	r3, r7
 800053c:	0018      	movs	r0, r3
 800053e:	2324      	movs	r3, #36	@ 0x24
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f003 fcec 	bl	8003f20 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	4b24      	ldr	r3, [pc, #144]	@ (80005dc <SystemClock_Config+0xc8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a24      	ldr	r2, [pc, #144]	@ (80005e0 <SystemClock_Config+0xcc>)
 800054e:	401a      	ands	r2, r3
 8000550:	4b22      	ldr	r3, [pc, #136]	@ (80005dc <SystemClock_Config+0xc8>)
 8000552:	2180      	movs	r1, #128	@ 0x80
 8000554:	0109      	lsls	r1, r1, #4
 8000556:	430a      	orrs	r2, r1
 8000558:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055a:	0021      	movs	r1, r4
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2202      	movs	r2, #2
 8000560:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2201      	movs	r2, #1
 8000566:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2210      	movs	r2, #16
 800056c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2200      	movs	r2, #0
 8000572:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	187b      	adds	r3, r7, r1
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fa26 	bl	80019c8 <HAL_RCC_OscConfig>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000580:	f000 fdbd 	bl	80010fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	2124      	movs	r1, #36	@ 0x24
 8000586:	187b      	adds	r3, r7, r1
 8000588:	220f      	movs	r2, #15
 800058a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2201      	movs	r2, #1
 8000590:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2280      	movs	r2, #128	@ 0x80
 8000596:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2100      	movs	r1, #0
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fdd1 	bl	8002150 <HAL_RCC_ClockConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005b2:	f000 fda4 	bl	80010fe <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2201      	movs	r2, #1
 80005ba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005bc:	003b      	movs	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c2:	003b      	movs	r3, r7
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 ffc7 	bl	8002558 <HAL_RCCEx_PeriphCLKConfig>
 80005ca:	1e03      	subs	r3, r0, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005ce:	f000 fd96 	bl	80010fe <Error_Handler>
  }
}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	46bd      	mov	sp, r7
 80005d6:	b01d      	add	sp, #116	@ 0x74
 80005d8:	bd90      	pop	{r4, r7, pc}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	40007000 	.word	0x40007000
 80005e0:	ffffe7ff 	.word	0xffffe7ff

080005e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e8:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_USART1_UART_Init+0x58>)
 80005ea:	4a15      	ldr	r2, [pc, #84]	@ (8000640 <MX_USART1_UART_Init+0x5c>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005ee:	4b13      	ldr	r3, [pc, #76]	@ (800063c <MX_USART1_UART_Init+0x58>)
 80005f0:	2296      	movs	r2, #150	@ 0x96
 80005f2:	0192      	lsls	r2, r2, #6
 80005f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_USART1_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_USART1_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <MX_USART1_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <MX_USART1_UART_Init+0x58>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <MX_USART1_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b09      	ldr	r3, [pc, #36]	@ (800063c <MX_USART1_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <MX_USART1_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_USART1_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000626:	4b05      	ldr	r3, [pc, #20]	@ (800063c <MX_USART1_UART_Init+0x58>)
 8000628:	0018      	movs	r0, r3
 800062a:	f002 f923 	bl	8002874 <HAL_UART_Init>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000632:	f000 fd64 	bl	80010fe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000636:	46c0      	nop			@ (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000030 	.word	0x20000030
 8000640:	40013800 	.word	0x40013800

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	@ 0x24
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	240c      	movs	r4, #12
 800064c:	193b      	adds	r3, r7, r4
 800064e:	0018      	movs	r0, r3
 8000650:	2314      	movs	r3, #20
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f003 fc63 	bl	8003f20 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b39      	ldr	r3, [pc, #228]	@ (8000740 <MX_GPIO_Init+0xfc>)
 800065c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800065e:	4b38      	ldr	r3, [pc, #224]	@ (8000740 <MX_GPIO_Init+0xfc>)
 8000660:	2104      	movs	r1, #4
 8000662:	430a      	orrs	r2, r1
 8000664:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000666:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <MX_GPIO_Init+0xfc>)
 8000668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800066a:	2204      	movs	r2, #4
 800066c:	4013      	ands	r3, r2
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000672:	4b33      	ldr	r3, [pc, #204]	@ (8000740 <MX_GPIO_Init+0xfc>)
 8000674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000676:	4b32      	ldr	r3, [pc, #200]	@ (8000740 <MX_GPIO_Init+0xfc>)
 8000678:	2101      	movs	r1, #1
 800067a:	430a      	orrs	r2, r1
 800067c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800067e:	4b30      	ldr	r3, [pc, #192]	@ (8000740 <MX_GPIO_Init+0xfc>)
 8000680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000682:	2201      	movs	r2, #1
 8000684:	4013      	ands	r3, r2
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068a:	4b2d      	ldr	r3, [pc, #180]	@ (8000740 <MX_GPIO_Init+0xfc>)
 800068c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800068e:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <MX_GPIO_Init+0xfc>)
 8000690:	2102      	movs	r1, #2
 8000692:	430a      	orrs	r2, r1
 8000694:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000696:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <MX_GPIO_Init+0xfc>)
 8000698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800069a:	2202      	movs	r2, #2
 800069c:	4013      	ands	r3, r2
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M8x8_Green8_Pin|M8x8_Green3_Pin|M8x8_Red1_Pin|M8x8_S8_Pin
 80006a2:	4928      	ldr	r1, [pc, #160]	@ (8000744 <MX_GPIO_Init+0x100>)
 80006a4:	4b28      	ldr	r3, [pc, #160]	@ (8000748 <MX_GPIO_Init+0x104>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 f955 	bl	8001958 <HAL_GPIO_WritePin>
                          |M8x8_S1_Pin|M8x8_S7_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M8x8_Green4_Pin|M8x8_Green5_Pin|M8x8_Green7_Pin|D4_Pin
 80006ae:	4927      	ldr	r1, [pc, #156]	@ (800074c <MX_GPIO_Init+0x108>)
 80006b0:	23a0      	movs	r3, #160	@ 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2200      	movs	r2, #0
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 f94e 	bl	8001958 <HAL_GPIO_WritePin>
                          |D5_Pin|D6_Pin|M8x8_S2_Pin|M8x8_Red3_Pin
                          |M8x8_Red2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M8x8_Green6_Pin|M8x8_Red7_Pin|M8x8_Red6_Pin|M8x8_S3_Pin
 80006bc:	4924      	ldr	r1, [pc, #144]	@ (8000750 <MX_GPIO_Init+0x10c>)
 80006be:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <MX_GPIO_Init+0x110>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 f948 	bl	8001958 <HAL_GPIO_WritePin>
                          |M8x8_Red8_Pin|M8x8_S6_Pin|M8x8_S4_Pin|M8x8_S5_Pin
                          |D7_Pin|RW_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : M8x8_Green8_Pin M8x8_Green3_Pin M8x8_Red1_Pin M8x8_S8_Pin
                           M8x8_S1_Pin M8x8_S7_Pin RS_Pin */
  GPIO_InitStruct.Pin = M8x8_Green8_Pin|M8x8_Green3_Pin|M8x8_Red1_Pin|M8x8_S8_Pin
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000744 <MX_GPIO_Init+0x100>)
 80006cc:	601a      	str	r2, [r3, #0]
                          |M8x8_S1_Pin|M8x8_S7_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2201      	movs	r2, #1
 80006d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	4a19      	ldr	r2, [pc, #100]	@ (8000748 <MX_GPIO_Init+0x104>)
 80006e4:	0019      	movs	r1, r3
 80006e6:	0010      	movs	r0, r2
 80006e8:	f000 ffc0 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : M8x8_Green4_Pin M8x8_Green5_Pin M8x8_Green7_Pin D4_Pin
                           D5_Pin D6_Pin M8x8_S2_Pin M8x8_Red3_Pin
                           M8x8_Red2_Pin */
  GPIO_InitStruct.Pin = M8x8_Green4_Pin|M8x8_Green5_Pin|M8x8_Green7_Pin|D4_Pin
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	4a17      	ldr	r2, [pc, #92]	@ (800074c <MX_GPIO_Init+0x108>)
 80006f0:	601a      	str	r2, [r3, #0]
                          |D5_Pin|D6_Pin|M8x8_S2_Pin|M8x8_Red3_Pin
                          |M8x8_Red2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2201      	movs	r2, #1
 80006f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	193a      	adds	r2, r7, r4
 8000706:	23a0      	movs	r3, #160	@ 0xa0
 8000708:	05db      	lsls	r3, r3, #23
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f000 ffad 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : M8x8_Green6_Pin M8x8_Red7_Pin M8x8_Red6_Pin M8x8_S3_Pin
                           M8x8_Red5_Pin M8x8_Red4_Pin M8x8_Green2_Pin M8x8_Green1_Pin
                           M8x8_Red8_Pin M8x8_S6_Pin M8x8_S4_Pin M8x8_S5_Pin
                           D7_Pin RW_Pin EN_Pin */
  GPIO_InitStruct.Pin = M8x8_Green6_Pin|M8x8_Red7_Pin|M8x8_Red6_Pin|M8x8_S3_Pin
 8000712:	0021      	movs	r1, r4
 8000714:	187b      	adds	r3, r7, r1
 8000716:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <MX_GPIO_Init+0x10c>)
 8000718:	601a      	str	r2, [r3, #0]
                          |M8x8_Red5_Pin|M8x8_Red4_Pin|M8x8_Green2_Pin|M8x8_Green1_Pin
                          |M8x8_Red8_Pin|M8x8_S6_Pin|M8x8_S4_Pin|M8x8_S5_Pin
                          |D7_Pin|RW_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2201      	movs	r2, #1
 800071e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	187b      	adds	r3, r7, r1
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072c:	187b      	adds	r3, r7, r1
 800072e:	4a09      	ldr	r2, [pc, #36]	@ (8000754 <MX_GPIO_Init+0x110>)
 8000730:	0019      	movs	r1, r3
 8000732:	0010      	movs	r0, r2
 8000734:	f000 ff9a 	bl	800166c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b009      	add	sp, #36	@ 0x24
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	000003f2 	.word	0x000003f2
 8000748:	50000800 	.word	0x50000800
 800074c:	000019f3 	.word	0x000019f3
 8000750:	0000ff7f 	.word	0x0000ff7f
 8000754:	50000400 	.word	0x50000400

08000758 <M8x8_Manager>:

/* USER CODE BEGIN 4 */
void M8x8_Manager(uint8_t data, char * color){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	0002      	movs	r2, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	701a      	strb	r2, [r3, #0]
	if (!strcmp(color, "SELECT")){
 8000766:	4ac2      	ldr	r2, [pc, #776]	@ (8000a70 <M8x8_Manager+0x318>)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f7ff fccb 	bl	8000108 <strcmp>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d15f      	bne.n	8000836 <M8x8_Manager+0xde>
	  HAL_GPIO_WritePin(M8x8_S1_GPIO_Port, M8x8_S1_Pin, (data >> 0) & 1);
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2201      	movs	r2, #1
 800077c:	4013      	ands	r3, r2
 800077e:	b2db      	uxtb	r3, r3
 8000780:	48bc      	ldr	r0, [pc, #752]	@ (8000a74 <M8x8_Manager+0x31c>)
 8000782:	001a      	movs	r2, r3
 8000784:	2180      	movs	r1, #128	@ 0x80
 8000786:	f001 f8e7 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_S2_GPIO_Port, M8x8_S2_Pin, (data >> 1) & 1);
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	085b      	lsrs	r3, r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2201      	movs	r2, #1
 8000794:	4013      	ands	r3, r2
 8000796:	b2da      	uxtb	r2, r3
 8000798:	2380      	movs	r3, #128	@ 0x80
 800079a:	0059      	lsls	r1, r3, #1
 800079c:	23a0      	movs	r3, #160	@ 0xa0
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 f8d9 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_S3_GPIO_Port, M8x8_S3_Pin, (data >> 2) & 1);
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	089b      	lsrs	r3, r3, #2
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2201      	movs	r2, #1
 80007b0:	4013      	ands	r3, r2
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	2380      	movs	r3, #128	@ 0x80
 80007b6:	00db      	lsls	r3, r3, #3
 80007b8:	48af      	ldr	r0, [pc, #700]	@ (8000a78 <M8x8_Manager+0x320>)
 80007ba:	0019      	movs	r1, r3
 80007bc:	f001 f8cc 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_S4_GPIO_Port, M8x8_S4_Pin, (data >> 3) & 1);
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	08db      	lsrs	r3, r3, #3
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2201      	movs	r2, #1
 80007ca:	4013      	ands	r3, r2
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	48aa      	ldr	r0, [pc, #680]	@ (8000a78 <M8x8_Manager+0x320>)
 80007d0:	001a      	movs	r2, r3
 80007d2:	2110      	movs	r1, #16
 80007d4:	f001 f8c0 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_S5_GPIO_Port, M8x8_S5_Pin, (data >> 4) & 1);
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	091b      	lsrs	r3, r3, #4
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2201      	movs	r2, #1
 80007e2:	4013      	ands	r3, r2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	48a4      	ldr	r0, [pc, #656]	@ (8000a78 <M8x8_Manager+0x320>)
 80007e8:	001a      	movs	r2, r3
 80007ea:	2120      	movs	r1, #32
 80007ec:	f001 f8b4 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_S6_GPIO_Port, M8x8_S6_Pin, (data >> 5) & 1);
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	095b      	lsrs	r3, r3, #5
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2201      	movs	r2, #1
 80007fa:	4013      	ands	r3, r2
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	489e      	ldr	r0, [pc, #632]	@ (8000a78 <M8x8_Manager+0x320>)
 8000800:	001a      	movs	r2, r3
 8000802:	2108      	movs	r1, #8
 8000804:	f001 f8a8 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_S7_GPIO_Port, M8x8_S7_Pin, (data >> 6) & 1);
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	099b      	lsrs	r3, r3, #6
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2201      	movs	r2, #1
 8000812:	4013      	ands	r3, r2
 8000814:	b2da      	uxtb	r2, r3
 8000816:	2380      	movs	r3, #128	@ 0x80
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	4896      	ldr	r0, [pc, #600]	@ (8000a74 <M8x8_Manager+0x31c>)
 800081c:	0019      	movs	r1, r3
 800081e:	f001 f89b 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_S8_GPIO_Port, M8x8_S8_Pin, (data >> 7) & 1);
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	09db      	lsrs	r3, r3, #7
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4892      	ldr	r0, [pc, #584]	@ (8000a74 <M8x8_Manager+0x31c>)
 800082c:	001a      	movs	r2, r3
 800082e:	2140      	movs	r1, #64	@ 0x40
 8000830:	f001 f892 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Green6_GPIO_Port, M8x8_Green6_Pin, !((data >> 5) & 1));
	  HAL_GPIO_WritePin(M8x8_Green7_GPIO_Port, M8x8_Green7_Pin, !((data >> 6) & 1));
	  HAL_GPIO_WritePin(M8x8_Green8_GPIO_Port, M8x8_Green8_Pin, !((data >> 7) & 1));
	}

}
 8000834:	e118      	b.n	8000a68 <M8x8_Manager+0x310>
	else if (!strcmp(color, "RED")){
 8000836:	4a91      	ldr	r2, [pc, #580]	@ (8000a7c <M8x8_Manager+0x324>)
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	0011      	movs	r1, r2
 800083c:	0018      	movs	r0, r3
 800083e:	f7ff fc63 	bl	8000108 <strcmp>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d000      	beq.n	8000848 <M8x8_Manager+0xf0>
 8000846:	e084      	b.n	8000952 <M8x8_Manager+0x1fa>
	  HAL_GPIO_WritePin(M8x8_Red1_GPIO_Port, M8x8_Red1_Pin, !((data >> 0) & 1));
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2201      	movs	r2, #1
 800084e:	4013      	ands	r3, r2
 8000850:	425a      	negs	r2, r3
 8000852:	4153      	adcs	r3, r2
 8000854:	b2db      	uxtb	r3, r3
 8000856:	001a      	movs	r2, r3
 8000858:	4b86      	ldr	r3, [pc, #536]	@ (8000a74 <M8x8_Manager+0x31c>)
 800085a:	2120      	movs	r1, #32
 800085c:	0018      	movs	r0, r3
 800085e:	f001 f87b 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Red2_GPIO_Port, M8x8_Red2_Pin, !((data >> 1) & 1));
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	085b      	lsrs	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	001a      	movs	r2, r3
 800086c:	2301      	movs	r3, #1
 800086e:	4013      	ands	r3, r2
 8000870:	425a      	negs	r2, r3
 8000872:	4153      	adcs	r3, r2
 8000874:	b2db      	uxtb	r3, r3
 8000876:	001a      	movs	r2, r3
 8000878:	2380      	movs	r3, #128	@ 0x80
 800087a:	0159      	lsls	r1, r3, #5
 800087c:	23a0      	movs	r3, #160	@ 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	0018      	movs	r0, r3
 8000882:	f001 f869 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Red3_GPIO_Port, M8x8_Red3_Pin, !((data >> 2) & 1));
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	089b      	lsrs	r3, r3, #2
 800088c:	b2db      	uxtb	r3, r3
 800088e:	001a      	movs	r2, r3
 8000890:	2301      	movs	r3, #1
 8000892:	4013      	ands	r3, r2
 8000894:	425a      	negs	r2, r3
 8000896:	4153      	adcs	r3, r2
 8000898:	b2db      	uxtb	r3, r3
 800089a:	001a      	movs	r2, r3
 800089c:	2380      	movs	r3, #128	@ 0x80
 800089e:	0119      	lsls	r1, r3, #4
 80008a0:	23a0      	movs	r3, #160	@ 0xa0
 80008a2:	05db      	lsls	r3, r3, #23
 80008a4:	0018      	movs	r0, r3
 80008a6:	f001 f857 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Red4_GPIO_Port, M8x8_Red4_Pin, !((data >> 3) & 1));
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	08db      	lsrs	r3, r3, #3
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	001a      	movs	r2, r3
 80008b4:	2301      	movs	r3, #1
 80008b6:	4013      	ands	r3, r2
 80008b8:	425a      	negs	r2, r3
 80008ba:	4153      	adcs	r3, r2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	001a      	movs	r2, r3
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	015b      	lsls	r3, r3, #5
 80008c4:	486c      	ldr	r0, [pc, #432]	@ (8000a78 <M8x8_Manager+0x320>)
 80008c6:	0019      	movs	r1, r3
 80008c8:	f001 f846 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Red5_GPIO_Port, M8x8_Red5_Pin, !((data >> 4) & 1));
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	001a      	movs	r2, r3
 80008d6:	2301      	movs	r3, #1
 80008d8:	4013      	ands	r3, r2
 80008da:	425a      	negs	r2, r3
 80008dc:	4153      	adcs	r3, r2
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	001a      	movs	r2, r3
 80008e2:	2380      	movs	r3, #128	@ 0x80
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	4864      	ldr	r0, [pc, #400]	@ (8000a78 <M8x8_Manager+0x320>)
 80008e8:	0019      	movs	r1, r3
 80008ea:	f001 f835 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Red6_GPIO_Port, M8x8_Red6_Pin, !((data >> 5) & 1));
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	095b      	lsrs	r3, r3, #5
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	001a      	movs	r2, r3
 80008f8:	2301      	movs	r3, #1
 80008fa:	4013      	ands	r3, r2
 80008fc:	425a      	negs	r2, r3
 80008fe:	4153      	adcs	r3, r2
 8000900:	b2db      	uxtb	r3, r3
 8000902:	001a      	movs	r2, r3
 8000904:	4b5c      	ldr	r3, [pc, #368]	@ (8000a78 <M8x8_Manager+0x320>)
 8000906:	2104      	movs	r1, #4
 8000908:	0018      	movs	r0, r3
 800090a:	f001 f825 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Red7_GPIO_Port, M8x8_Red7_Pin, !((data >> 6) & 1));
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	099b      	lsrs	r3, r3, #6
 8000914:	b2db      	uxtb	r3, r3
 8000916:	001a      	movs	r2, r3
 8000918:	2301      	movs	r3, #1
 800091a:	4013      	ands	r3, r2
 800091c:	425a      	negs	r2, r3
 800091e:	4153      	adcs	r3, r2
 8000920:	b2db      	uxtb	r3, r3
 8000922:	001a      	movs	r2, r3
 8000924:	4b54      	ldr	r3, [pc, #336]	@ (8000a78 <M8x8_Manager+0x320>)
 8000926:	2102      	movs	r1, #2
 8000928:	0018      	movs	r0, r3
 800092a:	f001 f815 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Red8_GPIO_Port, M8x8_Red8_Pin, !((data >> 7) & 1));
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	09db      	lsrs	r3, r3, #7
 8000934:	b2db      	uxtb	r3, r3
 8000936:	001a      	movs	r2, r3
 8000938:	2301      	movs	r3, #1
 800093a:	4013      	ands	r3, r2
 800093c:	425a      	negs	r2, r3
 800093e:	4153      	adcs	r3, r2
 8000940:	b2db      	uxtb	r3, r3
 8000942:	001a      	movs	r2, r3
 8000944:	2380      	movs	r3, #128	@ 0x80
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	484b      	ldr	r0, [pc, #300]	@ (8000a78 <M8x8_Manager+0x320>)
 800094a:	0019      	movs	r1, r3
 800094c:	f001 f804 	bl	8001958 <HAL_GPIO_WritePin>
}
 8000950:	e08a      	b.n	8000a68 <M8x8_Manager+0x310>
	else if (!strcmp(color, "GREEN")){
 8000952:	4a4b      	ldr	r2, [pc, #300]	@ (8000a80 <M8x8_Manager+0x328>)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff fbd5 	bl	8000108 <strcmp>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d000      	beq.n	8000964 <M8x8_Manager+0x20c>
 8000962:	e081      	b.n	8000a68 <M8x8_Manager+0x310>
	  HAL_GPIO_WritePin(M8x8_Green1_GPIO_Port, M8x8_Green1_Pin, !((data >> 0) & 1));
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2201      	movs	r2, #1
 800096a:	4013      	ands	r3, r2
 800096c:	425a      	negs	r2, r3
 800096e:	4153      	adcs	r3, r2
 8000970:	b2db      	uxtb	r3, r3
 8000972:	001a      	movs	r2, r3
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	01db      	lsls	r3, r3, #7
 8000978:	483f      	ldr	r0, [pc, #252]	@ (8000a78 <M8x8_Manager+0x320>)
 800097a:	0019      	movs	r1, r3
 800097c:	f000 ffec 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Green2_GPIO_Port, M8x8_Green2_Pin, !((data >> 1) & 1));
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	001a      	movs	r2, r3
 800098a:	2301      	movs	r3, #1
 800098c:	4013      	ands	r3, r2
 800098e:	425a      	negs	r2, r3
 8000990:	4153      	adcs	r3, r2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	001a      	movs	r2, r3
 8000996:	2380      	movs	r3, #128	@ 0x80
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	4837      	ldr	r0, [pc, #220]	@ (8000a78 <M8x8_Manager+0x320>)
 800099c:	0019      	movs	r1, r3
 800099e:	f000 ffdb 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Green3_GPIO_Port, M8x8_Green3_Pin, !((data >> 2) & 1));
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	001a      	movs	r2, r3
 80009ac:	2301      	movs	r3, #1
 80009ae:	4013      	ands	r3, r2
 80009b0:	425a      	negs	r2, r3
 80009b2:	4153      	adcs	r3, r2
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	001a      	movs	r2, r3
 80009b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000a74 <M8x8_Manager+0x31c>)
 80009ba:	2110      	movs	r1, #16
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 ffcb 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Green4_GPIO_Port, M8x8_Green4_Pin, !((data >> 3) & 1));
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	001a      	movs	r2, r3
 80009cc:	2301      	movs	r3, #1
 80009ce:	4013      	ands	r3, r2
 80009d0:	425a      	negs	r2, r3
 80009d2:	4153      	adcs	r3, r2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	001a      	movs	r2, r3
 80009d8:	23a0      	movs	r3, #160	@ 0xa0
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	2101      	movs	r1, #1
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 ffba 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Green5_GPIO_Port, M8x8_Green5_Pin, !((data >> 4) & 1));
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	091b      	lsrs	r3, r3, #4
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	001a      	movs	r2, r3
 80009ee:	2301      	movs	r3, #1
 80009f0:	4013      	ands	r3, r2
 80009f2:	425a      	negs	r2, r3
 80009f4:	4153      	adcs	r3, r2
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	001a      	movs	r2, r3
 80009fa:	23a0      	movs	r3, #160	@ 0xa0
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	2102      	movs	r1, #2
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 ffa9 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Green6_GPIO_Port, M8x8_Green6_Pin, !((data >> 5) & 1));
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	095b      	lsrs	r3, r3, #5
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	001a      	movs	r2, r3
 8000a10:	2301      	movs	r3, #1
 8000a12:	4013      	ands	r3, r2
 8000a14:	425a      	negs	r2, r3
 8000a16:	4153      	adcs	r3, r2
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <M8x8_Manager+0x320>)
 8000a1e:	2101      	movs	r1, #1
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 ff99 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Green7_GPIO_Port, M8x8_Green7_Pin, !((data >> 6) & 1));
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	099b      	lsrs	r3, r3, #6
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	001a      	movs	r2, r3
 8000a30:	2301      	movs	r3, #1
 8000a32:	4013      	ands	r3, r2
 8000a34:	425a      	negs	r2, r3
 8000a36:	4153      	adcs	r3, r2
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	23a0      	movs	r3, #160	@ 0xa0
 8000a3e:	05db      	lsls	r3, r3, #23
 8000a40:	2110      	movs	r1, #16
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 ff88 	bl	8001958 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(M8x8_Green8_GPIO_Port, M8x8_Green8_Pin, !((data >> 7) & 1));
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	09db      	lsrs	r3, r3, #7
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	001a      	movs	r2, r3
 8000a52:	2301      	movs	r3, #1
 8000a54:	4013      	ands	r3, r2
 8000a56:	425a      	negs	r2, r3
 8000a58:	4153      	adcs	r3, r2
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <M8x8_Manager+0x31c>)
 8000a60:	2102      	movs	r1, #2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 ff78 	bl	8001958 <HAL_GPIO_WritePin>
}
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b002      	add	sp, #8
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	08003fc0 	.word	0x08003fc0
 8000a74:	50000800 	.word	0x50000800
 8000a78:	50000400 	.word	0x50000400
 8000a7c:	08003fc8 	.word	0x08003fc8
 8000a80:	08003f90 	.word	0x08003f90

08000a84 <M8x8_Animation>:

void M8x8_Animation(uint8_t frame){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	701a      	strb	r2, [r3, #0]
	switch(frame){
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d100      	bne.n	8000a9a <M8x8_Animation+0x16>
 8000a98:	e092      	b.n	8000bc0 <M8x8_Animation+0x13c>
 8000a9a:	dd00      	ble.n	8000a9e <M8x8_Animation+0x1a>
 8000a9c:	e0c7      	b.n	8000c2e <M8x8_Animation+0x1aa>
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d002      	beq.n	8000aa8 <M8x8_Animation+0x24>
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d037      	beq.n	8000b16 <M8x8_Animation+0x92>
 8000aa6:	e0c2      	b.n	8000c2e <M8x8_Animation+0x1aa>
		case 1:
			Data_Manager_LCD(0xC0, INSTRUCTION);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	20c0      	movs	r0, #192	@ 0xc0
 8000aac:	f000 f9cc 	bl	8000e48 <Data_Manager_LCD>
			Send_Message("START");
 8000ab0:	4b65      	ldr	r3, [pc, #404]	@ (8000c48 <M8x8_Animation+0x1c4>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fafe 	bl	80010b4 <Send_Message>

			if (manipulateColumns >= 8) manipulateLines++;
 8000ab8:	4b64      	ldr	r3, [pc, #400]	@ (8000c4c <M8x8_Animation+0x1c8>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b07      	cmp	r3, #7
 8000abe:	d905      	bls.n	8000acc <M8x8_Animation+0x48>
 8000ac0:	4b63      	ldr	r3, [pc, #396]	@ (8000c50 <M8x8_Animation+0x1cc>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	4b61      	ldr	r3, [pc, #388]	@ (8000c50 <M8x8_Animation+0x1cc>)
 8000aca:	701a      	strb	r2, [r3, #0]
			ConvertedValue(&lines, &manipulateLines);
 8000acc:	4a60      	ldr	r2, [pc, #384]	@ (8000c50 <M8x8_Animation+0x1cc>)
 8000ace:	4b61      	ldr	r3, [pc, #388]	@ (8000c54 <M8x8_Animation+0x1d0>)
 8000ad0:	0011      	movs	r1, r2
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 f91a 	bl	8000d0c <ConvertedValue>
			M8x8_Manager(lines, "SELECT");
 8000ad8:	4b5e      	ldr	r3, [pc, #376]	@ (8000c54 <M8x8_Animation+0x1d0>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4a5e      	ldr	r2, [pc, #376]	@ (8000c58 <M8x8_Animation+0x1d4>)
 8000ade:	0011      	movs	r1, r2
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fe39 	bl	8000758 <M8x8_Manager>

			if (count) manipulateColumns++;
 8000ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8000c5c <M8x8_Animation+0x1d8>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d005      	beq.n	8000afa <M8x8_Animation+0x76>
 8000aee:	4b57      	ldr	r3, [pc, #348]	@ (8000c4c <M8x8_Animation+0x1c8>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b55      	ldr	r3, [pc, #340]	@ (8000c4c <M8x8_Animation+0x1c8>)
 8000af8:	701a      	strb	r2, [r3, #0]

			ConvertedValue(&columns, &manipulateColumns);
 8000afa:	4a54      	ldr	r2, [pc, #336]	@ (8000c4c <M8x8_Animation+0x1c8>)
 8000afc:	4b58      	ldr	r3, [pc, #352]	@ (8000c60 <M8x8_Animation+0x1dc>)
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f000 f903 	bl	8000d0c <ConvertedValue>
			M8x8_Manager(columns, "RED");
 8000b06:	4b56      	ldr	r3, [pc, #344]	@ (8000c60 <M8x8_Animation+0x1dc>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4a56      	ldr	r2, [pc, #344]	@ (8000c64 <M8x8_Animation+0x1e0>)
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f7ff fe22 	bl	8000758 <M8x8_Manager>

			break;
 8000b14:	e094      	b.n	8000c40 <M8x8_Animation+0x1bc>

		case 2:
			Data_Manager_LCD(0xC0, INSTRUCTION);
 8000b16:	2100      	movs	r1, #0
 8000b18:	20c0      	movs	r0, #192	@ 0xc0
 8000b1a:	f000 f995 	bl	8000e48 <Data_Manager_LCD>
			Send_Message("ANIM1");
 8000b1e:	4b52      	ldr	r3, [pc, #328]	@ (8000c68 <M8x8_Animation+0x1e4>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f000 fac7 	bl	80010b4 <Send_Message>

			if (manipulateLines >= 8 || manipulateColumns >= 8) flag = -1;
 8000b26:	4b4a      	ldr	r3, [pc, #296]	@ (8000c50 <M8x8_Animation+0x1cc>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b07      	cmp	r3, #7
 8000b2c:	d803      	bhi.n	8000b36 <M8x8_Animation+0xb2>
 8000b2e:	4b47      	ldr	r3, [pc, #284]	@ (8000c4c <M8x8_Animation+0x1c8>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b07      	cmp	r3, #7
 8000b34:	d904      	bls.n	8000b40 <M8x8_Animation+0xbc>
 8000b36:	4b4d      	ldr	r3, [pc, #308]	@ (8000c6c <M8x8_Animation+0x1e8>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4252      	negs	r2, r2
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e00a      	b.n	8000b56 <M8x8_Animation+0xd2>
			else if (manipulateLines <= 1 || manipulateColumns <= 1) flag = 1;
 8000b40:	4b43      	ldr	r3, [pc, #268]	@ (8000c50 <M8x8_Animation+0x1cc>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d903      	bls.n	8000b50 <M8x8_Animation+0xcc>
 8000b48:	4b40      	ldr	r3, [pc, #256]	@ (8000c4c <M8x8_Animation+0x1c8>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d802      	bhi.n	8000b56 <M8x8_Animation+0xd2>
 8000b50:	4b46      	ldr	r3, [pc, #280]	@ (8000c6c <M8x8_Animation+0x1e8>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	601a      	str	r2, [r3, #0]

			if (count) manipulateLines += flag;
 8000b56:	4b41      	ldr	r3, [pc, #260]	@ (8000c5c <M8x8_Animation+0x1d8>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d008      	beq.n	8000b70 <M8x8_Animation+0xec>
 8000b5e:	4b43      	ldr	r3, [pc, #268]	@ (8000c6c <M8x8_Animation+0x1e8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b3a      	ldr	r3, [pc, #232]	@ (8000c50 <M8x8_Animation+0x1cc>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	18d3      	adds	r3, r2, r3
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	4b38      	ldr	r3, [pc, #224]	@ (8000c50 <M8x8_Animation+0x1cc>)
 8000b6e:	701a      	strb	r2, [r3, #0]
			if (count) manipulateColumns += flag;
 8000b70:	4b3a      	ldr	r3, [pc, #232]	@ (8000c5c <M8x8_Animation+0x1d8>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d008      	beq.n	8000b8a <M8x8_Animation+0x106>
 8000b78:	4b3c      	ldr	r3, [pc, #240]	@ (8000c6c <M8x8_Animation+0x1e8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4b33      	ldr	r3, [pc, #204]	@ (8000c4c <M8x8_Animation+0x1c8>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	18d3      	adds	r3, r2, r3
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4b31      	ldr	r3, [pc, #196]	@ (8000c4c <M8x8_Animation+0x1c8>)
 8000b88:	701a      	strb	r2, [r3, #0]

			ConvertedValue(&lines, &manipulateLines);
 8000b8a:	4a31      	ldr	r2, [pc, #196]	@ (8000c50 <M8x8_Animation+0x1cc>)
 8000b8c:	4b31      	ldr	r3, [pc, #196]	@ (8000c54 <M8x8_Animation+0x1d0>)
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 f8bb 	bl	8000d0c <ConvertedValue>
			M8x8_Manager(lines, "SELECT");
 8000b96:	4b2f      	ldr	r3, [pc, #188]	@ (8000c54 <M8x8_Animation+0x1d0>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c58 <M8x8_Animation+0x1d4>)
 8000b9c:	0011      	movs	r1, r2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff fdda 	bl	8000758 <M8x8_Manager>
			ConvertedValue(&columns, &manipulateColumns);
 8000ba4:	4a29      	ldr	r2, [pc, #164]	@ (8000c4c <M8x8_Animation+0x1c8>)
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8000c60 <M8x8_Animation+0x1dc>)
 8000ba8:	0011      	movs	r1, r2
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 f8ae 	bl	8000d0c <ConvertedValue>
			M8x8_Manager(columns, "RED");
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c60 <M8x8_Animation+0x1dc>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4a2b      	ldr	r2, [pc, #172]	@ (8000c64 <M8x8_Animation+0x1e0>)
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff fdcd 	bl	8000758 <M8x8_Manager>

			break;
 8000bbe:	e03f      	b.n	8000c40 <M8x8_Animation+0x1bc>

		case 3:
			Data_Manager_LCD(0xC0, INSTRUCTION);
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	20c0      	movs	r0, #192	@ 0xc0
 8000bc4:	f000 f940 	bl	8000e48 <Data_Manager_LCD>
			Send_Message("ANIM2");
 8000bc8:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <M8x8_Animation+0x1ec>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 fa72 	bl	80010b4 <Send_Message>

			if (count) manipulateLines++;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <M8x8_Animation+0x1d8>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d005      	beq.n	8000be4 <M8x8_Animation+0x160>
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <M8x8_Animation+0x1cc>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c50 <M8x8_Animation+0x1cc>)
 8000be2:	701a      	strb	r2, [r3, #0]
			if (manipulateLines >= 9) manipulateColumns++;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <M8x8_Animation+0x1cc>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b08      	cmp	r3, #8
 8000bea:	d905      	bls.n	8000bf8 <M8x8_Animation+0x174>
 8000bec:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <M8x8_Animation+0x1c8>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <M8x8_Animation+0x1c8>)
 8000bf6:	701a      	strb	r2, [r3, #0]

			ConvertedValue(&lines, &manipulateLines);
 8000bf8:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <M8x8_Animation+0x1cc>)
 8000bfa:	4b16      	ldr	r3, [pc, #88]	@ (8000c54 <M8x8_Animation+0x1d0>)
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 f884 	bl	8000d0c <ConvertedValue>
			M8x8_Manager(lines, "SELECT");
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <M8x8_Animation+0x1d0>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4a13      	ldr	r2, [pc, #76]	@ (8000c58 <M8x8_Animation+0x1d4>)
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff fda3 	bl	8000758 <M8x8_Manager>
			ConvertedValue(&columns, &manipulateColumns);
 8000c12:	4a0e      	ldr	r2, [pc, #56]	@ (8000c4c <M8x8_Animation+0x1c8>)
 8000c14:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <M8x8_Animation+0x1dc>)
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f000 f877 	bl	8000d0c <ConvertedValue>
			M8x8_Manager(columns, "RED");
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <M8x8_Animation+0x1dc>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	4a10      	ldr	r2, [pc, #64]	@ (8000c64 <M8x8_Animation+0x1e0>)
 8000c24:	0011      	movs	r1, r2
 8000c26:	0018      	movs	r0, r3
 8000c28:	f7ff fd96 	bl	8000758 <M8x8_Manager>

			break;
 8000c2c:	e008      	b.n	8000c40 <M8x8_Animation+0x1bc>

		default:
			Data_Manager_LCD(0xC0, INSTRUCTION);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	20c0      	movs	r0, #192	@ 0xc0
 8000c32:	f000 f909 	bl	8000e48 <Data_Manager_LCD>
			Send_Message("PAUSE");
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <M8x8_Animation+0x1f0>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f000 fa3b 	bl	80010b4 <Send_Message>
			break;
 8000c3e:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b002      	add	sp, #8
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	08003fcc 	.word	0x08003fcc
 8000c4c:	20000004 	.word	0x20000004
 8000c50:	20000005 	.word	0x20000005
 8000c54:	20000007 	.word	0x20000007
 8000c58:	08003fc0 	.word	0x08003fc0
 8000c5c:	200000c3 	.word	0x200000c3
 8000c60:	20000006 	.word	0x20000006
 8000c64:	08003fc8 	.word	0x08003fc8
 8000c68:	08003fd4 	.word	0x08003fd4
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	08003fdc 	.word	0x08003fdc
 8000c74:	08003fe4 	.word	0x08003fe4

08000c78 <Data_Ressive_Interpreter>:

void Data_Ressive_Interpreter(char * ressive){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	if (!strcmp(ressive, "START")) animationSelect = 1;
 8000c80:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf4 <Data_Ressive_Interpreter+0x7c>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	0011      	movs	r1, r2
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff fa3e 	bl	8000108 <strcmp>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d103      	bne.n	8000c98 <Data_Ressive_Interpreter+0x20>
 8000c90:	4b19      	ldr	r3, [pc, #100]	@ (8000cf8 <Data_Ressive_Interpreter+0x80>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	e016      	b.n	8000cc6 <Data_Ressive_Interpreter+0x4e>
	else if (!strcmp(ressive, "ANIM1")) animationSelect = 2;
 8000c98:	4a18      	ldr	r2, [pc, #96]	@ (8000cfc <Data_Ressive_Interpreter+0x84>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	0011      	movs	r1, r2
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fa32 	bl	8000108 <strcmp>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d103      	bne.n	8000cb0 <Data_Ressive_Interpreter+0x38>
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <Data_Ressive_Interpreter+0x80>)
 8000caa:	2202      	movs	r2, #2
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	e00a      	b.n	8000cc6 <Data_Ressive_Interpreter+0x4e>
	else if (!strcmp(ressive, "ANIM2")) animationSelect = 3;
 8000cb0:	4a13      	ldr	r2, [pc, #76]	@ (8000d00 <Data_Ressive_Interpreter+0x88>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0011      	movs	r1, r2
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f7ff fa26 	bl	8000108 <strcmp>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d102      	bne.n	8000cc6 <Data_Ressive_Interpreter+0x4e>
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <Data_Ressive_Interpreter+0x80>)
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	701a      	strb	r2, [r3, #0]

	if (!strcmp(ressive, "STOP")) {
 8000cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000d04 <Data_Ressive_Interpreter+0x8c>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff fa1b 	bl	8000108 <strcmp>
 8000cd2:	1e03      	subs	r3, r0, #0
 8000cd4:	d106      	bne.n	8000ce4 <Data_Ressive_Interpreter+0x6c>
		animationSelect = 4;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <Data_Ressive_Interpreter+0x80>)
 8000cd8:	2204      	movs	r2, #4
 8000cda:	701a      	strb	r2, [r3, #0]
		count = 0;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <Data_Ressive_Interpreter+0x90>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
	}
	else count = 1;

}
 8000ce2:	e002      	b.n	8000cea <Data_Ressive_Interpreter+0x72>
	else count = 1;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <Data_Ressive_Interpreter+0x90>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	08003fcc 	.word	0x08003fcc
 8000cf8:	200000c2 	.word	0x200000c2
 8000cfc:	08003fd4 	.word	0x08003fd4
 8000d00:	08003fdc 	.word	0x08003fdc
 8000d04:	08003fec 	.word	0x08003fec
 8000d08:	200000c3 	.word	0x200000c3

08000d0c <ConvertedValue>:

void ConvertedValue(uint8_t * value, uint8_t * counter){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
	switch(*counter){
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b08      	cmp	r3, #8
 8000d1c:	d824      	bhi.n	8000d68 <ConvertedValue+0x5c>
 8000d1e:	009a      	lsls	r2, r3, #2
 8000d20:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <ConvertedValue+0x74>)
 8000d22:	18d3      	adds	r3, r2, r3
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	469f      	mov	pc, r3
	  case 1:
		  *value = 0x01;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
		  break;
 8000d2e:	e022      	b.n	8000d76 <ConvertedValue+0x6a>
	  case 2:
		  *value = 0x02;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2202      	movs	r2, #2
 8000d34:	701a      	strb	r2, [r3, #0]
		  break;
 8000d36:	e01e      	b.n	8000d76 <ConvertedValue+0x6a>
	  case 3:
		  *value = 0x04;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	701a      	strb	r2, [r3, #0]
		  break;
 8000d3e:	e01a      	b.n	8000d76 <ConvertedValue+0x6a>
	  case 4:
		  *value = 0x08;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2208      	movs	r2, #8
 8000d44:	701a      	strb	r2, [r3, #0]
		  break;
 8000d46:	e016      	b.n	8000d76 <ConvertedValue+0x6a>
	  case 5:
		  *value = 0x10;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2210      	movs	r2, #16
 8000d4c:	701a      	strb	r2, [r3, #0]
		  break;
 8000d4e:	e012      	b.n	8000d76 <ConvertedValue+0x6a>
	  case 6:
		  *value = 0x20;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2220      	movs	r2, #32
 8000d54:	701a      	strb	r2, [r3, #0]
		  break;
 8000d56:	e00e      	b.n	8000d76 <ConvertedValue+0x6a>
	  case 7:
		  *value = 0x40;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2240      	movs	r2, #64	@ 0x40
 8000d5c:	701a      	strb	r2, [r3, #0]
		  break;
 8000d5e:	e00a      	b.n	8000d76 <ConvertedValue+0x6a>
	  case 8:
		  *value = 0x80;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2280      	movs	r2, #128	@ 0x80
 8000d64:	701a      	strb	r2, [r3, #0]
		  break;
 8000d66:	e006      	b.n	8000d76 <ConvertedValue+0x6a>
	  default:
		  *value = 0x01;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
		  *counter = 0x01;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
		  break;
 8000d74:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			@ (mov r8, r8)
 8000d80:	0800402c 	.word	0x0800402c

08000d84 <Start_LCD>:

void Start_LCD(void){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	Data_Manager_LCD(0x33, INSTRUCTION);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2033      	movs	r0, #51	@ 0x33
 8000d8c:	f000 f85c 	bl	8000e48 <Data_Manager_LCD>
	Data_Manager_LCD(0x32, INSTRUCTION);
 8000d90:	2100      	movs	r1, #0
 8000d92:	2032      	movs	r0, #50	@ 0x32
 8000d94:	f000 f858 	bl	8000e48 <Data_Manager_LCD>
	Data_Manager_LCD(0x28, INSTRUCTION);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2028      	movs	r0, #40	@ 0x28
 8000d9c:	f000 f854 	bl	8000e48 <Data_Manager_LCD>
	Data_Manager_LCD(0x06, INSTRUCTION);
 8000da0:	2100      	movs	r1, #0
 8000da2:	2006      	movs	r0, #6
 8000da4:	f000 f850 	bl	8000e48 <Data_Manager_LCD>
	Data_Manager_LCD(0x0C, INSTRUCTION);
 8000da8:	2100      	movs	r1, #0
 8000daa:	200c      	movs	r0, #12
 8000dac:	f000 f84c 	bl	8000e48 <Data_Manager_LCD>
	Data_Manager_LCD(0x01, INSTRUCTION);
 8000db0:	2100      	movs	r1, #0
 8000db2:	2001      	movs	r0, #1
 8000db4:	f000 f848 	bl	8000e48 <Data_Manager_LCD>

	Data_Manager_LCD(0x80, INSTRUCTION);
 8000db8:	2100      	movs	r1, #0
 8000dba:	2080      	movs	r0, #128	@ 0x80
 8000dbc:	f000 f844 	bl	8000e48 <Data_Manager_LCD>
	Send_Message("INITIALIZE");
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <Start_LCD+0xb4>)
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 f976 	bl	80010b4 <Send_Message>
	HAL_Delay(500);
 8000dc8:	23fa      	movs	r3, #250	@ 0xfa
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f000 fac3 	bl	8001358 <HAL_Delay>
	Data_Manager_LCD(0x80, INSTRUCTION);
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2080      	movs	r0, #128	@ 0x80
 8000dd6:	f000 f837 	bl	8000e48 <Data_Manager_LCD>
	Send_Message("INITIALIZE.");
 8000dda:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <Start_LCD+0xb8>)
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 f969 	bl	80010b4 <Send_Message>
	HAL_Delay(500);
 8000de2:	23fa      	movs	r3, #250	@ 0xfa
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 fab6 	bl	8001358 <HAL_Delay>
	Data_Manager_LCD(0x80, INSTRUCTION);
 8000dec:	2100      	movs	r1, #0
 8000dee:	2080      	movs	r0, #128	@ 0x80
 8000df0:	f000 f82a 	bl	8000e48 <Data_Manager_LCD>
	Send_Message("INITIALIZE..");
 8000df4:	4b12      	ldr	r3, [pc, #72]	@ (8000e40 <Start_LCD+0xbc>)
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 f95c 	bl	80010b4 <Send_Message>
	HAL_Delay(500);
 8000dfc:	23fa      	movs	r3, #250	@ 0xfa
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	0018      	movs	r0, r3
 8000e02:	f000 faa9 	bl	8001358 <HAL_Delay>
	Data_Manager_LCD(0x80, INSTRUCTION);
 8000e06:	2100      	movs	r1, #0
 8000e08:	2080      	movs	r0, #128	@ 0x80
 8000e0a:	f000 f81d 	bl	8000e48 <Data_Manager_LCD>
	Send_Message("INITIALIZE...");
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <Start_LCD+0xc0>)
 8000e10:	0018      	movs	r0, r3
 8000e12:	f000 f94f 	bl	80010b4 <Send_Message>
	HAL_Delay(500);
 8000e16:	23fa      	movs	r3, #250	@ 0xfa
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 fa9c 	bl	8001358 <HAL_Delay>
	Data_Manager_LCD(0x80, INSTRUCTION);
 8000e20:	2100      	movs	r1, #0
 8000e22:	2080      	movs	r0, #128	@ 0x80
 8000e24:	f000 f810 	bl	8000e48 <Data_Manager_LCD>
	Data_Manager_LCD(0x01, INSTRUCTION);
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f000 f80c 	bl	8000e48 <Data_Manager_LCD>
}
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	08003ff4 	.word	0x08003ff4
 8000e3c:	08004000 	.word	0x08004000
 8000e40:	0800400c 	.word	0x0800400c
 8000e44:	0800401c 	.word	0x0800401c

08000e48 <Data_Manager_LCD>:

void Data_Manager_LCD(uint8_t data, uint8_t state){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	0002      	movs	r2, r0
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	1dbb      	adds	r3, r7, #6
 8000e56:	1c0a      	adds	r2, r1, #0
 8000e58:	701a      	strb	r2, [r3, #0]
	LCD_PORT.P0 = (data >> 0) & 1;
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4013      	ands	r3, r2
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b90      	ldr	r3, [pc, #576]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	400a      	ands	r2, r1
 8000e6a:	0010      	movs	r0, r2
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	2101      	movs	r1, #1
 8000e70:	438a      	bics	r2, r1
 8000e72:	1c11      	adds	r1, r2, #0
 8000e74:	1c02      	adds	r2, r0, #0
 8000e76:	430a      	orrs	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
	LCD_PORT.P1 = (data >> 1) & 1;
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	085b      	lsrs	r3, r3, #1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	1c1a      	adds	r2, r3, #0
 8000e84:	2301      	movs	r3, #1
 8000e86:	4013      	ands	r3, r2
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b87      	ldr	r3, [pc, #540]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	400a      	ands	r2, r1
 8000e90:	1890      	adds	r0, r2, r2
 8000e92:	781a      	ldrb	r2, [r3, #0]
 8000e94:	2102      	movs	r1, #2
 8000e96:	438a      	bics	r2, r1
 8000e98:	1c11      	adds	r1, r2, #0
 8000e9a:	1c02      	adds	r2, r0, #0
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	701a      	strb	r2, [r3, #0]
	LCD_PORT.P2 = (data >> 2) & 1;
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	089b      	lsrs	r3, r3, #2
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	1c1a      	adds	r2, r3, #0
 8000eaa:	2301      	movs	r3, #1
 8000eac:	4013      	ands	r3, r2
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b7d      	ldr	r3, [pc, #500]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	0090      	lsls	r0, r2, #2
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	2104      	movs	r1, #4
 8000ebc:	438a      	bics	r2, r1
 8000ebe:	1c11      	adds	r1, r2, #0
 8000ec0:	1c02      	adds	r2, r0, #0
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
	LCD_PORT.P3 = (data >> 3) & 1;
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	08db      	lsrs	r3, r3, #3
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	1c1a      	adds	r2, r3, #0
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b74      	ldr	r3, [pc, #464]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	400a      	ands	r2, r1
 8000edc:	00d0      	lsls	r0, r2, #3
 8000ede:	781a      	ldrb	r2, [r3, #0]
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	438a      	bics	r2, r1
 8000ee4:	1c11      	adds	r1, r2, #0
 8000ee6:	1c02      	adds	r2, r0, #0
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	701a      	strb	r2, [r3, #0]
	LCD_PORT.P4 = (data >> 4) & 1;
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	1c1a      	adds	r2, r3, #0
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	4013      	ands	r3, r2
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	4b6a      	ldr	r3, [pc, #424]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	400a      	ands	r2, r1
 8000f02:	0110      	lsls	r0, r2, #4
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	2110      	movs	r1, #16
 8000f08:	438a      	bics	r2, r1
 8000f0a:	1c11      	adds	r1, r2, #0
 8000f0c:	1c02      	adds	r2, r0, #0
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
	LCD_PORT.P5 = (data >> 5) & 1;
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	1c1a      	adds	r2, r3, #0
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	4013      	ands	r3, r2
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b61      	ldr	r3, [pc, #388]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8000f24:	2101      	movs	r1, #1
 8000f26:	400a      	ands	r2, r1
 8000f28:	0150      	lsls	r0, r2, #5
 8000f2a:	781a      	ldrb	r2, [r3, #0]
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	438a      	bics	r2, r1
 8000f30:	1c11      	adds	r1, r2, #0
 8000f32:	1c02      	adds	r2, r0, #0
 8000f34:	430a      	orrs	r2, r1
 8000f36:	701a      	strb	r2, [r3, #0]
	LCD_PORT.P6 = (data >> 6) & 1;
 8000f38:	1dfb      	adds	r3, r7, #7
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	099b      	lsrs	r3, r3, #6
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	1c1a      	adds	r2, r3, #0
 8000f42:	2301      	movs	r3, #1
 8000f44:	4013      	ands	r3, r2
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b57      	ldr	r3, [pc, #348]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	400a      	ands	r2, r1
 8000f4e:	0190      	lsls	r0, r2, #6
 8000f50:	781a      	ldrb	r2, [r3, #0]
 8000f52:	2140      	movs	r1, #64	@ 0x40
 8000f54:	438a      	bics	r2, r1
 8000f56:	1c11      	adds	r1, r2, #0
 8000f58:	1c02      	adds	r2, r0, #0
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	701a      	strb	r2, [r3, #0]
	LCD_PORT.P7 = (data >> 7) & 1;
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	09db      	lsrs	r3, r3, #7
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	1c1a      	adds	r2, r3, #0
 8000f68:	2301      	movs	r3, #1
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8000f70:	01d0      	lsls	r0, r2, #7
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	217f      	movs	r1, #127	@ 0x7f
 8000f76:	400a      	ands	r2, r1
 8000f78:	1c11      	adds	r1, r2, #0
 8000f7a:	1c02      	adds	r2, r0, #0
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, state);
 8000f80:	1dbb      	adds	r3, r7, #6
 8000f82:	781a      	ldrb	r2, [r3, #0]
 8000f84:	2380      	movs	r3, #128	@ 0x80
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4848      	ldr	r0, [pc, #288]	@ (80010ac <Data_Manager_LCD+0x264>)
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	f000 fce4 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000f90:	2380      	movs	r3, #128	@ 0x80
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4846      	ldr	r0, [pc, #280]	@ (80010b0 <Data_Manager_LCD+0x268>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	0019      	movs	r1, r3
 8000f9a:	f000 fcdd 	bl	8001958 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, LCD_PORT.P4);
 8000f9e:	4b42      	ldr	r3, [pc, #264]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	06db      	lsls	r3, r3, #27
 8000fa4:	0fdb      	lsrs	r3, r3, #31
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	001a      	movs	r2, r3
 8000faa:	23a0      	movs	r3, #160	@ 0xa0
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	2120      	movs	r1, #32
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 fcd1 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, LCD_PORT.P5);
 8000fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	069b      	lsls	r3, r3, #26
 8000fbc:	0fdb      	lsrs	r3, r3, #31
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	23a0      	movs	r3, #160	@ 0xa0
 8000fc4:	05db      	lsls	r3, r3, #23
 8000fc6:	2140      	movs	r1, #64	@ 0x40
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f000 fcc5 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, LCD_PORT.P6);
 8000fce:	4b36      	ldr	r3, [pc, #216]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	065b      	lsls	r3, r3, #25
 8000fd4:	0fdb      	lsrs	r3, r3, #31
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	001a      	movs	r2, r3
 8000fda:	23a0      	movs	r3, #160	@ 0xa0
 8000fdc:	05db      	lsls	r3, r3, #23
 8000fde:	2180      	movs	r1, #128	@ 0x80
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 fcb9 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, LCD_PORT.P7);
 8000fe6:	4b30      	ldr	r3, [pc, #192]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	061b      	lsls	r3, r3, #24
 8000fec:	0fdb      	lsrs	r3, r3, #31
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	4b2f      	ldr	r3, [pc, #188]	@ (80010b0 <Data_Manager_LCD+0x268>)
 8000ff4:	2140      	movs	r1, #64	@ 0x40
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 fcae 	bl	8001958 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4a2b      	ldr	r2, [pc, #172]	@ (80010b0 <Data_Manager_LCD+0x268>)
 8001002:	0019      	movs	r1, r3
 8001004:	0010      	movs	r0, r2
 8001006:	f000 fcc4 	bl	8001992 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 800100a:	2001      	movs	r0, #1
 800100c:	f000 f9a4 	bl	8001358 <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4a26      	ldr	r2, [pc, #152]	@ (80010b0 <Data_Manager_LCD+0x268>)
 8001016:	0019      	movs	r1, r3
 8001018:	0010      	movs	r0, r2
 800101a:	f000 fcba 	bl	8001992 <HAL_GPIO_TogglePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, LCD_PORT.P0);
 800101e:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	07db      	lsls	r3, r3, #31
 8001024:	0fdb      	lsrs	r3, r3, #31
 8001026:	b2db      	uxtb	r3, r3
 8001028:	001a      	movs	r2, r3
 800102a:	23a0      	movs	r3, #160	@ 0xa0
 800102c:	05db      	lsls	r3, r3, #23
 800102e:	2120      	movs	r1, #32
 8001030:	0018      	movs	r0, r3
 8001032:	f000 fc91 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, LCD_PORT.P1);
 8001036:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	079b      	lsls	r3, r3, #30
 800103c:	0fdb      	lsrs	r3, r3, #31
 800103e:	b2db      	uxtb	r3, r3
 8001040:	001a      	movs	r2, r3
 8001042:	23a0      	movs	r3, #160	@ 0xa0
 8001044:	05db      	lsls	r3, r3, #23
 8001046:	2140      	movs	r1, #64	@ 0x40
 8001048:	0018      	movs	r0, r3
 800104a:	f000 fc85 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, LCD_PORT.P2);
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	075b      	lsls	r3, r3, #29
 8001054:	0fdb      	lsrs	r3, r3, #31
 8001056:	b2db      	uxtb	r3, r3
 8001058:	001a      	movs	r2, r3
 800105a:	23a0      	movs	r3, #160	@ 0xa0
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	2180      	movs	r1, #128	@ 0x80
 8001060:	0018      	movs	r0, r3
 8001062:	f000 fc79 	bl	8001958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, LCD_PORT.P3);
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <Data_Manager_LCD+0x260>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	071b      	lsls	r3, r3, #28
 800106c:	0fdb      	lsrs	r3, r3, #31
 800106e:	b2db      	uxtb	r3, r3
 8001070:	001a      	movs	r2, r3
 8001072:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <Data_Manager_LCD+0x268>)
 8001074:	2140      	movs	r1, #64	@ 0x40
 8001076:	0018      	movs	r0, r3
 8001078:	f000 fc6e 	bl	8001958 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 800107c:	2380      	movs	r3, #128	@ 0x80
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4a0b      	ldr	r2, [pc, #44]	@ (80010b0 <Data_Manager_LCD+0x268>)
 8001082:	0019      	movs	r1, r3
 8001084:	0010      	movs	r0, r2
 8001086:	f000 fc84 	bl	8001992 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f000 f964 	bl	8001358 <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4a06      	ldr	r2, [pc, #24]	@ (80010b0 <Data_Manager_LCD+0x268>)
 8001096:	0019      	movs	r1, r3
 8001098:	0010      	movs	r0, r2
 800109a:	f000 fc7a 	bl	8001992 <HAL_GPIO_TogglePin>
}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b002      	add	sp, #8
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	200000b8 	.word	0x200000b8
 80010ac:	50000800 	.word	0x50000800
 80010b0:	50000400 	.word	0x50000400

080010b4 <Send_Message>:

void Send_Message(char *message){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	for (int i = 0; message[i] != '\0'; ++i){
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e00a      	b.n	80010d8 <Send_Message+0x24>
		Data_Manager_LCD(message[i], DATA);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	18d3      	adds	r3, r2, r3
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2101      	movs	r1, #1
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff febb 	bl	8000e48 <Data_Manager_LCD>
	for (int i = 0; message[i] != '\0'; ++i){
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	18d3      	adds	r3, r2, r3
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1ee      	bne.n	80010c2 <Send_Message+0xe>
	}
}
 80010e4:	46c0      	nop			@ (mov r8, r8)
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b004      	add	sp, #16
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]

}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}

080010fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001102:	b672      	cpsid	i
}
 8001104:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	e7fd      	b.n	8001106 <Error_Handler+0x8>
	...

0800110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <HAL_MspInit+0x24>)
 8001112:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_MspInit+0x24>)
 8001116:	2101      	movs	r1, #1
 8001118:	430a      	orrs	r2, r1
 800111a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <HAL_MspInit+0x24>)
 800111e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <HAL_MspInit+0x24>)
 8001122:	2180      	movs	r1, #128	@ 0x80
 8001124:	0549      	lsls	r1, r1, #21
 8001126:	430a      	orrs	r2, r1
 8001128:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b089      	sub	sp, #36	@ 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	240c      	movs	r4, #12
 800113e:	193b      	adds	r3, r7, r4
 8001140:	0018      	movs	r0, r3
 8001142:	2314      	movs	r3, #20
 8001144:	001a      	movs	r2, r3
 8001146:	2100      	movs	r1, #0
 8001148:	f002 feea 	bl	8003f20 <memset>
  if(huart->Instance==USART1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a1c      	ldr	r2, [pc, #112]	@ (80011c4 <HAL_UART_MspInit+0x90>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d132      	bne.n	80011bc <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001156:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <HAL_UART_MspInit+0x94>)
 8001158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800115a:	4b1b      	ldr	r3, [pc, #108]	@ (80011c8 <HAL_UART_MspInit+0x94>)
 800115c:	2180      	movs	r1, #128	@ 0x80
 800115e:	01c9      	lsls	r1, r1, #7
 8001160:	430a      	orrs	r2, r1
 8001162:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <HAL_UART_MspInit+0x94>)
 8001166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001168:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <HAL_UART_MspInit+0x94>)
 800116a:	2101      	movs	r1, #1
 800116c:	430a      	orrs	r2, r1
 800116e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001170:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <HAL_UART_MspInit+0x94>)
 8001172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001174:	2201      	movs	r2, #1
 8001176:	4013      	ands	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800117c:	193b      	adds	r3, r7, r4
 800117e:	22c0      	movs	r2, #192	@ 0xc0
 8001180:	00d2      	lsls	r2, r2, #3
 8001182:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	0021      	movs	r1, r4
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2202      	movs	r2, #2
 800118a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2203      	movs	r2, #3
 8001196:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2204      	movs	r2, #4
 800119c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	187a      	adds	r2, r7, r1
 80011a0:	23a0      	movs	r3, #160	@ 0xa0
 80011a2:	05db      	lsls	r3, r3, #23
 80011a4:	0011      	movs	r1, r2
 80011a6:	0018      	movs	r0, r3
 80011a8:	f000 fa60 	bl	800166c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2100      	movs	r1, #0
 80011b0:	201b      	movs	r0, #27
 80011b2:	f000 f9a1 	bl	80014f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011b6:	201b      	movs	r0, #27
 80011b8:	f000 f9b3 	bl	8001522 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b009      	add	sp, #36	@ 0x24
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	40013800 	.word	0x40013800
 80011c8:	40021000 	.word	0x40021000

080011cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d0:	46c0      	nop			@ (mov r8, r8)
 80011d2:	e7fd      	b.n	80011d0 <NMI_Handler+0x4>

080011d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	e7fd      	b.n	80011d8 <HardFault_Handler+0x4>

080011dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011e0:	46c0      	nop			@ (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f4:	f000 f894 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f8:	46c0      	nop			@ (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <USART1_IRQHandler+0x14>)
 8001206:	0018      	movs	r0, r3
 8001208:	f001 fbe6 	bl	80029d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800120c:	46c0      	nop			@ (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	20000030 	.word	0x20000030

08001218 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800121c:	46c0      	nop			@ (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001224:	480d      	ldr	r0, [pc, #52]	@ (800125c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001226:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001228:	f7ff fff6 	bl	8001218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800122c:	480c      	ldr	r0, [pc, #48]	@ (8001260 <LoopForever+0x6>)
  ldr r1, =_edata
 800122e:	490d      	ldr	r1, [pc, #52]	@ (8001264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <LoopForever+0xe>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001244:	4c0a      	ldr	r4, [pc, #40]	@ (8001270 <LoopForever+0x16>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001252:	f002 fe6d 	bl	8003f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001256:	f7ff f903 	bl	8000460 <main>

0800125a <LoopForever>:

LoopForever:
    b LoopForever
 800125a:	e7fe      	b.n	800125a <LoopForever>
  ldr   r0, =_estack
 800125c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001268:	080040cc 	.word	0x080040cc
  ldr r2, =_sbss
 800126c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001270:	200000c8 	.word	0x200000c8

08001274 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC1_COMP_IRQHandler>
	...

08001278 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001284:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <HAL_Init+0x3c>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <HAL_Init+0x3c>)
 800128a:	2140      	movs	r1, #64	@ 0x40
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001290:	2000      	movs	r0, #0
 8001292:	f000 f811 	bl	80012b8 <HAL_InitTick>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d003      	beq.n	80012a2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	e001      	b.n	80012a6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a2:	f7ff ff33 	bl	800110c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781b      	ldrb	r3, [r3, #0]
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b002      	add	sp, #8
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	40022000 	.word	0x40022000

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c0:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <HAL_InitTick+0x5c>)
 80012c2:	681c      	ldr	r4, [r3, #0]
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <HAL_InitTick+0x60>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	0019      	movs	r1, r3
 80012ca:	23fa      	movs	r3, #250	@ 0xfa
 80012cc:	0098      	lsls	r0, r3, #2
 80012ce:	f7fe ff25 	bl	800011c <__udivsi3>
 80012d2:	0003      	movs	r3, r0
 80012d4:	0019      	movs	r1, r3
 80012d6:	0020      	movs	r0, r4
 80012d8:	f7fe ff20 	bl	800011c <__udivsi3>
 80012dc:	0003      	movs	r3, r0
 80012de:	0018      	movs	r0, r3
 80012e0:	f000 f92f 	bl	8001542 <HAL_SYSTICK_Config>
 80012e4:	1e03      	subs	r3, r0, #0
 80012e6:	d001      	beq.n	80012ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e00f      	b.n	800130c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d80b      	bhi.n	800130a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	2301      	movs	r3, #1
 80012f6:	425b      	negs	r3, r3
 80012f8:	2200      	movs	r2, #0
 80012fa:	0018      	movs	r0, r3
 80012fc:	f000 f8fc 	bl	80014f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_InitTick+0x64>)
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b003      	add	sp, #12
 8001312:	bd90      	pop	{r4, r7, pc}
 8001314:	20000008 	.word	0x20000008
 8001318:	20000010 	.word	0x20000010
 800131c:	2000000c 	.word	0x2000000c

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b05      	ldr	r3, [pc, #20]	@ (800133c <HAL_IncTick+0x1c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	001a      	movs	r2, r3
 800132a:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <HAL_IncTick+0x20>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	18d2      	adds	r2, r2, r3
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_IncTick+0x20>)
 8001332:	601a      	str	r2, [r3, #0]
}
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	20000010 	.word	0x20000010
 8001340:	200000c4 	.word	0x200000c4

08001344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;
 8001348:	4b02      	ldr	r3, [pc, #8]	@ (8001354 <HAL_GetTick+0x10>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	200000c4 	.word	0x200000c4

08001358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f7ff fff0 	bl	8001344 <HAL_GetTick>
 8001364:	0003      	movs	r3, r0
 8001366:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3301      	adds	r3, #1
 8001370:	d005      	beq.n	800137e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001372:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <HAL_Delay+0x44>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	001a      	movs	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	189b      	adds	r3, r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	f7ff ffe0 	bl	8001344 <HAL_GetTick>
 8001384:	0002      	movs	r2, r0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d8f7      	bhi.n	8001380 <HAL_Delay+0x28>
  {
  }
}
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b004      	add	sp, #16
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	20000010 	.word	0x20000010

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	0002      	movs	r2, r0
 80013a8:	1dfb      	adds	r3, r7, #7
 80013aa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80013b2:	d809      	bhi.n	80013c8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b4:	1dfb      	adds	r3, r7, #7
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	001a      	movs	r2, r3
 80013ba:	231f      	movs	r3, #31
 80013bc:	401a      	ands	r2, r3
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <__NVIC_EnableIRQ+0x30>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	4091      	lsls	r1, r2
 80013c4:	000a      	movs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
  }
}
 80013c8:	46c0      	nop			@ (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	0002      	movs	r2, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80013e8:	d828      	bhi.n	800143c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ea:	4a2f      	ldr	r2, [pc, #188]	@ (80014a8 <__NVIC_SetPriority+0xd4>)
 80013ec:	1dfb      	adds	r3, r7, #7
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b25b      	sxtb	r3, r3
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	33c0      	adds	r3, #192	@ 0xc0
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	589b      	ldr	r3, [r3, r2]
 80013fa:	1dfa      	adds	r2, r7, #7
 80013fc:	7812      	ldrb	r2, [r2, #0]
 80013fe:	0011      	movs	r1, r2
 8001400:	2203      	movs	r2, #3
 8001402:	400a      	ands	r2, r1
 8001404:	00d2      	lsls	r2, r2, #3
 8001406:	21ff      	movs	r1, #255	@ 0xff
 8001408:	4091      	lsls	r1, r2
 800140a:	000a      	movs	r2, r1
 800140c:	43d2      	mvns	r2, r2
 800140e:	401a      	ands	r2, r3
 8001410:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	019b      	lsls	r3, r3, #6
 8001416:	22ff      	movs	r2, #255	@ 0xff
 8001418:	401a      	ands	r2, r3
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	0018      	movs	r0, r3
 8001420:	2303      	movs	r3, #3
 8001422:	4003      	ands	r3, r0
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001428:	481f      	ldr	r0, [pc, #124]	@ (80014a8 <__NVIC_SetPriority+0xd4>)
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b25b      	sxtb	r3, r3
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	430a      	orrs	r2, r1
 8001434:	33c0      	adds	r3, #192	@ 0xc0
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800143a:	e031      	b.n	80014a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800143c:	4a1b      	ldr	r2, [pc, #108]	@ (80014ac <__NVIC_SetPriority+0xd8>)
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	0019      	movs	r1, r3
 8001444:	230f      	movs	r3, #15
 8001446:	400b      	ands	r3, r1
 8001448:	3b08      	subs	r3, #8
 800144a:	089b      	lsrs	r3, r3, #2
 800144c:	3306      	adds	r3, #6
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	18d3      	adds	r3, r2, r3
 8001452:	3304      	adds	r3, #4
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1dfa      	adds	r2, r7, #7
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	0011      	movs	r1, r2
 800145c:	2203      	movs	r2, #3
 800145e:	400a      	ands	r2, r1
 8001460:	00d2      	lsls	r2, r2, #3
 8001462:	21ff      	movs	r1, #255	@ 0xff
 8001464:	4091      	lsls	r1, r2
 8001466:	000a      	movs	r2, r1
 8001468:	43d2      	mvns	r2, r2
 800146a:	401a      	ands	r2, r3
 800146c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	019b      	lsls	r3, r3, #6
 8001472:	22ff      	movs	r2, #255	@ 0xff
 8001474:	401a      	ands	r2, r3
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	0018      	movs	r0, r3
 800147c:	2303      	movs	r3, #3
 800147e:	4003      	ands	r3, r0
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001484:	4809      	ldr	r0, [pc, #36]	@ (80014ac <__NVIC_SetPriority+0xd8>)
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	001c      	movs	r4, r3
 800148c:	230f      	movs	r3, #15
 800148e:	4023      	ands	r3, r4
 8001490:	3b08      	subs	r3, #8
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	430a      	orrs	r2, r1
 8001496:	3306      	adds	r3, #6
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	18c3      	adds	r3, r0, r3
 800149c:	3304      	adds	r3, #4
 800149e:	601a      	str	r2, [r3, #0]
}
 80014a0:	46c0      	nop			@ (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b003      	add	sp, #12
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	1e5a      	subs	r2, r3, #1
 80014bc:	2380      	movs	r3, #128	@ 0x80
 80014be:	045b      	lsls	r3, r3, #17
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d301      	bcc.n	80014c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c4:	2301      	movs	r3, #1
 80014c6:	e010      	b.n	80014ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c8:	4b0a      	ldr	r3, [pc, #40]	@ (80014f4 <SysTick_Config+0x44>)
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	3a01      	subs	r2, #1
 80014ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d0:	2301      	movs	r3, #1
 80014d2:	425b      	negs	r3, r3
 80014d4:	2103      	movs	r1, #3
 80014d6:	0018      	movs	r0, r3
 80014d8:	f7ff ff7c 	bl	80013d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <SysTick_Config+0x44>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e2:	4b04      	ldr	r3, [pc, #16]	@ (80014f4 <SysTick_Config+0x44>)
 80014e4:	2207      	movs	r2, #7
 80014e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b002      	add	sp, #8
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	e000e010 	.word	0xe000e010

080014f8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	210f      	movs	r1, #15
 8001504:	187b      	adds	r3, r7, r1
 8001506:	1c02      	adds	r2, r0, #0
 8001508:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	187b      	adds	r3, r7, r1
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b25b      	sxtb	r3, r3
 8001512:	0011      	movs	r1, r2
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff ff5d 	bl	80013d4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b004      	add	sp, #16
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	0002      	movs	r2, r0
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b25b      	sxtb	r3, r3
 8001534:	0018      	movs	r0, r3
 8001536:	f7ff ff33 	bl	80013a0 <__NVIC_EnableIRQ>
}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff ffaf 	bl	80014b0 <SysTick_Config>
 8001552:	0003      	movs	r3, r0
}
 8001554:	0018      	movs	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	b002      	add	sp, #8
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001564:	230f      	movs	r3, #15
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2225      	movs	r2, #37	@ 0x25
 8001570:	5c9b      	ldrb	r3, [r3, r2]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d008      	beq.n	800158a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2204      	movs	r2, #4
 800157c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2224      	movs	r2, #36	@ 0x24
 8001582:	2100      	movs	r1, #0
 8001584:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e024      	b.n	80015d4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	210e      	movs	r1, #14
 8001596:	438a      	bics	r2, r1
 8001598:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2101      	movs	r1, #1
 80015a6:	438a      	bics	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	221c      	movs	r2, #28
 80015b0:	401a      	ands	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	2101      	movs	r1, #1
 80015b8:	4091      	lsls	r1, r2
 80015ba:	000a      	movs	r2, r1
 80015bc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2225      	movs	r2, #37	@ 0x25
 80015c2:	2101      	movs	r1, #1
 80015c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2224      	movs	r2, #36	@ 0x24
 80015ca:	2100      	movs	r1, #0
 80015cc:	5499      	strb	r1, [r3, r2]

    return status;
 80015ce:	230f      	movs	r3, #15
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80015d4:	0018      	movs	r0, r3
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b004      	add	sp, #16
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e4:	210f      	movs	r1, #15
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2225      	movs	r2, #37	@ 0x25
 80015f0:	5c9b      	ldrb	r3, [r3, r2]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d006      	beq.n	8001606 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2204      	movs	r2, #4
 80015fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015fe:	187b      	adds	r3, r7, r1
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
 8001604:	e02a      	b.n	800165c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	210e      	movs	r1, #14
 8001612:	438a      	bics	r2, r1
 8001614:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	438a      	bics	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	221c      	movs	r2, #28
 800162c:	401a      	ands	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	2101      	movs	r1, #1
 8001634:	4091      	lsls	r1, r2
 8001636:	000a      	movs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2225      	movs	r2, #37	@ 0x25
 800163e:	2101      	movs	r1, #1
 8001640:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2224      	movs	r2, #36	@ 0x24
 8001646:	2100      	movs	r1, #0
 8001648:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	0010      	movs	r0, r2
 800165a:	4798      	blx	r3
    }
  }
  return status;
 800165c:	230f      	movs	r3, #15
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	781b      	ldrb	r3, [r3, #0]
}
 8001662:	0018      	movs	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	b004      	add	sp, #16
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001682:	e14f      	b.n	8001924 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4091      	lsls	r1, r2
 800168e:	000a      	movs	r2, r1
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d100      	bne.n	800169c <HAL_GPIO_Init+0x30>
 800169a:	e140      	b.n	800191e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2203      	movs	r2, #3
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d005      	beq.n	80016b4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2203      	movs	r2, #3
 80016ae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	43da      	mvns	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	409a      	lsls	r2, r3
 80016d6:	0013      	movs	r3, r2
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	43da      	mvns	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	2201      	movs	r2, #1
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2203      	movs	r2, #3
 800171c:	4013      	ands	r3, r2
 800171e:	2b03      	cmp	r3, #3
 8001720:	d017      	beq.n	8001752 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	43da      	mvns	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2203      	movs	r2, #3
 8001758:	4013      	ands	r3, r2
 800175a:	2b02      	cmp	r3, #2
 800175c:	d123      	bne.n	80017a6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	08da      	lsrs	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3208      	adds	r2, #8
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	58d3      	ldr	r3, [r2, r3]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2207      	movs	r2, #7
 8001770:	4013      	ands	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	409a      	lsls	r2, r3
 8001778:	0013      	movs	r3, r2
 800177a:	43da      	mvns	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2107      	movs	r1, #7
 800178a:	400b      	ands	r3, r1
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	08da      	lsrs	r2, r3, #3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3208      	adds	r2, #8
 80017a0:	0092      	lsls	r2, r2, #2
 80017a2:	6939      	ldr	r1, [r7, #16]
 80017a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	409a      	lsls	r2, r3
 80017b4:	0013      	movs	r3, r2
 80017b6:	43da      	mvns	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2203      	movs	r2, #3
 80017c4:	401a      	ands	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	23c0      	movs	r3, #192	@ 0xc0
 80017e0:	029b      	lsls	r3, r3, #10
 80017e2:	4013      	ands	r3, r2
 80017e4:	d100      	bne.n	80017e8 <HAL_GPIO_Init+0x17c>
 80017e6:	e09a      	b.n	800191e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e8:	4b54      	ldr	r3, [pc, #336]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80017ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017ec:	4b53      	ldr	r3, [pc, #332]	@ (800193c <HAL_GPIO_Init+0x2d0>)
 80017ee:	2101      	movs	r1, #1
 80017f0:	430a      	orrs	r2, r1
 80017f2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f4:	4a52      	ldr	r2, [pc, #328]	@ (8001940 <HAL_GPIO_Init+0x2d4>)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	589b      	ldr	r3, [r3, r2]
 8001800:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2203      	movs	r2, #3
 8001806:	4013      	ands	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	220f      	movs	r2, #15
 800180c:	409a      	lsls	r2, r3
 800180e:	0013      	movs	r3, r2
 8001810:	43da      	mvns	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	23a0      	movs	r3, #160	@ 0xa0
 800181c:	05db      	lsls	r3, r3, #23
 800181e:	429a      	cmp	r2, r3
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_Init+0x1ea>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a47      	ldr	r2, [pc, #284]	@ (8001944 <HAL_GPIO_Init+0x2d8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0x1e6>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a46      	ldr	r2, [pc, #280]	@ (8001948 <HAL_GPIO_Init+0x2dc>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00d      	beq.n	800184e <HAL_GPIO_Init+0x1e2>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a45      	ldr	r2, [pc, #276]	@ (800194c <HAL_GPIO_Init+0x2e0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_Init+0x1de>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a44      	ldr	r2, [pc, #272]	@ (8001950 <HAL_GPIO_Init+0x2e4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_Init+0x1da>
 8001842:	2305      	movs	r3, #5
 8001844:	e008      	b.n	8001858 <HAL_GPIO_Init+0x1ec>
 8001846:	2306      	movs	r3, #6
 8001848:	e006      	b.n	8001858 <HAL_GPIO_Init+0x1ec>
 800184a:	2303      	movs	r3, #3
 800184c:	e004      	b.n	8001858 <HAL_GPIO_Init+0x1ec>
 800184e:	2302      	movs	r3, #2
 8001850:	e002      	b.n	8001858 <HAL_GPIO_Init+0x1ec>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <HAL_GPIO_Init+0x1ec>
 8001856:	2300      	movs	r3, #0
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	2103      	movs	r1, #3
 800185c:	400a      	ands	r2, r1
 800185e:	0092      	lsls	r2, r2, #2
 8001860:	4093      	lsls	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001868:	4935      	ldr	r1, [pc, #212]	@ (8001940 <HAL_GPIO_Init+0x2d4>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	3302      	adds	r3, #2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001876:	4b37      	ldr	r3, [pc, #220]	@ (8001954 <HAL_GPIO_Init+0x2e8>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	2380      	movs	r3, #128	@ 0x80
 800188c:	035b      	lsls	r3, r3, #13
 800188e:	4013      	ands	r3, r2
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800189a:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <HAL_GPIO_Init+0x2e8>)
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001954 <HAL_GPIO_Init+0x2e8>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43da      	mvns	r2, r3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	039b      	lsls	r3, r3, #14
 80018b8:	4013      	ands	r3, r2
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018c4:	4b23      	ldr	r3, [pc, #140]	@ (8001954 <HAL_GPIO_Init+0x2e8>)
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80018ca:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <HAL_GPIO_Init+0x2e8>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	43da      	mvns	r2, r3
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	2380      	movs	r3, #128	@ 0x80
 80018e0:	029b      	lsls	r3, r3, #10
 80018e2:	4013      	ands	r3, r2
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018ee:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <HAL_GPIO_Init+0x2e8>)
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f4:	4b17      	ldr	r3, [pc, #92]	@ (8001954 <HAL_GPIO_Init+0x2e8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43da      	mvns	r2, r3
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	025b      	lsls	r3, r3, #9
 800190c:	4013      	ands	r3, r2
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001918:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <HAL_GPIO_Init+0x2e8>)
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	40da      	lsrs	r2, r3
 800192c:	1e13      	subs	r3, r2, #0
 800192e:	d000      	beq.n	8001932 <HAL_GPIO_Init+0x2c6>
 8001930:	e6a8      	b.n	8001684 <HAL_GPIO_Init+0x18>
  }
}
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	46c0      	nop			@ (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	b006      	add	sp, #24
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000
 8001940:	40010000 	.word	0x40010000
 8001944:	50000400 	.word	0x50000400
 8001948:	50000800 	.word	0x50000800
 800194c:	50000c00 	.word	0x50000c00
 8001950:	50001c00 	.word	0x50001c00
 8001954:	40010400 	.word	0x40010400

08001958 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	0008      	movs	r0, r1
 8001962:	0011      	movs	r1, r2
 8001964:	1cbb      	adds	r3, r7, #2
 8001966:	1c02      	adds	r2, r0, #0
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	1c7b      	adds	r3, r7, #1
 800196c:	1c0a      	adds	r2, r1, #0
 800196e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001970:	1c7b      	adds	r3, r7, #1
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d004      	beq.n	8001982 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001978:	1cbb      	adds	r3, r7, #2
 800197a:	881a      	ldrh	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001980:	e003      	b.n	800198a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001982:	1cbb      	adds	r3, r7, #2
 8001984:	881a      	ldrh	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b002      	add	sp, #8
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	000a      	movs	r2, r1
 800199c:	1cbb      	adds	r3, r7, #2
 800199e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a6:	1cbb      	adds	r3, r7, #2
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4013      	ands	r3, r2
 80019ae:	041a      	lsls	r2, r3, #16
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	1cb9      	adds	r1, r7, #2
 80019b6:	8809      	ldrh	r1, [r1, #0]
 80019b8:	400b      	ands	r3, r1
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	619a      	str	r2, [r3, #24]
}
 80019c0:	46c0      	nop			@ (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b004      	add	sp, #16
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c8:	b5b0      	push	{r4, r5, r7, lr}
 80019ca:	b08a      	sub	sp, #40	@ 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f000 fbaf 	bl	800213a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019dc:	4bcf      	ldr	r3, [pc, #828]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	220c      	movs	r2, #12
 80019e2:	4013      	ands	r3, r2
 80019e4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e6:	4bcd      	ldr	r3, [pc, #820]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	2380      	movs	r3, #128	@ 0x80
 80019ec:	025b      	lsls	r3, r3, #9
 80019ee:	4013      	ands	r3, r2
 80019f0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2201      	movs	r2, #1
 80019f8:	4013      	ands	r3, r2
 80019fa:	d100      	bne.n	80019fe <HAL_RCC_OscConfig+0x36>
 80019fc:	e07e      	b.n	8001afc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d007      	beq.n	8001a14 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a04:	6a3b      	ldr	r3, [r7, #32]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d112      	bne.n	8001a30 <HAL_RCC_OscConfig+0x68>
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	025b      	lsls	r3, r3, #9
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d10d      	bne.n	8001a30 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a14:	4bc1      	ldr	r3, [pc, #772]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	@ 0x80
 8001a1a:	029b      	lsls	r3, r3, #10
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d100      	bne.n	8001a22 <HAL_RCC_OscConfig+0x5a>
 8001a20:	e06b      	b.n	8001afa <HAL_RCC_OscConfig+0x132>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d167      	bne.n	8001afa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f000 fb85 	bl	800213a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	2380      	movs	r3, #128	@ 0x80
 8001a36:	025b      	lsls	r3, r3, #9
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_OscConfig+0x84>
 8001a3c:	4bb7      	ldr	r3, [pc, #732]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4bb6      	ldr	r3, [pc, #728]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001a42:	2180      	movs	r1, #128	@ 0x80
 8001a44:	0249      	lsls	r1, r1, #9
 8001a46:	430a      	orrs	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e027      	b.n	8001a9c <HAL_RCC_OscConfig+0xd4>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	23a0      	movs	r3, #160	@ 0xa0
 8001a52:	02db      	lsls	r3, r3, #11
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d10e      	bne.n	8001a76 <HAL_RCC_OscConfig+0xae>
 8001a58:	4bb0      	ldr	r3, [pc, #704]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4baf      	ldr	r3, [pc, #700]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001a5e:	2180      	movs	r1, #128	@ 0x80
 8001a60:	02c9      	lsls	r1, r1, #11
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	4bad      	ldr	r3, [pc, #692]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4bac      	ldr	r3, [pc, #688]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001a6c:	2180      	movs	r1, #128	@ 0x80
 8001a6e:	0249      	lsls	r1, r1, #9
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	e012      	b.n	8001a9c <HAL_RCC_OscConfig+0xd4>
 8001a76:	4ba9      	ldr	r3, [pc, #676]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4ba8      	ldr	r3, [pc, #672]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001a7c:	49a8      	ldr	r1, [pc, #672]	@ (8001d20 <HAL_RCC_OscConfig+0x358>)
 8001a7e:	400a      	ands	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	4ba6      	ldr	r3, [pc, #664]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	2380      	movs	r3, #128	@ 0x80
 8001a88:	025b      	lsls	r3, r3, #9
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4ba2      	ldr	r3, [pc, #648]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4ba1      	ldr	r3, [pc, #644]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001a96:	49a3      	ldr	r1, [pc, #652]	@ (8001d24 <HAL_RCC_OscConfig+0x35c>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d015      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fc4e 	bl	8001344 <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aae:	f7ff fc49 	bl	8001344 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b64      	cmp	r3, #100	@ 0x64
 8001aba:	d902      	bls.n	8001ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	f000 fb3c 	bl	800213a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ac2:	4b96      	ldr	r3, [pc, #600]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	@ 0x80
 8001ac8:	029b      	lsls	r3, r3, #10
 8001aca:	4013      	ands	r3, r2
 8001acc:	d0ef      	beq.n	8001aae <HAL_RCC_OscConfig+0xe6>
 8001ace:	e015      	b.n	8001afc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fc38 	bl	8001344 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ada:	f7ff fc33 	bl	8001344 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b64      	cmp	r3, #100	@ 0x64
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e326      	b.n	800213a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001aec:	4b8b      	ldr	r3, [pc, #556]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	029b      	lsls	r3, r3, #10
 8001af4:	4013      	ands	r3, r2
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x112>
 8001af8:	e000      	b.n	8001afc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2202      	movs	r2, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d100      	bne.n	8001b08 <HAL_RCC_OscConfig+0x140>
 8001b06:	e08b      	b.n	8001c20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d13e      	bne.n	8001b98 <HAL_RCC_OscConfig+0x1d0>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d13b      	bne.n	8001b98 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001b20:	4b7e      	ldr	r3, [pc, #504]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2204      	movs	r2, #4
 8001b26:	4013      	ands	r3, r2
 8001b28:	d004      	beq.n	8001b34 <HAL_RCC_OscConfig+0x16c>
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e302      	b.n	800213a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b34:	4b79      	ldr	r3, [pc, #484]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a7b      	ldr	r2, [pc, #492]	@ (8001d28 <HAL_RCC_OscConfig+0x360>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	021a      	lsls	r2, r3, #8
 8001b44:	4b75      	ldr	r3, [pc, #468]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b4a:	4b74      	ldr	r3, [pc, #464]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2209      	movs	r2, #9
 8001b50:	4393      	bics	r3, r2
 8001b52:	0019      	movs	r1, r3
 8001b54:	4b71      	ldr	r3, [pc, #452]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b5c:	f000 fc40 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 8001b60:	0001      	movs	r1, r0
 8001b62:	4b6e      	ldr	r3, [pc, #440]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	220f      	movs	r2, #15
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	4a6f      	ldr	r2, [pc, #444]	@ (8001d2c <HAL_RCC_OscConfig+0x364>)
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	000a      	movs	r2, r1
 8001b72:	40da      	lsrs	r2, r3
 8001b74:	4b6e      	ldr	r3, [pc, #440]	@ (8001d30 <HAL_RCC_OscConfig+0x368>)
 8001b76:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001b78:	4b6e      	ldr	r3, [pc, #440]	@ (8001d34 <HAL_RCC_OscConfig+0x36c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2513      	movs	r5, #19
 8001b7e:	197c      	adds	r4, r7, r5
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7ff fb99 	bl	80012b8 <HAL_InitTick>
 8001b86:	0003      	movs	r3, r0
 8001b88:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001b8a:	197b      	adds	r3, r7, r5
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d046      	beq.n	8001c20 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001b92:	197b      	adds	r3, r7, r5
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	e2d0      	b.n	800213a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d027      	beq.n	8001bee <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b9e:	4b5f      	ldr	r3, [pc, #380]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2209      	movs	r2, #9
 8001ba4:	4393      	bics	r3, r2
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	4b5c      	ldr	r3, [pc, #368]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fbc8 	bl	8001344 <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff fbc3 	bl	8001344 <HAL_GetTick>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e2b6      	b.n	800213a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bcc:	4b53      	ldr	r3, [pc, #332]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d0f1      	beq.n	8001bba <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b51      	ldr	r3, [pc, #324]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4a53      	ldr	r2, [pc, #332]	@ (8001d28 <HAL_RCC_OscConfig+0x360>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	021a      	lsls	r2, r3, #8
 8001be6:	4b4d      	ldr	r3, [pc, #308]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	e018      	b.n	8001c20 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b4b      	ldr	r3, [pc, #300]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	438a      	bics	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff fba3 	bl	8001344 <HAL_GetTick>
 8001bfe:	0003      	movs	r3, r0
 8001c00:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c04:	f7ff fb9e 	bl	8001344 <HAL_GetTick>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e291      	b.n	800213a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c16:	4b41      	ldr	r3, [pc, #260]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d1f1      	bne.n	8001c04 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2210      	movs	r2, #16
 8001c26:	4013      	ands	r3, r2
 8001c28:	d100      	bne.n	8001c2c <HAL_RCC_OscConfig+0x264>
 8001c2a:	e0a1      	b.n	8001d70 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d140      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c32:	4b3a      	ldr	r3, [pc, #232]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	2380      	movs	r3, #128	@ 0x80
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d005      	beq.n	8001c4a <HAL_RCC_OscConfig+0x282>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e277      	b.n	800213a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c4a:	4b34      	ldr	r3, [pc, #208]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4a3a      	ldr	r2, [pc, #232]	@ (8001d38 <HAL_RCC_OscConfig+0x370>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c58:	4b30      	ldr	r3, [pc, #192]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	0a19      	lsrs	r1, r3, #8
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	061a      	lsls	r2, r3, #24
 8001c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c76:	0b5b      	lsrs	r3, r3, #13
 8001c78:	3301      	adds	r3, #1
 8001c7a:	2280      	movs	r2, #128	@ 0x80
 8001c7c:	0212      	lsls	r2, r2, #8
 8001c7e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c80:	4b26      	ldr	r3, [pc, #152]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	210f      	movs	r1, #15
 8001c88:	400b      	ands	r3, r1
 8001c8a:	4928      	ldr	r1, [pc, #160]	@ (8001d2c <HAL_RCC_OscConfig+0x364>)
 8001c8c:	5ccb      	ldrb	r3, [r1, r3]
 8001c8e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c90:	4b27      	ldr	r3, [pc, #156]	@ (8001d30 <HAL_RCC_OscConfig+0x368>)
 8001c92:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001c94:	4b27      	ldr	r3, [pc, #156]	@ (8001d34 <HAL_RCC_OscConfig+0x36c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2513      	movs	r5, #19
 8001c9a:	197c      	adds	r4, r7, r5
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7ff fb0b 	bl	80012b8 <HAL_InitTick>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ca6:	197b      	adds	r3, r7, r5
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d060      	beq.n	8001d70 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001cae:	197b      	adds	r3, r7, r5
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	e242      	b.n	800213a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d03f      	beq.n	8001d3c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cbc:	4b17      	ldr	r3, [pc, #92]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b16      	ldr	r3, [pc, #88]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001cc2:	2180      	movs	r1, #128	@ 0x80
 8001cc4:	0049      	lsls	r1, r1, #1
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7ff fb3b 	bl	8001344 <HAL_GetTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fb36 	bl	8001344 <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e229      	b.n	800213a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	2380      	movs	r3, #128	@ 0x80
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a10      	ldr	r2, [pc, #64]	@ (8001d38 <HAL_RCC_OscConfig+0x370>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001d02:	430a      	orrs	r2, r1
 8001d04:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d06:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	021b      	lsls	r3, r3, #8
 8001d0c:	0a19      	lsrs	r1, r3, #8
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	061a      	lsls	r2, r3, #24
 8001d14:	4b01      	ldr	r3, [pc, #4]	@ (8001d1c <HAL_RCC_OscConfig+0x354>)
 8001d16:	430a      	orrs	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	e029      	b.n	8001d70 <HAL_RCC_OscConfig+0x3a8>
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	fffeffff 	.word	0xfffeffff
 8001d24:	fffbffff 	.word	0xfffbffff
 8001d28:	ffffe0ff 	.word	0xffffe0ff
 8001d2c:	08004050 	.word	0x08004050
 8001d30:	20000008 	.word	0x20000008
 8001d34:	2000000c 	.word	0x2000000c
 8001d38:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d3c:	4bbd      	ldr	r3, [pc, #756]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4bbc      	ldr	r3, [pc, #752]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001d42:	49bd      	ldr	r1, [pc, #756]	@ (8002038 <HAL_RCC_OscConfig+0x670>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff fafc 	bl	8001344 <HAL_GetTick>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d52:	f7ff faf7 	bl	8001344 <HAL_GetTick>
 8001d56:	0002      	movs	r2, r0
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e1ea      	b.n	800213a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d64:	4bb3      	ldr	r3, [pc, #716]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	2380      	movs	r3, #128	@ 0x80
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d1f0      	bne.n	8001d52 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2208      	movs	r2, #8
 8001d76:	4013      	ands	r3, r2
 8001d78:	d036      	beq.n	8001de8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d019      	beq.n	8001db6 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d82:	4bac      	ldr	r3, [pc, #688]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001d84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d86:	4bab      	ldr	r3, [pc, #684]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fad9 	bl	8001344 <HAL_GetTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff fad4 	bl	8001344 <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e1c7      	b.n	800213a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001daa:	4ba2      	ldr	r3, [pc, #648]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dae:	2202      	movs	r2, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	d0f1      	beq.n	8001d98 <HAL_RCC_OscConfig+0x3d0>
 8001db4:	e018      	b.n	8001de8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db6:	4b9f      	ldr	r3, [pc, #636]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001db8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dba:	4b9e      	ldr	r3, [pc, #632]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	438a      	bics	r2, r1
 8001dc0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fabf 	bl	8001344 <HAL_GetTick>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff faba 	bl	8001344 <HAL_GetTick>
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e1ad      	b.n	800213a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dde:	4b95      	ldr	r3, [pc, #596]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001de2:	2202      	movs	r2, #2
 8001de4:	4013      	ands	r3, r2
 8001de6:	d1f1      	bne.n	8001dcc <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2204      	movs	r2, #4
 8001dee:	4013      	ands	r3, r2
 8001df0:	d100      	bne.n	8001df4 <HAL_RCC_OscConfig+0x42c>
 8001df2:	e0ae      	b.n	8001f52 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df4:	2027      	movs	r0, #39	@ 0x27
 8001df6:	183b      	adds	r3, r7, r0
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfc:	4b8d      	ldr	r3, [pc, #564]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001dfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	055b      	lsls	r3, r3, #21
 8001e04:	4013      	ands	r3, r2
 8001e06:	d109      	bne.n	8001e1c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b8a      	ldr	r3, [pc, #552]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001e0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e0c:	4b89      	ldr	r3, [pc, #548]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001e0e:	2180      	movs	r1, #128	@ 0x80
 8001e10:	0549      	lsls	r1, r1, #21
 8001e12:	430a      	orrs	r2, r1
 8001e14:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001e16:	183b      	adds	r3, r7, r0
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	4b87      	ldr	r3, [pc, #540]	@ (800203c <HAL_RCC_OscConfig+0x674>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4013      	ands	r3, r2
 8001e26:	d11a      	bne.n	8001e5e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e28:	4b84      	ldr	r3, [pc, #528]	@ (800203c <HAL_RCC_OscConfig+0x674>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b83      	ldr	r3, [pc, #524]	@ (800203c <HAL_RCC_OscConfig+0x674>)
 8001e2e:	2180      	movs	r1, #128	@ 0x80
 8001e30:	0049      	lsls	r1, r1, #1
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e36:	f7ff fa85 	bl	8001344 <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e40:	f7ff fa80 	bl	8001344 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	@ 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e173      	b.n	800213a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e52:	4b7a      	ldr	r3, [pc, #488]	@ (800203c <HAL_RCC_OscConfig+0x674>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	2380      	movs	r3, #128	@ 0x80
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	2380      	movs	r3, #128	@ 0x80
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4b2>
 8001e6a:	4b72      	ldr	r3, [pc, #456]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001e6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e6e:	4b71      	ldr	r3, [pc, #452]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001e70:	2180      	movs	r1, #128	@ 0x80
 8001e72:	0049      	lsls	r1, r1, #1
 8001e74:	430a      	orrs	r2, r1
 8001e76:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e78:	e031      	b.n	8001ede <HAL_RCC_OscConfig+0x516>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4d4>
 8001e82:	4b6c      	ldr	r3, [pc, #432]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001e84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e86:	4b6b      	ldr	r3, [pc, #428]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001e88:	496b      	ldr	r1, [pc, #428]	@ (8002038 <HAL_RCC_OscConfig+0x670>)
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e8e:	4b69      	ldr	r3, [pc, #420]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001e90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e92:	4b68      	ldr	r3, [pc, #416]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001e94:	496a      	ldr	r1, [pc, #424]	@ (8002040 <HAL_RCC_OscConfig+0x678>)
 8001e96:	400a      	ands	r2, r1
 8001e98:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e9a:	e020      	b.n	8001ede <HAL_RCC_OscConfig+0x516>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	23a0      	movs	r3, #160	@ 0xa0
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d10e      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x4fe>
 8001ea8:	4b62      	ldr	r3, [pc, #392]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001eaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001eac:	4b61      	ldr	r3, [pc, #388]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001eae:	2180      	movs	r1, #128	@ 0x80
 8001eb0:	00c9      	lsls	r1, r1, #3
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001eb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001eba:	4b5e      	ldr	r3, [pc, #376]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001ebc:	2180      	movs	r1, #128	@ 0x80
 8001ebe:	0049      	lsls	r1, r1, #1
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ec4:	e00b      	b.n	8001ede <HAL_RCC_OscConfig+0x516>
 8001ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001ec8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001eca:	4b5a      	ldr	r3, [pc, #360]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001ecc:	495a      	ldr	r1, [pc, #360]	@ (8002038 <HAL_RCC_OscConfig+0x670>)
 8001ece:	400a      	ands	r2, r1
 8001ed0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ed2:	4b58      	ldr	r3, [pc, #352]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001ed4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ed6:	4b57      	ldr	r3, [pc, #348]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001ed8:	4959      	ldr	r1, [pc, #356]	@ (8002040 <HAL_RCC_OscConfig+0x678>)
 8001eda:	400a      	ands	r2, r1
 8001edc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d015      	beq.n	8001f12 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee6:	f7ff fa2d 	bl	8001344 <HAL_GetTick>
 8001eea:	0003      	movs	r3, r0
 8001eec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eee:	e009      	b.n	8001f04 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fa28 	bl	8001344 <HAL_GetTick>
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	4a52      	ldr	r2, [pc, #328]	@ (8002044 <HAL_RCC_OscConfig+0x67c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e11a      	b.n	800213a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f04:	4b4b      	ldr	r3, [pc, #300]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001f06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d0ef      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x528>
 8001f10:	e014      	b.n	8001f3c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7ff fa17 	bl	8001344 <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f1a:	e009      	b.n	8001f30 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f1c:	f7ff fa12 	bl	8001344 <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	4a47      	ldr	r2, [pc, #284]	@ (8002044 <HAL_RCC_OscConfig+0x67c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e104      	b.n	800213a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f30:	4b40      	ldr	r3, [pc, #256]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001f32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d1ef      	bne.n	8001f1c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f3c:	2327      	movs	r3, #39	@ 0x27
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d105      	bne.n	8001f52 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f46:	4b3b      	ldr	r3, [pc, #236]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001f4c:	493e      	ldr	r1, [pc, #248]	@ (8002048 <HAL_RCC_OscConfig+0x680>)
 8001f4e:	400a      	ands	r2, r1
 8001f50:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2220      	movs	r2, #32
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d049      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d026      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f64:	4b33      	ldr	r3, [pc, #204]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	4b32      	ldr	r3, [pc, #200]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	4b30      	ldr	r3, [pc, #192]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f74:	4b2f      	ldr	r3, [pc, #188]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001f76:	2101      	movs	r1, #1
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f7c:	4b33      	ldr	r3, [pc, #204]	@ (800204c <HAL_RCC_OscConfig+0x684>)
 8001f7e:	6a1a      	ldr	r2, [r3, #32]
 8001f80:	4b32      	ldr	r3, [pc, #200]	@ (800204c <HAL_RCC_OscConfig+0x684>)
 8001f82:	2180      	movs	r1, #128	@ 0x80
 8001f84:	0189      	lsls	r1, r1, #6
 8001f86:	430a      	orrs	r2, r1
 8001f88:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7ff f9db 	bl	8001344 <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f94:	f7ff f9d6 	bl	8001344 <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e0c9      	b.n	800213a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fa6:	4b23      	ldr	r3, [pc, #140]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2202      	movs	r2, #2
 8001fac:	4013      	ands	r3, r2
 8001fae:	d0f1      	beq.n	8001f94 <HAL_RCC_OscConfig+0x5cc>
 8001fb0:	e01e      	b.n	8001ff0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001fb2:	4b20      	ldr	r3, [pc, #128]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001fb8:	2101      	movs	r1, #1
 8001fba:	438a      	bics	r2, r1
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	4b23      	ldr	r3, [pc, #140]	@ (800204c <HAL_RCC_OscConfig+0x684>)
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	4b22      	ldr	r3, [pc, #136]	@ (800204c <HAL_RCC_OscConfig+0x684>)
 8001fc4:	4922      	ldr	r1, [pc, #136]	@ (8002050 <HAL_RCC_OscConfig+0x688>)
 8001fc6:	400a      	ands	r2, r1
 8001fc8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7ff f9bb 	bl	8001344 <HAL_GetTick>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fd4:	f7ff f9b6 	bl	8001344 <HAL_GetTick>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e0a9      	b.n	800213a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fe6:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2202      	movs	r2, #2
 8001fec:	4013      	ands	r3, r2
 8001fee:	d1f1      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d100      	bne.n	8001ffa <HAL_RCC_OscConfig+0x632>
 8001ff8:	e09e      	b.n	8002138 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	2b0c      	cmp	r3, #12
 8001ffe:	d100      	bne.n	8002002 <HAL_RCC_OscConfig+0x63a>
 8002000:	e077      	b.n	80020f2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	2b02      	cmp	r3, #2
 8002008:	d158      	bne.n	80020bc <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <HAL_RCC_OscConfig+0x66c>)
 8002010:	4910      	ldr	r1, [pc, #64]	@ (8002054 <HAL_RCC_OscConfig+0x68c>)
 8002012:	400a      	ands	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff f995 	bl	8001344 <HAL_GetTick>
 800201a:	0003      	movs	r3, r0
 800201c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800201e:	e01b      	b.n	8002058 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002020:	f7ff f990 	bl	8001344 <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d914      	bls.n	8002058 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e083      	b.n	800213a <HAL_RCC_OscConfig+0x772>
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	40021000 	.word	0x40021000
 8002038:	fffffeff 	.word	0xfffffeff
 800203c:	40007000 	.word	0x40007000
 8002040:	fffffbff 	.word	0xfffffbff
 8002044:	00001388 	.word	0x00001388
 8002048:	efffffff 	.word	0xefffffff
 800204c:	40010000 	.word	0x40010000
 8002050:	ffffdfff 	.word	0xffffdfff
 8002054:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002058:	4b3a      	ldr	r3, [pc, #232]	@ (8002144 <HAL_RCC_OscConfig+0x77c>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	@ 0x80
 800205e:	049b      	lsls	r3, r3, #18
 8002060:	4013      	ands	r3, r2
 8002062:	d1dd      	bne.n	8002020 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002064:	4b37      	ldr	r3, [pc, #220]	@ (8002144 <HAL_RCC_OscConfig+0x77c>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4a37      	ldr	r2, [pc, #220]	@ (8002148 <HAL_RCC_OscConfig+0x780>)
 800206a:	4013      	ands	r3, r2
 800206c:	0019      	movs	r1, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800207c:	431a      	orrs	r2, r3
 800207e:	4b31      	ldr	r3, [pc, #196]	@ (8002144 <HAL_RCC_OscConfig+0x77c>)
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002084:	4b2f      	ldr	r3, [pc, #188]	@ (8002144 <HAL_RCC_OscConfig+0x77c>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	4b2e      	ldr	r3, [pc, #184]	@ (8002144 <HAL_RCC_OscConfig+0x77c>)
 800208a:	2180      	movs	r1, #128	@ 0x80
 800208c:	0449      	lsls	r1, r1, #17
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7ff f957 	bl	8001344 <HAL_GetTick>
 8002096:	0003      	movs	r3, r0
 8002098:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff f952 	bl	8001344 <HAL_GetTick>
 80020a0:	0002      	movs	r2, r0
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e045      	b.n	800213a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80020ae:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <HAL_RCC_OscConfig+0x77c>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	049b      	lsls	r3, r3, #18
 80020b6:	4013      	ands	r3, r2
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x6d4>
 80020ba:	e03d      	b.n	8002138 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020bc:	4b21      	ldr	r3, [pc, #132]	@ (8002144 <HAL_RCC_OscConfig+0x77c>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b20      	ldr	r3, [pc, #128]	@ (8002144 <HAL_RCC_OscConfig+0x77c>)
 80020c2:	4922      	ldr	r1, [pc, #136]	@ (800214c <HAL_RCC_OscConfig+0x784>)
 80020c4:	400a      	ands	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff f93c 	bl	8001344 <HAL_GetTick>
 80020cc:	0003      	movs	r3, r0
 80020ce:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff f937 	bl	8001344 <HAL_GetTick>
 80020d6:	0002      	movs	r2, r0
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e02a      	b.n	800213a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020e4:	4b17      	ldr	r3, [pc, #92]	@ (8002144 <HAL_RCC_OscConfig+0x77c>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	@ 0x80
 80020ea:	049b      	lsls	r3, r3, #18
 80020ec:	4013      	ands	r3, r2
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x70a>
 80020f0:	e022      	b.n	8002138 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e01d      	b.n	800213a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020fe:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <HAL_RCC_OscConfig+0x77c>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	2380      	movs	r3, #128	@ 0x80
 8002108:	025b      	lsls	r3, r3, #9
 800210a:	401a      	ands	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002110:	429a      	cmp	r2, r3
 8002112:	d10f      	bne.n	8002134 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	23f0      	movs	r3, #240	@ 0xf0
 8002118:	039b      	lsls	r3, r3, #14
 800211a:	401a      	ands	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d107      	bne.n	8002134 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	23c0      	movs	r3, #192	@ 0xc0
 8002128:	041b      	lsls	r3, r3, #16
 800212a:	401a      	ands	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b00a      	add	sp, #40	@ 0x28
 8002140:	bdb0      	pop	{r4, r5, r7, pc}
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	40021000 	.word	0x40021000
 8002148:	ff02ffff 	.word	0xff02ffff
 800214c:	feffffff 	.word	0xfeffffff

08002150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002150:	b5b0      	push	{r4, r5, r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e128      	b.n	80023b6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002164:	4b96      	ldr	r3, [pc, #600]	@ (80023c0 <HAL_RCC_ClockConfig+0x270>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2201      	movs	r2, #1
 800216a:	4013      	ands	r3, r2
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d91e      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b93      	ldr	r3, [pc, #588]	@ (80023c0 <HAL_RCC_ClockConfig+0x270>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2201      	movs	r2, #1
 8002178:	4393      	bics	r3, r2
 800217a:	0019      	movs	r1, r3
 800217c:	4b90      	ldr	r3, [pc, #576]	@ (80023c0 <HAL_RCC_ClockConfig+0x270>)
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002184:	f7ff f8de 	bl	8001344 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218c:	e009      	b.n	80021a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218e:	f7ff f8d9 	bl	8001344 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	4a8a      	ldr	r2, [pc, #552]	@ (80023c4 <HAL_RCC_ClockConfig+0x274>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e109      	b.n	80023b6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b87      	ldr	r3, [pc, #540]	@ (80023c0 <HAL_RCC_ClockConfig+0x270>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2201      	movs	r2, #1
 80021a8:	4013      	ands	r3, r2
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d1ee      	bne.n	800218e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2202      	movs	r2, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ba:	4b83      	ldr	r3, [pc, #524]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	22f0      	movs	r2, #240	@ 0xf0
 80021c0:	4393      	bics	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	4b7f      	ldr	r3, [pc, #508]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 80021ca:	430a      	orrs	r2, r1
 80021cc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2201      	movs	r2, #1
 80021d4:	4013      	ands	r3, r2
 80021d6:	d100      	bne.n	80021da <HAL_RCC_ClockConfig+0x8a>
 80021d8:	e089      	b.n	80022ee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021e2:	4b79      	ldr	r3, [pc, #484]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	2380      	movs	r3, #128	@ 0x80
 80021e8:	029b      	lsls	r3, r3, #10
 80021ea:	4013      	ands	r3, r2
 80021ec:	d120      	bne.n	8002230 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0e1      	b.n	80023b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021fa:	4b73      	ldr	r3, [pc, #460]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	2380      	movs	r3, #128	@ 0x80
 8002200:	049b      	lsls	r3, r3, #18
 8002202:	4013      	ands	r3, r2
 8002204:	d114      	bne.n	8002230 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0d5      	b.n	80023b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d106      	bne.n	8002220 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002212:	4b6d      	ldr	r3, [pc, #436]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2204      	movs	r2, #4
 8002218:	4013      	ands	r3, r2
 800221a:	d109      	bne.n	8002230 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0ca      	b.n	80023b6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002220:	4b69      	ldr	r3, [pc, #420]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2380      	movs	r3, #128	@ 0x80
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4013      	ands	r3, r2
 800222a:	d101      	bne.n	8002230 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0c2      	b.n	80023b6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002230:	4b65      	ldr	r3, [pc, #404]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2203      	movs	r2, #3
 8002236:	4393      	bics	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	4b62      	ldr	r3, [pc, #392]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 8002240:	430a      	orrs	r2, r1
 8002242:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002244:	f7ff f87e 	bl	8001344 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d111      	bne.n	8002278 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002254:	e009      	b.n	800226a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002256:	f7ff f875 	bl	8001344 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	4a58      	ldr	r2, [pc, #352]	@ (80023c4 <HAL_RCC_ClockConfig+0x274>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e0a5      	b.n	80023b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800226a:	4b57      	ldr	r3, [pc, #348]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	220c      	movs	r2, #12
 8002270:	4013      	ands	r3, r2
 8002272:	2b08      	cmp	r3, #8
 8002274:	d1ef      	bne.n	8002256 <HAL_RCC_ClockConfig+0x106>
 8002276:	e03a      	b.n	80022ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b03      	cmp	r3, #3
 800227e:	d111      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002280:	e009      	b.n	8002296 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002282:	f7ff f85f 	bl	8001344 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	4a4d      	ldr	r2, [pc, #308]	@ (80023c4 <HAL_RCC_ClockConfig+0x274>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e08f      	b.n	80023b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002296:	4b4c      	ldr	r3, [pc, #304]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	220c      	movs	r2, #12
 800229c:	4013      	ands	r3, r2
 800229e:	2b0c      	cmp	r3, #12
 80022a0:	d1ef      	bne.n	8002282 <HAL_RCC_ClockConfig+0x132>
 80022a2:	e024      	b.n	80022ee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d11b      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ac:	e009      	b.n	80022c2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ae:	f7ff f849 	bl	8001344 <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	4a42      	ldr	r2, [pc, #264]	@ (80023c4 <HAL_RCC_ClockConfig+0x274>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e079      	b.n	80023b6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022c2:	4b41      	ldr	r3, [pc, #260]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	220c      	movs	r2, #12
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d1ef      	bne.n	80022ae <HAL_RCC_ClockConfig+0x15e>
 80022ce:	e00e      	b.n	80022ee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f7ff f838 	bl	8001344 <HAL_GetTick>
 80022d4:	0002      	movs	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	4a3a      	ldr	r2, [pc, #232]	@ (80023c4 <HAL_RCC_ClockConfig+0x274>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e068      	b.n	80023b6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022e4:	4b38      	ldr	r3, [pc, #224]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	220c      	movs	r2, #12
 80022ea:	4013      	ands	r3, r2
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ee:	4b34      	ldr	r3, [pc, #208]	@ (80023c0 <HAL_RCC_ClockConfig+0x270>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2201      	movs	r2, #1
 80022f4:	4013      	ands	r3, r2
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d21e      	bcs.n	800233a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fc:	4b30      	ldr	r3, [pc, #192]	@ (80023c0 <HAL_RCC_ClockConfig+0x270>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2201      	movs	r2, #1
 8002302:	4393      	bics	r3, r2
 8002304:	0019      	movs	r1, r3
 8002306:	4b2e      	ldr	r3, [pc, #184]	@ (80023c0 <HAL_RCC_ClockConfig+0x270>)
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800230e:	f7ff f819 	bl	8001344 <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	e009      	b.n	800232c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7ff f814 	bl	8001344 <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	4a28      	ldr	r2, [pc, #160]	@ (80023c4 <HAL_RCC_ClockConfig+0x274>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e044      	b.n	80023b6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232c:	4b24      	ldr	r3, [pc, #144]	@ (80023c0 <HAL_RCC_ClockConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2201      	movs	r2, #1
 8002332:	4013      	ands	r3, r2
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d1ee      	bne.n	8002318 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2204      	movs	r2, #4
 8002340:	4013      	ands	r3, r2
 8002342:	d009      	beq.n	8002358 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a20      	ldr	r2, [pc, #128]	@ (80023cc <HAL_RCC_ClockConfig+0x27c>)
 800234a:	4013      	ands	r3, r2
 800234c:	0019      	movs	r1, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2208      	movs	r2, #8
 800235e:	4013      	ands	r3, r2
 8002360:	d00a      	beq.n	8002378 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002362:	4b19      	ldr	r3, [pc, #100]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4a1a      	ldr	r2, [pc, #104]	@ (80023d0 <HAL_RCC_ClockConfig+0x280>)
 8002368:	4013      	ands	r3, r2
 800236a:	0019      	movs	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	00da      	lsls	r2, r3, #3
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 8002374:	430a      	orrs	r2, r1
 8002376:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002378:	f000 f832 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 800237c:	0001      	movs	r1, r0
 800237e:	4b12      	ldr	r3, [pc, #72]	@ (80023c8 <HAL_RCC_ClockConfig+0x278>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	220f      	movs	r2, #15
 8002386:	4013      	ands	r3, r2
 8002388:	4a12      	ldr	r2, [pc, #72]	@ (80023d4 <HAL_RCC_ClockConfig+0x284>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	000a      	movs	r2, r1
 800238e:	40da      	lsrs	r2, r3
 8002390:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <HAL_RCC_ClockConfig+0x288>)
 8002392:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002394:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <HAL_RCC_ClockConfig+0x28c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	250b      	movs	r5, #11
 800239a:	197c      	adds	r4, r7, r5
 800239c:	0018      	movs	r0, r3
 800239e:	f7fe ff8b 	bl	80012b8 <HAL_InitTick>
 80023a2:	0003      	movs	r3, r0
 80023a4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80023a6:	197b      	adds	r3, r7, r5
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80023ae:	197b      	adds	r3, r7, r5
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b004      	add	sp, #16
 80023bc:	bdb0      	pop	{r4, r5, r7, pc}
 80023be:	46c0      	nop			@ (mov r8, r8)
 80023c0:	40022000 	.word	0x40022000
 80023c4:	00001388 	.word	0x00001388
 80023c8:	40021000 	.word	0x40021000
 80023cc:	fffff8ff 	.word	0xfffff8ff
 80023d0:	ffffc7ff 	.word	0xffffc7ff
 80023d4:	08004050 	.word	0x08004050
 80023d8:	20000008 	.word	0x20000008
 80023dc:	2000000c 	.word	0x2000000c

080023e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80023e6:	4b3c      	ldr	r3, [pc, #240]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	220c      	movs	r2, #12
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b0c      	cmp	r3, #12
 80023f4:	d013      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x3e>
 80023f6:	d85c      	bhi.n	80024b2 <HAL_RCC_GetSysClockFreq+0xd2>
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d002      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0x22>
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d00b      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0x38>
 8002400:	e057      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002402:	4b35      	ldr	r3, [pc, #212]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2210      	movs	r2, #16
 8002408:	4013      	ands	r3, r2
 800240a:	d002      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800240c:	4b33      	ldr	r3, [pc, #204]	@ (80024dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800240e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002410:	e05d      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002412:	4b33      	ldr	r3, [pc, #204]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002414:	613b      	str	r3, [r7, #16]
      break;
 8002416:	e05a      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002418:	4b32      	ldr	r3, [pc, #200]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x104>)
 800241a:	613b      	str	r3, [r7, #16]
      break;
 800241c:	e057      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	0c9b      	lsrs	r3, r3, #18
 8002422:	220f      	movs	r2, #15
 8002424:	4013      	ands	r3, r2
 8002426:	4a30      	ldr	r2, [pc, #192]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002428:	5cd3      	ldrb	r3, [r2, r3]
 800242a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	0d9b      	lsrs	r3, r3, #22
 8002430:	2203      	movs	r2, #3
 8002432:	4013      	ands	r3, r2
 8002434:	3301      	adds	r3, #1
 8002436:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002438:	4b27      	ldr	r3, [pc, #156]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	2380      	movs	r3, #128	@ 0x80
 800243e:	025b      	lsls	r3, r3, #9
 8002440:	4013      	ands	r3, r2
 8002442:	d00f      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	000a      	movs	r2, r1
 8002448:	0152      	lsls	r2, r2, #5
 800244a:	1a52      	subs	r2, r2, r1
 800244c:	0193      	lsls	r3, r2, #6
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	185b      	adds	r3, r3, r1
 8002454:	025b      	lsls	r3, r3, #9
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	0018      	movs	r0, r3
 800245a:	f7fd fe5f 	bl	800011c <__udivsi3>
 800245e:	0003      	movs	r3, r0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	e023      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002464:	4b1c      	ldr	r3, [pc, #112]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2210      	movs	r2, #16
 800246a:	4013      	ands	r3, r2
 800246c:	d00f      	beq.n	800248e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	000a      	movs	r2, r1
 8002472:	0152      	lsls	r2, r2, #5
 8002474:	1a52      	subs	r2, r2, r1
 8002476:	0193      	lsls	r3, r2, #6
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	185b      	adds	r3, r3, r1
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	0018      	movs	r0, r3
 8002484:	f7fd fe4a 	bl	800011c <__udivsi3>
 8002488:	0003      	movs	r3, r0
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	e00e      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	000a      	movs	r2, r1
 8002492:	0152      	lsls	r2, r2, #5
 8002494:	1a52      	subs	r2, r2, r1
 8002496:	0193      	lsls	r3, r2, #6
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	185b      	adds	r3, r3, r1
 800249e:	029b      	lsls	r3, r3, #10
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7fd fe3a 	bl	800011c <__udivsi3>
 80024a8:	0003      	movs	r3, r0
 80024aa:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	613b      	str	r3, [r7, #16]
      break;
 80024b0:	e00d      	b.n	80024ce <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80024b2:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0b5b      	lsrs	r3, r3, #13
 80024b8:	2207      	movs	r2, #7
 80024ba:	4013      	ands	r3, r2
 80024bc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	3301      	adds	r3, #1
 80024c2:	2280      	movs	r2, #128	@ 0x80
 80024c4:	0212      	lsls	r2, r2, #8
 80024c6:	409a      	lsls	r2, r3
 80024c8:	0013      	movs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
      break;
 80024cc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024ce:	693b      	ldr	r3, [r7, #16]
}
 80024d0:	0018      	movs	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b006      	add	sp, #24
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	003d0900 	.word	0x003d0900
 80024e0:	00f42400 	.word	0x00f42400
 80024e4:	007a1200 	.word	0x007a1200
 80024e8:	08004068 	.word	0x08004068

080024ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f0:	4b02      	ldr	r3, [pc, #8]	@ (80024fc <HAL_RCC_GetHCLKFreq+0x10>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	20000008 	.word	0x20000008

08002500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002504:	f7ff fff2 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8002508:	0001      	movs	r1, r0
 800250a:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_RCC_GetPCLK1Freq+0x24>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	2207      	movs	r2, #7
 8002512:	4013      	ands	r3, r2
 8002514:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	40d9      	lsrs	r1, r3
 800251a:	000b      	movs	r3, r1
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	40021000 	.word	0x40021000
 8002528:	08004060 	.word	0x08004060

0800252c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002530:	f7ff ffdc 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8002534:	0001      	movs	r1, r0
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	0adb      	lsrs	r3, r3, #11
 800253c:	2207      	movs	r2, #7
 800253e:	4013      	ands	r3, r2
 8002540:	4a04      	ldr	r2, [pc, #16]	@ (8002554 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002542:	5cd3      	ldrb	r3, [r2, r3]
 8002544:	40d9      	lsrs	r1, r3
 8002546:	000b      	movs	r3, r1
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	40021000 	.word	0x40021000
 8002554:	08004060 	.word	0x08004060

08002558 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002560:	2317      	movs	r3, #23
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2220      	movs	r2, #32
 800256e:	4013      	ands	r3, r2
 8002570:	d106      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	2380      	movs	r3, #128	@ 0x80
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	4013      	ands	r3, r2
 800257c:	d100      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800257e:	e104      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002580:	4bb1      	ldr	r3, [pc, #708]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002582:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	055b      	lsls	r3, r3, #21
 8002588:	4013      	ands	r3, r2
 800258a:	d10a      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	4bae      	ldr	r3, [pc, #696]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800258e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002590:	4bad      	ldr	r3, [pc, #692]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002592:	2180      	movs	r1, #128	@ 0x80
 8002594:	0549      	lsls	r1, r1, #21
 8002596:	430a      	orrs	r2, r1
 8002598:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800259a:	2317      	movs	r3, #23
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2201      	movs	r2, #1
 80025a0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a2:	4baa      	ldr	r3, [pc, #680]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	2380      	movs	r3, #128	@ 0x80
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4013      	ands	r3, r2
 80025ac:	d11a      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ae:	4ba7      	ldr	r3, [pc, #668]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4ba6      	ldr	r3, [pc, #664]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025b4:	2180      	movs	r1, #128	@ 0x80
 80025b6:	0049      	lsls	r1, r1, #1
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025bc:	f7fe fec2 	bl	8001344 <HAL_GetTick>
 80025c0:	0003      	movs	r3, r0
 80025c2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c4:	e008      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c6:	f7fe febd 	bl	8001344 <HAL_GetTick>
 80025ca:	0002      	movs	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b64      	cmp	r3, #100	@ 0x64
 80025d2:	d901      	bls.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e133      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d8:	4b9c      	ldr	r3, [pc, #624]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	2380      	movs	r3, #128	@ 0x80
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4013      	ands	r3, r2
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80025e4:	4b98      	ldr	r3, [pc, #608]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	23c0      	movs	r3, #192	@ 0xc0
 80025ea:	039b      	lsls	r3, r3, #14
 80025ec:	4013      	ands	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	23c0      	movs	r3, #192	@ 0xc0
 80025f6:	039b      	lsls	r3, r3, #14
 80025f8:	4013      	ands	r3, r2
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d107      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	23c0      	movs	r3, #192	@ 0xc0
 8002606:	039b      	lsls	r3, r3, #14
 8002608:	4013      	ands	r3, r2
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	429a      	cmp	r2, r3
 800260e:	d013      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	23c0      	movs	r3, #192	@ 0xc0
 8002616:	029b      	lsls	r3, r3, #10
 8002618:	401a      	ands	r2, r3
 800261a:	23c0      	movs	r3, #192	@ 0xc0
 800261c:	029b      	lsls	r3, r3, #10
 800261e:	429a      	cmp	r2, r3
 8002620:	d10a      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002622:	4b89      	ldr	r3, [pc, #548]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	@ 0x80
 8002628:	029b      	lsls	r3, r3, #10
 800262a:	401a      	ands	r2, r3
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	029b      	lsls	r3, r3, #10
 8002630:	429a      	cmp	r2, r3
 8002632:	d101      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e103      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002638:	4b83      	ldr	r3, [pc, #524]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800263a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800263c:	23c0      	movs	r3, #192	@ 0xc0
 800263e:	029b      	lsls	r3, r3, #10
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d049      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x186>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	23c0      	movs	r3, #192	@ 0xc0
 8002650:	029b      	lsls	r3, r3, #10
 8002652:	4013      	ands	r3, r2
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	429a      	cmp	r2, r3
 8002658:	d004      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2220      	movs	r2, #32
 8002660:	4013      	ands	r3, r2
 8002662:	d10d      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	23c0      	movs	r3, #192	@ 0xc0
 800266a:	029b      	lsls	r3, r3, #10
 800266c:	4013      	ands	r3, r2
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	429a      	cmp	r2, r3
 8002672:	d034      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	@ 0x80
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	4013      	ands	r3, r2
 800267e:	d02e      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002680:	4b71      	ldr	r3, [pc, #452]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002684:	4a72      	ldr	r2, [pc, #456]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002686:	4013      	ands	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800268a:	4b6f      	ldr	r3, [pc, #444]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800268c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800268e:	4b6e      	ldr	r3, [pc, #440]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002690:	2180      	movs	r1, #128	@ 0x80
 8002692:	0309      	lsls	r1, r1, #12
 8002694:	430a      	orrs	r2, r1
 8002696:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002698:	4b6b      	ldr	r3, [pc, #428]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800269a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800269c:	4b6a      	ldr	r3, [pc, #424]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800269e:	496d      	ldr	r1, [pc, #436]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80026a0:	400a      	ands	r2, r1
 80026a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80026a4:	4b68      	ldr	r3, [pc, #416]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	2380      	movs	r3, #128	@ 0x80
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	d014      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fe46 	bl	8001344 <HAL_GetTick>
 80026b8:	0003      	movs	r3, r0
 80026ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026bc:	e009      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe fe41 	bl	8001344 <HAL_GetTick>
 80026c2:	0002      	movs	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	4a63      	ldr	r2, [pc, #396]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e0b6      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4013      	ands	r3, r2
 80026dc:	d0ef      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	@ 0x80
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	4013      	ands	r3, r2
 80026e8:	d01f      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	23c0      	movs	r3, #192	@ 0xc0
 80026f0:	029b      	lsls	r3, r3, #10
 80026f2:	401a      	ands	r2, r3
 80026f4:	23c0      	movs	r3, #192	@ 0xc0
 80026f6:	029b      	lsls	r3, r3, #10
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d10c      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80026fc:	4b52      	ldr	r3, [pc, #328]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a56      	ldr	r2, [pc, #344]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002702:	4013      	ands	r3, r2
 8002704:	0019      	movs	r1, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	23c0      	movs	r3, #192	@ 0xc0
 800270c:	039b      	lsls	r3, r3, #14
 800270e:	401a      	ands	r2, r3
 8002710:	4b4d      	ldr	r3, [pc, #308]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	4b4c      	ldr	r3, [pc, #304]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002718:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	23c0      	movs	r3, #192	@ 0xc0
 8002720:	029b      	lsls	r3, r3, #10
 8002722:	401a      	ands	r2, r3
 8002724:	4b48      	ldr	r3, [pc, #288]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002726:	430a      	orrs	r2, r1
 8002728:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2220      	movs	r2, #32
 8002730:	4013      	ands	r3, r2
 8002732:	d01f      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	23c0      	movs	r3, #192	@ 0xc0
 800273a:	029b      	lsls	r3, r3, #10
 800273c:	401a      	ands	r2, r3
 800273e:	23c0      	movs	r3, #192	@ 0xc0
 8002740:	029b      	lsls	r3, r3, #10
 8002742:	429a      	cmp	r2, r3
 8002744:	d10c      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002746:	4b40      	ldr	r3, [pc, #256]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a44      	ldr	r2, [pc, #272]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800274c:	4013      	ands	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	23c0      	movs	r3, #192	@ 0xc0
 8002756:	039b      	lsls	r3, r3, #14
 8002758:	401a      	ands	r2, r3
 800275a:	4b3b      	ldr	r3, [pc, #236]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	4b39      	ldr	r3, [pc, #228]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002762:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	23c0      	movs	r3, #192	@ 0xc0
 800276a:	029b      	lsls	r3, r3, #10
 800276c:	401a      	ands	r2, r3
 800276e:	4b36      	ldr	r3, [pc, #216]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002770:	430a      	orrs	r2, r1
 8002772:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002774:	2317      	movs	r3, #23
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d105      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277e:	4b32      	ldr	r3, [pc, #200]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002782:	4b31      	ldr	r3, [pc, #196]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002784:	4936      	ldr	r1, [pc, #216]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002786:	400a      	ands	r2, r1
 8002788:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2201      	movs	r2, #1
 8002790:	4013      	ands	r3, r2
 8002792:	d009      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002794:	4b2c      	ldr	r3, [pc, #176]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002798:	2203      	movs	r2, #3
 800279a:	4393      	bics	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	4b29      	ldr	r3, [pc, #164]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027a4:	430a      	orrs	r2, r1
 80027a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2202      	movs	r2, #2
 80027ae:	4013      	ands	r3, r2
 80027b0:	d009      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027b2:	4b25      	ldr	r3, [pc, #148]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b6:	220c      	movs	r2, #12
 80027b8:	4393      	bics	r3, r2
 80027ba:	0019      	movs	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	4b21      	ldr	r3, [pc, #132]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027c2:	430a      	orrs	r2, r1
 80027c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2204      	movs	r2, #4
 80027cc:	4013      	ands	r3, r2
 80027ce:	d009      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d4:	4a23      	ldr	r2, [pc, #140]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	4b1a      	ldr	r3, [pc, #104]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027e0:	430a      	orrs	r2, r1
 80027e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2208      	movs	r2, #8
 80027ea:	4013      	ands	r3, r2
 80027ec:	d009      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ee:	4b16      	ldr	r3, [pc, #88]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	0019      	movs	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2240      	movs	r2, #64	@ 0x40
 8002808:	4013      	ands	r3, r2
 800280a:	d009      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800280c:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800280e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002810:	4a16      	ldr	r2, [pc, #88]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002812:	4013      	ands	r3, r2
 8002814:	0019      	movs	r1, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1a      	ldr	r2, [r3, #32]
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800281c:	430a      	orrs	r2, r1
 800281e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2280      	movs	r2, #128	@ 0x80
 8002826:	4013      	ands	r3, r2
 8002828:	d009      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800282a:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800282c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800282e:	4a10      	ldr	r2, [pc, #64]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002830:	4013      	ands	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	4b03      	ldr	r3, [pc, #12]	@ (8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800283a:	430a      	orrs	r2, r1
 800283c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b006      	add	sp, #24
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000
 800284c:	40007000 	.word	0x40007000
 8002850:	fffcffff 	.word	0xfffcffff
 8002854:	fff7ffff 	.word	0xfff7ffff
 8002858:	00001388 	.word	0x00001388
 800285c:	ffcfffff 	.word	0xffcfffff
 8002860:	efffffff 	.word	0xefffffff
 8002864:	fffff3ff 	.word	0xfffff3ff
 8002868:	ffffcfff 	.word	0xffffcfff
 800286c:	fbffffff 	.word	0xfbffffff
 8002870:	fff3ffff 	.word	0xfff3ffff

08002874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e044      	b.n	8002910 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d107      	bne.n	800289e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2278      	movs	r2, #120	@ 0x78
 8002892:	2100      	movs	r1, #0
 8002894:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0018      	movs	r0, r3
 800289a:	f7fe fc4b 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2224      	movs	r2, #36	@ 0x24
 80028a2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2101      	movs	r1, #1
 80028b0:	438a      	bics	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	0018      	movs	r0, r3
 80028c0:	f000 fe2a 	bl	8003518 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	0018      	movs	r0, r3
 80028c8:	f000 fba2 	bl	8003010 <UART_SetConfig>
 80028cc:	0003      	movs	r3, r0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e01c      	b.n	8002910 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	490d      	ldr	r1, [pc, #52]	@ (8002918 <HAL_UART_Init+0xa4>)
 80028e2:	400a      	ands	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	212a      	movs	r1, #42	@ 0x2a
 80028f2:	438a      	bics	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	0018      	movs	r0, r3
 800290a:	f000 feb9 	bl	8003680 <UART_CheckIdleState>
 800290e:	0003      	movs	r3, r0
}
 8002910:	0018      	movs	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	b002      	add	sp, #8
 8002916:	bd80      	pop	{r7, pc}
 8002918:	ffffb7ff 	.word	0xffffb7ff

0800291c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	1dbb      	adds	r3, r7, #6
 8002928:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2280      	movs	r2, #128	@ 0x80
 800292e:	589b      	ldr	r3, [r3, r2]
 8002930:	2b20      	cmp	r3, #32
 8002932:	d14a      	bne.n	80029ca <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_UART_Receive_IT+0x26>
 800293a:	1dbb      	adds	r3, r7, #6
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e042      	b.n	80029cc <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	015b      	lsls	r3, r3, #5
 800294e:	429a      	cmp	r2, r3
 8002950:	d109      	bne.n	8002966 <HAL_UART_Receive_IT+0x4a>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2201      	movs	r2, #1
 800295e:	4013      	ands	r3, r2
 8002960:	d001      	beq.n	8002966 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e032      	b.n	80029cc <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a18      	ldr	r2, [pc, #96]	@ (80029d4 <HAL_UART_Receive_IT+0xb8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d020      	beq.n	80029b8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	2380      	movs	r3, #128	@ 0x80
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	4013      	ands	r3, r2
 8002982:	d019      	beq.n	80029b8 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002984:	f3ef 8310 	mrs	r3, PRIMASK
 8002988:	613b      	str	r3, [r7, #16]
  return(result);
 800298a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	2301      	movs	r3, #1
 8002990:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f383 8810 	msr	PRIMASK, r3
}
 8002998:	46c0      	nop			@ (mov r8, r8)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2180      	movs	r1, #128	@ 0x80
 80029a6:	04c9      	lsls	r1, r1, #19
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f383 8810 	msr	PRIMASK, r3
}
 80029b6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029b8:	1dbb      	adds	r3, r7, #6
 80029ba:	881a      	ldrh	r2, [r3, #0]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 ff75 	bl	80038b0 <UART_Start_Receive_IT>
 80029c6:	0003      	movs	r3, r0
 80029c8:	e000      	b.n	80029cc <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
  }
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b008      	add	sp, #32
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40004800 	.word	0x40004800

080029d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b0ab      	sub	sp, #172	@ 0xac
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	22a4      	movs	r2, #164	@ 0xa4
 80029e8:	18b9      	adds	r1, r7, r2
 80029ea:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	20a0      	movs	r0, #160	@ 0xa0
 80029f4:	1839      	adds	r1, r7, r0
 80029f6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	219c      	movs	r1, #156	@ 0x9c
 8002a00:	1879      	adds	r1, r7, r1
 8002a02:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a04:	0011      	movs	r1, r2
 8002a06:	18bb      	adds	r3, r7, r2
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a99      	ldr	r2, [pc, #612]	@ (8002c70 <HAL_UART_IRQHandler+0x298>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2298      	movs	r2, #152	@ 0x98
 8002a10:	18bc      	adds	r4, r7, r2
 8002a12:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002a14:	18bb      	adds	r3, r7, r2
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d114      	bne.n	8002a46 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2220      	movs	r2, #32
 8002a22:	4013      	ands	r3, r2
 8002a24:	d00f      	beq.n	8002a46 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a26:	183b      	adds	r3, r7, r0
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d00a      	beq.n	8002a46 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d100      	bne.n	8002a3a <HAL_UART_IRQHandler+0x62>
 8002a38:	e2be      	b.n	8002fb8 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	0010      	movs	r0, r2
 8002a42:	4798      	blx	r3
      }
      return;
 8002a44:	e2b8      	b.n	8002fb8 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a46:	2398      	movs	r3, #152	@ 0x98
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d100      	bne.n	8002a52 <HAL_UART_IRQHandler+0x7a>
 8002a50:	e114      	b.n	8002c7c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a52:	239c      	movs	r3, #156	@ 0x9c
 8002a54:	18fb      	adds	r3, r7, r3
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d106      	bne.n	8002a6c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a5e:	23a0      	movs	r3, #160	@ 0xa0
 8002a60:	18fb      	adds	r3, r7, r3
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a83      	ldr	r2, [pc, #524]	@ (8002c74 <HAL_UART_IRQHandler+0x29c>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	d100      	bne.n	8002a6c <HAL_UART_IRQHandler+0x94>
 8002a6a:	e107      	b.n	8002c7c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a6c:	23a4      	movs	r3, #164	@ 0xa4
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2201      	movs	r2, #1
 8002a74:	4013      	ands	r3, r2
 8002a76:	d012      	beq.n	8002a9e <HAL_UART_IRQHandler+0xc6>
 8002a78:	23a0      	movs	r3, #160	@ 0xa0
 8002a7a:	18fb      	adds	r3, r7, r3
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	2380      	movs	r3, #128	@ 0x80
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	d00b      	beq.n	8002a9e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2284      	movs	r2, #132	@ 0x84
 8002a92:	589b      	ldr	r3, [r3, r2]
 8002a94:	2201      	movs	r2, #1
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2184      	movs	r1, #132	@ 0x84
 8002a9c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a9e:	23a4      	movs	r3, #164	@ 0xa4
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d011      	beq.n	8002ace <HAL_UART_IRQHandler+0xf6>
 8002aaa:	239c      	movs	r3, #156	@ 0x9c
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d00b      	beq.n	8002ace <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2202      	movs	r2, #2
 8002abc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2284      	movs	r2, #132	@ 0x84
 8002ac2:	589b      	ldr	r3, [r3, r2]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2184      	movs	r1, #132	@ 0x84
 8002acc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ace:	23a4      	movs	r3, #164	@ 0xa4
 8002ad0:	18fb      	adds	r3, r7, r3
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d011      	beq.n	8002afe <HAL_UART_IRQHandler+0x126>
 8002ada:	239c      	movs	r3, #156	@ 0x9c
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d00b      	beq.n	8002afe <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2204      	movs	r2, #4
 8002aec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2284      	movs	r2, #132	@ 0x84
 8002af2:	589b      	ldr	r3, [r3, r2]
 8002af4:	2202      	movs	r2, #2
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2184      	movs	r1, #132	@ 0x84
 8002afc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002afe:	23a4      	movs	r3, #164	@ 0xa4
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2208      	movs	r2, #8
 8002b06:	4013      	ands	r3, r2
 8002b08:	d017      	beq.n	8002b3a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b0a:	23a0      	movs	r3, #160	@ 0xa0
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2220      	movs	r2, #32
 8002b12:	4013      	ands	r3, r2
 8002b14:	d105      	bne.n	8002b22 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b16:	239c      	movs	r3, #156	@ 0x9c
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b20:	d00b      	beq.n	8002b3a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2208      	movs	r2, #8
 8002b28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2284      	movs	r2, #132	@ 0x84
 8002b2e:	589b      	ldr	r3, [r3, r2]
 8002b30:	2208      	movs	r2, #8
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2184      	movs	r1, #132	@ 0x84
 8002b38:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b3a:	23a4      	movs	r3, #164	@ 0xa4
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	2380      	movs	r3, #128	@ 0x80
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	4013      	ands	r3, r2
 8002b46:	d013      	beq.n	8002b70 <HAL_UART_IRQHandler+0x198>
 8002b48:	23a0      	movs	r3, #160	@ 0xa0
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	04db      	lsls	r3, r3, #19
 8002b52:	4013      	ands	r3, r2
 8002b54:	d00c      	beq.n	8002b70 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2280      	movs	r2, #128	@ 0x80
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2284      	movs	r2, #132	@ 0x84
 8002b64:	589b      	ldr	r3, [r3, r2]
 8002b66:	2220      	movs	r2, #32
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2184      	movs	r1, #132	@ 0x84
 8002b6e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2284      	movs	r2, #132	@ 0x84
 8002b74:	589b      	ldr	r3, [r3, r2]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d100      	bne.n	8002b7c <HAL_UART_IRQHandler+0x1a4>
 8002b7a:	e21f      	b.n	8002fbc <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b7c:	23a4      	movs	r3, #164	@ 0xa4
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2220      	movs	r2, #32
 8002b84:	4013      	ands	r3, r2
 8002b86:	d00e      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b88:	23a0      	movs	r3, #160	@ 0xa0
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	4013      	ands	r3, r2
 8002b92:	d008      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d004      	beq.n	8002ba6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	0010      	movs	r0, r2
 8002ba4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2284      	movs	r2, #132	@ 0x84
 8002baa:	589b      	ldr	r3, [r3, r2]
 8002bac:	2194      	movs	r1, #148	@ 0x94
 8002bae:	187a      	adds	r2, r7, r1
 8002bb0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2240      	movs	r2, #64	@ 0x40
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b40      	cmp	r3, #64	@ 0x40
 8002bbe:	d004      	beq.n	8002bca <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2228      	movs	r2, #40	@ 0x28
 8002bc6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bc8:	d047      	beq.n	8002c5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f000 ff39 	bl	8003a44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2240      	movs	r2, #64	@ 0x40
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b40      	cmp	r3, #64	@ 0x40
 8002bde:	d137      	bne.n	8002c50 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be0:	f3ef 8310 	mrs	r3, PRIMASK
 8002be4:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002be6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be8:	2090      	movs	r0, #144	@ 0x90
 8002bea:	183a      	adds	r2, r7, r0
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	2301      	movs	r3, #1
 8002bf0:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bf4:	f383 8810 	msr	PRIMASK, r3
}
 8002bf8:	46c0      	nop			@ (mov r8, r8)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2140      	movs	r1, #64	@ 0x40
 8002c06:	438a      	bics	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	183b      	adds	r3, r7, r0
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c12:	f383 8810 	msr	PRIMASK, r3
}
 8002c16:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d012      	beq.n	8002c46 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c24:	4a14      	ldr	r2, [pc, #80]	@ (8002c78 <HAL_UART_IRQHandler+0x2a0>)
 8002c26:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f7fe fcd5 	bl	80015dc <HAL_DMA_Abort_IT>
 8002c32:	1e03      	subs	r3, r0, #0
 8002c34:	d01a      	beq.n	8002c6c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c40:	0018      	movs	r0, r3
 8002c42:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c44:	e012      	b.n	8002c6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 f9cd 	bl	8002fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4e:	e00d      	b.n	8002c6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 f9c8 	bl	8002fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c58:	e008      	b.n	8002c6c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 f9c3 	bl	8002fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2284      	movs	r2, #132	@ 0x84
 8002c66:	2100      	movs	r1, #0
 8002c68:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002c6a:	e1a7      	b.n	8002fbc <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	46c0      	nop			@ (mov r8, r8)
    return;
 8002c6e:	e1a5      	b.n	8002fbc <HAL_UART_IRQHandler+0x5e4>
 8002c70:	0000080f 	.word	0x0000080f
 8002c74:	04000120 	.word	0x04000120
 8002c78:	08003b0d 	.word	0x08003b0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d000      	beq.n	8002c86 <HAL_UART_IRQHandler+0x2ae>
 8002c84:	e159      	b.n	8002f3a <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c86:	23a4      	movs	r3, #164	@ 0xa4
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d100      	bne.n	8002c94 <HAL_UART_IRQHandler+0x2bc>
 8002c92:	e152      	b.n	8002f3a <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c94:	23a0      	movs	r3, #160	@ 0xa0
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2210      	movs	r2, #16
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d100      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x2ca>
 8002ca0:	e14b      	b.n	8002f3a <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2240      	movs	r2, #64	@ 0x40
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b40      	cmp	r3, #64	@ 0x40
 8002cb6:	d000      	beq.n	8002cba <HAL_UART_IRQHandler+0x2e2>
 8002cb8:	e0bf      	b.n	8002e3a <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	217e      	movs	r1, #126	@ 0x7e
 8002cc4:	187b      	adds	r3, r7, r1
 8002cc6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d100      	bne.n	8002cd2 <HAL_UART_IRQHandler+0x2fa>
 8002cd0:	e095      	b.n	8002dfe <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2258      	movs	r2, #88	@ 0x58
 8002cd6:	5a9b      	ldrh	r3, [r3, r2]
 8002cd8:	187a      	adds	r2, r7, r1
 8002cda:	8812      	ldrh	r2, [r2, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d300      	bcc.n	8002ce2 <HAL_UART_IRQHandler+0x30a>
 8002ce0:	e08d      	b.n	8002dfe <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	187a      	adds	r2, r7, r1
 8002ce6:	215a      	movs	r1, #90	@ 0x5a
 8002ce8:	8812      	ldrh	r2, [r2, #0]
 8002cea:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d16f      	bne.n	8002dda <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d04:	2301      	movs	r3, #1
 8002d06:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0a:	f383 8810 	msr	PRIMASK, r3
}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	49ad      	ldr	r1, [pc, #692]	@ (8002fd0 <HAL_UART_IRQHandler+0x5f8>)
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d22:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d26:	f383 8810 	msr	PRIMASK, r3
}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d34:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d36:	2301      	movs	r3, #1
 8002d38:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d3c:	f383 8810 	msr	PRIMASK, r3
}
 8002d40:	46c0      	nop			@ (mov r8, r8)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	438a      	bics	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d54:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d58:	f383 8810 	msr	PRIMASK, r3
}
 8002d5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d62:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d66:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d68:	2301      	movs	r3, #1
 8002d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d6e:	f383 8810 	msr	PRIMASK, r3
}
 8002d72:	46c0      	nop			@ (mov r8, r8)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2140      	movs	r1, #64	@ 0x40
 8002d80:	438a      	bics	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d86:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d8a:	f383 8810 	msr	PRIMASK, r3
}
 8002d8e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2280      	movs	r2, #128	@ 0x80
 8002d94:	2120      	movs	r1, #32
 8002d96:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8002da2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002da8:	2301      	movs	r3, #1
 8002daa:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dae:	f383 8810 	msr	PRIMASK, r3
}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2110      	movs	r1, #16
 8002dc0:	438a      	bics	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dca:	f383 8810 	msr	PRIMASK, r3
}
 8002dce:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7fe fbc1 	bl	800155c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2258      	movs	r2, #88	@ 0x58
 8002de4:	5a9a      	ldrh	r2, [r3, r2]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	215a      	movs	r1, #90	@ 0x5a
 8002dea:	5a5b      	ldrh	r3, [r3, r1]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0011      	movs	r1, r2
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 f8fe 	bl	8002ff8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002dfc:	e0e0      	b.n	8002fc0 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2258      	movs	r2, #88	@ 0x58
 8002e02:	5a9b      	ldrh	r3, [r3, r2]
 8002e04:	227e      	movs	r2, #126	@ 0x7e
 8002e06:	18ba      	adds	r2, r7, r2
 8002e08:	8812      	ldrh	r2, [r2, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d000      	beq.n	8002e10 <HAL_UART_IRQHandler+0x438>
 8002e0e:	e0d7      	b.n	8002fc0 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d000      	beq.n	8002e22 <HAL_UART_IRQHandler+0x44a>
 8002e20:	e0ce      	b.n	8002fc0 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2202      	movs	r2, #2
 8002e26:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2258      	movs	r2, #88	@ 0x58
 8002e2c:	5a9a      	ldrh	r2, [r3, r2]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	0011      	movs	r1, r2
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 f8e0 	bl	8002ff8 <HAL_UARTEx_RxEventCallback>
      return;
 8002e38:	e0c2      	b.n	8002fc0 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2258      	movs	r2, #88	@ 0x58
 8002e3e:	5a99      	ldrh	r1, [r3, r2]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	225a      	movs	r2, #90	@ 0x5a
 8002e44:	5a9b      	ldrh	r3, [r3, r2]
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	208e      	movs	r0, #142	@ 0x8e
 8002e4a:	183b      	adds	r3, r7, r0
 8002e4c:	1a8a      	subs	r2, r1, r2
 8002e4e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	225a      	movs	r2, #90	@ 0x5a
 8002e54:	5a9b      	ldrh	r3, [r3, r2]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d100      	bne.n	8002e5e <HAL_UART_IRQHandler+0x486>
 8002e5c:	e0b2      	b.n	8002fc4 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8002e5e:	183b      	adds	r3, r7, r0
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d100      	bne.n	8002e68 <HAL_UART_IRQHandler+0x490>
 8002e66:	e0ad      	b.n	8002fc4 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e68:	f3ef 8310 	mrs	r3, PRIMASK
 8002e6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e70:	2488      	movs	r4, #136	@ 0x88
 8002e72:	193a      	adds	r2, r7, r4
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	2301      	movs	r3, #1
 8002e78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f383 8810 	msr	PRIMASK, r3
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4951      	ldr	r1, [pc, #324]	@ (8002fd4 <HAL_UART_IRQHandler+0x5fc>)
 8002e8e:	400a      	ands	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	193b      	adds	r3, r7, r4
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f383 8810 	msr	PRIMASK, r3
}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ea6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea8:	2484      	movs	r4, #132	@ 0x84
 8002eaa:	193a      	adds	r2, r7, r4
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f383 8810 	msr	PRIMASK, r3
}
 8002eb8:	46c0      	nop			@ (mov r8, r8)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	438a      	bics	r2, r1
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	f383 8810 	msr	PRIMASK, r3
}
 8002ed6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2280      	movs	r2, #128	@ 0x80
 8002edc:	2120      	movs	r1, #32
 8002ede:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eec:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef4:	2480      	movs	r4, #128	@ 0x80
 8002ef6:	193a      	adds	r2, r7, r4
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	2301      	movs	r3, #1
 8002efc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f00:	f383 8810 	msr	PRIMASK, r3
}
 8002f04:	46c0      	nop			@ (mov r8, r8)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2110      	movs	r1, #16
 8002f12:	438a      	bics	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	193b      	adds	r3, r7, r4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1e:	f383 8810 	msr	PRIMASK, r3
}
 8002f22:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f2a:	183b      	adds	r3, r7, r0
 8002f2c:	881a      	ldrh	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0011      	movs	r1, r2
 8002f32:	0018      	movs	r0, r3
 8002f34:	f000 f860 	bl	8002ff8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f38:	e044      	b.n	8002fc4 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f3a:	23a4      	movs	r3, #164	@ 0xa4
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	2380      	movs	r3, #128	@ 0x80
 8002f42:	035b      	lsls	r3, r3, #13
 8002f44:	4013      	ands	r3, r2
 8002f46:	d010      	beq.n	8002f6a <HAL_UART_IRQHandler+0x592>
 8002f48:	239c      	movs	r3, #156	@ 0x9c
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	2380      	movs	r3, #128	@ 0x80
 8002f50:	03db      	lsls	r3, r3, #15
 8002f52:	4013      	ands	r3, r2
 8002f54:	d009      	beq.n	8002f6a <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2280      	movs	r2, #128	@ 0x80
 8002f5c:	0352      	lsls	r2, r2, #13
 8002f5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 ffd4 	bl	8003f10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f68:	e02f      	b.n	8002fca <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f6a:	23a4      	movs	r3, #164	@ 0xa4
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2280      	movs	r2, #128	@ 0x80
 8002f72:	4013      	ands	r3, r2
 8002f74:	d00f      	beq.n	8002f96 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f76:	23a0      	movs	r3, #160	@ 0xa0
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2280      	movs	r2, #128	@ 0x80
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d009      	beq.n	8002f96 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d01e      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	0010      	movs	r0, r2
 8002f92:	4798      	blx	r3
    }
    return;
 8002f94:	e018      	b.n	8002fc8 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f96:	23a4      	movs	r3, #164	@ 0xa4
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2240      	movs	r2, #64	@ 0x40
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d013      	beq.n	8002fca <HAL_UART_IRQHandler+0x5f2>
 8002fa2:	23a0      	movs	r3, #160	@ 0xa0
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2240      	movs	r2, #64	@ 0x40
 8002faa:	4013      	ands	r3, r2
 8002fac:	d00d      	beq.n	8002fca <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 fdbe 	bl	8003b32 <UART_EndTransmit_IT>
    return;
 8002fb6:	e008      	b.n	8002fca <HAL_UART_IRQHandler+0x5f2>
      return;
 8002fb8:	46c0      	nop			@ (mov r8, r8)
 8002fba:	e006      	b.n	8002fca <HAL_UART_IRQHandler+0x5f2>
    return;
 8002fbc:	46c0      	nop			@ (mov r8, r8)
 8002fbe:	e004      	b.n	8002fca <HAL_UART_IRQHandler+0x5f2>
      return;
 8002fc0:	46c0      	nop			@ (mov r8, r8)
 8002fc2:	e002      	b.n	8002fca <HAL_UART_IRQHandler+0x5f2>
      return;
 8002fc4:	46c0      	nop			@ (mov r8, r8)
 8002fc6:	e000      	b.n	8002fca <HAL_UART_IRQHandler+0x5f2>
    return;
 8002fc8:	46c0      	nop			@ (mov r8, r8)
  }

}
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b02b      	add	sp, #172	@ 0xac
 8002fce:	bd90      	pop	{r4, r7, pc}
 8002fd0:	fffffeff 	.word	0xfffffeff
 8002fd4:	fffffedf 	.word	0xfffffedf

08002fd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fe0:	46c0      	nop			@ (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ff0:	46c0      	nop			@ (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	000a      	movs	r2, r1
 8003002:	1cbb      	adds	r3, r7, #2
 8003004:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003006:	46c0      	nop			@ (mov r8, r8)
 8003008:	46bd      	mov	sp, r7
 800300a:	b002      	add	sp, #8
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003010:	b5b0      	push	{r4, r5, r7, lr}
 8003012:	b08e      	sub	sp, #56	@ 0x38
 8003014:	af00      	add	r7, sp, #0
 8003016:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003018:	231a      	movs	r3, #26
 800301a:	2218      	movs	r2, #24
 800301c:	189b      	adds	r3, r3, r2
 800301e:	19db      	adds	r3, r3, r7
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	431a      	orrs	r2, r3
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	431a      	orrs	r2, r3
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	4313      	orrs	r3, r2
 800303a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4ac6      	ldr	r2, [pc, #792]	@ (800335c <UART_SetConfig+0x34c>)
 8003044:	4013      	ands	r3, r2
 8003046:	0019      	movs	r1, r3
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4ac1      	ldr	r2, [pc, #772]	@ (8003360 <UART_SetConfig+0x350>)
 800305a:	4013      	ands	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4abb      	ldr	r2, [pc, #748]	@ (8003364 <UART_SetConfig+0x354>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003080:	4313      	orrs	r3, r2
 8003082:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	4ab7      	ldr	r2, [pc, #732]	@ (8003368 <UART_SetConfig+0x358>)
 800308c:	4013      	ands	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4ab3      	ldr	r2, [pc, #716]	@ (800336c <UART_SetConfig+0x35c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d131      	bne.n	8003108 <UART_SetConfig+0xf8>
 80030a4:	4bb2      	ldr	r3, [pc, #712]	@ (8003370 <UART_SetConfig+0x360>)
 80030a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a8:	2203      	movs	r2, #3
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d01d      	beq.n	80030ec <UART_SetConfig+0xdc>
 80030b0:	d823      	bhi.n	80030fa <UART_SetConfig+0xea>
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d00c      	beq.n	80030d0 <UART_SetConfig+0xc0>
 80030b6:	d820      	bhi.n	80030fa <UART_SetConfig+0xea>
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <UART_SetConfig+0xb2>
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d00e      	beq.n	80030de <UART_SetConfig+0xce>
 80030c0:	e01b      	b.n	80030fa <UART_SetConfig+0xea>
 80030c2:	231b      	movs	r3, #27
 80030c4:	2218      	movs	r2, #24
 80030c6:	189b      	adds	r3, r3, r2
 80030c8:	19db      	adds	r3, r3, r7
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
 80030ce:	e09c      	b.n	800320a <UART_SetConfig+0x1fa>
 80030d0:	231b      	movs	r3, #27
 80030d2:	2218      	movs	r2, #24
 80030d4:	189b      	adds	r3, r3, r2
 80030d6:	19db      	adds	r3, r3, r7
 80030d8:	2202      	movs	r2, #2
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	e095      	b.n	800320a <UART_SetConfig+0x1fa>
 80030de:	231b      	movs	r3, #27
 80030e0:	2218      	movs	r2, #24
 80030e2:	189b      	adds	r3, r3, r2
 80030e4:	19db      	adds	r3, r3, r7
 80030e6:	2204      	movs	r2, #4
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	e08e      	b.n	800320a <UART_SetConfig+0x1fa>
 80030ec:	231b      	movs	r3, #27
 80030ee:	2218      	movs	r2, #24
 80030f0:	189b      	adds	r3, r3, r2
 80030f2:	19db      	adds	r3, r3, r7
 80030f4:	2208      	movs	r2, #8
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	e087      	b.n	800320a <UART_SetConfig+0x1fa>
 80030fa:	231b      	movs	r3, #27
 80030fc:	2218      	movs	r2, #24
 80030fe:	189b      	adds	r3, r3, r2
 8003100:	19db      	adds	r3, r3, r7
 8003102:	2210      	movs	r2, #16
 8003104:	701a      	strb	r2, [r3, #0]
 8003106:	e080      	b.n	800320a <UART_SetConfig+0x1fa>
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a99      	ldr	r2, [pc, #612]	@ (8003374 <UART_SetConfig+0x364>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d131      	bne.n	8003176 <UART_SetConfig+0x166>
 8003112:	4b97      	ldr	r3, [pc, #604]	@ (8003370 <UART_SetConfig+0x360>)
 8003114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003116:	220c      	movs	r2, #12
 8003118:	4013      	ands	r3, r2
 800311a:	2b0c      	cmp	r3, #12
 800311c:	d01d      	beq.n	800315a <UART_SetConfig+0x14a>
 800311e:	d823      	bhi.n	8003168 <UART_SetConfig+0x158>
 8003120:	2b08      	cmp	r3, #8
 8003122:	d00c      	beq.n	800313e <UART_SetConfig+0x12e>
 8003124:	d820      	bhi.n	8003168 <UART_SetConfig+0x158>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <UART_SetConfig+0x120>
 800312a:	2b04      	cmp	r3, #4
 800312c:	d00e      	beq.n	800314c <UART_SetConfig+0x13c>
 800312e:	e01b      	b.n	8003168 <UART_SetConfig+0x158>
 8003130:	231b      	movs	r3, #27
 8003132:	2218      	movs	r2, #24
 8003134:	189b      	adds	r3, r3, r2
 8003136:	19db      	adds	r3, r3, r7
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e065      	b.n	800320a <UART_SetConfig+0x1fa>
 800313e:	231b      	movs	r3, #27
 8003140:	2218      	movs	r2, #24
 8003142:	189b      	adds	r3, r3, r2
 8003144:	19db      	adds	r3, r3, r7
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e05e      	b.n	800320a <UART_SetConfig+0x1fa>
 800314c:	231b      	movs	r3, #27
 800314e:	2218      	movs	r2, #24
 8003150:	189b      	adds	r3, r3, r2
 8003152:	19db      	adds	r3, r3, r7
 8003154:	2204      	movs	r2, #4
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e057      	b.n	800320a <UART_SetConfig+0x1fa>
 800315a:	231b      	movs	r3, #27
 800315c:	2218      	movs	r2, #24
 800315e:	189b      	adds	r3, r3, r2
 8003160:	19db      	adds	r3, r3, r7
 8003162:	2208      	movs	r2, #8
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	e050      	b.n	800320a <UART_SetConfig+0x1fa>
 8003168:	231b      	movs	r3, #27
 800316a:	2218      	movs	r2, #24
 800316c:	189b      	adds	r3, r3, r2
 800316e:	19db      	adds	r3, r3, r7
 8003170:	2210      	movs	r2, #16
 8003172:	701a      	strb	r2, [r3, #0]
 8003174:	e049      	b.n	800320a <UART_SetConfig+0x1fa>
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a7a      	ldr	r2, [pc, #488]	@ (8003364 <UART_SetConfig+0x354>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d13e      	bne.n	80031fe <UART_SetConfig+0x1ee>
 8003180:	4b7b      	ldr	r3, [pc, #492]	@ (8003370 <UART_SetConfig+0x360>)
 8003182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003184:	23c0      	movs	r3, #192	@ 0xc0
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	4013      	ands	r3, r2
 800318a:	22c0      	movs	r2, #192	@ 0xc0
 800318c:	0112      	lsls	r2, r2, #4
 800318e:	4293      	cmp	r3, r2
 8003190:	d027      	beq.n	80031e2 <UART_SetConfig+0x1d2>
 8003192:	22c0      	movs	r2, #192	@ 0xc0
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	4293      	cmp	r3, r2
 8003198:	d82a      	bhi.n	80031f0 <UART_SetConfig+0x1e0>
 800319a:	2280      	movs	r2, #128	@ 0x80
 800319c:	0112      	lsls	r2, r2, #4
 800319e:	4293      	cmp	r3, r2
 80031a0:	d011      	beq.n	80031c6 <UART_SetConfig+0x1b6>
 80031a2:	2280      	movs	r2, #128	@ 0x80
 80031a4:	0112      	lsls	r2, r2, #4
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d822      	bhi.n	80031f0 <UART_SetConfig+0x1e0>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d004      	beq.n	80031b8 <UART_SetConfig+0x1a8>
 80031ae:	2280      	movs	r2, #128	@ 0x80
 80031b0:	00d2      	lsls	r2, r2, #3
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00e      	beq.n	80031d4 <UART_SetConfig+0x1c4>
 80031b6:	e01b      	b.n	80031f0 <UART_SetConfig+0x1e0>
 80031b8:	231b      	movs	r3, #27
 80031ba:	2218      	movs	r2, #24
 80031bc:	189b      	adds	r3, r3, r2
 80031be:	19db      	adds	r3, r3, r7
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
 80031c4:	e021      	b.n	800320a <UART_SetConfig+0x1fa>
 80031c6:	231b      	movs	r3, #27
 80031c8:	2218      	movs	r2, #24
 80031ca:	189b      	adds	r3, r3, r2
 80031cc:	19db      	adds	r3, r3, r7
 80031ce:	2202      	movs	r2, #2
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e01a      	b.n	800320a <UART_SetConfig+0x1fa>
 80031d4:	231b      	movs	r3, #27
 80031d6:	2218      	movs	r2, #24
 80031d8:	189b      	adds	r3, r3, r2
 80031da:	19db      	adds	r3, r3, r7
 80031dc:	2204      	movs	r2, #4
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e013      	b.n	800320a <UART_SetConfig+0x1fa>
 80031e2:	231b      	movs	r3, #27
 80031e4:	2218      	movs	r2, #24
 80031e6:	189b      	adds	r3, r3, r2
 80031e8:	19db      	adds	r3, r3, r7
 80031ea:	2208      	movs	r2, #8
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e00c      	b.n	800320a <UART_SetConfig+0x1fa>
 80031f0:	231b      	movs	r3, #27
 80031f2:	2218      	movs	r2, #24
 80031f4:	189b      	adds	r3, r3, r2
 80031f6:	19db      	adds	r3, r3, r7
 80031f8:	2210      	movs	r2, #16
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	e005      	b.n	800320a <UART_SetConfig+0x1fa>
 80031fe:	231b      	movs	r3, #27
 8003200:	2218      	movs	r2, #24
 8003202:	189b      	adds	r3, r3, r2
 8003204:	19db      	adds	r3, r3, r7
 8003206:	2210      	movs	r2, #16
 8003208:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a55      	ldr	r2, [pc, #340]	@ (8003364 <UART_SetConfig+0x354>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d000      	beq.n	8003216 <UART_SetConfig+0x206>
 8003214:	e084      	b.n	8003320 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003216:	231b      	movs	r3, #27
 8003218:	2218      	movs	r2, #24
 800321a:	189b      	adds	r3, r3, r2
 800321c:	19db      	adds	r3, r3, r7
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b08      	cmp	r3, #8
 8003222:	d01d      	beq.n	8003260 <UART_SetConfig+0x250>
 8003224:	dc20      	bgt.n	8003268 <UART_SetConfig+0x258>
 8003226:	2b04      	cmp	r3, #4
 8003228:	d015      	beq.n	8003256 <UART_SetConfig+0x246>
 800322a:	dc1d      	bgt.n	8003268 <UART_SetConfig+0x258>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <UART_SetConfig+0x226>
 8003230:	2b02      	cmp	r3, #2
 8003232:	d005      	beq.n	8003240 <UART_SetConfig+0x230>
 8003234:	e018      	b.n	8003268 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003236:	f7ff f963 	bl	8002500 <HAL_RCC_GetPCLK1Freq>
 800323a:	0003      	movs	r3, r0
 800323c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800323e:	e01c      	b.n	800327a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003240:	4b4b      	ldr	r3, [pc, #300]	@ (8003370 <UART_SetConfig+0x360>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2210      	movs	r2, #16
 8003246:	4013      	ands	r3, r2
 8003248:	d002      	beq.n	8003250 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800324a:	4b4b      	ldr	r3, [pc, #300]	@ (8003378 <UART_SetConfig+0x368>)
 800324c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800324e:	e014      	b.n	800327a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003250:	4b4a      	ldr	r3, [pc, #296]	@ (800337c <UART_SetConfig+0x36c>)
 8003252:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003254:	e011      	b.n	800327a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003256:	f7ff f8c3 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 800325a:	0003      	movs	r3, r0
 800325c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800325e:	e00c      	b.n	800327a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003266:	e008      	b.n	800327a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800326c:	231a      	movs	r3, #26
 800326e:	2218      	movs	r2, #24
 8003270:	189b      	adds	r3, r3, r2
 8003272:	19db      	adds	r3, r3, r7
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
        break;
 8003278:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800327a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d100      	bne.n	8003282 <UART_SetConfig+0x272>
 8003280:	e132      	b.n	80034e8 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	0013      	movs	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	189b      	adds	r3, r3, r2
 800328c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800328e:	429a      	cmp	r2, r3
 8003290:	d305      	bcc.n	800329e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800329a:	429a      	cmp	r2, r3
 800329c:	d906      	bls.n	80032ac <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800329e:	231a      	movs	r3, #26
 80032a0:	2218      	movs	r2, #24
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	19db      	adds	r3, r3, r7
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e11d      	b.n	80034e8 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	6939      	ldr	r1, [r7, #16]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	000b      	movs	r3, r1
 80032ba:	0e1b      	lsrs	r3, r3, #24
 80032bc:	0010      	movs	r0, r2
 80032be:	0205      	lsls	r5, r0, #8
 80032c0:	431d      	orrs	r5, r3
 80032c2:	000b      	movs	r3, r1
 80032c4:	021c      	lsls	r4, r3, #8
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68b8      	ldr	r0, [r7, #8]
 80032d4:	68f9      	ldr	r1, [r7, #12]
 80032d6:	1900      	adds	r0, r0, r4
 80032d8:	4169      	adcs	r1, r5
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	2300      	movs	r3, #0
 80032e2:	607b      	str	r3, [r7, #4]
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f7fc ffa4 	bl	8000234 <__aeabi_uldivmod>
 80032ec:	0002      	movs	r2, r0
 80032ee:	000b      	movs	r3, r1
 80032f0:	0013      	movs	r3, r2
 80032f2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032f6:	23c0      	movs	r3, #192	@ 0xc0
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d309      	bcc.n	8003312 <UART_SetConfig+0x302>
 80032fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003300:	2380      	movs	r3, #128	@ 0x80
 8003302:	035b      	lsls	r3, r3, #13
 8003304:	429a      	cmp	r2, r3
 8003306:	d204      	bcs.n	8003312 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800330e:	60da      	str	r2, [r3, #12]
 8003310:	e0ea      	b.n	80034e8 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8003312:	231a      	movs	r3, #26
 8003314:	2218      	movs	r2, #24
 8003316:	189b      	adds	r3, r3, r2
 8003318:	19db      	adds	r3, r3, r7
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e0e3      	b.n	80034e8 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	2380      	movs	r3, #128	@ 0x80
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	429a      	cmp	r2, r3
 800332a:	d000      	beq.n	800332e <UART_SetConfig+0x31e>
 800332c:	e085      	b.n	800343a <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800332e:	231b      	movs	r3, #27
 8003330:	2218      	movs	r2, #24
 8003332:	189b      	adds	r3, r3, r2
 8003334:	19db      	adds	r3, r3, r7
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d837      	bhi.n	80033ac <UART_SetConfig+0x39c>
 800333c:	009a      	lsls	r2, r3, #2
 800333e:	4b10      	ldr	r3, [pc, #64]	@ (8003380 <UART_SetConfig+0x370>)
 8003340:	18d3      	adds	r3, r2, r3
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003346:	f7ff f8db 	bl	8002500 <HAL_RCC_GetPCLK1Freq>
 800334a:	0003      	movs	r3, r0
 800334c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800334e:	e036      	b.n	80033be <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003350:	f7ff f8ec 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 8003354:	0003      	movs	r3, r0
 8003356:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003358:	e031      	b.n	80033be <UART_SetConfig+0x3ae>
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	efff69f3 	.word	0xefff69f3
 8003360:	ffffcfff 	.word	0xffffcfff
 8003364:	40004800 	.word	0x40004800
 8003368:	fffff4ff 	.word	0xfffff4ff
 800336c:	40013800 	.word	0x40013800
 8003370:	40021000 	.word	0x40021000
 8003374:	40004400 	.word	0x40004400
 8003378:	003d0900 	.word	0x003d0900
 800337c:	00f42400 	.word	0x00f42400
 8003380:	08004074 	.word	0x08004074
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003384:	4b60      	ldr	r3, [pc, #384]	@ (8003508 <UART_SetConfig+0x4f8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2210      	movs	r2, #16
 800338a:	4013      	ands	r3, r2
 800338c:	d002      	beq.n	8003394 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800338e:	4b5f      	ldr	r3, [pc, #380]	@ (800350c <UART_SetConfig+0x4fc>)
 8003390:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003392:	e014      	b.n	80033be <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003394:	4b5e      	ldr	r3, [pc, #376]	@ (8003510 <UART_SetConfig+0x500>)
 8003396:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003398:	e011      	b.n	80033be <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339a:	f7ff f821 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 800339e:	0003      	movs	r3, r0
 80033a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80033a2:	e00c      	b.n	80033be <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80033aa:	e008      	b.n	80033be <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80033b0:	231a      	movs	r3, #26
 80033b2:	2218      	movs	r2, #24
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	19db      	adds	r3, r3, r7
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
        break;
 80033bc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d100      	bne.n	80033c6 <UART_SetConfig+0x3b6>
 80033c4:	e090      	b.n	80034e8 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c8:	005a      	lsls	r2, r3, #1
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	18d2      	adds	r2, r2, r3
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	0019      	movs	r1, r3
 80033d8:	0010      	movs	r0, r2
 80033da:	f7fc fe9f 	bl	800011c <__udivsi3>
 80033de:	0003      	movs	r3, r0
 80033e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e4:	2b0f      	cmp	r3, #15
 80033e6:	d921      	bls.n	800342c <UART_SetConfig+0x41c>
 80033e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033ea:	2380      	movs	r3, #128	@ 0x80
 80033ec:	025b      	lsls	r3, r3, #9
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d21c      	bcs.n	800342c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	200e      	movs	r0, #14
 80033f8:	2418      	movs	r4, #24
 80033fa:	1903      	adds	r3, r0, r4
 80033fc:	19db      	adds	r3, r3, r7
 80033fe:	210f      	movs	r1, #15
 8003400:	438a      	bics	r2, r1
 8003402:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	b29b      	uxth	r3, r3
 800340a:	2207      	movs	r2, #7
 800340c:	4013      	ands	r3, r2
 800340e:	b299      	uxth	r1, r3
 8003410:	1903      	adds	r3, r0, r4
 8003412:	19db      	adds	r3, r3, r7
 8003414:	1902      	adds	r2, r0, r4
 8003416:	19d2      	adds	r2, r2, r7
 8003418:	8812      	ldrh	r2, [r2, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	1902      	adds	r2, r0, r4
 8003424:	19d2      	adds	r2, r2, r7
 8003426:	8812      	ldrh	r2, [r2, #0]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	e05d      	b.n	80034e8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800342c:	231a      	movs	r3, #26
 800342e:	2218      	movs	r2, #24
 8003430:	189b      	adds	r3, r3, r2
 8003432:	19db      	adds	r3, r3, r7
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	e056      	b.n	80034e8 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800343a:	231b      	movs	r3, #27
 800343c:	2218      	movs	r2, #24
 800343e:	189b      	adds	r3, r3, r2
 8003440:	19db      	adds	r3, r3, r7
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b08      	cmp	r3, #8
 8003446:	d822      	bhi.n	800348e <UART_SetConfig+0x47e>
 8003448:	009a      	lsls	r2, r3, #2
 800344a:	4b32      	ldr	r3, [pc, #200]	@ (8003514 <UART_SetConfig+0x504>)
 800344c:	18d3      	adds	r3, r2, r3
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003452:	f7ff f855 	bl	8002500 <HAL_RCC_GetPCLK1Freq>
 8003456:	0003      	movs	r3, r0
 8003458:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800345a:	e021      	b.n	80034a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800345c:	f7ff f866 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 8003460:	0003      	movs	r3, r0
 8003462:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003464:	e01c      	b.n	80034a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003466:	4b28      	ldr	r3, [pc, #160]	@ (8003508 <UART_SetConfig+0x4f8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2210      	movs	r2, #16
 800346c:	4013      	ands	r3, r2
 800346e:	d002      	beq.n	8003476 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003470:	4b26      	ldr	r3, [pc, #152]	@ (800350c <UART_SetConfig+0x4fc>)
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003474:	e014      	b.n	80034a0 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003476:	4b26      	ldr	r3, [pc, #152]	@ (8003510 <UART_SetConfig+0x500>)
 8003478:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800347a:	e011      	b.n	80034a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347c:	f7fe ffb0 	bl	80023e0 <HAL_RCC_GetSysClockFreq>
 8003480:	0003      	movs	r3, r0
 8003482:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003484:	e00c      	b.n	80034a0 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003486:	2380      	movs	r3, #128	@ 0x80
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800348c:	e008      	b.n	80034a0 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003492:	231a      	movs	r3, #26
 8003494:	2218      	movs	r2, #24
 8003496:	189b      	adds	r3, r3, r2
 8003498:	19db      	adds	r3, r3, r7
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]
        break;
 800349e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80034a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d020      	beq.n	80034e8 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	085a      	lsrs	r2, r3, #1
 80034ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ae:	18d2      	adds	r2, r2, r3
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	0019      	movs	r1, r3
 80034b6:	0010      	movs	r0, r2
 80034b8:	f7fc fe30 	bl	800011c <__udivsi3>
 80034bc:	0003      	movs	r3, r0
 80034be:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c2:	2b0f      	cmp	r3, #15
 80034c4:	d90a      	bls.n	80034dc <UART_SetConfig+0x4cc>
 80034c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034c8:	2380      	movs	r3, #128	@ 0x80
 80034ca:	025b      	lsls	r3, r3, #9
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d205      	bcs.n	80034dc <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	e005      	b.n	80034e8 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80034dc:	231a      	movs	r3, #26
 80034de:	2218      	movs	r2, #24
 80034e0:	189b      	adds	r3, r3, r2
 80034e2:	19db      	adds	r3, r3, r7
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2200      	movs	r2, #0
 80034ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2200      	movs	r2, #0
 80034f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034f4:	231a      	movs	r3, #26
 80034f6:	2218      	movs	r2, #24
 80034f8:	189b      	adds	r3, r3, r2
 80034fa:	19db      	adds	r3, r3, r7
 80034fc:	781b      	ldrb	r3, [r3, #0]
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b00e      	add	sp, #56	@ 0x38
 8003504:	bdb0      	pop	{r4, r5, r7, pc}
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	40021000 	.word	0x40021000
 800350c:	003d0900 	.word	0x003d0900
 8003510:	00f42400 	.word	0x00f42400
 8003514:	08004098 	.word	0x08004098

08003518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003524:	2208      	movs	r2, #8
 8003526:	4013      	ands	r3, r2
 8003528:	d00b      	beq.n	8003542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a4a      	ldr	r2, [pc, #296]	@ (800365c <UART_AdvFeatureConfig+0x144>)
 8003532:	4013      	ands	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	2201      	movs	r2, #1
 8003548:	4013      	ands	r3, r2
 800354a:	d00b      	beq.n	8003564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4a43      	ldr	r2, [pc, #268]	@ (8003660 <UART_AdvFeatureConfig+0x148>)
 8003554:	4013      	ands	r3, r2
 8003556:	0019      	movs	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003568:	2202      	movs	r2, #2
 800356a:	4013      	ands	r3, r2
 800356c:	d00b      	beq.n	8003586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a3b      	ldr	r2, [pc, #236]	@ (8003664 <UART_AdvFeatureConfig+0x14c>)
 8003576:	4013      	ands	r3, r2
 8003578:	0019      	movs	r1, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358a:	2204      	movs	r2, #4
 800358c:	4013      	ands	r3, r2
 800358e:	d00b      	beq.n	80035a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4a34      	ldr	r2, [pc, #208]	@ (8003668 <UART_AdvFeatureConfig+0x150>)
 8003598:	4013      	ands	r3, r2
 800359a:	0019      	movs	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	2210      	movs	r2, #16
 80035ae:	4013      	ands	r3, r2
 80035b0:	d00b      	beq.n	80035ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a2c      	ldr	r2, [pc, #176]	@ (800366c <UART_AdvFeatureConfig+0x154>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	0019      	movs	r1, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	2220      	movs	r2, #32
 80035d0:	4013      	ands	r3, r2
 80035d2:	d00b      	beq.n	80035ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	4a25      	ldr	r2, [pc, #148]	@ (8003670 <UART_AdvFeatureConfig+0x158>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	2240      	movs	r2, #64	@ 0x40
 80035f2:	4013      	ands	r3, r2
 80035f4:	d01d      	beq.n	8003632 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003674 <UART_AdvFeatureConfig+0x15c>)
 80035fe:	4013      	ands	r3, r2
 8003600:	0019      	movs	r1, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	035b      	lsls	r3, r3, #13
 8003616:	429a      	cmp	r2, r3
 8003618:	d10b      	bne.n	8003632 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4a15      	ldr	r2, [pc, #84]	@ (8003678 <UART_AdvFeatureConfig+0x160>)
 8003622:	4013      	ands	r3, r2
 8003624:	0019      	movs	r1, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	2280      	movs	r2, #128	@ 0x80
 8003638:	4013      	ands	r3, r2
 800363a:	d00b      	beq.n	8003654 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4a0e      	ldr	r2, [pc, #56]	@ (800367c <UART_AdvFeatureConfig+0x164>)
 8003644:	4013      	ands	r3, r2
 8003646:	0019      	movs	r1, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]
  }
}
 8003654:	46c0      	nop			@ (mov r8, r8)
 8003656:	46bd      	mov	sp, r7
 8003658:	b002      	add	sp, #8
 800365a:	bd80      	pop	{r7, pc}
 800365c:	ffff7fff 	.word	0xffff7fff
 8003660:	fffdffff 	.word	0xfffdffff
 8003664:	fffeffff 	.word	0xfffeffff
 8003668:	fffbffff 	.word	0xfffbffff
 800366c:	ffffefff 	.word	0xffffefff
 8003670:	ffffdfff 	.word	0xffffdfff
 8003674:	ffefffff 	.word	0xffefffff
 8003678:	ff9fffff 	.word	0xff9fffff
 800367c:	fff7ffff 	.word	0xfff7ffff

08003680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b092      	sub	sp, #72	@ 0x48
 8003684:	af02      	add	r7, sp, #8
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2284      	movs	r2, #132	@ 0x84
 800368c:	2100      	movs	r1, #0
 800368e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003690:	f7fd fe58 	bl	8001344 <HAL_GetTick>
 8003694:	0003      	movs	r3, r0
 8003696:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2208      	movs	r2, #8
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d12c      	bne.n	8003700 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a8:	2280      	movs	r2, #128	@ 0x80
 80036aa:	0391      	lsls	r1, r2, #14
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4a46      	ldr	r2, [pc, #280]	@ (80037c8 <UART_CheckIdleState+0x148>)
 80036b0:	9200      	str	r2, [sp, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f000 f88c 	bl	80037d0 <UART_WaitOnFlagUntilTimeout>
 80036b8:	1e03      	subs	r3, r0, #0
 80036ba:	d021      	beq.n	8003700 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036bc:	f3ef 8310 	mrs	r3, PRIMASK
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80036c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036c6:	2301      	movs	r3, #1
 80036c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036cc:	f383 8810 	msr	PRIMASK, r3
}
 80036d0:	46c0      	nop			@ (mov r8, r8)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2180      	movs	r1, #128	@ 0x80
 80036de:	438a      	bics	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e8:	f383 8810 	msr	PRIMASK, r3
}
 80036ec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2278      	movs	r2, #120	@ 0x78
 80036f8:	2100      	movs	r1, #0
 80036fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e05f      	b.n	80037c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2204      	movs	r2, #4
 8003708:	4013      	ands	r3, r2
 800370a:	2b04      	cmp	r3, #4
 800370c:	d146      	bne.n	800379c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800370e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003710:	2280      	movs	r2, #128	@ 0x80
 8003712:	03d1      	lsls	r1, r2, #15
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	4a2c      	ldr	r2, [pc, #176]	@ (80037c8 <UART_CheckIdleState+0x148>)
 8003718:	9200      	str	r2, [sp, #0]
 800371a:	2200      	movs	r2, #0
 800371c:	f000 f858 	bl	80037d0 <UART_WaitOnFlagUntilTimeout>
 8003720:	1e03      	subs	r3, r0, #0
 8003722:	d03b      	beq.n	800379c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003724:	f3ef 8310 	mrs	r3, PRIMASK
 8003728:	60fb      	str	r3, [r7, #12]
  return(result);
 800372a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372c:	637b      	str	r3, [r7, #52]	@ 0x34
 800372e:	2301      	movs	r3, #1
 8003730:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f383 8810 	msr	PRIMASK, r3
}
 8003738:	46c0      	nop			@ (mov r8, r8)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4921      	ldr	r1, [pc, #132]	@ (80037cc <UART_CheckIdleState+0x14c>)
 8003746:	400a      	ands	r2, r1
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f383 8810 	msr	PRIMASK, r3
}
 8003754:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003756:	f3ef 8310 	mrs	r3, PRIMASK
 800375a:	61bb      	str	r3, [r7, #24]
  return(result);
 800375c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003760:	2301      	movs	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2101      	movs	r1, #1
 8003778:	438a      	bics	r2, r1
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	f383 8810 	msr	PRIMASK, r3
}
 8003786:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2280      	movs	r2, #128	@ 0x80
 800378c:	2120      	movs	r1, #32
 800378e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2278      	movs	r2, #120	@ 0x78
 8003794:	2100      	movs	r1, #0
 8003796:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e011      	b.n	80037c0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2280      	movs	r2, #128	@ 0x80
 80037a6:	2120      	movs	r1, #32
 80037a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2278      	movs	r2, #120	@ 0x78
 80037ba:	2100      	movs	r1, #0
 80037bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	0018      	movs	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b010      	add	sp, #64	@ 0x40
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	01ffffff 	.word	0x01ffffff
 80037cc:	fffffedf 	.word	0xfffffedf

080037d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	1dfb      	adds	r3, r7, #7
 80037de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e0:	e051      	b.n	8003886 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	3301      	adds	r3, #1
 80037e6:	d04e      	beq.n	8003886 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e8:	f7fd fdac 	bl	8001344 <HAL_GetTick>
 80037ec:	0002      	movs	r2, r0
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d302      	bcc.n	80037fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e051      	b.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2204      	movs	r2, #4
 800380a:	4013      	ands	r3, r2
 800380c:	d03b      	beq.n	8003886 <UART_WaitOnFlagUntilTimeout+0xb6>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b80      	cmp	r3, #128	@ 0x80
 8003812:	d038      	beq.n	8003886 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b40      	cmp	r3, #64	@ 0x40
 8003818:	d035      	beq.n	8003886 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	2208      	movs	r2, #8
 8003822:	4013      	ands	r3, r2
 8003824:	2b08      	cmp	r3, #8
 8003826:	d111      	bne.n	800384c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2208      	movs	r2, #8
 800382e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	0018      	movs	r0, r3
 8003834:	f000 f906 	bl	8003a44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2284      	movs	r2, #132	@ 0x84
 800383c:	2108      	movs	r1, #8
 800383e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2278      	movs	r2, #120	@ 0x78
 8003844:	2100      	movs	r1, #0
 8003846:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e02c      	b.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69da      	ldr	r2, [r3, #28]
 8003852:	2380      	movs	r3, #128	@ 0x80
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	401a      	ands	r2, r3
 8003858:	2380      	movs	r3, #128	@ 0x80
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	429a      	cmp	r2, r3
 800385e:	d112      	bne.n	8003886 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2280      	movs	r2, #128	@ 0x80
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	0018      	movs	r0, r3
 800386e:	f000 f8e9 	bl	8003a44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2284      	movs	r2, #132	@ 0x84
 8003876:	2120      	movs	r1, #32
 8003878:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2278      	movs	r2, #120	@ 0x78
 800387e:	2100      	movs	r1, #0
 8003880:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e00f      	b.n	80038a6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	4013      	ands	r3, r2
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	425a      	negs	r2, r3
 8003896:	4153      	adcs	r3, r2
 8003898:	b2db      	uxtb	r3, r3
 800389a:	001a      	movs	r2, r3
 800389c:	1dfb      	adds	r3, r7, #7
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d09e      	beq.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b004      	add	sp, #16
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b090      	sub	sp, #64	@ 0x40
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	1dbb      	adds	r3, r7, #6
 80038bc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1dba      	adds	r2, r7, #6
 80038c8:	2158      	movs	r1, #88	@ 0x58
 80038ca:	8812      	ldrh	r2, [r2, #0]
 80038cc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1dba      	adds	r2, r7, #6
 80038d2:	215a      	movs	r1, #90	@ 0x5a
 80038d4:	8812      	ldrh	r2, [r2, #0]
 80038d6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	2380      	movs	r3, #128	@ 0x80
 80038e4:	015b      	lsls	r3, r3, #5
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d10d      	bne.n	8003906 <UART_Start_Receive_IT+0x56>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d104      	bne.n	80038fc <UART_Start_Receive_IT+0x4c>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	225c      	movs	r2, #92	@ 0x5c
 80038f6:	4950      	ldr	r1, [pc, #320]	@ (8003a38 <UART_Start_Receive_IT+0x188>)
 80038f8:	5299      	strh	r1, [r3, r2]
 80038fa:	e02e      	b.n	800395a <UART_Start_Receive_IT+0xaa>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	225c      	movs	r2, #92	@ 0x5c
 8003900:	21ff      	movs	r1, #255	@ 0xff
 8003902:	5299      	strh	r1, [r3, r2]
 8003904:	e029      	b.n	800395a <UART_Start_Receive_IT+0xaa>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10d      	bne.n	800392a <UART_Start_Receive_IT+0x7a>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d104      	bne.n	8003920 <UART_Start_Receive_IT+0x70>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	225c      	movs	r2, #92	@ 0x5c
 800391a:	21ff      	movs	r1, #255	@ 0xff
 800391c:	5299      	strh	r1, [r3, r2]
 800391e:	e01c      	b.n	800395a <UART_Start_Receive_IT+0xaa>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	225c      	movs	r2, #92	@ 0x5c
 8003924:	217f      	movs	r1, #127	@ 0x7f
 8003926:	5299      	strh	r1, [r3, r2]
 8003928:	e017      	b.n	800395a <UART_Start_Receive_IT+0xaa>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	2380      	movs	r3, #128	@ 0x80
 8003930:	055b      	lsls	r3, r3, #21
 8003932:	429a      	cmp	r2, r3
 8003934:	d10d      	bne.n	8003952 <UART_Start_Receive_IT+0xa2>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d104      	bne.n	8003948 <UART_Start_Receive_IT+0x98>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	225c      	movs	r2, #92	@ 0x5c
 8003942:	217f      	movs	r1, #127	@ 0x7f
 8003944:	5299      	strh	r1, [r3, r2]
 8003946:	e008      	b.n	800395a <UART_Start_Receive_IT+0xaa>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	225c      	movs	r2, #92	@ 0x5c
 800394c:	213f      	movs	r1, #63	@ 0x3f
 800394e:	5299      	strh	r1, [r3, r2]
 8003950:	e003      	b.n	800395a <UART_Start_Receive_IT+0xaa>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	225c      	movs	r2, #92	@ 0x5c
 8003956:	2100      	movs	r1, #0
 8003958:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2284      	movs	r2, #132	@ 0x84
 800395e:	2100      	movs	r1, #0
 8003960:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2280      	movs	r2, #128	@ 0x80
 8003966:	2122      	movs	r1, #34	@ 0x22
 8003968:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800396a:	f3ef 8310 	mrs	r3, PRIMASK
 800396e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003970:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003974:	2301      	movs	r3, #1
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397a:	f383 8810 	msr	PRIMASK, r3
}
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2101      	movs	r1, #1
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003992:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003996:	f383 8810 	msr	PRIMASK, r3
}
 800399a:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	2380      	movs	r3, #128	@ 0x80
 80039a2:	015b      	lsls	r3, r3, #5
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d107      	bne.n	80039b8 <UART_Start_Receive_IT+0x108>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d103      	bne.n	80039b8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4a22      	ldr	r2, [pc, #136]	@ (8003a3c <UART_Start_Receive_IT+0x18c>)
 80039b4:	669a      	str	r2, [r3, #104]	@ 0x68
 80039b6:	e002      	b.n	80039be <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4a21      	ldr	r2, [pc, #132]	@ (8003a40 <UART_Start_Receive_IT+0x190>)
 80039bc:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d019      	beq.n	80039fa <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c6:	f3ef 8310 	mrs	r3, PRIMASK
 80039ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80039cc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80039ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d0:	2301      	movs	r3, #1
 80039d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f383 8810 	msr	PRIMASK, r3
}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2190      	movs	r1, #144	@ 0x90
 80039e8:	0049      	lsls	r1, r1, #1
 80039ea:	430a      	orrs	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f4:	f383 8810 	msr	PRIMASK, r3
}
 80039f8:	e018      	b.n	8003a2c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fa:	f3ef 8310 	mrs	r3, PRIMASK
 80039fe:	613b      	str	r3, [r7, #16]
  return(result);
 8003a00:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a04:	2301      	movs	r3, #1
 8003a06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f383 8810 	msr	PRIMASK, r3
}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2120      	movs	r1, #32
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	f383 8810 	msr	PRIMASK, r3
}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	0018      	movs	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b010      	add	sp, #64	@ 0x40
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	000001ff 	.word	0x000001ff
 8003a3c:	08003d4d 	.word	0x08003d4d
 8003a40:	08003b89 	.word	0x08003b89

08003a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08e      	sub	sp, #56	@ 0x38
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a50:	617b      	str	r3, [r7, #20]
  return(result);
 8003a52:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a56:	2301      	movs	r3, #1
 8003a58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f383 8810 	msr	PRIMASK, r3
}
 8003a60:	46c0      	nop			@ (mov r8, r8)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4926      	ldr	r1, [pc, #152]	@ (8003b08 <UART_EndRxTransfer+0xc4>)
 8003a6e:	400a      	ands	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f383 8810 	msr	PRIMASK, r3
}
 8003a7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a82:	623b      	str	r3, [r7, #32]
  return(result);
 8003a84:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a88:	2301      	movs	r3, #1
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	f383 8810 	msr	PRIMASK, r3
}
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	438a      	bics	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aaa:	f383 8810 	msr	PRIMASK, r3
}
 8003aae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d118      	bne.n	8003aea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8003abc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003abe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f383 8810 	msr	PRIMASK, r3
}
 8003acc:	46c0      	nop			@ (mov r8, r8)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2110      	movs	r1, #16
 8003ada:	438a      	bics	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f383 8810 	msr	PRIMASK, r3
}
 8003ae8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2280      	movs	r2, #128	@ 0x80
 8003aee:	2120      	movs	r1, #32
 8003af0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003afe:	46c0      	nop			@ (mov r8, r8)
 8003b00:	46bd      	mov	sp, r7
 8003b02:	b00e      	add	sp, #56	@ 0x38
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	46c0      	nop			@ (mov r8, r8)
 8003b08:	fffffedf 	.word	0xfffffedf

08003b0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	225a      	movs	r2, #90	@ 0x5a
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	0018      	movs	r0, r3
 8003b26:	f7ff fa5f 	bl	8002fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b2a:	46c0      	nop			@ (mov r8, r8)
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b004      	add	sp, #16
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b086      	sub	sp, #24
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b40:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	2301      	movs	r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f383 8810 	msr	PRIMASK, r3
}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2140      	movs	r1, #64	@ 0x40
 8003b5c:	438a      	bics	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f383 8810 	msr	PRIMASK, r3
}
 8003b6a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f7ff fa2c 	bl	8002fd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b80:	46c0      	nop			@ (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b006      	add	sp, #24
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b094      	sub	sp, #80	@ 0x50
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b90:	204e      	movs	r0, #78	@ 0x4e
 8003b92:	183b      	adds	r3, r7, r0
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	215c      	movs	r1, #92	@ 0x5c
 8003b98:	5a52      	ldrh	r2, [r2, r1]
 8003b9a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2280      	movs	r2, #128	@ 0x80
 8003ba0:	589b      	ldr	r3, [r3, r2]
 8003ba2:	2b22      	cmp	r3, #34	@ 0x22
 8003ba4:	d000      	beq.n	8003ba8 <UART_RxISR_8BIT+0x20>
 8003ba6:	e0bf      	b.n	8003d28 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bae:	214c      	movs	r1, #76	@ 0x4c
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	183b      	adds	r3, r7, r0
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	b2d9      	uxtb	r1, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc4:	400a      	ands	r2, r1
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	225a      	movs	r2, #90	@ 0x5a
 8003bd8:	5a9b      	ldrh	r3, [r3, r2]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b299      	uxth	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	225a      	movs	r2, #90	@ 0x5a
 8003be4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	225a      	movs	r2, #90	@ 0x5a
 8003bea:	5a9b      	ldrh	r3, [r3, r2]
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d000      	beq.n	8003bf4 <UART_RxISR_8BIT+0x6c>
 8003bf2:	e0a1      	b.n	8003d38 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bfe:	2301      	movs	r3, #1
 8003c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c04:	f383 8810 	msr	PRIMASK, r3
}
 8003c08:	46c0      	nop			@ (mov r8, r8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	494a      	ldr	r1, [pc, #296]	@ (8003d40 <UART_RxISR_8BIT+0x1b8>)
 8003c16:	400a      	ands	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c26:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c30:	2301      	movs	r3, #1
 8003c32:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c36:	f383 8810 	msr	PRIMASK, r3
}
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2101      	movs	r1, #1
 8003c48:	438a      	bics	r2, r1
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2280      	movs	r2, #128	@ 0x80
 8003c5c:	2120      	movs	r1, #32
 8003c5e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a34      	ldr	r2, [pc, #208]	@ (8003d44 <UART_RxISR_8BIT+0x1bc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01f      	beq.n	8003cb6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	2380      	movs	r3, #128	@ 0x80
 8003c7e:	041b      	lsls	r3, r3, #16
 8003c80:	4013      	ands	r3, r2
 8003c82:	d018      	beq.n	8003cb6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c84:	f3ef 8310 	mrs	r3, PRIMASK
 8003c88:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c8a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c8e:	2301      	movs	r3, #1
 8003c90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f383 8810 	msr	PRIMASK, r3
}
 8003c98:	46c0      	nop			@ (mov r8, r8)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4928      	ldr	r1, [pc, #160]	@ (8003d48 <UART_RxISR_8BIT+0x1c0>)
 8003ca6:	400a      	ands	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	f383 8810 	msr	PRIMASK, r3
}
 8003cb4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d12f      	bne.n	8003d1e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cca:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cce:	2301      	movs	r3, #1
 8003cd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f383 8810 	msr	PRIMASK, r3
}
 8003cd8:	46c0      	nop			@ (mov r8, r8)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2110      	movs	r1, #16
 8003ce6:	438a      	bics	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f383 8810 	msr	PRIMASK, r3
}
 8003cf4:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2210      	movs	r2, #16
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b10      	cmp	r3, #16
 8003d02:	d103      	bne.n	8003d0c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2210      	movs	r2, #16
 8003d0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2258      	movs	r2, #88	@ 0x58
 8003d10:	5a9a      	ldrh	r2, [r3, r2]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0011      	movs	r1, r2
 8003d16:	0018      	movs	r0, r3
 8003d18:	f7ff f96e 	bl	8002ff8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d1c:	e00c      	b.n	8003d38 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7fd f9e4 	bl	80010ee <HAL_UART_RxCpltCallback>
}
 8003d26:	e007      	b.n	8003d38 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2108      	movs	r1, #8
 8003d34:	430a      	orrs	r2, r1
 8003d36:	619a      	str	r2, [r3, #24]
}
 8003d38:	46c0      	nop			@ (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b014      	add	sp, #80	@ 0x50
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	fffffedf 	.word	0xfffffedf
 8003d44:	40004800 	.word	0x40004800
 8003d48:	fbffffff 	.word	0xfbffffff

08003d4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b094      	sub	sp, #80	@ 0x50
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d54:	204e      	movs	r0, #78	@ 0x4e
 8003d56:	183b      	adds	r3, r7, r0
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	215c      	movs	r1, #92	@ 0x5c
 8003d5c:	5a52      	ldrh	r2, [r2, r1]
 8003d5e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2280      	movs	r2, #128	@ 0x80
 8003d64:	589b      	ldr	r3, [r3, r2]
 8003d66:	2b22      	cmp	r3, #34	@ 0x22
 8003d68:	d000      	beq.n	8003d6c <UART_RxISR_16BIT+0x20>
 8003d6a:	e0bf      	b.n	8003eec <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d72:	214c      	movs	r1, #76	@ 0x4c
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d7e:	187b      	adds	r3, r7, r1
 8003d80:	183a      	adds	r2, r7, r0
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	8812      	ldrh	r2, [r2, #0]
 8003d86:	4013      	ands	r3, r2
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d92:	1c9a      	adds	r2, r3, #2
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	225a      	movs	r2, #90	@ 0x5a
 8003d9c:	5a9b      	ldrh	r3, [r3, r2]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b299      	uxth	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	225a      	movs	r2, #90	@ 0x5a
 8003da8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	225a      	movs	r2, #90	@ 0x5a
 8003dae:	5a9b      	ldrh	r3, [r3, r2]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d000      	beq.n	8003db8 <UART_RxISR_16BIT+0x6c>
 8003db6:	e0a1      	b.n	8003efc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dbc:	623b      	str	r3, [r7, #32]
  return(result);
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	f383 8810 	msr	PRIMASK, r3
}
 8003dcc:	46c0      	nop			@ (mov r8, r8)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	494a      	ldr	r1, [pc, #296]	@ (8003f04 <UART_RxISR_16BIT+0x1b8>)
 8003dda:	400a      	ands	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de4:	f383 8810 	msr	PRIMASK, r3
}
 8003de8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dea:	f3ef 8310 	mrs	r3, PRIMASK
 8003dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003df4:	2301      	movs	r3, #1
 8003df6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfa:	f383 8810 	msr	PRIMASK, r3
}
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e12:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e16:	f383 8810 	msr	PRIMASK, r3
}
 8003e1a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2280      	movs	r2, #128	@ 0x80
 8003e20:	2120      	movs	r1, #32
 8003e22:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a34      	ldr	r2, [pc, #208]	@ (8003f08 <UART_RxISR_16BIT+0x1bc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01f      	beq.n	8003e7a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	2380      	movs	r3, #128	@ 0x80
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	4013      	ands	r3, r2
 8003e46:	d018      	beq.n	8003e7a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e48:	f3ef 8310 	mrs	r3, PRIMASK
 8003e4c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e4e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e52:	2301      	movs	r3, #1
 8003e54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f383 8810 	msr	PRIMASK, r3
}
 8003e5c:	46c0      	nop			@ (mov r8, r8)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4928      	ldr	r1, [pc, #160]	@ (8003f0c <UART_RxISR_16BIT+0x1c0>)
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f383 8810 	msr	PRIMASK, r3
}
 8003e78:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d12f      	bne.n	8003ee2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e88:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e8e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e92:	2301      	movs	r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f383 8810 	msr	PRIMASK, r3
}
 8003e9c:	46c0      	nop			@ (mov r8, r8)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2110      	movs	r1, #16
 8003eaa:	438a      	bics	r2, r1
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f383 8810 	msr	PRIMASK, r3
}
 8003eb8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	2210      	movs	r2, #16
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d103      	bne.n	8003ed0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2258      	movs	r2, #88	@ 0x58
 8003ed4:	5a9a      	ldrh	r2, [r3, r2]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	0011      	movs	r1, r2
 8003eda:	0018      	movs	r0, r3
 8003edc:	f7ff f88c 	bl	8002ff8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ee0:	e00c      	b.n	8003efc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7fd f902 	bl	80010ee <HAL_UART_RxCpltCallback>
}
 8003eea:	e007      	b.n	8003efc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2108      	movs	r1, #8
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	619a      	str	r2, [r3, #24]
}
 8003efc:	46c0      	nop			@ (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b014      	add	sp, #80	@ 0x50
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	fffffedf 	.word	0xfffffedf
 8003f08:	40004800 	.word	0x40004800
 8003f0c:	fbffffff 	.word	0xfbffffff

08003f10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f18:	46c0      	nop			@ (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b002      	add	sp, #8
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <memset>:
 8003f20:	0003      	movs	r3, r0
 8003f22:	1882      	adds	r2, r0, r2
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d100      	bne.n	8003f2a <memset+0xa>
 8003f28:	4770      	bx	lr
 8003f2a:	7019      	strb	r1, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	e7f9      	b.n	8003f24 <memset+0x4>

08003f30 <__libc_init_array>:
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	2600      	movs	r6, #0
 8003f34:	4c0c      	ldr	r4, [pc, #48]	@ (8003f68 <__libc_init_array+0x38>)
 8003f36:	4d0d      	ldr	r5, [pc, #52]	@ (8003f6c <__libc_init_array+0x3c>)
 8003f38:	1b64      	subs	r4, r4, r5
 8003f3a:	10a4      	asrs	r4, r4, #2
 8003f3c:	42a6      	cmp	r6, r4
 8003f3e:	d109      	bne.n	8003f54 <__libc_init_array+0x24>
 8003f40:	2600      	movs	r6, #0
 8003f42:	f000 f819 	bl	8003f78 <_init>
 8003f46:	4c0a      	ldr	r4, [pc, #40]	@ (8003f70 <__libc_init_array+0x40>)
 8003f48:	4d0a      	ldr	r5, [pc, #40]	@ (8003f74 <__libc_init_array+0x44>)
 8003f4a:	1b64      	subs	r4, r4, r5
 8003f4c:	10a4      	asrs	r4, r4, #2
 8003f4e:	42a6      	cmp	r6, r4
 8003f50:	d105      	bne.n	8003f5e <__libc_init_array+0x2e>
 8003f52:	bd70      	pop	{r4, r5, r6, pc}
 8003f54:	00b3      	lsls	r3, r6, #2
 8003f56:	58eb      	ldr	r3, [r5, r3]
 8003f58:	4798      	blx	r3
 8003f5a:	3601      	adds	r6, #1
 8003f5c:	e7ee      	b.n	8003f3c <__libc_init_array+0xc>
 8003f5e:	00b3      	lsls	r3, r6, #2
 8003f60:	58eb      	ldr	r3, [r5, r3]
 8003f62:	4798      	blx	r3
 8003f64:	3601      	adds	r6, #1
 8003f66:	e7f2      	b.n	8003f4e <__libc_init_array+0x1e>
 8003f68:	080040c4 	.word	0x080040c4
 8003f6c:	080040c4 	.word	0x080040c4
 8003f70:	080040c8 	.word	0x080040c8
 8003f74:	080040c4 	.word	0x080040c4

08003f78 <_init>:
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	46c0      	nop			@ (mov r8, r8)
 8003f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7e:	bc08      	pop	{r3}
 8003f80:	469e      	mov	lr, r3
 8003f82:	4770      	bx	lr

08003f84 <_fini>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	46c0      	nop			@ (mov r8, r8)
 8003f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8a:	bc08      	pop	{r3}
 8003f8c:	469e      	mov	lr, r3
 8003f8e:	4770      	bx	lr


TM1638.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b48  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001c08  08001c08  00002c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c24  08001c24  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001c24  08001c24  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001c24  08001c24  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c24  08001c24  00002c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c28  08001c28  00002c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001c2c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08001c38  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08001c38  00003084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d80  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001198  00000000  00000000  00007db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a0  00000000  00000000  00008f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000042d  00000000  00000000  000094f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000126b5  00000000  00000000  0000991d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d4e  00000000  00000000  0001bfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071706  00000000  00000000  00022d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00094426  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012dc  00000000  00000000  0009446c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00095748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001bf0 	.word	0x08001bf0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001bf0 	.word	0x08001bf0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 f9a1 	bl	800056c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f83b 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8c1 	bl	80003b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000232:	f000 f887 	bl	8000344 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(STB_GPIO_Port, STB_Pin, GPIO_PIN_RESET);
 8000236:	23a0      	movs	r3, #160	@ 0xa0
 8000238:	05db      	lsls	r3, r3, #23
 800023a:	2200      	movs	r2, #0
 800023c:	2140      	movs	r1, #64	@ 0x40
 800023e:	0018      	movs	r0, r3
 8000240:	f000 fc2e 	bl	8000aa0 <HAL_GPIO_WritePin>
  uint8_t comando = 0x8F;
 8000244:	210f      	movs	r1, #15
 8000246:	187b      	adds	r3, r7, r1
 8000248:	228f      	movs	r2, #143	@ 0x8f
 800024a:	701a      	strb	r2, [r3, #0]
  HAL_SPI_Transmit(&hspi1, &comando, 1, 1000);
 800024c:	23fa      	movs	r3, #250	@ 0xfa
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	1879      	adds	r1, r7, r1
 8000252:	4813      	ldr	r0, [pc, #76]	@ (80002a0 <main+0x80>)
 8000254:	2201      	movs	r2, #1
 8000256:	f001 fa67 	bl	8001728 <HAL_SPI_Transmit>

  uint8_t endereco = 0xC0; // endereço inicial
 800025a:	240e      	movs	r4, #14
 800025c:	193b      	adds	r3, r7, r4
 800025e:	22c0      	movs	r2, #192	@ 0xc0
 8000260:	701a      	strb	r2, [r3, #0]
  uint8_t zeros[8] = {0};
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	0018      	movs	r0, r3
 8000266:	2308      	movs	r3, #8
 8000268:	001a      	movs	r2, r3
 800026a:	2100      	movs	r1, #0
 800026c:	f001 fc94 	bl	8001b98 <memset>
  HAL_SPI_Transmit(&hspi1, &endereco, 1, 1000);
 8000270:	23fa      	movs	r3, #250	@ 0xfa
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	1939      	adds	r1, r7, r4
 8000276:	480a      	ldr	r0, [pc, #40]	@ (80002a0 <main+0x80>)
 8000278:	2201      	movs	r2, #1
 800027a:	f001 fa55 	bl	8001728 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, zeros, 8, 1000);
 800027e:	23fa      	movs	r3, #250	@ 0xfa
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	1d39      	adds	r1, r7, #4
 8000284:	4806      	ldr	r0, [pc, #24]	@ (80002a0 <main+0x80>)
 8000286:	2208      	movs	r2, #8
 8000288:	f001 fa4e 	bl	8001728 <HAL_SPI_Transmit>

  HAL_GPIO_WritePin(STB_GPIO_Port, STB_Pin, GPIO_PIN_SET);
 800028c:	23a0      	movs	r3, #160	@ 0xa0
 800028e:	05db      	lsls	r3, r3, #23
 8000290:	2201      	movs	r2, #1
 8000292:	2140      	movs	r1, #64	@ 0x40
 8000294:	0018      	movs	r0, r3
 8000296:	f000 fc03 	bl	8000aa0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	e7fd      	b.n	800029a <main+0x7a>
 800029e:	46c0      	nop			@ (mov r8, r8)
 80002a0:	20000028 	.word	0x20000028

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b095      	sub	sp, #84	@ 0x54
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	2418      	movs	r4, #24
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	0018      	movs	r0, r3
 80002b0:	2338      	movs	r3, #56	@ 0x38
 80002b2:	001a      	movs	r2, r3
 80002b4:	2100      	movs	r1, #0
 80002b6:	f001 fc6f 	bl	8001b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	0018      	movs	r0, r3
 80002be:	2314      	movs	r3, #20
 80002c0:	001a      	movs	r2, r3
 80002c2:	2100      	movs	r1, #0
 80002c4:	f001 fc68 	bl	8001b98 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002c8:	4b1c      	ldr	r3, [pc, #112]	@ (800033c <SystemClock_Config+0x98>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a1c      	ldr	r2, [pc, #112]	@ (8000340 <SystemClock_Config+0x9c>)
 80002ce:	401a      	ands	r2, r3
 80002d0:	4b1a      	ldr	r3, [pc, #104]	@ (800033c <SystemClock_Config+0x98>)
 80002d2:	2180      	movs	r1, #128	@ 0x80
 80002d4:	0109      	lsls	r1, r1, #4
 80002d6:	430a      	orrs	r2, r1
 80002d8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002da:	0021      	movs	r1, r4
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2202      	movs	r2, #2
 80002e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2201      	movs	r2, #1
 80002e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2210      	movs	r2, #16
 80002ec:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	0018      	movs	r0, r3
 80002f8:	f000 fbf0 	bl	8000adc <HAL_RCC_OscConfig>
 80002fc:	1e03      	subs	r3, r0, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000300:	f000 f88e 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	220f      	movs	r2, #15
 8000308:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2201      	movs	r2, #1
 800030e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2280      	movs	r2, #128	@ 0x80
 8000314:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2200      	movs	r2, #0
 800031a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2100      	movs	r1, #0
 8000326:	0018      	movs	r0, r3
 8000328:	f000 ff9c 	bl	8001264 <HAL_RCC_ClockConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000330:	f000 f876 	bl	8000420 <Error_Handler>
  }
}
 8000334:	46c0      	nop			@ (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b015      	add	sp, #84	@ 0x54
 800033a:	bd90      	pop	{r4, r7, pc}
 800033c:	40007000 	.word	0x40007000
 8000340:	ffffe7ff 	.word	0xffffe7ff

08000344 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000348:	4b18      	ldr	r3, [pc, #96]	@ (80003ac <MX_SPI1_Init+0x68>)
 800034a:	4a19      	ldr	r2, [pc, #100]	@ (80003b0 <MX_SPI1_Init+0x6c>)
 800034c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800034e:	4b17      	ldr	r3, [pc, #92]	@ (80003ac <MX_SPI1_Init+0x68>)
 8000350:	2282      	movs	r2, #130	@ 0x82
 8000352:	0052      	lsls	r2, r2, #1
 8000354:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000356:	4b15      	ldr	r3, [pc, #84]	@ (80003ac <MX_SPI1_Init+0x68>)
 8000358:	2280      	movs	r2, #128	@ 0x80
 800035a:	0212      	lsls	r2, r2, #8
 800035c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800035e:	4b13      	ldr	r3, [pc, #76]	@ (80003ac <MX_SPI1_Init+0x68>)
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000364:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <MX_SPI1_Init+0x68>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800036a:	4b10      	ldr	r3, [pc, #64]	@ (80003ac <MX_SPI1_Init+0x68>)
 800036c:	2200      	movs	r2, #0
 800036e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000370:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <MX_SPI1_Init+0x68>)
 8000372:	2280      	movs	r2, #128	@ 0x80
 8000374:	0092      	lsls	r2, r2, #2
 8000376:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000378:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <MX_SPI1_Init+0x68>)
 800037a:	2210      	movs	r2, #16
 800037c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800037e:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <MX_SPI1_Init+0x68>)
 8000380:	2280      	movs	r2, #128	@ 0x80
 8000382:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <MX_SPI1_Init+0x68>)
 8000386:	2200      	movs	r2, #0
 8000388:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800038a:	4b08      	ldr	r3, [pc, #32]	@ (80003ac <MX_SPI1_Init+0x68>)
 800038c:	2200      	movs	r2, #0
 800038e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <MX_SPI1_Init+0x68>)
 8000392:	2207      	movs	r2, #7
 8000394:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000396:	4b05      	ldr	r3, [pc, #20]	@ (80003ac <MX_SPI1_Init+0x68>)
 8000398:	0018      	movs	r0, r3
 800039a:	f001 f931 	bl	8001600 <HAL_SPI_Init>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80003a2:	f000 f83d 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003a6:	46c0      	nop			@ (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000028 	.word	0x20000028
 80003b0:	40013000 	.word	0x40013000

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	0018      	movs	r0, r3
 80003be:	2314      	movs	r3, #20
 80003c0:	001a      	movs	r2, r3
 80003c2:	2100      	movs	r1, #0
 80003c4:	f001 fbe8 	bl	8001b98 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b14      	ldr	r3, [pc, #80]	@ (800041c <MX_GPIO_Init+0x68>)
 80003ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80003cc:	4b13      	ldr	r3, [pc, #76]	@ (800041c <MX_GPIO_Init+0x68>)
 80003ce:	2101      	movs	r1, #1
 80003d0:	430a      	orrs	r2, r1
 80003d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80003d4:	4b11      	ldr	r3, [pc, #68]	@ (800041c <MX_GPIO_Init+0x68>)
 80003d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003d8:	2201      	movs	r2, #1
 80003da:	4013      	ands	r3, r2
 80003dc:	603b      	str	r3, [r7, #0]
 80003de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STB_GPIO_Port, STB_Pin, GPIO_PIN_RESET);
 80003e0:	23a0      	movs	r3, #160	@ 0xa0
 80003e2:	05db      	lsls	r3, r3, #23
 80003e4:	2200      	movs	r2, #0
 80003e6:	2140      	movs	r1, #64	@ 0x40
 80003e8:	0018      	movs	r0, r3
 80003ea:	f000 fb59 	bl	8000aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STB_Pin */
  GPIO_InitStruct.Pin = STB_Pin;
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2240      	movs	r2, #64	@ 0x40
 80003f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2201      	movs	r2, #1
 80003f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	2201      	movs	r2, #1
 80003fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STB_GPIO_Port, &GPIO_InitStruct);
 8000406:	1d3a      	adds	r2, r7, #4
 8000408:	23a0      	movs	r3, #160	@ 0xa0
 800040a:	05db      	lsls	r3, r3, #23
 800040c:	0011      	movs	r1, r2
 800040e:	0018      	movs	r0, r3
 8000410:	f000 f9d0 	bl	80007b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000414:	46c0      	nop			@ (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b006      	add	sp, #24
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	46c0      	nop			@ (mov r8, r8)
 800042a:	e7fd      	b.n	8000428 <Error_Handler+0x8>

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000430:	4b07      	ldr	r3, [pc, #28]	@ (8000450 <HAL_MspInit+0x24>)
 8000432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000434:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <HAL_MspInit+0x24>)
 8000436:	2101      	movs	r1, #1
 8000438:	430a      	orrs	r2, r1
 800043a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800043c:	4b04      	ldr	r3, [pc, #16]	@ (8000450 <HAL_MspInit+0x24>)
 800043e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000440:	4b03      	ldr	r3, [pc, #12]	@ (8000450 <HAL_MspInit+0x24>)
 8000442:	2180      	movs	r1, #128	@ 0x80
 8000444:	0549      	lsls	r1, r1, #21
 8000446:	430a      	orrs	r2, r1
 8000448:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000

08000454 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b089      	sub	sp, #36	@ 0x24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045c:	240c      	movs	r4, #12
 800045e:	193b      	adds	r3, r7, r4
 8000460:	0018      	movs	r0, r3
 8000462:	2314      	movs	r3, #20
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f001 fb96 	bl	8001b98 <memset>
  if(hspi->Instance==SPI1)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a18      	ldr	r2, [pc, #96]	@ (80004d4 <HAL_SPI_MspInit+0x80>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d129      	bne.n	80004ca <HAL_SPI_MspInit+0x76>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000476:	4b18      	ldr	r3, [pc, #96]	@ (80004d8 <HAL_SPI_MspInit+0x84>)
 8000478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800047a:	4b17      	ldr	r3, [pc, #92]	@ (80004d8 <HAL_SPI_MspInit+0x84>)
 800047c:	2180      	movs	r1, #128	@ 0x80
 800047e:	0149      	lsls	r1, r1, #5
 8000480:	430a      	orrs	r2, r1
 8000482:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <HAL_SPI_MspInit+0x84>)
 8000486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000488:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <HAL_SPI_MspInit+0x84>)
 800048a:	2101      	movs	r1, #1
 800048c:	430a      	orrs	r2, r1
 800048e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000490:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <HAL_SPI_MspInit+0x84>)
 8000492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000494:	2201      	movs	r2, #1
 8000496:	4013      	ands	r3, r2
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800049c:	0021      	movs	r1, r4
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	22a0      	movs	r2, #160	@ 0xa0
 80004a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2202      	movs	r2, #2
 80004a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2203      	movs	r2, #3
 80004b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	187a      	adds	r2, r7, r1
 80004be:	23a0      	movs	r3, #160	@ 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 f975 	bl	80007b4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b009      	add	sp, #36	@ 0x24
 80004d0:	bd90      	pop	{r4, r7, pc}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	40013000 	.word	0x40013000
 80004d8:	40021000 	.word	0x40021000

080004dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004e0:	46c0      	nop			@ (mov r8, r8)
 80004e2:	e7fd      	b.n	80004e0 <NMI_Handler+0x4>

080004e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	e7fd      	b.n	80004e8 <HardFault_Handler+0x4>

080004ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000504:	f000 f886 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000508:	46c0      	nop			@ (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000518:	480d      	ldr	r0, [pc, #52]	@ (8000550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800051c:	f7ff fff7 	bl	800050e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480c      	ldr	r0, [pc, #48]	@ (8000554 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490d      	ldr	r1, [pc, #52]	@ (8000558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0d      	ldr	r2, [pc, #52]	@ (800055c <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0a      	ldr	r2, [pc, #40]	@ (8000560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0a      	ldr	r4, [pc, #40]	@ (8000564 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000546:	f001 fb2f 	bl	8001ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800054a:	f7ff fe69 	bl	8000220 <main>

0800054e <LoopForever>:

LoopForever:
    b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   r0, =_estack
 8000550:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800055c:	08001c2c 	.word	0x08001c2c
  ldr r2, =_sbss
 8000560:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000564:	20000084 	.word	0x20000084

08000568 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_COMP_IRQHandler>
	...

0800056c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000572:	1dfb      	adds	r3, r7, #7
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <HAL_Init+0x3c>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <HAL_Init+0x3c>)
 800057e:	2140      	movs	r1, #64	@ 0x40
 8000580:	430a      	orrs	r2, r1
 8000582:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000584:	2000      	movs	r0, #0
 8000586:	f000 f811 	bl	80005ac <HAL_InitTick>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d003      	beq.n	8000596 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
 8000594:	e001      	b.n	800059a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000596:	f7ff ff49 	bl	800042c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800059a:	1dfb      	adds	r3, r7, #7
 800059c:	781b      	ldrb	r3, [r3, #0]
}
 800059e:	0018      	movs	r0, r3
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b002      	add	sp, #8
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	40022000 	.word	0x40022000

080005ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b4:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <HAL_InitTick+0x5c>)
 80005b6:	681c      	ldr	r4, [r3, #0]
 80005b8:	4b14      	ldr	r3, [pc, #80]	@ (800060c <HAL_InitTick+0x60>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	0019      	movs	r1, r3
 80005be:	23fa      	movs	r3, #250	@ 0xfa
 80005c0:	0098      	lsls	r0, r3, #2
 80005c2:	f7ff fda1 	bl	8000108 <__udivsi3>
 80005c6:	0003      	movs	r3, r0
 80005c8:	0019      	movs	r1, r3
 80005ca:	0020      	movs	r0, r4
 80005cc:	f7ff fd9c 	bl	8000108 <__udivsi3>
 80005d0:	0003      	movs	r3, r0
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f8e1 	bl	800079a <HAL_SYSTICK_Config>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80005dc:	2301      	movs	r3, #1
 80005de:	e00f      	b.n	8000600 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d80b      	bhi.n	80005fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	2301      	movs	r3, #1
 80005ea:	425b      	negs	r3, r3
 80005ec:	2200      	movs	r2, #0
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 f8be 	bl	8000770 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <HAL_InitTick+0x64>)
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b003      	add	sp, #12
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	20000000 	.word	0x20000000
 800060c:	20000008 	.word	0x20000008
 8000610:	20000004 	.word	0x20000004

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <HAL_IncTick+0x1c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	001a      	movs	r2, r3
 800061e:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <HAL_IncTick+0x20>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	18d2      	adds	r2, r2, r3
 8000624:	4b03      	ldr	r3, [pc, #12]	@ (8000634 <HAL_IncTick+0x20>)
 8000626:	601a      	str	r2, [r3, #0]
}
 8000628:	46c0      	nop			@ (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	20000008 	.word	0x20000008
 8000634:	20000080 	.word	0x20000080

08000638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  return uwTick;
 800063c:	4b02      	ldr	r3, [pc, #8]	@ (8000648 <HAL_GetTick+0x10>)
 800063e:	681b      	ldr	r3, [r3, #0]
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	20000080 	.word	0x20000080

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	0002      	movs	r2, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000660:	d828      	bhi.n	80006b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000662:	4a2f      	ldr	r2, [pc, #188]	@ (8000720 <__NVIC_SetPriority+0xd4>)
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b25b      	sxtb	r3, r3
 800066a:	089b      	lsrs	r3, r3, #2
 800066c:	33c0      	adds	r3, #192	@ 0xc0
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	589b      	ldr	r3, [r3, r2]
 8000672:	1dfa      	adds	r2, r7, #7
 8000674:	7812      	ldrb	r2, [r2, #0]
 8000676:	0011      	movs	r1, r2
 8000678:	2203      	movs	r2, #3
 800067a:	400a      	ands	r2, r1
 800067c:	00d2      	lsls	r2, r2, #3
 800067e:	21ff      	movs	r1, #255	@ 0xff
 8000680:	4091      	lsls	r1, r2
 8000682:	000a      	movs	r2, r1
 8000684:	43d2      	mvns	r2, r2
 8000686:	401a      	ands	r2, r3
 8000688:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	019b      	lsls	r3, r3, #6
 800068e:	22ff      	movs	r2, #255	@ 0xff
 8000690:	401a      	ands	r2, r3
 8000692:	1dfb      	adds	r3, r7, #7
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	0018      	movs	r0, r3
 8000698:	2303      	movs	r3, #3
 800069a:	4003      	ands	r3, r0
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a0:	481f      	ldr	r0, [pc, #124]	@ (8000720 <__NVIC_SetPriority+0xd4>)
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b25b      	sxtb	r3, r3
 80006a8:	089b      	lsrs	r3, r3, #2
 80006aa:	430a      	orrs	r2, r1
 80006ac:	33c0      	adds	r3, #192	@ 0xc0
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006b2:	e031      	b.n	8000718 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <__NVIC_SetPriority+0xd8>)
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	0019      	movs	r1, r3
 80006bc:	230f      	movs	r3, #15
 80006be:	400b      	ands	r3, r1
 80006c0:	3b08      	subs	r3, #8
 80006c2:	089b      	lsrs	r3, r3, #2
 80006c4:	3306      	adds	r3, #6
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	18d3      	adds	r3, r2, r3
 80006ca:	3304      	adds	r3, #4
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	1dfa      	adds	r2, r7, #7
 80006d0:	7812      	ldrb	r2, [r2, #0]
 80006d2:	0011      	movs	r1, r2
 80006d4:	2203      	movs	r2, #3
 80006d6:	400a      	ands	r2, r1
 80006d8:	00d2      	lsls	r2, r2, #3
 80006da:	21ff      	movs	r1, #255	@ 0xff
 80006dc:	4091      	lsls	r1, r2
 80006de:	000a      	movs	r2, r1
 80006e0:	43d2      	mvns	r2, r2
 80006e2:	401a      	ands	r2, r3
 80006e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	019b      	lsls	r3, r3, #6
 80006ea:	22ff      	movs	r2, #255	@ 0xff
 80006ec:	401a      	ands	r2, r3
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	0018      	movs	r0, r3
 80006f4:	2303      	movs	r3, #3
 80006f6:	4003      	ands	r3, r0
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006fc:	4809      	ldr	r0, [pc, #36]	@ (8000724 <__NVIC_SetPriority+0xd8>)
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	001c      	movs	r4, r3
 8000704:	230f      	movs	r3, #15
 8000706:	4023      	ands	r3, r4
 8000708:	3b08      	subs	r3, #8
 800070a:	089b      	lsrs	r3, r3, #2
 800070c:	430a      	orrs	r2, r1
 800070e:	3306      	adds	r3, #6
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	18c3      	adds	r3, r0, r3
 8000714:	3304      	adds	r3, #4
 8000716:	601a      	str	r2, [r3, #0]
}
 8000718:	46c0      	nop			@ (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b003      	add	sp, #12
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	e000e100 	.word	0xe000e100
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	1e5a      	subs	r2, r3, #1
 8000734:	2380      	movs	r3, #128	@ 0x80
 8000736:	045b      	lsls	r3, r3, #17
 8000738:	429a      	cmp	r2, r3
 800073a:	d301      	bcc.n	8000740 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073c:	2301      	movs	r3, #1
 800073e:	e010      	b.n	8000762 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000740:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <SysTick_Config+0x44>)
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	3a01      	subs	r2, #1
 8000746:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000748:	2301      	movs	r3, #1
 800074a:	425b      	negs	r3, r3
 800074c:	2103      	movs	r1, #3
 800074e:	0018      	movs	r0, r3
 8000750:	f7ff ff7c 	bl	800064c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <SysTick_Config+0x44>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075a:	4b04      	ldr	r3, [pc, #16]	@ (800076c <SysTick_Config+0x44>)
 800075c:	2207      	movs	r2, #7
 800075e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000760:	2300      	movs	r3, #0
}
 8000762:	0018      	movs	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	b002      	add	sp, #8
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	e000e010 	.word	0xe000e010

08000770 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	210f      	movs	r1, #15
 800077c:	187b      	adds	r3, r7, r1
 800077e:	1c02      	adds	r2, r0, #0
 8000780:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	187b      	adds	r3, r7, r1
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	b25b      	sxtb	r3, r3
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f7ff ff5d 	bl	800064c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b004      	add	sp, #16
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff ffbf 	bl	8000728 <SysTick_Config>
 80007aa:	0003      	movs	r3, r0
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b002      	add	sp, #8
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80007ca:	e14f      	b.n	8000a6c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2101      	movs	r1, #1
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4091      	lsls	r1, r2
 80007d6:	000a      	movs	r2, r1
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d100      	bne.n	80007e4 <HAL_GPIO_Init+0x30>
 80007e2:	e140      	b.n	8000a66 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2203      	movs	r2, #3
 80007ea:	4013      	ands	r3, r2
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d005      	beq.n	80007fc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	2203      	movs	r2, #3
 80007f6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d130      	bne.n	800085e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	2203      	movs	r2, #3
 8000808:	409a      	lsls	r2, r3
 800080a:	0013      	movs	r3, r2
 800080c:	43da      	mvns	r2, r3
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	4013      	ands	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	68da      	ldr	r2, [r3, #12]
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	409a      	lsls	r2, r3
 800081e:	0013      	movs	r3, r2
 8000820:	693a      	ldr	r2, [r7, #16]
 8000822:	4313      	orrs	r3, r2
 8000824:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000832:	2201      	movs	r2, #1
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
 8000838:	0013      	movs	r3, r2
 800083a:	43da      	mvns	r2, r3
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	4013      	ands	r3, r2
 8000840:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	091b      	lsrs	r3, r3, #4
 8000848:	2201      	movs	r2, #1
 800084a:	401a      	ands	r2, r3
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	409a      	lsls	r2, r3
 8000850:	0013      	movs	r3, r2
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	4313      	orrs	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2203      	movs	r2, #3
 8000864:	4013      	ands	r3, r2
 8000866:	2b03      	cmp	r3, #3
 8000868:	d017      	beq.n	800089a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	2203      	movs	r2, #3
 8000876:	409a      	lsls	r2, r3
 8000878:	0013      	movs	r3, r2
 800087a:	43da      	mvns	r2, r3
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	4013      	ands	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	409a      	lsls	r2, r3
 800088c:	0013      	movs	r3, r2
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	4313      	orrs	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2203      	movs	r2, #3
 80008a0:	4013      	ands	r3, r2
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d123      	bne.n	80008ee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	08da      	lsrs	r2, r3, #3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3208      	adds	r2, #8
 80008ae:	0092      	lsls	r2, r2, #2
 80008b0:	58d3      	ldr	r3, [r2, r3]
 80008b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	2207      	movs	r2, #7
 80008b8:	4013      	ands	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	220f      	movs	r2, #15
 80008be:	409a      	lsls	r2, r3
 80008c0:	0013      	movs	r3, r2
 80008c2:	43da      	mvns	r2, r3
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	4013      	ands	r3, r2
 80008c8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	691a      	ldr	r2, [r3, #16]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	2107      	movs	r1, #7
 80008d2:	400b      	ands	r3, r1
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	409a      	lsls	r2, r3
 80008d8:	0013      	movs	r3, r2
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	4313      	orrs	r3, r2
 80008de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	08da      	lsrs	r2, r3, #3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3208      	adds	r2, #8
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	6939      	ldr	r1, [r7, #16]
 80008ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2203      	movs	r2, #3
 80008fa:	409a      	lsls	r2, r3
 80008fc:	0013      	movs	r3, r2
 80008fe:	43da      	mvns	r2, r3
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	4013      	ands	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2203      	movs	r2, #3
 800090c:	401a      	ands	r2, r3
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	409a      	lsls	r2, r3
 8000914:	0013      	movs	r3, r2
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4313      	orrs	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	23c0      	movs	r3, #192	@ 0xc0
 8000928:	029b      	lsls	r3, r3, #10
 800092a:	4013      	ands	r3, r2
 800092c:	d100      	bne.n	8000930 <HAL_GPIO_Init+0x17c>
 800092e:	e09a      	b.n	8000a66 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000930:	4b54      	ldr	r3, [pc, #336]	@ (8000a84 <HAL_GPIO_Init+0x2d0>)
 8000932:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000934:	4b53      	ldr	r3, [pc, #332]	@ (8000a84 <HAL_GPIO_Init+0x2d0>)
 8000936:	2101      	movs	r1, #1
 8000938:	430a      	orrs	r2, r1
 800093a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800093c:	4a52      	ldr	r2, [pc, #328]	@ (8000a88 <HAL_GPIO_Init+0x2d4>)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	089b      	lsrs	r3, r3, #2
 8000942:	3302      	adds	r3, #2
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	589b      	ldr	r3, [r3, r2]
 8000948:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	2203      	movs	r2, #3
 800094e:	4013      	ands	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	220f      	movs	r2, #15
 8000954:	409a      	lsls	r2, r3
 8000956:	0013      	movs	r3, r2
 8000958:	43da      	mvns	r2, r3
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	23a0      	movs	r3, #160	@ 0xa0
 8000964:	05db      	lsls	r3, r3, #23
 8000966:	429a      	cmp	r2, r3
 8000968:	d019      	beq.n	800099e <HAL_GPIO_Init+0x1ea>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a47      	ldr	r2, [pc, #284]	@ (8000a8c <HAL_GPIO_Init+0x2d8>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d013      	beq.n	800099a <HAL_GPIO_Init+0x1e6>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a46      	ldr	r2, [pc, #280]	@ (8000a90 <HAL_GPIO_Init+0x2dc>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d00d      	beq.n	8000996 <HAL_GPIO_Init+0x1e2>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a45      	ldr	r2, [pc, #276]	@ (8000a94 <HAL_GPIO_Init+0x2e0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d007      	beq.n	8000992 <HAL_GPIO_Init+0x1de>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a44      	ldr	r2, [pc, #272]	@ (8000a98 <HAL_GPIO_Init+0x2e4>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_GPIO_Init+0x1da>
 800098a:	2305      	movs	r3, #5
 800098c:	e008      	b.n	80009a0 <HAL_GPIO_Init+0x1ec>
 800098e:	2306      	movs	r3, #6
 8000990:	e006      	b.n	80009a0 <HAL_GPIO_Init+0x1ec>
 8000992:	2303      	movs	r3, #3
 8000994:	e004      	b.n	80009a0 <HAL_GPIO_Init+0x1ec>
 8000996:	2302      	movs	r3, #2
 8000998:	e002      	b.n	80009a0 <HAL_GPIO_Init+0x1ec>
 800099a:	2301      	movs	r3, #1
 800099c:	e000      	b.n	80009a0 <HAL_GPIO_Init+0x1ec>
 800099e:	2300      	movs	r3, #0
 80009a0:	697a      	ldr	r2, [r7, #20]
 80009a2:	2103      	movs	r1, #3
 80009a4:	400a      	ands	r2, r1
 80009a6:	0092      	lsls	r2, r2, #2
 80009a8:	4093      	lsls	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009b0:	4935      	ldr	r1, [pc, #212]	@ (8000a88 <HAL_GPIO_Init+0x2d4>)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	3302      	adds	r3, #2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009be:	4b37      	ldr	r3, [pc, #220]	@ (8000a9c <HAL_GPIO_Init+0x2e8>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	43da      	mvns	r2, r3
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685a      	ldr	r2, [r3, #4]
 80009d2:	2380      	movs	r3, #128	@ 0x80
 80009d4:	035b      	lsls	r3, r3, #13
 80009d6:	4013      	ands	r3, r2
 80009d8:	d003      	beq.n	80009e2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009e2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a9c <HAL_GPIO_Init+0x2e8>)
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80009e8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a9c <HAL_GPIO_Init+0x2e8>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	43da      	mvns	r2, r3
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	4013      	ands	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	2380      	movs	r3, #128	@ 0x80
 80009fe:	039b      	lsls	r3, r3, #14
 8000a00:	4013      	ands	r3, r2
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a0c:	4b23      	ldr	r3, [pc, #140]	@ (8000a9c <HAL_GPIO_Init+0x2e8>)
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000a12:	4b22      	ldr	r3, [pc, #136]	@ (8000a9c <HAL_GPIO_Init+0x2e8>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685a      	ldr	r2, [r3, #4]
 8000a26:	2380      	movs	r3, #128	@ 0x80
 8000a28:	029b      	lsls	r3, r3, #10
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	d003      	beq.n	8000a36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a36:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <HAL_GPIO_Init+0x2e8>)
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <HAL_GPIO_Init+0x2e8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	43da      	mvns	r2, r3
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	2380      	movs	r3, #128	@ 0x80
 8000a52:	025b      	lsls	r3, r3, #9
 8000a54:	4013      	ands	r3, r2
 8000a56:	d003      	beq.n	8000a60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_GPIO_Init+0x2e8>)
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	40da      	lsrs	r2, r3
 8000a74:	1e13      	subs	r3, r2, #0
 8000a76:	d000      	beq.n	8000a7a <HAL_GPIO_Init+0x2c6>
 8000a78:	e6a8      	b.n	80007cc <HAL_GPIO_Init+0x18>
  }
}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b006      	add	sp, #24
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010000 	.word	0x40010000
 8000a8c:	50000400 	.word	0x50000400
 8000a90:	50000800 	.word	0x50000800
 8000a94:	50000c00 	.word	0x50000c00
 8000a98:	50001c00 	.word	0x50001c00
 8000a9c:	40010400 	.word	0x40010400

08000aa0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	0008      	movs	r0, r1
 8000aaa:	0011      	movs	r1, r2
 8000aac:	1cbb      	adds	r3, r7, #2
 8000aae:	1c02      	adds	r2, r0, #0
 8000ab0:	801a      	strh	r2, [r3, #0]
 8000ab2:	1c7b      	adds	r3, r7, #1
 8000ab4:	1c0a      	adds	r2, r1, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ab8:	1c7b      	adds	r3, r7, #1
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d004      	beq.n	8000aca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ac0:	1cbb      	adds	r3, r7, #2
 8000ac2:	881a      	ldrh	r2, [r3, #0]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000ac8:	e003      	b.n	8000ad2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000aca:	1cbb      	adds	r3, r7, #2
 8000acc:	881a      	ldrh	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b002      	add	sp, #8
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000adc:	b5b0      	push	{r4, r5, r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f000 fbaf 	bl	800124e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000af0:	4bcf      	ldr	r3, [pc, #828]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	220c      	movs	r2, #12
 8000af6:	4013      	ands	r3, r2
 8000af8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000afa:	4bcd      	ldr	r3, [pc, #820]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000afc:	68da      	ldr	r2, [r3, #12]
 8000afe:	2380      	movs	r3, #128	@ 0x80
 8000b00:	025b      	lsls	r3, r3, #9
 8000b02:	4013      	ands	r3, r2
 8000b04:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	d100      	bne.n	8000b12 <HAL_RCC_OscConfig+0x36>
 8000b10:	e07e      	b.n	8000c10 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	2b08      	cmp	r3, #8
 8000b16:	d007      	beq.n	8000b28 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b18:	6a3b      	ldr	r3, [r7, #32]
 8000b1a:	2b0c      	cmp	r3, #12
 8000b1c:	d112      	bne.n	8000b44 <HAL_RCC_OscConfig+0x68>
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	2380      	movs	r3, #128	@ 0x80
 8000b22:	025b      	lsls	r3, r3, #9
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d10d      	bne.n	8000b44 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b28:	4bc1      	ldr	r3, [pc, #772]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	029b      	lsls	r3, r3, #10
 8000b30:	4013      	ands	r3, r2
 8000b32:	d100      	bne.n	8000b36 <HAL_RCC_OscConfig+0x5a>
 8000b34:	e06b      	b.n	8000c0e <HAL_RCC_OscConfig+0x132>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d167      	bne.n	8000c0e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	f000 fb85 	bl	800124e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	2380      	movs	r3, #128	@ 0x80
 8000b4a:	025b      	lsls	r3, r3, #9
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d107      	bne.n	8000b60 <HAL_RCC_OscConfig+0x84>
 8000b50:	4bb7      	ldr	r3, [pc, #732]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4bb6      	ldr	r3, [pc, #728]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000b56:	2180      	movs	r1, #128	@ 0x80
 8000b58:	0249      	lsls	r1, r1, #9
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	e027      	b.n	8000bb0 <HAL_RCC_OscConfig+0xd4>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	23a0      	movs	r3, #160	@ 0xa0
 8000b66:	02db      	lsls	r3, r3, #11
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d10e      	bne.n	8000b8a <HAL_RCC_OscConfig+0xae>
 8000b6c:	4bb0      	ldr	r3, [pc, #704]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4baf      	ldr	r3, [pc, #700]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000b72:	2180      	movs	r1, #128	@ 0x80
 8000b74:	02c9      	lsls	r1, r1, #11
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	4bad      	ldr	r3, [pc, #692]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4bac      	ldr	r3, [pc, #688]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000b80:	2180      	movs	r1, #128	@ 0x80
 8000b82:	0249      	lsls	r1, r1, #9
 8000b84:	430a      	orrs	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	e012      	b.n	8000bb0 <HAL_RCC_OscConfig+0xd4>
 8000b8a:	4ba9      	ldr	r3, [pc, #676]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4ba8      	ldr	r3, [pc, #672]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000b90:	49a8      	ldr	r1, [pc, #672]	@ (8000e34 <HAL_RCC_OscConfig+0x358>)
 8000b92:	400a      	ands	r2, r1
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	4ba6      	ldr	r3, [pc, #664]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	2380      	movs	r3, #128	@ 0x80
 8000b9c:	025b      	lsls	r3, r3, #9
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4ba2      	ldr	r3, [pc, #648]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4ba1      	ldr	r3, [pc, #644]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000baa:	49a3      	ldr	r1, [pc, #652]	@ (8000e38 <HAL_RCC_OscConfig+0x35c>)
 8000bac:	400a      	ands	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d015      	beq.n	8000be4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fd3e 	bl	8000638 <HAL_GetTick>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bc0:	e009      	b.n	8000bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc2:	f7ff fd39 	bl	8000638 <HAL_GetTick>
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2b64      	cmp	r3, #100	@ 0x64
 8000bce:	d902      	bls.n	8000bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	f000 fb3c 	bl	800124e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bd6:	4b96      	ldr	r3, [pc, #600]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	2380      	movs	r3, #128	@ 0x80
 8000bdc:	029b      	lsls	r3, r3, #10
 8000bde:	4013      	ands	r3, r2
 8000be0:	d0ef      	beq.n	8000bc2 <HAL_RCC_OscConfig+0xe6>
 8000be2:	e015      	b.n	8000c10 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be4:	f7ff fd28 	bl	8000638 <HAL_GetTick>
 8000be8:	0003      	movs	r3, r0
 8000bea:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000bec:	e008      	b.n	8000c00 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bee:	f7ff fd23 	bl	8000638 <HAL_GetTick>
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b64      	cmp	r3, #100	@ 0x64
 8000bfa:	d901      	bls.n	8000c00 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	e326      	b.n	800124e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c00:	4b8b      	ldr	r3, [pc, #556]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	2380      	movs	r3, #128	@ 0x80
 8000c06:	029b      	lsls	r3, r3, #10
 8000c08:	4013      	ands	r3, r2
 8000c0a:	d1f0      	bne.n	8000bee <HAL_RCC_OscConfig+0x112>
 8000c0c:	e000      	b.n	8000c10 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c0e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2202      	movs	r2, #2
 8000c16:	4013      	ands	r3, r2
 8000c18:	d100      	bne.n	8000c1c <HAL_RCC_OscConfig+0x140>
 8000c1a:	e08b      	b.n	8000d34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c22:	6a3b      	ldr	r3, [r7, #32]
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d005      	beq.n	8000c34 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	2b0c      	cmp	r3, #12
 8000c2c:	d13e      	bne.n	8000cac <HAL_RCC_OscConfig+0x1d0>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d13b      	bne.n	8000cac <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000c34:	4b7e      	ldr	r3, [pc, #504]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2204      	movs	r2, #4
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d004      	beq.n	8000c48 <HAL_RCC_OscConfig+0x16c>
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d101      	bne.n	8000c48 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e302      	b.n	800124e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c48:	4b79      	ldr	r3, [pc, #484]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	4a7b      	ldr	r2, [pc, #492]	@ (8000e3c <HAL_RCC_OscConfig+0x360>)
 8000c4e:	4013      	ands	r3, r2
 8000c50:	0019      	movs	r1, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	021a      	lsls	r2, r3, #8
 8000c58:	4b75      	ldr	r3, [pc, #468]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000c5e:	4b74      	ldr	r3, [pc, #464]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2209      	movs	r2, #9
 8000c64:	4393      	bics	r3, r2
 8000c66:	0019      	movs	r1, r3
 8000c68:	4b71      	ldr	r3, [pc, #452]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c70:	f000 fc40 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8000c74:	0001      	movs	r1, r0
 8000c76:	4b6e      	ldr	r3, [pc, #440]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	091b      	lsrs	r3, r3, #4
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	4013      	ands	r3, r2
 8000c80:	4a6f      	ldr	r2, [pc, #444]	@ (8000e40 <HAL_RCC_OscConfig+0x364>)
 8000c82:	5cd3      	ldrb	r3, [r2, r3]
 8000c84:	000a      	movs	r2, r1
 8000c86:	40da      	lsrs	r2, r3
 8000c88:	4b6e      	ldr	r3, [pc, #440]	@ (8000e44 <HAL_RCC_OscConfig+0x368>)
 8000c8a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000c8c:	4b6e      	ldr	r3, [pc, #440]	@ (8000e48 <HAL_RCC_OscConfig+0x36c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2513      	movs	r5, #19
 8000c92:	197c      	adds	r4, r7, r5
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff fc89 	bl	80005ac <HAL_InitTick>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000c9e:	197b      	adds	r3, r7, r5
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d046      	beq.n	8000d34 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000ca6:	197b      	adds	r3, r7, r5
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	e2d0      	b.n	800124e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d027      	beq.n	8000d02 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2209      	movs	r2, #9
 8000cb8:	4393      	bics	r3, r2
 8000cba:	0019      	movs	r1, r3
 8000cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fcb8 	bl	8000638 <HAL_GetTick>
 8000cc8:	0003      	movs	r3, r0
 8000cca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ccc:	e008      	b.n	8000ce0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cce:	f7ff fcb3 	bl	8000638 <HAL_GetTick>
 8000cd2:	0002      	movs	r2, r0
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d901      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e2b6      	b.n	800124e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ce0:	4b53      	ldr	r3, [pc, #332]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	d0f1      	beq.n	8000cce <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cea:	4b51      	ldr	r3, [pc, #324]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	4a53      	ldr	r2, [pc, #332]	@ (8000e3c <HAL_RCC_OscConfig+0x360>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	0019      	movs	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	021a      	lsls	r2, r3, #8
 8000cfa:	4b4d      	ldr	r3, [pc, #308]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	e018      	b.n	8000d34 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d02:	4b4b      	ldr	r3, [pc, #300]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4b4a      	ldr	r3, [pc, #296]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000d08:	2101      	movs	r1, #1
 8000d0a:	438a      	bics	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0e:	f7ff fc93 	bl	8000638 <HAL_GetTick>
 8000d12:	0003      	movs	r3, r0
 8000d14:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d18:	f7ff fc8e 	bl	8000638 <HAL_GetTick>
 8000d1c:	0002      	movs	r2, r0
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e291      	b.n	800124e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000d2a:	4b41      	ldr	r3, [pc, #260]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2204      	movs	r2, #4
 8000d30:	4013      	ands	r3, r2
 8000d32:	d1f1      	bne.n	8000d18 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2210      	movs	r2, #16
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	d100      	bne.n	8000d40 <HAL_RCC_OscConfig+0x264>
 8000d3e:	e0a1      	b.n	8000e84 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d40:	6a3b      	ldr	r3, [r7, #32]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d140      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d46:	4b3a      	ldr	r3, [pc, #232]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	2380      	movs	r3, #128	@ 0x80
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d005      	beq.n	8000d5e <HAL_RCC_OscConfig+0x282>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e277      	b.n	800124e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d5e:	4b34      	ldr	r3, [pc, #208]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a3a      	ldr	r2, [pc, #232]	@ (8000e4c <HAL_RCC_OscConfig+0x370>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	0019      	movs	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d6c:	4b30      	ldr	r3, [pc, #192]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d72:	4b2f      	ldr	r3, [pc, #188]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	0a19      	lsrs	r1, r3, #8
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	061a      	lsls	r2, r3, #24
 8000d80:	4b2b      	ldr	r3, [pc, #172]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000d82:	430a      	orrs	r2, r1
 8000d84:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8a:	0b5b      	lsrs	r3, r3, #13
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	2280      	movs	r2, #128	@ 0x80
 8000d90:	0212      	lsls	r2, r2, #8
 8000d92:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d94:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	400b      	ands	r3, r1
 8000d9e:	4928      	ldr	r1, [pc, #160]	@ (8000e40 <HAL_RCC_OscConfig+0x364>)
 8000da0:	5ccb      	ldrb	r3, [r1, r3]
 8000da2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000da4:	4b27      	ldr	r3, [pc, #156]	@ (8000e44 <HAL_RCC_OscConfig+0x368>)
 8000da6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000da8:	4b27      	ldr	r3, [pc, #156]	@ (8000e48 <HAL_RCC_OscConfig+0x36c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2513      	movs	r5, #19
 8000dae:	197c      	adds	r4, r7, r5
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff fbfb 	bl	80005ac <HAL_InitTick>
 8000db6:	0003      	movs	r3, r0
 8000db8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000dba:	197b      	adds	r3, r7, r5
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d060      	beq.n	8000e84 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8000dc2:	197b      	adds	r3, r7, r5
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	e242      	b.n	800124e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69db      	ldr	r3, [r3, #28]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d03f      	beq.n	8000e50 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dd0:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000dd6:	2180      	movs	r1, #128	@ 0x80
 8000dd8:	0049      	lsls	r1, r1, #1
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dde:	f7ff fc2b 	bl	8000638 <HAL_GetTick>
 8000de2:	0003      	movs	r3, r0
 8000de4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000de8:	f7ff fc26 	bl	8000638 <HAL_GetTick>
 8000dec:	0002      	movs	r2, r0
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e229      	b.n	800124e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	2380      	movs	r3, #128	@ 0x80
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	4013      	ands	r3, r2
 8000e04:	d0f0      	beq.n	8000de8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	4a10      	ldr	r2, [pc, #64]	@ (8000e4c <HAL_RCC_OscConfig+0x370>)
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	0019      	movs	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000e16:	430a      	orrs	r2, r1
 8000e18:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e1a:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	0a19      	lsrs	r1, r3, #8
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	061a      	lsls	r2, r3, #24
 8000e28:	4b01      	ldr	r3, [pc, #4]	@ (8000e30 <HAL_RCC_OscConfig+0x354>)
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	e029      	b.n	8000e84 <HAL_RCC_OscConfig+0x3a8>
 8000e30:	40021000 	.word	0x40021000
 8000e34:	fffeffff 	.word	0xfffeffff
 8000e38:	fffbffff 	.word	0xfffbffff
 8000e3c:	ffffe0ff 	.word	0xffffe0ff
 8000e40:	08001c08 	.word	0x08001c08
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e50:	4bbd      	ldr	r3, [pc, #756]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4bbc      	ldr	r3, [pc, #752]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000e56:	49bd      	ldr	r1, [pc, #756]	@ (800114c <HAL_RCC_OscConfig+0x670>)
 8000e58:	400a      	ands	r2, r1
 8000e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fbec 	bl	8000638 <HAL_GetTick>
 8000e60:	0003      	movs	r3, r0
 8000e62:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e66:	f7ff fbe7 	bl	8000638 <HAL_GetTick>
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e1ea      	b.n	800124e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e78:	4bb3      	ldr	r3, [pc, #716]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	2380      	movs	r3, #128	@ 0x80
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4013      	ands	r3, r2
 8000e82:	d1f0      	bne.n	8000e66 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2208      	movs	r2, #8
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d036      	beq.n	8000efc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d019      	beq.n	8000eca <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e96:	4bac      	ldr	r3, [pc, #688]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000e98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000e9a:	4bab      	ldr	r3, [pc, #684]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fbc9 	bl	8000638 <HAL_GetTick>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eac:	f7ff fbc4 	bl	8000638 <HAL_GetTick>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e1c7      	b.n	800124e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000ebe:	4ba2      	ldr	r3, [pc, #648]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d0f1      	beq.n	8000eac <HAL_RCC_OscConfig+0x3d0>
 8000ec8:	e018      	b.n	8000efc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eca:	4b9f      	ldr	r3, [pc, #636]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000ecc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000ece:	4b9e      	ldr	r3, [pc, #632]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	438a      	bics	r2, r1
 8000ed4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fbaf 	bl	8000638 <HAL_GetTick>
 8000eda:	0003      	movs	r3, r0
 8000edc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ee0:	f7ff fbaa 	bl	8000638 <HAL_GetTick>
 8000ee4:	0002      	movs	r2, r0
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e1ad      	b.n	800124e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ef2:	4b95      	ldr	r3, [pc, #596]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d1f1      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2204      	movs	r2, #4
 8000f02:	4013      	ands	r3, r2
 8000f04:	d100      	bne.n	8000f08 <HAL_RCC_OscConfig+0x42c>
 8000f06:	e0ae      	b.n	8001066 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f08:	2027      	movs	r0, #39	@ 0x27
 8000f0a:	183b      	adds	r3, r7, r0
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f10:	4b8d      	ldr	r3, [pc, #564]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f14:	2380      	movs	r3, #128	@ 0x80
 8000f16:	055b      	lsls	r3, r3, #21
 8000f18:	4013      	ands	r3, r2
 8000f1a:	d109      	bne.n	8000f30 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f1c:	4b8a      	ldr	r3, [pc, #552]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f20:	4b89      	ldr	r3, [pc, #548]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000f22:	2180      	movs	r1, #128	@ 0x80
 8000f24:	0549      	lsls	r1, r1, #21
 8000f26:	430a      	orrs	r2, r1
 8000f28:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8000f2a:	183b      	adds	r3, r7, r0
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f30:	4b87      	ldr	r3, [pc, #540]	@ (8001150 <HAL_RCC_OscConfig+0x674>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	2380      	movs	r3, #128	@ 0x80
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d11a      	bne.n	8000f72 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f3c:	4b84      	ldr	r3, [pc, #528]	@ (8001150 <HAL_RCC_OscConfig+0x674>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b83      	ldr	r3, [pc, #524]	@ (8001150 <HAL_RCC_OscConfig+0x674>)
 8000f42:	2180      	movs	r1, #128	@ 0x80
 8000f44:	0049      	lsls	r1, r1, #1
 8000f46:	430a      	orrs	r2, r1
 8000f48:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f4a:	f7ff fb75 	bl	8000638 <HAL_GetTick>
 8000f4e:	0003      	movs	r3, r0
 8000f50:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f54:	f7ff fb70 	bl	8000638 <HAL_GetTick>
 8000f58:	0002      	movs	r2, r0
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	@ 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e173      	b.n	800124e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f66:	4b7a      	ldr	r3, [pc, #488]	@ (8001150 <HAL_RCC_OscConfig+0x674>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	2380      	movs	r3, #128	@ 0x80
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689a      	ldr	r2, [r3, #8]
 8000f76:	2380      	movs	r3, #128	@ 0x80
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d107      	bne.n	8000f8e <HAL_RCC_OscConfig+0x4b2>
 8000f7e:	4b72      	ldr	r3, [pc, #456]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000f80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000f82:	4b71      	ldr	r3, [pc, #452]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000f84:	2180      	movs	r1, #128	@ 0x80
 8000f86:	0049      	lsls	r1, r1, #1
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	651a      	str	r2, [r3, #80]	@ 0x50
 8000f8c:	e031      	b.n	8000ff2 <HAL_RCC_OscConfig+0x516>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10c      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x4d4>
 8000f96:	4b6c      	ldr	r3, [pc, #432]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000f98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000f9a:	4b6b      	ldr	r3, [pc, #428]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000f9c:	496b      	ldr	r1, [pc, #428]	@ (800114c <HAL_RCC_OscConfig+0x670>)
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	651a      	str	r2, [r3, #80]	@ 0x50
 8000fa2:	4b69      	ldr	r3, [pc, #420]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000fa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fa6:	4b68      	ldr	r3, [pc, #416]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000fa8:	496a      	ldr	r1, [pc, #424]	@ (8001154 <HAL_RCC_OscConfig+0x678>)
 8000faa:	400a      	ands	r2, r1
 8000fac:	651a      	str	r2, [r3, #80]	@ 0x50
 8000fae:	e020      	b.n	8000ff2 <HAL_RCC_OscConfig+0x516>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	23a0      	movs	r3, #160	@ 0xa0
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d10e      	bne.n	8000fda <HAL_RCC_OscConfig+0x4fe>
 8000fbc:	4b62      	ldr	r3, [pc, #392]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000fbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fc0:	4b61      	ldr	r3, [pc, #388]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000fc2:	2180      	movs	r1, #128	@ 0x80
 8000fc4:	00c9      	lsls	r1, r1, #3
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	651a      	str	r2, [r3, #80]	@ 0x50
 8000fca:	4b5f      	ldr	r3, [pc, #380]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000fcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fce:	4b5e      	ldr	r3, [pc, #376]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000fd0:	2180      	movs	r1, #128	@ 0x80
 8000fd2:	0049      	lsls	r1, r1, #1
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	651a      	str	r2, [r3, #80]	@ 0x50
 8000fd8:	e00b      	b.n	8000ff2 <HAL_RCC_OscConfig+0x516>
 8000fda:	4b5b      	ldr	r3, [pc, #364]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000fdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fde:	4b5a      	ldr	r3, [pc, #360]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000fe0:	495a      	ldr	r1, [pc, #360]	@ (800114c <HAL_RCC_OscConfig+0x670>)
 8000fe2:	400a      	ands	r2, r1
 8000fe4:	651a      	str	r2, [r3, #80]	@ 0x50
 8000fe6:	4b58      	ldr	r3, [pc, #352]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000fe8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fea:	4b57      	ldr	r3, [pc, #348]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8000fec:	4959      	ldr	r1, [pc, #356]	@ (8001154 <HAL_RCC_OscConfig+0x678>)
 8000fee:	400a      	ands	r2, r1
 8000ff0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d015      	beq.n	8001026 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffa:	f7ff fb1d 	bl	8000638 <HAL_GetTick>
 8000ffe:	0003      	movs	r3, r0
 8001000:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001002:	e009      	b.n	8001018 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001004:	f7ff fb18 	bl	8000638 <HAL_GetTick>
 8001008:	0002      	movs	r2, r0
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	4a52      	ldr	r2, [pc, #328]	@ (8001158 <HAL_RCC_OscConfig+0x67c>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e11a      	b.n	800124e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001018:	4b4b      	ldr	r3, [pc, #300]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 800101a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4013      	ands	r3, r2
 8001022:	d0ef      	beq.n	8001004 <HAL_RCC_OscConfig+0x528>
 8001024:	e014      	b.n	8001050 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001026:	f7ff fb07 	bl	8000638 <HAL_GetTick>
 800102a:	0003      	movs	r3, r0
 800102c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800102e:	e009      	b.n	8001044 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001030:	f7ff fb02 	bl	8000638 <HAL_GetTick>
 8001034:	0002      	movs	r2, r0
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	4a47      	ldr	r2, [pc, #284]	@ (8001158 <HAL_RCC_OscConfig+0x67c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e104      	b.n	800124e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001044:	4b40      	ldr	r3, [pc, #256]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8001046:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4013      	ands	r3, r2
 800104e:	d1ef      	bne.n	8001030 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001050:	2327      	movs	r3, #39	@ 0x27
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d105      	bne.n	8001066 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800105a:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 800105c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800105e:	4b3a      	ldr	r3, [pc, #232]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8001060:	493e      	ldr	r1, [pc, #248]	@ (800115c <HAL_RCC_OscConfig+0x680>)
 8001062:	400a      	ands	r2, r1
 8001064:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2220      	movs	r2, #32
 800106c:	4013      	ands	r3, r2
 800106e:	d049      	beq.n	8001104 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d026      	beq.n	80010c6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001078:	4b33      	ldr	r3, [pc, #204]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	4b32      	ldr	r3, [pc, #200]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 800107e:	2101      	movs	r1, #1
 8001080:	430a      	orrs	r2, r1
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	4b30      	ldr	r3, [pc, #192]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8001086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001088:	4b2f      	ldr	r3, [pc, #188]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 800108a:	2101      	movs	r1, #1
 800108c:	430a      	orrs	r2, r1
 800108e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001090:	4b33      	ldr	r3, [pc, #204]	@ (8001160 <HAL_RCC_OscConfig+0x684>)
 8001092:	6a1a      	ldr	r2, [r3, #32]
 8001094:	4b32      	ldr	r3, [pc, #200]	@ (8001160 <HAL_RCC_OscConfig+0x684>)
 8001096:	2180      	movs	r1, #128	@ 0x80
 8001098:	0189      	lsls	r1, r1, #6
 800109a:	430a      	orrs	r2, r1
 800109c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff facb 	bl	8000638 <HAL_GetTick>
 80010a2:	0003      	movs	r3, r0
 80010a4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010a8:	f7ff fac6 	bl	8000638 <HAL_GetTick>
 80010ac:	0002      	movs	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e0c9      	b.n	800124e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80010ba:	4b23      	ldr	r3, [pc, #140]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2202      	movs	r2, #2
 80010c0:	4013      	ands	r3, r2
 80010c2:	d0f1      	beq.n	80010a8 <HAL_RCC_OscConfig+0x5cc>
 80010c4:	e01e      	b.n	8001104 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80010c6:	4b20      	ldr	r3, [pc, #128]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	438a      	bics	r2, r1
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	4b23      	ldr	r3, [pc, #140]	@ (8001160 <HAL_RCC_OscConfig+0x684>)
 80010d4:	6a1a      	ldr	r2, [r3, #32]
 80010d6:	4b22      	ldr	r3, [pc, #136]	@ (8001160 <HAL_RCC_OscConfig+0x684>)
 80010d8:	4922      	ldr	r1, [pc, #136]	@ (8001164 <HAL_RCC_OscConfig+0x688>)
 80010da:	400a      	ands	r2, r1
 80010dc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010de:	f7ff faab 	bl	8000638 <HAL_GetTick>
 80010e2:	0003      	movs	r3, r0
 80010e4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010e8:	f7ff faa6 	bl	8000638 <HAL_GetTick>
 80010ec:	0002      	movs	r2, r0
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e0a9      	b.n	800124e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80010fa:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2202      	movs	r2, #2
 8001100:	4013      	ands	r3, r2
 8001102:	d1f1      	bne.n	80010e8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	2b00      	cmp	r3, #0
 800110a:	d100      	bne.n	800110e <HAL_RCC_OscConfig+0x632>
 800110c:	e09e      	b.n	800124c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	2b0c      	cmp	r3, #12
 8001112:	d100      	bne.n	8001116 <HAL_RCC_OscConfig+0x63a>
 8001114:	e077      	b.n	8001206 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111a:	2b02      	cmp	r3, #2
 800111c:	d158      	bne.n	80011d0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <HAL_RCC_OscConfig+0x66c>)
 8001124:	4910      	ldr	r1, [pc, #64]	@ (8001168 <HAL_RCC_OscConfig+0x68c>)
 8001126:	400a      	ands	r2, r1
 8001128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fa85 	bl	8000638 <HAL_GetTick>
 800112e:	0003      	movs	r3, r0
 8001130:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001132:	e01b      	b.n	800116c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001134:	f7ff fa80 	bl	8000638 <HAL_GetTick>
 8001138:	0002      	movs	r2, r0
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d914      	bls.n	800116c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e083      	b.n	800124e <HAL_RCC_OscConfig+0x772>
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	40021000 	.word	0x40021000
 800114c:	fffffeff 	.word	0xfffffeff
 8001150:	40007000 	.word	0x40007000
 8001154:	fffffbff 	.word	0xfffffbff
 8001158:	00001388 	.word	0x00001388
 800115c:	efffffff 	.word	0xefffffff
 8001160:	40010000 	.word	0x40010000
 8001164:	ffffdfff 	.word	0xffffdfff
 8001168:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800116c:	4b3a      	ldr	r3, [pc, #232]	@ (8001258 <HAL_RCC_OscConfig+0x77c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	049b      	lsls	r3, r3, #18
 8001174:	4013      	ands	r3, r2
 8001176:	d1dd      	bne.n	8001134 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001178:	4b37      	ldr	r3, [pc, #220]	@ (8001258 <HAL_RCC_OscConfig+0x77c>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	4a37      	ldr	r2, [pc, #220]	@ (800125c <HAL_RCC_OscConfig+0x780>)
 800117e:	4013      	ands	r3, r2
 8001180:	0019      	movs	r1, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001190:	431a      	orrs	r2, r3
 8001192:	4b31      	ldr	r3, [pc, #196]	@ (8001258 <HAL_RCC_OscConfig+0x77c>)
 8001194:	430a      	orrs	r2, r1
 8001196:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001198:	4b2f      	ldr	r3, [pc, #188]	@ (8001258 <HAL_RCC_OscConfig+0x77c>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b2e      	ldr	r3, [pc, #184]	@ (8001258 <HAL_RCC_OscConfig+0x77c>)
 800119e:	2180      	movs	r1, #128	@ 0x80
 80011a0:	0449      	lsls	r1, r1, #17
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fa47 	bl	8000638 <HAL_GetTick>
 80011aa:	0003      	movs	r3, r0
 80011ac:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b0:	f7ff fa42 	bl	8000638 <HAL_GetTick>
 80011b4:	0002      	movs	r2, r0
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e045      	b.n	800124e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80011c2:	4b25      	ldr	r3, [pc, #148]	@ (8001258 <HAL_RCC_OscConfig+0x77c>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	2380      	movs	r3, #128	@ 0x80
 80011c8:	049b      	lsls	r3, r3, #18
 80011ca:	4013      	ands	r3, r2
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0x6d4>
 80011ce:	e03d      	b.n	800124c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d0:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <HAL_RCC_OscConfig+0x77c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <HAL_RCC_OscConfig+0x77c>)
 80011d6:	4922      	ldr	r1, [pc, #136]	@ (8001260 <HAL_RCC_OscConfig+0x784>)
 80011d8:	400a      	ands	r2, r1
 80011da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011dc:	f7ff fa2c 	bl	8000638 <HAL_GetTick>
 80011e0:	0003      	movs	r3, r0
 80011e2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011e6:	f7ff fa27 	bl	8000638 <HAL_GetTick>
 80011ea:	0002      	movs	r2, r0
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e02a      	b.n	800124e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80011f8:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <HAL_RCC_OscConfig+0x77c>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	@ 0x80
 80011fe:	049b      	lsls	r3, r3, #18
 8001200:	4013      	ands	r3, r2
 8001202:	d1f0      	bne.n	80011e6 <HAL_RCC_OscConfig+0x70a>
 8001204:	e022      	b.n	800124c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120a:	2b01      	cmp	r3, #1
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e01d      	b.n	800124e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_RCC_OscConfig+0x77c>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	2380      	movs	r3, #128	@ 0x80
 800121c:	025b      	lsls	r3, r3, #9
 800121e:	401a      	ands	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001224:	429a      	cmp	r2, r3
 8001226:	d10f      	bne.n	8001248 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001228:	69fa      	ldr	r2, [r7, #28]
 800122a:	23f0      	movs	r3, #240	@ 0xf0
 800122c:	039b      	lsls	r3, r3, #14
 800122e:	401a      	ands	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001234:	429a      	cmp	r2, r3
 8001236:	d107      	bne.n	8001248 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	23c0      	movs	r3, #192	@ 0xc0
 800123c:	041b      	lsls	r3, r3, #16
 800123e:	401a      	ands	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	0018      	movs	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	b00a      	add	sp, #40	@ 0x28
 8001254:	bdb0      	pop	{r4, r5, r7, pc}
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	40021000 	.word	0x40021000
 800125c:	ff02ffff 	.word	0xff02ffff
 8001260:	feffffff 	.word	0xfeffffff

08001264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001264:	b5b0      	push	{r4, r5, r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e128      	b.n	80014ca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001278:	4b96      	ldr	r3, [pc, #600]	@ (80014d4 <HAL_RCC_ClockConfig+0x270>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2201      	movs	r2, #1
 800127e:	4013      	ands	r3, r2
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d91e      	bls.n	80012c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	4b93      	ldr	r3, [pc, #588]	@ (80014d4 <HAL_RCC_ClockConfig+0x270>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	4393      	bics	r3, r2
 800128e:	0019      	movs	r1, r3
 8001290:	4b90      	ldr	r3, [pc, #576]	@ (80014d4 <HAL_RCC_ClockConfig+0x270>)
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001298:	f7ff f9ce 	bl	8000638 <HAL_GetTick>
 800129c:	0003      	movs	r3, r0
 800129e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a0:	e009      	b.n	80012b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a2:	f7ff f9c9 	bl	8000638 <HAL_GetTick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4a8a      	ldr	r2, [pc, #552]	@ (80014d8 <HAL_RCC_ClockConfig+0x274>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e109      	b.n	80014ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b6:	4b87      	ldr	r3, [pc, #540]	@ (80014d4 <HAL_RCC_ClockConfig+0x270>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4013      	ands	r3, r2
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d1ee      	bne.n	80012a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2202      	movs	r2, #2
 80012ca:	4013      	ands	r3, r2
 80012cc:	d009      	beq.n	80012e2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ce:	4b83      	ldr	r3, [pc, #524]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	22f0      	movs	r2, #240	@ 0xf0
 80012d4:	4393      	bics	r3, r2
 80012d6:	0019      	movs	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	4b7f      	ldr	r3, [pc, #508]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 80012de:	430a      	orrs	r2, r1
 80012e0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2201      	movs	r2, #1
 80012e8:	4013      	ands	r3, r2
 80012ea:	d100      	bne.n	80012ee <HAL_RCC_ClockConfig+0x8a>
 80012ec:	e089      	b.n	8001402 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d107      	bne.n	8001306 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012f6:	4b79      	ldr	r3, [pc, #484]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	2380      	movs	r3, #128	@ 0x80
 80012fc:	029b      	lsls	r3, r3, #10
 80012fe:	4013      	ands	r3, r2
 8001300:	d120      	bne.n	8001344 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e0e1      	b.n	80014ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b03      	cmp	r3, #3
 800130c:	d107      	bne.n	800131e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800130e:	4b73      	ldr	r3, [pc, #460]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	2380      	movs	r3, #128	@ 0x80
 8001314:	049b      	lsls	r3, r3, #18
 8001316:	4013      	ands	r3, r2
 8001318:	d114      	bne.n	8001344 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e0d5      	b.n	80014ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d106      	bne.n	8001334 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001326:	4b6d      	ldr	r3, [pc, #436]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2204      	movs	r2, #4
 800132c:	4013      	ands	r3, r2
 800132e:	d109      	bne.n	8001344 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0ca      	b.n	80014ca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001334:	4b69      	ldr	r3, [pc, #420]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2380      	movs	r3, #128	@ 0x80
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4013      	ands	r3, r2
 800133e:	d101      	bne.n	8001344 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0c2      	b.n	80014ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001344:	4b65      	ldr	r3, [pc, #404]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2203      	movs	r2, #3
 800134a:	4393      	bics	r3, r2
 800134c:	0019      	movs	r1, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4b62      	ldr	r3, [pc, #392]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 8001354:	430a      	orrs	r2, r1
 8001356:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001358:	f7ff f96e 	bl	8000638 <HAL_GetTick>
 800135c:	0003      	movs	r3, r0
 800135e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d111      	bne.n	800138c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001368:	e009      	b.n	800137e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800136a:	f7ff f965 	bl	8000638 <HAL_GetTick>
 800136e:	0002      	movs	r2, r0
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	4a58      	ldr	r2, [pc, #352]	@ (80014d8 <HAL_RCC_ClockConfig+0x274>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e0a5      	b.n	80014ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800137e:	4b57      	ldr	r3, [pc, #348]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	220c      	movs	r2, #12
 8001384:	4013      	ands	r3, r2
 8001386:	2b08      	cmp	r3, #8
 8001388:	d1ef      	bne.n	800136a <HAL_RCC_ClockConfig+0x106>
 800138a:	e03a      	b.n	8001402 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b03      	cmp	r3, #3
 8001392:	d111      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001394:	e009      	b.n	80013aa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001396:	f7ff f94f 	bl	8000638 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	4a4d      	ldr	r2, [pc, #308]	@ (80014d8 <HAL_RCC_ClockConfig+0x274>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e08f      	b.n	80014ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013aa:	4b4c      	ldr	r3, [pc, #304]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	220c      	movs	r2, #12
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d1ef      	bne.n	8001396 <HAL_RCC_ClockConfig+0x132>
 80013b6:	e024      	b.n	8001402 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d11b      	bne.n	80013f8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80013c0:	e009      	b.n	80013d6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c2:	f7ff f939 	bl	8000638 <HAL_GetTick>
 80013c6:	0002      	movs	r2, r0
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	4a42      	ldr	r2, [pc, #264]	@ (80014d8 <HAL_RCC_ClockConfig+0x274>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e079      	b.n	80014ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80013d6:	4b41      	ldr	r3, [pc, #260]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	220c      	movs	r2, #12
 80013dc:	4013      	ands	r3, r2
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d1ef      	bne.n	80013c2 <HAL_RCC_ClockConfig+0x15e>
 80013e2:	e00e      	b.n	8001402 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e4:	f7ff f928 	bl	8000638 <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	4a3a      	ldr	r2, [pc, #232]	@ (80014d8 <HAL_RCC_ClockConfig+0x274>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e068      	b.n	80014ca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80013f8:	4b38      	ldr	r3, [pc, #224]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	220c      	movs	r2, #12
 80013fe:	4013      	ands	r3, r2
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001402:	4b34      	ldr	r3, [pc, #208]	@ (80014d4 <HAL_RCC_ClockConfig+0x270>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2201      	movs	r2, #1
 8001408:	4013      	ands	r3, r2
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	d21e      	bcs.n	800144e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001410:	4b30      	ldr	r3, [pc, #192]	@ (80014d4 <HAL_RCC_ClockConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	4393      	bics	r3, r2
 8001418:	0019      	movs	r1, r3
 800141a:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <HAL_RCC_ClockConfig+0x270>)
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001422:	f7ff f909 	bl	8000638 <HAL_GetTick>
 8001426:	0003      	movs	r3, r0
 8001428:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	e009      	b.n	8001440 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142c:	f7ff f904 	bl	8000638 <HAL_GetTick>
 8001430:	0002      	movs	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	4a28      	ldr	r2, [pc, #160]	@ (80014d8 <HAL_RCC_ClockConfig+0x274>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e044      	b.n	80014ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001440:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <HAL_RCC_ClockConfig+0x270>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	4013      	ands	r3, r2
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d1ee      	bne.n	800142c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2204      	movs	r2, #4
 8001454:	4013      	ands	r3, r2
 8001456:	d009      	beq.n	800146c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001458:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4a20      	ldr	r2, [pc, #128]	@ (80014e0 <HAL_RCC_ClockConfig+0x27c>)
 800145e:	4013      	ands	r3, r2
 8001460:	0019      	movs	r1, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68da      	ldr	r2, [r3, #12]
 8001466:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 8001468:	430a      	orrs	r2, r1
 800146a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2208      	movs	r2, #8
 8001472:	4013      	ands	r3, r2
 8001474:	d00a      	beq.n	800148c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001476:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	4a1a      	ldr	r2, [pc, #104]	@ (80014e4 <HAL_RCC_ClockConfig+0x280>)
 800147c:	4013      	ands	r3, r2
 800147e:	0019      	movs	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	00da      	lsls	r2, r3, #3
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 8001488:	430a      	orrs	r2, r1
 800148a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800148c:	f000 f832 	bl	80014f4 <HAL_RCC_GetSysClockFreq>
 8001490:	0001      	movs	r1, r0
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_RCC_ClockConfig+0x278>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	091b      	lsrs	r3, r3, #4
 8001498:	220f      	movs	r2, #15
 800149a:	4013      	ands	r3, r2
 800149c:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <HAL_RCC_ClockConfig+0x284>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	000a      	movs	r2, r1
 80014a2:	40da      	lsrs	r2, r3
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <HAL_RCC_ClockConfig+0x288>)
 80014a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <HAL_RCC_ClockConfig+0x28c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	250b      	movs	r5, #11
 80014ae:	197c      	adds	r4, r7, r5
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff f87b 	bl	80005ac <HAL_InitTick>
 80014b6:	0003      	movs	r3, r0
 80014b8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80014ba:	197b      	adds	r3, r7, r5
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80014c2:	197b      	adds	r3, r7, r5
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	e000      	b.n	80014ca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b004      	add	sp, #16
 80014d0:	bdb0      	pop	{r4, r5, r7, pc}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	40022000 	.word	0x40022000
 80014d8:	00001388 	.word	0x00001388
 80014dc:	40021000 	.word	0x40021000
 80014e0:	fffff8ff 	.word	0xfffff8ff
 80014e4:	ffffc7ff 	.word	0xffffc7ff
 80014e8:	08001c08 	.word	0x08001c08
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80014fa:	4b3c      	ldr	r3, [pc, #240]	@ (80015ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	220c      	movs	r2, #12
 8001504:	4013      	ands	r3, r2
 8001506:	2b0c      	cmp	r3, #12
 8001508:	d013      	beq.n	8001532 <HAL_RCC_GetSysClockFreq+0x3e>
 800150a:	d85c      	bhi.n	80015c6 <HAL_RCC_GetSysClockFreq+0xd2>
 800150c:	2b04      	cmp	r3, #4
 800150e:	d002      	beq.n	8001516 <HAL_RCC_GetSysClockFreq+0x22>
 8001510:	2b08      	cmp	r3, #8
 8001512:	d00b      	beq.n	800152c <HAL_RCC_GetSysClockFreq+0x38>
 8001514:	e057      	b.n	80015c6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001516:	4b35      	ldr	r3, [pc, #212]	@ (80015ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2210      	movs	r2, #16
 800151c:	4013      	ands	r3, r2
 800151e:	d002      	beq.n	8001526 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001520:	4b33      	ldr	r3, [pc, #204]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001522:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001524:	e05d      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001526:	4b33      	ldr	r3, [pc, #204]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001528:	613b      	str	r3, [r7, #16]
      break;
 800152a:	e05a      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800152c:	4b32      	ldr	r3, [pc, #200]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800152e:	613b      	str	r3, [r7, #16]
      break;
 8001530:	e057      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	0c9b      	lsrs	r3, r3, #18
 8001536:	220f      	movs	r2, #15
 8001538:	4013      	ands	r3, r2
 800153a:	4a30      	ldr	r2, [pc, #192]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x108>)
 800153c:	5cd3      	ldrb	r3, [r2, r3]
 800153e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	0d9b      	lsrs	r3, r3, #22
 8001544:	2203      	movs	r2, #3
 8001546:	4013      	ands	r3, r2
 8001548:	3301      	adds	r3, #1
 800154a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800154c:	4b27      	ldr	r3, [pc, #156]	@ (80015ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	025b      	lsls	r3, r3, #9
 8001554:	4013      	ands	r3, r2
 8001556:	d00f      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	000a      	movs	r2, r1
 800155c:	0152      	lsls	r2, r2, #5
 800155e:	1a52      	subs	r2, r2, r1
 8001560:	0193      	lsls	r3, r2, #6
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	185b      	adds	r3, r3, r1
 8001568:	025b      	lsls	r3, r3, #9
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	0018      	movs	r0, r3
 800156e:	f7fe fdcb 	bl	8000108 <__udivsi3>
 8001572:	0003      	movs	r3, r0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e023      	b.n	80015c0 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001578:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2210      	movs	r2, #16
 800157e:	4013      	ands	r3, r2
 8001580:	d00f      	beq.n	80015a2 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001582:	68b9      	ldr	r1, [r7, #8]
 8001584:	000a      	movs	r2, r1
 8001586:	0152      	lsls	r2, r2, #5
 8001588:	1a52      	subs	r2, r2, r1
 800158a:	0193      	lsls	r3, r2, #6
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	185b      	adds	r3, r3, r1
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	0018      	movs	r0, r3
 8001598:	f7fe fdb6 	bl	8000108 <__udivsi3>
 800159c:	0003      	movs	r3, r0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e00e      	b.n	80015c0 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	000a      	movs	r2, r1
 80015a6:	0152      	lsls	r2, r2, #5
 80015a8:	1a52      	subs	r2, r2, r1
 80015aa:	0193      	lsls	r3, r2, #6
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	185b      	adds	r3, r3, r1
 80015b2:	029b      	lsls	r3, r3, #10
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	0018      	movs	r0, r3
 80015b8:	f7fe fda6 	bl	8000108 <__udivsi3>
 80015bc:	0003      	movs	r3, r0
 80015be:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	613b      	str	r3, [r7, #16]
      break;
 80015c4:	e00d      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	0b5b      	lsrs	r3, r3, #13
 80015cc:	2207      	movs	r2, #7
 80015ce:	4013      	ands	r3, r2
 80015d0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	2280      	movs	r2, #128	@ 0x80
 80015d8:	0212      	lsls	r2, r2, #8
 80015da:	409a      	lsls	r2, r3
 80015dc:	0013      	movs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
      break;
 80015e0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015e2:	693b      	ldr	r3, [r7, #16]
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b006      	add	sp, #24
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	003d0900 	.word	0x003d0900
 80015f4:	00f42400 	.word	0x00f42400
 80015f8:	007a1200 	.word	0x007a1200
 80015fc:	08001c18 	.word	0x08001c18

08001600 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e083      	b.n	800171a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	2382      	movs	r3, #130	@ 0x82
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	429a      	cmp	r2, r3
 8001624:	d009      	beq.n	800163a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
 800162c:	e005      	b.n	800163a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2251      	movs	r2, #81	@ 0x51
 8001644:	5c9b      	ldrb	r3, [r3, r2]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b00      	cmp	r3, #0
 800164a:	d107      	bne.n	800165c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2250      	movs	r2, #80	@ 0x50
 8001650:	2100      	movs	r1, #0
 8001652:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	0018      	movs	r0, r3
 8001658:	f7fe fefc 	bl	8000454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2251      	movs	r2, #81	@ 0x51
 8001660:	2102      	movs	r1, #2
 8001662:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2140      	movs	r1, #64	@ 0x40
 8001670:	438a      	bics	r2, r1
 8001672:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	2382      	movs	r3, #130	@ 0x82
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	401a      	ands	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6899      	ldr	r1, [r3, #8]
 8001682:	2384      	movs	r3, #132	@ 0x84
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	400b      	ands	r3, r1
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68d9      	ldr	r1, [r3, #12]
 800168e:	2380      	movs	r3, #128	@ 0x80
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	400b      	ands	r3, r1
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	2102      	movs	r1, #2
 800169c:	400b      	ands	r3, r1
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	2101      	movs	r1, #1
 80016a6:	400b      	ands	r3, r1
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6999      	ldr	r1, [r3, #24]
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	400b      	ands	r3, r1
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	2138      	movs	r1, #56	@ 0x38
 80016bc:	400b      	ands	r3, r1
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	2180      	movs	r1, #128	@ 0x80
 80016c6:	400b      	ands	r3, r1
 80016c8:	431a      	orrs	r2, r3
 80016ca:	0011      	movs	r1, r2
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016d0:	2380      	movs	r3, #128	@ 0x80
 80016d2:	019b      	lsls	r3, r3, #6
 80016d4:	401a      	ands	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	0c1b      	lsrs	r3, r3, #16
 80016e4:	2204      	movs	r2, #4
 80016e6:	4013      	ands	r3, r2
 80016e8:	0019      	movs	r1, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	2210      	movs	r2, #16
 80016f0:	401a      	ands	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	69da      	ldr	r2, [r3, #28]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4907      	ldr	r1, [pc, #28]	@ (8001724 <HAL_SPI_Init+0x124>)
 8001706:	400a      	ands	r2, r1
 8001708:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2251      	movs	r2, #81	@ 0x51
 8001714:	2101      	movs	r1, #1
 8001716:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	fffff7ff 	.word	0xfffff7ff

08001728 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	1dbb      	adds	r3, r7, #6
 8001736:	801a      	strh	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001738:	f7fe ff7e 	bl	8000638 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001740:	231a      	movs	r3, #26
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	1dba      	adds	r2, r7, #6
 8001746:	8812      	ldrh	r2, [r2, #0]
 8001748:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2251      	movs	r2, #81	@ 0x51
 800174e:	5c9b      	ldrb	r3, [r3, r2]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b01      	cmp	r3, #1
 8001754:	d001      	beq.n	800175a <HAL_SPI_Transmit+0x32>
  {
    return HAL_BUSY;
 8001756:	2302      	movs	r3, #2
 8001758:	e132      	b.n	80019c0 <HAL_SPI_Transmit+0x298>
  }

  if ((pData == NULL) || (Size == 0U))
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_SPI_Transmit+0x40>
 8001760:	1dbb      	adds	r3, r7, #6
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_SPI_Transmit+0x44>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e129      	b.n	80019c0 <HAL_SPI_Transmit+0x298>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2250      	movs	r2, #80	@ 0x50
 8001770:	5c9b      	ldrb	r3, [r3, r2]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_SPI_Transmit+0x52>
 8001776:	2302      	movs	r3, #2
 8001778:	e122      	b.n	80019c0 <HAL_SPI_Transmit+0x298>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2250      	movs	r2, #80	@ 0x50
 800177e:	2101      	movs	r1, #1
 8001780:	5499      	strb	r1, [r3, r2]

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2251      	movs	r2, #81	@ 0x51
 8001786:	2103      	movs	r1, #3
 8001788:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1dba      	adds	r2, r7, #6
 800179a:	8812      	ldrh	r2, [r2, #0]
 800179c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1dba      	adds	r2, r7, #6
 80017a2:	8812      	ldrh	r2, [r2, #0]
 80017a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	2380      	movs	r3, #128	@ 0x80
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d110      	bne.n	80017f2 <HAL_SPI_Transmit+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2140      	movs	r1, #64	@ 0x40
 80017dc:	438a      	bics	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2180      	movs	r1, #128	@ 0x80
 80017ec:	01c9      	lsls	r1, r1, #7
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2240      	movs	r2, #64	@ 0x40
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b40      	cmp	r3, #64	@ 0x40
 80017fe:	d007      	beq.n	8001810 <HAL_SPI_Transmit+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2140      	movs	r1, #64	@ 0x40
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	2380      	movs	r3, #128	@ 0x80
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	429a      	cmp	r2, r3
 800181a:	d153      	bne.n	80018c4 <HAL_SPI_Transmit+0x19c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d004      	beq.n	800182e <HAL_SPI_Transmit+0x106>
 8001824:	231a      	movs	r3, #26
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d144      	bne.n	80018b8 <HAL_SPI_Transmit+0x190>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	881a      	ldrh	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	1c9a      	adds	r2, r3, #2
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001848:	b29b      	uxth	r3, r3
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001852:	e031      	b.n	80018b8 <HAL_SPI_Transmit+0x190>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2202      	movs	r2, #2
 800185c:	4013      	ands	r3, r2
 800185e:	2b02      	cmp	r3, #2
 8001860:	d112      	bne.n	8001888 <HAL_SPI_Transmit+0x160>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	881a      	ldrh	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	1c9a      	adds	r2, r3, #2
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001886:	e017      	b.n	80018b8 <HAL_SPI_Transmit+0x190>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001888:	f7fe fed6 	bl	8000638 <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d802      	bhi.n	800189e <HAL_SPI_Transmit+0x176>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	d102      	bne.n	80018a4 <HAL_SPI_Transmit+0x17c>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_SPI_Transmit+0x190>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2251      	movs	r2, #81	@ 0x51
 80018a8:	2101      	movs	r1, #1
 80018aa:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2250      	movs	r2, #80	@ 0x50
 80018b0:	2100      	movs	r1, #0
 80018b2:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e083      	b.n	80019c0 <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1c8      	bne.n	8001854 <HAL_SPI_Transmit+0x12c>
 80018c2:	e054      	b.n	800196e <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <HAL_SPI_Transmit+0x1ae>
 80018cc:	231a      	movs	r3, #26
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d146      	bne.n	8001964 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	330c      	adds	r3, #12
 80018e0:	7812      	ldrb	r2, [r2, #0]
 80018e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80018fc:	e032      	b.n	8001964 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2202      	movs	r2, #2
 8001906:	4013      	ands	r3, r2
 8001908:	2b02      	cmp	r3, #2
 800190a:	d113      	bne.n	8001934 <HAL_SPI_Transmit+0x20c>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	330c      	adds	r3, #12
 8001916:	7812      	ldrb	r2, [r2, #0]
 8001918:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001928:	b29b      	uxth	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001932:	e017      	b.n	8001964 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001934:	f7fe fe80 	bl	8000638 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d802      	bhi.n	800194a <HAL_SPI_Transmit+0x222>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	3301      	adds	r3, #1
 8001948:	d102      	bne.n	8001950 <HAL_SPI_Transmit+0x228>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d109      	bne.n	8001964 <HAL_SPI_Transmit+0x23c>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2251      	movs	r2, #81	@ 0x51
 8001954:	2101      	movs	r1, #1
 8001956:	5499      	strb	r1, [r3, r2]
          __HAL_UNLOCK(hspi);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2250      	movs	r2, #80	@ 0x50
 800195c:	2100      	movs	r1, #0
 800195e:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e02d      	b.n	80019c0 <HAL_SPI_Transmit+0x298>
    while (hspi->TxXferCount > 0U)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001968:	b29b      	uxth	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1c7      	bne.n	80018fe <HAL_SPI_Transmit+0x1d6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	6839      	ldr	r1, [r7, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	0018      	movs	r0, r3
 8001976:	f000 f8b5 	bl	8001ae4 <SPI_EndRxTxTransaction>
 800197a:	1e03      	subs	r3, r0, #0
 800197c:	d002      	beq.n	8001984 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2220      	movs	r2, #32
 8001982:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10a      	bne.n	80019a2 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2251      	movs	r2, #81	@ 0x51
 80019a6:	2101      	movs	r1, #1
 80019a8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2250      	movs	r2, #80	@ 0x50
 80019ae:	2100      	movs	r1, #0
 80019b0:	5499      	strb	r1, [r3, r2]

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_SPI_Transmit+0x296>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_SPI_Transmit+0x298>
  }
  else
  {
    return HAL_OK;
 80019be:	2300      	movs	r3, #0
  }
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b008      	add	sp, #32
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	603b      	str	r3, [r7, #0]
 80019d4:	1dfb      	adds	r3, r7, #7
 80019d6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80019d8:	f7fe fe2e 	bl	8000638 <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	18d3      	adds	r3, r2, r3
 80019e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80019e8:	f7fe fe26 	bl	8000638 <HAL_GetTick>
 80019ec:	0003      	movs	r3, r0
 80019ee:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80019f0:	4b3a      	ldr	r3, [pc, #232]	@ (8001adc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	015b      	lsls	r3, r3, #5
 80019f6:	0d1b      	lsrs	r3, r3, #20
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	4353      	muls	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80019fe:	e059      	b.n	8001ab4 <SPI_WaitFlagStateUntilTimeout+0xec>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	d056      	beq.n	8001ab4 <SPI_WaitFlagStateUntilTimeout+0xec>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001a06:	f7fe fe17 	bl	8000638 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d902      	bls.n	8001a1c <SPI_WaitFlagStateUntilTimeout+0x54>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d142      	bne.n	8001aa2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	21e0      	movs	r1, #224	@ 0xe0
 8001a28:	438a      	bics	r2, r1
 8001a2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	2382      	movs	r3, #130	@ 0x82
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d113      	bne.n	8001a60 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	2380      	movs	r3, #128	@ 0x80
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d005      	beq.n	8001a50 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	2380      	movs	r3, #128	@ 0x80
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d107      	bne.n	8001a60 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2140      	movs	r1, #64	@ 0x40
 8001a5c:	438a      	bics	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	019b      	lsls	r3, r3, #6
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d110      	bne.n	8001a8e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	491a      	ldr	r1, [pc, #104]	@ (8001ae0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001a78:	400a      	ands	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2180      	movs	r1, #128	@ 0x80
 8001a88:	0189      	lsls	r1, r1, #6
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2251      	movs	r2, #81	@ 0x51
 8001a92:	2101      	movs	r1, #1
 8001a94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2250      	movs	r2, #80	@ 0x50
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e018      	b.n	8001ad4 <SPI_WaitFlagStateUntilTimeout+0x10c>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <SPI_WaitFlagStateUntilTimeout+0xe6>
      {
        tmp_timeout = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	e002      	b.n	8001ab4 <SPI_WaitFlagStateUntilTimeout+0xec>
      }
      else
      {
        count--;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	4013      	ands	r3, r2
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	425a      	negs	r2, r3
 8001ac4:	4153      	adcs	r3, r2
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	001a      	movs	r2, r3
 8001aca:	1dfb      	adds	r3, r7, #7
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d196      	bne.n	8001a00 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b008      	add	sp, #32
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	ffffdfff 	.word	0xffffdfff

08001ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	0013      	movs	r3, r2
 8001afa:	2201      	movs	r2, #1
 8001afc:	2102      	movs	r1, #2
 8001afe:	f7ff ff63 	bl	80019c8 <SPI_WaitFlagStateUntilTimeout>
 8001b02:	1e03      	subs	r3, r0, #0
 8001b04:	d007      	beq.n	8001b16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e037      	b.n	8001b86 <SPI_EndRxTxTransaction+0xa2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001b16:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <SPI_EndRxTxTransaction+0xac>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	491e      	ldr	r1, [pc, #120]	@ (8001b94 <SPI_EndRxTxTransaction+0xb0>)
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f7fe faf3 	bl	8000108 <__udivsi3>
 8001b22:	0003      	movs	r3, r0
 8001b24:	001a      	movs	r2, r3
 8001b26:	0013      	movs	r3, r2
 8001b28:	015b      	lsls	r3, r3, #5
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	189b      	adds	r3, r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	2382      	movs	r3, #130	@ 0x82
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d112      	bne.n	8001b66 <SPI_EndRxTxTransaction+0x82>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	0013      	movs	r3, r2
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2180      	movs	r1, #128	@ 0x80
 8001b4e:	f7ff ff3b 	bl	80019c8 <SPI_WaitFlagStateUntilTimeout>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d016      	beq.n	8001b84 <SPI_EndRxTxTransaction+0xa0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e00f      	b.n	8001b86 <SPI_EndRxTxTransaction+0xa2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00a      	beq.n	8001b82 <SPI_EndRxTxTransaction+0x9e>
      {
        break;
      }
      count--;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2280      	movs	r2, #128	@ 0x80
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b80      	cmp	r3, #128	@ 0x80
 8001b7e:	d0f2      	beq.n	8001b66 <SPI_EndRxTxTransaction+0x82>
 8001b80:	e000      	b.n	8001b84 <SPI_EndRxTxTransaction+0xa0>
        break;
 8001b82:	46c0      	nop			@ (mov r8, r8)
  }

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b006      	add	sp, #24
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	46c0      	nop			@ (mov r8, r8)
 8001b90:	20000000 	.word	0x20000000
 8001b94:	016e3600 	.word	0x016e3600

08001b98 <memset>:
 8001b98:	0003      	movs	r3, r0
 8001b9a:	1882      	adds	r2, r0, r2
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d100      	bne.n	8001ba2 <memset+0xa>
 8001ba0:	4770      	bx	lr
 8001ba2:	7019      	strb	r1, [r3, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	e7f9      	b.n	8001b9c <memset+0x4>

08001ba8 <__libc_init_array>:
 8001ba8:	b570      	push	{r4, r5, r6, lr}
 8001baa:	2600      	movs	r6, #0
 8001bac:	4c0c      	ldr	r4, [pc, #48]	@ (8001be0 <__libc_init_array+0x38>)
 8001bae:	4d0d      	ldr	r5, [pc, #52]	@ (8001be4 <__libc_init_array+0x3c>)
 8001bb0:	1b64      	subs	r4, r4, r5
 8001bb2:	10a4      	asrs	r4, r4, #2
 8001bb4:	42a6      	cmp	r6, r4
 8001bb6:	d109      	bne.n	8001bcc <__libc_init_array+0x24>
 8001bb8:	2600      	movs	r6, #0
 8001bba:	f000 f819 	bl	8001bf0 <_init>
 8001bbe:	4c0a      	ldr	r4, [pc, #40]	@ (8001be8 <__libc_init_array+0x40>)
 8001bc0:	4d0a      	ldr	r5, [pc, #40]	@ (8001bec <__libc_init_array+0x44>)
 8001bc2:	1b64      	subs	r4, r4, r5
 8001bc4:	10a4      	asrs	r4, r4, #2
 8001bc6:	42a6      	cmp	r6, r4
 8001bc8:	d105      	bne.n	8001bd6 <__libc_init_array+0x2e>
 8001bca:	bd70      	pop	{r4, r5, r6, pc}
 8001bcc:	00b3      	lsls	r3, r6, #2
 8001bce:	58eb      	ldr	r3, [r5, r3]
 8001bd0:	4798      	blx	r3
 8001bd2:	3601      	adds	r6, #1
 8001bd4:	e7ee      	b.n	8001bb4 <__libc_init_array+0xc>
 8001bd6:	00b3      	lsls	r3, r6, #2
 8001bd8:	58eb      	ldr	r3, [r5, r3]
 8001bda:	4798      	blx	r3
 8001bdc:	3601      	adds	r6, #1
 8001bde:	e7f2      	b.n	8001bc6 <__libc_init_array+0x1e>
 8001be0:	08001c24 	.word	0x08001c24
 8001be4:	08001c24 	.word	0x08001c24
 8001be8:	08001c28 	.word	0x08001c28
 8001bec:	08001c24 	.word	0x08001c24

08001bf0 <_init>:
 8001bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bf6:	bc08      	pop	{r3}
 8001bf8:	469e      	mov	lr, r3
 8001bfa:	4770      	bx	lr

08001bfc <_fini>:
 8001bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c02:	bc08      	pop	{r3}
 8001c04:	469e      	mov	lr, r3
 8001c06:	4770      	bx	lr

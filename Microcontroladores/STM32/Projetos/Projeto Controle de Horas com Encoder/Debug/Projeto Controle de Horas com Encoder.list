
Projeto Controle de Horas com Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080028b8  080028b8  000038b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028d4  080028d4  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080028d4  080028d4  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080028d4  080028d4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028d4  080028d4  000038d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028d8  080028d8  000038d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028dc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080028e8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080028e8  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000862e  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001809  00000000  00000000  0000c662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0000de70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074d  00000000  00000000  0000e808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013736  00000000  00000000  0000ef55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaf4  00000000  00000000  0002268b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b62c  00000000  00000000  0002d17f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a87ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021b0  00000000  00000000  000a87f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  000aa9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080028a0 	.word	0x080028a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080028a0 	.word	0x080028a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fbca 	bl	80009bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f828 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f95a 	bl	80004e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000230:	f000 f8f4 	bl	800041c <MX_TIM2_Init>
  MX_RTC_Init();
 8000234:	f000 f88e 	bl	8000354 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  DATE.Date  = 28;
 8000238:	4b0d      	ldr	r3, [pc, #52]	@ (8000270 <main+0x50>)
 800023a:	221c      	movs	r2, #28
 800023c:	709a      	strb	r2, [r3, #2]
  DATE.Month = 7;
 800023e:	4b0c      	ldr	r3, [pc, #48]	@ (8000270 <main+0x50>)
 8000240:	2207      	movs	r2, #7
 8000242:	705a      	strb	r2, [r3, #1]
  DATE.Year  = 25;
 8000244:	4b0a      	ldr	r3, [pc, #40]	@ (8000270 <main+0x50>)
 8000246:	2219      	movs	r2, #25
 8000248:	70da      	strb	r2, [r3, #3]
  DATE.WeekDay = RTC_WEEKDAY_MONDAY;
 800024a:	4b09      	ldr	r3, [pc, #36]	@ (8000270 <main+0x50>)
 800024c:	2201      	movs	r2, #1
 800024e:	701a      	strb	r2, [r3, #0]

  TIME.Hours = 16;
 8000250:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <main+0x54>)
 8000252:	2210      	movs	r2, #16
 8000254:	701a      	strb	r2, [r3, #0]
  TIME.Minutes = 15;
 8000256:	4b07      	ldr	r3, [pc, #28]	@ (8000274 <main+0x54>)
 8000258:	220f      	movs	r2, #15
 800025a:	705a      	strb	r2, [r3, #1]

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800025c:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <main+0x58>)
 800025e:	213c      	movs	r1, #60	@ 0x3c
 8000260:	0018      	movs	r0, r3
 8000262:	f002 f9a5 	bl	80025b0 <HAL_TIM_Encoder_Start>
  SET_TIME();
 8000266:	f000 f969 	bl	800053c <SET_TIME>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  MENU_CONTROL();
 800026a:	f000 fa2f 	bl	80006cc <MENU_CONTROL>
 800026e:	e7fc      	b.n	800026a <main+0x4a>
 8000270:	200000b8 	.word	0x200000b8
 8000274:	200000a4 	.word	0x200000a4
 8000278:	2000004c 	.word	0x2000004c

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b09d      	sub	sp, #116	@ 0x74
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	2438      	movs	r4, #56	@ 0x38
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2338      	movs	r3, #56	@ 0x38
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f002 fadb 	bl	8002848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000292:	2324      	movs	r3, #36	@ 0x24
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	0018      	movs	r0, r3
 8000298:	2314      	movs	r3, #20
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f002 fad3 	bl	8002848 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a2:	003b      	movs	r3, r7
 80002a4:	0018      	movs	r0, r3
 80002a6:	2324      	movs	r3, #36	@ 0x24
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f002 facc 	bl	8002848 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b0:	4b26      	ldr	r3, [pc, #152]	@ (800034c <SystemClock_Config+0xd0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a26      	ldr	r2, [pc, #152]	@ (8000350 <SystemClock_Config+0xd4>)
 80002b6:	401a      	ands	r2, r3
 80002b8:	4b24      	ldr	r3, [pc, #144]	@ (800034c <SystemClock_Config+0xd0>)
 80002ba:	2180      	movs	r1, #128	@ 0x80
 80002bc:	0109      	lsls	r1, r1, #4
 80002be:	430a      	orrs	r2, r1
 80002c0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002c2:	0021      	movs	r1, r4
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	220a      	movs	r2, #10
 80002c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2201      	movs	r2, #1
 80002ce:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2210      	movs	r2, #16
 80002d4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2201      	movs	r2, #1
 80002da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fe45 	bl	8000f74 <HAL_RCC_OscConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80002ee:	f000 faa9 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	2124      	movs	r1, #36	@ 0x24
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	220f      	movs	r2, #15
 80002f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2201      	movs	r2, #1
 80002fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2280      	movs	r2, #128	@ 0x80
 8000304:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2200      	movs	r2, #0
 800030a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2100      	movs	r1, #0
 8000316:	0018      	movs	r0, r3
 8000318:	f001 f9f0 	bl	80016fc <HAL_RCC_ClockConfig>
 800031c:	1e03      	subs	r3, r0, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000320:	f000 fa90 	bl	8000844 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000324:	003b      	movs	r3, r7
 8000326:	2220      	movs	r2, #32
 8000328:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800032a:	003b      	movs	r3, r7
 800032c:	2280      	movs	r2, #128	@ 0x80
 800032e:	0292      	lsls	r2, r2, #10
 8000330:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000332:	003b      	movs	r3, r7
 8000334:	0018      	movs	r0, r3
 8000336:	f001 fbaf 	bl	8001a98 <HAL_RCCEx_PeriphCLKConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800033e:	f000 fa81 	bl	8000844 <Error_Handler>
  }
}
 8000342:	46c0      	nop			@ (mov r8, r8)
 8000344:	46bd      	mov	sp, r7
 8000346:	b01d      	add	sp, #116	@ 0x74
 8000348:	bd90      	pop	{r4, r7, pc}
 800034a:	46c0      	nop			@ (mov r8, r8)
 800034c:	40007000 	.word	0x40007000
 8000350:	ffffe7ff 	.word	0xffffe7ff

08000354 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	0018      	movs	r0, r3
 800035e:	2314      	movs	r3, #20
 8000360:	001a      	movs	r2, r3
 8000362:	2100      	movs	r1, #0
 8000364:	f002 fa70 	bl	8002848 <memset>
  RTC_DateTypeDef sDate = {0};
 8000368:	003b      	movs	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800036e:	4b29      	ldr	r3, [pc, #164]	@ (8000414 <MX_RTC_Init+0xc0>)
 8000370:	4a29      	ldr	r2, [pc, #164]	@ (8000418 <MX_RTC_Init+0xc4>)
 8000372:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000374:	4b27      	ldr	r3, [pc, #156]	@ (8000414 <MX_RTC_Init+0xc0>)
 8000376:	2200      	movs	r2, #0
 8000378:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800037a:	4b26      	ldr	r3, [pc, #152]	@ (8000414 <MX_RTC_Init+0xc0>)
 800037c:	227f      	movs	r2, #127	@ 0x7f
 800037e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000380:	4b24      	ldr	r3, [pc, #144]	@ (8000414 <MX_RTC_Init+0xc0>)
 8000382:	22ff      	movs	r2, #255	@ 0xff
 8000384:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000386:	4b23      	ldr	r3, [pc, #140]	@ (8000414 <MX_RTC_Init+0xc0>)
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800038c:	4b21      	ldr	r3, [pc, #132]	@ (8000414 <MX_RTC_Init+0xc0>)
 800038e:	2200      	movs	r2, #0
 8000390:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000392:	4b20      	ldr	r3, [pc, #128]	@ (8000414 <MX_RTC_Init+0xc0>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000398:	4b1e      	ldr	r3, [pc, #120]	@ (8000414 <MX_RTC_Init+0xc0>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800039e:	4b1d      	ldr	r3, [pc, #116]	@ (8000414 <MX_RTC_Init+0xc0>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f001 fd07 	bl	8001db4 <HAL_RTC_Init>
 80003a6:	1e03      	subs	r3, r0, #0
 80003a8:	d001      	beq.n	80003ae <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80003aa:	f000 fa4b 	bl	8000844 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80003b4:	1d3b      	adds	r3, r7, #4
 80003b6:	2200      	movs	r2, #0
 80003b8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003cc:	1d39      	adds	r1, r7, #4
 80003ce:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <MX_RTC_Init+0xc0>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 fd8a 	bl	8001eec <HAL_RTC_SetTime>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80003dc:	f000 fa32 	bl	8000844 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003e0:	003b      	movs	r3, r7
 80003e2:	2201      	movs	r2, #1
 80003e4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80003e6:	003b      	movs	r3, r7
 80003e8:	2201      	movs	r2, #1
 80003ea:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80003ec:	003b      	movs	r3, r7
 80003ee:	2201      	movs	r2, #1
 80003f0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80003f2:	003b      	movs	r3, r7
 80003f4:	2200      	movs	r2, #0
 80003f6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80003f8:	0039      	movs	r1, r7
 80003fa:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <MX_RTC_Init+0xc0>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 fe7c 	bl	80020fc <HAL_RTC_SetDate>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8000408:	f000 fa1c 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b006      	add	sp, #24
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000028 	.word	0x20000028
 8000418:	40002800 	.word	0x40002800

0800041c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b08d      	sub	sp, #52	@ 0x34
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000422:	240c      	movs	r4, #12
 8000424:	193b      	adds	r3, r7, r4
 8000426:	0018      	movs	r0, r3
 8000428:	2324      	movs	r3, #36	@ 0x24
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f002 fa0b 	bl	8002848 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	0018      	movs	r0, r3
 8000436:	2308      	movs	r3, #8
 8000438:	001a      	movs	r2, r3
 800043a:	2100      	movs	r1, #0
 800043c:	f002 fa04 	bl	8002848 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000440:	4b26      	ldr	r3, [pc, #152]	@ (80004dc <MX_TIM2_Init+0xc0>)
 8000442:	2280      	movs	r2, #128	@ 0x80
 8000444:	05d2      	lsls	r2, r2, #23
 8000446:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000448:	4b24      	ldr	r3, [pc, #144]	@ (80004dc <MX_TIM2_Init+0xc0>)
 800044a:	2200      	movs	r2, #0
 800044c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044e:	4b23      	ldr	r3, [pc, #140]	@ (80004dc <MX_TIM2_Init+0xc0>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000454:	4b21      	ldr	r3, [pc, #132]	@ (80004dc <MX_TIM2_Init+0xc0>)
 8000456:	4a22      	ldr	r2, [pc, #136]	@ (80004e0 <MX_TIM2_Init+0xc4>)
 8000458:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045a:	4b20      	ldr	r3, [pc, #128]	@ (80004dc <MX_TIM2_Init+0xc0>)
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000460:	4b1e      	ldr	r3, [pc, #120]	@ (80004dc <MX_TIM2_Init+0xc0>)
 8000462:	2200      	movs	r2, #0
 8000464:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000466:	0021      	movs	r1, r4
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2203      	movs	r2, #3
 800046c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800046e:	187b      	adds	r3, r7, r1
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000474:	187b      	adds	r3, r7, r1
 8000476:	2201      	movs	r2, #1
 8000478:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2200      	movs	r2, #0
 800047e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 10;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	220a      	movs	r2, #10
 8000484:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2201      	movs	r2, #1
 8000490:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2200      	movs	r2, #0
 8000496:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2200      	movs	r2, #0
 800049c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800049e:	187a      	adds	r2, r7, r1
 80004a0:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <MX_TIM2_Init+0xc0>)
 80004a2:	0011      	movs	r1, r2
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 ffe3 	bl	8002470 <HAL_TIM_Encoder_Init>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80004ae:	f000 f9c9 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004b8:	1d3b      	adds	r3, r7, #4
 80004ba:	2200      	movs	r2, #0
 80004bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004be:	1d3a      	adds	r2, r7, #4
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <MX_TIM2_Init+0xc0>)
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 f967 	bl	8002798 <HAL_TIMEx_MasterConfigSynchronization>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80004ce:	f000 f9b9 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b00d      	add	sp, #52	@ 0x34
 80004d8:	bd90      	pop	{r4, r7, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	2000004c 	.word	0x2000004c
 80004e0:	0000ffff 	.word	0x0000ffff

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	0018      	movs	r0, r3
 80004ee:	2314      	movs	r3, #20
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f002 f9a8 	bl	8002848 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <MX_GPIO_Init+0x54>)
 80004fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <MX_GPIO_Init+0x54>)
 80004fe:	2101      	movs	r1, #1
 8000500:	430a      	orrs	r2, r1
 8000502:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000504:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <MX_GPIO_Init+0x54>)
 8000506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000508:	2201      	movs	r2, #1
 800050a:	4013      	ands	r3, r2
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : ENCODE_SW_Pin */
  GPIO_InitStruct.Pin = ENCODE_SW_Pin;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2220      	movs	r2, #32
 8000514:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2200      	movs	r2, #0
 800051a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2201      	movs	r2, #1
 8000520:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENCODE_SW_GPIO_Port, &GPIO_InitStruct);
 8000522:	1d3a      	adds	r2, r7, #4
 8000524:	23a0      	movs	r3, #160	@ 0xa0
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	0011      	movs	r1, r2
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fb8e 	bl	8000c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000530:	46c0      	nop			@ (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b006      	add	sp, #24
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000

0800053c <SET_TIME>:

/* USER CODE BEGIN 4 */
void SET_TIME(void){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	HAL_RTC_SetDate(&hrtc, &DATE, RTC_FORMAT_BCD);
 8000540:	4907      	ldr	r1, [pc, #28]	@ (8000560 <SET_TIME+0x24>)
 8000542:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <SET_TIME+0x28>)
 8000544:	2201      	movs	r2, #1
 8000546:	0018      	movs	r0, r3
 8000548:	f001 fdd8 	bl	80020fc <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &TIME, RTC_FORMAT_BCD);
 800054c:	4906      	ldr	r1, [pc, #24]	@ (8000568 <SET_TIME+0x2c>)
 800054e:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <SET_TIME+0x28>)
 8000550:	2201      	movs	r2, #1
 8000552:	0018      	movs	r0, r3
 8000554:	f001 fcca 	bl	8001eec <HAL_RTC_SetTime>
}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	200000b8 	.word	0x200000b8
 8000564:	20000028 	.word	0x20000028
 8000568:	200000a4 	.word	0x200000a4

0800056c <ENCODER_VERIFY>:

void ENCODER_VERIFY(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
	int16_t DELTA = (int16_t)(TIM2->CNT - LAST_TICK);
 8000572:	2380      	movs	r3, #128	@ 0x80
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000578:	b29a      	uxth	r2, r3
 800057a:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <ENCODER_VERIFY+0x60>)
 800057c:	2100      	movs	r1, #0
 800057e:	5e5b      	ldrsh	r3, [r3, r1]
 8000580:	b29b      	uxth	r3, r3
 8000582:	1ad3      	subs	r3, r2, r3
 8000584:	b29a      	uxth	r2, r3
 8000586:	1dbb      	adds	r3, r7, #6
 8000588:	801a      	strh	r2, [r3, #0]

	if(DELTA > 0) CONTROL_DIR = -1;
 800058a:	1dbb      	adds	r3, r7, #6
 800058c:	2200      	movs	r2, #0
 800058e:	5e9b      	ldrsh	r3, [r3, r2]
 8000590:	2b00      	cmp	r3, #0
 8000592:	dd04      	ble.n	800059e <ENCODER_VERIFY+0x32>
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <ENCODER_VERIFY+0x64>)
 8000596:	2201      	movs	r2, #1
 8000598:	4252      	negs	r2, r2
 800059a:	801a      	strh	r2, [r3, #0]
 800059c:	e00b      	b.n	80005b6 <ENCODER_VERIFY+0x4a>
	else if (DELTA < 0) CONTROL_DIR  = 1;
 800059e:	1dbb      	adds	r3, r7, #6
 80005a0:	2200      	movs	r2, #0
 80005a2:	5e9b      	ldrsh	r3, [r3, r2]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	da03      	bge.n	80005b0 <ENCODER_VERIFY+0x44>
 80005a8:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <ENCODER_VERIFY+0x64>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	801a      	strh	r2, [r3, #0]
 80005ae:	e002      	b.n	80005b6 <ENCODER_VERIFY+0x4a>
	else CONTROL_DIR = 0;
 80005b0:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <ENCODER_VERIFY+0x64>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	801a      	strh	r2, [r3, #0]

	LAST_TICK = TIM2->CNT;
 80005b6:	2380      	movs	r3, #128	@ 0x80
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005bc:	b21a      	sxth	r2, r3
 80005be:	4b03      	ldr	r3, [pc, #12]	@ (80005cc <ENCODER_VERIFY+0x60>)
 80005c0:	801a      	strh	r2, [r3, #0]
}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b002      	add	sp, #8
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	2000008c 	.word	0x2000008c
 80005d0:	2000008e 	.word	0x2000008e

080005d4 <KEYBOARD_CHECK>:

void KEYBOARD_CHECK(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b087      	sub	sp, #28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	000a      	movs	r2, r1
 80005de:	1cbb      	adds	r3, r7, #2
 80005e0:	801a      	strh	r2, [r3, #0]
	uint8_t press = !HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80005e2:	1cbb      	adds	r3, r7, #2
 80005e4:	881a      	ldrh	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	0011      	movs	r1, r2
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 fca4 	bl	8000f38 <HAL_GPIO_ReadPin>
 80005f0:	0003      	movs	r3, r0
 80005f2:	425a      	negs	r2, r3
 80005f4:	4153      	adcs	r3, r2
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	2417      	movs	r4, #23
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	701a      	strb	r2, [r3, #0]
	uint32_t now_time = HAL_GetTick();
 80005fe:	f000 fa43 	bl	8000a88 <HAL_GetTick>
 8000602:	0003      	movs	r3, r0
 8000604:	613b      	str	r3, [r7, #16]

	// Verificar se foi precionado
	if(press && !CONTROL_WAS_PRESS){
 8000606:	193b      	adds	r3, r7, r4
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d018      	beq.n	8000640 <KEYBOARD_CHECK+0x6c>
 800060e:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <KEYBOARD_CHECK+0xdc>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d114      	bne.n	8000640 <KEYBOARD_CHECK+0x6c>
		if(now_time - LAST_TIME < 500) CONTROL_PRESS++;
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <KEYBOARD_CHECK+0xe0>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	001a      	movs	r2, r3
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	1a9a      	subs	r2, r3, r2
 8000620:	23fa      	movs	r3, #250	@ 0xfa
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	429a      	cmp	r2, r3
 8000626:	d205      	bcs.n	8000634 <KEYBOARD_CHECK+0x60>
 8000628:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <KEYBOARD_CHECK+0xe4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <KEYBOARD_CHECK+0xe4>)
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	e002      	b.n	800063a <KEYBOARD_CHECK+0x66>
		else CONTROL_PRESS = 1;
 8000634:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <KEYBOARD_CHECK+0xe4>)
 8000636:	2201      	movs	r2, #1
 8000638:	601a      	str	r2, [r3, #0]

		LAST_TIME = now_time;
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <KEYBOARD_CHECK+0xe0>)
 800063e:	601a      	str	r2, [r3, #0]
	}

	// Clique duplo
	if(CONTROL_PRESS == 2 && (now_time - LAST_TIME > 500)) DOUBLE_CLICK = 1;
 8000640:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <KEYBOARD_CHECK+0xe4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b02      	cmp	r3, #2
 8000646:	d10b      	bne.n	8000660 <KEYBOARD_CHECK+0x8c>
 8000648:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <KEYBOARD_CHECK+0xe0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	001a      	movs	r2, r3
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	1a9a      	subs	r2, r3, r2
 8000652:	23fa      	movs	r3, #250	@ 0xfa
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	429a      	cmp	r2, r3
 8000658:	d902      	bls.n	8000660 <KEYBOARD_CHECK+0x8c>
 800065a:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <KEYBOARD_CHECK+0xe8>)
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]

	// Clique longo
	if(!press && CONTROL_WAS_PRESS){
 8000660:	2317      	movs	r3, #23
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d118      	bne.n	800069c <KEYBOARD_CHECK+0xc8>
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <KEYBOARD_CHECK+0xdc>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d014      	beq.n	800069c <KEYBOARD_CHECK+0xc8>
		uint32_t press_duration = now_time - LAST_TIME;
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <KEYBOARD_CHECK+0xe0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	001a      	movs	r2, r3
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	1a9b      	subs	r3, r3, r2
 800067c:	60fb      	str	r3, [r7, #12]

		if(press_duration >= 3000 && press_duration <= 5000) LARGE_PRESS = 1;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4a0f      	ldr	r2, [pc, #60]	@ (80006c0 <KEYBOARD_CHECK+0xec>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d907      	bls.n	8000696 <KEYBOARD_CHECK+0xc2>
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	4a0e      	ldr	r2, [pc, #56]	@ (80006c4 <KEYBOARD_CHECK+0xf0>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d803      	bhi.n	8000696 <KEYBOARD_CHECK+0xc2>
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <KEYBOARD_CHECK+0xf4>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
 8000694:	e002      	b.n	800069c <KEYBOARD_CHECK+0xc8>
		else LARGE_PRESS = 0;
 8000696:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <KEYBOARD_CHECK+0xf4>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
	}

	// Clique curto
	CONTROL_WAS_PRESS = press;
 800069c:	2317      	movs	r3, #23
 800069e:	18fb      	adds	r3, r7, r3
 80006a0:	781a      	ldrb	r2, [r3, #0]
 80006a2:	4b03      	ldr	r3, [pc, #12]	@ (80006b0 <KEYBOARD_CHECK+0xdc>)
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b007      	add	sp, #28
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	20000094 	.word	0x20000094
 80006b4:	20000090 	.word	0x20000090
 80006b8:	20000098 	.word	0x20000098
 80006bc:	2000009d 	.word	0x2000009d
 80006c0:	00000bb7 	.word	0x00000bb7
 80006c4:	00001388 	.word	0x00001388
 80006c8:	2000009e 	.word	0x2000009e

080006cc <MENU_CONTROL>:

void MENU_CONTROL(void){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	KEYBOARD_CHECK(ENCODE_SW_GPIO_Port, ENCODE_SW_Pin);
 80006d0:	23a0      	movs	r3, #160	@ 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	2120      	movs	r1, #32
 80006d6:	0018      	movs	r0, r3
 80006d8:	f7ff ff7c 	bl	80005d4 <KEYBOARD_CHECK>

	switch(ATUAL_MENU){
 80006dc:	4b4c      	ldr	r3, [pc, #304]	@ (8000810 <MENU_CONTROL+0x144>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	d100      	bne.n	80006e6 <MENU_CONTROL+0x1a>
 80006e4:	e08e      	b.n	8000804 <MENU_CONTROL+0x138>
 80006e6:	dd00      	ble.n	80006ea <MENU_CONTROL+0x1e>
 80006e8:	e088      	b.n	80007fc <MENU_CONTROL+0x130>
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d002      	beq.n	80006f4 <MENU_CONTROL+0x28>
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d028      	beq.n	8000744 <MENU_CONTROL+0x78>
 80006f2:	e083      	b.n	80007fc <MENU_CONTROL+0x130>
		case 1:
			HAL_RTC_GetDate(&hrtc, &DATE, RTC_FORMAT_BCD);
 80006f4:	4947      	ldr	r1, [pc, #284]	@ (8000814 <MENU_CONTROL+0x148>)
 80006f6:	4b48      	ldr	r3, [pc, #288]	@ (8000818 <MENU_CONTROL+0x14c>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	0018      	movs	r0, r3
 80006fc:	f001 fd92 	bl	8002224 <HAL_RTC_GetDate>
			HAL_RTC_GetTime(&hrtc, &TIME, RTC_FORMAT_BCD);
 8000700:	4946      	ldr	r1, [pc, #280]	@ (800081c <MENU_CONTROL+0x150>)
 8000702:	4b45      	ldr	r3, [pc, #276]	@ (8000818 <MENU_CONTROL+0x14c>)
 8000704:	2201      	movs	r2, #1
 8000706:	0018      	movs	r0, r3
 8000708:	f001 fc9a 	bl	8002040 <HAL_RTC_GetTime>

			if(DOUBLE_CLICK) {
 800070c:	4b44      	ldr	r3, [pc, #272]	@ (8000820 <MENU_CONTROL+0x154>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d008      	beq.n	8000726 <MENU_CONTROL+0x5a>
				CONTROL_PRESS = 0;
 8000714:	4b43      	ldr	r3, [pc, #268]	@ (8000824 <MENU_CONTROL+0x158>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
				DOUBLE_CLICK = 0;
 800071a:	4b41      	ldr	r3, [pc, #260]	@ (8000820 <MENU_CONTROL+0x154>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
				ATUAL_MENU = 2;
 8000720:	4b3b      	ldr	r3, [pc, #236]	@ (8000810 <MENU_CONTROL+0x144>)
 8000722:	2202      	movs	r2, #2
 8000724:	701a      	strb	r2, [r3, #0]
			}

			if(LARGE_PRESS) {
 8000726:	4b40      	ldr	r3, [pc, #256]	@ (8000828 <MENU_CONTROL+0x15c>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d100      	bne.n	8000730 <MENU_CONTROL+0x64>
 800072e:	e06b      	b.n	8000808 <MENU_CONTROL+0x13c>
				CONTROL_PRESS = 0;
 8000730:	4b3c      	ldr	r3, [pc, #240]	@ (8000824 <MENU_CONTROL+0x158>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
				LARGE_PRESS = 0;
 8000736:	4b3c      	ldr	r3, [pc, #240]	@ (8000828 <MENU_CONTROL+0x15c>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
				ATUAL_MENU = 3;
 800073c:	4b34      	ldr	r3, [pc, #208]	@ (8000810 <MENU_CONTROL+0x144>)
 800073e:	2203      	movs	r2, #3
 8000740:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000742:	e061      	b.n	8000808 <MENU_CONTROL+0x13c>

		case 2:
			ENCODER_VERIFY();
 8000744:	f7ff ff12 	bl	800056c <ENCODER_VERIFY>

			if(CONTROL_WAS_PRESS) {
 8000748:	4b38      	ldr	r3, [pc, #224]	@ (800082c <MENU_CONTROL+0x160>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d008      	beq.n	8000762 <MENU_CONTROL+0x96>
				// Delay para incremento
				HAL_Delay(100);
 8000750:	2064      	movs	r0, #100	@ 0x64
 8000752:	f000 f9a3 	bl	8000a9c <HAL_Delay>
				OP++;
 8000756:	4b36      	ldr	r3, [pc, #216]	@ (8000830 <MENU_CONTROL+0x164>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b34      	ldr	r3, [pc, #208]	@ (8000830 <MENU_CONTROL+0x164>)
 8000760:	701a      	strb	r2, [r3, #0]
			}

			switch(OP){
 8000762:	4b33      	ldr	r3, [pc, #204]	@ (8000830 <MENU_CONTROL+0x164>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b02      	cmp	r3, #2
 8000768:	d01b      	beq.n	80007a2 <MENU_CONTROL+0xd6>
 800076a:	dc25      	bgt.n	80007b8 <MENU_CONTROL+0xec>
 800076c:	2b00      	cmp	r3, #0
 800076e:	d002      	beq.n	8000776 <MENU_CONTROL+0xaa>
 8000770:	2b01      	cmp	r3, #1
 8000772:	d00b      	beq.n	800078c <MENU_CONTROL+0xc0>
 8000774:	e020      	b.n	80007b8 <MENU_CONTROL+0xec>
				case 0:
					hours += CONTROL_DIR;
 8000776:	4b2f      	ldr	r3, [pc, #188]	@ (8000834 <MENU_CONTROL+0x168>)
 8000778:	2200      	movs	r2, #0
 800077a:	5e9b      	ldrsh	r3, [r3, r2]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b2e      	ldr	r3, [pc, #184]	@ (8000838 <MENU_CONTROL+0x16c>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	18d3      	adds	r3, r2, r3
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <MENU_CONTROL+0x16c>)
 8000788:	701a      	strb	r2, [r3, #0]
					break;
 800078a:	e018      	b.n	80007be <MENU_CONTROL+0xf2>

				case 1:
					minutes += CONTROL_DIR;
 800078c:	4b29      	ldr	r3, [pc, #164]	@ (8000834 <MENU_CONTROL+0x168>)
 800078e:	2200      	movs	r2, #0
 8000790:	5e9b      	ldrsh	r3, [r3, r2]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b29      	ldr	r3, [pc, #164]	@ (800083c <MENU_CONTROL+0x170>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	18d3      	adds	r3, r2, r3
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b27      	ldr	r3, [pc, #156]	@ (800083c <MENU_CONTROL+0x170>)
 800079e:	701a      	strb	r2, [r3, #0]
					break;
 80007a0:	e00d      	b.n	80007be <MENU_CONTROL+0xf2>

				case 2:
					seconds += CONTROL_DIR;
 80007a2:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <MENU_CONTROL+0x168>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	5e9b      	ldrsh	r3, [r3, r2]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b25      	ldr	r3, [pc, #148]	@ (8000840 <MENU_CONTROL+0x174>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	18d3      	adds	r3, r2, r3
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <MENU_CONTROL+0x174>)
 80007b4:	701a      	strb	r2, [r3, #0]
					break;
 80007b6:	e002      	b.n	80007be <MENU_CONTROL+0xf2>

				default:
					OP = 0;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <MENU_CONTROL+0x164>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
			}

			if(DOUBLE_CLICK) {
 80007be:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <MENU_CONTROL+0x154>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d016      	beq.n	80007f4 <MENU_CONTROL+0x128>
				CONTROL_PRESS = 0;
 80007c6:	4b17      	ldr	r3, [pc, #92]	@ (8000824 <MENU_CONTROL+0x158>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
				DOUBLE_CLICK = 0;
 80007cc:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MENU_CONTROL+0x154>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
				ATUAL_MENU = 1;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MENU_CONTROL+0x144>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	701a      	strb	r2, [r3, #0]

				TIME.Hours = hours;
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MENU_CONTROL+0x16c>)
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MENU_CONTROL+0x150>)
 80007de:	701a      	strb	r2, [r3, #0]
				TIME.Seconds = seconds;
 80007e0:	4b17      	ldr	r3, [pc, #92]	@ (8000840 <MENU_CONTROL+0x174>)
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <MENU_CONTROL+0x150>)
 80007e6:	709a      	strb	r2, [r3, #2]
				TIME.Minutes = minutes;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MENU_CONTROL+0x170>)
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MENU_CONTROL+0x150>)
 80007ee:	705a      	strb	r2, [r3, #1]

				SET_TIME();
 80007f0:	f7ff fea4 	bl	800053c <SET_TIME>
			}

			// Delay para o Encoder
			HAL_Delay(100);
 80007f4:	2064      	movs	r0, #100	@ 0x64
 80007f6:	f000 f951 	bl	8000a9c <HAL_Delay>
			break;
 80007fa:	e006      	b.n	800080a <MENU_CONTROL+0x13e>

		case 3:
			break;

		default:
			ATUAL_MENU = 1;
 80007fc:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <MENU_CONTROL+0x144>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
			break;
 8000802:	e002      	b.n	800080a <MENU_CONTROL+0x13e>
			break;
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	e000      	b.n	800080a <MENU_CONTROL+0x13e>
			break;
 8000808:	46c0      	nop			@ (mov r8, r8)
	}
}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000009c 	.word	0x2000009c
 8000814:	200000b8 	.word	0x200000b8
 8000818:	20000028 	.word	0x20000028
 800081c:	200000a4 	.word	0x200000a4
 8000820:	2000009d 	.word	0x2000009d
 8000824:	20000098 	.word	0x20000098
 8000828:	2000009e 	.word	0x2000009e
 800082c:	20000094 	.word	0x20000094
 8000830:	2000009f 	.word	0x2000009f
 8000834:	2000008e 	.word	0x2000008e
 8000838:	200000a2 	.word	0x200000a2
 800083c:	200000a0 	.word	0x200000a0
 8000840:	200000a1 	.word	0x200000a1

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	e7fd      	b.n	800084c <Error_Handler+0x8>

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <HAL_MspInit+0x24>)
 8000856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <HAL_MspInit+0x24>)
 800085a:	2101      	movs	r1, #1
 800085c:	430a      	orrs	r2, r1
 800085e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000860:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <HAL_MspInit+0x24>)
 8000862:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000864:	4b03      	ldr	r3, [pc, #12]	@ (8000874 <HAL_MspInit+0x24>)
 8000866:	2180      	movs	r1, #128	@ 0x80
 8000868:	0549      	lsls	r1, r1, #21
 800086a:	430a      	orrs	r2, r1
 800086c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a06      	ldr	r2, [pc, #24]	@ (80008a0 <HAL_RTC_MspInit+0x28>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d106      	bne.n	8000898 <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <HAL_RTC_MspInit+0x2c>)
 800088c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800088e:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <HAL_RTC_MspInit+0x2c>)
 8000890:	2180      	movs	r1, #128	@ 0x80
 8000892:	02c9      	lsls	r1, r1, #11
 8000894:	430a      	orrs	r2, r1
 8000896:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b002      	add	sp, #8
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40002800 	.word	0x40002800
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b089      	sub	sp, #36	@ 0x24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	240c      	movs	r4, #12
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	0018      	movs	r0, r3
 80008b6:	2314      	movs	r3, #20
 80008b8:	001a      	movs	r2, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	f001 ffc4 	bl	8002848 <memset>
  if(htim_encoder->Instance==TIM2)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	2380      	movs	r3, #128	@ 0x80
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d128      	bne.n	800091e <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008cc:	4b16      	ldr	r3, [pc, #88]	@ (8000928 <HAL_TIM_Encoder_MspInit+0x80>)
 80008ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80008d0:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <HAL_TIM_Encoder_MspInit+0x80>)
 80008d2:	2101      	movs	r1, #1
 80008d4:	430a      	orrs	r2, r1
 80008d6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <HAL_TIM_Encoder_MspInit+0x80>)
 80008da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <HAL_TIM_Encoder_MspInit+0x80>)
 80008de:	2101      	movs	r1, #1
 80008e0:	430a      	orrs	r2, r1
 80008e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008e4:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <HAL_TIM_Encoder_MspInit+0x80>)
 80008e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e8:	2201      	movs	r2, #1
 80008ea:	4013      	ands	r3, r2
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008f0:	0021      	movs	r1, r4
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2203      	movs	r2, #3
 80008f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2202      	movs	r2, #2
 80008fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2202      	movs	r2, #2
 800090e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	187a      	adds	r2, r7, r1
 8000912:	23a0      	movs	r3, #160	@ 0xa0
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 f997 	bl	8000c4c <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	b009      	add	sp, #36	@ 0x24
 8000924:	bd90      	pop	{r4, r7, pc}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	40021000 	.word	0x40021000

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	e7fd      	b.n	8000930 <NMI_Handler+0x4>

08000934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	e7fd      	b.n	8000938 <HardFault_Handler+0x4>

0800093c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000940:	46c0      	nop			@ (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f886 	bl	8000a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000968:	480d      	ldr	r0, [pc, #52]	@ (80009a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800096a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800096c:	f7ff fff7 	bl	800095e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000970:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000972:	490d      	ldr	r1, [pc, #52]	@ (80009a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000974:	4a0d      	ldr	r2, [pc, #52]	@ (80009ac <LoopForever+0xe>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000988:	4c0a      	ldr	r4, [pc, #40]	@ (80009b4 <LoopForever+0x16>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000996:	f001 ff5f 	bl	8002858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099a:	f7ff fc41 	bl	8000220 <main>

0800099e <LoopForever>:

LoopForever:
    b LoopForever
 800099e:	e7fe      	b.n	800099e <LoopForever>
  ldr   r0, =_estack
 80009a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009ac:	080028dc 	.word	0x080028dc
  ldr r2, =_sbss
 80009b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009b4:	200000c0 	.word	0x200000c0

080009b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC1_COMP_IRQHandler>
	...

080009bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009c2:	1dfb      	adds	r3, r7, #7
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009c8:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <HAL_Init+0x3c>)
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	4b0a      	ldr	r3, [pc, #40]	@ (80009f8 <HAL_Init+0x3c>)
 80009ce:	2140      	movs	r1, #64	@ 0x40
 80009d0:	430a      	orrs	r2, r1
 80009d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d4:	2000      	movs	r0, #0
 80009d6:	f000 f811 	bl	80009fc <HAL_InitTick>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d003      	beq.n	80009e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
 80009e4:	e001      	b.n	80009ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009e6:	f7ff ff33 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781b      	ldrb	r3, [r3, #0]
}
 80009ee:	0018      	movs	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	40022000 	.word	0x40022000

080009fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <HAL_InitTick+0x5c>)
 8000a06:	681c      	ldr	r4, [r3, #0]
 8000a08:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <HAL_InitTick+0x60>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	23fa      	movs	r3, #250	@ 0xfa
 8000a10:	0098      	lsls	r0, r3, #2
 8000a12:	f7ff fb79 	bl	8000108 <__udivsi3>
 8000a16:	0003      	movs	r3, r0
 8000a18:	0019      	movs	r1, r3
 8000a1a:	0020      	movs	r0, r4
 8000a1c:	f7ff fb74 	bl	8000108 <__udivsi3>
 8000a20:	0003      	movs	r3, r0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 f905 	bl	8000c32 <HAL_SYSTICK_Config>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e00f      	b.n	8000a50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d80b      	bhi.n	8000a4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	2301      	movs	r3, #1
 8000a3a:	425b      	negs	r3, r3
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 f8e2 	bl	8000c08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_InitTick+0x64>)
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	e000      	b.n	8000a50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b003      	add	sp, #12
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000004 	.word	0x20000004

08000a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <HAL_IncTick+0x1c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <HAL_IncTick+0x20>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	18d2      	adds	r2, r2, r3
 8000a74:	4b03      	ldr	r3, [pc, #12]	@ (8000a84 <HAL_IncTick+0x20>)
 8000a76:	601a      	str	r2, [r3, #0]
}
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	20000008 	.word	0x20000008
 8000a84:	200000bc 	.word	0x200000bc

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b02      	ldr	r3, [pc, #8]	@ (8000a98 <HAL_GetTick+0x10>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	200000bc 	.word	0x200000bc

08000a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa4:	f7ff fff0 	bl	8000a88 <HAL_GetTick>
 8000aa8:	0003      	movs	r3, r0
 8000aaa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	d005      	beq.n	8000ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <HAL_Delay+0x44>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	001a      	movs	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	189b      	adds	r3, r3, r2
 8000ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	f7ff ffe0 	bl	8000a88 <HAL_GetTick>
 8000ac8:	0002      	movs	r2, r0
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d8f7      	bhi.n	8000ac4 <HAL_Delay+0x28>
  {
  }
}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b004      	add	sp, #16
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	0002      	movs	r2, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000af8:	d828      	bhi.n	8000b4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afa:	4a2f      	ldr	r2, [pc, #188]	@ (8000bb8 <__NVIC_SetPriority+0xd4>)
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	089b      	lsrs	r3, r3, #2
 8000b04:	33c0      	adds	r3, #192	@ 0xc0
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	589b      	ldr	r3, [r3, r2]
 8000b0a:	1dfa      	adds	r2, r7, #7
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	0011      	movs	r1, r2
 8000b10:	2203      	movs	r2, #3
 8000b12:	400a      	ands	r2, r1
 8000b14:	00d2      	lsls	r2, r2, #3
 8000b16:	21ff      	movs	r1, #255	@ 0xff
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	43d2      	mvns	r2, r2
 8000b1e:	401a      	ands	r2, r3
 8000b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	019b      	lsls	r3, r3, #6
 8000b26:	22ff      	movs	r2, #255	@ 0xff
 8000b28:	401a      	ands	r2, r3
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2303      	movs	r3, #3
 8000b32:	4003      	ands	r3, r0
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	481f      	ldr	r0, [pc, #124]	@ (8000bb8 <__NVIC_SetPriority+0xd4>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	089b      	lsrs	r3, r3, #2
 8000b42:	430a      	orrs	r2, r1
 8000b44:	33c0      	adds	r3, #192	@ 0xc0
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b4a:	e031      	b.n	8000bb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bbc <__NVIC_SetPriority+0xd8>)
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	0019      	movs	r1, r3
 8000b54:	230f      	movs	r3, #15
 8000b56:	400b      	ands	r3, r1
 8000b58:	3b08      	subs	r3, #8
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	3306      	adds	r3, #6
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	18d3      	adds	r3, r2, r3
 8000b62:	3304      	adds	r3, #4
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	1dfa      	adds	r2, r7, #7
 8000b68:	7812      	ldrb	r2, [r2, #0]
 8000b6a:	0011      	movs	r1, r2
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	400a      	ands	r2, r1
 8000b70:	00d2      	lsls	r2, r2, #3
 8000b72:	21ff      	movs	r1, #255	@ 0xff
 8000b74:	4091      	lsls	r1, r2
 8000b76:	000a      	movs	r2, r1
 8000b78:	43d2      	mvns	r2, r2
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	019b      	lsls	r3, r3, #6
 8000b82:	22ff      	movs	r2, #255	@ 0xff
 8000b84:	401a      	ands	r2, r3
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	4003      	ands	r3, r0
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b94:	4809      	ldr	r0, [pc, #36]	@ (8000bbc <__NVIC_SetPriority+0xd8>)
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	001c      	movs	r4, r3
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	4023      	ands	r3, r4
 8000ba0:	3b08      	subs	r3, #8
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	3306      	adds	r3, #6
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	18c3      	adds	r3, r0, r3
 8000bac:	3304      	adds	r3, #4
 8000bae:	601a      	str	r2, [r3, #0]
}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b003      	add	sp, #12
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	1e5a      	subs	r2, r3, #1
 8000bcc:	2380      	movs	r3, #128	@ 0x80
 8000bce:	045b      	lsls	r3, r3, #17
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d301      	bcc.n	8000bd8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e010      	b.n	8000bfa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <SysTick_Config+0x44>)
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be0:	2301      	movs	r3, #1
 8000be2:	425b      	negs	r3, r3
 8000be4:	2103      	movs	r1, #3
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff ff7c 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bec:	4b05      	ldr	r3, [pc, #20]	@ (8000c04 <SysTick_Config+0x44>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf2:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <SysTick_Config+0x44>)
 8000bf4:	2207      	movs	r2, #7
 8000bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	e000e010 	.word	0xe000e010

08000c08 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	210f      	movs	r1, #15
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	1c02      	adds	r2, r0, #0
 8000c18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b25b      	sxtb	r3, r3
 8000c22:	0011      	movs	r1, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff ff5d 	bl	8000ae4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b004      	add	sp, #16
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff ffbf 	bl	8000bc0 <SysTick_Config>
 8000c42:	0003      	movs	r3, r0
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b002      	add	sp, #8
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c62:	e14f      	b.n	8000f04 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	000a      	movs	r2, r1
 8000c70:	4013      	ands	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d100      	bne.n	8000c7c <HAL_GPIO_Init+0x30>
 8000c7a:	e140      	b.n	8000efe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2203      	movs	r2, #3
 8000c82:	4013      	ands	r3, r2
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d005      	beq.n	8000c94 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d130      	bne.n	8000cf6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	409a      	lsls	r2, r3
 8000ca2:	0013      	movs	r3, r2
 8000ca4:	43da      	mvns	r2, r3
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68da      	ldr	r2, [r3, #12]
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	0013      	movs	r3, r2
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cca:	2201      	movs	r2, #1
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	409a      	lsls	r2, r3
 8000cd0:	0013      	movs	r3, r2
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	091b      	lsrs	r3, r3, #4
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
 8000ce8:	0013      	movs	r3, r2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d017      	beq.n	8000d32 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	2203      	movs	r2, #3
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	43da      	mvns	r2, r3
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689a      	ldr	r2, [r3, #8]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	409a      	lsls	r2, r3
 8000d24:	0013      	movs	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2203      	movs	r2, #3
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d123      	bne.n	8000d86 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	08da      	lsrs	r2, r3, #3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3208      	adds	r2, #8
 8000d46:	0092      	lsls	r2, r2, #2
 8000d48:	58d3      	ldr	r3, [r2, r3]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2207      	movs	r2, #7
 8000d50:	4013      	ands	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	220f      	movs	r2, #15
 8000d56:	409a      	lsls	r2, r3
 8000d58:	0013      	movs	r3, r2
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	691a      	ldr	r2, [r3, #16]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2107      	movs	r1, #7
 8000d6a:	400b      	ands	r3, r1
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	08da      	lsrs	r2, r3, #3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3208      	adds	r2, #8
 8000d80:	0092      	lsls	r2, r2, #2
 8000d82:	6939      	ldr	r1, [r7, #16]
 8000d84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	43da      	mvns	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2203      	movs	r2, #3
 8000da4:	401a      	ands	r2, r3
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	409a      	lsls	r2, r3
 8000dac:	0013      	movs	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	23c0      	movs	r3, #192	@ 0xc0
 8000dc0:	029b      	lsls	r3, r3, #10
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	d100      	bne.n	8000dc8 <HAL_GPIO_Init+0x17c>
 8000dc6:	e09a      	b.n	8000efe <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc8:	4b54      	ldr	r3, [pc, #336]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dcc:	4b53      	ldr	r3, [pc, #332]	@ (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000dce:	2101      	movs	r1, #1
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd4:	4a52      	ldr	r2, [pc, #328]	@ (8000f20 <HAL_GPIO_Init+0x2d4>)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3302      	adds	r3, #2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	589b      	ldr	r3, [r3, r2]
 8000de0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2203      	movs	r2, #3
 8000de6:	4013      	ands	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	220f      	movs	r2, #15
 8000dec:	409a      	lsls	r2, r3
 8000dee:	0013      	movs	r3, r2
 8000df0:	43da      	mvns	r2, r3
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	23a0      	movs	r3, #160	@ 0xa0
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d019      	beq.n	8000e36 <HAL_GPIO_Init+0x1ea>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a47      	ldr	r2, [pc, #284]	@ (8000f24 <HAL_GPIO_Init+0x2d8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0x1e6>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a46      	ldr	r2, [pc, #280]	@ (8000f28 <HAL_GPIO_Init+0x2dc>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00d      	beq.n	8000e2e <HAL_GPIO_Init+0x1e2>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a45      	ldr	r2, [pc, #276]	@ (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d007      	beq.n	8000e2a <HAL_GPIO_Init+0x1de>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a44      	ldr	r2, [pc, #272]	@ (8000f30 <HAL_GPIO_Init+0x2e4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_GPIO_Init+0x1da>
 8000e22:	2305      	movs	r3, #5
 8000e24:	e008      	b.n	8000e38 <HAL_GPIO_Init+0x1ec>
 8000e26:	2306      	movs	r3, #6
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x1ec>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e004      	b.n	8000e38 <HAL_GPIO_Init+0x1ec>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e002      	b.n	8000e38 <HAL_GPIO_Init+0x1ec>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x1ec>
 8000e36:	2300      	movs	r3, #0
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	4093      	lsls	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e48:	4935      	ldr	r1, [pc, #212]	@ (8000f20 <HAL_GPIO_Init+0x2d4>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e56:	4b37      	ldr	r3, [pc, #220]	@ (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	2380      	movs	r3, #128	@ 0x80
 8000e6c:	035b      	lsls	r3, r3, #13
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e80:	4b2c      	ldr	r3, [pc, #176]	@ (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	43da      	mvns	r2, r3
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	2380      	movs	r3, #128	@ 0x80
 8000e96:	039b      	lsls	r3, r3, #14
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ea4:	4b23      	ldr	r3, [pc, #140]	@ (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000eaa:	4b22      	ldr	r3, [pc, #136]	@ (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685a      	ldr	r2, [r3, #4]
 8000ebe:	2380      	movs	r3, #128	@ 0x80
 8000ec0:	029b      	lsls	r3, r3, #10
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ece:	4b19      	ldr	r3, [pc, #100]	@ (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed4:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43da      	mvns	r2, r3
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	025b      	lsls	r3, r3, #9
 8000eec:	4013      	ands	r3, r2
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	40da      	lsrs	r2, r3
 8000f0c:	1e13      	subs	r3, r2, #0
 8000f0e:	d000      	beq.n	8000f12 <HAL_GPIO_Init+0x2c6>
 8000f10:	e6a8      	b.n	8000c64 <HAL_GPIO_Init+0x18>
  }
}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	46c0      	nop			@ (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b006      	add	sp, #24
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010000 	.word	0x40010000
 8000f24:	50000400 	.word	0x50000400
 8000f28:	50000800 	.word	0x50000800
 8000f2c:	50000c00 	.word	0x50000c00
 8000f30:	50001c00 	.word	0x50001c00
 8000f34:	40010400 	.word	0x40010400

08000f38 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	000a      	movs	r2, r1
 8000f42:	1cbb      	adds	r3, r7, #2
 8000f44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	1cba      	adds	r2, r7, #2
 8000f4c:	8812      	ldrh	r2, [r2, #0]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d004      	beq.n	8000f5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000f52:	230f      	movs	r3, #15
 8000f54:	18fb      	adds	r3, r7, r3
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
 8000f5a:	e003      	b.n	8000f64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	18fb      	adds	r3, r7, r3
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000f64:	230f      	movs	r3, #15
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	781b      	ldrb	r3, [r3, #0]
}
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b004      	add	sp, #16
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d102      	bne.n	8000f88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	f000 fbaf 	bl	80016e6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f88:	4bcf      	ldr	r3, [pc, #828]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	220c      	movs	r2, #12
 8000f8e:	4013      	ands	r3, r2
 8000f90:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f92:	4bcd      	ldr	r3, [pc, #820]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	2380      	movs	r3, #128	@ 0x80
 8000f98:	025b      	lsls	r3, r3, #9
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d100      	bne.n	8000faa <HAL_RCC_OscConfig+0x36>
 8000fa8:	e07e      	b.n	80010a8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d007      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	2b0c      	cmp	r3, #12
 8000fb4:	d112      	bne.n	8000fdc <HAL_RCC_OscConfig+0x68>
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	2380      	movs	r3, #128	@ 0x80
 8000fba:	025b      	lsls	r3, r3, #9
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d10d      	bne.n	8000fdc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	4bc1      	ldr	r3, [pc, #772]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	029b      	lsls	r3, r3, #10
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d100      	bne.n	8000fce <HAL_RCC_OscConfig+0x5a>
 8000fcc:	e06b      	b.n	80010a6 <HAL_RCC_OscConfig+0x132>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d167      	bne.n	80010a6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f000 fb85 	bl	80016e6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	2380      	movs	r3, #128	@ 0x80
 8000fe2:	025b      	lsls	r3, r3, #9
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d107      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x84>
 8000fe8:	4bb7      	ldr	r3, [pc, #732]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4bb6      	ldr	r3, [pc, #728]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8000fee:	2180      	movs	r1, #128	@ 0x80
 8000ff0:	0249      	lsls	r1, r1, #9
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e027      	b.n	8001048 <HAL_RCC_OscConfig+0xd4>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	23a0      	movs	r3, #160	@ 0xa0
 8000ffe:	02db      	lsls	r3, r3, #11
 8001000:	429a      	cmp	r2, r3
 8001002:	d10e      	bne.n	8001022 <HAL_RCC_OscConfig+0xae>
 8001004:	4bb0      	ldr	r3, [pc, #704]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4baf      	ldr	r3, [pc, #700]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 800100a:	2180      	movs	r1, #128	@ 0x80
 800100c:	02c9      	lsls	r1, r1, #11
 800100e:	430a      	orrs	r2, r1
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	4bad      	ldr	r3, [pc, #692]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	4bac      	ldr	r3, [pc, #688]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001018:	2180      	movs	r1, #128	@ 0x80
 800101a:	0249      	lsls	r1, r1, #9
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	e012      	b.n	8001048 <HAL_RCC_OscConfig+0xd4>
 8001022:	4ba9      	ldr	r3, [pc, #676]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4ba8      	ldr	r3, [pc, #672]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001028:	49a8      	ldr	r1, [pc, #672]	@ (80012cc <HAL_RCC_OscConfig+0x358>)
 800102a:	400a      	ands	r2, r1
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	4ba6      	ldr	r3, [pc, #664]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	2380      	movs	r3, #128	@ 0x80
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	4013      	ands	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4ba2      	ldr	r3, [pc, #648]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4ba1      	ldr	r3, [pc, #644]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001042:	49a3      	ldr	r1, [pc, #652]	@ (80012d0 <HAL_RCC_OscConfig+0x35c>)
 8001044:	400a      	ands	r2, r1
 8001046:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d015      	beq.n	800107c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fd1a 	bl	8000a88 <HAL_GetTick>
 8001054:	0003      	movs	r3, r0
 8001056:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001058:	e009      	b.n	800106e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800105a:	f7ff fd15 	bl	8000a88 <HAL_GetTick>
 800105e:	0002      	movs	r2, r0
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b64      	cmp	r3, #100	@ 0x64
 8001066:	d902      	bls.n	800106e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	f000 fb3c 	bl	80016e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800106e:	4b96      	ldr	r3, [pc, #600]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	2380      	movs	r3, #128	@ 0x80
 8001074:	029b      	lsls	r3, r3, #10
 8001076:	4013      	ands	r3, r2
 8001078:	d0ef      	beq.n	800105a <HAL_RCC_OscConfig+0xe6>
 800107a:	e015      	b.n	80010a8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fd04 	bl	8000a88 <HAL_GetTick>
 8001080:	0003      	movs	r3, r0
 8001082:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001086:	f7ff fcff 	bl	8000a88 <HAL_GetTick>
 800108a:	0002      	movs	r2, r0
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b64      	cmp	r3, #100	@ 0x64
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e326      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001098:	4b8b      	ldr	r3, [pc, #556]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2380      	movs	r3, #128	@ 0x80
 800109e:	029b      	lsls	r3, r3, #10
 80010a0:	4013      	ands	r3, r2
 80010a2:	d1f0      	bne.n	8001086 <HAL_RCC_OscConfig+0x112>
 80010a4:	e000      	b.n	80010a8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2202      	movs	r2, #2
 80010ae:	4013      	ands	r3, r2
 80010b0:	d100      	bne.n	80010b4 <HAL_RCC_OscConfig+0x140>
 80010b2:	e08b      	b.n	80011cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ba:	6a3b      	ldr	r3, [r7, #32]
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d005      	beq.n	80010cc <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	2b0c      	cmp	r3, #12
 80010c4:	d13e      	bne.n	8001144 <HAL_RCC_OscConfig+0x1d0>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d13b      	bne.n	8001144 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80010cc:	4b7e      	ldr	r3, [pc, #504]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2204      	movs	r2, #4
 80010d2:	4013      	ands	r3, r2
 80010d4:	d004      	beq.n	80010e0 <HAL_RCC_OscConfig+0x16c>
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e302      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	4b79      	ldr	r3, [pc, #484]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	4a7b      	ldr	r2, [pc, #492]	@ (80012d4 <HAL_RCC_OscConfig+0x360>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	0019      	movs	r1, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	021a      	lsls	r2, r3, #8
 80010f0:	4b75      	ldr	r3, [pc, #468]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 80010f2:	430a      	orrs	r2, r1
 80010f4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010f6:	4b74      	ldr	r3, [pc, #464]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2209      	movs	r2, #9
 80010fc:	4393      	bics	r3, r2
 80010fe:	0019      	movs	r1, r3
 8001100:	4b71      	ldr	r3, [pc, #452]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001108:	f000 fc40 	bl	800198c <HAL_RCC_GetSysClockFreq>
 800110c:	0001      	movs	r1, r0
 800110e:	4b6e      	ldr	r3, [pc, #440]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	220f      	movs	r2, #15
 8001116:	4013      	ands	r3, r2
 8001118:	4a6f      	ldr	r2, [pc, #444]	@ (80012d8 <HAL_RCC_OscConfig+0x364>)
 800111a:	5cd3      	ldrb	r3, [r2, r3]
 800111c:	000a      	movs	r2, r1
 800111e:	40da      	lsrs	r2, r3
 8001120:	4b6e      	ldr	r3, [pc, #440]	@ (80012dc <HAL_RCC_OscConfig+0x368>)
 8001122:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001124:	4b6e      	ldr	r3, [pc, #440]	@ (80012e0 <HAL_RCC_OscConfig+0x36c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2513      	movs	r5, #19
 800112a:	197c      	adds	r4, r7, r5
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff fc65 	bl	80009fc <HAL_InitTick>
 8001132:	0003      	movs	r3, r0
 8001134:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001136:	197b      	adds	r3, r7, r5
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d046      	beq.n	80011cc <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800113e:	197b      	adds	r3, r7, r5
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	e2d0      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d027      	beq.n	800119a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800114a:	4b5f      	ldr	r3, [pc, #380]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2209      	movs	r2, #9
 8001150:	4393      	bics	r3, r2
 8001152:	0019      	movs	r1, r3
 8001154:	4b5c      	ldr	r3, [pc, #368]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	430a      	orrs	r2, r1
 800115a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fc94 	bl	8000a88 <HAL_GetTick>
 8001160:	0003      	movs	r3, r0
 8001162:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001166:	f7ff fc8f 	bl	8000a88 <HAL_GetTick>
 800116a:	0002      	movs	r2, r0
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e2b6      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001178:	4b53      	ldr	r3, [pc, #332]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2204      	movs	r2, #4
 800117e:	4013      	ands	r3, r2
 8001180:	d0f1      	beq.n	8001166 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001182:	4b51      	ldr	r3, [pc, #324]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4a53      	ldr	r2, [pc, #332]	@ (80012d4 <HAL_RCC_OscConfig+0x360>)
 8001188:	4013      	ands	r3, r2
 800118a:	0019      	movs	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	021a      	lsls	r2, r3, #8
 8001192:	4b4d      	ldr	r3, [pc, #308]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001194:	430a      	orrs	r2, r1
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	e018      	b.n	80011cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800119a:	4b4b      	ldr	r3, [pc, #300]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b4a      	ldr	r3, [pc, #296]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	438a      	bics	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fc6f 	bl	8000a88 <HAL_GetTick>
 80011aa:	0003      	movs	r3, r0
 80011ac:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b0:	f7ff fc6a 	bl	8000a88 <HAL_GetTick>
 80011b4:	0002      	movs	r2, r0
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e291      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011c2:	4b41      	ldr	r3, [pc, #260]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2204      	movs	r2, #4
 80011c8:	4013      	ands	r3, r2
 80011ca:	d1f1      	bne.n	80011b0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2210      	movs	r2, #16
 80011d2:	4013      	ands	r3, r2
 80011d4:	d100      	bne.n	80011d8 <HAL_RCC_OscConfig+0x264>
 80011d6:	e0a1      	b.n	800131c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d140      	bne.n	8001260 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011de:	4b3a      	ldr	r3, [pc, #232]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	2380      	movs	r3, #128	@ 0x80
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4013      	ands	r3, r2
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x282>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e277      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f6:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	4a3a      	ldr	r2, [pc, #232]	@ (80012e4 <HAL_RCC_OscConfig+0x370>)
 80011fc:	4013      	ands	r3, r2
 80011fe:	0019      	movs	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001204:	4b30      	ldr	r3, [pc, #192]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001206:	430a      	orrs	r2, r1
 8001208:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800120a:	4b2f      	ldr	r3, [pc, #188]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	0a19      	lsrs	r1, r3, #8
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	061a      	lsls	r2, r3, #24
 8001218:	4b2b      	ldr	r3, [pc, #172]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 800121a:	430a      	orrs	r2, r1
 800121c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001222:	0b5b      	lsrs	r3, r3, #13
 8001224:	3301      	adds	r3, #1
 8001226:	2280      	movs	r2, #128	@ 0x80
 8001228:	0212      	lsls	r2, r2, #8
 800122a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800122c:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	210f      	movs	r1, #15
 8001234:	400b      	ands	r3, r1
 8001236:	4928      	ldr	r1, [pc, #160]	@ (80012d8 <HAL_RCC_OscConfig+0x364>)
 8001238:	5ccb      	ldrb	r3, [r1, r3]
 800123a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800123c:	4b27      	ldr	r3, [pc, #156]	@ (80012dc <HAL_RCC_OscConfig+0x368>)
 800123e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001240:	4b27      	ldr	r3, [pc, #156]	@ (80012e0 <HAL_RCC_OscConfig+0x36c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2513      	movs	r5, #19
 8001246:	197c      	adds	r4, r7, r5
 8001248:	0018      	movs	r0, r3
 800124a:	f7ff fbd7 	bl	80009fc <HAL_InitTick>
 800124e:	0003      	movs	r3, r0
 8001250:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001252:	197b      	adds	r3, r7, r5
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d060      	beq.n	800131c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800125a:	197b      	adds	r3, r7, r5
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	e242      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d03f      	beq.n	80012e8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001268:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b16      	ldr	r3, [pc, #88]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 800126e:	2180      	movs	r1, #128	@ 0x80
 8001270:	0049      	lsls	r1, r1, #1
 8001272:	430a      	orrs	r2, r1
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fc07 	bl	8000a88 <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001280:	f7ff fc02 	bl	8000a88 <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e229      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001292:	4b0d      	ldr	r3, [pc, #52]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	@ 0x80
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4013      	ands	r3, r2
 800129c:	d0f0      	beq.n	8001280 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4a10      	ldr	r2, [pc, #64]	@ (80012e4 <HAL_RCC_OscConfig+0x370>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	0019      	movs	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 80012ae:	430a      	orrs	r2, r1
 80012b0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b2:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	0a19      	lsrs	r1, r3, #8
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	061a      	lsls	r2, r3, #24
 80012c0:	4b01      	ldr	r3, [pc, #4]	@ (80012c8 <HAL_RCC_OscConfig+0x354>)
 80012c2:	430a      	orrs	r2, r1
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	e029      	b.n	800131c <HAL_RCC_OscConfig+0x3a8>
 80012c8:	40021000 	.word	0x40021000
 80012cc:	fffeffff 	.word	0xfffeffff
 80012d0:	fffbffff 	.word	0xfffbffff
 80012d4:	ffffe0ff 	.word	0xffffe0ff
 80012d8:	080028b8 	.word	0x080028b8
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000004 	.word	0x20000004
 80012e4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012e8:	4bbd      	ldr	r3, [pc, #756]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4bbc      	ldr	r3, [pc, #752]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 80012ee:	49bd      	ldr	r1, [pc, #756]	@ (80015e4 <HAL_RCC_OscConfig+0x670>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fbc8 	bl	8000a88 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012fe:	f7ff fbc3 	bl	8000a88 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e1ea      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001310:	4bb3      	ldr	r3, [pc, #716]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4013      	ands	r3, r2
 800131a:	d1f0      	bne.n	80012fe <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2208      	movs	r2, #8
 8001322:	4013      	ands	r3, r2
 8001324:	d036      	beq.n	8001394 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d019      	beq.n	8001362 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132e:	4bac      	ldr	r3, [pc, #688]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001330:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001332:	4bab      	ldr	r3, [pc, #684]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001334:	2101      	movs	r1, #1
 8001336:	430a      	orrs	r2, r1
 8001338:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133a:	f7ff fba5 	bl	8000a88 <HAL_GetTick>
 800133e:	0003      	movs	r3, r0
 8001340:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001344:	f7ff fba0 	bl	8000a88 <HAL_GetTick>
 8001348:	0002      	movs	r2, r0
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e1c7      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001356:	4ba2      	ldr	r3, [pc, #648]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800135a:	2202      	movs	r2, #2
 800135c:	4013      	ands	r3, r2
 800135e:	d0f1      	beq.n	8001344 <HAL_RCC_OscConfig+0x3d0>
 8001360:	e018      	b.n	8001394 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001362:	4b9f      	ldr	r3, [pc, #636]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001364:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001366:	4b9e      	ldr	r3, [pc, #632]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001368:	2101      	movs	r1, #1
 800136a:	438a      	bics	r2, r1
 800136c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136e:	f7ff fb8b 	bl	8000a88 <HAL_GetTick>
 8001372:	0003      	movs	r3, r0
 8001374:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001378:	f7ff fb86 	bl	8000a88 <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1ad      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800138a:	4b95      	ldr	r3, [pc, #596]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 800138c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800138e:	2202      	movs	r2, #2
 8001390:	4013      	ands	r3, r2
 8001392:	d1f1      	bne.n	8001378 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2204      	movs	r2, #4
 800139a:	4013      	ands	r3, r2
 800139c:	d100      	bne.n	80013a0 <HAL_RCC_OscConfig+0x42c>
 800139e:	e0ae      	b.n	80014fe <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a0:	2027      	movs	r0, #39	@ 0x27
 80013a2:	183b      	adds	r3, r7, r0
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a8:	4b8d      	ldr	r3, [pc, #564]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 80013aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	055b      	lsls	r3, r3, #21
 80013b0:	4013      	ands	r3, r2
 80013b2:	d109      	bne.n	80013c8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b4:	4b8a      	ldr	r3, [pc, #552]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 80013b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80013b8:	4b89      	ldr	r3, [pc, #548]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 80013ba:	2180      	movs	r1, #128	@ 0x80
 80013bc:	0549      	lsls	r1, r1, #21
 80013be:	430a      	orrs	r2, r1
 80013c0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80013c2:	183b      	adds	r3, r7, r0
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	4b87      	ldr	r3, [pc, #540]	@ (80015e8 <HAL_RCC_OscConfig+0x674>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	2380      	movs	r3, #128	@ 0x80
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4013      	ands	r3, r2
 80013d2:	d11a      	bne.n	800140a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013d4:	4b84      	ldr	r3, [pc, #528]	@ (80015e8 <HAL_RCC_OscConfig+0x674>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b83      	ldr	r3, [pc, #524]	@ (80015e8 <HAL_RCC_OscConfig+0x674>)
 80013da:	2180      	movs	r1, #128	@ 0x80
 80013dc:	0049      	lsls	r1, r1, #1
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e2:	f7ff fb51 	bl	8000a88 <HAL_GetTick>
 80013e6:	0003      	movs	r3, r0
 80013e8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ec:	f7ff fb4c 	bl	8000a88 <HAL_GetTick>
 80013f0:	0002      	movs	r2, r0
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	@ 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e173      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fe:	4b7a      	ldr	r3, [pc, #488]	@ (80015e8 <HAL_RCC_OscConfig+0x674>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	2380      	movs	r3, #128	@ 0x80
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	4013      	ands	r3, r2
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	2380      	movs	r3, #128	@ 0x80
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	429a      	cmp	r2, r3
 8001414:	d107      	bne.n	8001426 <HAL_RCC_OscConfig+0x4b2>
 8001416:	4b72      	ldr	r3, [pc, #456]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001418:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800141a:	4b71      	ldr	r3, [pc, #452]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 800141c:	2180      	movs	r1, #128	@ 0x80
 800141e:	0049      	lsls	r1, r1, #1
 8001420:	430a      	orrs	r2, r1
 8001422:	651a      	str	r2, [r3, #80]	@ 0x50
 8001424:	e031      	b.n	800148a <HAL_RCC_OscConfig+0x516>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x4d4>
 800142e:	4b6c      	ldr	r3, [pc, #432]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001432:	4b6b      	ldr	r3, [pc, #428]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001434:	496b      	ldr	r1, [pc, #428]	@ (80015e4 <HAL_RCC_OscConfig+0x670>)
 8001436:	400a      	ands	r2, r1
 8001438:	651a      	str	r2, [r3, #80]	@ 0x50
 800143a:	4b69      	ldr	r3, [pc, #420]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 800143c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800143e:	4b68      	ldr	r3, [pc, #416]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001440:	496a      	ldr	r1, [pc, #424]	@ (80015ec <HAL_RCC_OscConfig+0x678>)
 8001442:	400a      	ands	r2, r1
 8001444:	651a      	str	r2, [r3, #80]	@ 0x50
 8001446:	e020      	b.n	800148a <HAL_RCC_OscConfig+0x516>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	23a0      	movs	r3, #160	@ 0xa0
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	429a      	cmp	r2, r3
 8001452:	d10e      	bne.n	8001472 <HAL_RCC_OscConfig+0x4fe>
 8001454:	4b62      	ldr	r3, [pc, #392]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001456:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001458:	4b61      	ldr	r3, [pc, #388]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 800145a:	2180      	movs	r1, #128	@ 0x80
 800145c:	00c9      	lsls	r1, r1, #3
 800145e:	430a      	orrs	r2, r1
 8001460:	651a      	str	r2, [r3, #80]	@ 0x50
 8001462:	4b5f      	ldr	r3, [pc, #380]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001464:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001466:	4b5e      	ldr	r3, [pc, #376]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001468:	2180      	movs	r1, #128	@ 0x80
 800146a:	0049      	lsls	r1, r1, #1
 800146c:	430a      	orrs	r2, r1
 800146e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001470:	e00b      	b.n	800148a <HAL_RCC_OscConfig+0x516>
 8001472:	4b5b      	ldr	r3, [pc, #364]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001474:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001476:	4b5a      	ldr	r3, [pc, #360]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001478:	495a      	ldr	r1, [pc, #360]	@ (80015e4 <HAL_RCC_OscConfig+0x670>)
 800147a:	400a      	ands	r2, r1
 800147c:	651a      	str	r2, [r3, #80]	@ 0x50
 800147e:	4b58      	ldr	r3, [pc, #352]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001480:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001482:	4b57      	ldr	r3, [pc, #348]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001484:	4959      	ldr	r1, [pc, #356]	@ (80015ec <HAL_RCC_OscConfig+0x678>)
 8001486:	400a      	ands	r2, r1
 8001488:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d015      	beq.n	80014be <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff faf9 	bl	8000a88 <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800149a:	e009      	b.n	80014b0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149c:	f7ff faf4 	bl	8000a88 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	4a52      	ldr	r2, [pc, #328]	@ (80015f0 <HAL_RCC_OscConfig+0x67c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e11a      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014b0:	4b4b      	ldr	r3, [pc, #300]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 80014b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d0ef      	beq.n	800149c <HAL_RCC_OscConfig+0x528>
 80014bc:	e014      	b.n	80014e8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff fae3 	bl	8000a88 <HAL_GetTick>
 80014c2:	0003      	movs	r3, r0
 80014c4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014c6:	e009      	b.n	80014dc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c8:	f7ff fade 	bl	8000a88 <HAL_GetTick>
 80014cc:	0002      	movs	r2, r0
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	4a47      	ldr	r2, [pc, #284]	@ (80015f0 <HAL_RCC_OscConfig+0x67c>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e104      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014dc:	4b40      	ldr	r3, [pc, #256]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 80014de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014e0:	2380      	movs	r3, #128	@ 0x80
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4013      	ands	r3, r2
 80014e6:	d1ef      	bne.n	80014c8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014e8:	2327      	movs	r3, #39	@ 0x27
 80014ea:	18fb      	adds	r3, r7, r3
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d105      	bne.n	80014fe <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014f2:	4b3b      	ldr	r3, [pc, #236]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 80014f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014f6:	4b3a      	ldr	r3, [pc, #232]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 80014f8:	493e      	ldr	r1, [pc, #248]	@ (80015f4 <HAL_RCC_OscConfig+0x680>)
 80014fa:	400a      	ands	r2, r1
 80014fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2220      	movs	r2, #32
 8001504:	4013      	ands	r3, r2
 8001506:	d049      	beq.n	800159c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d026      	beq.n	800155e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001510:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	4b32      	ldr	r3, [pc, #200]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001516:	2101      	movs	r1, #1
 8001518:	430a      	orrs	r2, r1
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 800151e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001520:	4b2f      	ldr	r3, [pc, #188]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001522:	2101      	movs	r1, #1
 8001524:	430a      	orrs	r2, r1
 8001526:	635a      	str	r2, [r3, #52]	@ 0x34
 8001528:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <HAL_RCC_OscConfig+0x684>)
 800152a:	6a1a      	ldr	r2, [r3, #32]
 800152c:	4b32      	ldr	r3, [pc, #200]	@ (80015f8 <HAL_RCC_OscConfig+0x684>)
 800152e:	2180      	movs	r1, #128	@ 0x80
 8001530:	0189      	lsls	r1, r1, #6
 8001532:	430a      	orrs	r2, r1
 8001534:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff faa7 	bl	8000a88 <HAL_GetTick>
 800153a:	0003      	movs	r3, r0
 800153c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001540:	f7ff faa2 	bl	8000a88 <HAL_GetTick>
 8001544:	0002      	movs	r2, r0
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e0c9      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001552:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2202      	movs	r2, #2
 8001558:	4013      	ands	r3, r2
 800155a:	d0f1      	beq.n	8001540 <HAL_RCC_OscConfig+0x5cc>
 800155c:	e01e      	b.n	800159c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800155e:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001564:	2101      	movs	r1, #1
 8001566:	438a      	bics	r2, r1
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <HAL_RCC_OscConfig+0x684>)
 800156c:	6a1a      	ldr	r2, [r3, #32]
 800156e:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <HAL_RCC_OscConfig+0x684>)
 8001570:	4922      	ldr	r1, [pc, #136]	@ (80015fc <HAL_RCC_OscConfig+0x688>)
 8001572:	400a      	ands	r2, r1
 8001574:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fa87 	bl	8000a88 <HAL_GetTick>
 800157a:	0003      	movs	r3, r0
 800157c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001580:	f7ff fa82 	bl	8000a88 <HAL_GetTick>
 8001584:	0002      	movs	r2, r0
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e0a9      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2202      	movs	r2, #2
 8001598:	4013      	ands	r3, r2
 800159a:	d1f1      	bne.n	8001580 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d100      	bne.n	80015a6 <HAL_RCC_OscConfig+0x632>
 80015a4:	e09e      	b.n	80016e4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	2b0c      	cmp	r3, #12
 80015aa:	d100      	bne.n	80015ae <HAL_RCC_OscConfig+0x63a>
 80015ac:	e077      	b.n	800169e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d158      	bne.n	8001668 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_RCC_OscConfig+0x66c>)
 80015bc:	4910      	ldr	r1, [pc, #64]	@ (8001600 <HAL_RCC_OscConfig+0x68c>)
 80015be:	400a      	ands	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fa61 	bl	8000a88 <HAL_GetTick>
 80015c6:	0003      	movs	r3, r0
 80015c8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015ca:	e01b      	b.n	8001604 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015cc:	f7ff fa5c 	bl	8000a88 <HAL_GetTick>
 80015d0:	0002      	movs	r2, r0
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d914      	bls.n	8001604 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e083      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	40021000 	.word	0x40021000
 80015e4:	fffffeff 	.word	0xfffffeff
 80015e8:	40007000 	.word	0x40007000
 80015ec:	fffffbff 	.word	0xfffffbff
 80015f0:	00001388 	.word	0x00001388
 80015f4:	efffffff 	.word	0xefffffff
 80015f8:	40010000 	.word	0x40010000
 80015fc:	ffffdfff 	.word	0xffffdfff
 8001600:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001604:	4b3a      	ldr	r3, [pc, #232]	@ (80016f0 <HAL_RCC_OscConfig+0x77c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2380      	movs	r3, #128	@ 0x80
 800160a:	049b      	lsls	r3, r3, #18
 800160c:	4013      	ands	r3, r2
 800160e:	d1dd      	bne.n	80015cc <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001610:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <HAL_RCC_OscConfig+0x77c>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4a37      	ldr	r2, [pc, #220]	@ (80016f4 <HAL_RCC_OscConfig+0x780>)
 8001616:	4013      	ands	r3, r2
 8001618:	0019      	movs	r1, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001628:	431a      	orrs	r2, r3
 800162a:	4b31      	ldr	r3, [pc, #196]	@ (80016f0 <HAL_RCC_OscConfig+0x77c>)
 800162c:	430a      	orrs	r2, r1
 800162e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001630:	4b2f      	ldr	r3, [pc, #188]	@ (80016f0 <HAL_RCC_OscConfig+0x77c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b2e      	ldr	r3, [pc, #184]	@ (80016f0 <HAL_RCC_OscConfig+0x77c>)
 8001636:	2180      	movs	r1, #128	@ 0x80
 8001638:	0449      	lsls	r1, r1, #17
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff fa23 	bl	8000a88 <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fa1e 	bl	8000a88 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e045      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800165a:	4b25      	ldr	r3, [pc, #148]	@ (80016f0 <HAL_RCC_OscConfig+0x77c>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	2380      	movs	r3, #128	@ 0x80
 8001660:	049b      	lsls	r3, r3, #18
 8001662:	4013      	ands	r3, r2
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x6d4>
 8001666:	e03d      	b.n	80016e4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <HAL_RCC_OscConfig+0x77c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <HAL_RCC_OscConfig+0x77c>)
 800166e:	4922      	ldr	r1, [pc, #136]	@ (80016f8 <HAL_RCC_OscConfig+0x784>)
 8001670:	400a      	ands	r2, r1
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fa08 	bl	8000a88 <HAL_GetTick>
 8001678:	0003      	movs	r3, r0
 800167a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff fa03 	bl	8000a88 <HAL_GetTick>
 8001682:	0002      	movs	r2, r0
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e02a      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001690:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <HAL_RCC_OscConfig+0x77c>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	@ 0x80
 8001696:	049b      	lsls	r3, r3, #18
 8001698:	4013      	ands	r3, r2
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x70a>
 800169c:	e022      	b.n	80016e4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e01d      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016aa:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_RCC_OscConfig+0x77c>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	2380      	movs	r3, #128	@ 0x80
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	401a      	ands	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	429a      	cmp	r2, r3
 80016be:	d10f      	bne.n	80016e0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	23f0      	movs	r3, #240	@ 0xf0
 80016c4:	039b      	lsls	r3, r3, #14
 80016c6:	401a      	ands	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d107      	bne.n	80016e0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	23c0      	movs	r3, #192	@ 0xc0
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	401a      	ands	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	0018      	movs	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b00a      	add	sp, #40	@ 0x28
 80016ec:	bdb0      	pop	{r4, r5, r7, pc}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	40021000 	.word	0x40021000
 80016f4:	ff02ffff 	.word	0xff02ffff
 80016f8:	feffffff 	.word	0xfeffffff

080016fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e128      	b.n	8001962 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001710:	4b96      	ldr	r3, [pc, #600]	@ (800196c <HAL_RCC_ClockConfig+0x270>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2201      	movs	r2, #1
 8001716:	4013      	ands	r3, r2
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d91e      	bls.n	800175c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171e:	4b93      	ldr	r3, [pc, #588]	@ (800196c <HAL_RCC_ClockConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2201      	movs	r2, #1
 8001724:	4393      	bics	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	4b90      	ldr	r3, [pc, #576]	@ (800196c <HAL_RCC_ClockConfig+0x270>)
 800172a:	683a      	ldr	r2, [r7, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001730:	f7ff f9aa 	bl	8000a88 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001738:	e009      	b.n	800174e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800173a:	f7ff f9a5 	bl	8000a88 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	4a8a      	ldr	r2, [pc, #552]	@ (8001970 <HAL_RCC_ClockConfig+0x274>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e109      	b.n	8001962 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b87      	ldr	r3, [pc, #540]	@ (800196c <HAL_RCC_ClockConfig+0x270>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2201      	movs	r2, #1
 8001754:	4013      	ands	r3, r2
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d1ee      	bne.n	800173a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2202      	movs	r2, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d009      	beq.n	800177a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001766:	4b83      	ldr	r3, [pc, #524]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	22f0      	movs	r2, #240	@ 0xf0
 800176c:	4393      	bics	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	4b7f      	ldr	r3, [pc, #508]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 8001776:	430a      	orrs	r2, r1
 8001778:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	4013      	ands	r3, r2
 8001782:	d100      	bne.n	8001786 <HAL_RCC_ClockConfig+0x8a>
 8001784:	e089      	b.n	800189a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d107      	bne.n	800179e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800178e:	4b79      	ldr	r3, [pc, #484]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	2380      	movs	r3, #128	@ 0x80
 8001794:	029b      	lsls	r3, r3, #10
 8001796:	4013      	ands	r3, r2
 8001798:	d120      	bne.n	80017dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e0e1      	b.n	8001962 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017a6:	4b73      	ldr	r3, [pc, #460]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2380      	movs	r3, #128	@ 0x80
 80017ac:	049b      	lsls	r3, r3, #18
 80017ae:	4013      	ands	r3, r2
 80017b0:	d114      	bne.n	80017dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e0d5      	b.n	8001962 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d106      	bne.n	80017cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017be:	4b6d      	ldr	r3, [pc, #436]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2204      	movs	r2, #4
 80017c4:	4013      	ands	r3, r2
 80017c6:	d109      	bne.n	80017dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0ca      	b.n	8001962 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017cc:	4b69      	ldr	r3, [pc, #420]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	@ 0x80
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4013      	ands	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0c2      	b.n	8001962 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017dc:	4b65      	ldr	r3, [pc, #404]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2203      	movs	r2, #3
 80017e2:	4393      	bics	r3, r2
 80017e4:	0019      	movs	r1, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4b62      	ldr	r3, [pc, #392]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 80017ec:	430a      	orrs	r2, r1
 80017ee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f0:	f7ff f94a 	bl	8000a88 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d111      	bne.n	8001824 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001800:	e009      	b.n	8001816 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001802:	f7ff f941 	bl	8000a88 <HAL_GetTick>
 8001806:	0002      	movs	r2, r0
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	4a58      	ldr	r2, [pc, #352]	@ (8001970 <HAL_RCC_ClockConfig+0x274>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0a5      	b.n	8001962 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001816:	4b57      	ldr	r3, [pc, #348]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	220c      	movs	r2, #12
 800181c:	4013      	ands	r3, r2
 800181e:	2b08      	cmp	r3, #8
 8001820:	d1ef      	bne.n	8001802 <HAL_RCC_ClockConfig+0x106>
 8001822:	e03a      	b.n	800189a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d111      	bne.n	8001850 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182c:	e009      	b.n	8001842 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182e:	f7ff f92b 	bl	8000a88 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	4a4d      	ldr	r2, [pc, #308]	@ (8001970 <HAL_RCC_ClockConfig+0x274>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e08f      	b.n	8001962 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001842:	4b4c      	ldr	r3, [pc, #304]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	220c      	movs	r2, #12
 8001848:	4013      	ands	r3, r2
 800184a:	2b0c      	cmp	r3, #12
 800184c:	d1ef      	bne.n	800182e <HAL_RCC_ClockConfig+0x132>
 800184e:	e024      	b.n	800189a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d11b      	bne.n	8001890 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001858:	e009      	b.n	800186e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185a:	f7ff f915 	bl	8000a88 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	4a42      	ldr	r2, [pc, #264]	@ (8001970 <HAL_RCC_ClockConfig+0x274>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e079      	b.n	8001962 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800186e:	4b41      	ldr	r3, [pc, #260]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	220c      	movs	r2, #12
 8001874:	4013      	ands	r3, r2
 8001876:	2b04      	cmp	r3, #4
 8001878:	d1ef      	bne.n	800185a <HAL_RCC_ClockConfig+0x15e>
 800187a:	e00e      	b.n	800189a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187c:	f7ff f904 	bl	8000a88 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	4a3a      	ldr	r2, [pc, #232]	@ (8001970 <HAL_RCC_ClockConfig+0x274>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e068      	b.n	8001962 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001890:	4b38      	ldr	r3, [pc, #224]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	220c      	movs	r2, #12
 8001896:	4013      	ands	r3, r2
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800189a:	4b34      	ldr	r3, [pc, #208]	@ (800196c <HAL_RCC_ClockConfig+0x270>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2201      	movs	r2, #1
 80018a0:	4013      	ands	r3, r2
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d21e      	bcs.n	80018e6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a8:	4b30      	ldr	r3, [pc, #192]	@ (800196c <HAL_RCC_ClockConfig+0x270>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4393      	bics	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	4b2e      	ldr	r3, [pc, #184]	@ (800196c <HAL_RCC_ClockConfig+0x270>)
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018ba:	f7ff f8e5 	bl	8000a88 <HAL_GetTick>
 80018be:	0003      	movs	r3, r0
 80018c0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	e009      	b.n	80018d8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c4:	f7ff f8e0 	bl	8000a88 <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	4a28      	ldr	r2, [pc, #160]	@ (8001970 <HAL_RCC_ClockConfig+0x274>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e044      	b.n	8001962 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d8:	4b24      	ldr	r3, [pc, #144]	@ (800196c <HAL_RCC_ClockConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2201      	movs	r2, #1
 80018de:	4013      	ands	r3, r2
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d1ee      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2204      	movs	r2, #4
 80018ec:	4013      	ands	r3, r2
 80018ee:	d009      	beq.n	8001904 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4a20      	ldr	r2, [pc, #128]	@ (8001978 <HAL_RCC_ClockConfig+0x27c>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	0019      	movs	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 8001900:	430a      	orrs	r2, r1
 8001902:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2208      	movs	r2, #8
 800190a:	4013      	ands	r3, r2
 800190c:	d00a      	beq.n	8001924 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	4a1a      	ldr	r2, [pc, #104]	@ (800197c <HAL_RCC_ClockConfig+0x280>)
 8001914:	4013      	ands	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	00da      	lsls	r2, r3, #3
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 8001920:	430a      	orrs	r2, r1
 8001922:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001924:	f000 f832 	bl	800198c <HAL_RCC_GetSysClockFreq>
 8001928:	0001      	movs	r1, r0
 800192a:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_RCC_ClockConfig+0x278>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	220f      	movs	r2, #15
 8001932:	4013      	ands	r3, r2
 8001934:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <HAL_RCC_ClockConfig+0x284>)
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	000a      	movs	r2, r1
 800193a:	40da      	lsrs	r2, r3
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_RCC_ClockConfig+0x288>)
 800193e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <HAL_RCC_ClockConfig+0x28c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	250b      	movs	r5, #11
 8001946:	197c      	adds	r4, r7, r5
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff f857 	bl	80009fc <HAL_InitTick>
 800194e:	0003      	movs	r3, r0
 8001950:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001952:	197b      	adds	r3, r7, r5
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800195a:	197b      	adds	r3, r7, r5
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	e000      	b.n	8001962 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	0018      	movs	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	b004      	add	sp, #16
 8001968:	bdb0      	pop	{r4, r5, r7, pc}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	40022000 	.word	0x40022000
 8001970:	00001388 	.word	0x00001388
 8001974:	40021000 	.word	0x40021000
 8001978:	fffff8ff 	.word	0xfffff8ff
 800197c:	ffffc7ff 	.word	0xffffc7ff
 8001980:	080028b8 	.word	0x080028b8
 8001984:	20000000 	.word	0x20000000
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001992:	4b3c      	ldr	r3, [pc, #240]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	220c      	movs	r2, #12
 800199c:	4013      	ands	r3, r2
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	d013      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x3e>
 80019a2:	d85c      	bhi.n	8001a5e <HAL_RCC_GetSysClockFreq+0xd2>
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d002      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x22>
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d00b      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x38>
 80019ac:	e057      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019ae:	4b35      	ldr	r3, [pc, #212]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2210      	movs	r2, #16
 80019b4:	4013      	ands	r3, r2
 80019b6:	d002      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80019b8:	4b33      	ldr	r3, [pc, #204]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019ba:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80019bc:	e05d      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80019be:	4b33      	ldr	r3, [pc, #204]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x100>)
 80019c0:	613b      	str	r3, [r7, #16]
      break;
 80019c2:	e05a      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019c4:	4b32      	ldr	r3, [pc, #200]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x104>)
 80019c6:	613b      	str	r3, [r7, #16]
      break;
 80019c8:	e057      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	0c9b      	lsrs	r3, r3, #18
 80019ce:	220f      	movs	r2, #15
 80019d0:	4013      	ands	r3, r2
 80019d2:	4a30      	ldr	r2, [pc, #192]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0x108>)
 80019d4:	5cd3      	ldrb	r3, [r2, r3]
 80019d6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	0d9b      	lsrs	r3, r3, #22
 80019dc:	2203      	movs	r2, #3
 80019de:	4013      	ands	r3, r2
 80019e0:	3301      	adds	r3, #1
 80019e2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e4:	4b27      	ldr	r3, [pc, #156]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	025b      	lsls	r3, r3, #9
 80019ec:	4013      	ands	r3, r2
 80019ee:	d00f      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	000a      	movs	r2, r1
 80019f4:	0152      	lsls	r2, r2, #5
 80019f6:	1a52      	subs	r2, r2, r1
 80019f8:	0193      	lsls	r3, r2, #6
 80019fa:	1a9b      	subs	r3, r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	185b      	adds	r3, r3, r1
 8001a00:	025b      	lsls	r3, r3, #9
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7fe fb7f 	bl	8000108 <__udivsi3>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e023      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a10:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2210      	movs	r2, #16
 8001a16:	4013      	ands	r3, r2
 8001a18:	d00f      	beq.n	8001a3a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	000a      	movs	r2, r1
 8001a1e:	0152      	lsls	r2, r2, #5
 8001a20:	1a52      	subs	r2, r2, r1
 8001a22:	0193      	lsls	r3, r2, #6
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	185b      	adds	r3, r3, r1
 8001a2a:	021b      	lsls	r3, r3, #8
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f7fe fb6a 	bl	8000108 <__udivsi3>
 8001a34:	0003      	movs	r3, r0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e00e      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001a3a:	68b9      	ldr	r1, [r7, #8]
 8001a3c:	000a      	movs	r2, r1
 8001a3e:	0152      	lsls	r2, r2, #5
 8001a40:	1a52      	subs	r2, r2, r1
 8001a42:	0193      	lsls	r3, r2, #6
 8001a44:	1a9b      	subs	r3, r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	185b      	adds	r3, r3, r1
 8001a4a:	029b      	lsls	r3, r3, #10
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f7fe fb5a 	bl	8000108 <__udivsi3>
 8001a54:	0003      	movs	r3, r0
 8001a56:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
      break;
 8001a5c:	e00d      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	0b5b      	lsrs	r3, r3, #13
 8001a64:	2207      	movs	r2, #7
 8001a66:	4013      	ands	r3, r2
 8001a68:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	2280      	movs	r2, #128	@ 0x80
 8001a70:	0212      	lsls	r2, r2, #8
 8001a72:	409a      	lsls	r2, r3
 8001a74:	0013      	movs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
      break;
 8001a78:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a7a:	693b      	ldr	r3, [r7, #16]
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b006      	add	sp, #24
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	003d0900 	.word	0x003d0900
 8001a8c:	00f42400 	.word	0x00f42400
 8001a90:	007a1200 	.word	0x007a1200
 8001a94:	080028c8 	.word	0x080028c8

08001a98 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001aa0:	2317      	movs	r3, #23
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2220      	movs	r2, #32
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d106      	bne.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2380      	movs	r3, #128	@ 0x80
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4013      	ands	r3, r2
 8001abc:	d100      	bne.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001abe:	e104      	b.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac0:	4bb1      	ldr	r3, [pc, #708]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ac2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ac4:	2380      	movs	r3, #128	@ 0x80
 8001ac6:	055b      	lsls	r3, r3, #21
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d10a      	bne.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001acc:	4bae      	ldr	r3, [pc, #696]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ad0:	4bad      	ldr	r3, [pc, #692]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ad2:	2180      	movs	r1, #128	@ 0x80
 8001ad4:	0549      	lsls	r1, r1, #21
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001ada:	2317      	movs	r3, #23
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae2:	4baa      	ldr	r3, [pc, #680]	@ (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	2380      	movs	r3, #128	@ 0x80
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	d11a      	bne.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aee:	4ba7      	ldr	r3, [pc, #668]	@ (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4ba6      	ldr	r3, [pc, #664]	@ (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001af4:	2180      	movs	r1, #128	@ 0x80
 8001af6:	0049      	lsls	r1, r1, #1
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afc:	f7fe ffc4 	bl	8000a88 <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b04:	e008      	b.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b06:	f7fe ffbf 	bl	8000a88 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b64      	cmp	r3, #100	@ 0x64
 8001b12:	d901      	bls.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e133      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4b9c      	ldr	r3, [pc, #624]	@ (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	@ 0x80
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4013      	ands	r3, r2
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001b24:	4b98      	ldr	r3, [pc, #608]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	23c0      	movs	r3, #192	@ 0xc0
 8001b2a:	039b      	lsls	r3, r3, #14
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	23c0      	movs	r3, #192	@ 0xc0
 8001b36:	039b      	lsls	r3, r3, #14
 8001b38:	4013      	ands	r3, r2
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	23c0      	movs	r3, #192	@ 0xc0
 8001b46:	039b      	lsls	r3, r3, #14
 8001b48:	4013      	ands	r3, r2
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d013      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	23c0      	movs	r3, #192	@ 0xc0
 8001b56:	029b      	lsls	r3, r3, #10
 8001b58:	401a      	ands	r2, r3
 8001b5a:	23c0      	movs	r3, #192	@ 0xc0
 8001b5c:	029b      	lsls	r3, r3, #10
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d10a      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001b62:	4b89      	ldr	r3, [pc, #548]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	029b      	lsls	r3, r3, #10
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	029b      	lsls	r3, r3, #10
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d101      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e103      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b78:	4b83      	ldr	r3, [pc, #524]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001b7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b7c:	23c0      	movs	r3, #192	@ 0xc0
 8001b7e:	029b      	lsls	r3, r3, #10
 8001b80:	4013      	ands	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d049      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	23c0      	movs	r3, #192	@ 0xc0
 8001b90:	029b      	lsls	r3, r3, #10
 8001b92:	4013      	ands	r3, r2
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d004      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d10d      	bne.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	23c0      	movs	r3, #192	@ 0xc0
 8001baa:	029b      	lsls	r3, r3, #10
 8001bac:	4013      	ands	r3, r2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d034      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d02e      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001bc0:	4b71      	ldr	r3, [pc, #452]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc4:	4a72      	ldr	r2, [pc, #456]	@ (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bca:	4b6f      	ldr	r3, [pc, #444]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bce:	4b6e      	ldr	r3, [pc, #440]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bd0:	2180      	movs	r1, #128	@ 0x80
 8001bd2:	0309      	lsls	r1, r1, #12
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bd8:	4b6b      	ldr	r3, [pc, #428]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bdc:	4b6a      	ldr	r3, [pc, #424]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001bde:	496d      	ldr	r1, [pc, #436]	@ (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001be4:	4b68      	ldr	r3, [pc, #416]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	2380      	movs	r3, #128	@ 0x80
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d014      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7fe ff48 	bl	8000a88 <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bfc:	e009      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bfe:	f7fe ff43 	bl	8000a88 <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	4a63      	ldr	r2, [pc, #396]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e0b6      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c12:	4b5d      	ldr	r3, [pc, #372]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c16:	2380      	movs	r3, #128	@ 0x80
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d0ef      	beq.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	2380      	movs	r3, #128	@ 0x80
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	4013      	ands	r3, r2
 8001c28:	d01f      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	23c0      	movs	r3, #192	@ 0xc0
 8001c30:	029b      	lsls	r3, r3, #10
 8001c32:	401a      	ands	r2, r3
 8001c34:	23c0      	movs	r3, #192	@ 0xc0
 8001c36:	029b      	lsls	r3, r3, #10
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d10c      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001c3c:	4b52      	ldr	r3, [pc, #328]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a56      	ldr	r2, [pc, #344]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	23c0      	movs	r3, #192	@ 0xc0
 8001c4c:	039b      	lsls	r3, r3, #14
 8001c4e:	401a      	ands	r2, r3
 8001c50:	4b4d      	ldr	r3, [pc, #308]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	4b4c      	ldr	r3, [pc, #304]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	23c0      	movs	r3, #192	@ 0xc0
 8001c60:	029b      	lsls	r3, r3, #10
 8001c62:	401a      	ands	r2, r3
 8001c64:	4b48      	ldr	r3, [pc, #288]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c66:	430a      	orrs	r2, r1
 8001c68:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	4013      	ands	r3, r2
 8001c72:	d01f      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	23c0      	movs	r3, #192	@ 0xc0
 8001c7a:	029b      	lsls	r3, r3, #10
 8001c7c:	401a      	ands	r2, r3
 8001c7e:	23c0      	movs	r3, #192	@ 0xc0
 8001c80:	029b      	lsls	r3, r3, #10
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001c86:	4b40      	ldr	r3, [pc, #256]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a44      	ldr	r2, [pc, #272]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	0019      	movs	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	23c0      	movs	r3, #192	@ 0xc0
 8001c96:	039b      	lsls	r3, r3, #14
 8001c98:	401a      	ands	r2, r3
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	4b39      	ldr	r3, [pc, #228]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ca2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	23c0      	movs	r3, #192	@ 0xc0
 8001caa:	029b      	lsls	r3, r3, #10
 8001cac:	401a      	ands	r2, r3
 8001cae:	4b36      	ldr	r3, [pc, #216]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cb4:	2317      	movs	r3, #23
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d105      	bne.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbe:	4b32      	ldr	r3, [pc, #200]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cc2:	4b31      	ldr	r3, [pc, #196]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cc4:	4936      	ldr	r1, [pc, #216]	@ (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001cc6:	400a      	ands	r2, r1
 8001cc8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d009      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd8:	2203      	movs	r2, #3
 8001cda:	4393      	bics	r3, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	4b29      	ldr	r3, [pc, #164]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2202      	movs	r2, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cf2:	4b25      	ldr	r3, [pc, #148]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	4393      	bics	r3, r2
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d02:	430a      	orrs	r2, r1
 8001d04:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d009      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d10:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d14:	4a23      	ldr	r2, [pc, #140]	@ (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d32:	4a1d      	ldr	r2, [pc, #116]	@ (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699a      	ldr	r2, [r3, #24]
 8001d3c:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2240      	movs	r2, #64	@ 0x40
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d009      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d50:	4a16      	ldr	r2, [pc, #88]	@ (8001dac <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1a      	ldr	r2, [r3, #32]
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2280      	movs	r2, #128	@ 0x80
 8001d66:	4013      	ands	r3, r2
 8001d68:	d009      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001d6a:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	4a10      	ldr	r2, [pc, #64]	@ (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69da      	ldr	r2, [r3, #28]
 8001d78:	4b03      	ldr	r3, [pc, #12]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b006      	add	sp, #24
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	fffcffff 	.word	0xfffcffff
 8001d94:	fff7ffff 	.word	0xfff7ffff
 8001d98:	00001388 	.word	0x00001388
 8001d9c:	ffcfffff 	.word	0xffcfffff
 8001da0:	efffffff 	.word	0xefffffff
 8001da4:	fffff3ff 	.word	0xfffff3ff
 8001da8:	ffffcfff 	.word	0xffffcfff
 8001dac:	fbffffff 	.word	0xfbffffff
 8001db0:	fff3ffff 	.word	0xfff3ffff

08001db4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001db4:	b5b0      	push	{r4, r5, r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e088      	b.n	8001ee0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2221      	movs	r2, #33	@ 0x21
 8001dd2:	5c9b      	ldrb	r3, [r3, r2]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d107      	bne.n	8001dea <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	2100      	movs	r1, #0
 8001de0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7fe fd47 	bl	8000878 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2221      	movs	r2, #33	@ 0x21
 8001dee:	2102      	movs	r1, #2
 8001df0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d05f      	beq.n	8001ec0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	22ca      	movs	r2, #202	@ 0xca
 8001e06:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2253      	movs	r2, #83	@ 0x53
 8001e0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001e10:	250f      	movs	r5, #15
 8001e12:	197c      	adds	r4, r7, r5
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	0018      	movs	r0, r3
 8001e18:	f000 fa7c 	bl	8002314 <RTC_EnterInitMode>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8001e20:	0028      	movs	r0, r5
 8001e22:	183b      	adds	r3, r7, r0
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d12c      	bne.n	8001e84 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	492c      	ldr	r1, [pc, #176]	@ (8001ee8 <HAL_RTC_Init+0x134>)
 8001e36:	400a      	ands	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	68d2      	ldr	r2, [r2, #12]
 8001e60:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6919      	ldr	r1, [r3, #16]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	041a      	lsls	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001e76:	183c      	adds	r4, r7, r0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f000 fa8e 	bl	800239c <RTC_ExitInitMode>
 8001e80:	0003      	movs	r3, r0
 8001e82:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8001e84:	230f      	movs	r3, #15
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d113      	bne.n	8001eb6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2103      	movs	r1, #3
 8001e9a:	438a      	bics	r2, r1
 8001e9c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69da      	ldr	r2, [r3, #28]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	22ff      	movs	r2, #255	@ 0xff
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ebe:	e003      	b.n	8001ec8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8001ec8:	230f      	movs	r3, #15
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d103      	bne.n	8001eda <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2221      	movs	r2, #33	@ 0x21
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001eda:	230f      	movs	r3, #15
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	781b      	ldrb	r3, [r3, #0]
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b004      	add	sp, #16
 8001ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee8:	ff8fffbf 	.word	0xff8fffbf

08001eec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001eec:	b5b0      	push	{r4, r5, r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	5c9b      	ldrb	r3, [r3, r2]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_RTC_SetTime+0x1e>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e092      	b.n	8002030 <HAL_RTC_SetTime+0x144>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	2101      	movs	r1, #1
 8001f10:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2221      	movs	r2, #33	@ 0x21
 8001f16:	2102      	movs	r1, #2
 8001f18:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d125      	bne.n	8001f6c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2240      	movs	r2, #64	@ 0x40
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d102      	bne.n	8001f32 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	0018      	movs	r0, r3
 8001f38:	f000 fa5a 	bl	80023f0 <RTC_ByteToBcd2>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	785b      	ldrb	r3, [r3, #1]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 fa53 	bl	80023f0 <RTC_ByteToBcd2>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f4e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	789b      	ldrb	r3, [r3, #2]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f000 fa4b 	bl	80023f0 <RTC_ByteToBcd2>
 8001f5a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001f5c:	0022      	movs	r2, r4
 8001f5e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	78db      	ldrb	r3, [r3, #3]
 8001f64:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e017      	b.n	8001f9c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2240      	movs	r2, #64	@ 0x40
 8001f74:	4013      	ands	r3, r2
 8001f76:	d102      	bne.n	8001f7e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	785b      	ldrb	r3, [r3, #1]
 8001f88:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f8a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001f90:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	78db      	ldrb	r3, [r3, #3]
 8001f96:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	22ca      	movs	r2, #202	@ 0xca
 8001fa2:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2253      	movs	r2, #83	@ 0x53
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001fac:	2513      	movs	r5, #19
 8001fae:	197c      	adds	r4, r7, r5
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 f9ae 	bl	8002314 <RTC_EnterInitMode>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001fbc:	0028      	movs	r0, r5
 8001fbe:	183b      	adds	r3, r7, r0
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d120      	bne.n	8002008 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	491a      	ldr	r1, [pc, #104]	@ (8002038 <HAL_RTC_SetTime+0x14c>)
 8001fce:	400a      	ands	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4917      	ldr	r1, [pc, #92]	@ (800203c <HAL_RTC_SetTime+0x150>)
 8001fde:	400a      	ands	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6899      	ldr	r1, [r3, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001ffa:	183c      	adds	r4, r7, r0
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 f9cc 	bl	800239c <RTC_ExitInitMode>
 8002004:	0003      	movs	r3, r0
 8002006:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002008:	2313      	movs	r3, #19
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d103      	bne.n	800201a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2221      	movs	r2, #33	@ 0x21
 8002016:	2101      	movs	r1, #1
 8002018:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	22ff      	movs	r2, #255	@ 0xff
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	2100      	movs	r1, #0
 8002028:	5499      	strb	r1, [r3, r2]

  return status;
 800202a:	2313      	movs	r3, #19
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	781b      	ldrb	r3, [r3, #0]
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	b006      	add	sp, #24
 8002036:	bdb0      	pop	{r4, r5, r7, pc}
 8002038:	007f7f7f 	.word	0x007f7f7f
 800203c:	fffbffff 	.word	0xfffbffff

08002040 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	045b      	lsls	r3, r3, #17
 8002062:	0c5a      	lsrs	r2, r3, #17
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a22      	ldr	r2, [pc, #136]	@ (80020f8 <HAL_RTC_GetTime+0xb8>)
 8002070:	4013      	ands	r3, r2
 8002072:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	0c1b      	lsrs	r3, r3, #16
 8002078:	b2db      	uxtb	r3, r3
 800207a:	223f      	movs	r2, #63	@ 0x3f
 800207c:	4013      	ands	r3, r2
 800207e:	b2da      	uxtb	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	b2db      	uxtb	r3, r3
 800208a:	227f      	movs	r2, #127	@ 0x7f
 800208c:	4013      	ands	r3, r2
 800208e:	b2da      	uxtb	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	227f      	movs	r2, #127	@ 0x7f
 800209a:	4013      	ands	r3, r2
 800209c:	b2da      	uxtb	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	0d9b      	lsrs	r3, r3, #22
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2201      	movs	r2, #1
 80020aa:	4013      	ands	r3, r2
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d11a      	bne.n	80020ee <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 f9b8 	bl	8002432 <RTC_Bcd2ToByte>
 80020c2:	0003      	movs	r3, r0
 80020c4:	001a      	movs	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	785b      	ldrb	r3, [r3, #1]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 f9af 	bl	8002432 <RTC_Bcd2ToByte>
 80020d4:	0003      	movs	r3, r0
 80020d6:	001a      	movs	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	789b      	ldrb	r3, [r3, #2]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 f9a6 	bl	8002432 <RTC_Bcd2ToByte>
 80020e6:	0003      	movs	r3, r0
 80020e8:	001a      	movs	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b006      	add	sp, #24
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	007f7f7f 	.word	0x007f7f7f

080020fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80020fc:	b5b0      	push	{r4, r5, r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2220      	movs	r2, #32
 8002110:	5c9b      	ldrb	r3, [r3, r2]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_RTC_SetDate+0x1e>
 8002116:	2302      	movs	r3, #2
 8002118:	e07e      	b.n	8002218 <HAL_RTC_SetDate+0x11c>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2220      	movs	r2, #32
 800211e:	2101      	movs	r1, #1
 8002120:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2221      	movs	r2, #33	@ 0x21
 8002126:	2102      	movs	r1, #2
 8002128:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10e      	bne.n	800214e <HAL_RTC_SetDate+0x52>
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	785b      	ldrb	r3, [r3, #1]
 8002134:	001a      	movs	r2, r3
 8002136:	2310      	movs	r3, #16
 8002138:	4013      	ands	r3, r2
 800213a:	d008      	beq.n	800214e <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	785b      	ldrb	r3, [r3, #1]
 8002140:	2210      	movs	r2, #16
 8002142:	4393      	bics	r3, r2
 8002144:	b2db      	uxtb	r3, r3
 8002146:	330a      	adds	r3, #10
 8002148:	b2da      	uxtb	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d11c      	bne.n	800218e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	78db      	ldrb	r3, [r3, #3]
 8002158:	0018      	movs	r0, r3
 800215a:	f000 f949 	bl	80023f0 <RTC_ByteToBcd2>
 800215e:	0003      	movs	r3, r0
 8002160:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	785b      	ldrb	r3, [r3, #1]
 8002166:	0018      	movs	r0, r3
 8002168:	f000 f942 	bl	80023f0 <RTC_ByteToBcd2>
 800216c:	0003      	movs	r3, r0
 800216e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002170:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	789b      	ldrb	r3, [r3, #2]
 8002176:	0018      	movs	r0, r3
 8002178:	f000 f93a 	bl	80023f0 <RTC_ByteToBcd2>
 800217c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800217e:	0022      	movs	r2, r4
 8002180:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e00e      	b.n	80021ac <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	78db      	ldrb	r3, [r3, #3]
 8002192:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	785b      	ldrb	r3, [r3, #1]
 8002198:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800219a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80021a0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80021a8:	4313      	orrs	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	22ca      	movs	r2, #202	@ 0xca
 80021b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2253      	movs	r2, #83	@ 0x53
 80021ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80021bc:	2513      	movs	r5, #19
 80021be:	197c      	adds	r4, r7, r5
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f8a6 	bl	8002314 <RTC_EnterInitMode>
 80021c8:	0003      	movs	r3, r0
 80021ca:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80021cc:	0028      	movs	r0, r5
 80021ce:	183b      	adds	r3, r7, r0
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4910      	ldr	r1, [pc, #64]	@ (8002220 <HAL_RTC_SetDate+0x124>)
 80021de:	400a      	ands	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80021e2:	183c      	adds	r4, r7, r0
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	0018      	movs	r0, r3
 80021e8:	f000 f8d8 	bl	800239c <RTC_ExitInitMode>
 80021ec:	0003      	movs	r3, r0
 80021ee:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80021f0:	2313      	movs	r3, #19
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2221      	movs	r2, #33	@ 0x21
 80021fe:	2101      	movs	r1, #1
 8002200:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	22ff      	movs	r2, #255	@ 0xff
 8002208:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2220      	movs	r2, #32
 800220e:	2100      	movs	r1, #0
 8002210:	5499      	strb	r1, [r3, r2]

  return status;
 8002212:	2313      	movs	r3, #19
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	781b      	ldrb	r3, [r3, #0]
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b006      	add	sp, #24
 800221e:	bdb0      	pop	{r4, r5, r7, pc}
 8002220:	00ffff3f 	.word	0x00ffff3f

08002224 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	4a21      	ldr	r2, [pc, #132]	@ (80022c0 <HAL_RTC_GetDate+0x9c>)
 800223c:	4013      	ands	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	0c1b      	lsrs	r3, r3, #16
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	b2db      	uxtb	r3, r3
 8002250:	221f      	movs	r2, #31
 8002252:	4013      	ands	r3, r2
 8002254:	b2da      	uxtb	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	223f      	movs	r2, #63	@ 0x3f
 8002260:	4013      	ands	r3, r2
 8002262:	b2da      	uxtb	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	0b5b      	lsrs	r3, r3, #13
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2207      	movs	r2, #7
 8002270:	4013      	ands	r3, r2
 8002272:	b2da      	uxtb	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d11a      	bne.n	80022b4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	78db      	ldrb	r3, [r3, #3]
 8002282:	0018      	movs	r0, r3
 8002284:	f000 f8d5 	bl	8002432 <RTC_Bcd2ToByte>
 8002288:	0003      	movs	r3, r0
 800228a:	001a      	movs	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	785b      	ldrb	r3, [r3, #1]
 8002294:	0018      	movs	r0, r3
 8002296:	f000 f8cc 	bl	8002432 <RTC_Bcd2ToByte>
 800229a:	0003      	movs	r3, r0
 800229c:	001a      	movs	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	789b      	ldrb	r3, [r3, #2]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 f8c3 	bl	8002432 <RTC_Bcd2ToByte>
 80022ac:	0003      	movs	r3, r0
 80022ae:	001a      	movs	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b006      	add	sp, #24
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	00ffff3f 	.word	0x00ffff3f

080022c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002310 <HAL_RTC_WaitForSynchro+0x4c>)
 80022d6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d8:	f7fe fbd6 	bl	8000a88 <HAL_GetTick>
 80022dc:	0003      	movs	r3, r0
 80022de:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80022e0:	e00a      	b.n	80022f8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022e2:	f7fe fbd1 	bl	8000a88 <HAL_GetTick>
 80022e6:	0002      	movs	r2, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1ad2      	subs	r2, r2, r3
 80022ec:	23fa      	movs	r3, #250	@ 0xfa
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d901      	bls.n	80022f8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e006      	b.n	8002306 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	2220      	movs	r2, #32
 8002300:	4013      	ands	r3, r2
 8002302:	d0ee      	beq.n	80022e2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b004      	add	sp, #16
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	00017f5f 	.word	0x00017f5f

08002314 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002320:	230f      	movs	r3, #15
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2240      	movs	r2, #64	@ 0x40
 8002330:	4013      	ands	r3, r2
 8002332:	d12c      	bne.n	800238e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2180      	movs	r1, #128	@ 0x80
 8002340:	430a      	orrs	r2, r1
 8002342:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002344:	f7fe fba0 	bl	8000a88 <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800234c:	e014      	b.n	8002378 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800234e:	f7fe fb9b 	bl	8000a88 <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	1ad2      	subs	r2, r2, r3
 8002358:	200f      	movs	r0, #15
 800235a:	183b      	adds	r3, r7, r0
 800235c:	1839      	adds	r1, r7, r0
 800235e:	7809      	ldrb	r1, [r1, #0]
 8002360:	7019      	strb	r1, [r3, #0]
 8002362:	23fa      	movs	r3, #250	@ 0xfa
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	429a      	cmp	r2, r3
 8002368:	d906      	bls.n	8002378 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2221      	movs	r2, #33	@ 0x21
 800236e:	2104      	movs	r1, #4
 8002370:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002372:	183b      	adds	r3, r7, r0
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2240      	movs	r2, #64	@ 0x40
 8002380:	4013      	ands	r3, r2
 8002382:	d104      	bne.n	800238e <RTC_EnterInitMode+0x7a>
 8002384:	230f      	movs	r3, #15
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d1df      	bne.n	800234e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800238e:	230f      	movs	r3, #15
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	781b      	ldrb	r3, [r3, #0]
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b004      	add	sp, #16
 800239a:	bd80      	pop	{r7, pc}

0800239c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a4:	240f      	movs	r4, #15
 80023a6:	193b      	adds	r3, r7, r4
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2180      	movs	r1, #128	@ 0x80
 80023b8:	438a      	bics	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2220      	movs	r2, #32
 80023c4:	4013      	ands	r3, r2
 80023c6:	d10c      	bne.n	80023e2 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7ff ff7a 	bl	80022c4 <HAL_RTC_WaitForSynchro>
 80023d0:	1e03      	subs	r3, r0, #0
 80023d2:	d006      	beq.n	80023e2 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2221      	movs	r2, #33	@ 0x21
 80023d8:	2104      	movs	r1, #4
 80023da:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80023dc:	193b      	adds	r3, r7, r4
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80023e2:	230f      	movs	r3, #15
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	781b      	ldrb	r3, [r3, #0]
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b005      	add	sp, #20
 80023ee:	bd90      	pop	{r4, r7, pc}

080023f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	0002      	movs	r2, r0
 80023f8:	1dfb      	adds	r3, r7, #7
 80023fa:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002400:	e007      	b.n	8002412 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3301      	adds	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	1dfa      	adds	r2, r7, #7
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	3a0a      	subs	r2, #10
 8002410:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b09      	cmp	r3, #9
 8002418:	d8f3      	bhi.n	8002402 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	b2da      	uxtb	r2, r3
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	b2db      	uxtb	r3, r3
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b004      	add	sp, #16
 8002430:	bd80      	pop	{r7, pc}

08002432 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	0002      	movs	r2, r0
 800243a:	1dfb      	adds	r3, r7, #7
 800243c:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002442:	1dfb      	adds	r3, r7, #7
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	b2db      	uxtb	r3, r3
 800244a:	001a      	movs	r2, r3
 800244c:	0013      	movs	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	189b      	adds	r3, r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	1dfb      	adds	r3, r7, #7
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	210f      	movs	r1, #15
 8002460:	400b      	ands	r3, r1
 8002462:	b2db      	uxtb	r3, r3
 8002464:	18d3      	adds	r3, r2, r3
 8002466:	b2db      	uxtb	r3, r3
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b004      	add	sp, #16
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e088      	b.n	8002596 <HAL_TIM_Encoder_Init+0x126>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2239      	movs	r2, #57	@ 0x39
 8002488:	5c9b      	ldrb	r3, [r3, r2]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d107      	bne.n	80024a0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2238      	movs	r2, #56	@ 0x38
 8002494:	2100      	movs	r1, #0
 8002496:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	0018      	movs	r0, r3
 800249c:	f7fe fa04 	bl	80008a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2239      	movs	r2, #57	@ 0x39
 80024a4:	2102      	movs	r1, #2
 80024a6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	493b      	ldr	r1, [pc, #236]	@ (80025a0 <HAL_TIM_Encoder_Init+0x130>)
 80024b4:	400a      	ands	r2, r1
 80024b6:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3304      	adds	r3, #4
 80024c0:	0019      	movs	r1, r3
 80024c2:	0010      	movs	r0, r2
 80024c4:	f000 f8ea 	bl	800269c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4a2d      	ldr	r2, [pc, #180]	@ (80025a4 <HAL_TIM_Encoder_Init+0x134>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	4313      	orrs	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4a28      	ldr	r2, [pc, #160]	@ (80025a8 <HAL_TIM_Encoder_Init+0x138>)
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4a27      	ldr	r2, [pc, #156]	@ (80025ac <HAL_TIM_Encoder_Init+0x13c>)
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	4313      	orrs	r3, r2
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	011a      	lsls	r2, r3, #4
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	031b      	lsls	r3, r3, #12
 8002532:	4313      	orrs	r3, r2
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2222      	movs	r2, #34	@ 0x22
 800253e:	4393      	bics	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2288      	movs	r2, #136	@ 0x88
 8002546:	4393      	bics	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	4313      	orrs	r3, r2
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	223e      	movs	r2, #62	@ 0x3e
 8002578:	2101      	movs	r1, #1
 800257a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	223a      	movs	r2, #58	@ 0x3a
 8002580:	2101      	movs	r1, #1
 8002582:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	223b      	movs	r2, #59	@ 0x3b
 8002588:	2101      	movs	r1, #1
 800258a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2239      	movs	r2, #57	@ 0x39
 8002590:	2101      	movs	r1, #1
 8002592:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b006      	add	sp, #24
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	ffffbff8 	.word	0xffffbff8
 80025a4:	fffffcfc 	.word	0xfffffcfc
 80025a8:	fffff3f3 	.word	0xfffff3f3
 80025ac:	ffff0f0f 	.word	0xffff0f0f

080025b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80025ba:	200f      	movs	r0, #15
 80025bc:	183b      	adds	r3, r7, r0
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	213a      	movs	r1, #58	@ 0x3a
 80025c2:	5c52      	ldrb	r2, [r2, r1]
 80025c4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80025c6:	230e      	movs	r3, #14
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	213b      	movs	r1, #59	@ 0x3b
 80025ce:	5c52      	ldrb	r2, [r2, r1]
 80025d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10a      	bne.n	80025ee <HAL_TIM_Encoder_Start+0x3e>
  {
    if (channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025d8:	183b      	adds	r3, r7, r0
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d001      	beq.n	80025e4 <HAL_TIM_Encoder_Start+0x34>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e056      	b.n	8002692 <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	223a      	movs	r2, #58	@ 0x3a
 80025e8:	2102      	movs	r1, #2
 80025ea:	5499      	strb	r1, [r3, r2]
 80025ec:	e022      	b.n	8002634 <HAL_TIM_Encoder_Start+0x84>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d10b      	bne.n	800260c <HAL_TIM_Encoder_Start+0x5c>
  {
    if (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80025f4:	230e      	movs	r3, #14
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d001      	beq.n	8002602 <HAL_TIM_Encoder_Start+0x52>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e047      	b.n	8002692 <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	223b      	movs	r2, #59	@ 0x3b
 8002606:	2102      	movs	r1, #2
 8002608:	5499      	strb	r1, [r3, r2]
 800260a:	e013      	b.n	8002634 <HAL_TIM_Encoder_Start+0x84>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800260c:	230f      	movs	r3, #15
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d104      	bne.n	8002620 <HAL_TIM_Encoder_Start+0x70>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002616:	230e      	movs	r3, #14
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d001      	beq.n	8002624 <HAL_TIM_Encoder_Start+0x74>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e036      	b.n	8002692 <HAL_TIM_Encoder_Start+0xe2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	223a      	movs	r2, #58	@ 0x3a
 8002628:	2102      	movs	r1, #2
 800262a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	223b      	movs	r2, #59	@ 0x3b
 8002630:	2102      	movs	r1, #2
 8002632:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_TIM_Encoder_Start+0x92>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b04      	cmp	r3, #4
 800263e:	d008      	beq.n	8002652 <HAL_TIM_Encoder_Start+0xa2>
 8002640:	e00f      	b.n	8002662 <HAL_TIM_Encoder_Start+0xb2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2201      	movs	r2, #1
 8002648:	2100      	movs	r1, #0
 800264a:	0018      	movs	r0, r3
 800264c:	f000 f880 	bl	8002750 <TIM_CCxChannelCmd>
      break;
 8002650:	e016      	b.n	8002680 <HAL_TIM_Encoder_Start+0xd0>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	2104      	movs	r1, #4
 800265a:	0018      	movs	r0, r3
 800265c:	f000 f878 	bl	8002750 <TIM_CCxChannelCmd>
      break;
 8002660:	e00e      	b.n	8002680 <HAL_TIM_Encoder_Start+0xd0>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	2100      	movs	r1, #0
 800266a:	0018      	movs	r0, r3
 800266c:	f000 f870 	bl	8002750 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	2104      	movs	r1, #4
 8002678:	0018      	movs	r0, r3
 800267a:	f000 f869 	bl	8002750 <TIM_CCxChannelCmd>
      break;
 800267e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2101      	movs	r1, #1
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b004      	add	sp, #16
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	2380      	movs	r3, #128	@ 0x80
 80026b0:	05db      	lsls	r3, r3, #23
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d007      	beq.n	80026c6 <TIM_Base_SetConfig+0x2a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a22      	ldr	r2, [pc, #136]	@ (8002744 <TIM_Base_SetConfig+0xa8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d003      	beq.n	80026c6 <TIM_Base_SetConfig+0x2a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a21      	ldr	r2, [pc, #132]	@ (8002748 <TIM_Base_SetConfig+0xac>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d108      	bne.n	80026d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2270      	movs	r2, #112	@ 0x70
 80026ca:	4393      	bics	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	2380      	movs	r3, #128	@ 0x80
 80026dc:	05db      	lsls	r3, r3, #23
 80026de:	429a      	cmp	r2, r3
 80026e0:	d007      	beq.n	80026f2 <TIM_Base_SetConfig+0x56>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a17      	ldr	r2, [pc, #92]	@ (8002744 <TIM_Base_SetConfig+0xa8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d003      	beq.n	80026f2 <TIM_Base_SetConfig+0x56>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a16      	ldr	r2, [pc, #88]	@ (8002748 <TIM_Base_SetConfig+0xac>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d108      	bne.n	8002704 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4a15      	ldr	r2, [pc, #84]	@ (800274c <TIM_Base_SetConfig+0xb0>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2280      	movs	r2, #128	@ 0x80
 8002708:	4393      	bics	r3, r2
 800270a:	001a      	movs	r2, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2204      	movs	r2, #4
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	601a      	str	r2, [r3, #0]
}
 800273c:	46c0      	nop			@ (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b004      	add	sp, #16
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40010800 	.word	0x40010800
 8002748:	40011400 	.word	0x40011400
 800274c:	fffffcff 	.word	0xfffffcff

08002750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	221f      	movs	r2, #31
 8002760:	4013      	ands	r3, r2
 8002762:	2201      	movs	r2, #1
 8002764:	409a      	lsls	r2, r3
 8002766:	0013      	movs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	43d2      	mvns	r2, r2
 8002772:	401a      	ands	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	211f      	movs	r1, #31
 8002780:	400b      	ands	r3, r1
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4099      	lsls	r1, r3
 8002786:	000b      	movs	r3, r1
 8002788:	431a      	orrs	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	621a      	str	r2, [r3, #32]
}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	b006      	add	sp, #24
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2238      	movs	r2, #56	@ 0x38
 80027a6:	5c9b      	ldrb	r3, [r3, r2]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e042      	b.n	8002836 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2238      	movs	r2, #56	@ 0x38
 80027b4:	2101      	movs	r1, #1
 80027b6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2239      	movs	r2, #57	@ 0x39
 80027bc:	2102      	movs	r1, #2
 80027be:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2270      	movs	r2, #112	@ 0x70
 80027d4:	4393      	bics	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	2380      	movs	r3, #128	@ 0x80
 80027f0:	05db      	lsls	r3, r3, #23
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d009      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a11      	ldr	r2, [pc, #68]	@ (8002840 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d004      	beq.n	800280a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0f      	ldr	r2, [pc, #60]	@ (8002844 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10c      	bne.n	8002824 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2280      	movs	r2, #128	@ 0x80
 800280e:	4393      	bics	r3, r2
 8002810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	4313      	orrs	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2239      	movs	r2, #57	@ 0x39
 8002828:	2101      	movs	r1, #1
 800282a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2238      	movs	r2, #56	@ 0x38
 8002830:	2100      	movs	r1, #0
 8002832:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b004      	add	sp, #16
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	40010800 	.word	0x40010800
 8002844:	40011400 	.word	0x40011400

08002848 <memset>:
 8002848:	0003      	movs	r3, r0
 800284a:	1882      	adds	r2, r0, r2
 800284c:	4293      	cmp	r3, r2
 800284e:	d100      	bne.n	8002852 <memset+0xa>
 8002850:	4770      	bx	lr
 8002852:	7019      	strb	r1, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	e7f9      	b.n	800284c <memset+0x4>

08002858 <__libc_init_array>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	2600      	movs	r6, #0
 800285c:	4c0c      	ldr	r4, [pc, #48]	@ (8002890 <__libc_init_array+0x38>)
 800285e:	4d0d      	ldr	r5, [pc, #52]	@ (8002894 <__libc_init_array+0x3c>)
 8002860:	1b64      	subs	r4, r4, r5
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	42a6      	cmp	r6, r4
 8002866:	d109      	bne.n	800287c <__libc_init_array+0x24>
 8002868:	2600      	movs	r6, #0
 800286a:	f000 f819 	bl	80028a0 <_init>
 800286e:	4c0a      	ldr	r4, [pc, #40]	@ (8002898 <__libc_init_array+0x40>)
 8002870:	4d0a      	ldr	r5, [pc, #40]	@ (800289c <__libc_init_array+0x44>)
 8002872:	1b64      	subs	r4, r4, r5
 8002874:	10a4      	asrs	r4, r4, #2
 8002876:	42a6      	cmp	r6, r4
 8002878:	d105      	bne.n	8002886 <__libc_init_array+0x2e>
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	00b3      	lsls	r3, r6, #2
 800287e:	58eb      	ldr	r3, [r5, r3]
 8002880:	4798      	blx	r3
 8002882:	3601      	adds	r6, #1
 8002884:	e7ee      	b.n	8002864 <__libc_init_array+0xc>
 8002886:	00b3      	lsls	r3, r6, #2
 8002888:	58eb      	ldr	r3, [r5, r3]
 800288a:	4798      	blx	r3
 800288c:	3601      	adds	r6, #1
 800288e:	e7f2      	b.n	8002876 <__libc_init_array+0x1e>
 8002890:	080028d4 	.word	0x080028d4
 8002894:	080028d4 	.word	0x080028d4
 8002898:	080028d8 	.word	0x080028d8
 800289c:	080028d4 	.word	0x080028d4

080028a0 <_init>:
 80028a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a2:	46c0      	nop			@ (mov r8, r8)
 80028a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028a6:	bc08      	pop	{r3}
 80028a8:	469e      	mov	lr, r3
 80028aa:	4770      	bx	lr

080028ac <_fini>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b2:	bc08      	pop	{r3}
 80028b4:	469e      	mov	lr, r3
 80028b6:	4770      	bx	lr

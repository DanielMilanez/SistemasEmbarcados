
Projeto Controle PWM por serial comunicate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000371c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080037dc  080037dc  000047dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d8  080038d8  0000506c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080038d8  080038d8  000048d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038e0  080038e0  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e0  080038e0  000048e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038e4  080038e4  000048e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080038e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000006c  08003954  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08003954  0000528c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081e7  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000157f  00000000  00000000  0000d27b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000e800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000054a  00000000  00000000  0000eee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b70  00000000  00000000  0000f432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009775  00000000  00000000  00022fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000789a6  00000000  00000000  0002c717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a50bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d34  00000000  00000000  000a5100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  000a6e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037c4 	.word	0x080037c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	080037c4 	.word	0x080037c4

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_uldivmod>:
 8000258:	2b00      	cmp	r3, #0
 800025a:	d111      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 800025c:	2a00      	cmp	r2, #0
 800025e:	d10f      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 8000260:	2900      	cmp	r1, #0
 8000262:	d100      	bne.n	8000266 <__aeabi_uldivmod+0xe>
 8000264:	2800      	cmp	r0, #0
 8000266:	d002      	beq.n	800026e <__aeabi_uldivmod+0x16>
 8000268:	2100      	movs	r1, #0
 800026a:	43c9      	mvns	r1, r1
 800026c:	0008      	movs	r0, r1
 800026e:	b407      	push	{r0, r1, r2}
 8000270:	4802      	ldr	r0, [pc, #8]	@ (800027c <__aeabi_uldivmod+0x24>)
 8000272:	a102      	add	r1, pc, #8	@ (adr r1, 800027c <__aeabi_uldivmod+0x24>)
 8000274:	1840      	adds	r0, r0, r1
 8000276:	9002      	str	r0, [sp, #8]
 8000278:	bd03      	pop	{r0, r1, pc}
 800027a:	46c0      	nop			@ (mov r8, r8)
 800027c:	ffffffd9 	.word	0xffffffd9
 8000280:	b403      	push	{r0, r1}
 8000282:	4668      	mov	r0, sp
 8000284:	b501      	push	{r0, lr}
 8000286:	9802      	ldr	r0, [sp, #8]
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	9b01      	ldr	r3, [sp, #4]
 800028e:	469e      	mov	lr, r3
 8000290:	b002      	add	sp, #8
 8000292:	bc0c      	pop	{r2, r3}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			@ (mov r8, r8)

08000298 <__udivmoddi4>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	4657      	mov	r7, sl
 800029c:	464e      	mov	r6, r9
 800029e:	4645      	mov	r5, r8
 80002a0:	46de      	mov	lr, fp
 80002a2:	b5e0      	push	{r5, r6, r7, lr}
 80002a4:	0004      	movs	r4, r0
 80002a6:	000d      	movs	r5, r1
 80002a8:	4692      	mov	sl, r2
 80002aa:	4699      	mov	r9, r3
 80002ac:	b083      	sub	sp, #12
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d830      	bhi.n	8000314 <__udivmoddi4+0x7c>
 80002b2:	d02d      	beq.n	8000310 <__udivmoddi4+0x78>
 80002b4:	4649      	mov	r1, r9
 80002b6:	4650      	mov	r0, sl
 80002b8:	f000 f8ba 	bl	8000430 <__clzdi2>
 80002bc:	0029      	movs	r1, r5
 80002be:	0006      	movs	r6, r0
 80002c0:	0020      	movs	r0, r4
 80002c2:	f000 f8b5 	bl	8000430 <__clzdi2>
 80002c6:	1a33      	subs	r3, r6, r0
 80002c8:	4698      	mov	r8, r3
 80002ca:	3b20      	subs	r3, #32
 80002cc:	d434      	bmi.n	8000338 <__udivmoddi4+0xa0>
 80002ce:	469b      	mov	fp, r3
 80002d0:	4653      	mov	r3, sl
 80002d2:	465a      	mov	r2, fp
 80002d4:	4093      	lsls	r3, r2
 80002d6:	4642      	mov	r2, r8
 80002d8:	001f      	movs	r7, r3
 80002da:	4653      	mov	r3, sl
 80002dc:	4093      	lsls	r3, r2
 80002de:	001e      	movs	r6, r3
 80002e0:	42af      	cmp	r7, r5
 80002e2:	d83b      	bhi.n	800035c <__udivmoddi4+0xc4>
 80002e4:	42af      	cmp	r7, r5
 80002e6:	d100      	bne.n	80002ea <__udivmoddi4+0x52>
 80002e8:	e079      	b.n	80003de <__udivmoddi4+0x146>
 80002ea:	465b      	mov	r3, fp
 80002ec:	1ba4      	subs	r4, r4, r6
 80002ee:	41bd      	sbcs	r5, r7
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	da00      	bge.n	80002f6 <__udivmoddi4+0x5e>
 80002f4:	e076      	b.n	80003e4 <__udivmoddi4+0x14c>
 80002f6:	2200      	movs	r2, #0
 80002f8:	2300      	movs	r3, #0
 80002fa:	9200      	str	r2, [sp, #0]
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	2301      	movs	r3, #1
 8000300:	465a      	mov	r2, fp
 8000302:	4093      	lsls	r3, r2
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	2301      	movs	r3, #1
 8000308:	4642      	mov	r2, r8
 800030a:	4093      	lsls	r3, r2
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	e029      	b.n	8000364 <__udivmoddi4+0xcc>
 8000310:	4282      	cmp	r2, r0
 8000312:	d9cf      	bls.n	80002b4 <__udivmoddi4+0x1c>
 8000314:	2200      	movs	r2, #0
 8000316:	2300      	movs	r3, #0
 8000318:	9200      	str	r2, [sp, #0]
 800031a:	9301      	str	r3, [sp, #4]
 800031c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <__udivmoddi4+0x8e>
 8000322:	601c      	str	r4, [r3, #0]
 8000324:	605d      	str	r5, [r3, #4]
 8000326:	9800      	ldr	r0, [sp, #0]
 8000328:	9901      	ldr	r1, [sp, #4]
 800032a:	b003      	add	sp, #12
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
 800032e:	46bb      	mov	fp, r7
 8000330:	46b2      	mov	sl, r6
 8000332:	46a9      	mov	r9, r5
 8000334:	46a0      	mov	r8, r4
 8000336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000338:	4642      	mov	r2, r8
 800033a:	469b      	mov	fp, r3
 800033c:	2320      	movs	r3, #32
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	4652      	mov	r2, sl
 8000342:	40da      	lsrs	r2, r3
 8000344:	4641      	mov	r1, r8
 8000346:	0013      	movs	r3, r2
 8000348:	464a      	mov	r2, r9
 800034a:	408a      	lsls	r2, r1
 800034c:	0017      	movs	r7, r2
 800034e:	4642      	mov	r2, r8
 8000350:	431f      	orrs	r7, r3
 8000352:	4653      	mov	r3, sl
 8000354:	4093      	lsls	r3, r2
 8000356:	001e      	movs	r6, r3
 8000358:	42af      	cmp	r7, r5
 800035a:	d9c3      	bls.n	80002e4 <__udivmoddi4+0x4c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	4643      	mov	r3, r8
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0d8      	beq.n	800031c <__udivmoddi4+0x84>
 800036a:	07fb      	lsls	r3, r7, #31
 800036c:	0872      	lsrs	r2, r6, #1
 800036e:	431a      	orrs	r2, r3
 8000370:	4646      	mov	r6, r8
 8000372:	087b      	lsrs	r3, r7, #1
 8000374:	e00e      	b.n	8000394 <__udivmoddi4+0xfc>
 8000376:	42ab      	cmp	r3, r5
 8000378:	d101      	bne.n	800037e <__udivmoddi4+0xe6>
 800037a:	42a2      	cmp	r2, r4
 800037c:	d80c      	bhi.n	8000398 <__udivmoddi4+0x100>
 800037e:	1aa4      	subs	r4, r4, r2
 8000380:	419d      	sbcs	r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	1924      	adds	r4, r4, r4
 8000386:	416d      	adcs	r5, r5
 8000388:	2100      	movs	r1, #0
 800038a:	3e01      	subs	r6, #1
 800038c:	1824      	adds	r4, r4, r0
 800038e:	414d      	adcs	r5, r1
 8000390:	2e00      	cmp	r6, #0
 8000392:	d006      	beq.n	80003a2 <__udivmoddi4+0x10a>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d9ee      	bls.n	8000376 <__udivmoddi4+0xde>
 8000398:	3e01      	subs	r6, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d1f8      	bne.n	8000394 <__udivmoddi4+0xfc>
 80003a2:	9800      	ldr	r0, [sp, #0]
 80003a4:	9901      	ldr	r1, [sp, #4]
 80003a6:	465b      	mov	r3, fp
 80003a8:	1900      	adds	r0, r0, r4
 80003aa:	4169      	adcs	r1, r5
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	db24      	blt.n	80003fa <__udivmoddi4+0x162>
 80003b0:	002b      	movs	r3, r5
 80003b2:	465a      	mov	r2, fp
 80003b4:	4644      	mov	r4, r8
 80003b6:	40d3      	lsrs	r3, r2
 80003b8:	002a      	movs	r2, r5
 80003ba:	40e2      	lsrs	r2, r4
 80003bc:	001c      	movs	r4, r3
 80003be:	465b      	mov	r3, fp
 80003c0:	0015      	movs	r5, r2
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db2a      	blt.n	800041c <__udivmoddi4+0x184>
 80003c6:	0026      	movs	r6, r4
 80003c8:	409e      	lsls	r6, r3
 80003ca:	0033      	movs	r3, r6
 80003cc:	0026      	movs	r6, r4
 80003ce:	4647      	mov	r7, r8
 80003d0:	40be      	lsls	r6, r7
 80003d2:	0032      	movs	r2, r6
 80003d4:	1a80      	subs	r0, r0, r2
 80003d6:	4199      	sbcs	r1, r3
 80003d8:	9000      	str	r0, [sp, #0]
 80003da:	9101      	str	r1, [sp, #4]
 80003dc:	e79e      	b.n	800031c <__udivmoddi4+0x84>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d8bc      	bhi.n	800035c <__udivmoddi4+0xc4>
 80003e2:	e782      	b.n	80002ea <__udivmoddi4+0x52>
 80003e4:	4642      	mov	r2, r8
 80003e6:	2320      	movs	r3, #32
 80003e8:	2100      	movs	r1, #0
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	2200      	movs	r2, #0
 80003ee:	9100      	str	r1, [sp, #0]
 80003f0:	9201      	str	r2, [sp, #4]
 80003f2:	2201      	movs	r2, #1
 80003f4:	40da      	lsrs	r2, r3
 80003f6:	9201      	str	r2, [sp, #4]
 80003f8:	e785      	b.n	8000306 <__udivmoddi4+0x6e>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	4646      	mov	r6, r8
 8000404:	409a      	lsls	r2, r3
 8000406:	0023      	movs	r3, r4
 8000408:	40f3      	lsrs	r3, r6
 800040a:	4644      	mov	r4, r8
 800040c:	4313      	orrs	r3, r2
 800040e:	002a      	movs	r2, r5
 8000410:	40e2      	lsrs	r2, r4
 8000412:	001c      	movs	r4, r3
 8000414:	465b      	mov	r3, fp
 8000416:	0015      	movs	r5, r2
 8000418:	2b00      	cmp	r3, #0
 800041a:	dad4      	bge.n	80003c6 <__udivmoddi4+0x12e>
 800041c:	4642      	mov	r2, r8
 800041e:	002f      	movs	r7, r5
 8000420:	2320      	movs	r3, #32
 8000422:	0026      	movs	r6, r4
 8000424:	4097      	lsls	r7, r2
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	40de      	lsrs	r6, r3
 800042a:	003b      	movs	r3, r7
 800042c:	4333      	orrs	r3, r6
 800042e:	e7cd      	b.n	80003cc <__udivmoddi4+0x134>

08000430 <__clzdi2>:
 8000430:	b510      	push	{r4, lr}
 8000432:	2900      	cmp	r1, #0
 8000434:	d103      	bne.n	800043e <__clzdi2+0xe>
 8000436:	f000 f807 	bl	8000448 <__clzsi2>
 800043a:	3020      	adds	r0, #32
 800043c:	e002      	b.n	8000444 <__clzdi2+0x14>
 800043e:	0008      	movs	r0, r1
 8000440:	f000 f802 	bl	8000448 <__clzsi2>
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__clzsi2>:
 8000448:	211c      	movs	r1, #28
 800044a:	2301      	movs	r3, #1
 800044c:	041b      	lsls	r3, r3, #16
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0xe>
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	3910      	subs	r1, #16
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	4298      	cmp	r0, r3
 800045a:	d301      	bcc.n	8000460 <__clzsi2+0x18>
 800045c:	0a00      	lsrs	r0, r0, #8
 800045e:	3908      	subs	r1, #8
 8000460:	091b      	lsrs	r3, r3, #4
 8000462:	4298      	cmp	r0, r3
 8000464:	d301      	bcc.n	800046a <__clzsi2+0x22>
 8000466:	0900      	lsrs	r0, r0, #4
 8000468:	3904      	subs	r1, #4
 800046a:	a202      	add	r2, pc, #8	@ (adr r2, 8000474 <__clzsi2+0x2c>)
 800046c:	5c10      	ldrb	r0, [r2, r0]
 800046e:	1840      	adds	r0, r0, r1
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	02020304 	.word	0x02020304
 8000478:	01010101 	.word	0x01010101
	...

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval intWHITE
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 fc1a 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f870 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 f906 	bl	80006a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000494:	f000 f8d4 	bl	8000640 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, OFF);
 8000498:	2380      	movs	r3, #128	@ 0x80
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	482b      	ldr	r0, [pc, #172]	@ (800054c <main+0xc8>)
 800049e:	2201      	movs	r2, #1
 80004a0:	0019      	movs	r1, r3
 80004a2:	f000 fea7 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, OFF);
 80004a6:	23a0      	movs	r3, #160	@ 0xa0
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	2201      	movs	r2, #1
 80004ac:	2102      	movs	r1, #2
 80004ae:	0018      	movs	r0, r3
 80004b0:	f000 fea0 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, OFF);
 80004b4:	23a0      	movs	r3, #160	@ 0xa0
 80004b6:	05db      	lsls	r3, r3, #23
 80004b8:	2201      	movs	r2, #1
 80004ba:	2101      	movs	r1, #1
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fe99 	bl	80011f4 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_UART_Receive(&huart1, ressive, sizeof(ressive), 1000);
 80004c2:	23fa      	movs	r3, #250	@ 0xfa
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	4922      	ldr	r1, [pc, #136]	@ (8000550 <main+0xcc>)
 80004c8:	4822      	ldr	r0, [pc, #136]	@ (8000554 <main+0xd0>)
 80004ca:	220a      	movs	r2, #10
 80004cc:	f001 fefa 	bl	80022c4 <HAL_UART_Receive>
      VeirfyComand();
 80004d0:	f000 fa4e 	bl	8000970 <VeirfyComand>

      if (ressive[0] == '\0') {
 80004d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000550 <main+0xcc>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d108      	bne.n	80004ee <main+0x6a>
    	  flag = 0;
 80004dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000558 <main+0xd4>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
    	  sprintf(buffer, "%s OFF\n", response);
 80004e2:	4a1e      	ldr	r2, [pc, #120]	@ (800055c <main+0xd8>)
 80004e4:	491e      	ldr	r1, [pc, #120]	@ (8000560 <main+0xdc>)
 80004e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000564 <main+0xe0>)
 80004e8:	0018      	movs	r0, r3
 80004ea:	f002 fd79 	bl	8002fe0 <siprintf>
      }

	  size = strlen(buffer);
 80004ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000564 <main+0xe0>)
 80004f0:	0018      	movs	r0, r3
 80004f2:	f7ff fe13 	bl	800011c <strlen>
 80004f6:	0003      	movs	r3, r0
 80004f8:	b2da      	uxtb	r2, r3
 80004fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000568 <main+0xe4>)
 80004fc:	701a      	strb	r2, [r3, #0]
	  dataConverted = (uint8_t *) calloc(size, sizeof(uint8_t));
 80004fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <main+0xe4>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2101      	movs	r1, #1
 8000504:	0018      	movs	r0, r3
 8000506:	f002 fc77 	bl	8002df8 <calloc>
 800050a:	0003      	movs	r3, r0
 800050c:	001a      	movs	r2, r3
 800050e:	4b17      	ldr	r3, [pc, #92]	@ (800056c <main+0xe8>)
 8000510:	601a      	str	r2, [r3, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (dataConverted != NULL) {
 8000512:	4b16      	ldr	r3, [pc, #88]	@ (800056c <main+0xe8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d014      	beq.n	8000544 <main+0xc0>
		  ConvertedData(buffer);
 800051a:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <main+0xe0>)
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fa07 	bl	8000930 <ConvertedData>
		  HAL_UART_Transmit(&huart1, dataConverted, size, 100);
 8000522:	4b12      	ldr	r3, [pc, #72]	@ (800056c <main+0xe8>)
 8000524:	6819      	ldr	r1, [r3, #0]
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <main+0xe4>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	001a      	movs	r2, r3
 800052c:	4809      	ldr	r0, [pc, #36]	@ (8000554 <main+0xd0>)
 800052e:	2364      	movs	r3, #100	@ 0x64
 8000530:	f001 fe28 	bl	8002184 <HAL_UART_Transmit>
		  free(dataConverted);
 8000534:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <main+0xe8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	0018      	movs	r0, r3
 800053a:	f002 fc95 	bl	8002e68 <free>
		  dataConverted = NULL;
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <main+0xe8>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
	  }

	  ColorControl();
 8000544:	f000 f90c 	bl	8000760 <ColorControl>
      HAL_UART_Receive(&huart1, ressive, sizeof(ressive), 1000);
 8000548:	e7bb      	b.n	80004c2 <main+0x3e>
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	50000400 	.word	0x50000400
 8000550:	2000012c 	.word	0x2000012c
 8000554:	20000088 	.word	0x20000088
 8000558:	20000129 	.word	0x20000129
 800055c:	20000000 	.word	0x20000000
 8000560:	080037dc 	.word	0x080037dc
 8000564:	20000110 	.word	0x20000110
 8000568:	20000136 	.word	0x20000136
 800056c:	20000138 	.word	0x20000138

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b09d      	sub	sp, #116	@ 0x74
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	2438      	movs	r4, #56	@ 0x38
 8000578:	193b      	adds	r3, r7, r4
 800057a:	0018      	movs	r0, r3
 800057c:	2338      	movs	r3, #56	@ 0x38
 800057e:	001a      	movs	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f002 fd4f 	bl	8003024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000586:	2324      	movs	r3, #36	@ 0x24
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	0018      	movs	r0, r3
 800058c:	2314      	movs	r3, #20
 800058e:	001a      	movs	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	f002 fd47 	bl	8003024 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000596:	003b      	movs	r3, r7
 8000598:	0018      	movs	r0, r3
 800059a:	2324      	movs	r3, #36	@ 0x24
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f002 fd40 	bl	8003024 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	4b24      	ldr	r3, [pc, #144]	@ (8000638 <SystemClock_Config+0xc8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a24      	ldr	r2, [pc, #144]	@ (800063c <SystemClock_Config+0xcc>)
 80005aa:	401a      	ands	r2, r3
 80005ac:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <SystemClock_Config+0xc8>)
 80005ae:	2180      	movs	r1, #128	@ 0x80
 80005b0:	0109      	lsls	r1, r1, #4
 80005b2:	430a      	orrs	r2, r1
 80005b4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b6:	0021      	movs	r1, r4
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2202      	movs	r2, #2
 80005bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2201      	movs	r2, #1
 80005c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2210      	movs	r2, #16
 80005c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2200      	movs	r2, #0
 80005ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fe2c 	bl	8001230 <HAL_RCC_OscConfig>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80005dc:	f000 fa92 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	2124      	movs	r1, #36	@ 0x24
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	220f      	movs	r2, #15
 80005e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2201      	movs	r2, #1
 80005ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2280      	movs	r2, #128	@ 0x80
 80005f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2100      	movs	r1, #0
 8000604:	0018      	movs	r0, r3
 8000606:	f001 f9d7 	bl	80019b8 <HAL_RCC_ClockConfig>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800060e:	f000 fa79 	bl	8000b04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000612:	003b      	movs	r3, r7
 8000614:	2201      	movs	r2, #1
 8000616:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000618:	003b      	movs	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800061e:	003b      	movs	r3, r7
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fbcd 	bl	8001dc0 <HAL_RCCEx_PeriphCLKConfig>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800062a:	f000 fa6b 	bl	8000b04 <Error_Handler>
  }
}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b01d      	add	sp, #116	@ 0x74
 8000634:	bd90      	pop	{r4, r7, pc}
 8000636:	46c0      	nop			@ (mov r8, r8)
 8000638:	40007000 	.word	0x40007000
 800063c:	ffffe7ff 	.word	0xffffe7ff

08000640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_USART1_UART_Init+0x58>)
 8000646:	4a15      	ldr	r2, [pc, #84]	@ (800069c <MX_USART1_UART_Init+0x5c>)
 8000648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800064a:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <MX_USART1_UART_Init+0x58>)
 800064c:	2296      	movs	r2, #150	@ 0x96
 800064e:	0192      	lsls	r2, r2, #6
 8000650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_USART1_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_USART1_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800065e:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <MX_USART1_UART_Init+0x58>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <MX_USART1_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <MX_USART1_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <MX_USART1_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <MX_USART1_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000682:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <MX_USART1_UART_Init+0x58>)
 8000684:	0018      	movs	r0, r3
 8000686:	f001 fd29 	bl	80020dc <HAL_UART_Init>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800068e:	f000 fa39 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000088 	.word	0x20000088
 800069c:	40013800 	.word	0x40013800

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b089      	sub	sp, #36	@ 0x24
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	240c      	movs	r4, #12
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	0018      	movs	r0, r3
 80006ac:	2314      	movs	r3, #20
 80006ae:	001a      	movs	r2, r3
 80006b0:	2100      	movs	r1, #0
 80006b2:	f002 fcb7 	bl	8003024 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <MX_GPIO_Init+0xb8>)
 80006b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006ba:	4b27      	ldr	r3, [pc, #156]	@ (8000758 <MX_GPIO_Init+0xb8>)
 80006bc:	2101      	movs	r1, #1
 80006be:	430a      	orrs	r2, r1
 80006c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006c2:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <MX_GPIO_Init+0xb8>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006c6:	2201      	movs	r2, #1
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <MX_GPIO_Init+0xb8>)
 80006d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006d2:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <MX_GPIO_Init+0xb8>)
 80006d4:	2102      	movs	r1, #2
 80006d6:	430a      	orrs	r2, r1
 80006d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006da:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MX_GPIO_Init+0xb8>)
 80006dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006de:	2202      	movs	r2, #2
 80006e0:	4013      	ands	r3, r2
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BLUE_LD_Pin|GREEN_LD_Pin, GPIO_PIN_RESET);
 80006e6:	23a0      	movs	r3, #160	@ 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	2200      	movs	r2, #0
 80006ec:	2103      	movs	r1, #3
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 fd80 	bl	80011f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, GPIO_PIN_RESET);
 80006f4:	2380      	movs	r3, #128	@ 0x80
 80006f6:	00db      	lsls	r3, r3, #3
 80006f8:	4818      	ldr	r0, [pc, #96]	@ (800075c <MX_GPIO_Init+0xbc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	0019      	movs	r1, r3
 80006fe:	f000 fd79 	bl	80011f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BLUE_LD_Pin GREEN_LD_Pin */
  GPIO_InitStruct.Pin = BLUE_LD_Pin|GREEN_LD_Pin;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2203      	movs	r2, #3
 8000706:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2211      	movs	r2, #17
 800070c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2201      	movs	r2, #1
 8000712:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	193a      	adds	r2, r7, r4
 800071c:	23a0      	movs	r3, #160	@ 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	0011      	movs	r1, r2
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fbf0 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LD_Pin */
  GPIO_InitStruct.Pin = RED_LD_Pin;
 8000728:	0021      	movs	r1, r4
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2280      	movs	r2, #128	@ 0x80
 800072e:	00d2      	lsls	r2, r2, #3
 8000730:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2211      	movs	r2, #17
 8000736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000738:	187b      	adds	r3, r7, r1
 800073a:	2201      	movs	r2, #1
 800073c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RED_LD_GPIO_Port, &GPIO_InitStruct);
 8000744:	187b      	adds	r3, r7, r1
 8000746:	4a05      	ldr	r2, [pc, #20]	@ (800075c <MX_GPIO_Init+0xbc>)
 8000748:	0019      	movs	r1, r3
 800074a:	0010      	movs	r0, r2
 800074c:	f000 fbdc 	bl	8000f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b009      	add	sp, #36	@ 0x24
 8000756:	bd90      	pop	{r4, r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	50000400 	.word	0x50000400

08000760 <ColorControl>:
void Minimalize(char *message){
	size = 0;
    for (int i = 0; message[i] != '\0'; i++) size++;
}

void ColorControl(void){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	if (!(strcmp((char *)ressive, "RED\n"))){
 8000764:	4a69      	ldr	r2, [pc, #420]	@ (800090c <ColorControl+0x1ac>)
 8000766:	4b6a      	ldr	r3, [pc, #424]	@ (8000910 <ColorControl+0x1b0>)
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff fccc 	bl	8000108 <strcmp>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d115      	bne.n	80007a0 <ColorControl+0x40>
		HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, ON);
 8000774:	2380      	movs	r3, #128	@ 0x80
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	4866      	ldr	r0, [pc, #408]	@ (8000914 <ColorControl+0x1b4>)
 800077a:	2200      	movs	r2, #0
 800077c:	0019      	movs	r1, r3
 800077e:	f000 fd39 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, OFF);
 8000782:	23a0      	movs	r3, #160	@ 0xa0
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	2201      	movs	r2, #1
 8000788:	2102      	movs	r1, #2
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fd32 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, OFF);
 8000790:	23a0      	movs	r3, #160	@ 0xa0
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	2201      	movs	r2, #1
 8000796:	2101      	movs	r1, #1
 8000798:	0018      	movs	r0, r3
 800079a:	f000 fd2b 	bl	80011f4 <HAL_GPIO_WritePin>
	else if (!(strcmp((char *)ressive, "OFF\n"))){
		HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, OFF);
		HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, OFF);
		HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, OFF);
	}
}
 800079e:	e0b2      	b.n	8000906 <ColorControl+0x1a6>
	else if (!(strcmp((char *)ressive, "GREEN\n"))){
 80007a0:	4a5d      	ldr	r2, [pc, #372]	@ (8000918 <ColorControl+0x1b8>)
 80007a2:	4b5b      	ldr	r3, [pc, #364]	@ (8000910 <ColorControl+0x1b0>)
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f7ff fcae 	bl	8000108 <strcmp>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d115      	bne.n	80007dc <ColorControl+0x7c>
		HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, OFF);
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4857      	ldr	r0, [pc, #348]	@ (8000914 <ColorControl+0x1b4>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	0019      	movs	r1, r3
 80007ba:	f000 fd1b 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, ON);
 80007be:	23a0      	movs	r3, #160	@ 0xa0
 80007c0:	05db      	lsls	r3, r3, #23
 80007c2:	2200      	movs	r2, #0
 80007c4:	2102      	movs	r1, #2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fd14 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, OFF);
 80007cc:	23a0      	movs	r3, #160	@ 0xa0
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	2201      	movs	r2, #1
 80007d2:	2101      	movs	r1, #1
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 fd0d 	bl	80011f4 <HAL_GPIO_WritePin>
}
 80007da:	e094      	b.n	8000906 <ColorControl+0x1a6>
	else if (!(strcmp((char *)ressive, "BLUE\n"))){
 80007dc:	4a4f      	ldr	r2, [pc, #316]	@ (800091c <ColorControl+0x1bc>)
 80007de:	4b4c      	ldr	r3, [pc, #304]	@ (8000910 <ColorControl+0x1b0>)
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff fc90 	bl	8000108 <strcmp>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d115      	bne.n	8000818 <ColorControl+0xb8>
		HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, OFF);
 80007ec:	2380      	movs	r3, #128	@ 0x80
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	4848      	ldr	r0, [pc, #288]	@ (8000914 <ColorControl+0x1b4>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	0019      	movs	r1, r3
 80007f6:	f000 fcfd 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, OFF);
 80007fa:	23a0      	movs	r3, #160	@ 0xa0
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	2201      	movs	r2, #1
 8000800:	2102      	movs	r1, #2
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fcf6 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, ON);
 8000808:	23a0      	movs	r3, #160	@ 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	0018      	movs	r0, r3
 8000812:	f000 fcef 	bl	80011f4 <HAL_GPIO_WritePin>
}
 8000816:	e076      	b.n	8000906 <ColorControl+0x1a6>
	else if (!(strcmp((char *)ressive, "YELLOW\n"))){
 8000818:	4a41      	ldr	r2, [pc, #260]	@ (8000920 <ColorControl+0x1c0>)
 800081a:	4b3d      	ldr	r3, [pc, #244]	@ (8000910 <ColorControl+0x1b0>)
 800081c:	0011      	movs	r1, r2
 800081e:	0018      	movs	r0, r3
 8000820:	f7ff fc72 	bl	8000108 <strcmp>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d115      	bne.n	8000854 <ColorControl+0xf4>
		HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, ON);
 8000828:	2380      	movs	r3, #128	@ 0x80
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	4839      	ldr	r0, [pc, #228]	@ (8000914 <ColorControl+0x1b4>)
 800082e:	2200      	movs	r2, #0
 8000830:	0019      	movs	r1, r3
 8000832:	f000 fcdf 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, ON);
 8000836:	23a0      	movs	r3, #160	@ 0xa0
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	2200      	movs	r2, #0
 800083c:	2102      	movs	r1, #2
 800083e:	0018      	movs	r0, r3
 8000840:	f000 fcd8 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, OFF);
 8000844:	23a0      	movs	r3, #160	@ 0xa0
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	2201      	movs	r2, #1
 800084a:	2101      	movs	r1, #1
 800084c:	0018      	movs	r0, r3
 800084e:	f000 fcd1 	bl	80011f4 <HAL_GPIO_WritePin>
}
 8000852:	e058      	b.n	8000906 <ColorControl+0x1a6>
	else if (!(strcmp((char *)ressive, "PURPLE\n"))){
 8000854:	4a33      	ldr	r2, [pc, #204]	@ (8000924 <ColorControl+0x1c4>)
 8000856:	4b2e      	ldr	r3, [pc, #184]	@ (8000910 <ColorControl+0x1b0>)
 8000858:	0011      	movs	r1, r2
 800085a:	0018      	movs	r0, r3
 800085c:	f7ff fc54 	bl	8000108 <strcmp>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d115      	bne.n	8000890 <ColorControl+0x130>
		HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, ON);
 8000864:	2380      	movs	r3, #128	@ 0x80
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	482a      	ldr	r0, [pc, #168]	@ (8000914 <ColorControl+0x1b4>)
 800086a:	2200      	movs	r2, #0
 800086c:	0019      	movs	r1, r3
 800086e:	f000 fcc1 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, OFF);
 8000872:	23a0      	movs	r3, #160	@ 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	2201      	movs	r2, #1
 8000878:	2102      	movs	r1, #2
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fcba 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, ON);
 8000880:	23a0      	movs	r3, #160	@ 0xa0
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	2200      	movs	r2, #0
 8000886:	2101      	movs	r1, #1
 8000888:	0018      	movs	r0, r3
 800088a:	f000 fcb3 	bl	80011f4 <HAL_GPIO_WritePin>
}
 800088e:	e03a      	b.n	8000906 <ColorControl+0x1a6>
	else if (!(strcmp((char *)ressive, "WHITE\n"))){
 8000890:	4a25      	ldr	r2, [pc, #148]	@ (8000928 <ColorControl+0x1c8>)
 8000892:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <ColorControl+0x1b0>)
 8000894:	0011      	movs	r1, r2
 8000896:	0018      	movs	r0, r3
 8000898:	f7ff fc36 	bl	8000108 <strcmp>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d115      	bne.n	80008cc <ColorControl+0x16c>
		HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, ON);
 80008a0:	2380      	movs	r3, #128	@ 0x80
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	481b      	ldr	r0, [pc, #108]	@ (8000914 <ColorControl+0x1b4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	0019      	movs	r1, r3
 80008aa:	f000 fca3 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, ON);
 80008ae:	23a0      	movs	r3, #160	@ 0xa0
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	2200      	movs	r2, #0
 80008b4:	2102      	movs	r1, #2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fc9c 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, ON);
 80008bc:	23a0      	movs	r3, #160	@ 0xa0
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	2200      	movs	r2, #0
 80008c2:	2101      	movs	r1, #1
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fc95 	bl	80011f4 <HAL_GPIO_WritePin>
}
 80008ca:	e01c      	b.n	8000906 <ColorControl+0x1a6>
	else if (!(strcmp((char *)ressive, "OFF\n"))){
 80008cc:	4a17      	ldr	r2, [pc, #92]	@ (800092c <ColorControl+0x1cc>)
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <ColorControl+0x1b0>)
 80008d0:	0011      	movs	r1, r2
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff fc18 	bl	8000108 <strcmp>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d114      	bne.n	8000906 <ColorControl+0x1a6>
		HAL_GPIO_WritePin(RED_LD_GPIO_Port, RED_LD_Pin, OFF);
 80008dc:	2380      	movs	r3, #128	@ 0x80
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	480c      	ldr	r0, [pc, #48]	@ (8000914 <ColorControl+0x1b4>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	0019      	movs	r1, r3
 80008e6:	f000 fc85 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LD_GPIO_Port, GREEN_LD_Pin, OFF);
 80008ea:	23a0      	movs	r3, #160	@ 0xa0
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	2201      	movs	r2, #1
 80008f0:	2102      	movs	r1, #2
 80008f2:	0018      	movs	r0, r3
 80008f4:	f000 fc7e 	bl	80011f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LD_GPIO_Port, BLUE_LD_Pin, OFF);
 80008f8:	23a0      	movs	r3, #160	@ 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2201      	movs	r2, #1
 80008fe:	2101      	movs	r1, #1
 8000900:	0018      	movs	r0, r3
 8000902:	f000 fc77 	bl	80011f4 <HAL_GPIO_WritePin>
}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	080037e4 	.word	0x080037e4
 8000910:	2000012c 	.word	0x2000012c
 8000914:	50000400 	.word	0x50000400
 8000918:	080037ec 	.word	0x080037ec
 800091c:	080037f4 	.word	0x080037f4
 8000920:	080037fc 	.word	0x080037fc
 8000924:	08003804 	.word	0x08003804
 8000928:	0800380c 	.word	0x0800380c
 800092c:	08003814 	.word	0x08003814

08000930 <ConvertedData>:

void ConvertedData(char *message){
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	for(int i = 0; message[i] != '\0'; ++i){
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e00b      	b.n	8000956 <ConvertedData+0x26>
		dataConverted[i] = (uint8_t) message[i];
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	18d2      	adds	r2, r2, r3
 8000944:	4b09      	ldr	r3, [pc, #36]	@ (800096c <ConvertedData+0x3c>)
 8000946:	6819      	ldr	r1, [r3, #0]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	18cb      	adds	r3, r1, r3
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; message[i] != '\0'; ++i){
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	3301      	adds	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	18d3      	adds	r3, r2, r3
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1ed      	bne.n	800093e <ConvertedData+0xe>
	}
}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b004      	add	sp, #16
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000138 	.word	0x20000138

08000970 <VeirfyComand>:

void VeirfyComand(void){
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
	char comparative[7];
	uint8_t Verify = 0;
 8000976:	230f      	movs	r3, #15
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]

    for (int i = 0; ressive[i] != '\0'; ++i){
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	e00d      	b.n	80009a0 <VeirfyComand+0x30>
  	  if (ressive[i] == '\n') ressive[i + 1] = '\0';
 8000984:	4a52      	ldr	r2, [pc, #328]	@ (8000ad0 <VeirfyComand+0x160>)
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	18d3      	adds	r3, r2, r3
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b0a      	cmp	r3, #10
 800098e:	d104      	bne.n	800099a <VeirfyComand+0x2a>
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	3301      	adds	r3, #1
 8000994:	4a4e      	ldr	r2, [pc, #312]	@ (8000ad0 <VeirfyComand+0x160>)
 8000996:	2100      	movs	r1, #0
 8000998:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; ressive[i] != '\0'; ++i){
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3301      	adds	r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	4a4b      	ldr	r2, [pc, #300]	@ (8000ad0 <VeirfyComand+0x160>)
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	18d3      	adds	r3, r2, r3
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1eb      	bne.n	8000984 <VeirfyComand+0x14>
    }

	strcpy(comparative, (char *)ressive);
 80009ac:	4a48      	ldr	r2, [pc, #288]	@ (8000ad0 <VeirfyComand+0x160>)
 80009ae:	003b      	movs	r3, r7
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f002 fb7c 	bl	80030b0 <strcpy>

	if (!strcmp(comparative, "RED\n"))   Verify++;
 80009b8:	4a46      	ldr	r2, [pc, #280]	@ (8000ad4 <VeirfyComand+0x164>)
 80009ba:	003b      	movs	r3, r7
 80009bc:	0011      	movs	r1, r2
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff fba2 	bl	8000108 <strcmp>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d105      	bne.n	80009d4 <VeirfyComand+0x64>
 80009c8:	210f      	movs	r1, #15
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	3201      	adds	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
	if (!strcmp(comparative, "GREEN\n")) Verify++;
 80009d4:	4a40      	ldr	r2, [pc, #256]	@ (8000ad8 <VeirfyComand+0x168>)
 80009d6:	003b      	movs	r3, r7
 80009d8:	0011      	movs	r1, r2
 80009da:	0018      	movs	r0, r3
 80009dc:	f7ff fb94 	bl	8000108 <strcmp>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d105      	bne.n	80009f0 <VeirfyComand+0x80>
 80009e4:	210f      	movs	r1, #15
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	3201      	adds	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
	if (!strcmp(comparative, "BLUE\n"))  Verify++;
 80009f0:	4a3a      	ldr	r2, [pc, #232]	@ (8000adc <VeirfyComand+0x16c>)
 80009f2:	003b      	movs	r3, r7
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fb86 	bl	8000108 <strcmp>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d105      	bne.n	8000a0c <VeirfyComand+0x9c>
 8000a00:	210f      	movs	r1, #15
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	3201      	adds	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
	if (!strcmp(comparative, "YELLOW\n"))  Verify++;
 8000a0c:	4a34      	ldr	r2, [pc, #208]	@ (8000ae0 <VeirfyComand+0x170>)
 8000a0e:	003b      	movs	r3, r7
 8000a10:	0011      	movs	r1, r2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff fb78 	bl	8000108 <strcmp>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d105      	bne.n	8000a28 <VeirfyComand+0xb8>
 8000a1c:	210f      	movs	r1, #15
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	3201      	adds	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
	if (!strcmp(comparative, "PURPLE\n"))  Verify++;
 8000a28:	4a2e      	ldr	r2, [pc, #184]	@ (8000ae4 <VeirfyComand+0x174>)
 8000a2a:	003b      	movs	r3, r7
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff fb6a 	bl	8000108 <strcmp>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d105      	bne.n	8000a44 <VeirfyComand+0xd4>
 8000a38:	210f      	movs	r1, #15
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	781a      	ldrb	r2, [r3, #0]
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	3201      	adds	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
	if (!strcmp(comparative, "WHITE\n"))  Verify++;
 8000a44:	4a28      	ldr	r2, [pc, #160]	@ (8000ae8 <VeirfyComand+0x178>)
 8000a46:	003b      	movs	r3, r7
 8000a48:	0011      	movs	r1, r2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f7ff fb5c 	bl	8000108 <strcmp>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d105      	bne.n	8000a60 <VeirfyComand+0xf0>
 8000a54:	210f      	movs	r1, #15
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	3201      	adds	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
	if (!strcmp(comparative, "OFF\n"))   Verify++;
 8000a60:	4a22      	ldr	r2, [pc, #136]	@ (8000aec <VeirfyComand+0x17c>)
 8000a62:	003b      	movs	r3, r7
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff fb4e 	bl	8000108 <strcmp>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d105      	bne.n	8000a7c <VeirfyComand+0x10c>
 8000a70:	210f      	movs	r1, #15
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	3201      	adds	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]

	if (Verify >= 1) sprintf(buffer, "%s%s", response, (char *) ressive);
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	18fb      	adds	r3, r7, r3
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d006      	beq.n	8000a94 <VeirfyComand+0x124>
 8000a86:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <VeirfyComand+0x160>)
 8000a88:	4a19      	ldr	r2, [pc, #100]	@ (8000af0 <VeirfyComand+0x180>)
 8000a8a:	491a      	ldr	r1, [pc, #104]	@ (8000af4 <VeirfyComand+0x184>)
 8000a8c:	481a      	ldr	r0, [pc, #104]	@ (8000af8 <VeirfyComand+0x188>)
 8000a8e:	f002 faa7 	bl	8002fe0 <siprintf>
		else {
			sprintf(buffer, "%s%s", response, (char *) ressive);
		    memset(ressive, 0, sizeof(ressive));
		}
	}
}
 8000a92:	e019      	b.n	8000ac8 <VeirfyComand+0x158>
		if (flag == 0) {
 8000a94:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <VeirfyComand+0x18c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d109      	bne.n	8000ab0 <VeirfyComand+0x140>
			sprintf(buffer, "Invalid Command\n");
 8000a9c:	4a18      	ldr	r2, [pc, #96]	@ (8000b00 <VeirfyComand+0x190>)
 8000a9e:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <VeirfyComand+0x188>)
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f002 fa9c 	bl	8002fe0 <siprintf>
			flag = 1;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <VeirfyComand+0x18c>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
}
 8000aae:	e00b      	b.n	8000ac8 <VeirfyComand+0x158>
			sprintf(buffer, "%s%s", response, (char *) ressive);
 8000ab0:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <VeirfyComand+0x160>)
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8000af0 <VeirfyComand+0x180>)
 8000ab4:	490f      	ldr	r1, [pc, #60]	@ (8000af4 <VeirfyComand+0x184>)
 8000ab6:	4810      	ldr	r0, [pc, #64]	@ (8000af8 <VeirfyComand+0x188>)
 8000ab8:	f002 fa92 	bl	8002fe0 <siprintf>
		    memset(ressive, 0, sizeof(ressive));
 8000abc:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <VeirfyComand+0x160>)
 8000abe:	220a      	movs	r2, #10
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f002 faae 	bl	8003024 <memset>
}
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b004      	add	sp, #16
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000012c 	.word	0x2000012c
 8000ad4:	080037e4 	.word	0x080037e4
 8000ad8:	080037ec 	.word	0x080037ec
 8000adc:	080037f4 	.word	0x080037f4
 8000ae0:	080037fc 	.word	0x080037fc
 8000ae4:	08003804 	.word	0x08003804
 8000ae8:	0800380c 	.word	0x0800380c
 8000aec:	08003814 	.word	0x08003814
 8000af0:	20000000 	.word	0x20000000
 8000af4:	0800381c 	.word	0x0800381c
 8000af8:	20000110 	.word	0x20000110
 8000afc:	20000129 	.word	0x20000129
 8000b00:	08003824 	.word	0x08003824

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	46c0      	nop			@ (mov r8, r8)
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b14:	4b07      	ldr	r3, [pc, #28]	@ (8000b34 <HAL_MspInit+0x24>)
 8000b16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <HAL_MspInit+0x24>)
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b20:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <HAL_MspInit+0x24>)
 8000b22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b24:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <HAL_MspInit+0x24>)
 8000b26:	2180      	movs	r1, #128	@ 0x80
 8000b28:	0549      	lsls	r1, r1, #21
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40021000 	.word	0x40021000

08000b38 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b089      	sub	sp, #36	@ 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	240c      	movs	r4, #12
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	0018      	movs	r0, r3
 8000b46:	2314      	movs	r3, #20
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f002 fa6a 	bl	8003024 <memset>
  if(huart->Instance==USART1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <HAL_UART_MspInit+0x80>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12a      	bne.n	8000bb0 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b5a:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <HAL_UART_MspInit+0x84>)
 8000b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b5e:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <HAL_UART_MspInit+0x84>)
 8000b60:	2180      	movs	r1, #128	@ 0x80
 8000b62:	01c9      	lsls	r1, r1, #7
 8000b64:	430a      	orrs	r2, r1
 8000b66:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b14      	ldr	r3, [pc, #80]	@ (8000bbc <HAL_UART_MspInit+0x84>)
 8000b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b6c:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <HAL_UART_MspInit+0x84>)
 8000b6e:	2101      	movs	r1, #1
 8000b70:	430a      	orrs	r2, r1
 8000b72:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b74:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <HAL_UART_MspInit+0x84>)
 8000b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b78:	2201      	movs	r2, #1
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	22c0      	movs	r2, #192	@ 0xc0
 8000b84:	00d2      	lsls	r2, r2, #3
 8000b86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	0021      	movs	r1, r4
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	187a      	adds	r2, r7, r1
 8000ba4:	23a0      	movs	r3, #160	@ 0xa0
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	0011      	movs	r1, r2
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 f9ac 	bl	8000f08 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b009      	add	sp, #36	@ 0x24
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	40013800 	.word	0x40013800
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	e7fd      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	e7fd      	b.n	8000bcc <HardFault_Handler+0x4>

08000bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be8:	f000 f8be 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	@ (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	@ (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f002 fa18 	bl	8003058 <__errno>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	425b      	negs	r3, r3
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	18d2      	adds	r2, r2, r3
 8000c42:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <_sbrk+0x64>)
 8000c44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b006      	add	sp, #24
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20002000 	.word	0x20002000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	2000013c 	.word	0x2000013c
 8000c5c:	20000290 	.word	0x20000290

08000c60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000c6c:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c6e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c70:	f7ff fff6 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	@ (8000cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <LoopForever+0xe>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb8 <LoopForever+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f002 f9e3 	bl	8003064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9e:	f7ff fbf1 	bl	8000484 <main>

08000ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   r0, =_estack
 8000ca4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cb0:	080038e8 	.word	0x080038e8
  ldr r2, =_sbss
 8000cb4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cb8:	2000028c 	.word	0x2000028c

08000cbc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_COMP_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <HAL_Init+0x3c>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <HAL_Init+0x3c>)
 8000cd2:	2140      	movs	r1, #64	@ 0x40
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f000 f811 	bl	8000d00 <HAL_InitTick>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d003      	beq.n	8000cea <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
 8000ce8:	e001      	b.n	8000cee <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cea:	f7ff ff11 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	40022000 	.word	0x40022000

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d08:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <HAL_InitTick+0x5c>)
 8000d0a:	681c      	ldr	r4, [r3, #0]
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_InitTick+0x60>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	0019      	movs	r1, r3
 8000d12:	23fa      	movs	r3, #250	@ 0xfa
 8000d14:	0098      	lsls	r0, r3, #2
 8000d16:	f7ff fa13 	bl	8000140 <__udivsi3>
 8000d1a:	0003      	movs	r3, r0
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	0020      	movs	r0, r4
 8000d20:	f7ff fa0e 	bl	8000140 <__udivsi3>
 8000d24:	0003      	movs	r3, r0
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 f8e1 	bl	8000eee <HAL_SYSTICK_Config>
 8000d2c:	1e03      	subs	r3, r0, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e00f      	b.n	8000d54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d80b      	bhi.n	8000d52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	425b      	negs	r3, r3
 8000d40:	2200      	movs	r2, #0
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 f8be 	bl	8000ec4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_InitTick+0x64>)
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	0018      	movs	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b003      	add	sp, #12
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	20000010 	.word	0x20000010
 8000d60:	20000018 	.word	0x20000018
 8000d64:	20000014 	.word	0x20000014

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <HAL_IncTick+0x1c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	001a      	movs	r2, r3
 8000d72:	4b05      	ldr	r3, [pc, #20]	@ (8000d88 <HAL_IncTick+0x20>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	18d2      	adds	r2, r2, r3
 8000d78:	4b03      	ldr	r3, [pc, #12]	@ (8000d88 <HAL_IncTick+0x20>)
 8000d7a:	601a      	str	r2, [r3, #0]
}
 8000d7c:	46c0      	nop			@ (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	20000018 	.word	0x20000018
 8000d88:	20000140 	.word	0x20000140

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b02      	ldr	r3, [pc, #8]	@ (8000d9c <HAL_GetTick+0x10>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	20000140 	.word	0x20000140

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	0002      	movs	r2, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000db4:	d828      	bhi.n	8000e08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db6:	4a2f      	ldr	r2, [pc, #188]	@ (8000e74 <__NVIC_SetPriority+0xd4>)
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	33c0      	adds	r3, #192	@ 0xc0
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	589b      	ldr	r3, [r3, r2]
 8000dc6:	1dfa      	adds	r2, r7, #7
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	0011      	movs	r1, r2
 8000dcc:	2203      	movs	r2, #3
 8000dce:	400a      	ands	r2, r1
 8000dd0:	00d2      	lsls	r2, r2, #3
 8000dd2:	21ff      	movs	r1, #255	@ 0xff
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	43d2      	mvns	r2, r2
 8000dda:	401a      	ands	r2, r3
 8000ddc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	019b      	lsls	r3, r3, #6
 8000de2:	22ff      	movs	r2, #255	@ 0xff
 8000de4:	401a      	ands	r2, r3
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	0018      	movs	r0, r3
 8000dec:	2303      	movs	r3, #3
 8000dee:	4003      	ands	r3, r0
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df4:	481f      	ldr	r0, [pc, #124]	@ (8000e74 <__NVIC_SetPriority+0xd4>)
 8000df6:	1dfb      	adds	r3, r7, #7
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	33c0      	adds	r3, #192	@ 0xc0
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e06:	e031      	b.n	8000e6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	4a1b      	ldr	r2, [pc, #108]	@ (8000e78 <__NVIC_SetPriority+0xd8>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	0019      	movs	r1, r3
 8000e10:	230f      	movs	r3, #15
 8000e12:	400b      	ands	r3, r1
 8000e14:	3b08      	subs	r3, #8
 8000e16:	089b      	lsrs	r3, r3, #2
 8000e18:	3306      	adds	r3, #6
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	18d3      	adds	r3, r2, r3
 8000e1e:	3304      	adds	r3, #4
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	1dfa      	adds	r2, r7, #7
 8000e24:	7812      	ldrb	r2, [r2, #0]
 8000e26:	0011      	movs	r1, r2
 8000e28:	2203      	movs	r2, #3
 8000e2a:	400a      	ands	r2, r1
 8000e2c:	00d2      	lsls	r2, r2, #3
 8000e2e:	21ff      	movs	r1, #255	@ 0xff
 8000e30:	4091      	lsls	r1, r2
 8000e32:	000a      	movs	r2, r1
 8000e34:	43d2      	mvns	r2, r2
 8000e36:	401a      	ands	r2, r3
 8000e38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	019b      	lsls	r3, r3, #6
 8000e3e:	22ff      	movs	r2, #255	@ 0xff
 8000e40:	401a      	ands	r2, r3
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	0018      	movs	r0, r3
 8000e48:	2303      	movs	r3, #3
 8000e4a:	4003      	ands	r3, r0
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e50:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <__NVIC_SetPriority+0xd8>)
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	001c      	movs	r4, r3
 8000e58:	230f      	movs	r3, #15
 8000e5a:	4023      	ands	r3, r4
 8000e5c:	3b08      	subs	r3, #8
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	430a      	orrs	r2, r1
 8000e62:	3306      	adds	r3, #6
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	18c3      	adds	r3, r0, r3
 8000e68:	3304      	adds	r3, #4
 8000e6a:	601a      	str	r2, [r3, #0]
}
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b003      	add	sp, #12
 8000e72:	bd90      	pop	{r4, r7, pc}
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	2380      	movs	r3, #128	@ 0x80
 8000e8a:	045b      	lsls	r3, r3, #17
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d301      	bcc.n	8000e94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e90:	2301      	movs	r3, #1
 8000e92:	e010      	b.n	8000eb6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <SysTick_Config+0x44>)
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	3a01      	subs	r2, #1
 8000e9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	425b      	negs	r3, r3
 8000ea0:	2103      	movs	r1, #3
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f7ff ff7c 	bl	8000da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <SysTick_Config+0x44>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <SysTick_Config+0x44>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	b002      	add	sp, #8
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	210f      	movs	r1, #15
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	1c02      	adds	r2, r0, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b25b      	sxtb	r3, r3
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff ff5d 	bl	8000da0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b004      	add	sp, #16
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff ffbf 	bl	8000e7c <SysTick_Config>
 8000efe:	0003      	movs	r3, r0
}
 8000f00:	0018      	movs	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b002      	add	sp, #8
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f1e:	e14f      	b.n	80011c0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2101      	movs	r1, #1
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	4091      	lsls	r1, r2
 8000f2a:	000a      	movs	r2, r1
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d100      	bne.n	8000f38 <HAL_GPIO_Init+0x30>
 8000f36:	e140      	b.n	80011ba <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d005      	beq.n	8000f50 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2203      	movs	r2, #3
 8000f4a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d130      	bne.n	8000fb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	0013      	movs	r3, r2
 8000f60:	43da      	mvns	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	409a      	lsls	r2, r3
 8000f72:	0013      	movs	r3, r2
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f86:	2201      	movs	r2, #1
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	091b      	lsrs	r3, r3, #4
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d017      	beq.n	8000fee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d123      	bne.n	8001042 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	0092      	lsls	r2, r2, #2
 8001004:	58d3      	ldr	r3, [r2, r3]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2207      	movs	r2, #7
 800100c:	4013      	ands	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	691a      	ldr	r2, [r3, #16]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2107      	movs	r1, #7
 8001026:	400b      	ands	r3, r1
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	08da      	lsrs	r2, r3, #3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3208      	adds	r2, #8
 800103c:	0092      	lsls	r2, r2, #2
 800103e:	6939      	ldr	r1, [r7, #16]
 8001040:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	43da      	mvns	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2203      	movs	r2, #3
 8001060:	401a      	ands	r2, r3
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	409a      	lsls	r2, r3
 8001068:	0013      	movs	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	23c0      	movs	r3, #192	@ 0xc0
 800107c:	029b      	lsls	r3, r3, #10
 800107e:	4013      	ands	r3, r2
 8001080:	d100      	bne.n	8001084 <HAL_GPIO_Init+0x17c>
 8001082:	e09a      	b.n	80011ba <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001084:	4b54      	ldr	r3, [pc, #336]	@ (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001088:	4b53      	ldr	r3, [pc, #332]	@ (80011d8 <HAL_GPIO_Init+0x2d0>)
 800108a:	2101      	movs	r1, #1
 800108c:	430a      	orrs	r2, r1
 800108e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001090:	4a52      	ldr	r2, [pc, #328]	@ (80011dc <HAL_GPIO_Init+0x2d4>)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	589b      	ldr	r3, [r3, r2]
 800109c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2203      	movs	r2, #3
 80010a2:	4013      	ands	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	220f      	movs	r2, #15
 80010a8:	409a      	lsls	r2, r3
 80010aa:	0013      	movs	r3, r2
 80010ac:	43da      	mvns	r2, r3
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4013      	ands	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	23a0      	movs	r3, #160	@ 0xa0
 80010b8:	05db      	lsls	r3, r3, #23
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x1ea>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a47      	ldr	r2, [pc, #284]	@ (80011e0 <HAL_GPIO_Init+0x2d8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x1e6>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a46      	ldr	r2, [pc, #280]	@ (80011e4 <HAL_GPIO_Init+0x2dc>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x1e2>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a45      	ldr	r2, [pc, #276]	@ (80011e8 <HAL_GPIO_Init+0x2e0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x1de>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a44      	ldr	r2, [pc, #272]	@ (80011ec <HAL_GPIO_Init+0x2e4>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x1da>
 80010de:	2305      	movs	r3, #5
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010e2:	2306      	movs	r3, #6
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010f2:	2300      	movs	r3, #0
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	2103      	movs	r1, #3
 80010f8:	400a      	ands	r2, r1
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001104:	4935      	ldr	r1, [pc, #212]	@ (80011dc <HAL_GPIO_Init+0x2d4>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001112:	4b37      	ldr	r3, [pc, #220]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	43da      	mvns	r2, r3
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	2380      	movs	r3, #128	@ 0x80
 8001128:	035b      	lsls	r3, r3, #13
 800112a:	4013      	ands	r3, r2
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001136:	4b2e      	ldr	r3, [pc, #184]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800113c:	4b2c      	ldr	r3, [pc, #176]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43da      	mvns	r2, r3
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	2380      	movs	r3, #128	@ 0x80
 8001152:	039b      	lsls	r3, r3, #14
 8001154:	4013      	ands	r3, r2
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001160:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001166:	4b22      	ldr	r3, [pc, #136]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43da      	mvns	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	029b      	lsls	r3, r3, #10
 800117e:	4013      	ands	r3, r2
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800118a:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001190:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	43da      	mvns	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	2380      	movs	r3, #128	@ 0x80
 80011a6:	025b      	lsls	r3, r3, #9
 80011a8:	4013      	ands	r3, r2
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <HAL_GPIO_Init+0x2e8>)
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	40da      	lsrs	r2, r3
 80011c8:	1e13      	subs	r3, r2, #0
 80011ca:	d000      	beq.n	80011ce <HAL_GPIO_Init+0x2c6>
 80011cc:	e6a8      	b.n	8000f20 <HAL_GPIO_Init+0x18>
  }
}
 80011ce:	46c0      	nop			@ (mov r8, r8)
 80011d0:	46c0      	nop			@ (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b006      	add	sp, #24
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000
 80011e0:	50000400 	.word	0x50000400
 80011e4:	50000800 	.word	0x50000800
 80011e8:	50000c00 	.word	0x50000c00
 80011ec:	50001c00 	.word	0x50001c00
 80011f0:	40010400 	.word	0x40010400

080011f4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	0008      	movs	r0, r1
 80011fe:	0011      	movs	r1, r2
 8001200:	1cbb      	adds	r3, r7, #2
 8001202:	1c02      	adds	r2, r0, #0
 8001204:	801a      	strh	r2, [r3, #0]
 8001206:	1c7b      	adds	r3, r7, #1
 8001208:	1c0a      	adds	r2, r1, #0
 800120a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800120c:	1c7b      	adds	r3, r7, #1
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d004      	beq.n	800121e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001214:	1cbb      	adds	r3, r7, #2
 8001216:	881a      	ldrh	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800121c:	e003      	b.n	8001226 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800121e:	1cbb      	adds	r3, r7, #2
 8001220:	881a      	ldrh	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	b08a      	sub	sp, #40	@ 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d102      	bne.n	8001244 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	f000 fbaf 	bl	80019a2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001244:	4bcf      	ldr	r3, [pc, #828]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	220c      	movs	r2, #12
 800124a:	4013      	ands	r3, r2
 800124c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800124e:	4bcd      	ldr	r3, [pc, #820]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	2380      	movs	r3, #128	@ 0x80
 8001254:	025b      	lsls	r3, r3, #9
 8001256:	4013      	ands	r3, r2
 8001258:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	4013      	ands	r3, r2
 8001262:	d100      	bne.n	8001266 <HAL_RCC_OscConfig+0x36>
 8001264:	e07e      	b.n	8001364 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	2b08      	cmp	r3, #8
 800126a:	d007      	beq.n	800127c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	2b0c      	cmp	r3, #12
 8001270:	d112      	bne.n	8001298 <HAL_RCC_OscConfig+0x68>
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	025b      	lsls	r3, r3, #9
 8001278:	429a      	cmp	r2, r3
 800127a:	d10d      	bne.n	8001298 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4bc1      	ldr	r3, [pc, #772]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	@ 0x80
 8001282:	029b      	lsls	r3, r3, #10
 8001284:	4013      	ands	r3, r2
 8001286:	d100      	bne.n	800128a <HAL_RCC_OscConfig+0x5a>
 8001288:	e06b      	b.n	8001362 <HAL_RCC_OscConfig+0x132>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d167      	bne.n	8001362 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	f000 fb85 	bl	80019a2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	2380      	movs	r3, #128	@ 0x80
 800129e:	025b      	lsls	r3, r3, #9
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d107      	bne.n	80012b4 <HAL_RCC_OscConfig+0x84>
 80012a4:	4bb7      	ldr	r3, [pc, #732]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4bb6      	ldr	r3, [pc, #728]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80012aa:	2180      	movs	r1, #128	@ 0x80
 80012ac:	0249      	lsls	r1, r1, #9
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	e027      	b.n	8001304 <HAL_RCC_OscConfig+0xd4>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	23a0      	movs	r3, #160	@ 0xa0
 80012ba:	02db      	lsls	r3, r3, #11
 80012bc:	429a      	cmp	r2, r3
 80012be:	d10e      	bne.n	80012de <HAL_RCC_OscConfig+0xae>
 80012c0:	4bb0      	ldr	r3, [pc, #704]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4baf      	ldr	r3, [pc, #700]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	02c9      	lsls	r1, r1, #11
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	4bad      	ldr	r3, [pc, #692]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4bac      	ldr	r3, [pc, #688]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80012d4:	2180      	movs	r1, #128	@ 0x80
 80012d6:	0249      	lsls	r1, r1, #9
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e012      	b.n	8001304 <HAL_RCC_OscConfig+0xd4>
 80012de:	4ba9      	ldr	r3, [pc, #676]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4ba8      	ldr	r3, [pc, #672]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80012e4:	49a8      	ldr	r1, [pc, #672]	@ (8001588 <HAL_RCC_OscConfig+0x358>)
 80012e6:	400a      	ands	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	4ba6      	ldr	r3, [pc, #664]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2380      	movs	r3, #128	@ 0x80
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	4013      	ands	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	4ba2      	ldr	r3, [pc, #648]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4ba1      	ldr	r3, [pc, #644]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80012fe:	49a3      	ldr	r1, [pc, #652]	@ (800158c <HAL_RCC_OscConfig+0x35c>)
 8001300:	400a      	ands	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d015      	beq.n	8001338 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fd3e 	bl	8000d8c <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001314:	e009      	b.n	800132a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001316:	f7ff fd39 	bl	8000d8c <HAL_GetTick>
 800131a:	0002      	movs	r2, r0
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b64      	cmp	r3, #100	@ 0x64
 8001322:	d902      	bls.n	800132a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	f000 fb3c 	bl	80019a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800132a:	4b96      	ldr	r3, [pc, #600]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	2380      	movs	r3, #128	@ 0x80
 8001330:	029b      	lsls	r3, r3, #10
 8001332:	4013      	ands	r3, r2
 8001334:	d0ef      	beq.n	8001316 <HAL_RCC_OscConfig+0xe6>
 8001336:	e015      	b.n	8001364 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fd28 	bl	8000d8c <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001342:	f7ff fd23 	bl	8000d8c <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b64      	cmp	r3, #100	@ 0x64
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e326      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001354:	4b8b      	ldr	r3, [pc, #556]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	@ 0x80
 800135a:	029b      	lsls	r3, r3, #10
 800135c:	4013      	ands	r3, r2
 800135e:	d1f0      	bne.n	8001342 <HAL_RCC_OscConfig+0x112>
 8001360:	e000      	b.n	8001364 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001362:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2202      	movs	r2, #2
 800136a:	4013      	ands	r3, r2
 800136c:	d100      	bne.n	8001370 <HAL_RCC_OscConfig+0x140>
 800136e:	e08b      	b.n	8001488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	2b04      	cmp	r3, #4
 800137a:	d005      	beq.n	8001388 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800137c:	6a3b      	ldr	r3, [r7, #32]
 800137e:	2b0c      	cmp	r3, #12
 8001380:	d13e      	bne.n	8001400 <HAL_RCC_OscConfig+0x1d0>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d13b      	bne.n	8001400 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001388:	4b7e      	ldr	r3, [pc, #504]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2204      	movs	r2, #4
 800138e:	4013      	ands	r3, r2
 8001390:	d004      	beq.n	800139c <HAL_RCC_OscConfig+0x16c>
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e302      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b79      	ldr	r3, [pc, #484]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a7b      	ldr	r2, [pc, #492]	@ (8001590 <HAL_RCC_OscConfig+0x360>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	0019      	movs	r1, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	021a      	lsls	r2, r3, #8
 80013ac:	4b75      	ldr	r3, [pc, #468]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80013ae:	430a      	orrs	r2, r1
 80013b0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013b2:	4b74      	ldr	r3, [pc, #464]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2209      	movs	r2, #9
 80013b8:	4393      	bics	r3, r2
 80013ba:	0019      	movs	r1, r3
 80013bc:	4b71      	ldr	r3, [pc, #452]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013c4:	f000 fc40 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 80013c8:	0001      	movs	r1, r0
 80013ca:	4b6e      	ldr	r3, [pc, #440]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	220f      	movs	r2, #15
 80013d2:	4013      	ands	r3, r2
 80013d4:	4a6f      	ldr	r2, [pc, #444]	@ (8001594 <HAL_RCC_OscConfig+0x364>)
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	000a      	movs	r2, r1
 80013da:	40da      	lsrs	r2, r3
 80013dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001598 <HAL_RCC_OscConfig+0x368>)
 80013de:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013e0:	4b6e      	ldr	r3, [pc, #440]	@ (800159c <HAL_RCC_OscConfig+0x36c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2513      	movs	r5, #19
 80013e6:	197c      	adds	r4, r7, r5
 80013e8:	0018      	movs	r0, r3
 80013ea:	f7ff fc89 	bl	8000d00 <HAL_InitTick>
 80013ee:	0003      	movs	r3, r0
 80013f0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013f2:	197b      	adds	r3, r7, r5
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d046      	beq.n	8001488 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80013fa:	197b      	adds	r3, r7, r5
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	e2d0      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d027      	beq.n	8001456 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001406:	4b5f      	ldr	r3, [pc, #380]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2209      	movs	r2, #9
 800140c:	4393      	bics	r3, r2
 800140e:	0019      	movs	r1, r3
 8001410:	4b5c      	ldr	r3, [pc, #368]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fcb8 	bl	8000d8c <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fcb3 	bl	8000d8c <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e2b6      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001434:	4b53      	ldr	r3, [pc, #332]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2204      	movs	r2, #4
 800143a:	4013      	ands	r3, r2
 800143c:	d0f1      	beq.n	8001422 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143e:	4b51      	ldr	r3, [pc, #324]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4a53      	ldr	r2, [pc, #332]	@ (8001590 <HAL_RCC_OscConfig+0x360>)
 8001444:	4013      	ands	r3, r2
 8001446:	0019      	movs	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	021a      	lsls	r2, r3, #8
 800144e:	4b4d      	ldr	r3, [pc, #308]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 8001450:	430a      	orrs	r2, r1
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	e018      	b.n	8001488 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b4b      	ldr	r3, [pc, #300]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b4a      	ldr	r3, [pc, #296]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 800145c:	2101      	movs	r1, #1
 800145e:	438a      	bics	r2, r1
 8001460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001462:	f7ff fc93 	bl	8000d8c <HAL_GetTick>
 8001466:	0003      	movs	r3, r0
 8001468:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146c:	f7ff fc8e 	bl	8000d8c <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e291      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800147e:	4b41      	ldr	r3, [pc, #260]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2204      	movs	r2, #4
 8001484:	4013      	ands	r3, r2
 8001486:	d1f1      	bne.n	800146c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2210      	movs	r2, #16
 800148e:	4013      	ands	r3, r2
 8001490:	d100      	bne.n	8001494 <HAL_RCC_OscConfig+0x264>
 8001492:	e0a1      	b.n	80015d8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001494:	6a3b      	ldr	r3, [r7, #32]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d140      	bne.n	800151c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800149a:	4b3a      	ldr	r3, [pc, #232]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	2380      	movs	r3, #128	@ 0x80
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4013      	ands	r3, r2
 80014a4:	d005      	beq.n	80014b2 <HAL_RCC_OscConfig+0x282>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e277      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b2:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4a3a      	ldr	r2, [pc, #232]	@ (80015a0 <HAL_RCC_OscConfig+0x370>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	0019      	movs	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014c0:	4b30      	ldr	r3, [pc, #192]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80014c2:	430a      	orrs	r2, r1
 80014c4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	0a19      	lsrs	r1, r3, #8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	061a      	lsls	r2, r3, #24
 80014d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80014d6:	430a      	orrs	r2, r1
 80014d8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014de:	0b5b      	lsrs	r3, r3, #13
 80014e0:	3301      	adds	r3, #1
 80014e2:	2280      	movs	r2, #128	@ 0x80
 80014e4:	0212      	lsls	r2, r2, #8
 80014e6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014e8:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	210f      	movs	r1, #15
 80014f0:	400b      	ands	r3, r1
 80014f2:	4928      	ldr	r1, [pc, #160]	@ (8001594 <HAL_RCC_OscConfig+0x364>)
 80014f4:	5ccb      	ldrb	r3, [r1, r3]
 80014f6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014f8:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <HAL_RCC_OscConfig+0x368>)
 80014fa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014fc:	4b27      	ldr	r3, [pc, #156]	@ (800159c <HAL_RCC_OscConfig+0x36c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2513      	movs	r5, #19
 8001502:	197c      	adds	r4, r7, r5
 8001504:	0018      	movs	r0, r3
 8001506:	f7ff fbfb 	bl	8000d00 <HAL_InitTick>
 800150a:	0003      	movs	r3, r0
 800150c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800150e:	197b      	adds	r3, r7, r5
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d060      	beq.n	80015d8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001516:	197b      	adds	r3, r7, r5
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	e242      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d03f      	beq.n	80015a4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b16      	ldr	r3, [pc, #88]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 800152a:	2180      	movs	r1, #128	@ 0x80
 800152c:	0049      	lsls	r1, r1, #1
 800152e:	430a      	orrs	r2, r1
 8001530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001532:	f7ff fc2b 	bl	8000d8c <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800153c:	f7ff fc26 	bl	8000d8c <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e229      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	2380      	movs	r3, #128	@ 0x80
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4a10      	ldr	r2, [pc, #64]	@ (80015a0 <HAL_RCC_OscConfig+0x370>)
 8001560:	4013      	ands	r3, r2
 8001562:	0019      	movs	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800156e:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	0a19      	lsrs	r1, r3, #8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	061a      	lsls	r2, r3, #24
 800157c:	4b01      	ldr	r3, [pc, #4]	@ (8001584 <HAL_RCC_OscConfig+0x354>)
 800157e:	430a      	orrs	r2, r1
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	e029      	b.n	80015d8 <HAL_RCC_OscConfig+0x3a8>
 8001584:	40021000 	.word	0x40021000
 8001588:	fffeffff 	.word	0xfffeffff
 800158c:	fffbffff 	.word	0xfffbffff
 8001590:	ffffe0ff 	.word	0xffffe0ff
 8001594:	08003838 	.word	0x08003838
 8001598:	20000010 	.word	0x20000010
 800159c:	20000014 	.word	0x20000014
 80015a0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015a4:	4bbd      	ldr	r3, [pc, #756]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4bbc      	ldr	r3, [pc, #752]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80015aa:	49bd      	ldr	r1, [pc, #756]	@ (80018a0 <HAL_RCC_OscConfig+0x670>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fbec 	bl	8000d8c <HAL_GetTick>
 80015b4:	0003      	movs	r3, r0
 80015b6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ba:	f7ff fbe7 	bl	8000d8c <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e1ea      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015cc:	4bb3      	ldr	r3, [pc, #716]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4013      	ands	r3, r2
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2208      	movs	r2, #8
 80015de:	4013      	ands	r3, r2
 80015e0:	d036      	beq.n	8001650 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d019      	beq.n	800161e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ea:	4bac      	ldr	r3, [pc, #688]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80015ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015ee:	4bab      	ldr	r3, [pc, #684]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80015f0:	2101      	movs	r1, #1
 80015f2:	430a      	orrs	r2, r1
 80015f4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fbc9 	bl	8000d8c <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001600:	f7ff fbc4 	bl	8000d8c <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e1c7      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001612:	4ba2      	ldr	r3, [pc, #648]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001616:	2202      	movs	r2, #2
 8001618:	4013      	ands	r3, r2
 800161a:	d0f1      	beq.n	8001600 <HAL_RCC_OscConfig+0x3d0>
 800161c:	e018      	b.n	8001650 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161e:	4b9f      	ldr	r3, [pc, #636]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001620:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001622:	4b9e      	ldr	r3, [pc, #632]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001624:	2101      	movs	r1, #1
 8001626:	438a      	bics	r2, r1
 8001628:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162a:	f7ff fbaf 	bl	8000d8c <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fbaa 	bl	8000d8c <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1ad      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001646:	4b95      	ldr	r3, [pc, #596]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800164a:	2202      	movs	r2, #2
 800164c:	4013      	ands	r3, r2
 800164e:	d1f1      	bne.n	8001634 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2204      	movs	r2, #4
 8001656:	4013      	ands	r3, r2
 8001658:	d100      	bne.n	800165c <HAL_RCC_OscConfig+0x42c>
 800165a:	e0ae      	b.n	80017ba <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165c:	2027      	movs	r0, #39	@ 0x27
 800165e:	183b      	adds	r3, r7, r0
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001664:	4b8d      	ldr	r3, [pc, #564]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	055b      	lsls	r3, r3, #21
 800166c:	4013      	ands	r3, r2
 800166e:	d109      	bne.n	8001684 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	4b8a      	ldr	r3, [pc, #552]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001674:	4b89      	ldr	r3, [pc, #548]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001676:	2180      	movs	r1, #128	@ 0x80
 8001678:	0549      	lsls	r1, r1, #21
 800167a:	430a      	orrs	r2, r1
 800167c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800167e:	183b      	adds	r3, r7, r0
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001684:	4b87      	ldr	r3, [pc, #540]	@ (80018a4 <HAL_RCC_OscConfig+0x674>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	@ 0x80
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4013      	ands	r3, r2
 800168e:	d11a      	bne.n	80016c6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001690:	4b84      	ldr	r3, [pc, #528]	@ (80018a4 <HAL_RCC_OscConfig+0x674>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b83      	ldr	r3, [pc, #524]	@ (80018a4 <HAL_RCC_OscConfig+0x674>)
 8001696:	2180      	movs	r1, #128	@ 0x80
 8001698:	0049      	lsls	r1, r1, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169e:	f7ff fb75 	bl	8000d8c <HAL_GetTick>
 80016a2:	0003      	movs	r3, r0
 80016a4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a8:	f7ff fb70 	bl	8000d8c <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	@ 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e173      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b7a      	ldr	r3, [pc, #488]	@ (80018a4 <HAL_RCC_OscConfig+0x674>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4013      	ands	r3, r2
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	2380      	movs	r3, #128	@ 0x80
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_OscConfig+0x4b2>
 80016d2:	4b72      	ldr	r3, [pc, #456]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80016d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016d6:	4b71      	ldr	r3, [pc, #452]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80016d8:	2180      	movs	r1, #128	@ 0x80
 80016da:	0049      	lsls	r1, r1, #1
 80016dc:	430a      	orrs	r2, r1
 80016de:	651a      	str	r2, [r3, #80]	@ 0x50
 80016e0:	e031      	b.n	8001746 <HAL_RCC_OscConfig+0x516>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x4d4>
 80016ea:	4b6c      	ldr	r3, [pc, #432]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80016ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016ee:	4b6b      	ldr	r3, [pc, #428]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80016f0:	496b      	ldr	r1, [pc, #428]	@ (80018a0 <HAL_RCC_OscConfig+0x670>)
 80016f2:	400a      	ands	r2, r1
 80016f4:	651a      	str	r2, [r3, #80]	@ 0x50
 80016f6:	4b69      	ldr	r3, [pc, #420]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80016f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016fa:	4b68      	ldr	r3, [pc, #416]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80016fc:	496a      	ldr	r1, [pc, #424]	@ (80018a8 <HAL_RCC_OscConfig+0x678>)
 80016fe:	400a      	ands	r2, r1
 8001700:	651a      	str	r2, [r3, #80]	@ 0x50
 8001702:	e020      	b.n	8001746 <HAL_RCC_OscConfig+0x516>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	23a0      	movs	r3, #160	@ 0xa0
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	429a      	cmp	r2, r3
 800170e:	d10e      	bne.n	800172e <HAL_RCC_OscConfig+0x4fe>
 8001710:	4b62      	ldr	r3, [pc, #392]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001712:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001714:	4b61      	ldr	r3, [pc, #388]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001716:	2180      	movs	r1, #128	@ 0x80
 8001718:	00c9      	lsls	r1, r1, #3
 800171a:	430a      	orrs	r2, r1
 800171c:	651a      	str	r2, [r3, #80]	@ 0x50
 800171e:	4b5f      	ldr	r3, [pc, #380]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001720:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001722:	4b5e      	ldr	r3, [pc, #376]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001724:	2180      	movs	r1, #128	@ 0x80
 8001726:	0049      	lsls	r1, r1, #1
 8001728:	430a      	orrs	r2, r1
 800172a:	651a      	str	r2, [r3, #80]	@ 0x50
 800172c:	e00b      	b.n	8001746 <HAL_RCC_OscConfig+0x516>
 800172e:	4b5b      	ldr	r3, [pc, #364]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001730:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001732:	4b5a      	ldr	r3, [pc, #360]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001734:	495a      	ldr	r1, [pc, #360]	@ (80018a0 <HAL_RCC_OscConfig+0x670>)
 8001736:	400a      	ands	r2, r1
 8001738:	651a      	str	r2, [r3, #80]	@ 0x50
 800173a:	4b58      	ldr	r3, [pc, #352]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 800173c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800173e:	4b57      	ldr	r3, [pc, #348]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001740:	4959      	ldr	r1, [pc, #356]	@ (80018a8 <HAL_RCC_OscConfig+0x678>)
 8001742:	400a      	ands	r2, r1
 8001744:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d015      	beq.n	800177a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff fb1d 	bl	8000d8c <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001756:	e009      	b.n	800176c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff fb18 	bl	8000d8c <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	4a52      	ldr	r2, [pc, #328]	@ (80018ac <HAL_RCC_OscConfig+0x67c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e11a      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800176c:	4b4b      	ldr	r3, [pc, #300]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 800176e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d0ef      	beq.n	8001758 <HAL_RCC_OscConfig+0x528>
 8001778:	e014      	b.n	80017a4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7ff fb07 	bl	8000d8c <HAL_GetTick>
 800177e:	0003      	movs	r3, r0
 8001780:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001782:	e009      	b.n	8001798 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001784:	f7ff fb02 	bl	8000d8c <HAL_GetTick>
 8001788:	0002      	movs	r2, r0
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	4a47      	ldr	r2, [pc, #284]	@ (80018ac <HAL_RCC_OscConfig+0x67c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e104      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001798:	4b40      	ldr	r3, [pc, #256]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 800179a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800179c:	2380      	movs	r3, #128	@ 0x80
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4013      	ands	r3, r2
 80017a2:	d1ef      	bne.n	8001784 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017a4:	2327      	movs	r3, #39	@ 0x27
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d105      	bne.n	80017ba <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ae:	4b3b      	ldr	r3, [pc, #236]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80017b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017b2:	4b3a      	ldr	r3, [pc, #232]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80017b4:	493e      	ldr	r1, [pc, #248]	@ (80018b0 <HAL_RCC_OscConfig+0x680>)
 80017b6:	400a      	ands	r2, r1
 80017b8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2220      	movs	r2, #32
 80017c0:	4013      	ands	r3, r2
 80017c2:	d049      	beq.n	8001858 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d026      	beq.n	800181a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017cc:	4b33      	ldr	r3, [pc, #204]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	4b32      	ldr	r3, [pc, #200]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	430a      	orrs	r2, r1
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	4b30      	ldr	r3, [pc, #192]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80017da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017dc:	4b2f      	ldr	r3, [pc, #188]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 80017de:	2101      	movs	r1, #1
 80017e0:	430a      	orrs	r2, r1
 80017e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80017e4:	4b33      	ldr	r3, [pc, #204]	@ (80018b4 <HAL_RCC_OscConfig+0x684>)
 80017e6:	6a1a      	ldr	r2, [r3, #32]
 80017e8:	4b32      	ldr	r3, [pc, #200]	@ (80018b4 <HAL_RCC_OscConfig+0x684>)
 80017ea:	2180      	movs	r1, #128	@ 0x80
 80017ec:	0189      	lsls	r1, r1, #6
 80017ee:	430a      	orrs	r2, r1
 80017f0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7ff facb 	bl	8000d8c <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017fc:	f7ff fac6 	bl	8000d8c <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e0c9      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800180e:	4b23      	ldr	r3, [pc, #140]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2202      	movs	r2, #2
 8001814:	4013      	ands	r3, r2
 8001816:	d0f1      	beq.n	80017fc <HAL_RCC_OscConfig+0x5cc>
 8001818:	e01e      	b.n	8001858 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800181a:	4b20      	ldr	r3, [pc, #128]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001820:	2101      	movs	r1, #1
 8001822:	438a      	bics	r2, r1
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <HAL_RCC_OscConfig+0x684>)
 8001828:	6a1a      	ldr	r2, [r3, #32]
 800182a:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <HAL_RCC_OscConfig+0x684>)
 800182c:	4922      	ldr	r1, [pc, #136]	@ (80018b8 <HAL_RCC_OscConfig+0x688>)
 800182e:	400a      	ands	r2, r1
 8001830:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7ff faab 	bl	8000d8c <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800183c:	f7ff faa6 	bl	8000d8c <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e0a9      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800184e:	4b13      	ldr	r3, [pc, #76]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2202      	movs	r2, #2
 8001854:	4013      	ands	r3, r2
 8001856:	d1f1      	bne.n	800183c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	d100      	bne.n	8001862 <HAL_RCC_OscConfig+0x632>
 8001860:	e09e      	b.n	80019a0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	d100      	bne.n	800186a <HAL_RCC_OscConfig+0x63a>
 8001868:	e077      	b.n	800195a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	2b02      	cmp	r3, #2
 8001870:	d158      	bne.n	8001924 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_RCC_OscConfig+0x66c>)
 8001878:	4910      	ldr	r1, [pc, #64]	@ (80018bc <HAL_RCC_OscConfig+0x68c>)
 800187a:	400a      	ands	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff fa85 	bl	8000d8c <HAL_GetTick>
 8001882:	0003      	movs	r3, r0
 8001884:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001886:	e01b      	b.n	80018c0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff fa80 	bl	8000d8c <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d914      	bls.n	80018c0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e083      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	40021000 	.word	0x40021000
 80018a0:	fffffeff 	.word	0xfffffeff
 80018a4:	40007000 	.word	0x40007000
 80018a8:	fffffbff 	.word	0xfffffbff
 80018ac:	00001388 	.word	0x00001388
 80018b0:	efffffff 	.word	0xefffffff
 80018b4:	40010000 	.word	0x40010000
 80018b8:	ffffdfff 	.word	0xffffdfff
 80018bc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018c0:	4b3a      	ldr	r3, [pc, #232]	@ (80019ac <HAL_RCC_OscConfig+0x77c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	@ 0x80
 80018c6:	049b      	lsls	r3, r3, #18
 80018c8:	4013      	ands	r3, r2
 80018ca:	d1dd      	bne.n	8001888 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018cc:	4b37      	ldr	r3, [pc, #220]	@ (80019ac <HAL_RCC_OscConfig+0x77c>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4a37      	ldr	r2, [pc, #220]	@ (80019b0 <HAL_RCC_OscConfig+0x780>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	0019      	movs	r1, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e4:	431a      	orrs	r2, r3
 80018e6:	4b31      	ldr	r3, [pc, #196]	@ (80019ac <HAL_RCC_OscConfig+0x77c>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b2f      	ldr	r3, [pc, #188]	@ (80019ac <HAL_RCC_OscConfig+0x77c>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b2e      	ldr	r3, [pc, #184]	@ (80019ac <HAL_RCC_OscConfig+0x77c>)
 80018f2:	2180      	movs	r1, #128	@ 0x80
 80018f4:	0449      	lsls	r1, r1, #17
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fa:	f7ff fa47 	bl	8000d8c <HAL_GetTick>
 80018fe:	0003      	movs	r3, r0
 8001900:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff fa42 	bl	8000d8c <HAL_GetTick>
 8001908:	0002      	movs	r2, r0
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e045      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001916:	4b25      	ldr	r3, [pc, #148]	@ (80019ac <HAL_RCC_OscConfig+0x77c>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	2380      	movs	r3, #128	@ 0x80
 800191c:	049b      	lsls	r3, r3, #18
 800191e:	4013      	ands	r3, r2
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x6d4>
 8001922:	e03d      	b.n	80019a0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001924:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <HAL_RCC_OscConfig+0x77c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <HAL_RCC_OscConfig+0x77c>)
 800192a:	4922      	ldr	r1, [pc, #136]	@ (80019b4 <HAL_RCC_OscConfig+0x784>)
 800192c:	400a      	ands	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001930:	f7ff fa2c 	bl	8000d8c <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff fa27 	bl	8000d8c <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e02a      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800194c:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <HAL_RCC_OscConfig+0x77c>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	@ 0x80
 8001952:	049b      	lsls	r3, r3, #18
 8001954:	4013      	ands	r3, r2
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x70a>
 8001958:	e022      	b.n	80019a0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e01d      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <HAL_RCC_OscConfig+0x77c>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196c:	69fa      	ldr	r2, [r7, #28]
 800196e:	2380      	movs	r3, #128	@ 0x80
 8001970:	025b      	lsls	r3, r3, #9
 8001972:	401a      	ands	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001978:	429a      	cmp	r2, r3
 800197a:	d10f      	bne.n	800199c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	23f0      	movs	r3, #240	@ 0xf0
 8001980:	039b      	lsls	r3, r3, #14
 8001982:	401a      	ands	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d107      	bne.n	800199c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	23c0      	movs	r3, #192	@ 0xc0
 8001990:	041b      	lsls	r3, r3, #16
 8001992:	401a      	ands	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b00a      	add	sp, #40	@ 0x28
 80019a8:	bdb0      	pop	{r4, r5, r7, pc}
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	40021000 	.word	0x40021000
 80019b0:	ff02ffff 	.word	0xff02ffff
 80019b4:	feffffff 	.word	0xfeffffff

080019b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e128      	b.n	8001c1e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b96      	ldr	r3, [pc, #600]	@ (8001c28 <HAL_RCC_ClockConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2201      	movs	r2, #1
 80019d2:	4013      	ands	r3, r2
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d91e      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b93      	ldr	r3, [pc, #588]	@ (8001c28 <HAL_RCC_ClockConfig+0x270>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2201      	movs	r2, #1
 80019e0:	4393      	bics	r3, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	4b90      	ldr	r3, [pc, #576]	@ (8001c28 <HAL_RCC_ClockConfig+0x270>)
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019ec:	f7ff f9ce 	bl	8000d8c <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f4:	e009      	b.n	8001a0a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f6:	f7ff f9c9 	bl	8000d8c <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	4a8a      	ldr	r2, [pc, #552]	@ (8001c2c <HAL_RCC_ClockConfig+0x274>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e109      	b.n	8001c1e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b87      	ldr	r3, [pc, #540]	@ (8001c28 <HAL_RCC_ClockConfig+0x270>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	4013      	ands	r3, r2
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d1ee      	bne.n	80019f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d009      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a22:	4b83      	ldr	r3, [pc, #524]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	22f0      	movs	r2, #240	@ 0xf0
 8001a28:	4393      	bics	r3, r2
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	4b7f      	ldr	r3, [pc, #508]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001a32:	430a      	orrs	r2, r1
 8001a34:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x8a>
 8001a40:	e089      	b.n	8001b56 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a4a:	4b79      	ldr	r3, [pc, #484]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	@ 0x80
 8001a50:	029b      	lsls	r3, r3, #10
 8001a52:	4013      	ands	r3, r2
 8001a54:	d120      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e0e1      	b.n	8001c1e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a62:	4b73      	ldr	r3, [pc, #460]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	2380      	movs	r3, #128	@ 0x80
 8001a68:	049b      	lsls	r3, r3, #18
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d114      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0d5      	b.n	8001c1e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d106      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2204      	movs	r2, #4
 8001a80:	4013      	ands	r3, r2
 8001a82:	d109      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0ca      	b.n	8001c1e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a88:	4b69      	ldr	r3, [pc, #420]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2380      	movs	r3, #128	@ 0x80
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4013      	ands	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0c2      	b.n	8001c1e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a98:	4b65      	ldr	r3, [pc, #404]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	4393      	bics	r3, r2
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	4b62      	ldr	r3, [pc, #392]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aac:	f7ff f96e 	bl	8000d8c <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d111      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001abc:	e009      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abe:	f7ff f965 	bl	8000d8c <HAL_GetTick>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	4a58      	ldr	r2, [pc, #352]	@ (8001c2c <HAL_RCC_ClockConfig+0x274>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e0a5      	b.n	8001c1e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad2:	4b57      	ldr	r3, [pc, #348]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d1ef      	bne.n	8001abe <HAL_RCC_ClockConfig+0x106>
 8001ade:	e03a      	b.n	8001b56 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d111      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae8:	e009      	b.n	8001afe <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aea:	f7ff f94f 	bl	8000d8c <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	4a4d      	ldr	r2, [pc, #308]	@ (8001c2c <HAL_RCC_ClockConfig+0x274>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e08f      	b.n	8001c1e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afe:	4b4c      	ldr	r3, [pc, #304]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	220c      	movs	r2, #12
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d1ef      	bne.n	8001aea <HAL_RCC_ClockConfig+0x132>
 8001b0a:	e024      	b.n	8001b56 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d11b      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b14:	e009      	b.n	8001b2a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b16:	f7ff f939 	bl	8000d8c <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	4a42      	ldr	r2, [pc, #264]	@ (8001c2c <HAL_RCC_ClockConfig+0x274>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e079      	b.n	8001c1e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b2a:	4b41      	ldr	r3, [pc, #260]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	220c      	movs	r2, #12
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d1ef      	bne.n	8001b16 <HAL_RCC_ClockConfig+0x15e>
 8001b36:	e00e      	b.n	8001b56 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7ff f928 	bl	8000d8c <HAL_GetTick>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	4a3a      	ldr	r2, [pc, #232]	@ (8001c2c <HAL_RCC_ClockConfig+0x274>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e068      	b.n	8001c1e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b4c:	4b38      	ldr	r3, [pc, #224]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	220c      	movs	r2, #12
 8001b52:	4013      	ands	r3, r2
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b56:	4b34      	ldr	r3, [pc, #208]	@ (8001c28 <HAL_RCC_ClockConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d21e      	bcs.n	8001ba2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b64:	4b30      	ldr	r3, [pc, #192]	@ (8001c28 <HAL_RCC_ClockConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4393      	bics	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c28 <HAL_RCC_ClockConfig+0x270>)
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b76:	f7ff f909 	bl	8000d8c <HAL_GetTick>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	e009      	b.n	8001b94 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7ff f904 	bl	8000d8c <HAL_GetTick>
 8001b84:	0002      	movs	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	4a28      	ldr	r2, [pc, #160]	@ (8001c2c <HAL_RCC_ClockConfig+0x274>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e044      	b.n	8001c1e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b94:	4b24      	ldr	r3, [pc, #144]	@ (8001c28 <HAL_RCC_ClockConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d1ee      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d009      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bac:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4a20      	ldr	r2, [pc, #128]	@ (8001c34 <HAL_RCC_ClockConfig+0x27c>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d00a      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bca:	4b19      	ldr	r3, [pc, #100]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	4a1a      	ldr	r2, [pc, #104]	@ (8001c38 <HAL_RCC_ClockConfig+0x280>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	00da      	lsls	r2, r3, #3
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001be0:	f000 f832 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001be4:	0001      	movs	r1, r0
 8001be6:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_RCC_ClockConfig+0x278>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	220f      	movs	r2, #15
 8001bee:	4013      	ands	r3, r2
 8001bf0:	4a12      	ldr	r2, [pc, #72]	@ (8001c3c <HAL_RCC_ClockConfig+0x284>)
 8001bf2:	5cd3      	ldrb	r3, [r2, r3]
 8001bf4:	000a      	movs	r2, r1
 8001bf6:	40da      	lsrs	r2, r3
 8001bf8:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <HAL_RCC_ClockConfig+0x288>)
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_RCC_ClockConfig+0x28c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	250b      	movs	r5, #11
 8001c02:	197c      	adds	r4, r7, r5
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7ff f87b 	bl	8000d00 <HAL_InitTick>
 8001c0a:	0003      	movs	r3, r0
 8001c0c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c0e:	197b      	adds	r3, r7, r5
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c16:	197b      	adds	r3, r7, r5
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b004      	add	sp, #16
 8001c24:	bdb0      	pop	{r4, r5, r7, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	40022000 	.word	0x40022000
 8001c2c:	00001388 	.word	0x00001388
 8001c30:	40021000 	.word	0x40021000
 8001c34:	fffff8ff 	.word	0xfffff8ff
 8001c38:	ffffc7ff 	.word	0xffffc7ff
 8001c3c:	08003838 	.word	0x08003838
 8001c40:	20000010 	.word	0x20000010
 8001c44:	20000014 	.word	0x20000014

08001c48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	220c      	movs	r2, #12
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d013      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0x3e>
 8001c5e:	d85c      	bhi.n	8001d1a <HAL_RCC_GetSysClockFreq+0xd2>
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d002      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x22>
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d00b      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x38>
 8001c68:	e057      	b.n	8001d1a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c6a:	4b35      	ldr	r3, [pc, #212]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2210      	movs	r2, #16
 8001c70:	4013      	ands	r3, r2
 8001c72:	d002      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c74:	4b33      	ldr	r3, [pc, #204]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c76:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c78:	e05d      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001c7a:	4b33      	ldr	r3, [pc, #204]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c7c:	613b      	str	r3, [r7, #16]
      break;
 8001c7e:	e05a      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c80:	4b32      	ldr	r3, [pc, #200]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x104>)
 8001c82:	613b      	str	r3, [r7, #16]
      break;
 8001c84:	e057      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	0c9b      	lsrs	r3, r3, #18
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	4a30      	ldr	r2, [pc, #192]	@ (8001d50 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c90:	5cd3      	ldrb	r3, [r2, r3]
 8001c92:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	0d9b      	lsrs	r3, r3, #22
 8001c98:	2203      	movs	r2, #3
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca0:	4b27      	ldr	r3, [pc, #156]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	2380      	movs	r3, #128	@ 0x80
 8001ca6:	025b      	lsls	r3, r3, #9
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d00f      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	000a      	movs	r2, r1
 8001cb0:	0152      	lsls	r2, r2, #5
 8001cb2:	1a52      	subs	r2, r2, r1
 8001cb4:	0193      	lsls	r3, r2, #6
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	185b      	adds	r3, r3, r1
 8001cbc:	025b      	lsls	r3, r3, #9
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7fe fa3d 	bl	8000140 <__udivsi3>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e023      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2210      	movs	r2, #16
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d00f      	beq.n	8001cf6 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001cd6:	68b9      	ldr	r1, [r7, #8]
 8001cd8:	000a      	movs	r2, r1
 8001cda:	0152      	lsls	r2, r2, #5
 8001cdc:	1a52      	subs	r2, r2, r1
 8001cde:	0193      	lsls	r3, r2, #6
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	185b      	adds	r3, r3, r1
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7fe fa28 	bl	8000140 <__udivsi3>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e00e      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001cf6:	68b9      	ldr	r1, [r7, #8]
 8001cf8:	000a      	movs	r2, r1
 8001cfa:	0152      	lsls	r2, r2, #5
 8001cfc:	1a52      	subs	r2, r2, r1
 8001cfe:	0193      	lsls	r3, r2, #6
 8001d00:	1a9b      	subs	r3, r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	185b      	adds	r3, r3, r1
 8001d06:	029b      	lsls	r3, r3, #10
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f7fe fa18 	bl	8000140 <__udivsi3>
 8001d10:	0003      	movs	r3, r0
 8001d12:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	613b      	str	r3, [r7, #16]
      break;
 8001d18:	e00d      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	0b5b      	lsrs	r3, r3, #13
 8001d20:	2207      	movs	r2, #7
 8001d22:	4013      	ands	r3, r2
 8001d24:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	2280      	movs	r2, #128	@ 0x80
 8001d2c:	0212      	lsls	r2, r2, #8
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	0013      	movs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
      break;
 8001d34:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d36:	693b      	ldr	r3, [r7, #16]
}
 8001d38:	0018      	movs	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b006      	add	sp, #24
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	003d0900 	.word	0x003d0900
 8001d48:	00f42400 	.word	0x00f42400
 8001d4c:	007a1200 	.word	0x007a1200
 8001d50:	08003850 	.word	0x08003850

08001d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d58:	4b02      	ldr	r3, [pc, #8]	@ (8001d64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	20000010 	.word	0x20000010

08001d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d6c:	f7ff fff2 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d70:	0001      	movs	r1, r0
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	2207      	movs	r2, #7
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	40d9      	lsrs	r1, r3
 8001d82:	000b      	movs	r3, r1
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08003848 	.word	0x08003848

08001d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d98:	f7ff ffdc 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d9c:	0001      	movs	r1, r0
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	0adb      	lsrs	r3, r3, #11
 8001da4:	2207      	movs	r2, #7
 8001da6:	4013      	ands	r3, r2
 8001da8:	4a04      	ldr	r2, [pc, #16]	@ (8001dbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001daa:	5cd3      	ldrb	r3, [r2, r3]
 8001dac:	40d9      	lsrs	r1, r3
 8001dae:	000b      	movs	r3, r1
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	08003848 	.word	0x08003848

08001dc0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001dc8:	2317      	movs	r3, #23
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d106      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	2380      	movs	r3, #128	@ 0x80
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	4013      	ands	r3, r2
 8001de4:	d100      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001de6:	e104      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de8:	4bb1      	ldr	r3, [pc, #708]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	055b      	lsls	r3, r3, #21
 8001df0:	4013      	ands	r3, r2
 8001df2:	d10a      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df4:	4bae      	ldr	r3, [pc, #696]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001df6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001df8:	4bad      	ldr	r3, [pc, #692]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dfa:	2180      	movs	r1, #128	@ 0x80
 8001dfc:	0549      	lsls	r1, r1, #21
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001e02:	2317      	movs	r3, #23
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0a:	4baa      	ldr	r3, [pc, #680]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	d11a      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e16:	4ba7      	ldr	r3, [pc, #668]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4ba6      	ldr	r3, [pc, #664]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e1c:	2180      	movs	r1, #128	@ 0x80
 8001e1e:	0049      	lsls	r1, r1, #1
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e24:	f7fe ffb2 	bl	8000d8c <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	e008      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2e:	f7fe ffad 	bl	8000d8c <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b64      	cmp	r3, #100	@ 0x64
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e133      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	4b9c      	ldr	r3, [pc, #624]	@ (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2380      	movs	r3, #128	@ 0x80
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e4c:	4b98      	ldr	r3, [pc, #608]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	23c0      	movs	r3, #192	@ 0xc0
 8001e52:	039b      	lsls	r3, r3, #14
 8001e54:	4013      	ands	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	23c0      	movs	r3, #192	@ 0xc0
 8001e5e:	039b      	lsls	r3, r3, #14
 8001e60:	4013      	ands	r3, r2
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d107      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	23c0      	movs	r3, #192	@ 0xc0
 8001e6e:	039b      	lsls	r3, r3, #14
 8001e70:	4013      	ands	r3, r2
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d013      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	23c0      	movs	r3, #192	@ 0xc0
 8001e7e:	029b      	lsls	r3, r3, #10
 8001e80:	401a      	ands	r2, r3
 8001e82:	23c0      	movs	r3, #192	@ 0xc0
 8001e84:	029b      	lsls	r3, r3, #10
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d10a      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e8a:	4b89      	ldr	r3, [pc, #548]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	2380      	movs	r3, #128	@ 0x80
 8001e90:	029b      	lsls	r3, r3, #10
 8001e92:	401a      	ands	r2, r3
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	029b      	lsls	r3, r3, #10
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e103      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001ea0:	4b83      	ldr	r3, [pc, #524]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ea2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ea4:	23c0      	movs	r3, #192	@ 0xc0
 8001ea6:	029b      	lsls	r3, r3, #10
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d049      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	23c0      	movs	r3, #192	@ 0xc0
 8001eb8:	029b      	lsls	r3, r3, #10
 8001eba:	4013      	ands	r3, r2
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d004      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	23c0      	movs	r3, #192	@ 0xc0
 8001ed2:	029b      	lsls	r3, r3, #10
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d034      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2380      	movs	r3, #128	@ 0x80
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d02e      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001ee8:	4b71      	ldr	r3, [pc, #452]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eec:	4a72      	ldr	r2, [pc, #456]	@ (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ef2:	4b6f      	ldr	r3, [pc, #444]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ef4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ef6:	4b6e      	ldr	r3, [pc, #440]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ef8:	2180      	movs	r1, #128	@ 0x80
 8001efa:	0309      	lsls	r1, r1, #12
 8001efc:	430a      	orrs	r2, r1
 8001efe:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f00:	4b6b      	ldr	r3, [pc, #428]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f04:	4b6a      	ldr	r3, [pc, #424]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f06:	496d      	ldr	r1, [pc, #436]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001f08:	400a      	ands	r2, r1
 8001f0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f0c:	4b68      	ldr	r3, [pc, #416]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	2380      	movs	r3, #128	@ 0x80
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d014      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7fe ff36 	bl	8000d8c <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f24:	e009      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe ff31 	bl	8000d8c <HAL_GetTick>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	4a63      	ldr	r2, [pc, #396]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e0b6      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f3e:	2380      	movs	r3, #128	@ 0x80
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4013      	ands	r3, r2
 8001f44:	d0ef      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d01f      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	23c0      	movs	r3, #192	@ 0xc0
 8001f58:	029b      	lsls	r3, r3, #10
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	23c0      	movs	r3, #192	@ 0xc0
 8001f5e:	029b      	lsls	r3, r3, #10
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d10c      	bne.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001f64:	4b52      	ldr	r3, [pc, #328]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a56      	ldr	r2, [pc, #344]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	0019      	movs	r1, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	23c0      	movs	r3, #192	@ 0xc0
 8001f74:	039b      	lsls	r3, r3, #14
 8001f76:	401a      	ands	r2, r3
 8001f78:	4b4d      	ldr	r3, [pc, #308]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	4b4c      	ldr	r3, [pc, #304]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f80:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	23c0      	movs	r3, #192	@ 0xc0
 8001f88:	029b      	lsls	r3, r3, #10
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	4b48      	ldr	r3, [pc, #288]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2220      	movs	r2, #32
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d01f      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	23c0      	movs	r3, #192	@ 0xc0
 8001fa2:	029b      	lsls	r3, r3, #10
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	23c0      	movs	r3, #192	@ 0xc0
 8001fa8:	029b      	lsls	r3, r3, #10
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001fae:	4b40      	ldr	r3, [pc, #256]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a44      	ldr	r2, [pc, #272]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	23c0      	movs	r3, #192	@ 0xc0
 8001fbe:	039b      	lsls	r3, r3, #14
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	4b39      	ldr	r3, [pc, #228]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fca:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	23c0      	movs	r3, #192	@ 0xc0
 8001fd2:	029b      	lsls	r3, r3, #10
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	4b36      	ldr	r3, [pc, #216]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fdc:	2317      	movs	r3, #23
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d105      	bne.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe6:	4b32      	ldr	r3, [pc, #200]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fea:	4b31      	ldr	r3, [pc, #196]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fec:	4936      	ldr	r1, [pc, #216]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001fee:	400a      	ands	r2, r1
 8001ff0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002000:	2203      	movs	r2, #3
 8002002:	4393      	bics	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	4b29      	ldr	r3, [pc, #164]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800200c:	430a      	orrs	r2, r1
 800200e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2202      	movs	r2, #2
 8002016:	4013      	ands	r3, r2
 8002018:	d009      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800201a:	4b25      	ldr	r3, [pc, #148]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800201c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201e:	220c      	movs	r2, #12
 8002020:	4393      	bics	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	4b21      	ldr	r3, [pc, #132]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800202a:	430a      	orrs	r2, r1
 800202c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2204      	movs	r2, #4
 8002034:	4013      	ands	r3, r2
 8002036:	d009      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002038:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800203c:	4a23      	ldr	r2, [pc, #140]	@ (80020cc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800203e:	4013      	ands	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695a      	ldr	r2, [r3, #20]
 8002046:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002048:	430a      	orrs	r2, r1
 800204a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2208      	movs	r2, #8
 8002052:	4013      	ands	r3, r2
 8002054:	d009      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002056:	4b16      	ldr	r3, [pc, #88]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205a:	4a1d      	ldr	r2, [pc, #116]	@ (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800205c:	4013      	ands	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	699a      	ldr	r2, [r3, #24]
 8002064:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002066:	430a      	orrs	r2, r1
 8002068:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2240      	movs	r2, #64	@ 0x40
 8002070:	4013      	ands	r3, r2
 8002072:	d009      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002074:	4b0e      	ldr	r3, [pc, #56]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002078:	4a16      	ldr	r2, [pc, #88]	@ (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800207a:	4013      	ands	r3, r2
 800207c:	0019      	movs	r1, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002084:	430a      	orrs	r2, r1
 8002086:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2280      	movs	r2, #128	@ 0x80
 800208e:	4013      	ands	r3, r2
 8002090:	d009      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002092:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002096:	4a10      	ldr	r2, [pc, #64]	@ (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002098:	4013      	ands	r3, r2
 800209a:	0019      	movs	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69da      	ldr	r2, [r3, #28]
 80020a0:	4b03      	ldr	r3, [pc, #12]	@ (80020b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	0018      	movs	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b006      	add	sp, #24
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40007000 	.word	0x40007000
 80020b8:	fffcffff 	.word	0xfffcffff
 80020bc:	fff7ffff 	.word	0xfff7ffff
 80020c0:	00001388 	.word	0x00001388
 80020c4:	ffcfffff 	.word	0xffcfffff
 80020c8:	efffffff 	.word	0xefffffff
 80020cc:	fffff3ff 	.word	0xfffff3ff
 80020d0:	ffffcfff 	.word	0xffffcfff
 80020d4:	fbffffff 	.word	0xfbffffff
 80020d8:	fff3ffff 	.word	0xfff3ffff

080020dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e044      	b.n	8002178 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d107      	bne.n	8002106 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2278      	movs	r2, #120	@ 0x78
 80020fa:	2100      	movs	r1, #0
 80020fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0018      	movs	r0, r3
 8002102:	f7fe fd19 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2224      	movs	r2, #36	@ 0x24
 800210a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2101      	movs	r1, #1
 8002118:	438a      	bics	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	0018      	movs	r0, r3
 8002128:	f000 fc36 	bl	8002998 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	0018      	movs	r0, r3
 8002130:	f000 f9ae 	bl	8002490 <UART_SetConfig>
 8002134:	0003      	movs	r3, r0
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e01c      	b.n	8002178 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	490d      	ldr	r1, [pc, #52]	@ (8002180 <HAL_UART_Init+0xa4>)
 800214a:	400a      	ands	r2, r1
 800214c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	212a      	movs	r1, #42	@ 0x2a
 800215a:	438a      	bics	r2, r1
 800215c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2101      	movs	r1, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	0018      	movs	r0, r3
 8002172:	f000 fcc5 	bl	8002b00 <UART_CheckIdleState>
 8002176:	0003      	movs	r3, r0
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}
 8002180:	ffffb7ff 	.word	0xffffb7ff

08002184 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	@ 0x28
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	1dbb      	adds	r3, r7, #6
 8002192:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002198:	2b20      	cmp	r3, #32
 800219a:	d000      	beq.n	800219e <HAL_UART_Transmit+0x1a>
 800219c:	e08c      	b.n	80022b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_UART_Transmit+0x28>
 80021a4:	1dbb      	adds	r3, r7, #6
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e084      	b.n	80022ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	2380      	movs	r3, #128	@ 0x80
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d109      	bne.n	80021d0 <HAL_UART_Transmit+0x4c>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2201      	movs	r2, #1
 80021c8:	4013      	ands	r3, r2
 80021ca:	d001      	beq.n	80021d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e074      	b.n	80022ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2284      	movs	r2, #132	@ 0x84
 80021d4:	2100      	movs	r1, #0
 80021d6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2221      	movs	r2, #33	@ 0x21
 80021dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021de:	f7fe fdd5 	bl	8000d8c <HAL_GetTick>
 80021e2:	0003      	movs	r3, r0
 80021e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1dba      	adds	r2, r7, #6
 80021ea:	2150      	movs	r1, #80	@ 0x50
 80021ec:	8812      	ldrh	r2, [r2, #0]
 80021ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1dba      	adds	r2, r7, #6
 80021f4:	2152      	movs	r1, #82	@ 0x52
 80021f6:	8812      	ldrh	r2, [r2, #0]
 80021f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	2380      	movs	r3, #128	@ 0x80
 8002200:	015b      	lsls	r3, r3, #5
 8002202:	429a      	cmp	r2, r3
 8002204:	d108      	bne.n	8002218 <HAL_UART_Transmit+0x94>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d104      	bne.n	8002218 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	e003      	b.n	8002220 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800221c:	2300      	movs	r3, #0
 800221e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002220:	e02f      	b.n	8002282 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	0013      	movs	r3, r2
 800222c:	2200      	movs	r2, #0
 800222e:	2180      	movs	r1, #128	@ 0x80
 8002230:	f000 fd0e 	bl	8002c50 <UART_WaitOnFlagUntilTimeout>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d004      	beq.n	8002242 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e03b      	b.n	80022ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10b      	bne.n	8002260 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	001a      	movs	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	05d2      	lsls	r2, r2, #23
 8002254:	0dd2      	lsrs	r2, r2, #23
 8002256:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	3302      	adds	r3, #2
 800225c:	61bb      	str	r3, [r7, #24]
 800225e:	e007      	b.n	8002270 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3301      	adds	r3, #1
 800226e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2252      	movs	r2, #82	@ 0x52
 8002274:	5a9b      	ldrh	r3, [r3, r2]
 8002276:	b29b      	uxth	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	b299      	uxth	r1, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2252      	movs	r2, #82	@ 0x52
 8002280:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2252      	movs	r2, #82	@ 0x52
 8002286:	5a9b      	ldrh	r3, [r3, r2]
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1c9      	bne.n	8002222 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	0013      	movs	r3, r2
 8002298:	2200      	movs	r2, #0
 800229a:	2140      	movs	r1, #64	@ 0x40
 800229c:	f000 fcd8 	bl	8002c50 <UART_WaitOnFlagUntilTimeout>
 80022a0:	1e03      	subs	r3, r0, #0
 80022a2:	d004      	beq.n	80022ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e005      	b.n	80022ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2220      	movs	r2, #32
 80022b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e000      	b.n	80022ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
  }
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b008      	add	sp, #32
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	@ 0x28
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	1dbb      	adds	r3, r7, #6
 80022d2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2280      	movs	r2, #128	@ 0x80
 80022d8:	589b      	ldr	r3, [r3, r2]
 80022da:	2b20      	cmp	r3, #32
 80022dc:	d000      	beq.n	80022e0 <HAL_UART_Receive+0x1c>
 80022de:	e0d0      	b.n	8002482 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_UART_Receive+0x2a>
 80022e6:	1dbb      	adds	r3, r7, #6
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0c8      	b.n	8002484 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	2380      	movs	r3, #128	@ 0x80
 80022f8:	015b      	lsls	r3, r3, #5
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d109      	bne.n	8002312 <HAL_UART_Receive+0x4e>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d105      	bne.n	8002312 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2201      	movs	r2, #1
 800230a:	4013      	ands	r3, r2
 800230c:	d001      	beq.n	8002312 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0b8      	b.n	8002484 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2284      	movs	r2, #132	@ 0x84
 8002316:	2100      	movs	r1, #0
 8002318:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2280      	movs	r2, #128	@ 0x80
 800231e:	2122      	movs	r1, #34	@ 0x22
 8002320:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002328:	f7fe fd30 	bl	8000d8c <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1dba      	adds	r2, r7, #6
 8002334:	2158      	movs	r1, #88	@ 0x58
 8002336:	8812      	ldrh	r2, [r2, #0]
 8002338:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1dba      	adds	r2, r7, #6
 800233e:	215a      	movs	r1, #90	@ 0x5a
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	2380      	movs	r3, #128	@ 0x80
 800234a:	015b      	lsls	r3, r3, #5
 800234c:	429a      	cmp	r2, r3
 800234e:	d10d      	bne.n	800236c <HAL_UART_Receive+0xa8>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d104      	bne.n	8002362 <HAL_UART_Receive+0x9e>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	225c      	movs	r2, #92	@ 0x5c
 800235c:	494b      	ldr	r1, [pc, #300]	@ (800248c <HAL_UART_Receive+0x1c8>)
 800235e:	5299      	strh	r1, [r3, r2]
 8002360:	e02e      	b.n	80023c0 <HAL_UART_Receive+0xfc>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	225c      	movs	r2, #92	@ 0x5c
 8002366:	21ff      	movs	r1, #255	@ 0xff
 8002368:	5299      	strh	r1, [r3, r2]
 800236a:	e029      	b.n	80023c0 <HAL_UART_Receive+0xfc>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10d      	bne.n	8002390 <HAL_UART_Receive+0xcc>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d104      	bne.n	8002386 <HAL_UART_Receive+0xc2>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	225c      	movs	r2, #92	@ 0x5c
 8002380:	21ff      	movs	r1, #255	@ 0xff
 8002382:	5299      	strh	r1, [r3, r2]
 8002384:	e01c      	b.n	80023c0 <HAL_UART_Receive+0xfc>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	225c      	movs	r2, #92	@ 0x5c
 800238a:	217f      	movs	r1, #127	@ 0x7f
 800238c:	5299      	strh	r1, [r3, r2]
 800238e:	e017      	b.n	80023c0 <HAL_UART_Receive+0xfc>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	055b      	lsls	r3, r3, #21
 8002398:	429a      	cmp	r2, r3
 800239a:	d10d      	bne.n	80023b8 <HAL_UART_Receive+0xf4>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d104      	bne.n	80023ae <HAL_UART_Receive+0xea>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	225c      	movs	r2, #92	@ 0x5c
 80023a8:	217f      	movs	r1, #127	@ 0x7f
 80023aa:	5299      	strh	r1, [r3, r2]
 80023ac:	e008      	b.n	80023c0 <HAL_UART_Receive+0xfc>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	225c      	movs	r2, #92	@ 0x5c
 80023b2:	213f      	movs	r1, #63	@ 0x3f
 80023b4:	5299      	strh	r1, [r3, r2]
 80023b6:	e003      	b.n	80023c0 <HAL_UART_Receive+0xfc>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	225c      	movs	r2, #92	@ 0x5c
 80023bc:	2100      	movs	r1, #0
 80023be:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80023c0:	2312      	movs	r3, #18
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	215c      	movs	r1, #92	@ 0x5c
 80023c8:	5a52      	ldrh	r2, [r2, r1]
 80023ca:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	015b      	lsls	r3, r3, #5
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d108      	bne.n	80023ea <HAL_UART_Receive+0x126>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d104      	bne.n	80023ea <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	e003      	b.n	80023f2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80023f2:	e03a      	b.n	800246a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	0013      	movs	r3, r2
 80023fe:	2200      	movs	r2, #0
 8002400:	2120      	movs	r1, #32
 8002402:	f000 fc25 	bl	8002c50 <UART_WaitOnFlagUntilTimeout>
 8002406:	1e03      	subs	r3, r0, #0
 8002408:	d005      	beq.n	8002416 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2280      	movs	r2, #128	@ 0x80
 800240e:	2120      	movs	r1, #32
 8002410:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e036      	b.n	8002484 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10e      	bne.n	800243a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002422:	b29b      	uxth	r3, r3
 8002424:	2212      	movs	r2, #18
 8002426:	18ba      	adds	r2, r7, r2
 8002428:	8812      	ldrh	r2, [r2, #0]
 800242a:	4013      	ands	r3, r2
 800242c:	b29a      	uxth	r2, r3
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	3302      	adds	r3, #2
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	e00e      	b.n	8002458 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2212      	movs	r2, #18
 8002444:	18ba      	adds	r2, r7, r2
 8002446:	8812      	ldrh	r2, [r2, #0]
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	4013      	ands	r3, r2
 800244c:	b2da      	uxtb	r2, r3
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3301      	adds	r3, #1
 8002456:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	225a      	movs	r2, #90	@ 0x5a
 800245c:	5a9b      	ldrh	r3, [r3, r2]
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b299      	uxth	r1, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	225a      	movs	r2, #90	@ 0x5a
 8002468:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	225a      	movs	r2, #90	@ 0x5a
 800246e:	5a9b      	ldrh	r3, [r3, r2]
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1be      	bne.n	80023f4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2280      	movs	r2, #128	@ 0x80
 800247a:	2120      	movs	r1, #32
 800247c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e000      	b.n	8002484 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002482:	2302      	movs	r3, #2
  }
}
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	b008      	add	sp, #32
 800248a:	bd80      	pop	{r7, pc}
 800248c:	000001ff 	.word	0x000001ff

08002490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b08e      	sub	sp, #56	@ 0x38
 8002494:	af00      	add	r7, sp, #0
 8002496:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002498:	231a      	movs	r3, #26
 800249a:	2218      	movs	r2, #24
 800249c:	189b      	adds	r3, r3, r2
 800249e:	19db      	adds	r3, r3, r7
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4ac6      	ldr	r2, [pc, #792]	@ (80027dc <UART_SetConfig+0x34c>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4ac1      	ldr	r2, [pc, #772]	@ (80027e0 <UART_SetConfig+0x350>)
 80024da:	4013      	ands	r3, r2
 80024dc:	0019      	movs	r1, r3
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4abb      	ldr	r2, [pc, #748]	@ (80027e4 <UART_SetConfig+0x354>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d004      	beq.n	8002504 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002500:	4313      	orrs	r3, r2
 8002502:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	4ab7      	ldr	r2, [pc, #732]	@ (80027e8 <UART_SetConfig+0x358>)
 800250c:	4013      	ands	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002516:	430a      	orrs	r2, r1
 8002518:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4ab3      	ldr	r2, [pc, #716]	@ (80027ec <UART_SetConfig+0x35c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d131      	bne.n	8002588 <UART_SetConfig+0xf8>
 8002524:	4bb2      	ldr	r3, [pc, #712]	@ (80027f0 <UART_SetConfig+0x360>)
 8002526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002528:	2203      	movs	r2, #3
 800252a:	4013      	ands	r3, r2
 800252c:	2b03      	cmp	r3, #3
 800252e:	d01d      	beq.n	800256c <UART_SetConfig+0xdc>
 8002530:	d823      	bhi.n	800257a <UART_SetConfig+0xea>
 8002532:	2b02      	cmp	r3, #2
 8002534:	d00c      	beq.n	8002550 <UART_SetConfig+0xc0>
 8002536:	d820      	bhi.n	800257a <UART_SetConfig+0xea>
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <UART_SetConfig+0xb2>
 800253c:	2b01      	cmp	r3, #1
 800253e:	d00e      	beq.n	800255e <UART_SetConfig+0xce>
 8002540:	e01b      	b.n	800257a <UART_SetConfig+0xea>
 8002542:	231b      	movs	r3, #27
 8002544:	2218      	movs	r2, #24
 8002546:	189b      	adds	r3, r3, r2
 8002548:	19db      	adds	r3, r3, r7
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
 800254e:	e09c      	b.n	800268a <UART_SetConfig+0x1fa>
 8002550:	231b      	movs	r3, #27
 8002552:	2218      	movs	r2, #24
 8002554:	189b      	adds	r3, r3, r2
 8002556:	19db      	adds	r3, r3, r7
 8002558:	2202      	movs	r2, #2
 800255a:	701a      	strb	r2, [r3, #0]
 800255c:	e095      	b.n	800268a <UART_SetConfig+0x1fa>
 800255e:	231b      	movs	r3, #27
 8002560:	2218      	movs	r2, #24
 8002562:	189b      	adds	r3, r3, r2
 8002564:	19db      	adds	r3, r3, r7
 8002566:	2204      	movs	r2, #4
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e08e      	b.n	800268a <UART_SetConfig+0x1fa>
 800256c:	231b      	movs	r3, #27
 800256e:	2218      	movs	r2, #24
 8002570:	189b      	adds	r3, r3, r2
 8002572:	19db      	adds	r3, r3, r7
 8002574:	2208      	movs	r2, #8
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	e087      	b.n	800268a <UART_SetConfig+0x1fa>
 800257a:	231b      	movs	r3, #27
 800257c:	2218      	movs	r2, #24
 800257e:	189b      	adds	r3, r3, r2
 8002580:	19db      	adds	r3, r3, r7
 8002582:	2210      	movs	r2, #16
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e080      	b.n	800268a <UART_SetConfig+0x1fa>
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a99      	ldr	r2, [pc, #612]	@ (80027f4 <UART_SetConfig+0x364>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d131      	bne.n	80025f6 <UART_SetConfig+0x166>
 8002592:	4b97      	ldr	r3, [pc, #604]	@ (80027f0 <UART_SetConfig+0x360>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002596:	220c      	movs	r2, #12
 8002598:	4013      	ands	r3, r2
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d01d      	beq.n	80025da <UART_SetConfig+0x14a>
 800259e:	d823      	bhi.n	80025e8 <UART_SetConfig+0x158>
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d00c      	beq.n	80025be <UART_SetConfig+0x12e>
 80025a4:	d820      	bhi.n	80025e8 <UART_SetConfig+0x158>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <UART_SetConfig+0x120>
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d00e      	beq.n	80025cc <UART_SetConfig+0x13c>
 80025ae:	e01b      	b.n	80025e8 <UART_SetConfig+0x158>
 80025b0:	231b      	movs	r3, #27
 80025b2:	2218      	movs	r2, #24
 80025b4:	189b      	adds	r3, r3, r2
 80025b6:	19db      	adds	r3, r3, r7
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	e065      	b.n	800268a <UART_SetConfig+0x1fa>
 80025be:	231b      	movs	r3, #27
 80025c0:	2218      	movs	r2, #24
 80025c2:	189b      	adds	r3, r3, r2
 80025c4:	19db      	adds	r3, r3, r7
 80025c6:	2202      	movs	r2, #2
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e05e      	b.n	800268a <UART_SetConfig+0x1fa>
 80025cc:	231b      	movs	r3, #27
 80025ce:	2218      	movs	r2, #24
 80025d0:	189b      	adds	r3, r3, r2
 80025d2:	19db      	adds	r3, r3, r7
 80025d4:	2204      	movs	r2, #4
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e057      	b.n	800268a <UART_SetConfig+0x1fa>
 80025da:	231b      	movs	r3, #27
 80025dc:	2218      	movs	r2, #24
 80025de:	189b      	adds	r3, r3, r2
 80025e0:	19db      	adds	r3, r3, r7
 80025e2:	2208      	movs	r2, #8
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e050      	b.n	800268a <UART_SetConfig+0x1fa>
 80025e8:	231b      	movs	r3, #27
 80025ea:	2218      	movs	r2, #24
 80025ec:	189b      	adds	r3, r3, r2
 80025ee:	19db      	adds	r3, r3, r7
 80025f0:	2210      	movs	r2, #16
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	e049      	b.n	800268a <UART_SetConfig+0x1fa>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a7a      	ldr	r2, [pc, #488]	@ (80027e4 <UART_SetConfig+0x354>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d13e      	bne.n	800267e <UART_SetConfig+0x1ee>
 8002600:	4b7b      	ldr	r3, [pc, #492]	@ (80027f0 <UART_SetConfig+0x360>)
 8002602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002604:	23c0      	movs	r3, #192	@ 0xc0
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	4013      	ands	r3, r2
 800260a:	22c0      	movs	r2, #192	@ 0xc0
 800260c:	0112      	lsls	r2, r2, #4
 800260e:	4293      	cmp	r3, r2
 8002610:	d027      	beq.n	8002662 <UART_SetConfig+0x1d2>
 8002612:	22c0      	movs	r2, #192	@ 0xc0
 8002614:	0112      	lsls	r2, r2, #4
 8002616:	4293      	cmp	r3, r2
 8002618:	d82a      	bhi.n	8002670 <UART_SetConfig+0x1e0>
 800261a:	2280      	movs	r2, #128	@ 0x80
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	4293      	cmp	r3, r2
 8002620:	d011      	beq.n	8002646 <UART_SetConfig+0x1b6>
 8002622:	2280      	movs	r2, #128	@ 0x80
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	4293      	cmp	r3, r2
 8002628:	d822      	bhi.n	8002670 <UART_SetConfig+0x1e0>
 800262a:	2b00      	cmp	r3, #0
 800262c:	d004      	beq.n	8002638 <UART_SetConfig+0x1a8>
 800262e:	2280      	movs	r2, #128	@ 0x80
 8002630:	00d2      	lsls	r2, r2, #3
 8002632:	4293      	cmp	r3, r2
 8002634:	d00e      	beq.n	8002654 <UART_SetConfig+0x1c4>
 8002636:	e01b      	b.n	8002670 <UART_SetConfig+0x1e0>
 8002638:	231b      	movs	r3, #27
 800263a:	2218      	movs	r2, #24
 800263c:	189b      	adds	r3, r3, r2
 800263e:	19db      	adds	r3, r3, r7
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e021      	b.n	800268a <UART_SetConfig+0x1fa>
 8002646:	231b      	movs	r3, #27
 8002648:	2218      	movs	r2, #24
 800264a:	189b      	adds	r3, r3, r2
 800264c:	19db      	adds	r3, r3, r7
 800264e:	2202      	movs	r2, #2
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e01a      	b.n	800268a <UART_SetConfig+0x1fa>
 8002654:	231b      	movs	r3, #27
 8002656:	2218      	movs	r2, #24
 8002658:	189b      	adds	r3, r3, r2
 800265a:	19db      	adds	r3, r3, r7
 800265c:	2204      	movs	r2, #4
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e013      	b.n	800268a <UART_SetConfig+0x1fa>
 8002662:	231b      	movs	r3, #27
 8002664:	2218      	movs	r2, #24
 8002666:	189b      	adds	r3, r3, r2
 8002668:	19db      	adds	r3, r3, r7
 800266a:	2208      	movs	r2, #8
 800266c:	701a      	strb	r2, [r3, #0]
 800266e:	e00c      	b.n	800268a <UART_SetConfig+0x1fa>
 8002670:	231b      	movs	r3, #27
 8002672:	2218      	movs	r2, #24
 8002674:	189b      	adds	r3, r3, r2
 8002676:	19db      	adds	r3, r3, r7
 8002678:	2210      	movs	r2, #16
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e005      	b.n	800268a <UART_SetConfig+0x1fa>
 800267e:	231b      	movs	r3, #27
 8002680:	2218      	movs	r2, #24
 8002682:	189b      	adds	r3, r3, r2
 8002684:	19db      	adds	r3, r3, r7
 8002686:	2210      	movs	r2, #16
 8002688:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a55      	ldr	r2, [pc, #340]	@ (80027e4 <UART_SetConfig+0x354>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d000      	beq.n	8002696 <UART_SetConfig+0x206>
 8002694:	e084      	b.n	80027a0 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002696:	231b      	movs	r3, #27
 8002698:	2218      	movs	r2, #24
 800269a:	189b      	adds	r3, r3, r2
 800269c:	19db      	adds	r3, r3, r7
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d01d      	beq.n	80026e0 <UART_SetConfig+0x250>
 80026a4:	dc20      	bgt.n	80026e8 <UART_SetConfig+0x258>
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d015      	beq.n	80026d6 <UART_SetConfig+0x246>
 80026aa:	dc1d      	bgt.n	80026e8 <UART_SetConfig+0x258>
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d002      	beq.n	80026b6 <UART_SetConfig+0x226>
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d005      	beq.n	80026c0 <UART_SetConfig+0x230>
 80026b4:	e018      	b.n	80026e8 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026b6:	f7ff fb57 	bl	8001d68 <HAL_RCC_GetPCLK1Freq>
 80026ba:	0003      	movs	r3, r0
 80026bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026be:	e01c      	b.n	80026fa <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026c0:	4b4b      	ldr	r3, [pc, #300]	@ (80027f0 <UART_SetConfig+0x360>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2210      	movs	r2, #16
 80026c6:	4013      	ands	r3, r2
 80026c8:	d002      	beq.n	80026d0 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80026ca:	4b4b      	ldr	r3, [pc, #300]	@ (80027f8 <UART_SetConfig+0x368>)
 80026cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80026ce:	e014      	b.n	80026fa <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80026d0:	4b4a      	ldr	r3, [pc, #296]	@ (80027fc <UART_SetConfig+0x36c>)
 80026d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026d4:	e011      	b.n	80026fa <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026d6:	f7ff fab7 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 80026da:	0003      	movs	r3, r0
 80026dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026de:	e00c      	b.n	80026fa <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026e0:	2380      	movs	r3, #128	@ 0x80
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80026e6:	e008      	b.n	80026fa <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80026ec:	231a      	movs	r3, #26
 80026ee:	2218      	movs	r2, #24
 80026f0:	189b      	adds	r3, r3, r2
 80026f2:	19db      	adds	r3, r3, r7
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
        break;
 80026f8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80026fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d100      	bne.n	8002702 <UART_SetConfig+0x272>
 8002700:	e132      	b.n	8002968 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	0013      	movs	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	189b      	adds	r3, r3, r2
 800270c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800270e:	429a      	cmp	r2, r3
 8002710:	d305      	bcc.n	800271e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800271a:	429a      	cmp	r2, r3
 800271c:	d906      	bls.n	800272c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800271e:	231a      	movs	r3, #26
 8002720:	2218      	movs	r2, #24
 8002722:	189b      	adds	r3, r3, r2
 8002724:	19db      	adds	r3, r3, r7
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	e11d      	b.n	8002968 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800272c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	6939      	ldr	r1, [r7, #16]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	000b      	movs	r3, r1
 800273a:	0e1b      	lsrs	r3, r3, #24
 800273c:	0010      	movs	r0, r2
 800273e:	0205      	lsls	r5, r0, #8
 8002740:	431d      	orrs	r5, r3
 8002742:	000b      	movs	r3, r1
 8002744:	021c      	lsls	r4, r3, #8
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68b8      	ldr	r0, [r7, #8]
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	1900      	adds	r0, r0, r4
 8002758:	4169      	adcs	r1, r5
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	2300      	movs	r3, #0
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f7fd fd76 	bl	8000258 <__aeabi_uldivmod>
 800276c:	0002      	movs	r2, r0
 800276e:	000b      	movs	r3, r1
 8002770:	0013      	movs	r3, r2
 8002772:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002774:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002776:	23c0      	movs	r3, #192	@ 0xc0
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	429a      	cmp	r2, r3
 800277c:	d309      	bcc.n	8002792 <UART_SetConfig+0x302>
 800277e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002780:	2380      	movs	r3, #128	@ 0x80
 8002782:	035b      	lsls	r3, r3, #13
 8002784:	429a      	cmp	r2, r3
 8002786:	d204      	bcs.n	8002792 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800278e:	60da      	str	r2, [r3, #12]
 8002790:	e0ea      	b.n	8002968 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002792:	231a      	movs	r3, #26
 8002794:	2218      	movs	r2, #24
 8002796:	189b      	adds	r3, r3, r2
 8002798:	19db      	adds	r3, r3, r7
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
 800279e:	e0e3      	b.n	8002968 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	69da      	ldr	r2, [r3, #28]
 80027a4:	2380      	movs	r3, #128	@ 0x80
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d000      	beq.n	80027ae <UART_SetConfig+0x31e>
 80027ac:	e085      	b.n	80028ba <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80027ae:	231b      	movs	r3, #27
 80027b0:	2218      	movs	r2, #24
 80027b2:	189b      	adds	r3, r3, r2
 80027b4:	19db      	adds	r3, r3, r7
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d837      	bhi.n	800282c <UART_SetConfig+0x39c>
 80027bc:	009a      	lsls	r2, r3, #2
 80027be:	4b10      	ldr	r3, [pc, #64]	@ (8002800 <UART_SetConfig+0x370>)
 80027c0:	18d3      	adds	r3, r2, r3
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027c6:	f7ff facf 	bl	8001d68 <HAL_RCC_GetPCLK1Freq>
 80027ca:	0003      	movs	r3, r0
 80027cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80027ce:	e036      	b.n	800283e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027d0:	f7ff fae0 	bl	8001d94 <HAL_RCC_GetPCLK2Freq>
 80027d4:	0003      	movs	r3, r0
 80027d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80027d8:	e031      	b.n	800283e <UART_SetConfig+0x3ae>
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	efff69f3 	.word	0xefff69f3
 80027e0:	ffffcfff 	.word	0xffffcfff
 80027e4:	40004800 	.word	0x40004800
 80027e8:	fffff4ff 	.word	0xfffff4ff
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40004400 	.word	0x40004400
 80027f8:	003d0900 	.word	0x003d0900
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	0800385c 	.word	0x0800385c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002804:	4b60      	ldr	r3, [pc, #384]	@ (8002988 <UART_SetConfig+0x4f8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2210      	movs	r2, #16
 800280a:	4013      	ands	r3, r2
 800280c:	d002      	beq.n	8002814 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800280e:	4b5f      	ldr	r3, [pc, #380]	@ (800298c <UART_SetConfig+0x4fc>)
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002812:	e014      	b.n	800283e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002814:	4b5e      	ldr	r3, [pc, #376]	@ (8002990 <UART_SetConfig+0x500>)
 8002816:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002818:	e011      	b.n	800283e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800281a:	f7ff fa15 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 800281e:	0003      	movs	r3, r0
 8002820:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002822:	e00c      	b.n	800283e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800282a:	e008      	b.n	800283e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002830:	231a      	movs	r3, #26
 8002832:	2218      	movs	r2, #24
 8002834:	189b      	adds	r3, r3, r2
 8002836:	19db      	adds	r3, r3, r7
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
        break;
 800283c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800283e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d100      	bne.n	8002846 <UART_SetConfig+0x3b6>
 8002844:	e090      	b.n	8002968 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002848:	005a      	lsls	r2, r3, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	18d2      	adds	r2, r2, r3
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0019      	movs	r1, r3
 8002858:	0010      	movs	r0, r2
 800285a:	f7fd fc71 	bl	8000140 <__udivsi3>
 800285e:	0003      	movs	r3, r0
 8002860:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002864:	2b0f      	cmp	r3, #15
 8002866:	d921      	bls.n	80028ac <UART_SetConfig+0x41c>
 8002868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	025b      	lsls	r3, r3, #9
 800286e:	429a      	cmp	r2, r3
 8002870:	d21c      	bcs.n	80028ac <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002874:	b29a      	uxth	r2, r3
 8002876:	200e      	movs	r0, #14
 8002878:	2418      	movs	r4, #24
 800287a:	1903      	adds	r3, r0, r4
 800287c:	19db      	adds	r3, r3, r7
 800287e:	210f      	movs	r1, #15
 8002880:	438a      	bics	r2, r1
 8002882:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	b29b      	uxth	r3, r3
 800288a:	2207      	movs	r2, #7
 800288c:	4013      	ands	r3, r2
 800288e:	b299      	uxth	r1, r3
 8002890:	1903      	adds	r3, r0, r4
 8002892:	19db      	adds	r3, r3, r7
 8002894:	1902      	adds	r2, r0, r4
 8002896:	19d2      	adds	r2, r2, r7
 8002898:	8812      	ldrh	r2, [r2, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	1902      	adds	r2, r0, r4
 80028a4:	19d2      	adds	r2, r2, r7
 80028a6:	8812      	ldrh	r2, [r2, #0]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	e05d      	b.n	8002968 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80028ac:	231a      	movs	r3, #26
 80028ae:	2218      	movs	r2, #24
 80028b0:	189b      	adds	r3, r3, r2
 80028b2:	19db      	adds	r3, r3, r7
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	e056      	b.n	8002968 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028ba:	231b      	movs	r3, #27
 80028bc:	2218      	movs	r2, #24
 80028be:	189b      	adds	r3, r3, r2
 80028c0:	19db      	adds	r3, r3, r7
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d822      	bhi.n	800290e <UART_SetConfig+0x47e>
 80028c8:	009a      	lsls	r2, r3, #2
 80028ca:	4b32      	ldr	r3, [pc, #200]	@ (8002994 <UART_SetConfig+0x504>)
 80028cc:	18d3      	adds	r3, r2, r3
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028d2:	f7ff fa49 	bl	8001d68 <HAL_RCC_GetPCLK1Freq>
 80028d6:	0003      	movs	r3, r0
 80028d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028da:	e021      	b.n	8002920 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028dc:	f7ff fa5a 	bl	8001d94 <HAL_RCC_GetPCLK2Freq>
 80028e0:	0003      	movs	r3, r0
 80028e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028e4:	e01c      	b.n	8002920 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028e6:	4b28      	ldr	r3, [pc, #160]	@ (8002988 <UART_SetConfig+0x4f8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2210      	movs	r2, #16
 80028ec:	4013      	ands	r3, r2
 80028ee:	d002      	beq.n	80028f6 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028f0:	4b26      	ldr	r3, [pc, #152]	@ (800298c <UART_SetConfig+0x4fc>)
 80028f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028f4:	e014      	b.n	8002920 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80028f6:	4b26      	ldr	r3, [pc, #152]	@ (8002990 <UART_SetConfig+0x500>)
 80028f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028fa:	e011      	b.n	8002920 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028fc:	f7ff f9a4 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8002900:	0003      	movs	r3, r0
 8002902:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002904:	e00c      	b.n	8002920 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800290c:	e008      	b.n	8002920 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002912:	231a      	movs	r3, #26
 8002914:	2218      	movs	r2, #24
 8002916:	189b      	adds	r3, r3, r2
 8002918:	19db      	adds	r3, r3, r7
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
        break;
 800291e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d020      	beq.n	8002968 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	085a      	lsrs	r2, r3, #1
 800292c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292e:	18d2      	adds	r2, r2, r3
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	0019      	movs	r1, r3
 8002936:	0010      	movs	r0, r2
 8002938:	f7fd fc02 	bl	8000140 <__udivsi3>
 800293c:	0003      	movs	r3, r0
 800293e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002942:	2b0f      	cmp	r3, #15
 8002944:	d90a      	bls.n	800295c <UART_SetConfig+0x4cc>
 8002946:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	025b      	lsls	r3, r3, #9
 800294c:	429a      	cmp	r2, r3
 800294e:	d205      	bcs.n	800295c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002952:	b29a      	uxth	r2, r3
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	e005      	b.n	8002968 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800295c:	231a      	movs	r3, #26
 800295e:	2218      	movs	r2, #24
 8002960:	189b      	adds	r3, r3, r2
 8002962:	19db      	adds	r3, r3, r7
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2200      	movs	r2, #0
 800296c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	2200      	movs	r2, #0
 8002972:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002974:	231a      	movs	r3, #26
 8002976:	2218      	movs	r2, #24
 8002978:	189b      	adds	r3, r3, r2
 800297a:	19db      	adds	r3, r3, r7
 800297c:	781b      	ldrb	r3, [r3, #0]
}
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	b00e      	add	sp, #56	@ 0x38
 8002984:	bdb0      	pop	{r4, r5, r7, pc}
 8002986:	46c0      	nop			@ (mov r8, r8)
 8002988:	40021000 	.word	0x40021000
 800298c:	003d0900 	.word	0x003d0900
 8002990:	00f42400 	.word	0x00f42400
 8002994:	08003880 	.word	0x08003880

08002998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	2208      	movs	r2, #8
 80029a6:	4013      	ands	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a4a      	ldr	r2, [pc, #296]	@ (8002adc <UART_AdvFeatureConfig+0x144>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	2201      	movs	r2, #1
 80029c8:	4013      	ands	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4a43      	ldr	r2, [pc, #268]	@ (8002ae0 <UART_AdvFeatureConfig+0x148>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	2202      	movs	r2, #2
 80029ea:	4013      	ands	r3, r2
 80029ec:	d00b      	beq.n	8002a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ae4 <UART_AdvFeatureConfig+0x14c>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d00b      	beq.n	8002a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4a34      	ldr	r2, [pc, #208]	@ (8002ae8 <UART_AdvFeatureConfig+0x150>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d00b      	beq.n	8002a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a2c      	ldr	r2, [pc, #176]	@ (8002aec <UART_AdvFeatureConfig+0x154>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	2220      	movs	r2, #32
 8002a50:	4013      	ands	r3, r2
 8002a52:	d00b      	beq.n	8002a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	4a25      	ldr	r2, [pc, #148]	@ (8002af0 <UART_AdvFeatureConfig+0x158>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	0019      	movs	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	2240      	movs	r2, #64	@ 0x40
 8002a72:	4013      	ands	r3, r2
 8002a74:	d01d      	beq.n	8002ab2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002af4 <UART_AdvFeatureConfig+0x15c>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a92:	2380      	movs	r3, #128	@ 0x80
 8002a94:	035b      	lsls	r3, r3, #13
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d10b      	bne.n	8002ab2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4a15      	ldr	r2, [pc, #84]	@ (8002af8 <UART_AdvFeatureConfig+0x160>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	2280      	movs	r2, #128	@ 0x80
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d00b      	beq.n	8002ad4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8002afc <UART_AdvFeatureConfig+0x164>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]
  }
}
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	ffff7fff 	.word	0xffff7fff
 8002ae0:	fffdffff 	.word	0xfffdffff
 8002ae4:	fffeffff 	.word	0xfffeffff
 8002ae8:	fffbffff 	.word	0xfffbffff
 8002aec:	ffffefff 	.word	0xffffefff
 8002af0:	ffffdfff 	.word	0xffffdfff
 8002af4:	ffefffff 	.word	0xffefffff
 8002af8:	ff9fffff 	.word	0xff9fffff
 8002afc:	fff7ffff 	.word	0xfff7ffff

08002b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b092      	sub	sp, #72	@ 0x48
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2284      	movs	r2, #132	@ 0x84
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b10:	f7fe f93c 	bl	8000d8c <HAL_GetTick>
 8002b14:	0003      	movs	r3, r0
 8002b16:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2208      	movs	r2, #8
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d12c      	bne.n	8002b80 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b28:	2280      	movs	r2, #128	@ 0x80
 8002b2a:	0391      	lsls	r1, r2, #14
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4a46      	ldr	r2, [pc, #280]	@ (8002c48 <UART_CheckIdleState+0x148>)
 8002b30:	9200      	str	r2, [sp, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f000 f88c 	bl	8002c50 <UART_WaitOnFlagUntilTimeout>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d021      	beq.n	8002b80 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b46:	2301      	movs	r3, #1
 8002b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4c:	f383 8810 	msr	PRIMASK, r3
}
 8002b50:	46c0      	nop			@ (mov r8, r8)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2180      	movs	r1, #128	@ 0x80
 8002b5e:	438a      	bics	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b68:	f383 8810 	msr	PRIMASK, r3
}
 8002b6c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2220      	movs	r2, #32
 8002b72:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2278      	movs	r2, #120	@ 0x78
 8002b78:	2100      	movs	r1, #0
 8002b7a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e05f      	b.n	8002c40 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2204      	movs	r2, #4
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d146      	bne.n	8002c1c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b90:	2280      	movs	r2, #128	@ 0x80
 8002b92:	03d1      	lsls	r1, r2, #15
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	4a2c      	ldr	r2, [pc, #176]	@ (8002c48 <UART_CheckIdleState+0x148>)
 8002b98:	9200      	str	r2, [sp, #0]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f000 f858 	bl	8002c50 <UART_WaitOnFlagUntilTimeout>
 8002ba0:	1e03      	subs	r3, r0, #0
 8002ba2:	d03b      	beq.n	8002c1c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ba8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002baa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bae:	2301      	movs	r3, #1
 8002bb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f383 8810 	msr	PRIMASK, r3
}
 8002bb8:	46c0      	nop			@ (mov r8, r8)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4921      	ldr	r1, [pc, #132]	@ (8002c4c <UART_CheckIdleState+0x14c>)
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f383 8810 	msr	PRIMASK, r3
}
 8002bd4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bda:	61bb      	str	r3, [r7, #24]
  return(result);
 8002bdc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bde:	633b      	str	r3, [r7, #48]	@ 0x30
 8002be0:	2301      	movs	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f383 8810 	msr	PRIMASK, r3
}
 8002bea:	46c0      	nop			@ (mov r8, r8)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	438a      	bics	r2, r1
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	f383 8810 	msr	PRIMASK, r3
}
 8002c06:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2280      	movs	r2, #128	@ 0x80
 8002c0c:	2120      	movs	r1, #32
 8002c0e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2278      	movs	r2, #120	@ 0x78
 8002c14:	2100      	movs	r1, #0
 8002c16:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e011      	b.n	8002c40 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2280      	movs	r2, #128	@ 0x80
 8002c26:	2120      	movs	r1, #32
 8002c28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2278      	movs	r2, #120	@ 0x78
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b010      	add	sp, #64	@ 0x40
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	01ffffff 	.word	0x01ffffff
 8002c4c:	fffffedf 	.word	0xfffffedf

08002c50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	1dfb      	adds	r3, r7, #7
 8002c5e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c60:	e051      	b.n	8002d06 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	3301      	adds	r3, #1
 8002c66:	d04e      	beq.n	8002d06 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c68:	f7fe f890 	bl	8000d8c <HAL_GetTick>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d302      	bcc.n	8002c7e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e051      	b.n	8002d26 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2204      	movs	r2, #4
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d03b      	beq.n	8002d06 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b80      	cmp	r3, #128	@ 0x80
 8002c92:	d038      	beq.n	8002d06 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b40      	cmp	r3, #64	@ 0x40
 8002c98:	d035      	beq.n	8002d06 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d111      	bne.n	8002ccc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2208      	movs	r2, #8
 8002cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 f83c 	bl	8002d30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2284      	movs	r2, #132	@ 0x84
 8002cbc:	2108      	movs	r1, #8
 8002cbe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2278      	movs	r2, #120	@ 0x78
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e02c      	b.n	8002d26 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69da      	ldr	r2, [r3, #28]
 8002cd2:	2380      	movs	r3, #128	@ 0x80
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	2380      	movs	r3, #128	@ 0x80
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d112      	bne.n	8002d06 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2280      	movs	r2, #128	@ 0x80
 8002ce6:	0112      	lsls	r2, r2, #4
 8002ce8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	0018      	movs	r0, r3
 8002cee:	f000 f81f 	bl	8002d30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2284      	movs	r2, #132	@ 0x84
 8002cf6:	2120      	movs	r1, #32
 8002cf8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2278      	movs	r2, #120	@ 0x78
 8002cfe:	2100      	movs	r1, #0
 8002d00:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e00f      	b.n	8002d26 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	425a      	negs	r2, r3
 8002d16:	4153      	adcs	r3, r2
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	1dfb      	adds	r3, r7, #7
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d09e      	beq.n	8002c62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b004      	add	sp, #16
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08e      	sub	sp, #56	@ 0x38
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d38:	f3ef 8310 	mrs	r3, PRIMASK
 8002d3c:	617b      	str	r3, [r7, #20]
  return(result);
 8002d3e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d40:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d42:	2301      	movs	r3, #1
 8002d44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	f383 8810 	msr	PRIMASK, r3
}
 8002d4c:	46c0      	nop			@ (mov r8, r8)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4926      	ldr	r1, [pc, #152]	@ (8002df4 <UART_EndRxTransfer+0xc4>)
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	f383 8810 	msr	PRIMASK, r3
}
 8002d68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d6e:	623b      	str	r3, [r7, #32]
  return(result);
 8002d70:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d72:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d74:	2301      	movs	r3, #1
 8002d76:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	f383 8810 	msr	PRIMASK, r3
}
 8002d7e:	46c0      	nop			@ (mov r8, r8)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	438a      	bics	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d96:	f383 8810 	msr	PRIMASK, r3
}
 8002d9a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d118      	bne.n	8002dd6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da4:	f3ef 8310 	mrs	r3, PRIMASK
 8002da8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002daa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dae:	2301      	movs	r3, #1
 8002db0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f383 8810 	msr	PRIMASK, r3
}
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2110      	movs	r1, #16
 8002dc6:	438a      	bics	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f383 8810 	msr	PRIMASK, r3
}
 8002dd4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2280      	movs	r2, #128	@ 0x80
 8002dda:	2120      	movs	r1, #32
 8002ddc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b00e      	add	sp, #56	@ 0x38
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	46c0      	nop			@ (mov r8, r8)
 8002df4:	fffffedf 	.word	0xfffffedf

08002df8 <calloc>:
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	4b03      	ldr	r3, [pc, #12]	@ (8002e08 <calloc+0x10>)
 8002dfc:	000a      	movs	r2, r1
 8002dfe:	0001      	movs	r1, r0
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	f000 f803 	bl	8002e0c <_calloc_r>
 8002e06:	bd10      	pop	{r4, pc}
 8002e08:	2000001c 	.word	0x2000001c

08002e0c <_calloc_r>:
 8002e0c:	b570      	push	{r4, r5, r6, lr}
 8002e0e:	0c0b      	lsrs	r3, r1, #16
 8002e10:	0c15      	lsrs	r5, r2, #16
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11e      	bne.n	8002e54 <_calloc_r+0x48>
 8002e16:	2d00      	cmp	r5, #0
 8002e18:	d10c      	bne.n	8002e34 <_calloc_r+0x28>
 8002e1a:	b289      	uxth	r1, r1
 8002e1c:	b294      	uxth	r4, r2
 8002e1e:	434c      	muls	r4, r1
 8002e20:	0021      	movs	r1, r4
 8002e22:	f000 f84d 	bl	8002ec0 <_malloc_r>
 8002e26:	1e05      	subs	r5, r0, #0
 8002e28:	d01b      	beq.n	8002e62 <_calloc_r+0x56>
 8002e2a:	0022      	movs	r2, r4
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	f000 f8f9 	bl	8003024 <memset>
 8002e32:	e016      	b.n	8002e62 <_calloc_r+0x56>
 8002e34:	1c2b      	adds	r3, r5, #0
 8002e36:	1c0c      	adds	r4, r1, #0
 8002e38:	b289      	uxth	r1, r1
 8002e3a:	b292      	uxth	r2, r2
 8002e3c:	434a      	muls	r2, r1
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	b2a1      	uxth	r1, r4
 8002e42:	4359      	muls	r1, r3
 8002e44:	0c14      	lsrs	r4, r2, #16
 8002e46:	190c      	adds	r4, r1, r4
 8002e48:	0c23      	lsrs	r3, r4, #16
 8002e4a:	d107      	bne.n	8002e5c <_calloc_r+0x50>
 8002e4c:	0424      	lsls	r4, r4, #16
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	4314      	orrs	r4, r2
 8002e52:	e7e5      	b.n	8002e20 <_calloc_r+0x14>
 8002e54:	2d00      	cmp	r5, #0
 8002e56:	d101      	bne.n	8002e5c <_calloc_r+0x50>
 8002e58:	1c14      	adds	r4, r2, #0
 8002e5a:	e7ed      	b.n	8002e38 <_calloc_r+0x2c>
 8002e5c:	230c      	movs	r3, #12
 8002e5e:	2500      	movs	r5, #0
 8002e60:	6003      	str	r3, [r0, #0]
 8002e62:	0028      	movs	r0, r5
 8002e64:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e68 <free>:
 8002e68:	b510      	push	{r4, lr}
 8002e6a:	4b03      	ldr	r3, [pc, #12]	@ (8002e78 <free+0x10>)
 8002e6c:	0001      	movs	r1, r0
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	f000 f926 	bl	80030c0 <_free_r>
 8002e74:	bd10      	pop	{r4, pc}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	2000001c 	.word	0x2000001c

08002e7c <sbrk_aligned>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	4e0f      	ldr	r6, [pc, #60]	@ (8002ebc <sbrk_aligned+0x40>)
 8002e80:	000d      	movs	r5, r1
 8002e82:	6831      	ldr	r1, [r6, #0]
 8002e84:	0004      	movs	r4, r0
 8002e86:	2900      	cmp	r1, #0
 8002e88:	d102      	bne.n	8002e90 <sbrk_aligned+0x14>
 8002e8a:	f000 f8d3 	bl	8003034 <_sbrk_r>
 8002e8e:	6030      	str	r0, [r6, #0]
 8002e90:	0029      	movs	r1, r5
 8002e92:	0020      	movs	r0, r4
 8002e94:	f000 f8ce 	bl	8003034 <_sbrk_r>
 8002e98:	1c43      	adds	r3, r0, #1
 8002e9a:	d103      	bne.n	8002ea4 <sbrk_aligned+0x28>
 8002e9c:	2501      	movs	r5, #1
 8002e9e:	426d      	negs	r5, r5
 8002ea0:	0028      	movs	r0, r5
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	1cc5      	adds	r5, r0, #3
 8002ea8:	439d      	bics	r5, r3
 8002eaa:	42a8      	cmp	r0, r5
 8002eac:	d0f8      	beq.n	8002ea0 <sbrk_aligned+0x24>
 8002eae:	1a29      	subs	r1, r5, r0
 8002eb0:	0020      	movs	r0, r4
 8002eb2:	f000 f8bf 	bl	8003034 <_sbrk_r>
 8002eb6:	3001      	adds	r0, #1
 8002eb8:	d1f2      	bne.n	8002ea0 <sbrk_aligned+0x24>
 8002eba:	e7ef      	b.n	8002e9c <sbrk_aligned+0x20>
 8002ebc:	20000144 	.word	0x20000144

08002ec0 <_malloc_r>:
 8002ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	1ccb      	adds	r3, r1, #3
 8002ec6:	4393      	bics	r3, r2
 8002ec8:	3308      	adds	r3, #8
 8002eca:	0005      	movs	r5, r0
 8002ecc:	001f      	movs	r7, r3
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d234      	bcs.n	8002f3c <_malloc_r+0x7c>
 8002ed2:	270c      	movs	r7, #12
 8002ed4:	42b9      	cmp	r1, r7
 8002ed6:	d833      	bhi.n	8002f40 <_malloc_r+0x80>
 8002ed8:	0028      	movs	r0, r5
 8002eda:	f000 f871 	bl	8002fc0 <__malloc_lock>
 8002ede:	4e37      	ldr	r6, [pc, #220]	@ (8002fbc <_malloc_r+0xfc>)
 8002ee0:	6833      	ldr	r3, [r6, #0]
 8002ee2:	001c      	movs	r4, r3
 8002ee4:	2c00      	cmp	r4, #0
 8002ee6:	d12f      	bne.n	8002f48 <_malloc_r+0x88>
 8002ee8:	0039      	movs	r1, r7
 8002eea:	0028      	movs	r0, r5
 8002eec:	f7ff ffc6 	bl	8002e7c <sbrk_aligned>
 8002ef0:	0004      	movs	r4, r0
 8002ef2:	1c43      	adds	r3, r0, #1
 8002ef4:	d15f      	bne.n	8002fb6 <_malloc_r+0xf6>
 8002ef6:	6834      	ldr	r4, [r6, #0]
 8002ef8:	9400      	str	r4, [sp, #0]
 8002efa:	9b00      	ldr	r3, [sp, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d14a      	bne.n	8002f96 <_malloc_r+0xd6>
 8002f00:	2c00      	cmp	r4, #0
 8002f02:	d052      	beq.n	8002faa <_malloc_r+0xea>
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	0028      	movs	r0, r5
 8002f08:	18e3      	adds	r3, r4, r3
 8002f0a:	9900      	ldr	r1, [sp, #0]
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	f000 f891 	bl	8003034 <_sbrk_r>
 8002f12:	9b01      	ldr	r3, [sp, #4]
 8002f14:	4283      	cmp	r3, r0
 8002f16:	d148      	bne.n	8002faa <_malloc_r+0xea>
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	0028      	movs	r0, r5
 8002f1c:	1aff      	subs	r7, r7, r3
 8002f1e:	0039      	movs	r1, r7
 8002f20:	f7ff ffac 	bl	8002e7c <sbrk_aligned>
 8002f24:	3001      	adds	r0, #1
 8002f26:	d040      	beq.n	8002faa <_malloc_r+0xea>
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	19db      	adds	r3, r3, r7
 8002f2c:	6023      	str	r3, [r4, #0]
 8002f2e:	6833      	ldr	r3, [r6, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	2a00      	cmp	r2, #0
 8002f34:	d133      	bne.n	8002f9e <_malloc_r+0xde>
 8002f36:	9b00      	ldr	r3, [sp, #0]
 8002f38:	6033      	str	r3, [r6, #0]
 8002f3a:	e019      	b.n	8002f70 <_malloc_r+0xb0>
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	dac9      	bge.n	8002ed4 <_malloc_r+0x14>
 8002f40:	230c      	movs	r3, #12
 8002f42:	602b      	str	r3, [r5, #0]
 8002f44:	2000      	movs	r0, #0
 8002f46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f48:	6821      	ldr	r1, [r4, #0]
 8002f4a:	1bc9      	subs	r1, r1, r7
 8002f4c:	d420      	bmi.n	8002f90 <_malloc_r+0xd0>
 8002f4e:	290b      	cmp	r1, #11
 8002f50:	d90a      	bls.n	8002f68 <_malloc_r+0xa8>
 8002f52:	19e2      	adds	r2, r4, r7
 8002f54:	6027      	str	r7, [r4, #0]
 8002f56:	42a3      	cmp	r3, r4
 8002f58:	d104      	bne.n	8002f64 <_malloc_r+0xa4>
 8002f5a:	6032      	str	r2, [r6, #0]
 8002f5c:	6863      	ldr	r3, [r4, #4]
 8002f5e:	6011      	str	r1, [r2, #0]
 8002f60:	6053      	str	r3, [r2, #4]
 8002f62:	e005      	b.n	8002f70 <_malloc_r+0xb0>
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	e7f9      	b.n	8002f5c <_malloc_r+0x9c>
 8002f68:	6862      	ldr	r2, [r4, #4]
 8002f6a:	42a3      	cmp	r3, r4
 8002f6c:	d10e      	bne.n	8002f8c <_malloc_r+0xcc>
 8002f6e:	6032      	str	r2, [r6, #0]
 8002f70:	0028      	movs	r0, r5
 8002f72:	f000 f82d 	bl	8002fd0 <__malloc_unlock>
 8002f76:	0020      	movs	r0, r4
 8002f78:	2207      	movs	r2, #7
 8002f7a:	300b      	adds	r0, #11
 8002f7c:	1d23      	adds	r3, r4, #4
 8002f7e:	4390      	bics	r0, r2
 8002f80:	1ac2      	subs	r2, r0, r3
 8002f82:	4298      	cmp	r0, r3
 8002f84:	d0df      	beq.n	8002f46 <_malloc_r+0x86>
 8002f86:	1a1b      	subs	r3, r3, r0
 8002f88:	50a3      	str	r3, [r4, r2]
 8002f8a:	e7dc      	b.n	8002f46 <_malloc_r+0x86>
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	e7ef      	b.n	8002f70 <_malloc_r+0xb0>
 8002f90:	0023      	movs	r3, r4
 8002f92:	6864      	ldr	r4, [r4, #4]
 8002f94:	e7a6      	b.n	8002ee4 <_malloc_r+0x24>
 8002f96:	9c00      	ldr	r4, [sp, #0]
 8002f98:	6863      	ldr	r3, [r4, #4]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	e7ad      	b.n	8002efa <_malloc_r+0x3a>
 8002f9e:	001a      	movs	r2, r3
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	42a3      	cmp	r3, r4
 8002fa4:	d1fb      	bne.n	8002f9e <_malloc_r+0xde>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e7da      	b.n	8002f60 <_malloc_r+0xa0>
 8002faa:	230c      	movs	r3, #12
 8002fac:	0028      	movs	r0, r5
 8002fae:	602b      	str	r3, [r5, #0]
 8002fb0:	f000 f80e 	bl	8002fd0 <__malloc_unlock>
 8002fb4:	e7c6      	b.n	8002f44 <_malloc_r+0x84>
 8002fb6:	6007      	str	r7, [r0, #0]
 8002fb8:	e7da      	b.n	8002f70 <_malloc_r+0xb0>
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	20000148 	.word	0x20000148

08002fc0 <__malloc_lock>:
 8002fc0:	b510      	push	{r4, lr}
 8002fc2:	4802      	ldr	r0, [pc, #8]	@ (8002fcc <__malloc_lock+0xc>)
 8002fc4:	f000 f872 	bl	80030ac <__retarget_lock_acquire_recursive>
 8002fc8:	bd10      	pop	{r4, pc}
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	20000288 	.word	0x20000288

08002fd0 <__malloc_unlock>:
 8002fd0:	b510      	push	{r4, lr}
 8002fd2:	4802      	ldr	r0, [pc, #8]	@ (8002fdc <__malloc_unlock+0xc>)
 8002fd4:	f000 f86b 	bl	80030ae <__retarget_lock_release_recursive>
 8002fd8:	bd10      	pop	{r4, pc}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	20000288 	.word	0x20000288

08002fe0 <siprintf>:
 8002fe0:	b40e      	push	{r1, r2, r3}
 8002fe2:	b510      	push	{r4, lr}
 8002fe4:	2400      	movs	r4, #0
 8002fe6:	490c      	ldr	r1, [pc, #48]	@ (8003018 <siprintf+0x38>)
 8002fe8:	b09d      	sub	sp, #116	@ 0x74
 8002fea:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002fec:	9002      	str	r0, [sp, #8]
 8002fee:	9006      	str	r0, [sp, #24]
 8002ff0:	9107      	str	r1, [sp, #28]
 8002ff2:	9104      	str	r1, [sp, #16]
 8002ff4:	4809      	ldr	r0, [pc, #36]	@ (800301c <siprintf+0x3c>)
 8002ff6:	490a      	ldr	r1, [pc, #40]	@ (8003020 <siprintf+0x40>)
 8002ff8:	cb04      	ldmia	r3!, {r2}
 8002ffa:	9105      	str	r1, [sp, #20]
 8002ffc:	6800      	ldr	r0, [r0, #0]
 8002ffe:	a902      	add	r1, sp, #8
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003004:	f000 f906 	bl	8003214 <_svfiprintf_r>
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	701c      	strb	r4, [r3, #0]
 800300c:	b01d      	add	sp, #116	@ 0x74
 800300e:	bc10      	pop	{r4}
 8003010:	bc08      	pop	{r3}
 8003012:	b003      	add	sp, #12
 8003014:	4718      	bx	r3
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	7fffffff 	.word	0x7fffffff
 800301c:	2000001c 	.word	0x2000001c
 8003020:	ffff0208 	.word	0xffff0208

08003024 <memset>:
 8003024:	0003      	movs	r3, r0
 8003026:	1882      	adds	r2, r0, r2
 8003028:	4293      	cmp	r3, r2
 800302a:	d100      	bne.n	800302e <memset+0xa>
 800302c:	4770      	bx	lr
 800302e:	7019      	strb	r1, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	e7f9      	b.n	8003028 <memset+0x4>

08003034 <_sbrk_r>:
 8003034:	2300      	movs	r3, #0
 8003036:	b570      	push	{r4, r5, r6, lr}
 8003038:	4d06      	ldr	r5, [pc, #24]	@ (8003054 <_sbrk_r+0x20>)
 800303a:	0004      	movs	r4, r0
 800303c:	0008      	movs	r0, r1
 800303e:	602b      	str	r3, [r5, #0]
 8003040:	f7fd fdd8 	bl	8000bf4 <_sbrk>
 8003044:	1c43      	adds	r3, r0, #1
 8003046:	d103      	bne.n	8003050 <_sbrk_r+0x1c>
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d000      	beq.n	8003050 <_sbrk_r+0x1c>
 800304e:	6023      	str	r3, [r4, #0]
 8003050:	bd70      	pop	{r4, r5, r6, pc}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	20000284 	.word	0x20000284

08003058 <__errno>:
 8003058:	4b01      	ldr	r3, [pc, #4]	@ (8003060 <__errno+0x8>)
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	4770      	bx	lr
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	2000001c 	.word	0x2000001c

08003064 <__libc_init_array>:
 8003064:	b570      	push	{r4, r5, r6, lr}
 8003066:	2600      	movs	r6, #0
 8003068:	4c0c      	ldr	r4, [pc, #48]	@ (800309c <__libc_init_array+0x38>)
 800306a:	4d0d      	ldr	r5, [pc, #52]	@ (80030a0 <__libc_init_array+0x3c>)
 800306c:	1b64      	subs	r4, r4, r5
 800306e:	10a4      	asrs	r4, r4, #2
 8003070:	42a6      	cmp	r6, r4
 8003072:	d109      	bne.n	8003088 <__libc_init_array+0x24>
 8003074:	2600      	movs	r6, #0
 8003076:	f000 fba5 	bl	80037c4 <_init>
 800307a:	4c0a      	ldr	r4, [pc, #40]	@ (80030a4 <__libc_init_array+0x40>)
 800307c:	4d0a      	ldr	r5, [pc, #40]	@ (80030a8 <__libc_init_array+0x44>)
 800307e:	1b64      	subs	r4, r4, r5
 8003080:	10a4      	asrs	r4, r4, #2
 8003082:	42a6      	cmp	r6, r4
 8003084:	d105      	bne.n	8003092 <__libc_init_array+0x2e>
 8003086:	bd70      	pop	{r4, r5, r6, pc}
 8003088:	00b3      	lsls	r3, r6, #2
 800308a:	58eb      	ldr	r3, [r5, r3]
 800308c:	4798      	blx	r3
 800308e:	3601      	adds	r6, #1
 8003090:	e7ee      	b.n	8003070 <__libc_init_array+0xc>
 8003092:	00b3      	lsls	r3, r6, #2
 8003094:	58eb      	ldr	r3, [r5, r3]
 8003096:	4798      	blx	r3
 8003098:	3601      	adds	r6, #1
 800309a:	e7f2      	b.n	8003082 <__libc_init_array+0x1e>
 800309c:	080038e0 	.word	0x080038e0
 80030a0:	080038e0 	.word	0x080038e0
 80030a4:	080038e4 	.word	0x080038e4
 80030a8:	080038e0 	.word	0x080038e0

080030ac <__retarget_lock_acquire_recursive>:
 80030ac:	4770      	bx	lr

080030ae <__retarget_lock_release_recursive>:
 80030ae:	4770      	bx	lr

080030b0 <strcpy>:
 80030b0:	0003      	movs	r3, r0
 80030b2:	780a      	ldrb	r2, [r1, #0]
 80030b4:	3101      	adds	r1, #1
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	3301      	adds	r3, #1
 80030ba:	2a00      	cmp	r2, #0
 80030bc:	d1f9      	bne.n	80030b2 <strcpy+0x2>
 80030be:	4770      	bx	lr

080030c0 <_free_r>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	0005      	movs	r5, r0
 80030c4:	1e0c      	subs	r4, r1, #0
 80030c6:	d010      	beq.n	80030ea <_free_r+0x2a>
 80030c8:	3c04      	subs	r4, #4
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da00      	bge.n	80030d2 <_free_r+0x12>
 80030d0:	18e4      	adds	r4, r4, r3
 80030d2:	0028      	movs	r0, r5
 80030d4:	f7ff ff74 	bl	8002fc0 <__malloc_lock>
 80030d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003150 <_free_r+0x90>)
 80030da:	6813      	ldr	r3, [r2, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <_free_r+0x2c>
 80030e0:	6063      	str	r3, [r4, #4]
 80030e2:	6014      	str	r4, [r2, #0]
 80030e4:	0028      	movs	r0, r5
 80030e6:	f7ff ff73 	bl	8002fd0 <__malloc_unlock>
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
 80030ec:	42a3      	cmp	r3, r4
 80030ee:	d908      	bls.n	8003102 <_free_r+0x42>
 80030f0:	6820      	ldr	r0, [r4, #0]
 80030f2:	1821      	adds	r1, r4, r0
 80030f4:	428b      	cmp	r3, r1
 80030f6:	d1f3      	bne.n	80030e0 <_free_r+0x20>
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	1809      	adds	r1, r1, r0
 80030fe:	6021      	str	r1, [r4, #0]
 8003100:	e7ee      	b.n	80030e0 <_free_r+0x20>
 8003102:	001a      	movs	r2, r3
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <_free_r+0x4e>
 800310a:	42a3      	cmp	r3, r4
 800310c:	d9f9      	bls.n	8003102 <_free_r+0x42>
 800310e:	6811      	ldr	r1, [r2, #0]
 8003110:	1850      	adds	r0, r2, r1
 8003112:	42a0      	cmp	r0, r4
 8003114:	d10b      	bne.n	800312e <_free_r+0x6e>
 8003116:	6820      	ldr	r0, [r4, #0]
 8003118:	1809      	adds	r1, r1, r0
 800311a:	1850      	adds	r0, r2, r1
 800311c:	6011      	str	r1, [r2, #0]
 800311e:	4283      	cmp	r3, r0
 8003120:	d1e0      	bne.n	80030e4 <_free_r+0x24>
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	1841      	adds	r1, r0, r1
 8003128:	6011      	str	r1, [r2, #0]
 800312a:	6053      	str	r3, [r2, #4]
 800312c:	e7da      	b.n	80030e4 <_free_r+0x24>
 800312e:	42a0      	cmp	r0, r4
 8003130:	d902      	bls.n	8003138 <_free_r+0x78>
 8003132:	230c      	movs	r3, #12
 8003134:	602b      	str	r3, [r5, #0]
 8003136:	e7d5      	b.n	80030e4 <_free_r+0x24>
 8003138:	6820      	ldr	r0, [r4, #0]
 800313a:	1821      	adds	r1, r4, r0
 800313c:	428b      	cmp	r3, r1
 800313e:	d103      	bne.n	8003148 <_free_r+0x88>
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	1809      	adds	r1, r1, r0
 8003146:	6021      	str	r1, [r4, #0]
 8003148:	6063      	str	r3, [r4, #4]
 800314a:	6054      	str	r4, [r2, #4]
 800314c:	e7ca      	b.n	80030e4 <_free_r+0x24>
 800314e:	46c0      	nop			@ (mov r8, r8)
 8003150:	20000148 	.word	0x20000148

08003154 <__ssputs_r>:
 8003154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003156:	688e      	ldr	r6, [r1, #8]
 8003158:	b085      	sub	sp, #20
 800315a:	001f      	movs	r7, r3
 800315c:	000c      	movs	r4, r1
 800315e:	680b      	ldr	r3, [r1, #0]
 8003160:	9002      	str	r0, [sp, #8]
 8003162:	9203      	str	r2, [sp, #12]
 8003164:	42be      	cmp	r6, r7
 8003166:	d830      	bhi.n	80031ca <__ssputs_r+0x76>
 8003168:	210c      	movs	r1, #12
 800316a:	5e62      	ldrsh	r2, [r4, r1]
 800316c:	2190      	movs	r1, #144	@ 0x90
 800316e:	00c9      	lsls	r1, r1, #3
 8003170:	420a      	tst	r2, r1
 8003172:	d028      	beq.n	80031c6 <__ssputs_r+0x72>
 8003174:	2003      	movs	r0, #3
 8003176:	6921      	ldr	r1, [r4, #16]
 8003178:	1a5b      	subs	r3, r3, r1
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	6963      	ldr	r3, [r4, #20]
 800317e:	4343      	muls	r3, r0
 8003180:	9801      	ldr	r0, [sp, #4]
 8003182:	0fdd      	lsrs	r5, r3, #31
 8003184:	18ed      	adds	r5, r5, r3
 8003186:	1c7b      	adds	r3, r7, #1
 8003188:	181b      	adds	r3, r3, r0
 800318a:	106d      	asrs	r5, r5, #1
 800318c:	42ab      	cmp	r3, r5
 800318e:	d900      	bls.n	8003192 <__ssputs_r+0x3e>
 8003190:	001d      	movs	r5, r3
 8003192:	0552      	lsls	r2, r2, #21
 8003194:	d528      	bpl.n	80031e8 <__ssputs_r+0x94>
 8003196:	0029      	movs	r1, r5
 8003198:	9802      	ldr	r0, [sp, #8]
 800319a:	f7ff fe91 	bl	8002ec0 <_malloc_r>
 800319e:	1e06      	subs	r6, r0, #0
 80031a0:	d02c      	beq.n	80031fc <__ssputs_r+0xa8>
 80031a2:	9a01      	ldr	r2, [sp, #4]
 80031a4:	6921      	ldr	r1, [r4, #16]
 80031a6:	f000 facc 	bl	8003742 <memcpy>
 80031aa:	89a2      	ldrh	r2, [r4, #12]
 80031ac:	4b18      	ldr	r3, [pc, #96]	@ (8003210 <__ssputs_r+0xbc>)
 80031ae:	401a      	ands	r2, r3
 80031b0:	2380      	movs	r3, #128	@ 0x80
 80031b2:	4313      	orrs	r3, r2
 80031b4:	81a3      	strh	r3, [r4, #12]
 80031b6:	9b01      	ldr	r3, [sp, #4]
 80031b8:	6126      	str	r6, [r4, #16]
 80031ba:	18f6      	adds	r6, r6, r3
 80031bc:	6026      	str	r6, [r4, #0]
 80031be:	003e      	movs	r6, r7
 80031c0:	6165      	str	r5, [r4, #20]
 80031c2:	1aed      	subs	r5, r5, r3
 80031c4:	60a5      	str	r5, [r4, #8]
 80031c6:	42be      	cmp	r6, r7
 80031c8:	d900      	bls.n	80031cc <__ssputs_r+0x78>
 80031ca:	003e      	movs	r6, r7
 80031cc:	0032      	movs	r2, r6
 80031ce:	9903      	ldr	r1, [sp, #12]
 80031d0:	6820      	ldr	r0, [r4, #0]
 80031d2:	f000 fa99 	bl	8003708 <memmove>
 80031d6:	2000      	movs	r0, #0
 80031d8:	68a3      	ldr	r3, [r4, #8]
 80031da:	1b9b      	subs	r3, r3, r6
 80031dc:	60a3      	str	r3, [r4, #8]
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	199b      	adds	r3, r3, r6
 80031e2:	6023      	str	r3, [r4, #0]
 80031e4:	b005      	add	sp, #20
 80031e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e8:	002a      	movs	r2, r5
 80031ea:	9802      	ldr	r0, [sp, #8]
 80031ec:	f000 fab2 	bl	8003754 <_realloc_r>
 80031f0:	1e06      	subs	r6, r0, #0
 80031f2:	d1e0      	bne.n	80031b6 <__ssputs_r+0x62>
 80031f4:	6921      	ldr	r1, [r4, #16]
 80031f6:	9802      	ldr	r0, [sp, #8]
 80031f8:	f7ff ff62 	bl	80030c0 <_free_r>
 80031fc:	230c      	movs	r3, #12
 80031fe:	2001      	movs	r0, #1
 8003200:	9a02      	ldr	r2, [sp, #8]
 8003202:	4240      	negs	r0, r0
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	89a2      	ldrh	r2, [r4, #12]
 8003208:	3334      	adds	r3, #52	@ 0x34
 800320a:	4313      	orrs	r3, r2
 800320c:	81a3      	strh	r3, [r4, #12]
 800320e:	e7e9      	b.n	80031e4 <__ssputs_r+0x90>
 8003210:	fffffb7f 	.word	0xfffffb7f

08003214 <_svfiprintf_r>:
 8003214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003216:	b0a1      	sub	sp, #132	@ 0x84
 8003218:	9003      	str	r0, [sp, #12]
 800321a:	001d      	movs	r5, r3
 800321c:	898b      	ldrh	r3, [r1, #12]
 800321e:	000f      	movs	r7, r1
 8003220:	0016      	movs	r6, r2
 8003222:	061b      	lsls	r3, r3, #24
 8003224:	d511      	bpl.n	800324a <_svfiprintf_r+0x36>
 8003226:	690b      	ldr	r3, [r1, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10e      	bne.n	800324a <_svfiprintf_r+0x36>
 800322c:	2140      	movs	r1, #64	@ 0x40
 800322e:	f7ff fe47 	bl	8002ec0 <_malloc_r>
 8003232:	6038      	str	r0, [r7, #0]
 8003234:	6138      	str	r0, [r7, #16]
 8003236:	2800      	cmp	r0, #0
 8003238:	d105      	bne.n	8003246 <_svfiprintf_r+0x32>
 800323a:	230c      	movs	r3, #12
 800323c:	9a03      	ldr	r2, [sp, #12]
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	2001      	movs	r0, #1
 8003242:	4240      	negs	r0, r0
 8003244:	e0cf      	b.n	80033e6 <_svfiprintf_r+0x1d2>
 8003246:	2340      	movs	r3, #64	@ 0x40
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	2300      	movs	r3, #0
 800324c:	ac08      	add	r4, sp, #32
 800324e:	6163      	str	r3, [r4, #20]
 8003250:	3320      	adds	r3, #32
 8003252:	7663      	strb	r3, [r4, #25]
 8003254:	3310      	adds	r3, #16
 8003256:	76a3      	strb	r3, [r4, #26]
 8003258:	9507      	str	r5, [sp, #28]
 800325a:	0035      	movs	r5, r6
 800325c:	782b      	ldrb	r3, [r5, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <_svfiprintf_r+0x52>
 8003262:	2b25      	cmp	r3, #37	@ 0x25
 8003264:	d148      	bne.n	80032f8 <_svfiprintf_r+0xe4>
 8003266:	1bab      	subs	r3, r5, r6
 8003268:	9305      	str	r3, [sp, #20]
 800326a:	42b5      	cmp	r5, r6
 800326c:	d00b      	beq.n	8003286 <_svfiprintf_r+0x72>
 800326e:	0032      	movs	r2, r6
 8003270:	0039      	movs	r1, r7
 8003272:	9803      	ldr	r0, [sp, #12]
 8003274:	f7ff ff6e 	bl	8003154 <__ssputs_r>
 8003278:	3001      	adds	r0, #1
 800327a:	d100      	bne.n	800327e <_svfiprintf_r+0x6a>
 800327c:	e0ae      	b.n	80033dc <_svfiprintf_r+0x1c8>
 800327e:	6963      	ldr	r3, [r4, #20]
 8003280:	9a05      	ldr	r2, [sp, #20]
 8003282:	189b      	adds	r3, r3, r2
 8003284:	6163      	str	r3, [r4, #20]
 8003286:	782b      	ldrb	r3, [r5, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d100      	bne.n	800328e <_svfiprintf_r+0x7a>
 800328c:	e0a6      	b.n	80033dc <_svfiprintf_r+0x1c8>
 800328e:	2201      	movs	r2, #1
 8003290:	2300      	movs	r3, #0
 8003292:	4252      	negs	r2, r2
 8003294:	6062      	str	r2, [r4, #4]
 8003296:	a904      	add	r1, sp, #16
 8003298:	3254      	adds	r2, #84	@ 0x54
 800329a:	1852      	adds	r2, r2, r1
 800329c:	1c6e      	adds	r6, r5, #1
 800329e:	6023      	str	r3, [r4, #0]
 80032a0:	60e3      	str	r3, [r4, #12]
 80032a2:	60a3      	str	r3, [r4, #8]
 80032a4:	7013      	strb	r3, [r2, #0]
 80032a6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80032a8:	4b54      	ldr	r3, [pc, #336]	@ (80033fc <_svfiprintf_r+0x1e8>)
 80032aa:	2205      	movs	r2, #5
 80032ac:	0018      	movs	r0, r3
 80032ae:	7831      	ldrb	r1, [r6, #0]
 80032b0:	9305      	str	r3, [sp, #20]
 80032b2:	f000 fa3b 	bl	800372c <memchr>
 80032b6:	1c75      	adds	r5, r6, #1
 80032b8:	2800      	cmp	r0, #0
 80032ba:	d11f      	bne.n	80032fc <_svfiprintf_r+0xe8>
 80032bc:	6822      	ldr	r2, [r4, #0]
 80032be:	06d3      	lsls	r3, r2, #27
 80032c0:	d504      	bpl.n	80032cc <_svfiprintf_r+0xb8>
 80032c2:	2353      	movs	r3, #83	@ 0x53
 80032c4:	a904      	add	r1, sp, #16
 80032c6:	185b      	adds	r3, r3, r1
 80032c8:	2120      	movs	r1, #32
 80032ca:	7019      	strb	r1, [r3, #0]
 80032cc:	0713      	lsls	r3, r2, #28
 80032ce:	d504      	bpl.n	80032da <_svfiprintf_r+0xc6>
 80032d0:	2353      	movs	r3, #83	@ 0x53
 80032d2:	a904      	add	r1, sp, #16
 80032d4:	185b      	adds	r3, r3, r1
 80032d6:	212b      	movs	r1, #43	@ 0x2b
 80032d8:	7019      	strb	r1, [r3, #0]
 80032da:	7833      	ldrb	r3, [r6, #0]
 80032dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80032de:	d016      	beq.n	800330e <_svfiprintf_r+0xfa>
 80032e0:	0035      	movs	r5, r6
 80032e2:	2100      	movs	r1, #0
 80032e4:	200a      	movs	r0, #10
 80032e6:	68e3      	ldr	r3, [r4, #12]
 80032e8:	782a      	ldrb	r2, [r5, #0]
 80032ea:	1c6e      	adds	r6, r5, #1
 80032ec:	3a30      	subs	r2, #48	@ 0x30
 80032ee:	2a09      	cmp	r2, #9
 80032f0:	d950      	bls.n	8003394 <_svfiprintf_r+0x180>
 80032f2:	2900      	cmp	r1, #0
 80032f4:	d111      	bne.n	800331a <_svfiprintf_r+0x106>
 80032f6:	e017      	b.n	8003328 <_svfiprintf_r+0x114>
 80032f8:	3501      	adds	r5, #1
 80032fa:	e7af      	b.n	800325c <_svfiprintf_r+0x48>
 80032fc:	9b05      	ldr	r3, [sp, #20]
 80032fe:	6822      	ldr	r2, [r4, #0]
 8003300:	1ac0      	subs	r0, r0, r3
 8003302:	2301      	movs	r3, #1
 8003304:	4083      	lsls	r3, r0
 8003306:	4313      	orrs	r3, r2
 8003308:	002e      	movs	r6, r5
 800330a:	6023      	str	r3, [r4, #0]
 800330c:	e7cc      	b.n	80032a8 <_svfiprintf_r+0x94>
 800330e:	9b07      	ldr	r3, [sp, #28]
 8003310:	1d19      	adds	r1, r3, #4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	9107      	str	r1, [sp, #28]
 8003316:	2b00      	cmp	r3, #0
 8003318:	db01      	blt.n	800331e <_svfiprintf_r+0x10a>
 800331a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800331c:	e004      	b.n	8003328 <_svfiprintf_r+0x114>
 800331e:	425b      	negs	r3, r3
 8003320:	60e3      	str	r3, [r4, #12]
 8003322:	2302      	movs	r3, #2
 8003324:	4313      	orrs	r3, r2
 8003326:	6023      	str	r3, [r4, #0]
 8003328:	782b      	ldrb	r3, [r5, #0]
 800332a:	2b2e      	cmp	r3, #46	@ 0x2e
 800332c:	d10c      	bne.n	8003348 <_svfiprintf_r+0x134>
 800332e:	786b      	ldrb	r3, [r5, #1]
 8003330:	2b2a      	cmp	r3, #42	@ 0x2a
 8003332:	d134      	bne.n	800339e <_svfiprintf_r+0x18a>
 8003334:	9b07      	ldr	r3, [sp, #28]
 8003336:	3502      	adds	r5, #2
 8003338:	1d1a      	adds	r2, r3, #4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	9207      	str	r2, [sp, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	da01      	bge.n	8003346 <_svfiprintf_r+0x132>
 8003342:	2301      	movs	r3, #1
 8003344:	425b      	negs	r3, r3
 8003346:	9309      	str	r3, [sp, #36]	@ 0x24
 8003348:	4e2d      	ldr	r6, [pc, #180]	@ (8003400 <_svfiprintf_r+0x1ec>)
 800334a:	2203      	movs	r2, #3
 800334c:	0030      	movs	r0, r6
 800334e:	7829      	ldrb	r1, [r5, #0]
 8003350:	f000 f9ec 	bl	800372c <memchr>
 8003354:	2800      	cmp	r0, #0
 8003356:	d006      	beq.n	8003366 <_svfiprintf_r+0x152>
 8003358:	2340      	movs	r3, #64	@ 0x40
 800335a:	1b80      	subs	r0, r0, r6
 800335c:	4083      	lsls	r3, r0
 800335e:	6822      	ldr	r2, [r4, #0]
 8003360:	3501      	adds	r5, #1
 8003362:	4313      	orrs	r3, r2
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	7829      	ldrb	r1, [r5, #0]
 8003368:	2206      	movs	r2, #6
 800336a:	4826      	ldr	r0, [pc, #152]	@ (8003404 <_svfiprintf_r+0x1f0>)
 800336c:	1c6e      	adds	r6, r5, #1
 800336e:	7621      	strb	r1, [r4, #24]
 8003370:	f000 f9dc 	bl	800372c <memchr>
 8003374:	2800      	cmp	r0, #0
 8003376:	d038      	beq.n	80033ea <_svfiprintf_r+0x1d6>
 8003378:	4b23      	ldr	r3, [pc, #140]	@ (8003408 <_svfiprintf_r+0x1f4>)
 800337a:	2b00      	cmp	r3, #0
 800337c:	d122      	bne.n	80033c4 <_svfiprintf_r+0x1b0>
 800337e:	2207      	movs	r2, #7
 8003380:	9b07      	ldr	r3, [sp, #28]
 8003382:	3307      	adds	r3, #7
 8003384:	4393      	bics	r3, r2
 8003386:	3308      	adds	r3, #8
 8003388:	9307      	str	r3, [sp, #28]
 800338a:	6963      	ldr	r3, [r4, #20]
 800338c:	9a04      	ldr	r2, [sp, #16]
 800338e:	189b      	adds	r3, r3, r2
 8003390:	6163      	str	r3, [r4, #20]
 8003392:	e762      	b.n	800325a <_svfiprintf_r+0x46>
 8003394:	4343      	muls	r3, r0
 8003396:	0035      	movs	r5, r6
 8003398:	2101      	movs	r1, #1
 800339a:	189b      	adds	r3, r3, r2
 800339c:	e7a4      	b.n	80032e8 <_svfiprintf_r+0xd4>
 800339e:	2300      	movs	r3, #0
 80033a0:	200a      	movs	r0, #10
 80033a2:	0019      	movs	r1, r3
 80033a4:	3501      	adds	r5, #1
 80033a6:	6063      	str	r3, [r4, #4]
 80033a8:	782a      	ldrb	r2, [r5, #0]
 80033aa:	1c6e      	adds	r6, r5, #1
 80033ac:	3a30      	subs	r2, #48	@ 0x30
 80033ae:	2a09      	cmp	r2, #9
 80033b0:	d903      	bls.n	80033ba <_svfiprintf_r+0x1a6>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0c8      	beq.n	8003348 <_svfiprintf_r+0x134>
 80033b6:	9109      	str	r1, [sp, #36]	@ 0x24
 80033b8:	e7c6      	b.n	8003348 <_svfiprintf_r+0x134>
 80033ba:	4341      	muls	r1, r0
 80033bc:	0035      	movs	r5, r6
 80033be:	2301      	movs	r3, #1
 80033c0:	1889      	adds	r1, r1, r2
 80033c2:	e7f1      	b.n	80033a8 <_svfiprintf_r+0x194>
 80033c4:	aa07      	add	r2, sp, #28
 80033c6:	9200      	str	r2, [sp, #0]
 80033c8:	0021      	movs	r1, r4
 80033ca:	003a      	movs	r2, r7
 80033cc:	4b0f      	ldr	r3, [pc, #60]	@ (800340c <_svfiprintf_r+0x1f8>)
 80033ce:	9803      	ldr	r0, [sp, #12]
 80033d0:	e000      	b.n	80033d4 <_svfiprintf_r+0x1c0>
 80033d2:	bf00      	nop
 80033d4:	9004      	str	r0, [sp, #16]
 80033d6:	9b04      	ldr	r3, [sp, #16]
 80033d8:	3301      	adds	r3, #1
 80033da:	d1d6      	bne.n	800338a <_svfiprintf_r+0x176>
 80033dc:	89bb      	ldrh	r3, [r7, #12]
 80033de:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80033e0:	065b      	lsls	r3, r3, #25
 80033e2:	d500      	bpl.n	80033e6 <_svfiprintf_r+0x1d2>
 80033e4:	e72c      	b.n	8003240 <_svfiprintf_r+0x2c>
 80033e6:	b021      	add	sp, #132	@ 0x84
 80033e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ea:	aa07      	add	r2, sp, #28
 80033ec:	9200      	str	r2, [sp, #0]
 80033ee:	0021      	movs	r1, r4
 80033f0:	003a      	movs	r2, r7
 80033f2:	4b06      	ldr	r3, [pc, #24]	@ (800340c <_svfiprintf_r+0x1f8>)
 80033f4:	9803      	ldr	r0, [sp, #12]
 80033f6:	f000 f87b 	bl	80034f0 <_printf_i>
 80033fa:	e7eb      	b.n	80033d4 <_svfiprintf_r+0x1c0>
 80033fc:	080038a4 	.word	0x080038a4
 8003400:	080038aa 	.word	0x080038aa
 8003404:	080038ae 	.word	0x080038ae
 8003408:	00000000 	.word	0x00000000
 800340c:	08003155 	.word	0x08003155

08003410 <_printf_common>:
 8003410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003412:	0016      	movs	r6, r2
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	688a      	ldr	r2, [r1, #8]
 8003418:	690b      	ldr	r3, [r1, #16]
 800341a:	000c      	movs	r4, r1
 800341c:	9000      	str	r0, [sp, #0]
 800341e:	4293      	cmp	r3, r2
 8003420:	da00      	bge.n	8003424 <_printf_common+0x14>
 8003422:	0013      	movs	r3, r2
 8003424:	0022      	movs	r2, r4
 8003426:	6033      	str	r3, [r6, #0]
 8003428:	3243      	adds	r2, #67	@ 0x43
 800342a:	7812      	ldrb	r2, [r2, #0]
 800342c:	2a00      	cmp	r2, #0
 800342e:	d001      	beq.n	8003434 <_printf_common+0x24>
 8003430:	3301      	adds	r3, #1
 8003432:	6033      	str	r3, [r6, #0]
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	069b      	lsls	r3, r3, #26
 8003438:	d502      	bpl.n	8003440 <_printf_common+0x30>
 800343a:	6833      	ldr	r3, [r6, #0]
 800343c:	3302      	adds	r3, #2
 800343e:	6033      	str	r3, [r6, #0]
 8003440:	6822      	ldr	r2, [r4, #0]
 8003442:	2306      	movs	r3, #6
 8003444:	0015      	movs	r5, r2
 8003446:	401d      	ands	r5, r3
 8003448:	421a      	tst	r2, r3
 800344a:	d027      	beq.n	800349c <_printf_common+0x8c>
 800344c:	0023      	movs	r3, r4
 800344e:	3343      	adds	r3, #67	@ 0x43
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	1e5a      	subs	r2, r3, #1
 8003454:	4193      	sbcs	r3, r2
 8003456:	6822      	ldr	r2, [r4, #0]
 8003458:	0692      	lsls	r2, r2, #26
 800345a:	d430      	bmi.n	80034be <_printf_common+0xae>
 800345c:	0022      	movs	r2, r4
 800345e:	9901      	ldr	r1, [sp, #4]
 8003460:	9800      	ldr	r0, [sp, #0]
 8003462:	9d08      	ldr	r5, [sp, #32]
 8003464:	3243      	adds	r2, #67	@ 0x43
 8003466:	47a8      	blx	r5
 8003468:	3001      	adds	r0, #1
 800346a:	d025      	beq.n	80034b8 <_printf_common+0xa8>
 800346c:	2206      	movs	r2, #6
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	2500      	movs	r5, #0
 8003472:	4013      	ands	r3, r2
 8003474:	2b04      	cmp	r3, #4
 8003476:	d105      	bne.n	8003484 <_printf_common+0x74>
 8003478:	6833      	ldr	r3, [r6, #0]
 800347a:	68e5      	ldr	r5, [r4, #12]
 800347c:	1aed      	subs	r5, r5, r3
 800347e:	43eb      	mvns	r3, r5
 8003480:	17db      	asrs	r3, r3, #31
 8003482:	401d      	ands	r5, r3
 8003484:	68a3      	ldr	r3, [r4, #8]
 8003486:	6922      	ldr	r2, [r4, #16]
 8003488:	4293      	cmp	r3, r2
 800348a:	dd01      	ble.n	8003490 <_printf_common+0x80>
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	18ed      	adds	r5, r5, r3
 8003490:	2600      	movs	r6, #0
 8003492:	42b5      	cmp	r5, r6
 8003494:	d120      	bne.n	80034d8 <_printf_common+0xc8>
 8003496:	2000      	movs	r0, #0
 8003498:	e010      	b.n	80034bc <_printf_common+0xac>
 800349a:	3501      	adds	r5, #1
 800349c:	68e3      	ldr	r3, [r4, #12]
 800349e:	6832      	ldr	r2, [r6, #0]
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	42ab      	cmp	r3, r5
 80034a4:	ddd2      	ble.n	800344c <_printf_common+0x3c>
 80034a6:	0022      	movs	r2, r4
 80034a8:	2301      	movs	r3, #1
 80034aa:	9901      	ldr	r1, [sp, #4]
 80034ac:	9800      	ldr	r0, [sp, #0]
 80034ae:	9f08      	ldr	r7, [sp, #32]
 80034b0:	3219      	adds	r2, #25
 80034b2:	47b8      	blx	r7
 80034b4:	3001      	adds	r0, #1
 80034b6:	d1f0      	bne.n	800349a <_printf_common+0x8a>
 80034b8:	2001      	movs	r0, #1
 80034ba:	4240      	negs	r0, r0
 80034bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034be:	2030      	movs	r0, #48	@ 0x30
 80034c0:	18e1      	adds	r1, r4, r3
 80034c2:	3143      	adds	r1, #67	@ 0x43
 80034c4:	7008      	strb	r0, [r1, #0]
 80034c6:	0021      	movs	r1, r4
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	3145      	adds	r1, #69	@ 0x45
 80034cc:	7809      	ldrb	r1, [r1, #0]
 80034ce:	18a2      	adds	r2, r4, r2
 80034d0:	3243      	adds	r2, #67	@ 0x43
 80034d2:	3302      	adds	r3, #2
 80034d4:	7011      	strb	r1, [r2, #0]
 80034d6:	e7c1      	b.n	800345c <_printf_common+0x4c>
 80034d8:	0022      	movs	r2, r4
 80034da:	2301      	movs	r3, #1
 80034dc:	9901      	ldr	r1, [sp, #4]
 80034de:	9800      	ldr	r0, [sp, #0]
 80034e0:	9f08      	ldr	r7, [sp, #32]
 80034e2:	321a      	adds	r2, #26
 80034e4:	47b8      	blx	r7
 80034e6:	3001      	adds	r0, #1
 80034e8:	d0e6      	beq.n	80034b8 <_printf_common+0xa8>
 80034ea:	3601      	adds	r6, #1
 80034ec:	e7d1      	b.n	8003492 <_printf_common+0x82>
	...

080034f0 <_printf_i>:
 80034f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f2:	b08b      	sub	sp, #44	@ 0x2c
 80034f4:	9206      	str	r2, [sp, #24]
 80034f6:	000a      	movs	r2, r1
 80034f8:	3243      	adds	r2, #67	@ 0x43
 80034fa:	9307      	str	r3, [sp, #28]
 80034fc:	9005      	str	r0, [sp, #20]
 80034fe:	9203      	str	r2, [sp, #12]
 8003500:	7e0a      	ldrb	r2, [r1, #24]
 8003502:	000c      	movs	r4, r1
 8003504:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003506:	2a78      	cmp	r2, #120	@ 0x78
 8003508:	d809      	bhi.n	800351e <_printf_i+0x2e>
 800350a:	2a62      	cmp	r2, #98	@ 0x62
 800350c:	d80b      	bhi.n	8003526 <_printf_i+0x36>
 800350e:	2a00      	cmp	r2, #0
 8003510:	d100      	bne.n	8003514 <_printf_i+0x24>
 8003512:	e0ba      	b.n	800368a <_printf_i+0x19a>
 8003514:	497a      	ldr	r1, [pc, #488]	@ (8003700 <_printf_i+0x210>)
 8003516:	9104      	str	r1, [sp, #16]
 8003518:	2a58      	cmp	r2, #88	@ 0x58
 800351a:	d100      	bne.n	800351e <_printf_i+0x2e>
 800351c:	e08e      	b.n	800363c <_printf_i+0x14c>
 800351e:	0025      	movs	r5, r4
 8003520:	3542      	adds	r5, #66	@ 0x42
 8003522:	702a      	strb	r2, [r5, #0]
 8003524:	e022      	b.n	800356c <_printf_i+0x7c>
 8003526:	0010      	movs	r0, r2
 8003528:	3863      	subs	r0, #99	@ 0x63
 800352a:	2815      	cmp	r0, #21
 800352c:	d8f7      	bhi.n	800351e <_printf_i+0x2e>
 800352e:	f7fc fdfd 	bl	800012c <__gnu_thumb1_case_shi>
 8003532:	0016      	.short	0x0016
 8003534:	fff6001f 	.word	0xfff6001f
 8003538:	fff6fff6 	.word	0xfff6fff6
 800353c:	001ffff6 	.word	0x001ffff6
 8003540:	fff6fff6 	.word	0xfff6fff6
 8003544:	fff6fff6 	.word	0xfff6fff6
 8003548:	0036009f 	.word	0x0036009f
 800354c:	fff6007e 	.word	0xfff6007e
 8003550:	00b0fff6 	.word	0x00b0fff6
 8003554:	0036fff6 	.word	0x0036fff6
 8003558:	fff6fff6 	.word	0xfff6fff6
 800355c:	0082      	.short	0x0082
 800355e:	0025      	movs	r5, r4
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	3542      	adds	r5, #66	@ 0x42
 8003564:	1d11      	adds	r1, r2, #4
 8003566:	6019      	str	r1, [r3, #0]
 8003568:	6813      	ldr	r3, [r2, #0]
 800356a:	702b      	strb	r3, [r5, #0]
 800356c:	2301      	movs	r3, #1
 800356e:	e09e      	b.n	80036ae <_printf_i+0x1be>
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	6809      	ldr	r1, [r1, #0]
 8003574:	1d02      	adds	r2, r0, #4
 8003576:	060d      	lsls	r5, r1, #24
 8003578:	d50b      	bpl.n	8003592 <_printf_i+0xa2>
 800357a:	6806      	ldr	r6, [r0, #0]
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	2e00      	cmp	r6, #0
 8003580:	da03      	bge.n	800358a <_printf_i+0x9a>
 8003582:	232d      	movs	r3, #45	@ 0x2d
 8003584:	9a03      	ldr	r2, [sp, #12]
 8003586:	4276      	negs	r6, r6
 8003588:	7013      	strb	r3, [r2, #0]
 800358a:	4b5d      	ldr	r3, [pc, #372]	@ (8003700 <_printf_i+0x210>)
 800358c:	270a      	movs	r7, #10
 800358e:	9304      	str	r3, [sp, #16]
 8003590:	e018      	b.n	80035c4 <_printf_i+0xd4>
 8003592:	6806      	ldr	r6, [r0, #0]
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	0649      	lsls	r1, r1, #25
 8003598:	d5f1      	bpl.n	800357e <_printf_i+0x8e>
 800359a:	b236      	sxth	r6, r6
 800359c:	e7ef      	b.n	800357e <_printf_i+0x8e>
 800359e:	6808      	ldr	r0, [r1, #0]
 80035a0:	6819      	ldr	r1, [r3, #0]
 80035a2:	c940      	ldmia	r1!, {r6}
 80035a4:	0605      	lsls	r5, r0, #24
 80035a6:	d402      	bmi.n	80035ae <_printf_i+0xbe>
 80035a8:	0640      	lsls	r0, r0, #25
 80035aa:	d500      	bpl.n	80035ae <_printf_i+0xbe>
 80035ac:	b2b6      	uxth	r6, r6
 80035ae:	6019      	str	r1, [r3, #0]
 80035b0:	4b53      	ldr	r3, [pc, #332]	@ (8003700 <_printf_i+0x210>)
 80035b2:	270a      	movs	r7, #10
 80035b4:	9304      	str	r3, [sp, #16]
 80035b6:	2a6f      	cmp	r2, #111	@ 0x6f
 80035b8:	d100      	bne.n	80035bc <_printf_i+0xcc>
 80035ba:	3f02      	subs	r7, #2
 80035bc:	0023      	movs	r3, r4
 80035be:	2200      	movs	r2, #0
 80035c0:	3343      	adds	r3, #67	@ 0x43
 80035c2:	701a      	strb	r2, [r3, #0]
 80035c4:	6863      	ldr	r3, [r4, #4]
 80035c6:	60a3      	str	r3, [r4, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	db06      	blt.n	80035da <_printf_i+0xea>
 80035cc:	2104      	movs	r1, #4
 80035ce:	6822      	ldr	r2, [r4, #0]
 80035d0:	9d03      	ldr	r5, [sp, #12]
 80035d2:	438a      	bics	r2, r1
 80035d4:	6022      	str	r2, [r4, #0]
 80035d6:	4333      	orrs	r3, r6
 80035d8:	d00c      	beq.n	80035f4 <_printf_i+0x104>
 80035da:	9d03      	ldr	r5, [sp, #12]
 80035dc:	0030      	movs	r0, r6
 80035de:	0039      	movs	r1, r7
 80035e0:	f7fc fe34 	bl	800024c <__aeabi_uidivmod>
 80035e4:	9b04      	ldr	r3, [sp, #16]
 80035e6:	3d01      	subs	r5, #1
 80035e8:	5c5b      	ldrb	r3, [r3, r1]
 80035ea:	702b      	strb	r3, [r5, #0]
 80035ec:	0033      	movs	r3, r6
 80035ee:	0006      	movs	r6, r0
 80035f0:	429f      	cmp	r7, r3
 80035f2:	d9f3      	bls.n	80035dc <_printf_i+0xec>
 80035f4:	2f08      	cmp	r7, #8
 80035f6:	d109      	bne.n	800360c <_printf_i+0x11c>
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	07db      	lsls	r3, r3, #31
 80035fc:	d506      	bpl.n	800360c <_printf_i+0x11c>
 80035fe:	6862      	ldr	r2, [r4, #4]
 8003600:	6923      	ldr	r3, [r4, #16]
 8003602:	429a      	cmp	r2, r3
 8003604:	dc02      	bgt.n	800360c <_printf_i+0x11c>
 8003606:	2330      	movs	r3, #48	@ 0x30
 8003608:	3d01      	subs	r5, #1
 800360a:	702b      	strb	r3, [r5, #0]
 800360c:	9b03      	ldr	r3, [sp, #12]
 800360e:	1b5b      	subs	r3, r3, r5
 8003610:	6123      	str	r3, [r4, #16]
 8003612:	9b07      	ldr	r3, [sp, #28]
 8003614:	0021      	movs	r1, r4
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	9805      	ldr	r0, [sp, #20]
 800361a:	9b06      	ldr	r3, [sp, #24]
 800361c:	aa09      	add	r2, sp, #36	@ 0x24
 800361e:	f7ff fef7 	bl	8003410 <_printf_common>
 8003622:	3001      	adds	r0, #1
 8003624:	d148      	bne.n	80036b8 <_printf_i+0x1c8>
 8003626:	2001      	movs	r0, #1
 8003628:	4240      	negs	r0, r0
 800362a:	b00b      	add	sp, #44	@ 0x2c
 800362c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800362e:	2220      	movs	r2, #32
 8003630:	6809      	ldr	r1, [r1, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	6022      	str	r2, [r4, #0]
 8003636:	2278      	movs	r2, #120	@ 0x78
 8003638:	4932      	ldr	r1, [pc, #200]	@ (8003704 <_printf_i+0x214>)
 800363a:	9104      	str	r1, [sp, #16]
 800363c:	0021      	movs	r1, r4
 800363e:	3145      	adds	r1, #69	@ 0x45
 8003640:	700a      	strb	r2, [r1, #0]
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	6822      	ldr	r2, [r4, #0]
 8003646:	c940      	ldmia	r1!, {r6}
 8003648:	0610      	lsls	r0, r2, #24
 800364a:	d402      	bmi.n	8003652 <_printf_i+0x162>
 800364c:	0650      	lsls	r0, r2, #25
 800364e:	d500      	bpl.n	8003652 <_printf_i+0x162>
 8003650:	b2b6      	uxth	r6, r6
 8003652:	6019      	str	r1, [r3, #0]
 8003654:	07d3      	lsls	r3, r2, #31
 8003656:	d502      	bpl.n	800365e <_printf_i+0x16e>
 8003658:	2320      	movs	r3, #32
 800365a:	4313      	orrs	r3, r2
 800365c:	6023      	str	r3, [r4, #0]
 800365e:	2e00      	cmp	r6, #0
 8003660:	d001      	beq.n	8003666 <_printf_i+0x176>
 8003662:	2710      	movs	r7, #16
 8003664:	e7aa      	b.n	80035bc <_printf_i+0xcc>
 8003666:	2220      	movs	r2, #32
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	4393      	bics	r3, r2
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	e7f8      	b.n	8003662 <_printf_i+0x172>
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	680d      	ldr	r5, [r1, #0]
 8003674:	1d10      	adds	r0, r2, #4
 8003676:	6949      	ldr	r1, [r1, #20]
 8003678:	6018      	str	r0, [r3, #0]
 800367a:	6813      	ldr	r3, [r2, #0]
 800367c:	062e      	lsls	r6, r5, #24
 800367e:	d501      	bpl.n	8003684 <_printf_i+0x194>
 8003680:	6019      	str	r1, [r3, #0]
 8003682:	e002      	b.n	800368a <_printf_i+0x19a>
 8003684:	066d      	lsls	r5, r5, #25
 8003686:	d5fb      	bpl.n	8003680 <_printf_i+0x190>
 8003688:	8019      	strh	r1, [r3, #0]
 800368a:	2300      	movs	r3, #0
 800368c:	9d03      	ldr	r5, [sp, #12]
 800368e:	6123      	str	r3, [r4, #16]
 8003690:	e7bf      	b.n	8003612 <_printf_i+0x122>
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	1d11      	adds	r1, r2, #4
 8003696:	6019      	str	r1, [r3, #0]
 8003698:	6815      	ldr	r5, [r2, #0]
 800369a:	2100      	movs	r1, #0
 800369c:	0028      	movs	r0, r5
 800369e:	6862      	ldr	r2, [r4, #4]
 80036a0:	f000 f844 	bl	800372c <memchr>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d001      	beq.n	80036ac <_printf_i+0x1bc>
 80036a8:	1b40      	subs	r0, r0, r5
 80036aa:	6060      	str	r0, [r4, #4]
 80036ac:	6863      	ldr	r3, [r4, #4]
 80036ae:	6123      	str	r3, [r4, #16]
 80036b0:	2300      	movs	r3, #0
 80036b2:	9a03      	ldr	r2, [sp, #12]
 80036b4:	7013      	strb	r3, [r2, #0]
 80036b6:	e7ac      	b.n	8003612 <_printf_i+0x122>
 80036b8:	002a      	movs	r2, r5
 80036ba:	6923      	ldr	r3, [r4, #16]
 80036bc:	9906      	ldr	r1, [sp, #24]
 80036be:	9805      	ldr	r0, [sp, #20]
 80036c0:	9d07      	ldr	r5, [sp, #28]
 80036c2:	47a8      	blx	r5
 80036c4:	3001      	adds	r0, #1
 80036c6:	d0ae      	beq.n	8003626 <_printf_i+0x136>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	079b      	lsls	r3, r3, #30
 80036cc:	d415      	bmi.n	80036fa <_printf_i+0x20a>
 80036ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036d0:	68e0      	ldr	r0, [r4, #12]
 80036d2:	4298      	cmp	r0, r3
 80036d4:	daa9      	bge.n	800362a <_printf_i+0x13a>
 80036d6:	0018      	movs	r0, r3
 80036d8:	e7a7      	b.n	800362a <_printf_i+0x13a>
 80036da:	0022      	movs	r2, r4
 80036dc:	2301      	movs	r3, #1
 80036de:	9906      	ldr	r1, [sp, #24]
 80036e0:	9805      	ldr	r0, [sp, #20]
 80036e2:	9e07      	ldr	r6, [sp, #28]
 80036e4:	3219      	adds	r2, #25
 80036e6:	47b0      	blx	r6
 80036e8:	3001      	adds	r0, #1
 80036ea:	d09c      	beq.n	8003626 <_printf_i+0x136>
 80036ec:	3501      	adds	r5, #1
 80036ee:	68e3      	ldr	r3, [r4, #12]
 80036f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	42ab      	cmp	r3, r5
 80036f6:	dcf0      	bgt.n	80036da <_printf_i+0x1ea>
 80036f8:	e7e9      	b.n	80036ce <_printf_i+0x1de>
 80036fa:	2500      	movs	r5, #0
 80036fc:	e7f7      	b.n	80036ee <_printf_i+0x1fe>
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	080038b5 	.word	0x080038b5
 8003704:	080038c6 	.word	0x080038c6

08003708 <memmove>:
 8003708:	b510      	push	{r4, lr}
 800370a:	4288      	cmp	r0, r1
 800370c:	d902      	bls.n	8003714 <memmove+0xc>
 800370e:	188b      	adds	r3, r1, r2
 8003710:	4298      	cmp	r0, r3
 8003712:	d308      	bcc.n	8003726 <memmove+0x1e>
 8003714:	2300      	movs	r3, #0
 8003716:	429a      	cmp	r2, r3
 8003718:	d007      	beq.n	800372a <memmove+0x22>
 800371a:	5ccc      	ldrb	r4, [r1, r3]
 800371c:	54c4      	strb	r4, [r0, r3]
 800371e:	3301      	adds	r3, #1
 8003720:	e7f9      	b.n	8003716 <memmove+0xe>
 8003722:	5c8b      	ldrb	r3, [r1, r2]
 8003724:	5483      	strb	r3, [r0, r2]
 8003726:	3a01      	subs	r2, #1
 8003728:	d2fb      	bcs.n	8003722 <memmove+0x1a>
 800372a:	bd10      	pop	{r4, pc}

0800372c <memchr>:
 800372c:	b2c9      	uxtb	r1, r1
 800372e:	1882      	adds	r2, r0, r2
 8003730:	4290      	cmp	r0, r2
 8003732:	d101      	bne.n	8003738 <memchr+0xc>
 8003734:	2000      	movs	r0, #0
 8003736:	4770      	bx	lr
 8003738:	7803      	ldrb	r3, [r0, #0]
 800373a:	428b      	cmp	r3, r1
 800373c:	d0fb      	beq.n	8003736 <memchr+0xa>
 800373e:	3001      	adds	r0, #1
 8003740:	e7f6      	b.n	8003730 <memchr+0x4>

08003742 <memcpy>:
 8003742:	2300      	movs	r3, #0
 8003744:	b510      	push	{r4, lr}
 8003746:	429a      	cmp	r2, r3
 8003748:	d100      	bne.n	800374c <memcpy+0xa>
 800374a:	bd10      	pop	{r4, pc}
 800374c:	5ccc      	ldrb	r4, [r1, r3]
 800374e:	54c4      	strb	r4, [r0, r3]
 8003750:	3301      	adds	r3, #1
 8003752:	e7f8      	b.n	8003746 <memcpy+0x4>

08003754 <_realloc_r>:
 8003754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003756:	0006      	movs	r6, r0
 8003758:	000c      	movs	r4, r1
 800375a:	0015      	movs	r5, r2
 800375c:	2900      	cmp	r1, #0
 800375e:	d105      	bne.n	800376c <_realloc_r+0x18>
 8003760:	0011      	movs	r1, r2
 8003762:	f7ff fbad 	bl	8002ec0 <_malloc_r>
 8003766:	0004      	movs	r4, r0
 8003768:	0020      	movs	r0, r4
 800376a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800376c:	2a00      	cmp	r2, #0
 800376e:	d103      	bne.n	8003778 <_realloc_r+0x24>
 8003770:	f7ff fca6 	bl	80030c0 <_free_r>
 8003774:	002c      	movs	r4, r5
 8003776:	e7f7      	b.n	8003768 <_realloc_r+0x14>
 8003778:	f000 f81c 	bl	80037b4 <_malloc_usable_size_r>
 800377c:	0007      	movs	r7, r0
 800377e:	4285      	cmp	r5, r0
 8003780:	d802      	bhi.n	8003788 <_realloc_r+0x34>
 8003782:	0843      	lsrs	r3, r0, #1
 8003784:	42ab      	cmp	r3, r5
 8003786:	d3ef      	bcc.n	8003768 <_realloc_r+0x14>
 8003788:	0029      	movs	r1, r5
 800378a:	0030      	movs	r0, r6
 800378c:	f7ff fb98 	bl	8002ec0 <_malloc_r>
 8003790:	9001      	str	r0, [sp, #4]
 8003792:	2800      	cmp	r0, #0
 8003794:	d101      	bne.n	800379a <_realloc_r+0x46>
 8003796:	9c01      	ldr	r4, [sp, #4]
 8003798:	e7e6      	b.n	8003768 <_realloc_r+0x14>
 800379a:	002a      	movs	r2, r5
 800379c:	42bd      	cmp	r5, r7
 800379e:	d900      	bls.n	80037a2 <_realloc_r+0x4e>
 80037a0:	003a      	movs	r2, r7
 80037a2:	0021      	movs	r1, r4
 80037a4:	9801      	ldr	r0, [sp, #4]
 80037a6:	f7ff ffcc 	bl	8003742 <memcpy>
 80037aa:	0021      	movs	r1, r4
 80037ac:	0030      	movs	r0, r6
 80037ae:	f7ff fc87 	bl	80030c0 <_free_r>
 80037b2:	e7f0      	b.n	8003796 <_realloc_r+0x42>

080037b4 <_malloc_usable_size_r>:
 80037b4:	1f0b      	subs	r3, r1, #4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	1f18      	subs	r0, r3, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	da01      	bge.n	80037c2 <_malloc_usable_size_r+0xe>
 80037be:	580b      	ldr	r3, [r1, r0]
 80037c0:	18c0      	adds	r0, r0, r3
 80037c2:	4770      	bx	lr

080037c4 <_init>:
 80037c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ca:	bc08      	pop	{r3}
 80037cc:	469e      	mov	lr, r3
 80037ce:	4770      	bx	lr

080037d0 <_fini>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d6:	bc08      	pop	{r3}
 80037d8:	469e      	mov	lr, r3
 80037da:	4770      	bx	lr


Projeto UART com PC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004928  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080049e8  080049e8  000059e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b10  08004b10  0000626c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b10  08004b10  00005b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b18  08004b18  0000626c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b1c  08004b1c  00005b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000026c  20000000  08004b20  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000026c  08004d8c  0000626c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08004d8c  000064b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000626c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d74d  00000000  00000000  00006294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc8  00000000  00000000  000139e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  000159b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000962  00000000  00000000  000165c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014c13  00000000  00000000  00016f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb12  00000000  00000000  0002bb3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008046a  00000000  00000000  0003a64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000baab9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003024  00000000  00000000  000baafc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  000bdb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000026c 	.word	0x2000026c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080049d0 	.word	0x080049d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000270 	.word	0x20000270
 8000104:	080049d0 	.word	0x080049d0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_uldivmod>:
 8000258:	2b00      	cmp	r3, #0
 800025a:	d111      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 800025c:	2a00      	cmp	r2, #0
 800025e:	d10f      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 8000260:	2900      	cmp	r1, #0
 8000262:	d100      	bne.n	8000266 <__aeabi_uldivmod+0xe>
 8000264:	2800      	cmp	r0, #0
 8000266:	d002      	beq.n	800026e <__aeabi_uldivmod+0x16>
 8000268:	2100      	movs	r1, #0
 800026a:	43c9      	mvns	r1, r1
 800026c:	0008      	movs	r0, r1
 800026e:	b407      	push	{r0, r1, r2}
 8000270:	4802      	ldr	r0, [pc, #8]	@ (800027c <__aeabi_uldivmod+0x24>)
 8000272:	a102      	add	r1, pc, #8	@ (adr r1, 800027c <__aeabi_uldivmod+0x24>)
 8000274:	1840      	adds	r0, r0, r1
 8000276:	9002      	str	r0, [sp, #8]
 8000278:	bd03      	pop	{r0, r1, pc}
 800027a:	46c0      	nop			@ (mov r8, r8)
 800027c:	ffffffd9 	.word	0xffffffd9
 8000280:	b403      	push	{r0, r1}
 8000282:	4668      	mov	r0, sp
 8000284:	b501      	push	{r0, lr}
 8000286:	9802      	ldr	r0, [sp, #8]
 8000288:	f000 f806 	bl	8000298 <__udivmoddi4>
 800028c:	9b01      	ldr	r3, [sp, #4]
 800028e:	469e      	mov	lr, r3
 8000290:	b002      	add	sp, #8
 8000292:	bc0c      	pop	{r2, r3}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			@ (mov r8, r8)

08000298 <__udivmoddi4>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	4657      	mov	r7, sl
 800029c:	464e      	mov	r6, r9
 800029e:	4645      	mov	r5, r8
 80002a0:	46de      	mov	lr, fp
 80002a2:	b5e0      	push	{r5, r6, r7, lr}
 80002a4:	0004      	movs	r4, r0
 80002a6:	000d      	movs	r5, r1
 80002a8:	4692      	mov	sl, r2
 80002aa:	4699      	mov	r9, r3
 80002ac:	b083      	sub	sp, #12
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d830      	bhi.n	8000314 <__udivmoddi4+0x7c>
 80002b2:	d02d      	beq.n	8000310 <__udivmoddi4+0x78>
 80002b4:	4649      	mov	r1, r9
 80002b6:	4650      	mov	r0, sl
 80002b8:	f000 f8ba 	bl	8000430 <__clzdi2>
 80002bc:	0029      	movs	r1, r5
 80002be:	0006      	movs	r6, r0
 80002c0:	0020      	movs	r0, r4
 80002c2:	f000 f8b5 	bl	8000430 <__clzdi2>
 80002c6:	1a33      	subs	r3, r6, r0
 80002c8:	4698      	mov	r8, r3
 80002ca:	3b20      	subs	r3, #32
 80002cc:	d434      	bmi.n	8000338 <__udivmoddi4+0xa0>
 80002ce:	469b      	mov	fp, r3
 80002d0:	4653      	mov	r3, sl
 80002d2:	465a      	mov	r2, fp
 80002d4:	4093      	lsls	r3, r2
 80002d6:	4642      	mov	r2, r8
 80002d8:	001f      	movs	r7, r3
 80002da:	4653      	mov	r3, sl
 80002dc:	4093      	lsls	r3, r2
 80002de:	001e      	movs	r6, r3
 80002e0:	42af      	cmp	r7, r5
 80002e2:	d83b      	bhi.n	800035c <__udivmoddi4+0xc4>
 80002e4:	42af      	cmp	r7, r5
 80002e6:	d100      	bne.n	80002ea <__udivmoddi4+0x52>
 80002e8:	e079      	b.n	80003de <__udivmoddi4+0x146>
 80002ea:	465b      	mov	r3, fp
 80002ec:	1ba4      	subs	r4, r4, r6
 80002ee:	41bd      	sbcs	r5, r7
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	da00      	bge.n	80002f6 <__udivmoddi4+0x5e>
 80002f4:	e076      	b.n	80003e4 <__udivmoddi4+0x14c>
 80002f6:	2200      	movs	r2, #0
 80002f8:	2300      	movs	r3, #0
 80002fa:	9200      	str	r2, [sp, #0]
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	2301      	movs	r3, #1
 8000300:	465a      	mov	r2, fp
 8000302:	4093      	lsls	r3, r2
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	2301      	movs	r3, #1
 8000308:	4642      	mov	r2, r8
 800030a:	4093      	lsls	r3, r2
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	e029      	b.n	8000364 <__udivmoddi4+0xcc>
 8000310:	4282      	cmp	r2, r0
 8000312:	d9cf      	bls.n	80002b4 <__udivmoddi4+0x1c>
 8000314:	2200      	movs	r2, #0
 8000316:	2300      	movs	r3, #0
 8000318:	9200      	str	r2, [sp, #0]
 800031a:	9301      	str	r3, [sp, #4]
 800031c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <__udivmoddi4+0x8e>
 8000322:	601c      	str	r4, [r3, #0]
 8000324:	605d      	str	r5, [r3, #4]
 8000326:	9800      	ldr	r0, [sp, #0]
 8000328:	9901      	ldr	r1, [sp, #4]
 800032a:	b003      	add	sp, #12
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
 800032e:	46bb      	mov	fp, r7
 8000330:	46b2      	mov	sl, r6
 8000332:	46a9      	mov	r9, r5
 8000334:	46a0      	mov	r8, r4
 8000336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000338:	4642      	mov	r2, r8
 800033a:	469b      	mov	fp, r3
 800033c:	2320      	movs	r3, #32
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	4652      	mov	r2, sl
 8000342:	40da      	lsrs	r2, r3
 8000344:	4641      	mov	r1, r8
 8000346:	0013      	movs	r3, r2
 8000348:	464a      	mov	r2, r9
 800034a:	408a      	lsls	r2, r1
 800034c:	0017      	movs	r7, r2
 800034e:	4642      	mov	r2, r8
 8000350:	431f      	orrs	r7, r3
 8000352:	4653      	mov	r3, sl
 8000354:	4093      	lsls	r3, r2
 8000356:	001e      	movs	r6, r3
 8000358:	42af      	cmp	r7, r5
 800035a:	d9c3      	bls.n	80002e4 <__udivmoddi4+0x4c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	4643      	mov	r3, r8
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0d8      	beq.n	800031c <__udivmoddi4+0x84>
 800036a:	07fb      	lsls	r3, r7, #31
 800036c:	0872      	lsrs	r2, r6, #1
 800036e:	431a      	orrs	r2, r3
 8000370:	4646      	mov	r6, r8
 8000372:	087b      	lsrs	r3, r7, #1
 8000374:	e00e      	b.n	8000394 <__udivmoddi4+0xfc>
 8000376:	42ab      	cmp	r3, r5
 8000378:	d101      	bne.n	800037e <__udivmoddi4+0xe6>
 800037a:	42a2      	cmp	r2, r4
 800037c:	d80c      	bhi.n	8000398 <__udivmoddi4+0x100>
 800037e:	1aa4      	subs	r4, r4, r2
 8000380:	419d      	sbcs	r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	1924      	adds	r4, r4, r4
 8000386:	416d      	adcs	r5, r5
 8000388:	2100      	movs	r1, #0
 800038a:	3e01      	subs	r6, #1
 800038c:	1824      	adds	r4, r4, r0
 800038e:	414d      	adcs	r5, r1
 8000390:	2e00      	cmp	r6, #0
 8000392:	d006      	beq.n	80003a2 <__udivmoddi4+0x10a>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d9ee      	bls.n	8000376 <__udivmoddi4+0xde>
 8000398:	3e01      	subs	r6, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d1f8      	bne.n	8000394 <__udivmoddi4+0xfc>
 80003a2:	9800      	ldr	r0, [sp, #0]
 80003a4:	9901      	ldr	r1, [sp, #4]
 80003a6:	465b      	mov	r3, fp
 80003a8:	1900      	adds	r0, r0, r4
 80003aa:	4169      	adcs	r1, r5
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	db24      	blt.n	80003fa <__udivmoddi4+0x162>
 80003b0:	002b      	movs	r3, r5
 80003b2:	465a      	mov	r2, fp
 80003b4:	4644      	mov	r4, r8
 80003b6:	40d3      	lsrs	r3, r2
 80003b8:	002a      	movs	r2, r5
 80003ba:	40e2      	lsrs	r2, r4
 80003bc:	001c      	movs	r4, r3
 80003be:	465b      	mov	r3, fp
 80003c0:	0015      	movs	r5, r2
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db2a      	blt.n	800041c <__udivmoddi4+0x184>
 80003c6:	0026      	movs	r6, r4
 80003c8:	409e      	lsls	r6, r3
 80003ca:	0033      	movs	r3, r6
 80003cc:	0026      	movs	r6, r4
 80003ce:	4647      	mov	r7, r8
 80003d0:	40be      	lsls	r6, r7
 80003d2:	0032      	movs	r2, r6
 80003d4:	1a80      	subs	r0, r0, r2
 80003d6:	4199      	sbcs	r1, r3
 80003d8:	9000      	str	r0, [sp, #0]
 80003da:	9101      	str	r1, [sp, #4]
 80003dc:	e79e      	b.n	800031c <__udivmoddi4+0x84>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d8bc      	bhi.n	800035c <__udivmoddi4+0xc4>
 80003e2:	e782      	b.n	80002ea <__udivmoddi4+0x52>
 80003e4:	4642      	mov	r2, r8
 80003e6:	2320      	movs	r3, #32
 80003e8:	2100      	movs	r1, #0
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	2200      	movs	r2, #0
 80003ee:	9100      	str	r1, [sp, #0]
 80003f0:	9201      	str	r2, [sp, #4]
 80003f2:	2201      	movs	r2, #1
 80003f4:	40da      	lsrs	r2, r3
 80003f6:	9201      	str	r2, [sp, #4]
 80003f8:	e785      	b.n	8000306 <__udivmoddi4+0x6e>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	4646      	mov	r6, r8
 8000404:	409a      	lsls	r2, r3
 8000406:	0023      	movs	r3, r4
 8000408:	40f3      	lsrs	r3, r6
 800040a:	4644      	mov	r4, r8
 800040c:	4313      	orrs	r3, r2
 800040e:	002a      	movs	r2, r5
 8000410:	40e2      	lsrs	r2, r4
 8000412:	001c      	movs	r4, r3
 8000414:	465b      	mov	r3, fp
 8000416:	0015      	movs	r5, r2
 8000418:	2b00      	cmp	r3, #0
 800041a:	dad4      	bge.n	80003c6 <__udivmoddi4+0x12e>
 800041c:	4642      	mov	r2, r8
 800041e:	002f      	movs	r7, r5
 8000420:	2320      	movs	r3, #32
 8000422:	0026      	movs	r6, r4
 8000424:	4097      	lsls	r7, r2
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	40de      	lsrs	r6, r3
 800042a:	003b      	movs	r3, r7
 800042c:	4333      	orrs	r3, r6
 800042e:	e7cd      	b.n	80003cc <__udivmoddi4+0x134>

08000430 <__clzdi2>:
 8000430:	b510      	push	{r4, lr}
 8000432:	2900      	cmp	r1, #0
 8000434:	d103      	bne.n	800043e <__clzdi2+0xe>
 8000436:	f000 f807 	bl	8000448 <__clzsi2>
 800043a:	3020      	adds	r0, #32
 800043c:	e002      	b.n	8000444 <__clzdi2+0x14>
 800043e:	0008      	movs	r0, r1
 8000440:	f000 f802 	bl	8000448 <__clzsi2>
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__clzsi2>:
 8000448:	211c      	movs	r1, #28
 800044a:	2301      	movs	r3, #1
 800044c:	041b      	lsls	r3, r3, #16
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0xe>
 8000452:	0c00      	lsrs	r0, r0, #16
 8000454:	3910      	subs	r1, #16
 8000456:	0a1b      	lsrs	r3, r3, #8
 8000458:	4298      	cmp	r0, r3
 800045a:	d301      	bcc.n	8000460 <__clzsi2+0x18>
 800045c:	0a00      	lsrs	r0, r0, #8
 800045e:	3908      	subs	r1, #8
 8000460:	091b      	lsrs	r3, r3, #4
 8000462:	4298      	cmp	r0, r3
 8000464:	d301      	bcc.n	800046a <__clzsi2+0x22>
 8000466:	0900      	lsrs	r0, r0, #4
 8000468:	3904      	subs	r1, #4
 800046a:	a202      	add	r2, pc, #8	@ (adr r2, 8000474 <__clzsi2+0x2c>)
 800046c:	5c10      	ldrb	r0, [r2, r0]
 800046e:	1840      	adds	r0, r0, r1
 8000470:	4770      	bx	lr
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	02020304 	.word	0x02020304
 8000478:	01010101 	.word	0x01010101
	...

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 fcc2 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f830 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 f902 	bl	8000698 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000494:	f000 f8d0 	bl	8000638 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8000498:	f000 f892 	bl	80005c0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  StartLCD();
 800049c:	f000 f992 	bl	80007c4 <StartLCD>
  HAL_TIM_Base_Start_IT(&htim6);
 80004a0:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <main+0x58>)
 80004a2:	0018      	movs	r0, r3
 80004a4:	f002 f810 	bl	80024c8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Init(&huart1);
 80004a8:	4b0d      	ldr	r3, [pc, #52]	@ (80004e0 <main+0x5c>)
 80004aa:	0018      	movs	r0, r3
 80004ac:	f002 f9f6 	bl	800289c <HAL_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)	{
	Message(messages[atualMesage]);
 80004b0:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <main+0x60>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	019a      	lsls	r2, r3, #6
 80004b6:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <main+0x64>)
 80004b8:	18d3      	adds	r3, r2, r3
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 faca 	bl	8000a54 <Message>
	DataManager(0x80, INSTRUCTION);
 80004c0:	2100      	movs	r1, #0
 80004c2:	2080      	movs	r0, #128	@ 0x80
 80004c4:	f000 f9a2 	bl	800080c <DataManager>
	KeyboardCheck();
 80004c8:	f000 faf2 	bl	8000ab0 <KeyboardCheck>

	HAL_UART_Receive_IT(&huart1, comand, sizeof(comand) / sizeof(comand[0]));
 80004cc:	4907      	ldr	r1, [pc, #28]	@ (80004ec <main+0x68>)
 80004ce:	4b04      	ldr	r3, [pc, #16]	@ (80004e0 <main+0x5c>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	0018      	movs	r0, r3
 80004d4:	f002 fad6 	bl	8002a84 <HAL_UART_Receive_IT>
	Message(messages[atualMesage]);
 80004d8:	46c0      	nop			@ (mov r8, r8)
 80004da:	e7e9      	b.n	80004b0 <main+0x2c>
 80004dc:	20000288 	.word	0x20000288
 80004e0:	200002c8 	.word	0x200002c8
 80004e4:	20000354 	.word	0x20000354
 80004e8:	20000000 	.word	0x20000000
 80004ec:	20000364 	.word	0x20000364

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b09d      	sub	sp, #116	@ 0x74
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	2438      	movs	r4, #56	@ 0x38
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	0018      	movs	r0, r3
 80004fc:	2338      	movs	r3, #56	@ 0x38
 80004fe:	001a      	movs	r2, r3
 8000500:	2100      	movs	r1, #0
 8000502:	f003 fde3 	bl	80040cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000506:	2324      	movs	r3, #36	@ 0x24
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	0018      	movs	r0, r3
 800050c:	2314      	movs	r3, #20
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f003 fddb 	bl	80040cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000516:	003b      	movs	r3, r7
 8000518:	0018      	movs	r0, r3
 800051a:	2324      	movs	r3, #36	@ 0x24
 800051c:	001a      	movs	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	f003 fdd4 	bl	80040cc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000524:	4b24      	ldr	r3, [pc, #144]	@ (80005b8 <SystemClock_Config+0xc8>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a24      	ldr	r2, [pc, #144]	@ (80005bc <SystemClock_Config+0xcc>)
 800052a:	401a      	ands	r2, r3
 800052c:	4b22      	ldr	r3, [pc, #136]	@ (80005b8 <SystemClock_Config+0xc8>)
 800052e:	2180      	movs	r1, #128	@ 0x80
 8000530:	0109      	lsls	r1, r1, #4
 8000532:	430a      	orrs	r2, r1
 8000534:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000536:	0021      	movs	r1, r4
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2202      	movs	r2, #2
 800053c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053e:	187b      	adds	r3, r7, r1
 8000540:	2201      	movs	r2, #1
 8000542:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000544:	187b      	adds	r3, r7, r1
 8000546:	2210      	movs	r2, #16
 8000548:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	187b      	adds	r3, r7, r1
 8000552:	0018      	movs	r0, r3
 8000554:	f001 f822 	bl	800159c <HAL_RCC_OscConfig>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800055c:	f000 fb3a 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000560:	2124      	movs	r1, #36	@ 0x24
 8000562:	187b      	adds	r3, r7, r1
 8000564:	220f      	movs	r2, #15
 8000566:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2201      	movs	r2, #1
 800056c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2280      	movs	r2, #128	@ 0x80
 8000572:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2100      	movs	r1, #0
 8000584:	0018      	movs	r0, r3
 8000586:	f001 fbcd 	bl	8001d24 <HAL_RCC_ClockConfig>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800058e:	f000 fb21 	bl	8000bd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000592:	003b      	movs	r3, r7
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000598:	003b      	movs	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800059e:	003b      	movs	r3, r7
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 fdc3 	bl	800212c <HAL_RCCEx_PeriphCLKConfig>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005aa:	f000 fb13 	bl	8000bd4 <Error_Handler>
  }
}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b01d      	add	sp, #116	@ 0x74
 80005b4:	bd90      	pop	{r4, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	40007000 	.word	0x40007000
 80005bc:	ffffe7ff 	.word	0xffffe7ff

080005c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c6:	003b      	movs	r3, r7
 80005c8:	0018      	movs	r0, r3
 80005ca:	2308      	movs	r3, #8
 80005cc:	001a      	movs	r2, r3
 80005ce:	2100      	movs	r1, #0
 80005d0:	f003 fd7c 	bl	80040cc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005d4:	4b15      	ldr	r3, [pc, #84]	@ (800062c <MX_TIM6_Init+0x6c>)
 80005d6:	4a16      	ldr	r2, [pc, #88]	@ (8000630 <MX_TIM6_Init+0x70>)
 80005d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 601-1;
 80005da:	4b14      	ldr	r3, [pc, #80]	@ (800062c <MX_TIM6_Init+0x6c>)
 80005dc:	2296      	movs	r2, #150	@ 0x96
 80005de:	0092      	lsls	r2, r2, #2
 80005e0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e2:	4b12      	ldr	r3, [pc, #72]	@ (800062c <MX_TIM6_Init+0x6c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 13310;
 80005e8:	4b10      	ldr	r3, [pc, #64]	@ (800062c <MX_TIM6_Init+0x6c>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	@ (8000634 <MX_TIM6_Init+0x74>)
 80005ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005ee:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <MX_TIM6_Init+0x6c>)
 80005f0:	2280      	movs	r2, #128	@ 0x80
 80005f2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005f4:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <MX_TIM6_Init+0x6c>)
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 ff26 	bl	8002448 <HAL_TIM_Base_Init>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d001      	beq.n	8000604 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8000600:	f000 fae8 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000604:	003b      	movs	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800060a:	003b      	movs	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000610:	003a      	movs	r2, r7
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_TIM6_Init+0x6c>)
 8000614:	0011      	movs	r1, r2
 8000616:	0018      	movs	r0, r3
 8000618:	f002 f8e8 	bl	80027ec <HAL_TIMEx_MasterConfigSynchronization>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8000620:	f000 fad8 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	b002      	add	sp, #8
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000288 	.word	0x20000288
 8000630:	40001000 	.word	0x40001000
 8000634:	000033fe 	.word	0x000033fe

08000638 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800063c:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <MX_USART1_UART_Init+0x58>)
 800063e:	4a15      	ldr	r2, [pc, #84]	@ (8000694 <MX_USART1_UART_Init+0x5c>)
 8000640:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <MX_USART1_UART_Init+0x58>)
 8000644:	2296      	movs	r2, #150	@ 0x96
 8000646:	0192      	lsls	r2, r2, #6
 8000648:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_USART1_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_USART1_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_USART1_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_USART1_UART_Init+0x58>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <MX_USART1_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_USART1_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <MX_USART1_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_USART1_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800067a:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <MX_USART1_UART_Init+0x58>)
 800067c:	0018      	movs	r0, r3
 800067e:	f002 f90d 	bl	800289c <HAL_UART_Init>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000686:	f000 faa5 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200002c8 	.word	0x200002c8
 8000694:	40013800 	.word	0x40013800

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b089      	sub	sp, #36	@ 0x24
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	240c      	movs	r4, #12
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	2314      	movs	r3, #20
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f003 fd0f 	bl	80040cc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b42      	ldr	r3, [pc, #264]	@ (80007b8 <MX_GPIO_Init+0x120>)
 80006b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006b2:	4b41      	ldr	r3, [pc, #260]	@ (80007b8 <MX_GPIO_Init+0x120>)
 80006b4:	2101      	movs	r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ba:	4b3f      	ldr	r3, [pc, #252]	@ (80007b8 <MX_GPIO_Init+0x120>)
 80006bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006be:	2201      	movs	r2, #1
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	4b3c      	ldr	r3, [pc, #240]	@ (80007b8 <MX_GPIO_Init+0x120>)
 80006c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006ca:	4b3b      	ldr	r3, [pc, #236]	@ (80007b8 <MX_GPIO_Init+0x120>)
 80006cc:	2104      	movs	r1, #4
 80006ce:	430a      	orrs	r2, r1
 80006d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006d2:	4b39      	ldr	r3, [pc, #228]	@ (80007b8 <MX_GPIO_Init+0x120>)
 80006d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006d6:	2204      	movs	r2, #4
 80006d8:	4013      	ands	r3, r2
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	4b36      	ldr	r3, [pc, #216]	@ (80007b8 <MX_GPIO_Init+0x120>)
 80006e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006e2:	4b35      	ldr	r3, [pc, #212]	@ (80007b8 <MX_GPIO_Init+0x120>)
 80006e4:	2102      	movs	r1, #2
 80006e6:	430a      	orrs	r2, r1
 80006e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ea:	4b33      	ldr	r3, [pc, #204]	@ (80007b8 <MX_GPIO_Init+0x120>)
 80006ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ee:	2202      	movs	r2, #2
 80006f0:	4013      	ands	r3, r2
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|D4_Pin|D5_Pin, GPIO_PIN_RESET);
 80006f6:	23a0      	movs	r3, #160	@ 0xa0
 80006f8:	05db      	lsls	r3, r3, #23
 80006fa:	2200      	movs	r2, #0
 80006fc:	21e0      	movs	r1, #224	@ 0xe0
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 ff13 	bl	800152a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000704:	4b2d      	ldr	r3, [pc, #180]	@ (80007bc <MX_GPIO_Init+0x124>)
 8000706:	2200      	movs	r2, #0
 8000708:	2180      	movs	r1, #128	@ 0x80
 800070a:	0018      	movs	r0, r3
 800070c:	f000 ff0d 	bl	800152a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|RS_Pin|RW_Pin, GPIO_PIN_RESET);
 8000710:	23d0      	movs	r3, #208	@ 0xd0
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	482a      	ldr	r0, [pc, #168]	@ (80007c0 <MX_GPIO_Init+0x128>)
 8000716:	2200      	movs	r2, #0
 8000718:	0019      	movs	r1, r3
 800071a:	f000 ff06 	bl	800152a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_ALTERN_Pin BTN_SEND_Pin */
  GPIO_InitStruct.Pin = BTN_ALTERN_Pin|BTN_SEND_Pin;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2203      	movs	r2, #3
 8000722:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2201      	movs	r2, #1
 800072e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	193a      	adds	r2, r7, r4
 8000732:	23a0      	movs	r3, #160	@ 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fd63 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin D4_Pin D5_Pin */
  GPIO_InitStruct.Pin = EN_Pin|D4_Pin|D5_Pin;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	22e0      	movs	r2, #224	@ 0xe0
 8000742:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2201      	movs	r2, #1
 8000748:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	193a      	adds	r2, r7, r4
 8000758:	23a0      	movs	r3, #160	@ 0xa0
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	0011      	movs	r1, r2
 800075e:	0018      	movs	r0, r3
 8000760:	f000 fd50 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_Pin;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	193b      	adds	r3, r7, r4
 800076c:	2201      	movs	r2, #1
 800076e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	193b      	adds	r3, r7, r4
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 800077c:	193b      	adds	r3, r7, r4
 800077e:	4a0f      	ldr	r2, [pc, #60]	@ (80007bc <MX_GPIO_Init+0x124>)
 8000780:	0019      	movs	r1, r3
 8000782:	0010      	movs	r0, r2
 8000784:	f000 fd3e 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin RS_Pin RW_Pin */
  GPIO_InitStruct.Pin = D6_Pin|RS_Pin|RW_Pin;
 8000788:	0021      	movs	r1, r4
 800078a:	187b      	adds	r3, r7, r1
 800078c:	22d0      	movs	r2, #208	@ 0xd0
 800078e:	0092      	lsls	r2, r2, #2
 8000790:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2201      	movs	r2, #1
 8000796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	187b      	adds	r3, r7, r1
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	4a06      	ldr	r2, [pc, #24]	@ (80007c0 <MX_GPIO_Init+0x128>)
 80007a8:	0019      	movs	r1, r3
 80007aa:	0010      	movs	r0, r2
 80007ac:	f000 fd2a 	bl	8001204 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b009      	add	sp, #36	@ 0x24
 80007b6:	bd90      	pop	{r4, r7, pc}
 80007b8:	40021000 	.word	0x40021000
 80007bc:	50000800 	.word	0x50000800
 80007c0:	50000400 	.word	0x50000400

080007c4 <StartLCD>:

/* USER CODE BEGIN 4 */
void StartLCD(void){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 80007c8:	2014      	movs	r0, #20
 80007ca:	f000 fb91 	bl	8000ef0 <HAL_Delay>
	DataManager(0x33, INSTRUCTION);
 80007ce:	2100      	movs	r1, #0
 80007d0:	2033      	movs	r0, #51	@ 0x33
 80007d2:	f000 f81b 	bl	800080c <DataManager>
	DataManager(0x32, INSTRUCTION);
 80007d6:	2100      	movs	r1, #0
 80007d8:	2032      	movs	r0, #50	@ 0x32
 80007da:	f000 f817 	bl	800080c <DataManager>

	DataManager(0x28, INSTRUCTION);
 80007de:	2100      	movs	r1, #0
 80007e0:	2028      	movs	r0, #40	@ 0x28
 80007e2:	f000 f813 	bl	800080c <DataManager>

	DataManager(0x0C, INSTRUCTION);
 80007e6:	2100      	movs	r1, #0
 80007e8:	200c      	movs	r0, #12
 80007ea:	f000 f80f 	bl	800080c <DataManager>
	DataManager(0x06, INSTRUCTION);
 80007ee:	2100      	movs	r1, #0
 80007f0:	2006      	movs	r0, #6
 80007f2:	f000 f80b 	bl	800080c <DataManager>
	DataManager(0x01, INSTRUCTION);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2001      	movs	r0, #1
 80007fa:	f000 f807 	bl	800080c <DataManager>
	HAL_Delay(2);
 80007fe:	2002      	movs	r0, #2
 8000800:	f000 fb76 	bl	8000ef0 <HAL_Delay>
}
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <DataManager>:

void DataManager(int data, int mode){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
	PORT.B0 = (data >> 0) & 1;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1c1a      	adds	r2, r3, #0
 800081a:	2301      	movs	r3, #1
 800081c:	4013      	ands	r3, r2
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b89      	ldr	r3, [pc, #548]	@ (8000a48 <DataManager+0x23c>)
 8000822:	2101      	movs	r1, #1
 8000824:	400a      	ands	r2, r1
 8000826:	0010      	movs	r0, r2
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	2101      	movs	r1, #1
 800082c:	438a      	bics	r2, r1
 800082e:	1c11      	adds	r1, r2, #0
 8000830:	1c02      	adds	r2, r0, #0
 8000832:	430a      	orrs	r2, r1
 8000834:	701a      	strb	r2, [r3, #0]
	PORT.B1 = (data >> 1) & 1;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	105b      	asrs	r3, r3, #1
 800083a:	1c1a      	adds	r2, r3, #0
 800083c:	2301      	movs	r3, #1
 800083e:	4013      	ands	r3, r2
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b81      	ldr	r3, [pc, #516]	@ (8000a48 <DataManager+0x23c>)
 8000844:	2101      	movs	r1, #1
 8000846:	400a      	ands	r2, r1
 8000848:	1890      	adds	r0, r2, r2
 800084a:	781a      	ldrb	r2, [r3, #0]
 800084c:	2102      	movs	r1, #2
 800084e:	438a      	bics	r2, r1
 8000850:	1c11      	adds	r1, r2, #0
 8000852:	1c02      	adds	r2, r0, #0
 8000854:	430a      	orrs	r2, r1
 8000856:	701a      	strb	r2, [r3, #0]
	PORT.B2 = (data >> 2) & 1;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	109b      	asrs	r3, r3, #2
 800085c:	1c1a      	adds	r2, r3, #0
 800085e:	2301      	movs	r3, #1
 8000860:	4013      	ands	r3, r2
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b78      	ldr	r3, [pc, #480]	@ (8000a48 <DataManager+0x23c>)
 8000866:	2101      	movs	r1, #1
 8000868:	400a      	ands	r2, r1
 800086a:	0090      	lsls	r0, r2, #2
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	2104      	movs	r1, #4
 8000870:	438a      	bics	r2, r1
 8000872:	1c11      	adds	r1, r2, #0
 8000874:	1c02      	adds	r2, r0, #0
 8000876:	430a      	orrs	r2, r1
 8000878:	701a      	strb	r2, [r3, #0]
	PORT.B3 = (data >> 3) & 1;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	10db      	asrs	r3, r3, #3
 800087e:	1c1a      	adds	r2, r3, #0
 8000880:	2301      	movs	r3, #1
 8000882:	4013      	ands	r3, r2
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b70      	ldr	r3, [pc, #448]	@ (8000a48 <DataManager+0x23c>)
 8000888:	2101      	movs	r1, #1
 800088a:	400a      	ands	r2, r1
 800088c:	00d0      	lsls	r0, r2, #3
 800088e:	781a      	ldrb	r2, [r3, #0]
 8000890:	2108      	movs	r1, #8
 8000892:	438a      	bics	r2, r1
 8000894:	1c11      	adds	r1, r2, #0
 8000896:	1c02      	adds	r2, r0, #0
 8000898:	430a      	orrs	r2, r1
 800089a:	701a      	strb	r2, [r3, #0]
	PORT.B4 = (data >> 4) & 1;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	111b      	asrs	r3, r3, #4
 80008a0:	1c1a      	adds	r2, r3, #0
 80008a2:	2301      	movs	r3, #1
 80008a4:	4013      	ands	r3, r2
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b67      	ldr	r3, [pc, #412]	@ (8000a48 <DataManager+0x23c>)
 80008aa:	2101      	movs	r1, #1
 80008ac:	400a      	ands	r2, r1
 80008ae:	0110      	lsls	r0, r2, #4
 80008b0:	781a      	ldrb	r2, [r3, #0]
 80008b2:	2110      	movs	r1, #16
 80008b4:	438a      	bics	r2, r1
 80008b6:	1c11      	adds	r1, r2, #0
 80008b8:	1c02      	adds	r2, r0, #0
 80008ba:	430a      	orrs	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
	PORT.B5 = (data >> 5) & 1;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	115b      	asrs	r3, r3, #5
 80008c2:	1c1a      	adds	r2, r3, #0
 80008c4:	2301      	movs	r3, #1
 80008c6:	4013      	ands	r3, r2
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4b5f      	ldr	r3, [pc, #380]	@ (8000a48 <DataManager+0x23c>)
 80008cc:	2101      	movs	r1, #1
 80008ce:	400a      	ands	r2, r1
 80008d0:	0150      	lsls	r0, r2, #5
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	2120      	movs	r1, #32
 80008d6:	438a      	bics	r2, r1
 80008d8:	1c11      	adds	r1, r2, #0
 80008da:	1c02      	adds	r2, r0, #0
 80008dc:	430a      	orrs	r2, r1
 80008de:	701a      	strb	r2, [r3, #0]
	PORT.B6 = (data >> 6) & 1;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	119b      	asrs	r3, r3, #6
 80008e4:	1c1a      	adds	r2, r3, #0
 80008e6:	2301      	movs	r3, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b56      	ldr	r3, [pc, #344]	@ (8000a48 <DataManager+0x23c>)
 80008ee:	2101      	movs	r1, #1
 80008f0:	400a      	ands	r2, r1
 80008f2:	0190      	lsls	r0, r2, #6
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	2140      	movs	r1, #64	@ 0x40
 80008f8:	438a      	bics	r2, r1
 80008fa:	1c11      	adds	r1, r2, #0
 80008fc:	1c02      	adds	r2, r0, #0
 80008fe:	430a      	orrs	r2, r1
 8000900:	701a      	strb	r2, [r3, #0]
	PORT.B7 = (data >> 7) & 1;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	11db      	asrs	r3, r3, #7
 8000906:	1c1a      	adds	r2, r3, #0
 8000908:	2301      	movs	r3, #1
 800090a:	4013      	ands	r3, r2
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b4e      	ldr	r3, [pc, #312]	@ (8000a48 <DataManager+0x23c>)
 8000910:	01d0      	lsls	r0, r2, #7
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	217f      	movs	r1, #127	@ 0x7f
 8000916:	400a      	ands	r2, r1
 8000918:	1c11      	adds	r1, r2, #0
 800091a:	1c02      	adds	r2, r0, #0
 800091c:	430a      	orrs	r2, r1
 800091e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, mode);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	2380      	movs	r3, #128	@ 0x80
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4848      	ldr	r0, [pc, #288]	@ (8000a4c <DataManager+0x240>)
 800092a:	0019      	movs	r1, r3
 800092c:	f000 fdfd 	bl	800152a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000930:	2380      	movs	r3, #128	@ 0x80
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4845      	ldr	r0, [pc, #276]	@ (8000a4c <DataManager+0x240>)
 8000936:	2200      	movs	r2, #0
 8000938:	0019      	movs	r1, r3
 800093a:	f000 fdf6 	bl	800152a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.B4);
 800093e:	4b42      	ldr	r3, [pc, #264]	@ (8000a48 <DataManager+0x23c>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	06db      	lsls	r3, r3, #27
 8000944:	0fdb      	lsrs	r3, r3, #31
 8000946:	b2db      	uxtb	r3, r3
 8000948:	001a      	movs	r2, r3
 800094a:	23a0      	movs	r3, #160	@ 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	2140      	movs	r1, #64	@ 0x40
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fdea 	bl	800152a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.B5);
 8000956:	4b3c      	ldr	r3, [pc, #240]	@ (8000a48 <DataManager+0x23c>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	069b      	lsls	r3, r3, #26
 800095c:	0fdb      	lsrs	r3, r3, #31
 800095e:	b2db      	uxtb	r3, r3
 8000960:	001a      	movs	r2, r3
 8000962:	23a0      	movs	r3, #160	@ 0xa0
 8000964:	05db      	lsls	r3, r3, #23
 8000966:	2180      	movs	r1, #128	@ 0x80
 8000968:	0018      	movs	r0, r3
 800096a:	f000 fdde 	bl	800152a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.B6);
 800096e:	4b36      	ldr	r3, [pc, #216]	@ (8000a48 <DataManager+0x23c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	065b      	lsls	r3, r3, #25
 8000974:	0fdb      	lsrs	r3, r3, #31
 8000976:	b2db      	uxtb	r3, r3
 8000978:	001a      	movs	r2, r3
 800097a:	4b34      	ldr	r3, [pc, #208]	@ (8000a4c <DataManager+0x240>)
 800097c:	2140      	movs	r1, #64	@ 0x40
 800097e:	0018      	movs	r0, r3
 8000980:	f000 fdd3 	bl	800152a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.B7);
 8000984:	4b30      	ldr	r3, [pc, #192]	@ (8000a48 <DataManager+0x23c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	061b      	lsls	r3, r3, #24
 800098a:	0fdb      	lsrs	r3, r3, #31
 800098c:	b2db      	uxtb	r3, r3
 800098e:	001a      	movs	r2, r3
 8000990:	4b2f      	ldr	r3, [pc, #188]	@ (8000a50 <DataManager+0x244>)
 8000992:	2180      	movs	r1, #128	@ 0x80
 8000994:	0018      	movs	r0, r3
 8000996:	f000 fdc8 	bl	800152a <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800099a:	2001      	movs	r0, #1
 800099c:	f000 faa8 	bl	8000ef0 <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 80009a0:	23a0      	movs	r3, #160	@ 0xa0
 80009a2:	05db      	lsls	r3, r3, #23
 80009a4:	2120      	movs	r1, #32
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 fddc 	bl	8001564 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f000 fa9f 	bl	8000ef0 <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 80009b2:	23a0      	movs	r3, #160	@ 0xa0
 80009b4:	05db      	lsls	r3, r3, #23
 80009b6:	2120      	movs	r1, #32
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 fdd3 	bl	8001564 <HAL_GPIO_TogglePin>


	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.B0);
 80009be:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <DataManager+0x23c>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	07db      	lsls	r3, r3, #31
 80009c4:	0fdb      	lsrs	r3, r3, #31
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	001a      	movs	r2, r3
 80009ca:	23a0      	movs	r3, #160	@ 0xa0
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	2140      	movs	r1, #64	@ 0x40
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 fdaa 	bl	800152a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.B1);
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <DataManager+0x23c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	079b      	lsls	r3, r3, #30
 80009dc:	0fdb      	lsrs	r3, r3, #31
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	001a      	movs	r2, r3
 80009e2:	23a0      	movs	r3, #160	@ 0xa0
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	2180      	movs	r1, #128	@ 0x80
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 fd9e 	bl	800152a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.B2);
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <DataManager+0x23c>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	075b      	lsls	r3, r3, #29
 80009f4:	0fdb      	lsrs	r3, r3, #31
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	001a      	movs	r2, r3
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <DataManager+0x240>)
 80009fc:	2140      	movs	r1, #64	@ 0x40
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fd93 	bl	800152a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.B3);
 8000a04:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <DataManager+0x23c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	071b      	lsls	r3, r3, #28
 8000a0a:	0fdb      	lsrs	r3, r3, #31
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	001a      	movs	r2, r3
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <DataManager+0x244>)
 8000a12:	2180      	movs	r1, #128	@ 0x80
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fd88 	bl	800152a <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 fa68 	bl	8000ef0 <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8000a20:	23a0      	movs	r3, #160	@ 0xa0
 8000a22:	05db      	lsls	r3, r3, #23
 8000a24:	2120      	movs	r1, #32
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 fd9c 	bl	8001564 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f000 fa5f 	bl	8000ef0 <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8000a32:	23a0      	movs	r3, #160	@ 0xa0
 8000a34:	05db      	lsls	r3, r3, #23
 8000a36:	2120      	movs	r1, #32
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f000 fd93 	bl	8001564 <HAL_GPIO_TogglePin>

}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b002      	add	sp, #8
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	20000350 	.word	0x20000350
 8000a4c:	50000400 	.word	0x50000400
 8000a50:	50000800 	.word	0x50000800

08000a54 <Message>:

void Message(char ** message){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 6; ++i){
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	e01e      	b.n	8000aa0 <Message+0x4c>
		for (int j = 0; message[i][j] != '\0'; ++j){
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	e00e      	b.n	8000a86 <Message+0x32>
			DataManager(message[i][j], DATA);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	18d3      	adds	r3, r2, r3
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	68bb      	ldr	r3, [r7, #8]
 8000a74:	18d3      	adds	r3, r2, r3
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff fec6 	bl	800080c <DataManager>
		for (int j = 0; message[i][j] != '\0'; ++j){
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	3301      	adds	r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	18d3      	adds	r3, r2, r3
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	18d3      	adds	r3, r2, r3
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1e6      	bne.n	8000a68 <Message+0x14>
	for (int i = 0; i < 6; ++i){
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2b05      	cmp	r3, #5
 8000aa4:	dddd      	ble.n	8000a62 <Message+0xe>
		}
	}
}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b004      	add	sp, #16
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <KeyboardCheck>:

void KeyboardCheck(void){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
	int btn_altern = HAL_GPIO_ReadPin(BTN_ALTERN_GPIO_Port, BTN_ALTERN_Pin);
 8000ab6:	23a0      	movs	r3, #160	@ 0xa0
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	2101      	movs	r1, #1
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 fd17 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	607b      	str	r3, [r7, #4]

	if (!btn_altern){
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d12e      	bne.n	8000b2a <KeyboardCheck+0x7a>
		bouce = HAL_GetTick();
 8000acc:	f000 fa06 	bl	8000edc <HAL_GetTick>
 8000ad0:	0002      	movs	r2, r0
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <KeyboardCheck+0x84>)
 8000ad4:	601a      	str	r2, [r3, #0]
		if ((bouce - brefBouce) > 15){
 8000ad6:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <KeyboardCheck+0x84>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <KeyboardCheck+0x88>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d91e      	bls.n	8000b22 <KeyboardCheck+0x72>
			atualMesage++;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <KeyboardCheck+0x8c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <KeyboardCheck+0x8c>)
 8000aec:	601a      	str	r2, [r3, #0]
			if (atualMesage >= 6) atualMesage = 0;
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <KeyboardCheck+0x8c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b05      	cmp	r3, #5
 8000af4:	dd02      	ble.n	8000afc <KeyboardCheck+0x4c>
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <KeyboardCheck+0x8c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
			strcpy(messageToSend, messages[atualMesage][0]);
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <KeyboardCheck+0x8c>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <KeyboardCheck+0x90>)
 8000b02:	0192      	lsls	r2, r2, #6
 8000b04:	58d2      	ldr	r2, [r2, r3]
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <KeyboardCheck+0x94>)
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f003 fb12 	bl	8004134 <strcpy>

			while (!HAL_GPIO_ReadPin(BTN_ALTERN_GPIO_Port, BTN_ALTERN_Pin));
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	23a0      	movs	r3, #160	@ 0xa0
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	2101      	movs	r1, #1
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f000 fce9 	bl	80014f0 <HAL_GPIO_ReadPin>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d0f7      	beq.n	8000b12 <KeyboardCheck+0x62>
		}
		brefBouce = bouce;
 8000b22:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <KeyboardCheck+0x84>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <KeyboardCheck+0x88>)
 8000b28:	601a      	str	r2, [r3, #0]
	}
}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	20000358 	.word	0x20000358
 8000b38:	2000035c 	.word	0x2000035c
 8000b3c:	20000354 	.word	0x20000354
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000200 	.word	0x20000200

08000b48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) messageToSend, strlen(messageToSend), 100);
 8000b50:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff fae2 	bl	800011c <strlen>
 8000b58:	0003      	movs	r3, r0
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	4904      	ldr	r1, [pc, #16]	@ (8000b70 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b5e:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b60:	2364      	movs	r3, #100	@ 0x64
 8000b62:	f001 feef 	bl	8002944 <HAL_UART_Transmit>
}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	20000200 	.word	0x20000200
 8000b74:	200002c8 	.word	0x200002c8

08000b78 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <HAL_UART_RxCpltCallback+0x44>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d114      	bne.n	8000bb4 <HAL_UART_RxCpltCallback+0x3c>
		sprintf(stringComp, "%s", (char*) comand);
 8000b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc0 <HAL_UART_RxCpltCallback+0x48>)
 8000b8c:	490d      	ldr	r1, [pc, #52]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x4c>)
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x50>)
 8000b90:	0018      	movs	r0, r3
 8000b92:	f003 fa79 	bl	8004088 <siprintf>
		if (!strcmp("Y", stringComp)) atualMesage = 6;
 8000b96:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x50>)
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <HAL_UART_RxCpltCallback+0x54>)
 8000b9a:	0011      	movs	r1, r2
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff fab3 	bl	8000108 <strcmp>
 8000ba2:	1e03      	subs	r3, r0, #0
 8000ba4:	d103      	bne.n	8000bae <HAL_UART_RxCpltCallback+0x36>
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x58>)
 8000ba8:	2206      	movs	r2, #6
 8000baa:	601a      	str	r2, [r3, #0]
		else atualMesage = 7;
	}
}
 8000bac:	e002      	b.n	8000bb4 <HAL_UART_RxCpltCallback+0x3c>
		else atualMesage = 7;
 8000bae:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x58>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b002      	add	sp, #8
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40013800 	.word	0x40013800
 8000bc0:	20000364 	.word	0x20000364
 8000bc4:	08004a68 	.word	0x08004a68
 8000bc8:	20000360 	.word	0x20000360
 8000bcc:	08004a6c 	.word	0x08004a6c
 8000bd0:	20000354 	.word	0x20000354

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	e7fd      	b.n	8000bdc <Error_Handler+0x8>

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <HAL_MspInit+0x24>)
 8000be6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_MspInit+0x24>)
 8000bea:	2101      	movs	r1, #1
 8000bec:	430a      	orrs	r2, r1
 8000bee:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf0:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <HAL_MspInit+0x24>)
 8000bf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bf4:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <HAL_MspInit+0x24>)
 8000bf6:	2180      	movs	r1, #128	@ 0x80
 8000bf8:	0549      	lsls	r1, r1, #21
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <HAL_TIM_Base_MspInit+0x38>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d10d      	bne.n	8000c36 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <HAL_TIM_Base_MspInit+0x3c>)
 8000c1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <HAL_TIM_Base_MspInit+0x3c>)
 8000c20:	2110      	movs	r1, #16
 8000c22:	430a      	orrs	r2, r1
 8000c24:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2011      	movs	r0, #17
 8000c2c:	f000 fa30 	bl	8001090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c30:	2011      	movs	r0, #17
 8000c32:	f000 fa42 	bl	80010ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b002      	add	sp, #8
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	40001000 	.word	0x40001000
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b089      	sub	sp, #36	@ 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	240c      	movs	r4, #12
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	0018      	movs	r0, r3
 8000c56:	2314      	movs	r3, #20
 8000c58:	001a      	movs	r2, r3
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f003 fa36 	bl	80040cc <memset>
  if(huart->Instance==USART1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd8 <HAL_UART_MspInit+0x90>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d132      	bne.n	8000cd0 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <HAL_UART_MspInit+0x94>)
 8000c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <HAL_UART_MspInit+0x94>)
 8000c70:	2180      	movs	r1, #128	@ 0x80
 8000c72:	01c9      	lsls	r1, r1, #7
 8000c74:	430a      	orrs	r2, r1
 8000c76:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_UART_MspInit+0x94>)
 8000c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <HAL_UART_MspInit+0x94>)
 8000c7e:	2101      	movs	r1, #1
 8000c80:	430a      	orrs	r2, r1
 8000c82:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_UART_MspInit+0x94>)
 8000c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	22c0      	movs	r2, #192	@ 0xc0
 8000c94:	00d2      	lsls	r2, r2, #3
 8000c96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	0021      	movs	r1, r4
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	187b      	adds	r3, r7, r1
 8000ca8:	2203      	movs	r2, #3
 8000caa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2204      	movs	r2, #4
 8000cb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	187a      	adds	r2, r7, r1
 8000cb4:	23a0      	movs	r3, #160	@ 0xa0
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	0011      	movs	r1, r2
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 faa2 	bl	8001204 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	201b      	movs	r0, #27
 8000cc6:	f000 f9e3 	bl	8001090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cca:	201b      	movs	r0, #27
 8000ccc:	f000 f9f5 	bl	80010ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b009      	add	sp, #36	@ 0x24
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce4:	46c0      	nop			@ (mov r8, r8)
 8000ce6:	e7fd      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	e7fd      	b.n	8000cec <HardFault_Handler+0x4>

08000cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	46c0      	nop			@ (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f8d6 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <TIM6_DAC_IRQHandler+0x14>)
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f001 fc20 	bl	8002560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d20:	46c0      	nop			@ (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			@ (mov r8, r8)
 8000d28:	20000288 	.word	0x20000288

08000d2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d30:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <USART1_IRQHandler+0x14>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f001 ff04 	bl	8002b40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	200002c8 	.word	0x200002c8

08000d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d4c:	4a14      	ldr	r2, [pc, #80]	@ (8000da0 <_sbrk+0x5c>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <_sbrk+0x60>)
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <_sbrk+0x64>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <_sbrk+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	18d3      	adds	r3, r2, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d207      	bcs.n	8000d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d74:	f003 f9b2 	bl	80040dc <__errno>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	425b      	negs	r3, r3
 8000d82:	e009      	b.n	8000d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	18d2      	adds	r2, r2, r3
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <_sbrk+0x64>)
 8000d94:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b006      	add	sp, #24
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20002000 	.word	0x20002000
 8000da4:	00000400 	.word	0x00000400
 8000da8:	20000368 	.word	0x20000368
 8000dac:	200004b8 	.word	0x200004b8

08000db0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000dbc:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dbe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc0:	f7ff fff6 	bl	8000db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	@ (8000dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <LoopForever+0xe>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e08 <LoopForever+0x16>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f003 f97d 	bl	80040e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fb49 	bl	8000484 <main>

08000df2 <LoopForever>:

LoopForever:
    b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   r0, =_estack
 8000df4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8000e00:	08004b20 	.word	0x08004b20
  ldr r2, =_sbss
 8000e04:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8000e08:	200004b8 	.word	0x200004b8

08000e0c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_COMP_IRQHandler>
	...

08000e10 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <HAL_Init+0x3c>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <HAL_Init+0x3c>)
 8000e22:	2140      	movs	r1, #64	@ 0x40
 8000e24:	430a      	orrs	r2, r1
 8000e26:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 f811 	bl	8000e50 <HAL_InitTick>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	e001      	b.n	8000e3e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e3a:	f7ff fed1 	bl	8000be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
}
 8000e42:	0018      	movs	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b002      	add	sp, #8
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	40022000 	.word	0x40022000

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b14      	ldr	r3, [pc, #80]	@ (8000eac <HAL_InitTick+0x5c>)
 8000e5a:	681c      	ldr	r4, [r3, #0]
 8000e5c:	4b14      	ldr	r3, [pc, #80]	@ (8000eb0 <HAL_InitTick+0x60>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	0019      	movs	r1, r3
 8000e62:	23fa      	movs	r3, #250	@ 0xfa
 8000e64:	0098      	lsls	r0, r3, #2
 8000e66:	f7ff f96b 	bl	8000140 <__udivsi3>
 8000e6a:	0003      	movs	r3, r0
 8000e6c:	0019      	movs	r1, r3
 8000e6e:	0020      	movs	r0, r4
 8000e70:	f7ff f966 	bl	8000140 <__udivsi3>
 8000e74:	0003      	movs	r3, r0
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 f92f 	bl	80010da <HAL_SYSTICK_Config>
 8000e7c:	1e03      	subs	r3, r0, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e00f      	b.n	8000ea4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d80b      	bhi.n	8000ea2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	425b      	negs	r3, r3
 8000e90:	2200      	movs	r2, #0
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 f8fc 	bl	8001090 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_InitTick+0x64>)
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b003      	add	sp, #12
 8000eaa:	bd90      	pop	{r4, r7, pc}
 8000eac:	20000210 	.word	0x20000210
 8000eb0:	20000218 	.word	0x20000218
 8000eb4:	20000214 	.word	0x20000214

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <HAL_IncTick+0x1c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <HAL_IncTick+0x20>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	18d2      	adds	r2, r2, r3
 8000ec8:	4b03      	ldr	r3, [pc, #12]	@ (8000ed8 <HAL_IncTick+0x20>)
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	46c0      	nop			@ (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	20000218 	.word	0x20000218
 8000ed8:	2000036c 	.word	0x2000036c

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b02      	ldr	r3, [pc, #8]	@ (8000eec <HAL_GetTick+0x10>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			@ (mov r8, r8)
 8000eec:	2000036c 	.word	0x2000036c

08000ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff fff0 	bl	8000edc <HAL_GetTick>
 8000efc:	0003      	movs	r3, r0
 8000efe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3301      	adds	r3, #1
 8000f08:	d005      	beq.n	8000f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <HAL_Delay+0x44>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	001a      	movs	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	189b      	adds	r3, r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	f7ff ffe0 	bl	8000edc <HAL_GetTick>
 8000f1c:	0002      	movs	r2, r0
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8f7      	bhi.n	8000f18 <HAL_Delay+0x28>
  {
  }
}
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b004      	add	sp, #16
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	20000218 	.word	0x20000218

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	0002      	movs	r2, r0
 8000f40:	1dfb      	adds	r3, r7, #7
 8000f42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f44:	1dfb      	adds	r3, r7, #7
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f4a:	d809      	bhi.n	8000f60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	001a      	movs	r2, r3
 8000f52:	231f      	movs	r3, #31
 8000f54:	401a      	ands	r2, r3
 8000f56:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <__NVIC_EnableIRQ+0x30>)
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4091      	lsls	r1, r2
 8000f5c:	000a      	movs	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
  }
}
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	0002      	movs	r2, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f80:	d828      	bhi.n	8000fd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f82:	4a2f      	ldr	r2, [pc, #188]	@ (8001040 <__NVIC_SetPriority+0xd4>)
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	33c0      	adds	r3, #192	@ 0xc0
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	589b      	ldr	r3, [r3, r2]
 8000f92:	1dfa      	adds	r2, r7, #7
 8000f94:	7812      	ldrb	r2, [r2, #0]
 8000f96:	0011      	movs	r1, r2
 8000f98:	2203      	movs	r2, #3
 8000f9a:	400a      	ands	r2, r1
 8000f9c:	00d2      	lsls	r2, r2, #3
 8000f9e:	21ff      	movs	r1, #255	@ 0xff
 8000fa0:	4091      	lsls	r1, r2
 8000fa2:	000a      	movs	r2, r1
 8000fa4:	43d2      	mvns	r2, r2
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	019b      	lsls	r3, r3, #6
 8000fae:	22ff      	movs	r2, #255	@ 0xff
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	2303      	movs	r3, #3
 8000fba:	4003      	ands	r3, r0
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc0:	481f      	ldr	r0, [pc, #124]	@ (8001040 <__NVIC_SetPriority+0xd4>)
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	33c0      	adds	r3, #192	@ 0xc0
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fd2:	e031      	b.n	8001038 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <__NVIC_SetPriority+0xd8>)
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	0019      	movs	r1, r3
 8000fdc:	230f      	movs	r3, #15
 8000fde:	400b      	ands	r3, r1
 8000fe0:	3b08      	subs	r3, #8
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3306      	adds	r3, #6
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	18d3      	adds	r3, r2, r3
 8000fea:	3304      	adds	r3, #4
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	1dfa      	adds	r2, r7, #7
 8000ff0:	7812      	ldrb	r2, [r2, #0]
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	400a      	ands	r2, r1
 8000ff8:	00d2      	lsls	r2, r2, #3
 8000ffa:	21ff      	movs	r1, #255	@ 0xff
 8000ffc:	4091      	lsls	r1, r2
 8000ffe:	000a      	movs	r2, r1
 8001000:	43d2      	mvns	r2, r2
 8001002:	401a      	ands	r2, r3
 8001004:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	019b      	lsls	r3, r3, #6
 800100a:	22ff      	movs	r2, #255	@ 0xff
 800100c:	401a      	ands	r2, r3
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	0018      	movs	r0, r3
 8001014:	2303      	movs	r3, #3
 8001016:	4003      	ands	r3, r0
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800101c:	4809      	ldr	r0, [pc, #36]	@ (8001044 <__NVIC_SetPriority+0xd8>)
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	001c      	movs	r4, r3
 8001024:	230f      	movs	r3, #15
 8001026:	4023      	ands	r3, r4
 8001028:	3b08      	subs	r3, #8
 800102a:	089b      	lsrs	r3, r3, #2
 800102c:	430a      	orrs	r2, r1
 800102e:	3306      	adds	r3, #6
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	18c3      	adds	r3, r0, r3
 8001034:	3304      	adds	r3, #4
 8001036:	601a      	str	r2, [r3, #0]
}
 8001038:	46c0      	nop			@ (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	b003      	add	sp, #12
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	1e5a      	subs	r2, r3, #1
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	045b      	lsls	r3, r3, #17
 8001058:	429a      	cmp	r2, r3
 800105a:	d301      	bcc.n	8001060 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105c:	2301      	movs	r3, #1
 800105e:	e010      	b.n	8001082 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <SysTick_Config+0x44>)
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	3a01      	subs	r2, #1
 8001066:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001068:	2301      	movs	r3, #1
 800106a:	425b      	negs	r3, r3
 800106c:	2103      	movs	r1, #3
 800106e:	0018      	movs	r0, r3
 8001070:	f7ff ff7c 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <SysTick_Config+0x44>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <SysTick_Config+0x44>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	0018      	movs	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	b002      	add	sp, #8
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	210f      	movs	r1, #15
 800109c:	187b      	adds	r3, r7, r1
 800109e:	1c02      	adds	r2, r0, #0
 80010a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	0011      	movs	r1, r2
 80010ac:	0018      	movs	r0, r3
 80010ae:	f7ff ff5d 	bl	8000f6c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b004      	add	sp, #16
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	0002      	movs	r2, r0
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff ff33 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b002      	add	sp, #8
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff ffaf 	bl	8001048 <SysTick_Config>
 80010ea:	0003      	movs	r3, r0
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2225      	movs	r2, #37	@ 0x25
 8001108:	5c9b      	ldrb	r3, [r3, r2]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d008      	beq.n	8001122 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2204      	movs	r2, #4
 8001114:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2224      	movs	r2, #36	@ 0x24
 800111a:	2100      	movs	r1, #0
 800111c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e024      	b.n	800116c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	210e      	movs	r1, #14
 800112e:	438a      	bics	r2, r1
 8001130:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2101      	movs	r1, #1
 800113e:	438a      	bics	r2, r1
 8001140:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	221c      	movs	r2, #28
 8001148:	401a      	ands	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	2101      	movs	r1, #1
 8001150:	4091      	lsls	r1, r2
 8001152:	000a      	movs	r2, r1
 8001154:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2225      	movs	r2, #37	@ 0x25
 800115a:	2101      	movs	r1, #1
 800115c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2224      	movs	r2, #36	@ 0x24
 8001162:	2100      	movs	r1, #0
 8001164:	5499      	strb	r1, [r3, r2]

    return status;
 8001166:	230f      	movs	r3, #15
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b004      	add	sp, #16
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800117c:	210f      	movs	r1, #15
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2225      	movs	r2, #37	@ 0x25
 8001188:	5c9b      	ldrb	r3, [r3, r2]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d006      	beq.n	800119e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2204      	movs	r2, #4
 8001194:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e02a      	b.n	80011f4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	210e      	movs	r1, #14
 80011aa:	438a      	bics	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2101      	movs	r1, #1
 80011ba:	438a      	bics	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	221c      	movs	r2, #28
 80011c4:	401a      	ands	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	2101      	movs	r1, #1
 80011cc:	4091      	lsls	r1, r2
 80011ce:	000a      	movs	r2, r1
 80011d0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2225      	movs	r2, #37	@ 0x25
 80011d6:	2101      	movs	r1, #1
 80011d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2224      	movs	r2, #36	@ 0x24
 80011de:	2100      	movs	r1, #0
 80011e0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d004      	beq.n	80011f4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	0010      	movs	r0, r2
 80011f2:	4798      	blx	r3
    }
  }
  return status;
 80011f4:	230f      	movs	r3, #15
 80011f6:	18fb      	adds	r3, r7, r3
 80011f8:	781b      	ldrb	r3, [r3, #0]
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b004      	add	sp, #16
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800121a:	e14f      	b.n	80014bc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4091      	lsls	r1, r2
 8001226:	000a      	movs	r2, r1
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d100      	bne.n	8001234 <HAL_GPIO_Init+0x30>
 8001232:	e140      	b.n	80014b6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2203      	movs	r2, #3
 800123a:	4013      	ands	r3, r2
 800123c:	2b01      	cmp	r3, #1
 800123e:	d005      	beq.n	800124c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001248:	2b02      	cmp	r3, #2
 800124a:	d130      	bne.n	80012ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	409a      	lsls	r2, r3
 800125a:	0013      	movs	r3, r2
 800125c:	43da      	mvns	r2, r3
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	409a      	lsls	r2, r3
 800126e:	0013      	movs	r3, r2
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001282:	2201      	movs	r2, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	2201      	movs	r2, #1
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2203      	movs	r2, #3
 80012b4:	4013      	ands	r3, r2
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d017      	beq.n	80012ea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	43da      	mvns	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	409a      	lsls	r2, r3
 80012dc:	0013      	movs	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2203      	movs	r2, #3
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d123      	bne.n	800133e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3208      	adds	r2, #8
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	58d3      	ldr	r3, [r2, r3]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	2207      	movs	r2, #7
 8001308:	4013      	ands	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	691a      	ldr	r2, [r3, #16]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2107      	movs	r1, #7
 8001322:	400b      	ands	r3, r1
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	409a      	lsls	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3208      	adds	r2, #8
 8001338:	0092      	lsls	r2, r2, #2
 800133a:	6939      	ldr	r1, [r7, #16]
 800133c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	2203      	movs	r2, #3
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2203      	movs	r2, #3
 800135c:	401a      	ands	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	409a      	lsls	r2, r3
 8001364:	0013      	movs	r3, r2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	23c0      	movs	r3, #192	@ 0xc0
 8001378:	029b      	lsls	r3, r3, #10
 800137a:	4013      	ands	r3, r2
 800137c:	d100      	bne.n	8001380 <HAL_GPIO_Init+0x17c>
 800137e:	e09a      	b.n	80014b6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001380:	4b54      	ldr	r3, [pc, #336]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001384:	4b53      	ldr	r3, [pc, #332]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 8001386:	2101      	movs	r1, #1
 8001388:	430a      	orrs	r2, r1
 800138a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800138c:	4a52      	ldr	r2, [pc, #328]	@ (80014d8 <HAL_GPIO_Init+0x2d4>)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	589b      	ldr	r3, [r3, r2]
 8001398:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	2203      	movs	r2, #3
 800139e:	4013      	ands	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	220f      	movs	r2, #15
 80013a4:	409a      	lsls	r2, r3
 80013a6:	0013      	movs	r3, r2
 80013a8:	43da      	mvns	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	23a0      	movs	r3, #160	@ 0xa0
 80013b4:	05db      	lsls	r3, r3, #23
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x1ea>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a47      	ldr	r2, [pc, #284]	@ (80014dc <HAL_GPIO_Init+0x2d8>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x1e6>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a46      	ldr	r2, [pc, #280]	@ (80014e0 <HAL_GPIO_Init+0x2dc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x1e2>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a45      	ldr	r2, [pc, #276]	@ (80014e4 <HAL_GPIO_Init+0x2e0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x1de>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a44      	ldr	r2, [pc, #272]	@ (80014e8 <HAL_GPIO_Init+0x2e4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x1da>
 80013da:	2305      	movs	r3, #5
 80013dc:	e008      	b.n	80013f0 <HAL_GPIO_Init+0x1ec>
 80013de:	2306      	movs	r3, #6
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x1ec>
 80013e2:	2303      	movs	r3, #3
 80013e4:	e004      	b.n	80013f0 <HAL_GPIO_Init+0x1ec>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e002      	b.n	80013f0 <HAL_GPIO_Init+0x1ec>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x1ec>
 80013ee:	2300      	movs	r3, #0
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	2103      	movs	r1, #3
 80013f4:	400a      	ands	r2, r1
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4093      	lsls	r3, r2
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001400:	4935      	ldr	r1, [pc, #212]	@ (80014d8 <HAL_GPIO_Init+0x2d4>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140e:	4b37      	ldr	r3, [pc, #220]	@ (80014ec <HAL_GPIO_Init+0x2e8>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43da      	mvns	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	035b      	lsls	r3, r3, #13
 8001426:	4013      	ands	r3, r2
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001432:	4b2e      	ldr	r3, [pc, #184]	@ (80014ec <HAL_GPIO_Init+0x2e8>)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001438:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <HAL_GPIO_Init+0x2e8>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43da      	mvns	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	039b      	lsls	r3, r3, #14
 8001450:	4013      	ands	r3, r2
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800145c:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <HAL_GPIO_Init+0x2e8>)
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001462:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <HAL_GPIO_Init+0x2e8>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	43da      	mvns	r2, r3
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	029b      	lsls	r3, r3, #10
 800147a:	4013      	ands	r3, r2
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001486:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <HAL_GPIO_Init+0x2e8>)
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148c:	4b17      	ldr	r3, [pc, #92]	@ (80014ec <HAL_GPIO_Init+0x2e8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43da      	mvns	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	2380      	movs	r3, #128	@ 0x80
 80014a2:	025b      	lsls	r3, r3, #9
 80014a4:	4013      	ands	r3, r2
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <HAL_GPIO_Init+0x2e8>)
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	40da      	lsrs	r2, r3
 80014c4:	1e13      	subs	r3, r2, #0
 80014c6:	d000      	beq.n	80014ca <HAL_GPIO_Init+0x2c6>
 80014c8:	e6a8      	b.n	800121c <HAL_GPIO_Init+0x18>
  }
}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	46c0      	nop			@ (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b006      	add	sp, #24
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000
 80014dc:	50000400 	.word	0x50000400
 80014e0:	50000800 	.word	0x50000800
 80014e4:	50000c00 	.word	0x50000c00
 80014e8:	50001c00 	.word	0x50001c00
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	000a      	movs	r2, r1
 80014fa:	1cbb      	adds	r3, r7, #2
 80014fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	1cba      	adds	r2, r7, #2
 8001504:	8812      	ldrh	r2, [r2, #0]
 8001506:	4013      	ands	r3, r2
 8001508:	d004      	beq.n	8001514 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800150a:	230f      	movs	r3, #15
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	2201      	movs	r2, #1
 8001510:	701a      	strb	r2, [r3, #0]
 8001512:	e003      	b.n	800151c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001514:	230f      	movs	r3, #15
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800151c:	230f      	movs	r3, #15
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	781b      	ldrb	r3, [r3, #0]
}
 8001522:	0018      	movs	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	b004      	add	sp, #16
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	0008      	movs	r0, r1
 8001534:	0011      	movs	r1, r2
 8001536:	1cbb      	adds	r3, r7, #2
 8001538:	1c02      	adds	r2, r0, #0
 800153a:	801a      	strh	r2, [r3, #0]
 800153c:	1c7b      	adds	r3, r7, #1
 800153e:	1c0a      	adds	r2, r1, #0
 8001540:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001542:	1c7b      	adds	r3, r7, #1
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154a:	1cbb      	adds	r3, r7, #2
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001552:	e003      	b.n	800155c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001554:	1cbb      	adds	r3, r7, #2
 8001556:	881a      	ldrh	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800155c:	46c0      	nop			@ (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b002      	add	sp, #8
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	000a      	movs	r2, r1
 800156e:	1cbb      	adds	r3, r7, #2
 8001570:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001578:	1cbb      	adds	r3, r7, #2
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	041a      	lsls	r2, r3, #16
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43db      	mvns	r3, r3
 8001586:	1cb9      	adds	r1, r7, #2
 8001588:	8809      	ldrh	r1, [r1, #0]
 800158a:	400b      	ands	r3, r1
 800158c:	431a      	orrs	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	619a      	str	r2, [r3, #24]
}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b004      	add	sp, #16
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b5b0      	push	{r4, r5, r7, lr}
 800159e:	b08a      	sub	sp, #40	@ 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f000 fbaf 	bl	8001d0e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b0:	4bcf      	ldr	r3, [pc, #828]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	220c      	movs	r2, #12
 80015b6:	4013      	ands	r3, r2
 80015b8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ba:	4bcd      	ldr	r3, [pc, #820]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	2380      	movs	r3, #128	@ 0x80
 80015c0:	025b      	lsls	r3, r3, #9
 80015c2:	4013      	ands	r3, r2
 80015c4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2201      	movs	r2, #1
 80015cc:	4013      	ands	r3, r2
 80015ce:	d100      	bne.n	80015d2 <HAL_RCC_OscConfig+0x36>
 80015d0:	e07e      	b.n	80016d0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d007      	beq.n	80015e8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	2b0c      	cmp	r3, #12
 80015dc:	d112      	bne.n	8001604 <HAL_RCC_OscConfig+0x68>
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	2380      	movs	r3, #128	@ 0x80
 80015e2:	025b      	lsls	r3, r3, #9
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d10d      	bne.n	8001604 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	4bc1      	ldr	r3, [pc, #772]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	029b      	lsls	r3, r3, #10
 80015f0:	4013      	ands	r3, r2
 80015f2:	d100      	bne.n	80015f6 <HAL_RCC_OscConfig+0x5a>
 80015f4:	e06b      	b.n	80016ce <HAL_RCC_OscConfig+0x132>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d167      	bne.n	80016ce <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	f000 fb85 	bl	8001d0e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	2380      	movs	r3, #128	@ 0x80
 800160a:	025b      	lsls	r3, r3, #9
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_RCC_OscConfig+0x84>
 8001610:	4bb7      	ldr	r3, [pc, #732]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4bb6      	ldr	r3, [pc, #728]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001616:	2180      	movs	r1, #128	@ 0x80
 8001618:	0249      	lsls	r1, r1, #9
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e027      	b.n	8001670 <HAL_RCC_OscConfig+0xd4>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	23a0      	movs	r3, #160	@ 0xa0
 8001626:	02db      	lsls	r3, r3, #11
 8001628:	429a      	cmp	r2, r3
 800162a:	d10e      	bne.n	800164a <HAL_RCC_OscConfig+0xae>
 800162c:	4bb0      	ldr	r3, [pc, #704]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4baf      	ldr	r3, [pc, #700]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001632:	2180      	movs	r1, #128	@ 0x80
 8001634:	02c9      	lsls	r1, r1, #11
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	4bad      	ldr	r3, [pc, #692]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4bac      	ldr	r3, [pc, #688]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001640:	2180      	movs	r1, #128	@ 0x80
 8001642:	0249      	lsls	r1, r1, #9
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e012      	b.n	8001670 <HAL_RCC_OscConfig+0xd4>
 800164a:	4ba9      	ldr	r3, [pc, #676]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4ba8      	ldr	r3, [pc, #672]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001650:	49a8      	ldr	r1, [pc, #672]	@ (80018f4 <HAL_RCC_OscConfig+0x358>)
 8001652:	400a      	ands	r2, r1
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	4ba6      	ldr	r3, [pc, #664]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	2380      	movs	r3, #128	@ 0x80
 800165c:	025b      	lsls	r3, r3, #9
 800165e:	4013      	ands	r3, r2
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4ba2      	ldr	r3, [pc, #648]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4ba1      	ldr	r3, [pc, #644]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 800166a:	49a3      	ldr	r1, [pc, #652]	@ (80018f8 <HAL_RCC_OscConfig+0x35c>)
 800166c:	400a      	ands	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d015      	beq.n	80016a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fc30 	bl	8000edc <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001680:	e009      	b.n	8001696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001682:	f7ff fc2b 	bl	8000edc <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b64      	cmp	r3, #100	@ 0x64
 800168e:	d902      	bls.n	8001696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	f000 fb3c 	bl	8001d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001696:	4b96      	ldr	r3, [pc, #600]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	@ 0x80
 800169c:	029b      	lsls	r3, r3, #10
 800169e:	4013      	ands	r3, r2
 80016a0:	d0ef      	beq.n	8001682 <HAL_RCC_OscConfig+0xe6>
 80016a2:	e015      	b.n	80016d0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc1a 	bl	8000edc <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ae:	f7ff fc15 	bl	8000edc <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b64      	cmp	r3, #100	@ 0x64
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e326      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016c0:	4b8b      	ldr	r3, [pc, #556]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	029b      	lsls	r3, r3, #10
 80016c8:	4013      	ands	r3, r2
 80016ca:	d1f0      	bne.n	80016ae <HAL_RCC_OscConfig+0x112>
 80016cc:	e000      	b.n	80016d0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2202      	movs	r2, #2
 80016d6:	4013      	ands	r3, r2
 80016d8:	d100      	bne.n	80016dc <HAL_RCC_OscConfig+0x140>
 80016da:	e08b      	b.n	80017f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016e2:	6a3b      	ldr	r3, [r7, #32]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	d13e      	bne.n	800176c <HAL_RCC_OscConfig+0x1d0>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d13b      	bne.n	800176c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80016f4:	4b7e      	ldr	r3, [pc, #504]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2204      	movs	r2, #4
 80016fa:	4013      	ands	r3, r2
 80016fc:	d004      	beq.n	8001708 <HAL_RCC_OscConfig+0x16c>
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e302      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001708:	4b79      	ldr	r3, [pc, #484]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a7b      	ldr	r2, [pc, #492]	@ (80018fc <HAL_RCC_OscConfig+0x360>)
 800170e:	4013      	ands	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	691b      	ldr	r3, [r3, #16]
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	4b75      	ldr	r3, [pc, #468]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 800171a:	430a      	orrs	r2, r1
 800171c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800171e:	4b74      	ldr	r3, [pc, #464]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2209      	movs	r2, #9
 8001724:	4393      	bics	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	4b71      	ldr	r3, [pc, #452]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	430a      	orrs	r2, r1
 800172e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001730:	f000 fc40 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001734:	0001      	movs	r1, r0
 8001736:	4b6e      	ldr	r3, [pc, #440]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	091b      	lsrs	r3, r3, #4
 800173c:	220f      	movs	r2, #15
 800173e:	4013      	ands	r3, r2
 8001740:	4a6f      	ldr	r2, [pc, #444]	@ (8001900 <HAL_RCC_OscConfig+0x364>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	000a      	movs	r2, r1
 8001746:	40da      	lsrs	r2, r3
 8001748:	4b6e      	ldr	r3, [pc, #440]	@ (8001904 <HAL_RCC_OscConfig+0x368>)
 800174a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800174c:	4b6e      	ldr	r3, [pc, #440]	@ (8001908 <HAL_RCC_OscConfig+0x36c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2513      	movs	r5, #19
 8001752:	197c      	adds	r4, r7, r5
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff fb7b 	bl	8000e50 <HAL_InitTick>
 800175a:	0003      	movs	r3, r0
 800175c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800175e:	197b      	adds	r3, r7, r5
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d046      	beq.n	80017f4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001766:	197b      	adds	r3, r7, r5
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	e2d0      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d027      	beq.n	80017c2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001772:	4b5f      	ldr	r3, [pc, #380]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2209      	movs	r2, #9
 8001778:	4393      	bics	r3, r2
 800177a:	0019      	movs	r1, r3
 800177c:	4b5c      	ldr	r3, [pc, #368]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	430a      	orrs	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fbaa 	bl	8000edc <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178e:	f7ff fba5 	bl	8000edc <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e2b6      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017a0:	4b53      	ldr	r3, [pc, #332]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2204      	movs	r2, #4
 80017a6:	4013      	ands	r3, r2
 80017a8:	d0f1      	beq.n	800178e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017aa:	4b51      	ldr	r3, [pc, #324]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4a53      	ldr	r2, [pc, #332]	@ (80018fc <HAL_RCC_OscConfig+0x360>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	0019      	movs	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	021a      	lsls	r2, r3, #8
 80017ba:	4b4d      	ldr	r3, [pc, #308]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80017bc:	430a      	orrs	r2, r1
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	e018      	b.n	80017f4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c2:	4b4b      	ldr	r3, [pc, #300]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b4a      	ldr	r3, [pc, #296]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80017c8:	2101      	movs	r1, #1
 80017ca:	438a      	bics	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fb85 	bl	8000edc <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017d8:	f7ff fb80 	bl	8000edc <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e291      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017ea:	4b41      	ldr	r3, [pc, #260]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2204      	movs	r2, #4
 80017f0:	4013      	ands	r3, r2
 80017f2:	d1f1      	bne.n	80017d8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2210      	movs	r2, #16
 80017fa:	4013      	ands	r3, r2
 80017fc:	d100      	bne.n	8001800 <HAL_RCC_OscConfig+0x264>
 80017fe:	e0a1      	b.n	8001944 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d140      	bne.n	8001888 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001806:	4b3a      	ldr	r3, [pc, #232]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	@ 0x80
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x282>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e277      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800181e:	4b34      	ldr	r3, [pc, #208]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4a3a      	ldr	r2, [pc, #232]	@ (800190c <HAL_RCC_OscConfig+0x370>)
 8001824:	4013      	ands	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800182c:	4b30      	ldr	r3, [pc, #192]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 800182e:	430a      	orrs	r2, r1
 8001830:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001832:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	0a19      	lsrs	r1, r3, #8
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	061a      	lsls	r2, r3, #24
 8001840:	4b2b      	ldr	r3, [pc, #172]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	0b5b      	lsrs	r3, r3, #13
 800184c:	3301      	adds	r3, #1
 800184e:	2280      	movs	r2, #128	@ 0x80
 8001850:	0212      	lsls	r2, r2, #8
 8001852:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001854:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	210f      	movs	r1, #15
 800185c:	400b      	ands	r3, r1
 800185e:	4928      	ldr	r1, [pc, #160]	@ (8001900 <HAL_RCC_OscConfig+0x364>)
 8001860:	5ccb      	ldrb	r3, [r1, r3]
 8001862:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001864:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <HAL_RCC_OscConfig+0x368>)
 8001866:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001868:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <HAL_RCC_OscConfig+0x36c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2513      	movs	r5, #19
 800186e:	197c      	adds	r4, r7, r5
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff faed 	bl	8000e50 <HAL_InitTick>
 8001876:	0003      	movs	r3, r0
 8001878:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800187a:	197b      	adds	r3, r7, r5
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d060      	beq.n	8001944 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001882:	197b      	adds	r3, r7, r5
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	e242      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d03f      	beq.n	8001910 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001890:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 8001896:	2180      	movs	r1, #128	@ 0x80
 8001898:	0049      	lsls	r1, r1, #1
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff fb1d 	bl	8000edc <HAL_GetTick>
 80018a2:	0003      	movs	r3, r0
 80018a4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a8:	f7ff fb18 	bl	8000edc <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e229      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	2380      	movs	r3, #128	@ 0x80
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4013      	ands	r3, r2
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a10      	ldr	r2, [pc, #64]	@ (800190c <HAL_RCC_OscConfig+0x370>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018da:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	0a19      	lsrs	r1, r3, #8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	061a      	lsls	r2, r3, #24
 80018e8:	4b01      	ldr	r3, [pc, #4]	@ (80018f0 <HAL_RCC_OscConfig+0x354>)
 80018ea:	430a      	orrs	r2, r1
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	e029      	b.n	8001944 <HAL_RCC_OscConfig+0x3a8>
 80018f0:	40021000 	.word	0x40021000
 80018f4:	fffeffff 	.word	0xfffeffff
 80018f8:	fffbffff 	.word	0xfffbffff
 80018fc:	ffffe0ff 	.word	0xffffe0ff
 8001900:	08004a70 	.word	0x08004a70
 8001904:	20000210 	.word	0x20000210
 8001908:	20000214 	.word	0x20000214
 800190c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001910:	4bbd      	ldr	r3, [pc, #756]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4bbc      	ldr	r3, [pc, #752]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001916:	49bd      	ldr	r1, [pc, #756]	@ (8001c0c <HAL_RCC_OscConfig+0x670>)
 8001918:	400a      	ands	r2, r1
 800191a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fade 	bl	8000edc <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001926:	f7ff fad9 	bl	8000edc <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e1ea      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001938:	4bb3      	ldr	r3, [pc, #716]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2380      	movs	r3, #128	@ 0x80
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4013      	ands	r3, r2
 8001942:	d1f0      	bne.n	8001926 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2208      	movs	r2, #8
 800194a:	4013      	ands	r3, r2
 800194c:	d036      	beq.n	80019bc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d019      	beq.n	800198a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001956:	4bac      	ldr	r3, [pc, #688]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001958:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800195a:	4bab      	ldr	r3, [pc, #684]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 800195c:	2101      	movs	r1, #1
 800195e:	430a      	orrs	r2, r1
 8001960:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001962:	f7ff fabb 	bl	8000edc <HAL_GetTick>
 8001966:	0003      	movs	r3, r0
 8001968:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff fab6 	bl	8000edc <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1c7      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800197e:	4ba2      	ldr	r3, [pc, #648]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001982:	2202      	movs	r2, #2
 8001984:	4013      	ands	r3, r2
 8001986:	d0f1      	beq.n	800196c <HAL_RCC_OscConfig+0x3d0>
 8001988:	e018      	b.n	80019bc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198a:	4b9f      	ldr	r3, [pc, #636]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 800198c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800198e:	4b9e      	ldr	r3, [pc, #632]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001990:	2101      	movs	r1, #1
 8001992:	438a      	bics	r2, r1
 8001994:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff faa1 	bl	8000edc <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a0:	f7ff fa9c 	bl	8000edc <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e1ad      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019b2:	4b95      	ldr	r3, [pc, #596]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 80019b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	d1f1      	bne.n	80019a0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2204      	movs	r2, #4
 80019c2:	4013      	ands	r3, r2
 80019c4:	d100      	bne.n	80019c8 <HAL_RCC_OscConfig+0x42c>
 80019c6:	e0ae      	b.n	8001b26 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c8:	2027      	movs	r0, #39	@ 0x27
 80019ca:	183b      	adds	r3, r7, r0
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d0:	4b8d      	ldr	r3, [pc, #564]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 80019d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	055b      	lsls	r3, r3, #21
 80019d8:	4013      	ands	r3, r2
 80019da:	d109      	bne.n	80019f0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019dc:	4b8a      	ldr	r3, [pc, #552]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 80019de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80019e0:	4b89      	ldr	r3, [pc, #548]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 80019e2:	2180      	movs	r1, #128	@ 0x80
 80019e4:	0549      	lsls	r1, r1, #21
 80019e6:	430a      	orrs	r2, r1
 80019e8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80019ea:	183b      	adds	r3, r7, r0
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	4b87      	ldr	r3, [pc, #540]	@ (8001c10 <HAL_RCC_OscConfig+0x674>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4013      	ands	r3, r2
 80019fa:	d11a      	bne.n	8001a32 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fc:	4b84      	ldr	r3, [pc, #528]	@ (8001c10 <HAL_RCC_OscConfig+0x674>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b83      	ldr	r3, [pc, #524]	@ (8001c10 <HAL_RCC_OscConfig+0x674>)
 8001a02:	2180      	movs	r1, #128	@ 0x80
 8001a04:	0049      	lsls	r1, r1, #1
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0a:	f7ff fa67 	bl	8000edc <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a14:	f7ff fa62 	bl	8000edc <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	@ 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e173      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4b7a      	ldr	r3, [pc, #488]	@ (8001c10 <HAL_RCC_OscConfig+0x674>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	2380      	movs	r3, #128	@ 0x80
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	2380      	movs	r3, #128	@ 0x80
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_OscConfig+0x4b2>
 8001a3e:	4b72      	ldr	r3, [pc, #456]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001a40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a42:	4b71      	ldr	r3, [pc, #452]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001a44:	2180      	movs	r1, #128	@ 0x80
 8001a46:	0049      	lsls	r1, r1, #1
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a4c:	e031      	b.n	8001ab2 <HAL_RCC_OscConfig+0x516>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4d4>
 8001a56:	4b6c      	ldr	r3, [pc, #432]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001a58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a5a:	4b6b      	ldr	r3, [pc, #428]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001a5c:	496b      	ldr	r1, [pc, #428]	@ (8001c0c <HAL_RCC_OscConfig+0x670>)
 8001a5e:	400a      	ands	r2, r1
 8001a60:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a62:	4b69      	ldr	r3, [pc, #420]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001a64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a66:	4b68      	ldr	r3, [pc, #416]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001a68:	496a      	ldr	r1, [pc, #424]	@ (8001c14 <HAL_RCC_OscConfig+0x678>)
 8001a6a:	400a      	ands	r2, r1
 8001a6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a6e:	e020      	b.n	8001ab2 <HAL_RCC_OscConfig+0x516>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	23a0      	movs	r3, #160	@ 0xa0
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d10e      	bne.n	8001a9a <HAL_RCC_OscConfig+0x4fe>
 8001a7c:	4b62      	ldr	r3, [pc, #392]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001a7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a80:	4b61      	ldr	r3, [pc, #388]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001a82:	2180      	movs	r1, #128	@ 0x80
 8001a84:	00c9      	lsls	r1, r1, #3
 8001a86:	430a      	orrs	r2, r1
 8001a88:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001a8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a8e:	4b5e      	ldr	r3, [pc, #376]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001a90:	2180      	movs	r1, #128	@ 0x80
 8001a92:	0049      	lsls	r1, r1, #1
 8001a94:	430a      	orrs	r2, r1
 8001a96:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a98:	e00b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x516>
 8001a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001a9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001aa0:	495a      	ldr	r1, [pc, #360]	@ (8001c0c <HAL_RCC_OscConfig+0x670>)
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001aa6:	4b58      	ldr	r3, [pc, #352]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001aa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001aaa:	4b57      	ldr	r3, [pc, #348]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001aac:	4959      	ldr	r1, [pc, #356]	@ (8001c14 <HAL_RCC_OscConfig+0x678>)
 8001aae:	400a      	ands	r2, r1
 8001ab0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d015      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fa0f 	bl	8000edc <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ac2:	e009      	b.n	8001ad8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fa0a 	bl	8000edc <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	4a52      	ldr	r2, [pc, #328]	@ (8001c18 <HAL_RCC_OscConfig+0x67c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e11a      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ad8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001ada:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d0ef      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x528>
 8001ae4:	e014      	b.n	8001b10 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff f9f9 	bl	8000edc <HAL_GetTick>
 8001aea:	0003      	movs	r3, r0
 8001aec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001aee:	e009      	b.n	8001b04 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af0:	f7ff f9f4 	bl	8000edc <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	4a47      	ldr	r2, [pc, #284]	@ (8001c18 <HAL_RCC_OscConfig+0x67c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e104      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b04:	4b40      	ldr	r3, [pc, #256]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001b06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d1ef      	bne.n	8001af0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b10:	2327      	movs	r3, #39	@ 0x27
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d105      	bne.n	8001b26 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001b1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001b20:	493e      	ldr	r1, [pc, #248]	@ (8001c1c <HAL_RCC_OscConfig+0x680>)
 8001b22:	400a      	ands	r2, r1
 8001b24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d049      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d026      	beq.n	8001b86 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b38:	4b33      	ldr	r3, [pc, #204]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	4b32      	ldr	r3, [pc, #200]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001b3e:	2101      	movs	r1, #1
 8001b40:	430a      	orrs	r2, r1
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	4b30      	ldr	r3, [pc, #192]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001b46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b48:	4b2f      	ldr	r3, [pc, #188]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b50:	4b33      	ldr	r3, [pc, #204]	@ (8001c20 <HAL_RCC_OscConfig+0x684>)
 8001b52:	6a1a      	ldr	r2, [r3, #32]
 8001b54:	4b32      	ldr	r3, [pc, #200]	@ (8001c20 <HAL_RCC_OscConfig+0x684>)
 8001b56:	2180      	movs	r1, #128	@ 0x80
 8001b58:	0189      	lsls	r1, r1, #6
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f9bd 	bl	8000edc <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b68:	f7ff f9b8 	bl	8000edc <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0c9      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b7a:	4b23      	ldr	r3, [pc, #140]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d0f1      	beq.n	8001b68 <HAL_RCC_OscConfig+0x5cc>
 8001b84:	e01e      	b.n	8001bc4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b86:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	438a      	bics	r2, r1
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	4b23      	ldr	r3, [pc, #140]	@ (8001c20 <HAL_RCC_OscConfig+0x684>)
 8001b94:	6a1a      	ldr	r2, [r3, #32]
 8001b96:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <HAL_RCC_OscConfig+0x684>)
 8001b98:	4922      	ldr	r1, [pc, #136]	@ (8001c24 <HAL_RCC_OscConfig+0x688>)
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f99d 	bl	8000edc <HAL_GetTick>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ba8:	f7ff f998 	bl	8000edc <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e0a9      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bba:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d1f1      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d100      	bne.n	8001bce <HAL_RCC_OscConfig+0x632>
 8001bcc:	e09e      	b.n	8001d0c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	d100      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x63a>
 8001bd4:	e077      	b.n	8001cc6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d158      	bne.n	8001c90 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_RCC_OscConfig+0x66c>)
 8001be4:	4910      	ldr	r1, [pc, #64]	@ (8001c28 <HAL_RCC_OscConfig+0x68c>)
 8001be6:	400a      	ands	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7ff f977 	bl	8000edc <HAL_GetTick>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bf2:	e01b      	b.n	8001c2c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff f972 	bl	8000edc <HAL_GetTick>
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d914      	bls.n	8001c2c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e083      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	fffffeff 	.word	0xfffffeff
 8001c10:	40007000 	.word	0x40007000
 8001c14:	fffffbff 	.word	0xfffffbff
 8001c18:	00001388 	.word	0x00001388
 8001c1c:	efffffff 	.word	0xefffffff
 8001c20:	40010000 	.word	0x40010000
 8001c24:	ffffdfff 	.word	0xffffdfff
 8001c28:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d18 <HAL_RCC_OscConfig+0x77c>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	049b      	lsls	r3, r3, #18
 8001c34:	4013      	ands	r3, r2
 8001c36:	d1dd      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c38:	4b37      	ldr	r3, [pc, #220]	@ (8001d18 <HAL_RCC_OscConfig+0x77c>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4a37      	ldr	r2, [pc, #220]	@ (8001d1c <HAL_RCC_OscConfig+0x780>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c50:	431a      	orrs	r2, r3
 8001c52:	4b31      	ldr	r3, [pc, #196]	@ (8001d18 <HAL_RCC_OscConfig+0x77c>)
 8001c54:	430a      	orrs	r2, r1
 8001c56:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c58:	4b2f      	ldr	r3, [pc, #188]	@ (8001d18 <HAL_RCC_OscConfig+0x77c>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d18 <HAL_RCC_OscConfig+0x77c>)
 8001c5e:	2180      	movs	r1, #128	@ 0x80
 8001c60:	0449      	lsls	r1, r1, #17
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff f939 	bl	8000edc <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f934 	bl	8000edc <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e045      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c82:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <HAL_RCC_OscConfig+0x77c>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	049b      	lsls	r3, r3, #18
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x6d4>
 8001c8e:	e03d      	b.n	8001d0c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c90:	4b21      	ldr	r3, [pc, #132]	@ (8001d18 <HAL_RCC_OscConfig+0x77c>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <HAL_RCC_OscConfig+0x77c>)
 8001c96:	4922      	ldr	r1, [pc, #136]	@ (8001d20 <HAL_RCC_OscConfig+0x784>)
 8001c98:	400a      	ands	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f91e 	bl	8000edc <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7ff f919 	bl	8000edc <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e02a      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cb8:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <HAL_RCC_OscConfig+0x77c>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	049b      	lsls	r3, r3, #18
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x70a>
 8001cc4:	e022      	b.n	8001d0c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e01d      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <HAL_RCC_OscConfig+0x77c>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	2380      	movs	r3, #128	@ 0x80
 8001cdc:	025b      	lsls	r3, r3, #9
 8001cde:	401a      	ands	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d10f      	bne.n	8001d08 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ce8:	69fa      	ldr	r2, [r7, #28]
 8001cea:	23f0      	movs	r3, #240	@ 0xf0
 8001cec:	039b      	lsls	r3, r3, #14
 8001cee:	401a      	ands	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d107      	bne.n	8001d08 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	23c0      	movs	r3, #192	@ 0xc0
 8001cfc:	041b      	lsls	r3, r3, #16
 8001cfe:	401a      	ands	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	b00a      	add	sp, #40	@ 0x28
 8001d14:	bdb0      	pop	{r4, r5, r7, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	ff02ffff 	.word	0xff02ffff
 8001d20:	feffffff 	.word	0xfeffffff

08001d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b5b0      	push	{r4, r5, r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e128      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b96      	ldr	r3, [pc, #600]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4013      	ands	r3, r2
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d91e      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b93      	ldr	r3, [pc, #588]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	4393      	bics	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	4b90      	ldr	r3, [pc, #576]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d58:	f7ff f8c0 	bl	8000edc <HAL_GetTick>
 8001d5c:	0003      	movs	r3, r0
 8001d5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d60:	e009      	b.n	8001d76 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d62:	f7ff f8bb 	bl	8000edc <HAL_GetTick>
 8001d66:	0002      	movs	r2, r0
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	4a8a      	ldr	r2, [pc, #552]	@ (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e109      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b87      	ldr	r3, [pc, #540]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d1ee      	bne.n	8001d62 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d009      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8e:	4b83      	ldr	r3, [pc, #524]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	22f0      	movs	r2, #240	@ 0xf0
 8001d94:	4393      	bics	r3, r2
 8001d96:	0019      	movs	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	4b7f      	ldr	r3, [pc, #508]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2201      	movs	r2, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	d100      	bne.n	8001dae <HAL_RCC_ClockConfig+0x8a>
 8001dac:	e089      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001db6:	4b79      	ldr	r3, [pc, #484]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d120      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0e1      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dce:	4b73      	ldr	r3, [pc, #460]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	049b      	lsls	r3, r3, #18
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d114      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e0d5      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d106      	bne.n	8001df4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001de6:	4b6d      	ldr	r3, [pc, #436]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2204      	movs	r2, #4
 8001dec:	4013      	ands	r3, r2
 8001dee:	d109      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0ca      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001df4:	4b69      	ldr	r3, [pc, #420]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0c2      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e04:	4b65      	ldr	r3, [pc, #404]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4b62      	ldr	r3, [pc, #392]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff f860 	bl	8000edc <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d111      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e28:	e009      	b.n	8001e3e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2a:	f7ff f857 	bl	8000edc <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4a58      	ldr	r2, [pc, #352]	@ (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e0a5      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e3e:	4b57      	ldr	r3, [pc, #348]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	220c      	movs	r2, #12
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d1ef      	bne.n	8001e2a <HAL_RCC_ClockConfig+0x106>
 8001e4a:	e03a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d111      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e54:	e009      	b.n	8001e6a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e56:	f7ff f841 	bl	8000edc <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4a4d      	ldr	r2, [pc, #308]	@ (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e08f      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e6a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	220c      	movs	r2, #12
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d1ef      	bne.n	8001e56 <HAL_RCC_ClockConfig+0x132>
 8001e76:	e024      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e80:	e009      	b.n	8001e96 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e82:	f7ff f82b 	bl	8000edc <HAL_GetTick>
 8001e86:	0002      	movs	r2, r0
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	4a42      	ldr	r2, [pc, #264]	@ (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e079      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e96:	4b41      	ldr	r3, [pc, #260]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d1ef      	bne.n	8001e82 <HAL_RCC_ClockConfig+0x15e>
 8001ea2:	e00e      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea4:	f7ff f81a 	bl	8000edc <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	4a3a      	ldr	r2, [pc, #232]	@ (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e068      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001eb8:	4b38      	ldr	r3, [pc, #224]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec2:	4b34      	ldr	r3, [pc, #208]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4013      	ands	r3, r2
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d21e      	bcs.n	8001f0e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed0:	4b30      	ldr	r3, [pc, #192]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4393      	bics	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	4b2e      	ldr	r3, [pc, #184]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ee2:	f7fe fffb 	bl	8000edc <HAL_GetTick>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	e009      	b.n	8001f00 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eec:	f7fe fff6 	bl	8000edc <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	4a28      	ldr	r2, [pc, #160]	@ (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e044      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f00:	4b24      	ldr	r3, [pc, #144]	@ (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2201      	movs	r2, #1
 8001f06:	4013      	ands	r3, r2
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d1ee      	bne.n	8001eec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2204      	movs	r2, #4
 8001f14:	4013      	ands	r3, r2
 8001f16:	d009      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f18:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4a20      	ldr	r2, [pc, #128]	@ (8001fa0 <HAL_RCC_ClockConfig+0x27c>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	4b1d      	ldr	r3, [pc, #116]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2208      	movs	r2, #8
 8001f32:	4013      	ands	r3, r2
 8001f34:	d00a      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f36:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa4 <HAL_RCC_ClockConfig+0x280>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	0019      	movs	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	00da      	lsls	r2, r3, #3
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f4c:	f000 f832 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f50:	0001      	movs	r1, r0
 8001f52:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <HAL_RCC_ClockConfig+0x278>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	220f      	movs	r2, #15
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	4a12      	ldr	r2, [pc, #72]	@ (8001fa8 <HAL_RCC_ClockConfig+0x284>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	000a      	movs	r2, r1
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <HAL_RCC_ClockConfig+0x288>)
 8001f66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <HAL_RCC_ClockConfig+0x28c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	250b      	movs	r5, #11
 8001f6e:	197c      	adds	r4, r7, r5
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7fe ff6d 	bl	8000e50 <HAL_InitTick>
 8001f76:	0003      	movs	r3, r0
 8001f78:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f7a:	197b      	adds	r3, r7, r5
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f82:	197b      	adds	r3, r7, r5
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b004      	add	sp, #16
 8001f90:	bdb0      	pop	{r4, r5, r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	40022000 	.word	0x40022000
 8001f98:	00001388 	.word	0x00001388
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	fffff8ff 	.word	0xfffff8ff
 8001fa4:	ffffc7ff 	.word	0xffffc7ff
 8001fa8:	08004a70 	.word	0x08004a70
 8001fac:	20000210 	.word	0x20000210
 8001fb0:	20000214 	.word	0x20000214

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001fba:	4b3c      	ldr	r3, [pc, #240]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b0c      	cmp	r3, #12
 8001fc8:	d013      	beq.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x3e>
 8001fca:	d85c      	bhi.n	8002086 <HAL_RCC_GetSysClockFreq+0xd2>
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d002      	beq.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x22>
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d00b      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x38>
 8001fd4:	e057      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001fd6:	4b35      	ldr	r3, [pc, #212]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2210      	movs	r2, #16
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d002      	beq.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001fe0:	4b33      	ldr	r3, [pc, #204]	@ (80020b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fe2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001fe4:	e05d      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001fe6:	4b33      	ldr	r3, [pc, #204]	@ (80020b4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fe8:	613b      	str	r3, [r7, #16]
      break;
 8001fea:	e05a      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fec:	4b32      	ldr	r3, [pc, #200]	@ (80020b8 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fee:	613b      	str	r3, [r7, #16]
      break;
 8001ff0:	e057      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	0c9b      	lsrs	r3, r3, #18
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	4a30      	ldr	r2, [pc, #192]	@ (80020bc <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffc:	5cd3      	ldrb	r3, [r2, r3]
 8001ffe:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	0d9b      	lsrs	r3, r3, #22
 8002004:	2203      	movs	r2, #3
 8002006:	4013      	ands	r3, r2
 8002008:	3301      	adds	r3, #1
 800200a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800200c:	4b27      	ldr	r3, [pc, #156]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	2380      	movs	r3, #128	@ 0x80
 8002012:	025b      	lsls	r3, r3, #9
 8002014:	4013      	ands	r3, r2
 8002016:	d00f      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002018:	68b9      	ldr	r1, [r7, #8]
 800201a:	000a      	movs	r2, r1
 800201c:	0152      	lsls	r2, r2, #5
 800201e:	1a52      	subs	r2, r2, r1
 8002020:	0193      	lsls	r3, r2, #6
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	185b      	adds	r3, r3, r1
 8002028:	025b      	lsls	r3, r3, #9
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	0018      	movs	r0, r3
 800202e:	f7fe f887 	bl	8000140 <__udivsi3>
 8002032:	0003      	movs	r3, r0
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e023      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002038:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xf8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2210      	movs	r2, #16
 800203e:	4013      	ands	r3, r2
 8002040:	d00f      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	000a      	movs	r2, r1
 8002046:	0152      	lsls	r2, r2, #5
 8002048:	1a52      	subs	r2, r2, r1
 800204a:	0193      	lsls	r3, r2, #6
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	185b      	adds	r3, r3, r1
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	0018      	movs	r0, r3
 8002058:	f7fe f872 	bl	8000140 <__udivsi3>
 800205c:	0003      	movs	r3, r0
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e00e      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	000a      	movs	r2, r1
 8002066:	0152      	lsls	r2, r2, #5
 8002068:	1a52      	subs	r2, r2, r1
 800206a:	0193      	lsls	r3, r2, #6
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	185b      	adds	r3, r3, r1
 8002072:	029b      	lsls	r3, r3, #10
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	0018      	movs	r0, r3
 8002078:	f7fe f862 	bl	8000140 <__udivsi3>
 800207c:	0003      	movs	r3, r0
 800207e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	613b      	str	r3, [r7, #16]
      break;
 8002084:	e00d      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <HAL_RCC_GetSysClockFreq+0xf8>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	0b5b      	lsrs	r3, r3, #13
 800208c:	2207      	movs	r2, #7
 800208e:	4013      	ands	r3, r2
 8002090:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	2280      	movs	r2, #128	@ 0x80
 8002098:	0212      	lsls	r2, r2, #8
 800209a:	409a      	lsls	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
      break;
 80020a0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020a2:	693b      	ldr	r3, [r7, #16]
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b006      	add	sp, #24
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	003d0900 	.word	0x003d0900
 80020b4:	00f42400 	.word	0x00f42400
 80020b8:	007a1200 	.word	0x007a1200
 80020bc:	08004a88 	.word	0x08004a88

080020c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c4:	4b02      	ldr	r3, [pc, #8]	@ (80020d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80020c6:	681b      	ldr	r3, [r3, #0]
}
 80020c8:	0018      	movs	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			@ (mov r8, r8)
 80020d0:	20000210 	.word	0x20000210

080020d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d8:	f7ff fff2 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 80020dc:	0001      	movs	r1, r0
 80020de:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	2207      	movs	r2, #7
 80020e6:	4013      	ands	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	40d9      	lsrs	r1, r3
 80020ee:	000b      	movs	r3, r1
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	40021000 	.word	0x40021000
 80020fc:	08004a80 	.word	0x08004a80

08002100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002104:	f7ff ffdc 	bl	80020c0 <HAL_RCC_GetHCLKFreq>
 8002108:	0001      	movs	r1, r0
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	0adb      	lsrs	r3, r3, #11
 8002110:	2207      	movs	r2, #7
 8002112:	4013      	ands	r3, r2
 8002114:	4a04      	ldr	r2, [pc, #16]	@ (8002128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002116:	5cd3      	ldrb	r3, [r2, r3]
 8002118:	40d9      	lsrs	r1, r3
 800211a:	000b      	movs	r3, r1
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			@ (mov r8, r8)
 8002124:	40021000 	.word	0x40021000
 8002128:	08004a80 	.word	0x08004a80

0800212c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002134:	2317      	movs	r3, #23
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2220      	movs	r2, #32
 8002142:	4013      	ands	r3, r2
 8002144:	d106      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	4013      	ands	r3, r2
 8002150:	d100      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002152:	e104      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002154:	4bb1      	ldr	r3, [pc, #708]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002156:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002158:	2380      	movs	r3, #128	@ 0x80
 800215a:	055b      	lsls	r3, r3, #21
 800215c:	4013      	ands	r3, r2
 800215e:	d10a      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002160:	4bae      	ldr	r3, [pc, #696]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002164:	4bad      	ldr	r3, [pc, #692]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002166:	2180      	movs	r1, #128	@ 0x80
 8002168:	0549      	lsls	r1, r1, #21
 800216a:	430a      	orrs	r2, r1
 800216c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800216e:	2317      	movs	r3, #23
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4baa      	ldr	r3, [pc, #680]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	2380      	movs	r3, #128	@ 0x80
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4013      	ands	r3, r2
 8002180:	d11a      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002182:	4ba7      	ldr	r3, [pc, #668]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4ba6      	ldr	r3, [pc, #664]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002188:	2180      	movs	r1, #128	@ 0x80
 800218a:	0049      	lsls	r1, r1, #1
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002190:	f7fe fea4 	bl	8000edc <HAL_GetTick>
 8002194:	0003      	movs	r3, r0
 8002196:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7fe fe9f 	bl	8000edc <HAL_GetTick>
 800219e:	0002      	movs	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b64      	cmp	r3, #100	@ 0x64
 80021a6:	d901      	bls.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e133      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	4b9c      	ldr	r3, [pc, #624]	@ (8002420 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	2380      	movs	r3, #128	@ 0x80
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4013      	ands	r3, r2
 80021b6:	d0f0      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80021b8:	4b98      	ldr	r3, [pc, #608]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	23c0      	movs	r3, #192	@ 0xc0
 80021be:	039b      	lsls	r3, r3, #14
 80021c0:	4013      	ands	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	23c0      	movs	r3, #192	@ 0xc0
 80021ca:	039b      	lsls	r3, r3, #14
 80021cc:	4013      	ands	r3, r2
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d107      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	23c0      	movs	r3, #192	@ 0xc0
 80021da:	039b      	lsls	r3, r3, #14
 80021dc:	4013      	ands	r3, r2
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d013      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	23c0      	movs	r3, #192	@ 0xc0
 80021ea:	029b      	lsls	r3, r3, #10
 80021ec:	401a      	ands	r2, r3
 80021ee:	23c0      	movs	r3, #192	@ 0xc0
 80021f0:	029b      	lsls	r3, r3, #10
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d10a      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80021f6:	4b89      	ldr	r3, [pc, #548]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	029b      	lsls	r3, r3, #10
 80021fe:	401a      	ands	r2, r3
 8002200:	2380      	movs	r3, #128	@ 0x80
 8002202:	029b      	lsls	r3, r3, #10
 8002204:	429a      	cmp	r2, r3
 8002206:	d101      	bne.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e103      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800220c:	4b83      	ldr	r3, [pc, #524]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800220e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002210:	23c0      	movs	r3, #192	@ 0xc0
 8002212:	029b      	lsls	r3, r3, #10
 8002214:	4013      	ands	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d049      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	23c0      	movs	r3, #192	@ 0xc0
 8002224:	029b      	lsls	r3, r3, #10
 8002226:	4013      	ands	r3, r2
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	429a      	cmp	r2, r3
 800222c:	d004      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2220      	movs	r2, #32
 8002234:	4013      	ands	r3, r2
 8002236:	d10d      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	23c0      	movs	r3, #192	@ 0xc0
 800223e:	029b      	lsls	r3, r3, #10
 8002240:	4013      	ands	r3, r2
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d034      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2380      	movs	r3, #128	@ 0x80
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	4013      	ands	r3, r2
 8002252:	d02e      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002254:	4b71      	ldr	r3, [pc, #452]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002258:	4a72      	ldr	r2, [pc, #456]	@ (8002424 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800225a:	4013      	ands	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800225e:	4b6f      	ldr	r3, [pc, #444]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002260:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002262:	4b6e      	ldr	r3, [pc, #440]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002264:	2180      	movs	r1, #128	@ 0x80
 8002266:	0309      	lsls	r1, r1, #12
 8002268:	430a      	orrs	r2, r1
 800226a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800226c:	4b6b      	ldr	r3, [pc, #428]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800226e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002270:	4b6a      	ldr	r3, [pc, #424]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002272:	496d      	ldr	r1, [pc, #436]	@ (8002428 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002274:	400a      	ands	r2, r1
 8002276:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002278:	4b68      	ldr	r3, [pc, #416]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4013      	ands	r3, r2
 8002286:	d014      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7fe fe28 	bl	8000edc <HAL_GetTick>
 800228c:	0003      	movs	r3, r0
 800228e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002290:	e009      	b.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7fe fe23 	bl	8000edc <HAL_GetTick>
 8002296:	0002      	movs	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	4a63      	ldr	r2, [pc, #396]	@ (800242c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e0b6      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022a6:	4b5d      	ldr	r3, [pc, #372]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022aa:	2380      	movs	r3, #128	@ 0x80
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d0ef      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2380      	movs	r3, #128	@ 0x80
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	4013      	ands	r3, r2
 80022bc:	d01f      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	23c0      	movs	r3, #192	@ 0xc0
 80022c4:	029b      	lsls	r3, r3, #10
 80022c6:	401a      	ands	r2, r3
 80022c8:	23c0      	movs	r3, #192	@ 0xc0
 80022ca:	029b      	lsls	r3, r3, #10
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d10c      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80022d0:	4b52      	ldr	r3, [pc, #328]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a56      	ldr	r2, [pc, #344]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	23c0      	movs	r3, #192	@ 0xc0
 80022e0:	039b      	lsls	r3, r3, #14
 80022e2:	401a      	ands	r2, r3
 80022e4:	4b4d      	ldr	r3, [pc, #308]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022e6:	430a      	orrs	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	4b4c      	ldr	r3, [pc, #304]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	23c0      	movs	r3, #192	@ 0xc0
 80022f4:	029b      	lsls	r3, r3, #10
 80022f6:	401a      	ands	r2, r3
 80022f8:	4b48      	ldr	r3, [pc, #288]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022fa:	430a      	orrs	r2, r1
 80022fc:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2220      	movs	r2, #32
 8002304:	4013      	ands	r3, r2
 8002306:	d01f      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	23c0      	movs	r3, #192	@ 0xc0
 800230e:	029b      	lsls	r3, r3, #10
 8002310:	401a      	ands	r2, r3
 8002312:	23c0      	movs	r3, #192	@ 0xc0
 8002314:	029b      	lsls	r3, r3, #10
 8002316:	429a      	cmp	r2, r3
 8002318:	d10c      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800231a:	4b40      	ldr	r3, [pc, #256]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a44      	ldr	r2, [pc, #272]	@ (8002430 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002320:	4013      	ands	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	23c0      	movs	r3, #192	@ 0xc0
 800232a:	039b      	lsls	r3, r3, #14
 800232c:	401a      	ands	r2, r3
 800232e:	4b3b      	ldr	r3, [pc, #236]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	4b39      	ldr	r3, [pc, #228]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002336:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	23c0      	movs	r3, #192	@ 0xc0
 800233e:	029b      	lsls	r3, r3, #10
 8002340:	401a      	ands	r2, r3
 8002342:	4b36      	ldr	r3, [pc, #216]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002344:	430a      	orrs	r2, r1
 8002346:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002348:	2317      	movs	r3, #23
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d105      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002352:	4b32      	ldr	r3, [pc, #200]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002356:	4b31      	ldr	r3, [pc, #196]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002358:	4936      	ldr	r1, [pc, #216]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800235a:	400a      	ands	r2, r1
 800235c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2201      	movs	r2, #1
 8002364:	4013      	ands	r3, r2
 8002366:	d009      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002368:	4b2c      	ldr	r3, [pc, #176]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800236a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236c:	2203      	movs	r2, #3
 800236e:	4393      	bics	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	4b29      	ldr	r3, [pc, #164]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002378:	430a      	orrs	r2, r1
 800237a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2202      	movs	r2, #2
 8002382:	4013      	ands	r3, r2
 8002384:	d009      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002386:	4b25      	ldr	r3, [pc, #148]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238a:	220c      	movs	r2, #12
 800238c:	4393      	bics	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002396:	430a      	orrs	r2, r1
 8002398:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2204      	movs	r2, #4
 80023a0:	4013      	ands	r3, r2
 80023a2:	d009      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023a4:	4b1d      	ldr	r3, [pc, #116]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a8:	4a23      	ldr	r2, [pc, #140]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695a      	ldr	r2, [r3, #20]
 80023b2:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023b4:	430a      	orrs	r2, r1
 80023b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2208      	movs	r2, #8
 80023be:	4013      	ands	r3, r2
 80023c0:	d009      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023c2:	4b16      	ldr	r3, [pc, #88]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c6:	4a1d      	ldr	r2, [pc, #116]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023c8:	4013      	ands	r3, r2
 80023ca:	0019      	movs	r1, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	4b12      	ldr	r3, [pc, #72]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2240      	movs	r2, #64	@ 0x40
 80023dc:	4013      	ands	r3, r2
 80023de:	d009      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023e0:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e4:	4a16      	ldr	r2, [pc, #88]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	0019      	movs	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1a      	ldr	r2, [r3, #32]
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023f0:	430a      	orrs	r2, r1
 80023f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2280      	movs	r2, #128	@ 0x80
 80023fa:	4013      	ands	r3, r2
 80023fc:	d009      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80023fe:	4b07      	ldr	r3, [pc, #28]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002402:	4a10      	ldr	r2, [pc, #64]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002404:	4013      	ands	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	4b03      	ldr	r3, [pc, #12]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800240e:	430a      	orrs	r2, r1
 8002410:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	b006      	add	sp, #24
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	40007000 	.word	0x40007000
 8002424:	fffcffff 	.word	0xfffcffff
 8002428:	fff7ffff 	.word	0xfff7ffff
 800242c:	00001388 	.word	0x00001388
 8002430:	ffcfffff 	.word	0xffcfffff
 8002434:	efffffff 	.word	0xefffffff
 8002438:	fffff3ff 	.word	0xfffff3ff
 800243c:	ffffcfff 	.word	0xffffcfff
 8002440:	fbffffff 	.word	0xfbffffff
 8002444:	fff3ffff 	.word	0xfff3ffff

08002448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e032      	b.n	80024c0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2239      	movs	r2, #57	@ 0x39
 800245e:	5c9b      	ldrb	r3, [r3, r2]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d107      	bne.n	8002476 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2238      	movs	r2, #56	@ 0x38
 800246a:	2100      	movs	r1, #0
 800246c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	0018      	movs	r0, r3
 8002472:	f7fe fbc9 	bl	8000c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2239      	movs	r2, #57	@ 0x39
 800247a:	2102      	movs	r1, #2
 800247c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	0019      	movs	r1, r3
 8002488:	0010      	movs	r0, r2
 800248a:	f000 f955 	bl	8002738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	223e      	movs	r2, #62	@ 0x3e
 8002492:	2101      	movs	r1, #1
 8002494:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	223a      	movs	r2, #58	@ 0x3a
 800249a:	2101      	movs	r1, #1
 800249c:	5499      	strb	r1, [r3, r2]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	223b      	movs	r2, #59	@ 0x3b
 80024a2:	2101      	movs	r1, #1
 80024a4:	5499      	strb	r1, [r3, r2]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	223c      	movs	r2, #60	@ 0x3c
 80024aa:	2101      	movs	r1, #1
 80024ac:	5499      	strb	r1, [r3, r2]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	223d      	movs	r2, #61	@ 0x3d
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2239      	movs	r2, #57	@ 0x39
 80024ba:	2101      	movs	r1, #1
 80024bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	0018      	movs	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2239      	movs	r2, #57	@ 0x39
 80024d4:	5c9b      	ldrb	r3, [r3, r2]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d001      	beq.n	80024e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e036      	b.n	800254e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2239      	movs	r2, #57	@ 0x39
 80024e4:	2102      	movs	r1, #2
 80024e6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2101      	movs	r1, #1
 80024f4:	430a      	orrs	r2, r1
 80024f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	@ 0x80
 80024fe:	05db      	lsls	r3, r3, #23
 8002500:	429a      	cmp	r2, r3
 8002502:	d009      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x50>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a13      	ldr	r2, [pc, #76]	@ (8002558 <HAL_TIM_Base_Start_IT+0x90>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d004      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x50>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a12      	ldr	r2, [pc, #72]	@ (800255c <HAL_TIM_Base_Start_IT+0x94>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d111      	bne.n	800253c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2207      	movs	r2, #7
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b06      	cmp	r3, #6
 8002528:	d010      	beq.n	800254c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800253a:	e007      	b.n	800254c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2101      	movs	r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b004      	add	sp, #16
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	40010800 	.word	0x40010800
 800255c:	40011400 	.word	0x40011400

08002560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2202      	movs	r2, #2
 800257c:	4013      	ands	r3, r2
 800257e:	d021      	beq.n	80025c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2202      	movs	r2, #2
 8002584:	4013      	ands	r3, r2
 8002586:	d01d      	beq.n	80025c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2203      	movs	r2, #3
 800258e:	4252      	negs	r2, r2
 8002590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2203      	movs	r2, #3
 80025a0:	4013      	ands	r3, r2
 80025a2:	d004      	beq.n	80025ae <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 f8ae 	bl	8002708 <HAL_TIM_IC_CaptureCallback>
 80025ac:	e007      	b.n	80025be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 f8a1 	bl	80026f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	0018      	movs	r0, r3
 80025ba:	f000 f8ad 	bl	8002718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2204      	movs	r2, #4
 80025c8:	4013      	ands	r3, r2
 80025ca:	d022      	beq.n	8002612 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2204      	movs	r2, #4
 80025d0:	4013      	ands	r3, r2
 80025d2:	d01e      	beq.n	8002612 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2205      	movs	r2, #5
 80025da:	4252      	negs	r2, r2
 80025dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	23c0      	movs	r3, #192	@ 0xc0
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4013      	ands	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f000 f887 	bl	8002708 <HAL_TIM_IC_CaptureCallback>
 80025fa:	e007      	b.n	800260c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 f87a 	bl	80026f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	0018      	movs	r0, r3
 8002608:	f000 f886 	bl	8002718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2208      	movs	r2, #8
 8002616:	4013      	ands	r3, r2
 8002618:	d021      	beq.n	800265e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2208      	movs	r2, #8
 800261e:	4013      	ands	r3, r2
 8002620:	d01d      	beq.n	800265e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2209      	movs	r2, #9
 8002628:	4252      	negs	r2, r2
 800262a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2204      	movs	r2, #4
 8002630:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2203      	movs	r2, #3
 800263a:	4013      	ands	r3, r2
 800263c:	d004      	beq.n	8002648 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0018      	movs	r0, r3
 8002642:	f000 f861 	bl	8002708 <HAL_TIM_IC_CaptureCallback>
 8002646:	e007      	b.n	8002658 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0018      	movs	r0, r3
 800264c:	f000 f854 	bl	80026f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	0018      	movs	r0, r3
 8002654:	f000 f860 	bl	8002718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2210      	movs	r2, #16
 8002662:	4013      	ands	r3, r2
 8002664:	d022      	beq.n	80026ac <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2210      	movs	r2, #16
 800266a:	4013      	ands	r3, r2
 800266c:	d01e      	beq.n	80026ac <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2211      	movs	r2, #17
 8002674:	4252      	negs	r2, r2
 8002676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2208      	movs	r2, #8
 800267c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69da      	ldr	r2, [r3, #28]
 8002684:	23c0      	movs	r3, #192	@ 0xc0
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4013      	ands	r3, r2
 800268a:	d004      	beq.n	8002696 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	0018      	movs	r0, r3
 8002690:	f000 f83a 	bl	8002708 <HAL_TIM_IC_CaptureCallback>
 8002694:	e007      	b.n	80026a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	0018      	movs	r0, r3
 800269a:	f000 f82d 	bl	80026f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 f839 	bl	8002718 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	d00c      	beq.n	80026ce <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	d008      	beq.n	80026ce <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2202      	movs	r2, #2
 80026c2:	4252      	negs	r2, r2
 80026c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7fe fa3d 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2240      	movs	r2, #64	@ 0x40
 80026d2:	4013      	ands	r3, r2
 80026d4:	d00c      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2240      	movs	r2, #64	@ 0x40
 80026da:	4013      	ands	r3, r2
 80026dc:	d008      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2241      	movs	r2, #65	@ 0x41
 80026e4:	4252      	negs	r2, r2
 80026e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 f81c 	bl	8002728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026f0:	46c0      	nop			@ (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b004      	add	sp, #16
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002700:	46c0      	nop			@ (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002710:	46c0      	nop			@ (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b002      	add	sp, #8
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002720:	46c0      	nop			@ (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002730:	46c0      	nop			@ (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}

08002738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	05db      	lsls	r3, r3, #23
 800274e:	429a      	cmp	r2, r3
 8002750:	d007      	beq.n	8002762 <TIM_Base_SetConfig+0x2a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a22      	ldr	r2, [pc, #136]	@ (80027e0 <TIM_Base_SetConfig+0xa8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d003      	beq.n	8002762 <TIM_Base_SetConfig+0x2a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a21      	ldr	r2, [pc, #132]	@ (80027e4 <TIM_Base_SetConfig+0xac>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d108      	bne.n	8002774 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2270      	movs	r2, #112	@ 0x70
 8002766:	4393      	bics	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	2380      	movs	r3, #128	@ 0x80
 8002778:	05db      	lsls	r3, r3, #23
 800277a:	429a      	cmp	r2, r3
 800277c:	d007      	beq.n	800278e <TIM_Base_SetConfig+0x56>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a17      	ldr	r2, [pc, #92]	@ (80027e0 <TIM_Base_SetConfig+0xa8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d003      	beq.n	800278e <TIM_Base_SetConfig+0x56>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a16      	ldr	r2, [pc, #88]	@ (80027e4 <TIM_Base_SetConfig+0xac>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d108      	bne.n	80027a0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4a15      	ldr	r2, [pc, #84]	@ (80027e8 <TIM_Base_SetConfig+0xb0>)
 8002792:	4013      	ands	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2280      	movs	r2, #128	@ 0x80
 80027a4:	4393      	bics	r3, r2
 80027a6:	001a      	movs	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2204      	movs	r2, #4
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	601a      	str	r2, [r3, #0]
}
 80027d8:	46c0      	nop			@ (mov r8, r8)
 80027da:	46bd      	mov	sp, r7
 80027dc:	b004      	add	sp, #16
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40010800 	.word	0x40010800
 80027e4:	40011400 	.word	0x40011400
 80027e8:	fffffcff 	.word	0xfffffcff

080027ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2238      	movs	r2, #56	@ 0x38
 80027fa:	5c9b      	ldrb	r3, [r3, r2]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002800:	2302      	movs	r3, #2
 8002802:	e042      	b.n	800288a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2238      	movs	r2, #56	@ 0x38
 8002808:	2101      	movs	r1, #1
 800280a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2239      	movs	r2, #57	@ 0x39
 8002810:	2102      	movs	r1, #2
 8002812:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2270      	movs	r2, #112	@ 0x70
 8002828:	4393      	bics	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	2380      	movs	r3, #128	@ 0x80
 8002844:	05db      	lsls	r3, r3, #23
 8002846:	429a      	cmp	r2, r3
 8002848:	d009      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a11      	ldr	r2, [pc, #68]	@ (8002894 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0f      	ldr	r2, [pc, #60]	@ (8002898 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d10c      	bne.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2280      	movs	r2, #128	@ 0x80
 8002862:	4393      	bics	r3, r2
 8002864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	4313      	orrs	r3, r2
 800286e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2239      	movs	r2, #57	@ 0x39
 800287c:	2101      	movs	r1, #1
 800287e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2238      	movs	r2, #56	@ 0x38
 8002884:	2100      	movs	r1, #0
 8002886:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b004      	add	sp, #16
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	40010800 	.word	0x40010800
 8002898:	40011400 	.word	0x40011400

0800289c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e044      	b.n	8002938 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d107      	bne.n	80028c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2278      	movs	r2, #120	@ 0x78
 80028ba:	2100      	movs	r1, #0
 80028bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7fe f9c1 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2224      	movs	r2, #36	@ 0x24
 80028ca:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2101      	movs	r1, #1
 80028d8:	438a      	bics	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 feca 	bl	8003680 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f000 fc42 	bl	8003178 <UART_SetConfig>
 80028f4:	0003      	movs	r3, r0
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e01c      	b.n	8002938 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	490d      	ldr	r1, [pc, #52]	@ (8002940 <HAL_UART_Init+0xa4>)
 800290a:	400a      	ands	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	212a      	movs	r1, #42	@ 0x2a
 800291a:	438a      	bics	r2, r1
 800291c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2101      	movs	r1, #1
 800292a:	430a      	orrs	r2, r1
 800292c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0018      	movs	r0, r3
 8002932:	f000 ff59 	bl	80037e8 <UART_CheckIdleState>
 8002936:	0003      	movs	r3, r0
}
 8002938:	0018      	movs	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	b002      	add	sp, #8
 800293e:	bd80      	pop	{r7, pc}
 8002940:	ffffb7ff 	.word	0xffffb7ff

08002944 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	@ 0x28
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	1dbb      	adds	r3, r7, #6
 8002952:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002958:	2b20      	cmp	r3, #32
 800295a:	d000      	beq.n	800295e <HAL_UART_Transmit+0x1a>
 800295c:	e08c      	b.n	8002a78 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_UART_Transmit+0x28>
 8002964:	1dbb      	adds	r3, r7, #6
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e084      	b.n	8002a7a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	015b      	lsls	r3, r3, #5
 8002978:	429a      	cmp	r2, r3
 800297a:	d109      	bne.n	8002990 <HAL_UART_Transmit+0x4c>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2201      	movs	r2, #1
 8002988:	4013      	ands	r3, r2
 800298a:	d001      	beq.n	8002990 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e074      	b.n	8002a7a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2284      	movs	r2, #132	@ 0x84
 8002994:	2100      	movs	r1, #0
 8002996:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2221      	movs	r2, #33	@ 0x21
 800299c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800299e:	f7fe fa9d 	bl	8000edc <HAL_GetTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1dba      	adds	r2, r7, #6
 80029aa:	2150      	movs	r1, #80	@ 0x50
 80029ac:	8812      	ldrh	r2, [r2, #0]
 80029ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1dba      	adds	r2, r7, #6
 80029b4:	2152      	movs	r1, #82	@ 0x52
 80029b6:	8812      	ldrh	r2, [r2, #0]
 80029b8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	2380      	movs	r3, #128	@ 0x80
 80029c0:	015b      	lsls	r3, r3, #5
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d108      	bne.n	80029d8 <HAL_UART_Transmit+0x94>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d104      	bne.n	80029d8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	e003      	b.n	80029e0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029e0:	e02f      	b.n	8002a42 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	0013      	movs	r3, r2
 80029ec:	2200      	movs	r2, #0
 80029ee:	2180      	movs	r1, #128	@ 0x80
 80029f0:	f000 ffa2 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 80029f4:	1e03      	subs	r3, r0, #0
 80029f6:	d004      	beq.n	8002a02 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2220      	movs	r2, #32
 80029fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e03b      	b.n	8002a7a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10b      	bne.n	8002a20 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	05d2      	lsls	r2, r2, #23
 8002a14:	0dd2      	lsrs	r2, r2, #23
 8002a16:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	e007      	b.n	8002a30 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	781a      	ldrb	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2252      	movs	r2, #82	@ 0x52
 8002a34:	5a9b      	ldrh	r3, [r3, r2]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b299      	uxth	r1, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2252      	movs	r2, #82	@ 0x52
 8002a40:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2252      	movs	r2, #82	@ 0x52
 8002a46:	5a9b      	ldrh	r3, [r3, r2]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1c9      	bne.n	80029e2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	0013      	movs	r3, r2
 8002a58:	2200      	movs	r2, #0
 8002a5a:	2140      	movs	r1, #64	@ 0x40
 8002a5c:	f000 ff6c 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 8002a60:	1e03      	subs	r3, r0, #0
 8002a62:	d004      	beq.n	8002a6e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e005      	b.n	8002a7a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2220      	movs	r2, #32
 8002a72:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e000      	b.n	8002a7a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
  }
}
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b008      	add	sp, #32
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	1dbb      	adds	r3, r7, #6
 8002a90:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2280      	movs	r2, #128	@ 0x80
 8002a96:	589b      	ldr	r3, [r3, r2]
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d14a      	bne.n	8002b32 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_UART_Receive_IT+0x26>
 8002aa2:	1dbb      	adds	r3, r7, #6
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e042      	b.n	8002b34 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	015b      	lsls	r3, r3, #5
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d109      	bne.n	8002ace <HAL_UART_Receive_IT+0x4a>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d105      	bne.n	8002ace <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d001      	beq.n	8002ace <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e032      	b.n	8002b34 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a18      	ldr	r2, [pc, #96]	@ (8002b3c <HAL_UART_Receive_IT+0xb8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d020      	beq.n	8002b20 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	2380      	movs	r3, #128	@ 0x80
 8002ae6:	041b      	lsls	r3, r3, #16
 8002ae8:	4013      	ands	r3, r2
 8002aea:	d019      	beq.n	8002b20 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aec:	f3ef 8310 	mrs	r3, PRIMASK
 8002af0:	613b      	str	r3, [r7, #16]
  return(result);
 8002af2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	2301      	movs	r3, #1
 8002af8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f383 8810 	msr	PRIMASK, r3
}
 8002b00:	46c0      	nop			@ (mov r8, r8)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2180      	movs	r1, #128	@ 0x80
 8002b0e:	04c9      	lsls	r1, r1, #19
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f383 8810 	msr	PRIMASK, r3
}
 8002b1e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b20:	1dbb      	adds	r3, r7, #6
 8002b22:	881a      	ldrh	r2, [r3, #0]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 ff75 	bl	8003a18 <UART_Start_Receive_IT>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	e000      	b.n	8002b34 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b008      	add	sp, #32
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40004800 	.word	0x40004800

08002b40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b0ab      	sub	sp, #172	@ 0xac
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	22a4      	movs	r2, #164	@ 0xa4
 8002b50:	18b9      	adds	r1, r7, r2
 8002b52:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	20a0      	movs	r0, #160	@ 0xa0
 8002b5c:	1839      	adds	r1, r7, r0
 8002b5e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	219c      	movs	r1, #156	@ 0x9c
 8002b68:	1879      	adds	r1, r7, r1
 8002b6a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b6c:	0011      	movs	r1, r2
 8002b6e:	18bb      	adds	r3, r7, r2
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a99      	ldr	r2, [pc, #612]	@ (8002dd8 <HAL_UART_IRQHandler+0x298>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	2298      	movs	r2, #152	@ 0x98
 8002b78:	18bc      	adds	r4, r7, r2
 8002b7a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002b7c:	18bb      	adds	r3, r7, r2
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d114      	bne.n	8002bae <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b84:	187b      	adds	r3, r7, r1
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d00f      	beq.n	8002bae <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b8e:	183b      	adds	r3, r7, r0
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2220      	movs	r2, #32
 8002b94:	4013      	ands	r3, r2
 8002b96:	d00a      	beq.n	8002bae <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d100      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x62>
 8002ba0:	e2be      	b.n	8003120 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	0010      	movs	r0, r2
 8002baa:	4798      	blx	r3
      }
      return;
 8002bac:	e2b8      	b.n	8003120 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bae:	2398      	movs	r3, #152	@ 0x98
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d100      	bne.n	8002bba <HAL_UART_IRQHandler+0x7a>
 8002bb8:	e114      	b.n	8002de4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bba:	239c      	movs	r3, #156	@ 0x9c
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d106      	bne.n	8002bd4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002bc6:	23a0      	movs	r3, #160	@ 0xa0
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a83      	ldr	r2, [pc, #524]	@ (8002ddc <HAL_UART_IRQHandler+0x29c>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d100      	bne.n	8002bd4 <HAL_UART_IRQHandler+0x94>
 8002bd2:	e107      	b.n	8002de4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bd4:	23a4      	movs	r3, #164	@ 0xa4
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d012      	beq.n	8002c06 <HAL_UART_IRQHandler+0xc6>
 8002be0:	23a0      	movs	r3, #160	@ 0xa0
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	4013      	ands	r3, r2
 8002bec:	d00b      	beq.n	8002c06 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2284      	movs	r2, #132	@ 0x84
 8002bfa:	589b      	ldr	r3, [r3, r2]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2184      	movs	r1, #132	@ 0x84
 8002c04:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c06:	23a4      	movs	r3, #164	@ 0xa4
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d011      	beq.n	8002c36 <HAL_UART_IRQHandler+0xf6>
 8002c12:	239c      	movs	r3, #156	@ 0x9c
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d00b      	beq.n	8002c36 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2202      	movs	r2, #2
 8002c24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2284      	movs	r2, #132	@ 0x84
 8002c2a:	589b      	ldr	r3, [r3, r2]
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2184      	movs	r1, #132	@ 0x84
 8002c34:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c36:	23a4      	movs	r3, #164	@ 0xa4
 8002c38:	18fb      	adds	r3, r7, r3
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d011      	beq.n	8002c66 <HAL_UART_IRQHandler+0x126>
 8002c42:	239c      	movs	r3, #156	@ 0x9c
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d00b      	beq.n	8002c66 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2204      	movs	r2, #4
 8002c54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2284      	movs	r2, #132	@ 0x84
 8002c5a:	589b      	ldr	r3, [r3, r2]
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2184      	movs	r1, #132	@ 0x84
 8002c64:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c66:	23a4      	movs	r3, #164	@ 0xa4
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d017      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c72:	23a0      	movs	r3, #160	@ 0xa0
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d105      	bne.n	8002c8a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c7e:	239c      	movs	r3, #156	@ 0x9c
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c88:	d00b      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2208      	movs	r2, #8
 8002c90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2284      	movs	r2, #132	@ 0x84
 8002c96:	589b      	ldr	r3, [r3, r2]
 8002c98:	2208      	movs	r2, #8
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2184      	movs	r1, #132	@ 0x84
 8002ca0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ca2:	23a4      	movs	r3, #164	@ 0xa4
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	4013      	ands	r3, r2
 8002cae:	d013      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x198>
 8002cb0:	23a0      	movs	r3, #160	@ 0xa0
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	2380      	movs	r3, #128	@ 0x80
 8002cb8:	04db      	lsls	r3, r3, #19
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d00c      	beq.n	8002cd8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2280      	movs	r2, #128	@ 0x80
 8002cc4:	0112      	lsls	r2, r2, #4
 8002cc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2284      	movs	r2, #132	@ 0x84
 8002ccc:	589b      	ldr	r3, [r3, r2]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2184      	movs	r1, #132	@ 0x84
 8002cd6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2284      	movs	r2, #132	@ 0x84
 8002cdc:	589b      	ldr	r3, [r3, r2]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d100      	bne.n	8002ce4 <HAL_UART_IRQHandler+0x1a4>
 8002ce2:	e21f      	b.n	8003124 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ce4:	23a4      	movs	r3, #164	@ 0xa4
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2220      	movs	r2, #32
 8002cec:	4013      	ands	r3, r2
 8002cee:	d00e      	beq.n	8002d0e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cf0:	23a0      	movs	r3, #160	@ 0xa0
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d008      	beq.n	8002d0e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	0010      	movs	r0, r2
 8002d0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2284      	movs	r2, #132	@ 0x84
 8002d12:	589b      	ldr	r3, [r3, r2]
 8002d14:	2194      	movs	r1, #148	@ 0x94
 8002d16:	187a      	adds	r2, r7, r1
 8002d18:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2240      	movs	r2, #64	@ 0x40
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b40      	cmp	r3, #64	@ 0x40
 8002d26:	d004      	beq.n	8002d32 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2228      	movs	r2, #40	@ 0x28
 8002d2e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d30:	d047      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f000 ff39 	bl	8003bac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2240      	movs	r2, #64	@ 0x40
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b40      	cmp	r3, #64	@ 0x40
 8002d46:	d137      	bne.n	8002db8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d48:	f3ef 8310 	mrs	r3, PRIMASK
 8002d4c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002d4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d50:	2090      	movs	r0, #144	@ 0x90
 8002d52:	183a      	adds	r2, r7, r0
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	2301      	movs	r3, #1
 8002d58:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d5c:	f383 8810 	msr	PRIMASK, r3
}
 8002d60:	46c0      	nop			@ (mov r8, r8)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2140      	movs	r1, #64	@ 0x40
 8002d6e:	438a      	bics	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	183b      	adds	r3, r7, r0
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d7a:	f383 8810 	msr	PRIMASK, r3
}
 8002d7e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d012      	beq.n	8002dae <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d8c:	4a14      	ldr	r2, [pc, #80]	@ (8002de0 <HAL_UART_IRQHandler+0x2a0>)
 8002d8e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7fe f9ed 	bl	8001174 <HAL_DMA_Abort_IT>
 8002d9a:	1e03      	subs	r3, r0, #0
 8002d9c:	d01a      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da8:	0018      	movs	r0, r3
 8002daa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dac:	e012      	b.n	8002dd4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f000 f9cd 	bl	8003150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db6:	e00d      	b.n	8002dd4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f000 f9c8 	bl	8003150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc0:	e008      	b.n	8002dd4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f000 f9c3 	bl	8003150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2284      	movs	r2, #132	@ 0x84
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002dd2:	e1a7      	b.n	8003124 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd4:	46c0      	nop			@ (mov r8, r8)
    return;
 8002dd6:	e1a5      	b.n	8003124 <HAL_UART_IRQHandler+0x5e4>
 8002dd8:	0000080f 	.word	0x0000080f
 8002ddc:	04000120 	.word	0x04000120
 8002de0:	08003c75 	.word	0x08003c75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d000      	beq.n	8002dee <HAL_UART_IRQHandler+0x2ae>
 8002dec:	e159      	b.n	80030a2 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002dee:	23a4      	movs	r3, #164	@ 0xa4
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2210      	movs	r2, #16
 8002df6:	4013      	ands	r3, r2
 8002df8:	d100      	bne.n	8002dfc <HAL_UART_IRQHandler+0x2bc>
 8002dfa:	e152      	b.n	80030a2 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002dfc:	23a0      	movs	r3, #160	@ 0xa0
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2210      	movs	r2, #16
 8002e04:	4013      	ands	r3, r2
 8002e06:	d100      	bne.n	8002e0a <HAL_UART_IRQHandler+0x2ca>
 8002e08:	e14b      	b.n	80030a2 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2210      	movs	r2, #16
 8002e10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2240      	movs	r2, #64	@ 0x40
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b40      	cmp	r3, #64	@ 0x40
 8002e1e:	d000      	beq.n	8002e22 <HAL_UART_IRQHandler+0x2e2>
 8002e20:	e0bf      	b.n	8002fa2 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	217e      	movs	r1, #126	@ 0x7e
 8002e2c:	187b      	adds	r3, r7, r1
 8002e2e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <HAL_UART_IRQHandler+0x2fa>
 8002e38:	e095      	b.n	8002f66 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2258      	movs	r2, #88	@ 0x58
 8002e3e:	5a9b      	ldrh	r3, [r3, r2]
 8002e40:	187a      	adds	r2, r7, r1
 8002e42:	8812      	ldrh	r2, [r2, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d300      	bcc.n	8002e4a <HAL_UART_IRQHandler+0x30a>
 8002e48:	e08d      	b.n	8002f66 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	187a      	adds	r2, r7, r1
 8002e4e:	215a      	movs	r1, #90	@ 0x5a
 8002e50:	8812      	ldrh	r2, [r2, #0]
 8002e52:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d16f      	bne.n	8002f42 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e62:	f3ef 8310 	mrs	r3, PRIMASK
 8002e66:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	49ad      	ldr	r1, [pc, #692]	@ (8003138 <HAL_UART_IRQHandler+0x5f8>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8e:	f383 8810 	msr	PRIMASK, r3
}
 8002e92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e94:	f3ef 8310 	mrs	r3, PRIMASK
 8002e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9c:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ea4:	f383 8810 	msr	PRIMASK, r3
}
 8002ea8:	46c0      	nop			@ (mov r8, r8)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	438a      	bics	r2, r1
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ebc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ec0:	f383 8810 	msr	PRIMASK, r3
}
 8002ec4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8002eca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002ecc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ece:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ed6:	f383 8810 	msr	PRIMASK, r3
}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2140      	movs	r1, #64	@ 0x40
 8002ee8:	438a      	bics	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002eee:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ef2:	f383 8810 	msr	PRIMASK, r3
}
 8002ef6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2280      	movs	r2, #128	@ 0x80
 8002efc:	2120      	movs	r1, #32
 8002efe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f06:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f10:	2301      	movs	r3, #1
 8002f12:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f16:	f383 8810 	msr	PRIMASK, r3
}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2110      	movs	r1, #16
 8002f28:	438a      	bics	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7fe f8d9 	bl	80010f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2258      	movs	r2, #88	@ 0x58
 8002f4c:	5a9a      	ldrh	r2, [r3, r2]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	215a      	movs	r1, #90	@ 0x5a
 8002f52:	5a5b      	ldrh	r3, [r3, r1]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0011      	movs	r1, r2
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f000 f8fe 	bl	8003160 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002f64:	e0e0      	b.n	8003128 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2258      	movs	r2, #88	@ 0x58
 8002f6a:	5a9b      	ldrh	r3, [r3, r2]
 8002f6c:	227e      	movs	r2, #126	@ 0x7e
 8002f6e:	18ba      	adds	r2, r7, r2
 8002f70:	8812      	ldrh	r2, [r2, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d000      	beq.n	8002f78 <HAL_UART_IRQHandler+0x438>
 8002f76:	e0d7      	b.n	8003128 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2220      	movs	r2, #32
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d000      	beq.n	8002f8a <HAL_UART_IRQHandler+0x44a>
 8002f88:	e0ce      	b.n	8003128 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2258      	movs	r2, #88	@ 0x58
 8002f94:	5a9a      	ldrh	r2, [r3, r2]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	0011      	movs	r1, r2
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 f8e0 	bl	8003160 <HAL_UARTEx_RxEventCallback>
      return;
 8002fa0:	e0c2      	b.n	8003128 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2258      	movs	r2, #88	@ 0x58
 8002fa6:	5a99      	ldrh	r1, [r3, r2]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	225a      	movs	r2, #90	@ 0x5a
 8002fac:	5a9b      	ldrh	r3, [r3, r2]
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	208e      	movs	r0, #142	@ 0x8e
 8002fb2:	183b      	adds	r3, r7, r0
 8002fb4:	1a8a      	subs	r2, r1, r2
 8002fb6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	225a      	movs	r2, #90	@ 0x5a
 8002fbc:	5a9b      	ldrh	r3, [r3, r2]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d100      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x486>
 8002fc4:	e0b2      	b.n	800312c <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8002fc6:	183b      	adds	r3, r7, r0
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d100      	bne.n	8002fd0 <HAL_UART_IRQHandler+0x490>
 8002fce:	e0ad      	b.n	800312c <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fd8:	2488      	movs	r4, #136	@ 0x88
 8002fda:	193a      	adds	r2, r7, r4
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	2301      	movs	r3, #1
 8002fe0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f383 8810 	msr	PRIMASK, r3
}
 8002fe8:	46c0      	nop			@ (mov r8, r8)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4951      	ldr	r1, [pc, #324]	@ (800313c <HAL_UART_IRQHandler+0x5fc>)
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	193b      	adds	r3, r7, r4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f383 8810 	msr	PRIMASK, r3
}
 8003006:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003008:	f3ef 8310 	mrs	r3, PRIMASK
 800300c:	61bb      	str	r3, [r7, #24]
  return(result);
 800300e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003010:	2484      	movs	r4, #132	@ 0x84
 8003012:	193a      	adds	r2, r7, r4
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	2301      	movs	r3, #1
 8003018:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f383 8810 	msr	PRIMASK, r3
}
 8003020:	46c0      	nop			@ (mov r8, r8)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	438a      	bics	r2, r1
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	193b      	adds	r3, r7, r4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	f383 8810 	msr	PRIMASK, r3
}
 800303e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2280      	movs	r2, #128	@ 0x80
 8003044:	2120      	movs	r1, #32
 8003046:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003054:	f3ef 8310 	mrs	r3, PRIMASK
 8003058:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800305c:	2480      	movs	r4, #128	@ 0x80
 800305e:	193a      	adds	r2, r7, r4
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	2301      	movs	r3, #1
 8003064:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003068:	f383 8810 	msr	PRIMASK, r3
}
 800306c:	46c0      	nop			@ (mov r8, r8)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2110      	movs	r1, #16
 800307a:	438a      	bics	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	193b      	adds	r3, r7, r4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003086:	f383 8810 	msr	PRIMASK, r3
}
 800308a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003092:	183b      	adds	r3, r7, r0
 8003094:	881a      	ldrh	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0011      	movs	r1, r2
 800309a:	0018      	movs	r0, r3
 800309c:	f000 f860 	bl	8003160 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030a0:	e044      	b.n	800312c <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030a2:	23a4      	movs	r3, #164	@ 0xa4
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	2380      	movs	r3, #128	@ 0x80
 80030aa:	035b      	lsls	r3, r3, #13
 80030ac:	4013      	ands	r3, r2
 80030ae:	d010      	beq.n	80030d2 <HAL_UART_IRQHandler+0x592>
 80030b0:	239c      	movs	r3, #156	@ 0x9c
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	2380      	movs	r3, #128	@ 0x80
 80030b8:	03db      	lsls	r3, r3, #15
 80030ba:	4013      	ands	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2280      	movs	r2, #128	@ 0x80
 80030c4:	0352      	lsls	r2, r2, #13
 80030c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	0018      	movs	r0, r3
 80030cc:	f000 ffd4 	bl	8004078 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030d0:	e02f      	b.n	8003132 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030d2:	23a4      	movs	r3, #164	@ 0xa4
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2280      	movs	r2, #128	@ 0x80
 80030da:	4013      	ands	r3, r2
 80030dc:	d00f      	beq.n	80030fe <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030de:	23a0      	movs	r3, #160	@ 0xa0
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2280      	movs	r2, #128	@ 0x80
 80030e6:	4013      	ands	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01e      	beq.n	8003130 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	0010      	movs	r0, r2
 80030fa:	4798      	blx	r3
    }
    return;
 80030fc:	e018      	b.n	8003130 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030fe:	23a4      	movs	r3, #164	@ 0xa4
 8003100:	18fb      	adds	r3, r7, r3
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2240      	movs	r2, #64	@ 0x40
 8003106:	4013      	ands	r3, r2
 8003108:	d013      	beq.n	8003132 <HAL_UART_IRQHandler+0x5f2>
 800310a:	23a0      	movs	r3, #160	@ 0xa0
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2240      	movs	r2, #64	@ 0x40
 8003112:	4013      	ands	r3, r2
 8003114:	d00d      	beq.n	8003132 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 fdbe 	bl	8003c9a <UART_EndTransmit_IT>
    return;
 800311e:	e008      	b.n	8003132 <HAL_UART_IRQHandler+0x5f2>
      return;
 8003120:	46c0      	nop			@ (mov r8, r8)
 8003122:	e006      	b.n	8003132 <HAL_UART_IRQHandler+0x5f2>
    return;
 8003124:	46c0      	nop			@ (mov r8, r8)
 8003126:	e004      	b.n	8003132 <HAL_UART_IRQHandler+0x5f2>
      return;
 8003128:	46c0      	nop			@ (mov r8, r8)
 800312a:	e002      	b.n	8003132 <HAL_UART_IRQHandler+0x5f2>
      return;
 800312c:	46c0      	nop			@ (mov r8, r8)
 800312e:	e000      	b.n	8003132 <HAL_UART_IRQHandler+0x5f2>
    return;
 8003130:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003132:	46bd      	mov	sp, r7
 8003134:	b02b      	add	sp, #172	@ 0xac
 8003136:	bd90      	pop	{r4, r7, pc}
 8003138:	fffffeff 	.word	0xfffffeff
 800313c:	fffffedf 	.word	0xfffffedf

08003140 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003148:	46c0      	nop			@ (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003158:	46c0      	nop			@ (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	b002      	add	sp, #8
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	000a      	movs	r2, r1
 800316a:	1cbb      	adds	r3, r7, #2
 800316c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	46bd      	mov	sp, r7
 8003172:	b002      	add	sp, #8
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003178:	b5b0      	push	{r4, r5, r7, lr}
 800317a:	b08e      	sub	sp, #56	@ 0x38
 800317c:	af00      	add	r7, sp, #0
 800317e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003180:	231a      	movs	r3, #26
 8003182:	2218      	movs	r2, #24
 8003184:	189b      	adds	r3, r3, r2
 8003186:	19db      	adds	r3, r3, r7
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	431a      	orrs	r2, r3
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	431a      	orrs	r2, r3
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4ac6      	ldr	r2, [pc, #792]	@ (80034c4 <UART_SetConfig+0x34c>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031b6:	430a      	orrs	r2, r1
 80031b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4ac1      	ldr	r2, [pc, #772]	@ (80034c8 <UART_SetConfig+0x350>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4abb      	ldr	r2, [pc, #748]	@ (80034cc <UART_SetConfig+0x354>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031e8:	4313      	orrs	r3, r2
 80031ea:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	4ab7      	ldr	r2, [pc, #732]	@ (80034d0 <UART_SetConfig+0x358>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031fe:	430a      	orrs	r2, r1
 8003200:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4ab3      	ldr	r2, [pc, #716]	@ (80034d4 <UART_SetConfig+0x35c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d131      	bne.n	8003270 <UART_SetConfig+0xf8>
 800320c:	4bb2      	ldr	r3, [pc, #712]	@ (80034d8 <UART_SetConfig+0x360>)
 800320e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003210:	2203      	movs	r2, #3
 8003212:	4013      	ands	r3, r2
 8003214:	2b03      	cmp	r3, #3
 8003216:	d01d      	beq.n	8003254 <UART_SetConfig+0xdc>
 8003218:	d823      	bhi.n	8003262 <UART_SetConfig+0xea>
 800321a:	2b02      	cmp	r3, #2
 800321c:	d00c      	beq.n	8003238 <UART_SetConfig+0xc0>
 800321e:	d820      	bhi.n	8003262 <UART_SetConfig+0xea>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <UART_SetConfig+0xb2>
 8003224:	2b01      	cmp	r3, #1
 8003226:	d00e      	beq.n	8003246 <UART_SetConfig+0xce>
 8003228:	e01b      	b.n	8003262 <UART_SetConfig+0xea>
 800322a:	231b      	movs	r3, #27
 800322c:	2218      	movs	r2, #24
 800322e:	189b      	adds	r3, r3, r2
 8003230:	19db      	adds	r3, r3, r7
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	e09c      	b.n	8003372 <UART_SetConfig+0x1fa>
 8003238:	231b      	movs	r3, #27
 800323a:	2218      	movs	r2, #24
 800323c:	189b      	adds	r3, r3, r2
 800323e:	19db      	adds	r3, r3, r7
 8003240:	2202      	movs	r2, #2
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	e095      	b.n	8003372 <UART_SetConfig+0x1fa>
 8003246:	231b      	movs	r3, #27
 8003248:	2218      	movs	r2, #24
 800324a:	189b      	adds	r3, r3, r2
 800324c:	19db      	adds	r3, r3, r7
 800324e:	2204      	movs	r2, #4
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	e08e      	b.n	8003372 <UART_SetConfig+0x1fa>
 8003254:	231b      	movs	r3, #27
 8003256:	2218      	movs	r2, #24
 8003258:	189b      	adds	r3, r3, r2
 800325a:	19db      	adds	r3, r3, r7
 800325c:	2208      	movs	r2, #8
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	e087      	b.n	8003372 <UART_SetConfig+0x1fa>
 8003262:	231b      	movs	r3, #27
 8003264:	2218      	movs	r2, #24
 8003266:	189b      	adds	r3, r3, r2
 8003268:	19db      	adds	r3, r3, r7
 800326a:	2210      	movs	r2, #16
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e080      	b.n	8003372 <UART_SetConfig+0x1fa>
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a99      	ldr	r2, [pc, #612]	@ (80034dc <UART_SetConfig+0x364>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d131      	bne.n	80032de <UART_SetConfig+0x166>
 800327a:	4b97      	ldr	r3, [pc, #604]	@ (80034d8 <UART_SetConfig+0x360>)
 800327c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327e:	220c      	movs	r2, #12
 8003280:	4013      	ands	r3, r2
 8003282:	2b0c      	cmp	r3, #12
 8003284:	d01d      	beq.n	80032c2 <UART_SetConfig+0x14a>
 8003286:	d823      	bhi.n	80032d0 <UART_SetConfig+0x158>
 8003288:	2b08      	cmp	r3, #8
 800328a:	d00c      	beq.n	80032a6 <UART_SetConfig+0x12e>
 800328c:	d820      	bhi.n	80032d0 <UART_SetConfig+0x158>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <UART_SetConfig+0x120>
 8003292:	2b04      	cmp	r3, #4
 8003294:	d00e      	beq.n	80032b4 <UART_SetConfig+0x13c>
 8003296:	e01b      	b.n	80032d0 <UART_SetConfig+0x158>
 8003298:	231b      	movs	r3, #27
 800329a:	2218      	movs	r2, #24
 800329c:	189b      	adds	r3, r3, r2
 800329e:	19db      	adds	r3, r3, r7
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e065      	b.n	8003372 <UART_SetConfig+0x1fa>
 80032a6:	231b      	movs	r3, #27
 80032a8:	2218      	movs	r2, #24
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	19db      	adds	r3, r3, r7
 80032ae:	2202      	movs	r2, #2
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e05e      	b.n	8003372 <UART_SetConfig+0x1fa>
 80032b4:	231b      	movs	r3, #27
 80032b6:	2218      	movs	r2, #24
 80032b8:	189b      	adds	r3, r3, r2
 80032ba:	19db      	adds	r3, r3, r7
 80032bc:	2204      	movs	r2, #4
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e057      	b.n	8003372 <UART_SetConfig+0x1fa>
 80032c2:	231b      	movs	r3, #27
 80032c4:	2218      	movs	r2, #24
 80032c6:	189b      	adds	r3, r3, r2
 80032c8:	19db      	adds	r3, r3, r7
 80032ca:	2208      	movs	r2, #8
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e050      	b.n	8003372 <UART_SetConfig+0x1fa>
 80032d0:	231b      	movs	r3, #27
 80032d2:	2218      	movs	r2, #24
 80032d4:	189b      	adds	r3, r3, r2
 80032d6:	19db      	adds	r3, r3, r7
 80032d8:	2210      	movs	r2, #16
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e049      	b.n	8003372 <UART_SetConfig+0x1fa>
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a7a      	ldr	r2, [pc, #488]	@ (80034cc <UART_SetConfig+0x354>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d13e      	bne.n	8003366 <UART_SetConfig+0x1ee>
 80032e8:	4b7b      	ldr	r3, [pc, #492]	@ (80034d8 <UART_SetConfig+0x360>)
 80032ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032ec:	23c0      	movs	r3, #192	@ 0xc0
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	4013      	ands	r3, r2
 80032f2:	22c0      	movs	r2, #192	@ 0xc0
 80032f4:	0112      	lsls	r2, r2, #4
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d027      	beq.n	800334a <UART_SetConfig+0x1d2>
 80032fa:	22c0      	movs	r2, #192	@ 0xc0
 80032fc:	0112      	lsls	r2, r2, #4
 80032fe:	4293      	cmp	r3, r2
 8003300:	d82a      	bhi.n	8003358 <UART_SetConfig+0x1e0>
 8003302:	2280      	movs	r2, #128	@ 0x80
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	4293      	cmp	r3, r2
 8003308:	d011      	beq.n	800332e <UART_SetConfig+0x1b6>
 800330a:	2280      	movs	r2, #128	@ 0x80
 800330c:	0112      	lsls	r2, r2, #4
 800330e:	4293      	cmp	r3, r2
 8003310:	d822      	bhi.n	8003358 <UART_SetConfig+0x1e0>
 8003312:	2b00      	cmp	r3, #0
 8003314:	d004      	beq.n	8003320 <UART_SetConfig+0x1a8>
 8003316:	2280      	movs	r2, #128	@ 0x80
 8003318:	00d2      	lsls	r2, r2, #3
 800331a:	4293      	cmp	r3, r2
 800331c:	d00e      	beq.n	800333c <UART_SetConfig+0x1c4>
 800331e:	e01b      	b.n	8003358 <UART_SetConfig+0x1e0>
 8003320:	231b      	movs	r3, #27
 8003322:	2218      	movs	r2, #24
 8003324:	189b      	adds	r3, r3, r2
 8003326:	19db      	adds	r3, r3, r7
 8003328:	2200      	movs	r2, #0
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e021      	b.n	8003372 <UART_SetConfig+0x1fa>
 800332e:	231b      	movs	r3, #27
 8003330:	2218      	movs	r2, #24
 8003332:	189b      	adds	r3, r3, r2
 8003334:	19db      	adds	r3, r3, r7
 8003336:	2202      	movs	r2, #2
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e01a      	b.n	8003372 <UART_SetConfig+0x1fa>
 800333c:	231b      	movs	r3, #27
 800333e:	2218      	movs	r2, #24
 8003340:	189b      	adds	r3, r3, r2
 8003342:	19db      	adds	r3, r3, r7
 8003344:	2204      	movs	r2, #4
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e013      	b.n	8003372 <UART_SetConfig+0x1fa>
 800334a:	231b      	movs	r3, #27
 800334c:	2218      	movs	r2, #24
 800334e:	189b      	adds	r3, r3, r2
 8003350:	19db      	adds	r3, r3, r7
 8003352:	2208      	movs	r2, #8
 8003354:	701a      	strb	r2, [r3, #0]
 8003356:	e00c      	b.n	8003372 <UART_SetConfig+0x1fa>
 8003358:	231b      	movs	r3, #27
 800335a:	2218      	movs	r2, #24
 800335c:	189b      	adds	r3, r3, r2
 800335e:	19db      	adds	r3, r3, r7
 8003360:	2210      	movs	r2, #16
 8003362:	701a      	strb	r2, [r3, #0]
 8003364:	e005      	b.n	8003372 <UART_SetConfig+0x1fa>
 8003366:	231b      	movs	r3, #27
 8003368:	2218      	movs	r2, #24
 800336a:	189b      	adds	r3, r3, r2
 800336c:	19db      	adds	r3, r3, r7
 800336e:	2210      	movs	r2, #16
 8003370:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a55      	ldr	r2, [pc, #340]	@ (80034cc <UART_SetConfig+0x354>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d000      	beq.n	800337e <UART_SetConfig+0x206>
 800337c:	e084      	b.n	8003488 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800337e:	231b      	movs	r3, #27
 8003380:	2218      	movs	r2, #24
 8003382:	189b      	adds	r3, r3, r2
 8003384:	19db      	adds	r3, r3, r7
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d01d      	beq.n	80033c8 <UART_SetConfig+0x250>
 800338c:	dc20      	bgt.n	80033d0 <UART_SetConfig+0x258>
 800338e:	2b04      	cmp	r3, #4
 8003390:	d015      	beq.n	80033be <UART_SetConfig+0x246>
 8003392:	dc1d      	bgt.n	80033d0 <UART_SetConfig+0x258>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <UART_SetConfig+0x226>
 8003398:	2b02      	cmp	r3, #2
 800339a:	d005      	beq.n	80033a8 <UART_SetConfig+0x230>
 800339c:	e018      	b.n	80033d0 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800339e:	f7fe fe99 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 80033a2:	0003      	movs	r3, r0
 80033a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80033a6:	e01c      	b.n	80033e2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033a8:	4b4b      	ldr	r3, [pc, #300]	@ (80034d8 <UART_SetConfig+0x360>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2210      	movs	r2, #16
 80033ae:	4013      	ands	r3, r2
 80033b0:	d002      	beq.n	80033b8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80033b2:	4b4b      	ldr	r3, [pc, #300]	@ (80034e0 <UART_SetConfig+0x368>)
 80033b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80033b6:	e014      	b.n	80033e2 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80033b8:	4b4a      	ldr	r3, [pc, #296]	@ (80034e4 <UART_SetConfig+0x36c>)
 80033ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80033bc:	e011      	b.n	80033e2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033be:	f7fe fdf9 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 80033c2:	0003      	movs	r3, r0
 80033c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80033c6:	e00c      	b.n	80033e2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033c8:	2380      	movs	r3, #128	@ 0x80
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80033ce:	e008      	b.n	80033e2 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80033d4:	231a      	movs	r3, #26
 80033d6:	2218      	movs	r2, #24
 80033d8:	189b      	adds	r3, r3, r2
 80033da:	19db      	adds	r3, r3, r7
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
        break;
 80033e0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d100      	bne.n	80033ea <UART_SetConfig+0x272>
 80033e8:	e132      	b.n	8003650 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	0013      	movs	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	189b      	adds	r3, r3, r2
 80033f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d305      	bcc.n	8003406 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003402:	429a      	cmp	r2, r3
 8003404:	d906      	bls.n	8003414 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003406:	231a      	movs	r3, #26
 8003408:	2218      	movs	r2, #24
 800340a:	189b      	adds	r3, r3, r2
 800340c:	19db      	adds	r3, r3, r7
 800340e:	2201      	movs	r2, #1
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e11d      	b.n	8003650 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	6939      	ldr	r1, [r7, #16]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	000b      	movs	r3, r1
 8003422:	0e1b      	lsrs	r3, r3, #24
 8003424:	0010      	movs	r0, r2
 8003426:	0205      	lsls	r5, r0, #8
 8003428:	431d      	orrs	r5, r3
 800342a:	000b      	movs	r3, r1
 800342c:	021c      	lsls	r4, r3, #8
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68b8      	ldr	r0, [r7, #8]
 800343c:	68f9      	ldr	r1, [r7, #12]
 800343e:	1900      	adds	r0, r0, r4
 8003440:	4169      	adcs	r1, r5
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	2300      	movs	r3, #0
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f7fc ff02 	bl	8000258 <__aeabi_uldivmod>
 8003454:	0002      	movs	r2, r0
 8003456:	000b      	movs	r3, r1
 8003458:	0013      	movs	r3, r2
 800345a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800345c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800345e:	23c0      	movs	r3, #192	@ 0xc0
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	429a      	cmp	r2, r3
 8003464:	d309      	bcc.n	800347a <UART_SetConfig+0x302>
 8003466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003468:	2380      	movs	r3, #128	@ 0x80
 800346a:	035b      	lsls	r3, r3, #13
 800346c:	429a      	cmp	r2, r3
 800346e:	d204      	bcs.n	800347a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003476:	60da      	str	r2, [r3, #12]
 8003478:	e0ea      	b.n	8003650 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800347a:	231a      	movs	r3, #26
 800347c:	2218      	movs	r2, #24
 800347e:	189b      	adds	r3, r3, r2
 8003480:	19db      	adds	r3, r3, r7
 8003482:	2201      	movs	r2, #1
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e0e3      	b.n	8003650 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	2380      	movs	r3, #128	@ 0x80
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	429a      	cmp	r2, r3
 8003492:	d000      	beq.n	8003496 <UART_SetConfig+0x31e>
 8003494:	e085      	b.n	80035a2 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8003496:	231b      	movs	r3, #27
 8003498:	2218      	movs	r2, #24
 800349a:	189b      	adds	r3, r3, r2
 800349c:	19db      	adds	r3, r3, r7
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d837      	bhi.n	8003514 <UART_SetConfig+0x39c>
 80034a4:	009a      	lsls	r2, r3, #2
 80034a6:	4b10      	ldr	r3, [pc, #64]	@ (80034e8 <UART_SetConfig+0x370>)
 80034a8:	18d3      	adds	r3, r2, r3
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ae:	f7fe fe11 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 80034b2:	0003      	movs	r3, r0
 80034b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80034b6:	e036      	b.n	8003526 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b8:	f7fe fe22 	bl	8002100 <HAL_RCC_GetPCLK2Freq>
 80034bc:	0003      	movs	r3, r0
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80034c0:	e031      	b.n	8003526 <UART_SetConfig+0x3ae>
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	efff69f3 	.word	0xefff69f3
 80034c8:	ffffcfff 	.word	0xffffcfff
 80034cc:	40004800 	.word	0x40004800
 80034d0:	fffff4ff 	.word	0xfffff4ff
 80034d4:	40013800 	.word	0x40013800
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40004400 	.word	0x40004400
 80034e0:	003d0900 	.word	0x003d0900
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	08004a94 	.word	0x08004a94
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034ec:	4b60      	ldr	r3, [pc, #384]	@ (8003670 <UART_SetConfig+0x4f8>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2210      	movs	r2, #16
 80034f2:	4013      	ands	r3, r2
 80034f4:	d002      	beq.n	80034fc <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80034f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003674 <UART_SetConfig+0x4fc>)
 80034f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80034fa:	e014      	b.n	8003526 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80034fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003678 <UART_SetConfig+0x500>)
 80034fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003500:	e011      	b.n	8003526 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003502:	f7fe fd57 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8003506:	0003      	movs	r3, r0
 8003508:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800350a:	e00c      	b.n	8003526 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003512:	e008      	b.n	8003526 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003518:	231a      	movs	r3, #26
 800351a:	2218      	movs	r2, #24
 800351c:	189b      	adds	r3, r3, r2
 800351e:	19db      	adds	r3, r3, r7
 8003520:	2201      	movs	r2, #1
 8003522:	701a      	strb	r2, [r3, #0]
        break;
 8003524:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d100      	bne.n	800352e <UART_SetConfig+0x3b6>
 800352c:	e090      	b.n	8003650 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800352e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003530:	005a      	lsls	r2, r3, #1
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	085b      	lsrs	r3, r3, #1
 8003538:	18d2      	adds	r2, r2, r3
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	0019      	movs	r1, r3
 8003540:	0010      	movs	r0, r2
 8003542:	f7fc fdfd 	bl	8000140 <__udivsi3>
 8003546:	0003      	movs	r3, r0
 8003548:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800354a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354c:	2b0f      	cmp	r3, #15
 800354e:	d921      	bls.n	8003594 <UART_SetConfig+0x41c>
 8003550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003552:	2380      	movs	r3, #128	@ 0x80
 8003554:	025b      	lsls	r3, r3, #9
 8003556:	429a      	cmp	r2, r3
 8003558:	d21c      	bcs.n	8003594 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800355a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355c:	b29a      	uxth	r2, r3
 800355e:	200e      	movs	r0, #14
 8003560:	2418      	movs	r4, #24
 8003562:	1903      	adds	r3, r0, r4
 8003564:	19db      	adds	r3, r3, r7
 8003566:	210f      	movs	r1, #15
 8003568:	438a      	bics	r2, r1
 800356a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800356c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	b29b      	uxth	r3, r3
 8003572:	2207      	movs	r2, #7
 8003574:	4013      	ands	r3, r2
 8003576:	b299      	uxth	r1, r3
 8003578:	1903      	adds	r3, r0, r4
 800357a:	19db      	adds	r3, r3, r7
 800357c:	1902      	adds	r2, r0, r4
 800357e:	19d2      	adds	r2, r2, r7
 8003580:	8812      	ldrh	r2, [r2, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1902      	adds	r2, r0, r4
 800358c:	19d2      	adds	r2, r2, r7
 800358e:	8812      	ldrh	r2, [r2, #0]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	e05d      	b.n	8003650 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003594:	231a      	movs	r3, #26
 8003596:	2218      	movs	r2, #24
 8003598:	189b      	adds	r3, r3, r2
 800359a:	19db      	adds	r3, r3, r7
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e056      	b.n	8003650 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035a2:	231b      	movs	r3, #27
 80035a4:	2218      	movs	r2, #24
 80035a6:	189b      	adds	r3, r3, r2
 80035a8:	19db      	adds	r3, r3, r7
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d822      	bhi.n	80035f6 <UART_SetConfig+0x47e>
 80035b0:	009a      	lsls	r2, r3, #2
 80035b2:	4b32      	ldr	r3, [pc, #200]	@ (800367c <UART_SetConfig+0x504>)
 80035b4:	18d3      	adds	r3, r2, r3
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ba:	f7fe fd8b 	bl	80020d4 <HAL_RCC_GetPCLK1Freq>
 80035be:	0003      	movs	r3, r0
 80035c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035c2:	e021      	b.n	8003608 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035c4:	f7fe fd9c 	bl	8002100 <HAL_RCC_GetPCLK2Freq>
 80035c8:	0003      	movs	r3, r0
 80035ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035cc:	e01c      	b.n	8003608 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035ce:	4b28      	ldr	r3, [pc, #160]	@ (8003670 <UART_SetConfig+0x4f8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2210      	movs	r2, #16
 80035d4:	4013      	ands	r3, r2
 80035d6:	d002      	beq.n	80035de <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035d8:	4b26      	ldr	r3, [pc, #152]	@ (8003674 <UART_SetConfig+0x4fc>)
 80035da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035dc:	e014      	b.n	8003608 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80035de:	4b26      	ldr	r3, [pc, #152]	@ (8003678 <UART_SetConfig+0x500>)
 80035e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035e2:	e011      	b.n	8003608 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e4:	f7fe fce6 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 80035e8:	0003      	movs	r3, r0
 80035ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035ec:	e00c      	b.n	8003608 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035f4:	e008      	b.n	8003608 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80035fa:	231a      	movs	r3, #26
 80035fc:	2218      	movs	r2, #24
 80035fe:	189b      	adds	r3, r3, r2
 8003600:	19db      	adds	r3, r3, r7
 8003602:	2201      	movs	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
        break;
 8003606:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d020      	beq.n	8003650 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	085a      	lsrs	r2, r3, #1
 8003614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003616:	18d2      	adds	r2, r2, r3
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	0019      	movs	r1, r3
 800361e:	0010      	movs	r0, r2
 8003620:	f7fc fd8e 	bl	8000140 <__udivsi3>
 8003624:	0003      	movs	r3, r0
 8003626:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362a:	2b0f      	cmp	r3, #15
 800362c:	d90a      	bls.n	8003644 <UART_SetConfig+0x4cc>
 800362e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003630:	2380      	movs	r3, #128	@ 0x80
 8003632:	025b      	lsls	r3, r3, #9
 8003634:	429a      	cmp	r2, r3
 8003636:	d205      	bcs.n	8003644 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363a:	b29a      	uxth	r2, r3
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60da      	str	r2, [r3, #12]
 8003642:	e005      	b.n	8003650 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003644:	231a      	movs	r3, #26
 8003646:	2218      	movs	r2, #24
 8003648:	189b      	adds	r3, r3, r2
 800364a:	19db      	adds	r3, r3, r7
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2200      	movs	r2, #0
 8003654:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2200      	movs	r2, #0
 800365a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800365c:	231a      	movs	r3, #26
 800365e:	2218      	movs	r2, #24
 8003660:	189b      	adds	r3, r3, r2
 8003662:	19db      	adds	r3, r3, r7
 8003664:	781b      	ldrb	r3, [r3, #0]
}
 8003666:	0018      	movs	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	b00e      	add	sp, #56	@ 0x38
 800366c:	bdb0      	pop	{r4, r5, r7, pc}
 800366e:	46c0      	nop			@ (mov r8, r8)
 8003670:	40021000 	.word	0x40021000
 8003674:	003d0900 	.word	0x003d0900
 8003678:	00f42400 	.word	0x00f42400
 800367c:	08004ab8 	.word	0x08004ab8

08003680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	2208      	movs	r2, #8
 800368e:	4013      	ands	r3, r2
 8003690:	d00b      	beq.n	80036aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4a4a      	ldr	r2, [pc, #296]	@ (80037c4 <UART_AdvFeatureConfig+0x144>)
 800369a:	4013      	ands	r3, r2
 800369c:	0019      	movs	r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	2201      	movs	r2, #1
 80036b0:	4013      	ands	r3, r2
 80036b2:	d00b      	beq.n	80036cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4a43      	ldr	r2, [pc, #268]	@ (80037c8 <UART_AdvFeatureConfig+0x148>)
 80036bc:	4013      	ands	r3, r2
 80036be:	0019      	movs	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	2202      	movs	r2, #2
 80036d2:	4013      	ands	r3, r2
 80036d4:	d00b      	beq.n	80036ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a3b      	ldr	r2, [pc, #236]	@ (80037cc <UART_AdvFeatureConfig+0x14c>)
 80036de:	4013      	ands	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	2204      	movs	r2, #4
 80036f4:	4013      	ands	r3, r2
 80036f6:	d00b      	beq.n	8003710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4a34      	ldr	r2, [pc, #208]	@ (80037d0 <UART_AdvFeatureConfig+0x150>)
 8003700:	4013      	ands	r3, r2
 8003702:	0019      	movs	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003714:	2210      	movs	r2, #16
 8003716:	4013      	ands	r3, r2
 8003718:	d00b      	beq.n	8003732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4a2c      	ldr	r2, [pc, #176]	@ (80037d4 <UART_AdvFeatureConfig+0x154>)
 8003722:	4013      	ands	r3, r2
 8003724:	0019      	movs	r1, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	2220      	movs	r2, #32
 8003738:	4013      	ands	r3, r2
 800373a:	d00b      	beq.n	8003754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	4a25      	ldr	r2, [pc, #148]	@ (80037d8 <UART_AdvFeatureConfig+0x158>)
 8003744:	4013      	ands	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	2240      	movs	r2, #64	@ 0x40
 800375a:	4013      	ands	r3, r2
 800375c:	d01d      	beq.n	800379a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4a1d      	ldr	r2, [pc, #116]	@ (80037dc <UART_AdvFeatureConfig+0x15c>)
 8003766:	4013      	ands	r3, r2
 8003768:	0019      	movs	r1, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800377a:	2380      	movs	r3, #128	@ 0x80
 800377c:	035b      	lsls	r3, r3, #13
 800377e:	429a      	cmp	r2, r3
 8003780:	d10b      	bne.n	800379a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a15      	ldr	r2, [pc, #84]	@ (80037e0 <UART_AdvFeatureConfig+0x160>)
 800378a:	4013      	ands	r3, r2
 800378c:	0019      	movs	r1, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	2280      	movs	r2, #128	@ 0x80
 80037a0:	4013      	ands	r3, r2
 80037a2:	d00b      	beq.n	80037bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4a0e      	ldr	r2, [pc, #56]	@ (80037e4 <UART_AdvFeatureConfig+0x164>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	0019      	movs	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  }
}
 80037bc:	46c0      	nop			@ (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	ffff7fff 	.word	0xffff7fff
 80037c8:	fffdffff 	.word	0xfffdffff
 80037cc:	fffeffff 	.word	0xfffeffff
 80037d0:	fffbffff 	.word	0xfffbffff
 80037d4:	ffffefff 	.word	0xffffefff
 80037d8:	ffffdfff 	.word	0xffffdfff
 80037dc:	ffefffff 	.word	0xffefffff
 80037e0:	ff9fffff 	.word	0xff9fffff
 80037e4:	fff7ffff 	.word	0xfff7ffff

080037e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b092      	sub	sp, #72	@ 0x48
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2284      	movs	r2, #132	@ 0x84
 80037f4:	2100      	movs	r1, #0
 80037f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037f8:	f7fd fb70 	bl	8000edc <HAL_GetTick>
 80037fc:	0003      	movs	r3, r0
 80037fe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2208      	movs	r2, #8
 8003808:	4013      	ands	r3, r2
 800380a:	2b08      	cmp	r3, #8
 800380c:	d12c      	bne.n	8003868 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800380e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003810:	2280      	movs	r2, #128	@ 0x80
 8003812:	0391      	lsls	r1, r2, #14
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	4a46      	ldr	r2, [pc, #280]	@ (8003930 <UART_CheckIdleState+0x148>)
 8003818:	9200      	str	r2, [sp, #0]
 800381a:	2200      	movs	r2, #0
 800381c:	f000 f88c 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 8003820:	1e03      	subs	r3, r0, #0
 8003822:	d021      	beq.n	8003868 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003824:	f3ef 8310 	mrs	r3, PRIMASK
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800382c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800382e:	2301      	movs	r3, #1
 8003830:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003834:	f383 8810 	msr	PRIMASK, r3
}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2180      	movs	r1, #128	@ 0x80
 8003846:	438a      	bics	r2, r1
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003850:	f383 8810 	msr	PRIMASK, r3
}
 8003854:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2278      	movs	r2, #120	@ 0x78
 8003860:	2100      	movs	r1, #0
 8003862:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e05f      	b.n	8003928 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2204      	movs	r2, #4
 8003870:	4013      	ands	r3, r2
 8003872:	2b04      	cmp	r3, #4
 8003874:	d146      	bne.n	8003904 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003878:	2280      	movs	r2, #128	@ 0x80
 800387a:	03d1      	lsls	r1, r2, #15
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4a2c      	ldr	r2, [pc, #176]	@ (8003930 <UART_CheckIdleState+0x148>)
 8003880:	9200      	str	r2, [sp, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	f000 f858 	bl	8003938 <UART_WaitOnFlagUntilTimeout>
 8003888:	1e03      	subs	r3, r0, #0
 800388a:	d03b      	beq.n	8003904 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388c:	f3ef 8310 	mrs	r3, PRIMASK
 8003890:	60fb      	str	r3, [r7, #12]
  return(result);
 8003892:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003894:	637b      	str	r3, [r7, #52]	@ 0x34
 8003896:	2301      	movs	r3, #1
 8003898:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f383 8810 	msr	PRIMASK, r3
}
 80038a0:	46c0      	nop			@ (mov r8, r8)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4921      	ldr	r1, [pc, #132]	@ (8003934 <UART_CheckIdleState+0x14c>)
 80038ae:	400a      	ands	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f383 8810 	msr	PRIMASK, r3
}
 80038bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038be:	f3ef 8310 	mrs	r3, PRIMASK
 80038c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80038c4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80038c8:	2301      	movs	r3, #1
 80038ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f383 8810 	msr	PRIMASK, r3
}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2101      	movs	r1, #1
 80038e0:	438a      	bics	r2, r1
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2280      	movs	r2, #128	@ 0x80
 80038f4:	2120      	movs	r1, #32
 80038f6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2278      	movs	r2, #120	@ 0x78
 80038fc:	2100      	movs	r1, #0
 80038fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e011      	b.n	8003928 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2280      	movs	r2, #128	@ 0x80
 800390e:	2120      	movs	r1, #32
 8003910:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2278      	movs	r2, #120	@ 0x78
 8003922:	2100      	movs	r1, #0
 8003924:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b010      	add	sp, #64	@ 0x40
 800392e:	bd80      	pop	{r7, pc}
 8003930:	01ffffff 	.word	0x01ffffff
 8003934:	fffffedf 	.word	0xfffffedf

08003938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	1dfb      	adds	r3, r7, #7
 8003946:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003948:	e051      	b.n	80039ee <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	3301      	adds	r3, #1
 800394e:	d04e      	beq.n	80039ee <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003950:	f7fd fac4 	bl	8000edc <HAL_GetTick>
 8003954:	0002      	movs	r2, r0
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	429a      	cmp	r2, r3
 800395e:	d302      	bcc.n	8003966 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e051      	b.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2204      	movs	r2, #4
 8003972:	4013      	ands	r3, r2
 8003974:	d03b      	beq.n	80039ee <UART_WaitOnFlagUntilTimeout+0xb6>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b80      	cmp	r3, #128	@ 0x80
 800397a:	d038      	beq.n	80039ee <UART_WaitOnFlagUntilTimeout+0xb6>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b40      	cmp	r3, #64	@ 0x40
 8003980:	d035      	beq.n	80039ee <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	2208      	movs	r2, #8
 800398a:	4013      	ands	r3, r2
 800398c:	2b08      	cmp	r3, #8
 800398e:	d111      	bne.n	80039b4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2208      	movs	r2, #8
 8003996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	0018      	movs	r0, r3
 800399c:	f000 f906 	bl	8003bac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2284      	movs	r2, #132	@ 0x84
 80039a4:	2108      	movs	r1, #8
 80039a6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2278      	movs	r2, #120	@ 0x78
 80039ac:	2100      	movs	r1, #0
 80039ae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e02c      	b.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	2380      	movs	r3, #128	@ 0x80
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	401a      	ands	r2, r3
 80039c0:	2380      	movs	r3, #128	@ 0x80
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d112      	bne.n	80039ee <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2280      	movs	r2, #128	@ 0x80
 80039ce:	0112      	lsls	r2, r2, #4
 80039d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	0018      	movs	r0, r3
 80039d6:	f000 f8e9 	bl	8003bac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2284      	movs	r2, #132	@ 0x84
 80039de:	2120      	movs	r1, #32
 80039e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2278      	movs	r2, #120	@ 0x78
 80039e6:	2100      	movs	r1, #0
 80039e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e00f      	b.n	8003a0e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	4013      	ands	r3, r2
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	425a      	negs	r2, r3
 80039fe:	4153      	adcs	r3, r2
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	001a      	movs	r2, r3
 8003a04:	1dfb      	adds	r3, r7, #7
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d09e      	beq.n	800394a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	0018      	movs	r0, r3
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b004      	add	sp, #16
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b090      	sub	sp, #64	@ 0x40
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	1dbb      	adds	r3, r7, #6
 8003a24:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1dba      	adds	r2, r7, #6
 8003a30:	2158      	movs	r1, #88	@ 0x58
 8003a32:	8812      	ldrh	r2, [r2, #0]
 8003a34:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1dba      	adds	r2, r7, #6
 8003a3a:	215a      	movs	r1, #90	@ 0x5a
 8003a3c:	8812      	ldrh	r2, [r2, #0]
 8003a3e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	2380      	movs	r3, #128	@ 0x80
 8003a4c:	015b      	lsls	r3, r3, #5
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d10d      	bne.n	8003a6e <UART_Start_Receive_IT+0x56>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d104      	bne.n	8003a64 <UART_Start_Receive_IT+0x4c>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	225c      	movs	r2, #92	@ 0x5c
 8003a5e:	4950      	ldr	r1, [pc, #320]	@ (8003ba0 <UART_Start_Receive_IT+0x188>)
 8003a60:	5299      	strh	r1, [r3, r2]
 8003a62:	e02e      	b.n	8003ac2 <UART_Start_Receive_IT+0xaa>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	225c      	movs	r2, #92	@ 0x5c
 8003a68:	21ff      	movs	r1, #255	@ 0xff
 8003a6a:	5299      	strh	r1, [r3, r2]
 8003a6c:	e029      	b.n	8003ac2 <UART_Start_Receive_IT+0xaa>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10d      	bne.n	8003a92 <UART_Start_Receive_IT+0x7a>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d104      	bne.n	8003a88 <UART_Start_Receive_IT+0x70>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	225c      	movs	r2, #92	@ 0x5c
 8003a82:	21ff      	movs	r1, #255	@ 0xff
 8003a84:	5299      	strh	r1, [r3, r2]
 8003a86:	e01c      	b.n	8003ac2 <UART_Start_Receive_IT+0xaa>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	225c      	movs	r2, #92	@ 0x5c
 8003a8c:	217f      	movs	r1, #127	@ 0x7f
 8003a8e:	5299      	strh	r1, [r3, r2]
 8003a90:	e017      	b.n	8003ac2 <UART_Start_Receive_IT+0xaa>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	2380      	movs	r3, #128	@ 0x80
 8003a98:	055b      	lsls	r3, r3, #21
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d10d      	bne.n	8003aba <UART_Start_Receive_IT+0xa2>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d104      	bne.n	8003ab0 <UART_Start_Receive_IT+0x98>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	225c      	movs	r2, #92	@ 0x5c
 8003aaa:	217f      	movs	r1, #127	@ 0x7f
 8003aac:	5299      	strh	r1, [r3, r2]
 8003aae:	e008      	b.n	8003ac2 <UART_Start_Receive_IT+0xaa>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	225c      	movs	r2, #92	@ 0x5c
 8003ab4:	213f      	movs	r1, #63	@ 0x3f
 8003ab6:	5299      	strh	r1, [r3, r2]
 8003ab8:	e003      	b.n	8003ac2 <UART_Start_Receive_IT+0xaa>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	225c      	movs	r2, #92	@ 0x5c
 8003abe:	2100      	movs	r1, #0
 8003ac0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2284      	movs	r2, #132	@ 0x84
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2280      	movs	r2, #128	@ 0x80
 8003ace:	2122      	movs	r1, #34	@ 0x22
 8003ad0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003adc:	2301      	movs	r3, #1
 8003ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae2:	f383 8810 	msr	PRIMASK, r3
}
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2101      	movs	r1, #1
 8003af4:	430a      	orrs	r2, r1
 8003af6:	609a      	str	r2, [r3, #8]
 8003af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003afa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afe:	f383 8810 	msr	PRIMASK, r3
}
 8003b02:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	2380      	movs	r3, #128	@ 0x80
 8003b0a:	015b      	lsls	r3, r3, #5
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d107      	bne.n	8003b20 <UART_Start_Receive_IT+0x108>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d103      	bne.n	8003b20 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a22      	ldr	r2, [pc, #136]	@ (8003ba4 <UART_Start_Receive_IT+0x18c>)
 8003b1c:	669a      	str	r2, [r3, #104]	@ 0x68
 8003b1e:	e002      	b.n	8003b26 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a21      	ldr	r2, [pc, #132]	@ (8003ba8 <UART_Start_Receive_IT+0x190>)
 8003b24:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d019      	beq.n	8003b62 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b32:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b34:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b38:	2301      	movs	r3, #1
 8003b3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	f383 8810 	msr	PRIMASK, r3
}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2190      	movs	r1, #144	@ 0x90
 8003b50:	0049      	lsls	r1, r1, #1
 8003b52:	430a      	orrs	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5c:	f383 8810 	msr	PRIMASK, r3
}
 8003b60:	e018      	b.n	8003b94 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b62:	f3ef 8310 	mrs	r3, PRIMASK
 8003b66:	613b      	str	r3, [r7, #16]
  return(result);
 8003b68:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f383 8810 	msr	PRIMASK, r3
}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2120      	movs	r1, #32
 8003b84:	430a      	orrs	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	f383 8810 	msr	PRIMASK, r3
}
 8003b92:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	0018      	movs	r0, r3
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b010      	add	sp, #64	@ 0x40
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			@ (mov r8, r8)
 8003ba0:	000001ff 	.word	0x000001ff
 8003ba4:	08003eb5 	.word	0x08003eb5
 8003ba8:	08003cf1 	.word	0x08003cf1

08003bac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08e      	sub	sp, #56	@ 0x38
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb8:	617b      	str	r3, [r7, #20]
  return(result);
 8003bba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f383 8810 	msr	PRIMASK, r3
}
 8003bc8:	46c0      	nop			@ (mov r8, r8)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4926      	ldr	r1, [pc, #152]	@ (8003c70 <UART_EndRxTransfer+0xc4>)
 8003bd6:	400a      	ands	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f383 8810 	msr	PRIMASK, r3
}
 8003be4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bea:	623b      	str	r3, [r7, #32]
  return(result);
 8003bec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bee:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	f383 8810 	msr	PRIMASK, r3
}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2101      	movs	r1, #1
 8003c08:	438a      	bics	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c12:	f383 8810 	msr	PRIMASK, r3
}
 8003c16:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d118      	bne.n	8003c52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c20:	f3ef 8310 	mrs	r3, PRIMASK
 8003c24:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f383 8810 	msr	PRIMASK, r3
}
 8003c34:	46c0      	nop			@ (mov r8, r8)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2110      	movs	r1, #16
 8003c42:	438a      	bics	r2, r1
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f383 8810 	msr	PRIMASK, r3
}
 8003c50:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2280      	movs	r2, #128	@ 0x80
 8003c56:	2120      	movs	r1, #32
 8003c58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b00e      	add	sp, #56	@ 0x38
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	fffffedf 	.word	0xfffffedf

08003c74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	225a      	movs	r2, #90	@ 0x5a
 8003c86:	2100      	movs	r1, #0
 8003c88:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f7ff fa5f 	bl	8003150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b086      	sub	sp, #24
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	2301      	movs	r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f383 8810 	msr	PRIMASK, r3
}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2140      	movs	r1, #64	@ 0x40
 8003cc4:	438a      	bics	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f383 8810 	msr	PRIMASK, r3
}
 8003cd2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7ff fa2c 	bl	8003140 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ce8:	46c0      	nop			@ (mov r8, r8)
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b006      	add	sp, #24
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b094      	sub	sp, #80	@ 0x50
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003cf8:	204e      	movs	r0, #78	@ 0x4e
 8003cfa:	183b      	adds	r3, r7, r0
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	215c      	movs	r1, #92	@ 0x5c
 8003d00:	5a52      	ldrh	r2, [r2, r1]
 8003d02:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2280      	movs	r2, #128	@ 0x80
 8003d08:	589b      	ldr	r3, [r3, r2]
 8003d0a:	2b22      	cmp	r3, #34	@ 0x22
 8003d0c:	d000      	beq.n	8003d10 <UART_RxISR_8BIT+0x20>
 8003d0e:	e0bf      	b.n	8003e90 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d16:	214c      	movs	r1, #76	@ 0x4c
 8003d18:	187b      	adds	r3, r7, r1
 8003d1a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d1c:	187b      	adds	r3, r7, r1
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	183b      	adds	r3, r7, r0
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b2d9      	uxtb	r1, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2c:	400a      	ands	r2, r1
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	225a      	movs	r2, #90	@ 0x5a
 8003d40:	5a9b      	ldrh	r3, [r3, r2]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b299      	uxth	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	225a      	movs	r2, #90	@ 0x5a
 8003d4c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	225a      	movs	r2, #90	@ 0x5a
 8003d52:	5a9b      	ldrh	r3, [r3, r2]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d000      	beq.n	8003d5c <UART_RxISR_8BIT+0x6c>
 8003d5a:	e0a1      	b.n	8003ea0 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d60:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d66:	2301      	movs	r3, #1
 8003d68:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6c:	f383 8810 	msr	PRIMASK, r3
}
 8003d70:	46c0      	nop			@ (mov r8, r8)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	494a      	ldr	r1, [pc, #296]	@ (8003ea8 <UART_RxISR_8BIT+0x1b8>)
 8003d7e:	400a      	ands	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d88:	f383 8810 	msr	PRIMASK, r3
}
 8003d8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d92:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d96:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d98:	2301      	movs	r3, #1
 8003d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9e:	f383 8810 	msr	PRIMASK, r3
}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	438a      	bics	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dba:	f383 8810 	msr	PRIMASK, r3
}
 8003dbe:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2280      	movs	r2, #128	@ 0x80
 8003dc4:	2120      	movs	r1, #32
 8003dc6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a34      	ldr	r2, [pc, #208]	@ (8003eac <UART_RxISR_8BIT+0x1bc>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01f      	beq.n	8003e1e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	2380      	movs	r3, #128	@ 0x80
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	4013      	ands	r3, r2
 8003dea:	d018      	beq.n	8003e1e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dec:	f3ef 8310 	mrs	r3, PRIMASK
 8003df0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003df2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003df4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003df6:	2301      	movs	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f383 8810 	msr	PRIMASK, r3
}
 8003e00:	46c0      	nop			@ (mov r8, r8)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4928      	ldr	r1, [pc, #160]	@ (8003eb0 <UART_RxISR_8BIT+0x1c0>)
 8003e0e:	400a      	ands	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e14:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	f383 8810 	msr	PRIMASK, r3
}
 8003e1c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d12f      	bne.n	8003e86 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e30:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e32:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e36:	2301      	movs	r3, #1
 8003e38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f383 8810 	msr	PRIMASK, r3
}
 8003e40:	46c0      	nop			@ (mov r8, r8)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2110      	movs	r1, #16
 8003e4e:	438a      	bics	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f383 8810 	msr	PRIMASK, r3
}
 8003e5c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	2210      	movs	r2, #16
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d103      	bne.n	8003e74 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2210      	movs	r2, #16
 8003e72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2258      	movs	r2, #88	@ 0x58
 8003e78:	5a9a      	ldrh	r2, [r3, r2]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	0011      	movs	r1, r2
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f7ff f96e 	bl	8003160 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e84:	e00c      	b.n	8003ea0 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7fc fe75 	bl	8000b78 <HAL_UART_RxCpltCallback>
}
 8003e8e:	e007      	b.n	8003ea0 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2108      	movs	r1, #8
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	619a      	str	r2, [r3, #24]
}
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b014      	add	sp, #80	@ 0x50
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	fffffedf 	.word	0xfffffedf
 8003eac:	40004800 	.word	0x40004800
 8003eb0:	fbffffff 	.word	0xfbffffff

08003eb4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b094      	sub	sp, #80	@ 0x50
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ebc:	204e      	movs	r0, #78	@ 0x4e
 8003ebe:	183b      	adds	r3, r7, r0
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	215c      	movs	r1, #92	@ 0x5c
 8003ec4:	5a52      	ldrh	r2, [r2, r1]
 8003ec6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2280      	movs	r2, #128	@ 0x80
 8003ecc:	589b      	ldr	r3, [r3, r2]
 8003ece:	2b22      	cmp	r3, #34	@ 0x22
 8003ed0:	d000      	beq.n	8003ed4 <UART_RxISR_16BIT+0x20>
 8003ed2:	e0bf      	b.n	8004054 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eda:	214c      	movs	r1, #76	@ 0x4c
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003ee6:	187b      	adds	r3, r7, r1
 8003ee8:	183a      	adds	r2, r7, r0
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	8812      	ldrh	r2, [r2, #0]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ef4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efa:	1c9a      	adds	r2, r3, #2
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	225a      	movs	r2, #90	@ 0x5a
 8003f04:	5a9b      	ldrh	r3, [r3, r2]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b299      	uxth	r1, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	225a      	movs	r2, #90	@ 0x5a
 8003f10:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	225a      	movs	r2, #90	@ 0x5a
 8003f16:	5a9b      	ldrh	r3, [r3, r2]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d000      	beq.n	8003f20 <UART_RxISR_16BIT+0x6c>
 8003f1e:	e0a1      	b.n	8004064 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f20:	f3ef 8310 	mrs	r3, PRIMASK
 8003f24:	623b      	str	r3, [r7, #32]
  return(result);
 8003f26:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	f383 8810 	msr	PRIMASK, r3
}
 8003f34:	46c0      	nop			@ (mov r8, r8)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	494a      	ldr	r1, [pc, #296]	@ (800406c <UART_RxISR_16BIT+0x1b8>)
 8003f42:	400a      	ands	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4c:	f383 8810 	msr	PRIMASK, r3
}
 8003f50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f52:	f3ef 8310 	mrs	r3, PRIMASK
 8003f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f62:	f383 8810 	msr	PRIMASK, r3
}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2101      	movs	r1, #1
 8003f74:	438a      	bics	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7e:	f383 8810 	msr	PRIMASK, r3
}
 8003f82:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2280      	movs	r2, #128	@ 0x80
 8003f88:	2120      	movs	r1, #32
 8003f8a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a34      	ldr	r2, [pc, #208]	@ (8004070 <UART_RxISR_16BIT+0x1bc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d01f      	beq.n	8003fe2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	2380      	movs	r3, #128	@ 0x80
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	4013      	ands	r3, r2
 8003fae:	d018      	beq.n	8003fe2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb4:	617b      	str	r3, [r7, #20]
  return(result);
 8003fb6:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fba:	2301      	movs	r3, #1
 8003fbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	f383 8810 	msr	PRIMASK, r3
}
 8003fc4:	46c0      	nop			@ (mov r8, r8)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4928      	ldr	r1, [pc, #160]	@ (8004074 <UART_RxISR_16BIT+0x1c0>)
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f383 8810 	msr	PRIMASK, r3
}
 8003fe0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d12f      	bne.n	800404a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ff6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f383 8810 	msr	PRIMASK, r3
}
 8004004:	46c0      	nop			@ (mov r8, r8)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2110      	movs	r1, #16
 8004012:	438a      	bics	r2, r1
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004018:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f383 8810 	msr	PRIMASK, r3
}
 8004020:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2210      	movs	r2, #16
 800402a:	4013      	ands	r3, r2
 800402c:	2b10      	cmp	r3, #16
 800402e:	d103      	bne.n	8004038 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2210      	movs	r2, #16
 8004036:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2258      	movs	r2, #88	@ 0x58
 800403c:	5a9a      	ldrh	r2, [r3, r2]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	0011      	movs	r1, r2
 8004042:	0018      	movs	r0, r3
 8004044:	f7ff f88c 	bl	8003160 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004048:	e00c      	b.n	8004064 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0018      	movs	r0, r3
 800404e:	f7fc fd93 	bl	8000b78 <HAL_UART_RxCpltCallback>
}
 8004052:	e007      	b.n	8004064 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2108      	movs	r1, #8
 8004060:	430a      	orrs	r2, r1
 8004062:	619a      	str	r2, [r3, #24]
}
 8004064:	46c0      	nop			@ (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	b014      	add	sp, #80	@ 0x50
 800406a:	bd80      	pop	{r7, pc}
 800406c:	fffffedf 	.word	0xfffffedf
 8004070:	40004800 	.word	0x40004800
 8004074:	fbffffff 	.word	0xfbffffff

08004078 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004080:	46c0      	nop			@ (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	b002      	add	sp, #8
 8004086:	bd80      	pop	{r7, pc}

08004088 <siprintf>:
 8004088:	b40e      	push	{r1, r2, r3}
 800408a:	b510      	push	{r4, lr}
 800408c:	2400      	movs	r4, #0
 800408e:	490c      	ldr	r1, [pc, #48]	@ (80040c0 <siprintf+0x38>)
 8004090:	b09d      	sub	sp, #116	@ 0x74
 8004092:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004094:	9002      	str	r0, [sp, #8]
 8004096:	9006      	str	r0, [sp, #24]
 8004098:	9107      	str	r1, [sp, #28]
 800409a:	9104      	str	r1, [sp, #16]
 800409c:	4809      	ldr	r0, [pc, #36]	@ (80040c4 <siprintf+0x3c>)
 800409e:	490a      	ldr	r1, [pc, #40]	@ (80040c8 <siprintf+0x40>)
 80040a0:	cb04      	ldmia	r3!, {r2}
 80040a2:	9105      	str	r1, [sp, #20]
 80040a4:	6800      	ldr	r0, [r0, #0]
 80040a6:	a902      	add	r1, sp, #8
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80040ac:	f000 f9a6 	bl	80043fc <_svfiprintf_r>
 80040b0:	9b02      	ldr	r3, [sp, #8]
 80040b2:	701c      	strb	r4, [r3, #0]
 80040b4:	b01d      	add	sp, #116	@ 0x74
 80040b6:	bc10      	pop	{r4}
 80040b8:	bc08      	pop	{r3}
 80040ba:	b003      	add	sp, #12
 80040bc:	4718      	bx	r3
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	7fffffff 	.word	0x7fffffff
 80040c4:	2000021c 	.word	0x2000021c
 80040c8:	ffff0208 	.word	0xffff0208

080040cc <memset>:
 80040cc:	0003      	movs	r3, r0
 80040ce:	1882      	adds	r2, r0, r2
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d100      	bne.n	80040d6 <memset+0xa>
 80040d4:	4770      	bx	lr
 80040d6:	7019      	strb	r1, [r3, #0]
 80040d8:	3301      	adds	r3, #1
 80040da:	e7f9      	b.n	80040d0 <memset+0x4>

080040dc <__errno>:
 80040dc:	4b01      	ldr	r3, [pc, #4]	@ (80040e4 <__errno+0x8>)
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	4770      	bx	lr
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	2000021c 	.word	0x2000021c

080040e8 <__libc_init_array>:
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	2600      	movs	r6, #0
 80040ec:	4c0c      	ldr	r4, [pc, #48]	@ (8004120 <__libc_init_array+0x38>)
 80040ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004124 <__libc_init_array+0x3c>)
 80040f0:	1b64      	subs	r4, r4, r5
 80040f2:	10a4      	asrs	r4, r4, #2
 80040f4:	42a6      	cmp	r6, r4
 80040f6:	d109      	bne.n	800410c <__libc_init_array+0x24>
 80040f8:	2600      	movs	r6, #0
 80040fa:	f000 fc69 	bl	80049d0 <_init>
 80040fe:	4c0a      	ldr	r4, [pc, #40]	@ (8004128 <__libc_init_array+0x40>)
 8004100:	4d0a      	ldr	r5, [pc, #40]	@ (800412c <__libc_init_array+0x44>)
 8004102:	1b64      	subs	r4, r4, r5
 8004104:	10a4      	asrs	r4, r4, #2
 8004106:	42a6      	cmp	r6, r4
 8004108:	d105      	bne.n	8004116 <__libc_init_array+0x2e>
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	00b3      	lsls	r3, r6, #2
 800410e:	58eb      	ldr	r3, [r5, r3]
 8004110:	4798      	blx	r3
 8004112:	3601      	adds	r6, #1
 8004114:	e7ee      	b.n	80040f4 <__libc_init_array+0xc>
 8004116:	00b3      	lsls	r3, r6, #2
 8004118:	58eb      	ldr	r3, [r5, r3]
 800411a:	4798      	blx	r3
 800411c:	3601      	adds	r6, #1
 800411e:	e7f2      	b.n	8004106 <__libc_init_array+0x1e>
 8004120:	08004b18 	.word	0x08004b18
 8004124:	08004b18 	.word	0x08004b18
 8004128:	08004b1c 	.word	0x08004b1c
 800412c:	08004b18 	.word	0x08004b18

08004130 <__retarget_lock_acquire_recursive>:
 8004130:	4770      	bx	lr

08004132 <__retarget_lock_release_recursive>:
 8004132:	4770      	bx	lr

08004134 <strcpy>:
 8004134:	0003      	movs	r3, r0
 8004136:	780a      	ldrb	r2, [r1, #0]
 8004138:	3101      	adds	r1, #1
 800413a:	701a      	strb	r2, [r3, #0]
 800413c:	3301      	adds	r3, #1
 800413e:	2a00      	cmp	r2, #0
 8004140:	d1f9      	bne.n	8004136 <strcpy+0x2>
 8004142:	4770      	bx	lr

08004144 <_free_r>:
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	0005      	movs	r5, r0
 8004148:	1e0c      	subs	r4, r1, #0
 800414a:	d010      	beq.n	800416e <_free_r+0x2a>
 800414c:	3c04      	subs	r4, #4
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	da00      	bge.n	8004156 <_free_r+0x12>
 8004154:	18e4      	adds	r4, r4, r3
 8004156:	0028      	movs	r0, r5
 8004158:	f000 f8e0 	bl	800431c <__malloc_lock>
 800415c:	4a1d      	ldr	r2, [pc, #116]	@ (80041d4 <_free_r+0x90>)
 800415e:	6813      	ldr	r3, [r2, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d105      	bne.n	8004170 <_free_r+0x2c>
 8004164:	6063      	str	r3, [r4, #4]
 8004166:	6014      	str	r4, [r2, #0]
 8004168:	0028      	movs	r0, r5
 800416a:	f000 f8df 	bl	800432c <__malloc_unlock>
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	42a3      	cmp	r3, r4
 8004172:	d908      	bls.n	8004186 <_free_r+0x42>
 8004174:	6820      	ldr	r0, [r4, #0]
 8004176:	1821      	adds	r1, r4, r0
 8004178:	428b      	cmp	r3, r1
 800417a:	d1f3      	bne.n	8004164 <_free_r+0x20>
 800417c:	6819      	ldr	r1, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	1809      	adds	r1, r1, r0
 8004182:	6021      	str	r1, [r4, #0]
 8004184:	e7ee      	b.n	8004164 <_free_r+0x20>
 8004186:	001a      	movs	r2, r3
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <_free_r+0x4e>
 800418e:	42a3      	cmp	r3, r4
 8004190:	d9f9      	bls.n	8004186 <_free_r+0x42>
 8004192:	6811      	ldr	r1, [r2, #0]
 8004194:	1850      	adds	r0, r2, r1
 8004196:	42a0      	cmp	r0, r4
 8004198:	d10b      	bne.n	80041b2 <_free_r+0x6e>
 800419a:	6820      	ldr	r0, [r4, #0]
 800419c:	1809      	adds	r1, r1, r0
 800419e:	1850      	adds	r0, r2, r1
 80041a0:	6011      	str	r1, [r2, #0]
 80041a2:	4283      	cmp	r3, r0
 80041a4:	d1e0      	bne.n	8004168 <_free_r+0x24>
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	1841      	adds	r1, r0, r1
 80041ac:	6011      	str	r1, [r2, #0]
 80041ae:	6053      	str	r3, [r2, #4]
 80041b0:	e7da      	b.n	8004168 <_free_r+0x24>
 80041b2:	42a0      	cmp	r0, r4
 80041b4:	d902      	bls.n	80041bc <_free_r+0x78>
 80041b6:	230c      	movs	r3, #12
 80041b8:	602b      	str	r3, [r5, #0]
 80041ba:	e7d5      	b.n	8004168 <_free_r+0x24>
 80041bc:	6820      	ldr	r0, [r4, #0]
 80041be:	1821      	adds	r1, r4, r0
 80041c0:	428b      	cmp	r3, r1
 80041c2:	d103      	bne.n	80041cc <_free_r+0x88>
 80041c4:	6819      	ldr	r1, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	1809      	adds	r1, r1, r0
 80041ca:	6021      	str	r1, [r4, #0]
 80041cc:	6063      	str	r3, [r4, #4]
 80041ce:	6054      	str	r4, [r2, #4]
 80041d0:	e7ca      	b.n	8004168 <_free_r+0x24>
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	200004b4 	.word	0x200004b4

080041d8 <sbrk_aligned>:
 80041d8:	b570      	push	{r4, r5, r6, lr}
 80041da:	4e0f      	ldr	r6, [pc, #60]	@ (8004218 <sbrk_aligned+0x40>)
 80041dc:	000d      	movs	r5, r1
 80041de:	6831      	ldr	r1, [r6, #0]
 80041e0:	0004      	movs	r4, r0
 80041e2:	2900      	cmp	r1, #0
 80041e4:	d102      	bne.n	80041ec <sbrk_aligned+0x14>
 80041e6:	f000 fb95 	bl	8004914 <_sbrk_r>
 80041ea:	6030      	str	r0, [r6, #0]
 80041ec:	0029      	movs	r1, r5
 80041ee:	0020      	movs	r0, r4
 80041f0:	f000 fb90 	bl	8004914 <_sbrk_r>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d103      	bne.n	8004200 <sbrk_aligned+0x28>
 80041f8:	2501      	movs	r5, #1
 80041fa:	426d      	negs	r5, r5
 80041fc:	0028      	movs	r0, r5
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	2303      	movs	r3, #3
 8004202:	1cc5      	adds	r5, r0, #3
 8004204:	439d      	bics	r5, r3
 8004206:	42a8      	cmp	r0, r5
 8004208:	d0f8      	beq.n	80041fc <sbrk_aligned+0x24>
 800420a:	1a29      	subs	r1, r5, r0
 800420c:	0020      	movs	r0, r4
 800420e:	f000 fb81 	bl	8004914 <_sbrk_r>
 8004212:	3001      	adds	r0, #1
 8004214:	d1f2      	bne.n	80041fc <sbrk_aligned+0x24>
 8004216:	e7ef      	b.n	80041f8 <sbrk_aligned+0x20>
 8004218:	200004b0 	.word	0x200004b0

0800421c <_malloc_r>:
 800421c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800421e:	2203      	movs	r2, #3
 8004220:	1ccb      	adds	r3, r1, #3
 8004222:	4393      	bics	r3, r2
 8004224:	3308      	adds	r3, #8
 8004226:	0005      	movs	r5, r0
 8004228:	001f      	movs	r7, r3
 800422a:	2b0c      	cmp	r3, #12
 800422c:	d234      	bcs.n	8004298 <_malloc_r+0x7c>
 800422e:	270c      	movs	r7, #12
 8004230:	42b9      	cmp	r1, r7
 8004232:	d833      	bhi.n	800429c <_malloc_r+0x80>
 8004234:	0028      	movs	r0, r5
 8004236:	f000 f871 	bl	800431c <__malloc_lock>
 800423a:	4e37      	ldr	r6, [pc, #220]	@ (8004318 <_malloc_r+0xfc>)
 800423c:	6833      	ldr	r3, [r6, #0]
 800423e:	001c      	movs	r4, r3
 8004240:	2c00      	cmp	r4, #0
 8004242:	d12f      	bne.n	80042a4 <_malloc_r+0x88>
 8004244:	0039      	movs	r1, r7
 8004246:	0028      	movs	r0, r5
 8004248:	f7ff ffc6 	bl	80041d8 <sbrk_aligned>
 800424c:	0004      	movs	r4, r0
 800424e:	1c43      	adds	r3, r0, #1
 8004250:	d15f      	bne.n	8004312 <_malloc_r+0xf6>
 8004252:	6834      	ldr	r4, [r6, #0]
 8004254:	9400      	str	r4, [sp, #0]
 8004256:	9b00      	ldr	r3, [sp, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d14a      	bne.n	80042f2 <_malloc_r+0xd6>
 800425c:	2c00      	cmp	r4, #0
 800425e:	d052      	beq.n	8004306 <_malloc_r+0xea>
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	0028      	movs	r0, r5
 8004264:	18e3      	adds	r3, r4, r3
 8004266:	9900      	ldr	r1, [sp, #0]
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	f000 fb53 	bl	8004914 <_sbrk_r>
 800426e:	9b01      	ldr	r3, [sp, #4]
 8004270:	4283      	cmp	r3, r0
 8004272:	d148      	bne.n	8004306 <_malloc_r+0xea>
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	0028      	movs	r0, r5
 8004278:	1aff      	subs	r7, r7, r3
 800427a:	0039      	movs	r1, r7
 800427c:	f7ff ffac 	bl	80041d8 <sbrk_aligned>
 8004280:	3001      	adds	r0, #1
 8004282:	d040      	beq.n	8004306 <_malloc_r+0xea>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	19db      	adds	r3, r3, r7
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	6833      	ldr	r3, [r6, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	2a00      	cmp	r2, #0
 8004290:	d133      	bne.n	80042fa <_malloc_r+0xde>
 8004292:	9b00      	ldr	r3, [sp, #0]
 8004294:	6033      	str	r3, [r6, #0]
 8004296:	e019      	b.n	80042cc <_malloc_r+0xb0>
 8004298:	2b00      	cmp	r3, #0
 800429a:	dac9      	bge.n	8004230 <_malloc_r+0x14>
 800429c:	230c      	movs	r3, #12
 800429e:	602b      	str	r3, [r5, #0]
 80042a0:	2000      	movs	r0, #0
 80042a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042a4:	6821      	ldr	r1, [r4, #0]
 80042a6:	1bc9      	subs	r1, r1, r7
 80042a8:	d420      	bmi.n	80042ec <_malloc_r+0xd0>
 80042aa:	290b      	cmp	r1, #11
 80042ac:	d90a      	bls.n	80042c4 <_malloc_r+0xa8>
 80042ae:	19e2      	adds	r2, r4, r7
 80042b0:	6027      	str	r7, [r4, #0]
 80042b2:	42a3      	cmp	r3, r4
 80042b4:	d104      	bne.n	80042c0 <_malloc_r+0xa4>
 80042b6:	6032      	str	r2, [r6, #0]
 80042b8:	6863      	ldr	r3, [r4, #4]
 80042ba:	6011      	str	r1, [r2, #0]
 80042bc:	6053      	str	r3, [r2, #4]
 80042be:	e005      	b.n	80042cc <_malloc_r+0xb0>
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	e7f9      	b.n	80042b8 <_malloc_r+0x9c>
 80042c4:	6862      	ldr	r2, [r4, #4]
 80042c6:	42a3      	cmp	r3, r4
 80042c8:	d10e      	bne.n	80042e8 <_malloc_r+0xcc>
 80042ca:	6032      	str	r2, [r6, #0]
 80042cc:	0028      	movs	r0, r5
 80042ce:	f000 f82d 	bl	800432c <__malloc_unlock>
 80042d2:	0020      	movs	r0, r4
 80042d4:	2207      	movs	r2, #7
 80042d6:	300b      	adds	r0, #11
 80042d8:	1d23      	adds	r3, r4, #4
 80042da:	4390      	bics	r0, r2
 80042dc:	1ac2      	subs	r2, r0, r3
 80042de:	4298      	cmp	r0, r3
 80042e0:	d0df      	beq.n	80042a2 <_malloc_r+0x86>
 80042e2:	1a1b      	subs	r3, r3, r0
 80042e4:	50a3      	str	r3, [r4, r2]
 80042e6:	e7dc      	b.n	80042a2 <_malloc_r+0x86>
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	e7ef      	b.n	80042cc <_malloc_r+0xb0>
 80042ec:	0023      	movs	r3, r4
 80042ee:	6864      	ldr	r4, [r4, #4]
 80042f0:	e7a6      	b.n	8004240 <_malloc_r+0x24>
 80042f2:	9c00      	ldr	r4, [sp, #0]
 80042f4:	6863      	ldr	r3, [r4, #4]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	e7ad      	b.n	8004256 <_malloc_r+0x3a>
 80042fa:	001a      	movs	r2, r3
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	42a3      	cmp	r3, r4
 8004300:	d1fb      	bne.n	80042fa <_malloc_r+0xde>
 8004302:	2300      	movs	r3, #0
 8004304:	e7da      	b.n	80042bc <_malloc_r+0xa0>
 8004306:	230c      	movs	r3, #12
 8004308:	0028      	movs	r0, r5
 800430a:	602b      	str	r3, [r5, #0]
 800430c:	f000 f80e 	bl	800432c <__malloc_unlock>
 8004310:	e7c6      	b.n	80042a0 <_malloc_r+0x84>
 8004312:	6007      	str	r7, [r0, #0]
 8004314:	e7da      	b.n	80042cc <_malloc_r+0xb0>
 8004316:	46c0      	nop			@ (mov r8, r8)
 8004318:	200004b4 	.word	0x200004b4

0800431c <__malloc_lock>:
 800431c:	b510      	push	{r4, lr}
 800431e:	4802      	ldr	r0, [pc, #8]	@ (8004328 <__malloc_lock+0xc>)
 8004320:	f7ff ff06 	bl	8004130 <__retarget_lock_acquire_recursive>
 8004324:	bd10      	pop	{r4, pc}
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	200004ac 	.word	0x200004ac

0800432c <__malloc_unlock>:
 800432c:	b510      	push	{r4, lr}
 800432e:	4802      	ldr	r0, [pc, #8]	@ (8004338 <__malloc_unlock+0xc>)
 8004330:	f7ff feff 	bl	8004132 <__retarget_lock_release_recursive>
 8004334:	bd10      	pop	{r4, pc}
 8004336:	46c0      	nop			@ (mov r8, r8)
 8004338:	200004ac 	.word	0x200004ac

0800433c <__ssputs_r>:
 800433c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433e:	688e      	ldr	r6, [r1, #8]
 8004340:	b085      	sub	sp, #20
 8004342:	001f      	movs	r7, r3
 8004344:	000c      	movs	r4, r1
 8004346:	680b      	ldr	r3, [r1, #0]
 8004348:	9002      	str	r0, [sp, #8]
 800434a:	9203      	str	r2, [sp, #12]
 800434c:	42be      	cmp	r6, r7
 800434e:	d830      	bhi.n	80043b2 <__ssputs_r+0x76>
 8004350:	210c      	movs	r1, #12
 8004352:	5e62      	ldrsh	r2, [r4, r1]
 8004354:	2190      	movs	r1, #144	@ 0x90
 8004356:	00c9      	lsls	r1, r1, #3
 8004358:	420a      	tst	r2, r1
 800435a:	d028      	beq.n	80043ae <__ssputs_r+0x72>
 800435c:	2003      	movs	r0, #3
 800435e:	6921      	ldr	r1, [r4, #16]
 8004360:	1a5b      	subs	r3, r3, r1
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	6963      	ldr	r3, [r4, #20]
 8004366:	4343      	muls	r3, r0
 8004368:	9801      	ldr	r0, [sp, #4]
 800436a:	0fdd      	lsrs	r5, r3, #31
 800436c:	18ed      	adds	r5, r5, r3
 800436e:	1c7b      	adds	r3, r7, #1
 8004370:	181b      	adds	r3, r3, r0
 8004372:	106d      	asrs	r5, r5, #1
 8004374:	42ab      	cmp	r3, r5
 8004376:	d900      	bls.n	800437a <__ssputs_r+0x3e>
 8004378:	001d      	movs	r5, r3
 800437a:	0552      	lsls	r2, r2, #21
 800437c:	d528      	bpl.n	80043d0 <__ssputs_r+0x94>
 800437e:	0029      	movs	r1, r5
 8004380:	9802      	ldr	r0, [sp, #8]
 8004382:	f7ff ff4b 	bl	800421c <_malloc_r>
 8004386:	1e06      	subs	r6, r0, #0
 8004388:	d02c      	beq.n	80043e4 <__ssputs_r+0xa8>
 800438a:	9a01      	ldr	r2, [sp, #4]
 800438c:	6921      	ldr	r1, [r4, #16]
 800438e:	f000 fade 	bl	800494e <memcpy>
 8004392:	89a2      	ldrh	r2, [r4, #12]
 8004394:	4b18      	ldr	r3, [pc, #96]	@ (80043f8 <__ssputs_r+0xbc>)
 8004396:	401a      	ands	r2, r3
 8004398:	2380      	movs	r3, #128	@ 0x80
 800439a:	4313      	orrs	r3, r2
 800439c:	81a3      	strh	r3, [r4, #12]
 800439e:	9b01      	ldr	r3, [sp, #4]
 80043a0:	6126      	str	r6, [r4, #16]
 80043a2:	18f6      	adds	r6, r6, r3
 80043a4:	6026      	str	r6, [r4, #0]
 80043a6:	003e      	movs	r6, r7
 80043a8:	6165      	str	r5, [r4, #20]
 80043aa:	1aed      	subs	r5, r5, r3
 80043ac:	60a5      	str	r5, [r4, #8]
 80043ae:	42be      	cmp	r6, r7
 80043b0:	d900      	bls.n	80043b4 <__ssputs_r+0x78>
 80043b2:	003e      	movs	r6, r7
 80043b4:	0032      	movs	r2, r6
 80043b6:	9903      	ldr	r1, [sp, #12]
 80043b8:	6820      	ldr	r0, [r4, #0]
 80043ba:	f000 fa99 	bl	80048f0 <memmove>
 80043be:	2000      	movs	r0, #0
 80043c0:	68a3      	ldr	r3, [r4, #8]
 80043c2:	1b9b      	subs	r3, r3, r6
 80043c4:	60a3      	str	r3, [r4, #8]
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	199b      	adds	r3, r3, r6
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	b005      	add	sp, #20
 80043ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d0:	002a      	movs	r2, r5
 80043d2:	9802      	ldr	r0, [sp, #8]
 80043d4:	f000 fac4 	bl	8004960 <_realloc_r>
 80043d8:	1e06      	subs	r6, r0, #0
 80043da:	d1e0      	bne.n	800439e <__ssputs_r+0x62>
 80043dc:	6921      	ldr	r1, [r4, #16]
 80043de:	9802      	ldr	r0, [sp, #8]
 80043e0:	f7ff feb0 	bl	8004144 <_free_r>
 80043e4:	230c      	movs	r3, #12
 80043e6:	2001      	movs	r0, #1
 80043e8:	9a02      	ldr	r2, [sp, #8]
 80043ea:	4240      	negs	r0, r0
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	89a2      	ldrh	r2, [r4, #12]
 80043f0:	3334      	adds	r3, #52	@ 0x34
 80043f2:	4313      	orrs	r3, r2
 80043f4:	81a3      	strh	r3, [r4, #12]
 80043f6:	e7e9      	b.n	80043cc <__ssputs_r+0x90>
 80043f8:	fffffb7f 	.word	0xfffffb7f

080043fc <_svfiprintf_r>:
 80043fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043fe:	b0a1      	sub	sp, #132	@ 0x84
 8004400:	9003      	str	r0, [sp, #12]
 8004402:	001d      	movs	r5, r3
 8004404:	898b      	ldrh	r3, [r1, #12]
 8004406:	000f      	movs	r7, r1
 8004408:	0016      	movs	r6, r2
 800440a:	061b      	lsls	r3, r3, #24
 800440c:	d511      	bpl.n	8004432 <_svfiprintf_r+0x36>
 800440e:	690b      	ldr	r3, [r1, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10e      	bne.n	8004432 <_svfiprintf_r+0x36>
 8004414:	2140      	movs	r1, #64	@ 0x40
 8004416:	f7ff ff01 	bl	800421c <_malloc_r>
 800441a:	6038      	str	r0, [r7, #0]
 800441c:	6138      	str	r0, [r7, #16]
 800441e:	2800      	cmp	r0, #0
 8004420:	d105      	bne.n	800442e <_svfiprintf_r+0x32>
 8004422:	230c      	movs	r3, #12
 8004424:	9a03      	ldr	r2, [sp, #12]
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	2001      	movs	r0, #1
 800442a:	4240      	negs	r0, r0
 800442c:	e0cf      	b.n	80045ce <_svfiprintf_r+0x1d2>
 800442e:	2340      	movs	r3, #64	@ 0x40
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	2300      	movs	r3, #0
 8004434:	ac08      	add	r4, sp, #32
 8004436:	6163      	str	r3, [r4, #20]
 8004438:	3320      	adds	r3, #32
 800443a:	7663      	strb	r3, [r4, #25]
 800443c:	3310      	adds	r3, #16
 800443e:	76a3      	strb	r3, [r4, #26]
 8004440:	9507      	str	r5, [sp, #28]
 8004442:	0035      	movs	r5, r6
 8004444:	782b      	ldrb	r3, [r5, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <_svfiprintf_r+0x52>
 800444a:	2b25      	cmp	r3, #37	@ 0x25
 800444c:	d148      	bne.n	80044e0 <_svfiprintf_r+0xe4>
 800444e:	1bab      	subs	r3, r5, r6
 8004450:	9305      	str	r3, [sp, #20]
 8004452:	42b5      	cmp	r5, r6
 8004454:	d00b      	beq.n	800446e <_svfiprintf_r+0x72>
 8004456:	0032      	movs	r2, r6
 8004458:	0039      	movs	r1, r7
 800445a:	9803      	ldr	r0, [sp, #12]
 800445c:	f7ff ff6e 	bl	800433c <__ssputs_r>
 8004460:	3001      	adds	r0, #1
 8004462:	d100      	bne.n	8004466 <_svfiprintf_r+0x6a>
 8004464:	e0ae      	b.n	80045c4 <_svfiprintf_r+0x1c8>
 8004466:	6963      	ldr	r3, [r4, #20]
 8004468:	9a05      	ldr	r2, [sp, #20]
 800446a:	189b      	adds	r3, r3, r2
 800446c:	6163      	str	r3, [r4, #20]
 800446e:	782b      	ldrb	r3, [r5, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d100      	bne.n	8004476 <_svfiprintf_r+0x7a>
 8004474:	e0a6      	b.n	80045c4 <_svfiprintf_r+0x1c8>
 8004476:	2201      	movs	r2, #1
 8004478:	2300      	movs	r3, #0
 800447a:	4252      	negs	r2, r2
 800447c:	6062      	str	r2, [r4, #4]
 800447e:	a904      	add	r1, sp, #16
 8004480:	3254      	adds	r2, #84	@ 0x54
 8004482:	1852      	adds	r2, r2, r1
 8004484:	1c6e      	adds	r6, r5, #1
 8004486:	6023      	str	r3, [r4, #0]
 8004488:	60e3      	str	r3, [r4, #12]
 800448a:	60a3      	str	r3, [r4, #8]
 800448c:	7013      	strb	r3, [r2, #0]
 800448e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004490:	4b54      	ldr	r3, [pc, #336]	@ (80045e4 <_svfiprintf_r+0x1e8>)
 8004492:	2205      	movs	r2, #5
 8004494:	0018      	movs	r0, r3
 8004496:	7831      	ldrb	r1, [r6, #0]
 8004498:	9305      	str	r3, [sp, #20]
 800449a:	f000 fa4d 	bl	8004938 <memchr>
 800449e:	1c75      	adds	r5, r6, #1
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d11f      	bne.n	80044e4 <_svfiprintf_r+0xe8>
 80044a4:	6822      	ldr	r2, [r4, #0]
 80044a6:	06d3      	lsls	r3, r2, #27
 80044a8:	d504      	bpl.n	80044b4 <_svfiprintf_r+0xb8>
 80044aa:	2353      	movs	r3, #83	@ 0x53
 80044ac:	a904      	add	r1, sp, #16
 80044ae:	185b      	adds	r3, r3, r1
 80044b0:	2120      	movs	r1, #32
 80044b2:	7019      	strb	r1, [r3, #0]
 80044b4:	0713      	lsls	r3, r2, #28
 80044b6:	d504      	bpl.n	80044c2 <_svfiprintf_r+0xc6>
 80044b8:	2353      	movs	r3, #83	@ 0x53
 80044ba:	a904      	add	r1, sp, #16
 80044bc:	185b      	adds	r3, r3, r1
 80044be:	212b      	movs	r1, #43	@ 0x2b
 80044c0:	7019      	strb	r1, [r3, #0]
 80044c2:	7833      	ldrb	r3, [r6, #0]
 80044c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80044c6:	d016      	beq.n	80044f6 <_svfiprintf_r+0xfa>
 80044c8:	0035      	movs	r5, r6
 80044ca:	2100      	movs	r1, #0
 80044cc:	200a      	movs	r0, #10
 80044ce:	68e3      	ldr	r3, [r4, #12]
 80044d0:	782a      	ldrb	r2, [r5, #0]
 80044d2:	1c6e      	adds	r6, r5, #1
 80044d4:	3a30      	subs	r2, #48	@ 0x30
 80044d6:	2a09      	cmp	r2, #9
 80044d8:	d950      	bls.n	800457c <_svfiprintf_r+0x180>
 80044da:	2900      	cmp	r1, #0
 80044dc:	d111      	bne.n	8004502 <_svfiprintf_r+0x106>
 80044de:	e017      	b.n	8004510 <_svfiprintf_r+0x114>
 80044e0:	3501      	adds	r5, #1
 80044e2:	e7af      	b.n	8004444 <_svfiprintf_r+0x48>
 80044e4:	9b05      	ldr	r3, [sp, #20]
 80044e6:	6822      	ldr	r2, [r4, #0]
 80044e8:	1ac0      	subs	r0, r0, r3
 80044ea:	2301      	movs	r3, #1
 80044ec:	4083      	lsls	r3, r0
 80044ee:	4313      	orrs	r3, r2
 80044f0:	002e      	movs	r6, r5
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	e7cc      	b.n	8004490 <_svfiprintf_r+0x94>
 80044f6:	9b07      	ldr	r3, [sp, #28]
 80044f8:	1d19      	adds	r1, r3, #4
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	9107      	str	r1, [sp, #28]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	db01      	blt.n	8004506 <_svfiprintf_r+0x10a>
 8004502:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004504:	e004      	b.n	8004510 <_svfiprintf_r+0x114>
 8004506:	425b      	negs	r3, r3
 8004508:	60e3      	str	r3, [r4, #12]
 800450a:	2302      	movs	r3, #2
 800450c:	4313      	orrs	r3, r2
 800450e:	6023      	str	r3, [r4, #0]
 8004510:	782b      	ldrb	r3, [r5, #0]
 8004512:	2b2e      	cmp	r3, #46	@ 0x2e
 8004514:	d10c      	bne.n	8004530 <_svfiprintf_r+0x134>
 8004516:	786b      	ldrb	r3, [r5, #1]
 8004518:	2b2a      	cmp	r3, #42	@ 0x2a
 800451a:	d134      	bne.n	8004586 <_svfiprintf_r+0x18a>
 800451c:	9b07      	ldr	r3, [sp, #28]
 800451e:	3502      	adds	r5, #2
 8004520:	1d1a      	adds	r2, r3, #4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	9207      	str	r2, [sp, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	da01      	bge.n	800452e <_svfiprintf_r+0x132>
 800452a:	2301      	movs	r3, #1
 800452c:	425b      	negs	r3, r3
 800452e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004530:	4e2d      	ldr	r6, [pc, #180]	@ (80045e8 <_svfiprintf_r+0x1ec>)
 8004532:	2203      	movs	r2, #3
 8004534:	0030      	movs	r0, r6
 8004536:	7829      	ldrb	r1, [r5, #0]
 8004538:	f000 f9fe 	bl	8004938 <memchr>
 800453c:	2800      	cmp	r0, #0
 800453e:	d006      	beq.n	800454e <_svfiprintf_r+0x152>
 8004540:	2340      	movs	r3, #64	@ 0x40
 8004542:	1b80      	subs	r0, r0, r6
 8004544:	4083      	lsls	r3, r0
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	3501      	adds	r5, #1
 800454a:	4313      	orrs	r3, r2
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	7829      	ldrb	r1, [r5, #0]
 8004550:	2206      	movs	r2, #6
 8004552:	4826      	ldr	r0, [pc, #152]	@ (80045ec <_svfiprintf_r+0x1f0>)
 8004554:	1c6e      	adds	r6, r5, #1
 8004556:	7621      	strb	r1, [r4, #24]
 8004558:	f000 f9ee 	bl	8004938 <memchr>
 800455c:	2800      	cmp	r0, #0
 800455e:	d038      	beq.n	80045d2 <_svfiprintf_r+0x1d6>
 8004560:	4b23      	ldr	r3, [pc, #140]	@ (80045f0 <_svfiprintf_r+0x1f4>)
 8004562:	2b00      	cmp	r3, #0
 8004564:	d122      	bne.n	80045ac <_svfiprintf_r+0x1b0>
 8004566:	2207      	movs	r2, #7
 8004568:	9b07      	ldr	r3, [sp, #28]
 800456a:	3307      	adds	r3, #7
 800456c:	4393      	bics	r3, r2
 800456e:	3308      	adds	r3, #8
 8004570:	9307      	str	r3, [sp, #28]
 8004572:	6963      	ldr	r3, [r4, #20]
 8004574:	9a04      	ldr	r2, [sp, #16]
 8004576:	189b      	adds	r3, r3, r2
 8004578:	6163      	str	r3, [r4, #20]
 800457a:	e762      	b.n	8004442 <_svfiprintf_r+0x46>
 800457c:	4343      	muls	r3, r0
 800457e:	0035      	movs	r5, r6
 8004580:	2101      	movs	r1, #1
 8004582:	189b      	adds	r3, r3, r2
 8004584:	e7a4      	b.n	80044d0 <_svfiprintf_r+0xd4>
 8004586:	2300      	movs	r3, #0
 8004588:	200a      	movs	r0, #10
 800458a:	0019      	movs	r1, r3
 800458c:	3501      	adds	r5, #1
 800458e:	6063      	str	r3, [r4, #4]
 8004590:	782a      	ldrb	r2, [r5, #0]
 8004592:	1c6e      	adds	r6, r5, #1
 8004594:	3a30      	subs	r2, #48	@ 0x30
 8004596:	2a09      	cmp	r2, #9
 8004598:	d903      	bls.n	80045a2 <_svfiprintf_r+0x1a6>
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0c8      	beq.n	8004530 <_svfiprintf_r+0x134>
 800459e:	9109      	str	r1, [sp, #36]	@ 0x24
 80045a0:	e7c6      	b.n	8004530 <_svfiprintf_r+0x134>
 80045a2:	4341      	muls	r1, r0
 80045a4:	0035      	movs	r5, r6
 80045a6:	2301      	movs	r3, #1
 80045a8:	1889      	adds	r1, r1, r2
 80045aa:	e7f1      	b.n	8004590 <_svfiprintf_r+0x194>
 80045ac:	aa07      	add	r2, sp, #28
 80045ae:	9200      	str	r2, [sp, #0]
 80045b0:	0021      	movs	r1, r4
 80045b2:	003a      	movs	r2, r7
 80045b4:	4b0f      	ldr	r3, [pc, #60]	@ (80045f4 <_svfiprintf_r+0x1f8>)
 80045b6:	9803      	ldr	r0, [sp, #12]
 80045b8:	e000      	b.n	80045bc <_svfiprintf_r+0x1c0>
 80045ba:	bf00      	nop
 80045bc:	9004      	str	r0, [sp, #16]
 80045be:	9b04      	ldr	r3, [sp, #16]
 80045c0:	3301      	adds	r3, #1
 80045c2:	d1d6      	bne.n	8004572 <_svfiprintf_r+0x176>
 80045c4:	89bb      	ldrh	r3, [r7, #12]
 80045c6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80045c8:	065b      	lsls	r3, r3, #25
 80045ca:	d500      	bpl.n	80045ce <_svfiprintf_r+0x1d2>
 80045cc:	e72c      	b.n	8004428 <_svfiprintf_r+0x2c>
 80045ce:	b021      	add	sp, #132	@ 0x84
 80045d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d2:	aa07      	add	r2, sp, #28
 80045d4:	9200      	str	r2, [sp, #0]
 80045d6:	0021      	movs	r1, r4
 80045d8:	003a      	movs	r2, r7
 80045da:	4b06      	ldr	r3, [pc, #24]	@ (80045f4 <_svfiprintf_r+0x1f8>)
 80045dc:	9803      	ldr	r0, [sp, #12]
 80045de:	f000 f87b 	bl	80046d8 <_printf_i>
 80045e2:	e7eb      	b.n	80045bc <_svfiprintf_r+0x1c0>
 80045e4:	08004adc 	.word	0x08004adc
 80045e8:	08004ae2 	.word	0x08004ae2
 80045ec:	08004ae6 	.word	0x08004ae6
 80045f0:	00000000 	.word	0x00000000
 80045f4:	0800433d 	.word	0x0800433d

080045f8 <_printf_common>:
 80045f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045fa:	0016      	movs	r6, r2
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	688a      	ldr	r2, [r1, #8]
 8004600:	690b      	ldr	r3, [r1, #16]
 8004602:	000c      	movs	r4, r1
 8004604:	9000      	str	r0, [sp, #0]
 8004606:	4293      	cmp	r3, r2
 8004608:	da00      	bge.n	800460c <_printf_common+0x14>
 800460a:	0013      	movs	r3, r2
 800460c:	0022      	movs	r2, r4
 800460e:	6033      	str	r3, [r6, #0]
 8004610:	3243      	adds	r2, #67	@ 0x43
 8004612:	7812      	ldrb	r2, [r2, #0]
 8004614:	2a00      	cmp	r2, #0
 8004616:	d001      	beq.n	800461c <_printf_common+0x24>
 8004618:	3301      	adds	r3, #1
 800461a:	6033      	str	r3, [r6, #0]
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	069b      	lsls	r3, r3, #26
 8004620:	d502      	bpl.n	8004628 <_printf_common+0x30>
 8004622:	6833      	ldr	r3, [r6, #0]
 8004624:	3302      	adds	r3, #2
 8004626:	6033      	str	r3, [r6, #0]
 8004628:	6822      	ldr	r2, [r4, #0]
 800462a:	2306      	movs	r3, #6
 800462c:	0015      	movs	r5, r2
 800462e:	401d      	ands	r5, r3
 8004630:	421a      	tst	r2, r3
 8004632:	d027      	beq.n	8004684 <_printf_common+0x8c>
 8004634:	0023      	movs	r3, r4
 8004636:	3343      	adds	r3, #67	@ 0x43
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	1e5a      	subs	r2, r3, #1
 800463c:	4193      	sbcs	r3, r2
 800463e:	6822      	ldr	r2, [r4, #0]
 8004640:	0692      	lsls	r2, r2, #26
 8004642:	d430      	bmi.n	80046a6 <_printf_common+0xae>
 8004644:	0022      	movs	r2, r4
 8004646:	9901      	ldr	r1, [sp, #4]
 8004648:	9800      	ldr	r0, [sp, #0]
 800464a:	9d08      	ldr	r5, [sp, #32]
 800464c:	3243      	adds	r2, #67	@ 0x43
 800464e:	47a8      	blx	r5
 8004650:	3001      	adds	r0, #1
 8004652:	d025      	beq.n	80046a0 <_printf_common+0xa8>
 8004654:	2206      	movs	r2, #6
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	2500      	movs	r5, #0
 800465a:	4013      	ands	r3, r2
 800465c:	2b04      	cmp	r3, #4
 800465e:	d105      	bne.n	800466c <_printf_common+0x74>
 8004660:	6833      	ldr	r3, [r6, #0]
 8004662:	68e5      	ldr	r5, [r4, #12]
 8004664:	1aed      	subs	r5, r5, r3
 8004666:	43eb      	mvns	r3, r5
 8004668:	17db      	asrs	r3, r3, #31
 800466a:	401d      	ands	r5, r3
 800466c:	68a3      	ldr	r3, [r4, #8]
 800466e:	6922      	ldr	r2, [r4, #16]
 8004670:	4293      	cmp	r3, r2
 8004672:	dd01      	ble.n	8004678 <_printf_common+0x80>
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	18ed      	adds	r5, r5, r3
 8004678:	2600      	movs	r6, #0
 800467a:	42b5      	cmp	r5, r6
 800467c:	d120      	bne.n	80046c0 <_printf_common+0xc8>
 800467e:	2000      	movs	r0, #0
 8004680:	e010      	b.n	80046a4 <_printf_common+0xac>
 8004682:	3501      	adds	r5, #1
 8004684:	68e3      	ldr	r3, [r4, #12]
 8004686:	6832      	ldr	r2, [r6, #0]
 8004688:	1a9b      	subs	r3, r3, r2
 800468a:	42ab      	cmp	r3, r5
 800468c:	ddd2      	ble.n	8004634 <_printf_common+0x3c>
 800468e:	0022      	movs	r2, r4
 8004690:	2301      	movs	r3, #1
 8004692:	9901      	ldr	r1, [sp, #4]
 8004694:	9800      	ldr	r0, [sp, #0]
 8004696:	9f08      	ldr	r7, [sp, #32]
 8004698:	3219      	adds	r2, #25
 800469a:	47b8      	blx	r7
 800469c:	3001      	adds	r0, #1
 800469e:	d1f0      	bne.n	8004682 <_printf_common+0x8a>
 80046a0:	2001      	movs	r0, #1
 80046a2:	4240      	negs	r0, r0
 80046a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046a6:	2030      	movs	r0, #48	@ 0x30
 80046a8:	18e1      	adds	r1, r4, r3
 80046aa:	3143      	adds	r1, #67	@ 0x43
 80046ac:	7008      	strb	r0, [r1, #0]
 80046ae:	0021      	movs	r1, r4
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	3145      	adds	r1, #69	@ 0x45
 80046b4:	7809      	ldrb	r1, [r1, #0]
 80046b6:	18a2      	adds	r2, r4, r2
 80046b8:	3243      	adds	r2, #67	@ 0x43
 80046ba:	3302      	adds	r3, #2
 80046bc:	7011      	strb	r1, [r2, #0]
 80046be:	e7c1      	b.n	8004644 <_printf_common+0x4c>
 80046c0:	0022      	movs	r2, r4
 80046c2:	2301      	movs	r3, #1
 80046c4:	9901      	ldr	r1, [sp, #4]
 80046c6:	9800      	ldr	r0, [sp, #0]
 80046c8:	9f08      	ldr	r7, [sp, #32]
 80046ca:	321a      	adds	r2, #26
 80046cc:	47b8      	blx	r7
 80046ce:	3001      	adds	r0, #1
 80046d0:	d0e6      	beq.n	80046a0 <_printf_common+0xa8>
 80046d2:	3601      	adds	r6, #1
 80046d4:	e7d1      	b.n	800467a <_printf_common+0x82>
	...

080046d8 <_printf_i>:
 80046d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046da:	b08b      	sub	sp, #44	@ 0x2c
 80046dc:	9206      	str	r2, [sp, #24]
 80046de:	000a      	movs	r2, r1
 80046e0:	3243      	adds	r2, #67	@ 0x43
 80046e2:	9307      	str	r3, [sp, #28]
 80046e4:	9005      	str	r0, [sp, #20]
 80046e6:	9203      	str	r2, [sp, #12]
 80046e8:	7e0a      	ldrb	r2, [r1, #24]
 80046ea:	000c      	movs	r4, r1
 80046ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80046ee:	2a78      	cmp	r2, #120	@ 0x78
 80046f0:	d809      	bhi.n	8004706 <_printf_i+0x2e>
 80046f2:	2a62      	cmp	r2, #98	@ 0x62
 80046f4:	d80b      	bhi.n	800470e <_printf_i+0x36>
 80046f6:	2a00      	cmp	r2, #0
 80046f8:	d100      	bne.n	80046fc <_printf_i+0x24>
 80046fa:	e0ba      	b.n	8004872 <_printf_i+0x19a>
 80046fc:	497a      	ldr	r1, [pc, #488]	@ (80048e8 <_printf_i+0x210>)
 80046fe:	9104      	str	r1, [sp, #16]
 8004700:	2a58      	cmp	r2, #88	@ 0x58
 8004702:	d100      	bne.n	8004706 <_printf_i+0x2e>
 8004704:	e08e      	b.n	8004824 <_printf_i+0x14c>
 8004706:	0025      	movs	r5, r4
 8004708:	3542      	adds	r5, #66	@ 0x42
 800470a:	702a      	strb	r2, [r5, #0]
 800470c:	e022      	b.n	8004754 <_printf_i+0x7c>
 800470e:	0010      	movs	r0, r2
 8004710:	3863      	subs	r0, #99	@ 0x63
 8004712:	2815      	cmp	r0, #21
 8004714:	d8f7      	bhi.n	8004706 <_printf_i+0x2e>
 8004716:	f7fb fd09 	bl	800012c <__gnu_thumb1_case_shi>
 800471a:	0016      	.short	0x0016
 800471c:	fff6001f 	.word	0xfff6001f
 8004720:	fff6fff6 	.word	0xfff6fff6
 8004724:	001ffff6 	.word	0x001ffff6
 8004728:	fff6fff6 	.word	0xfff6fff6
 800472c:	fff6fff6 	.word	0xfff6fff6
 8004730:	0036009f 	.word	0x0036009f
 8004734:	fff6007e 	.word	0xfff6007e
 8004738:	00b0fff6 	.word	0x00b0fff6
 800473c:	0036fff6 	.word	0x0036fff6
 8004740:	fff6fff6 	.word	0xfff6fff6
 8004744:	0082      	.short	0x0082
 8004746:	0025      	movs	r5, r4
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	3542      	adds	r5, #66	@ 0x42
 800474c:	1d11      	adds	r1, r2, #4
 800474e:	6019      	str	r1, [r3, #0]
 8004750:	6813      	ldr	r3, [r2, #0]
 8004752:	702b      	strb	r3, [r5, #0]
 8004754:	2301      	movs	r3, #1
 8004756:	e09e      	b.n	8004896 <_printf_i+0x1be>
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	6809      	ldr	r1, [r1, #0]
 800475c:	1d02      	adds	r2, r0, #4
 800475e:	060d      	lsls	r5, r1, #24
 8004760:	d50b      	bpl.n	800477a <_printf_i+0xa2>
 8004762:	6806      	ldr	r6, [r0, #0]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	2e00      	cmp	r6, #0
 8004768:	da03      	bge.n	8004772 <_printf_i+0x9a>
 800476a:	232d      	movs	r3, #45	@ 0x2d
 800476c:	9a03      	ldr	r2, [sp, #12]
 800476e:	4276      	negs	r6, r6
 8004770:	7013      	strb	r3, [r2, #0]
 8004772:	4b5d      	ldr	r3, [pc, #372]	@ (80048e8 <_printf_i+0x210>)
 8004774:	270a      	movs	r7, #10
 8004776:	9304      	str	r3, [sp, #16]
 8004778:	e018      	b.n	80047ac <_printf_i+0xd4>
 800477a:	6806      	ldr	r6, [r0, #0]
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	0649      	lsls	r1, r1, #25
 8004780:	d5f1      	bpl.n	8004766 <_printf_i+0x8e>
 8004782:	b236      	sxth	r6, r6
 8004784:	e7ef      	b.n	8004766 <_printf_i+0x8e>
 8004786:	6808      	ldr	r0, [r1, #0]
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	c940      	ldmia	r1!, {r6}
 800478c:	0605      	lsls	r5, r0, #24
 800478e:	d402      	bmi.n	8004796 <_printf_i+0xbe>
 8004790:	0640      	lsls	r0, r0, #25
 8004792:	d500      	bpl.n	8004796 <_printf_i+0xbe>
 8004794:	b2b6      	uxth	r6, r6
 8004796:	6019      	str	r1, [r3, #0]
 8004798:	4b53      	ldr	r3, [pc, #332]	@ (80048e8 <_printf_i+0x210>)
 800479a:	270a      	movs	r7, #10
 800479c:	9304      	str	r3, [sp, #16]
 800479e:	2a6f      	cmp	r2, #111	@ 0x6f
 80047a0:	d100      	bne.n	80047a4 <_printf_i+0xcc>
 80047a2:	3f02      	subs	r7, #2
 80047a4:	0023      	movs	r3, r4
 80047a6:	2200      	movs	r2, #0
 80047a8:	3343      	adds	r3, #67	@ 0x43
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	6863      	ldr	r3, [r4, #4]
 80047ae:	60a3      	str	r3, [r4, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	db06      	blt.n	80047c2 <_printf_i+0xea>
 80047b4:	2104      	movs	r1, #4
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	9d03      	ldr	r5, [sp, #12]
 80047ba:	438a      	bics	r2, r1
 80047bc:	6022      	str	r2, [r4, #0]
 80047be:	4333      	orrs	r3, r6
 80047c0:	d00c      	beq.n	80047dc <_printf_i+0x104>
 80047c2:	9d03      	ldr	r5, [sp, #12]
 80047c4:	0030      	movs	r0, r6
 80047c6:	0039      	movs	r1, r7
 80047c8:	f7fb fd40 	bl	800024c <__aeabi_uidivmod>
 80047cc:	9b04      	ldr	r3, [sp, #16]
 80047ce:	3d01      	subs	r5, #1
 80047d0:	5c5b      	ldrb	r3, [r3, r1]
 80047d2:	702b      	strb	r3, [r5, #0]
 80047d4:	0033      	movs	r3, r6
 80047d6:	0006      	movs	r6, r0
 80047d8:	429f      	cmp	r7, r3
 80047da:	d9f3      	bls.n	80047c4 <_printf_i+0xec>
 80047dc:	2f08      	cmp	r7, #8
 80047de:	d109      	bne.n	80047f4 <_printf_i+0x11c>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	07db      	lsls	r3, r3, #31
 80047e4:	d506      	bpl.n	80047f4 <_printf_i+0x11c>
 80047e6:	6862      	ldr	r2, [r4, #4]
 80047e8:	6923      	ldr	r3, [r4, #16]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	dc02      	bgt.n	80047f4 <_printf_i+0x11c>
 80047ee:	2330      	movs	r3, #48	@ 0x30
 80047f0:	3d01      	subs	r5, #1
 80047f2:	702b      	strb	r3, [r5, #0]
 80047f4:	9b03      	ldr	r3, [sp, #12]
 80047f6:	1b5b      	subs	r3, r3, r5
 80047f8:	6123      	str	r3, [r4, #16]
 80047fa:	9b07      	ldr	r3, [sp, #28]
 80047fc:	0021      	movs	r1, r4
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	9805      	ldr	r0, [sp, #20]
 8004802:	9b06      	ldr	r3, [sp, #24]
 8004804:	aa09      	add	r2, sp, #36	@ 0x24
 8004806:	f7ff fef7 	bl	80045f8 <_printf_common>
 800480a:	3001      	adds	r0, #1
 800480c:	d148      	bne.n	80048a0 <_printf_i+0x1c8>
 800480e:	2001      	movs	r0, #1
 8004810:	4240      	negs	r0, r0
 8004812:	b00b      	add	sp, #44	@ 0x2c
 8004814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004816:	2220      	movs	r2, #32
 8004818:	6809      	ldr	r1, [r1, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	6022      	str	r2, [r4, #0]
 800481e:	2278      	movs	r2, #120	@ 0x78
 8004820:	4932      	ldr	r1, [pc, #200]	@ (80048ec <_printf_i+0x214>)
 8004822:	9104      	str	r1, [sp, #16]
 8004824:	0021      	movs	r1, r4
 8004826:	3145      	adds	r1, #69	@ 0x45
 8004828:	700a      	strb	r2, [r1, #0]
 800482a:	6819      	ldr	r1, [r3, #0]
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	c940      	ldmia	r1!, {r6}
 8004830:	0610      	lsls	r0, r2, #24
 8004832:	d402      	bmi.n	800483a <_printf_i+0x162>
 8004834:	0650      	lsls	r0, r2, #25
 8004836:	d500      	bpl.n	800483a <_printf_i+0x162>
 8004838:	b2b6      	uxth	r6, r6
 800483a:	6019      	str	r1, [r3, #0]
 800483c:	07d3      	lsls	r3, r2, #31
 800483e:	d502      	bpl.n	8004846 <_printf_i+0x16e>
 8004840:	2320      	movs	r3, #32
 8004842:	4313      	orrs	r3, r2
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	2e00      	cmp	r6, #0
 8004848:	d001      	beq.n	800484e <_printf_i+0x176>
 800484a:	2710      	movs	r7, #16
 800484c:	e7aa      	b.n	80047a4 <_printf_i+0xcc>
 800484e:	2220      	movs	r2, #32
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	4393      	bics	r3, r2
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	e7f8      	b.n	800484a <_printf_i+0x172>
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	680d      	ldr	r5, [r1, #0]
 800485c:	1d10      	adds	r0, r2, #4
 800485e:	6949      	ldr	r1, [r1, #20]
 8004860:	6018      	str	r0, [r3, #0]
 8004862:	6813      	ldr	r3, [r2, #0]
 8004864:	062e      	lsls	r6, r5, #24
 8004866:	d501      	bpl.n	800486c <_printf_i+0x194>
 8004868:	6019      	str	r1, [r3, #0]
 800486a:	e002      	b.n	8004872 <_printf_i+0x19a>
 800486c:	066d      	lsls	r5, r5, #25
 800486e:	d5fb      	bpl.n	8004868 <_printf_i+0x190>
 8004870:	8019      	strh	r1, [r3, #0]
 8004872:	2300      	movs	r3, #0
 8004874:	9d03      	ldr	r5, [sp, #12]
 8004876:	6123      	str	r3, [r4, #16]
 8004878:	e7bf      	b.n	80047fa <_printf_i+0x122>
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	1d11      	adds	r1, r2, #4
 800487e:	6019      	str	r1, [r3, #0]
 8004880:	6815      	ldr	r5, [r2, #0]
 8004882:	2100      	movs	r1, #0
 8004884:	0028      	movs	r0, r5
 8004886:	6862      	ldr	r2, [r4, #4]
 8004888:	f000 f856 	bl	8004938 <memchr>
 800488c:	2800      	cmp	r0, #0
 800488e:	d001      	beq.n	8004894 <_printf_i+0x1bc>
 8004890:	1b40      	subs	r0, r0, r5
 8004892:	6060      	str	r0, [r4, #4]
 8004894:	6863      	ldr	r3, [r4, #4]
 8004896:	6123      	str	r3, [r4, #16]
 8004898:	2300      	movs	r3, #0
 800489a:	9a03      	ldr	r2, [sp, #12]
 800489c:	7013      	strb	r3, [r2, #0]
 800489e:	e7ac      	b.n	80047fa <_printf_i+0x122>
 80048a0:	002a      	movs	r2, r5
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	9906      	ldr	r1, [sp, #24]
 80048a6:	9805      	ldr	r0, [sp, #20]
 80048a8:	9d07      	ldr	r5, [sp, #28]
 80048aa:	47a8      	blx	r5
 80048ac:	3001      	adds	r0, #1
 80048ae:	d0ae      	beq.n	800480e <_printf_i+0x136>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	079b      	lsls	r3, r3, #30
 80048b4:	d415      	bmi.n	80048e2 <_printf_i+0x20a>
 80048b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048b8:	68e0      	ldr	r0, [r4, #12]
 80048ba:	4298      	cmp	r0, r3
 80048bc:	daa9      	bge.n	8004812 <_printf_i+0x13a>
 80048be:	0018      	movs	r0, r3
 80048c0:	e7a7      	b.n	8004812 <_printf_i+0x13a>
 80048c2:	0022      	movs	r2, r4
 80048c4:	2301      	movs	r3, #1
 80048c6:	9906      	ldr	r1, [sp, #24]
 80048c8:	9805      	ldr	r0, [sp, #20]
 80048ca:	9e07      	ldr	r6, [sp, #28]
 80048cc:	3219      	adds	r2, #25
 80048ce:	47b0      	blx	r6
 80048d0:	3001      	adds	r0, #1
 80048d2:	d09c      	beq.n	800480e <_printf_i+0x136>
 80048d4:	3501      	adds	r5, #1
 80048d6:	68e3      	ldr	r3, [r4, #12]
 80048d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	42ab      	cmp	r3, r5
 80048de:	dcf0      	bgt.n	80048c2 <_printf_i+0x1ea>
 80048e0:	e7e9      	b.n	80048b6 <_printf_i+0x1de>
 80048e2:	2500      	movs	r5, #0
 80048e4:	e7f7      	b.n	80048d6 <_printf_i+0x1fe>
 80048e6:	46c0      	nop			@ (mov r8, r8)
 80048e8:	08004aed 	.word	0x08004aed
 80048ec:	08004afe 	.word	0x08004afe

080048f0 <memmove>:
 80048f0:	b510      	push	{r4, lr}
 80048f2:	4288      	cmp	r0, r1
 80048f4:	d902      	bls.n	80048fc <memmove+0xc>
 80048f6:	188b      	adds	r3, r1, r2
 80048f8:	4298      	cmp	r0, r3
 80048fa:	d308      	bcc.n	800490e <memmove+0x1e>
 80048fc:	2300      	movs	r3, #0
 80048fe:	429a      	cmp	r2, r3
 8004900:	d007      	beq.n	8004912 <memmove+0x22>
 8004902:	5ccc      	ldrb	r4, [r1, r3]
 8004904:	54c4      	strb	r4, [r0, r3]
 8004906:	3301      	adds	r3, #1
 8004908:	e7f9      	b.n	80048fe <memmove+0xe>
 800490a:	5c8b      	ldrb	r3, [r1, r2]
 800490c:	5483      	strb	r3, [r0, r2]
 800490e:	3a01      	subs	r2, #1
 8004910:	d2fb      	bcs.n	800490a <memmove+0x1a>
 8004912:	bd10      	pop	{r4, pc}

08004914 <_sbrk_r>:
 8004914:	2300      	movs	r3, #0
 8004916:	b570      	push	{r4, r5, r6, lr}
 8004918:	4d06      	ldr	r5, [pc, #24]	@ (8004934 <_sbrk_r+0x20>)
 800491a:	0004      	movs	r4, r0
 800491c:	0008      	movs	r0, r1
 800491e:	602b      	str	r3, [r5, #0]
 8004920:	f7fc fa10 	bl	8000d44 <_sbrk>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d103      	bne.n	8004930 <_sbrk_r+0x1c>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d000      	beq.n	8004930 <_sbrk_r+0x1c>
 800492e:	6023      	str	r3, [r4, #0]
 8004930:	bd70      	pop	{r4, r5, r6, pc}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	200004a8 	.word	0x200004a8

08004938 <memchr>:
 8004938:	b2c9      	uxtb	r1, r1
 800493a:	1882      	adds	r2, r0, r2
 800493c:	4290      	cmp	r0, r2
 800493e:	d101      	bne.n	8004944 <memchr+0xc>
 8004940:	2000      	movs	r0, #0
 8004942:	4770      	bx	lr
 8004944:	7803      	ldrb	r3, [r0, #0]
 8004946:	428b      	cmp	r3, r1
 8004948:	d0fb      	beq.n	8004942 <memchr+0xa>
 800494a:	3001      	adds	r0, #1
 800494c:	e7f6      	b.n	800493c <memchr+0x4>

0800494e <memcpy>:
 800494e:	2300      	movs	r3, #0
 8004950:	b510      	push	{r4, lr}
 8004952:	429a      	cmp	r2, r3
 8004954:	d100      	bne.n	8004958 <memcpy+0xa>
 8004956:	bd10      	pop	{r4, pc}
 8004958:	5ccc      	ldrb	r4, [r1, r3]
 800495a:	54c4      	strb	r4, [r0, r3]
 800495c:	3301      	adds	r3, #1
 800495e:	e7f8      	b.n	8004952 <memcpy+0x4>

08004960 <_realloc_r>:
 8004960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004962:	0006      	movs	r6, r0
 8004964:	000c      	movs	r4, r1
 8004966:	0015      	movs	r5, r2
 8004968:	2900      	cmp	r1, #0
 800496a:	d105      	bne.n	8004978 <_realloc_r+0x18>
 800496c:	0011      	movs	r1, r2
 800496e:	f7ff fc55 	bl	800421c <_malloc_r>
 8004972:	0004      	movs	r4, r0
 8004974:	0020      	movs	r0, r4
 8004976:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004978:	2a00      	cmp	r2, #0
 800497a:	d103      	bne.n	8004984 <_realloc_r+0x24>
 800497c:	f7ff fbe2 	bl	8004144 <_free_r>
 8004980:	002c      	movs	r4, r5
 8004982:	e7f7      	b.n	8004974 <_realloc_r+0x14>
 8004984:	f000 f81c 	bl	80049c0 <_malloc_usable_size_r>
 8004988:	0007      	movs	r7, r0
 800498a:	4285      	cmp	r5, r0
 800498c:	d802      	bhi.n	8004994 <_realloc_r+0x34>
 800498e:	0843      	lsrs	r3, r0, #1
 8004990:	42ab      	cmp	r3, r5
 8004992:	d3ef      	bcc.n	8004974 <_realloc_r+0x14>
 8004994:	0029      	movs	r1, r5
 8004996:	0030      	movs	r0, r6
 8004998:	f7ff fc40 	bl	800421c <_malloc_r>
 800499c:	9001      	str	r0, [sp, #4]
 800499e:	2800      	cmp	r0, #0
 80049a0:	d101      	bne.n	80049a6 <_realloc_r+0x46>
 80049a2:	9c01      	ldr	r4, [sp, #4]
 80049a4:	e7e6      	b.n	8004974 <_realloc_r+0x14>
 80049a6:	002a      	movs	r2, r5
 80049a8:	42bd      	cmp	r5, r7
 80049aa:	d900      	bls.n	80049ae <_realloc_r+0x4e>
 80049ac:	003a      	movs	r2, r7
 80049ae:	0021      	movs	r1, r4
 80049b0:	9801      	ldr	r0, [sp, #4]
 80049b2:	f7ff ffcc 	bl	800494e <memcpy>
 80049b6:	0021      	movs	r1, r4
 80049b8:	0030      	movs	r0, r6
 80049ba:	f7ff fbc3 	bl	8004144 <_free_r>
 80049be:	e7f0      	b.n	80049a2 <_realloc_r+0x42>

080049c0 <_malloc_usable_size_r>:
 80049c0:	1f0b      	subs	r3, r1, #4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	1f18      	subs	r0, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	da01      	bge.n	80049ce <_malloc_usable_size_r+0xe>
 80049ca:	580b      	ldr	r3, [r1, r0]
 80049cc:	18c0      	adds	r0, r0, r3
 80049ce:	4770      	bx	lr

080049d0 <_init>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr

080049dc <_fini>:
 80049dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049e2:	bc08      	pop	{r3}
 80049e4:	469e      	mov	lr, r3
 80049e6:	4770      	bx	lr

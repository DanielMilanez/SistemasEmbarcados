
Leitor de carga.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d8c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08002e4c  08002e4c  00003e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003000  08003000  0000503c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003000  08003000  0000503c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003000  08003000  0000503c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003000  08003000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003004  08003004  00004004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08003008  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000003c  08003044  0000503c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003044  00005110  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057e7  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015a6  00000000  00000000  0000a84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005a0  00000000  00000000  0000bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000042e  00000000  00000000  0000c398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012840  00000000  00000000  0000c7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074ab  00000000  00000000  0001f006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007268c  00000000  00000000  000264b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098b3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001290  00000000  00000000  00098b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  00099e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e34 	.word	0x08002e34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08002e34 	.word	0x08002e34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	adc_read = HAL_ADC_GetValue(hadc);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	0018      	movs	r0, r3
 800022c:	f001 f99e 	bl	800156c <HAL_ADC_GetValue>
 8000230:	0003      	movs	r3, r0
 8000232:	b29a      	uxth	r2, r3
 8000234:	4b02      	ldr	r3, [pc, #8]	@ (8000240 <HAL_ADC_ConvCpltCallback+0x20>)
 8000236:	801a      	strh	r2, [r3, #0]
}
 8000238:	46c0      	nop			@ (mov r8, r8)
 800023a:	46bd      	mov	sp, r7
 800023c:	b002      	add	sp, #8
 800023e:	bd80      	pop	{r7, pc}
 8000240:	20000104 	.word	0x20000104

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f000 ff02 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f8ee 	bl	800042c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f000 f9c0 	bl	80005d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000254:	f000 f9a0 	bl	8000598 <MX_DMA_Init>
  MX_ADC_Init();
 8000258:	f000 f938 	bl	80004cc <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, (uint32_t *) adc_value_set, 2);
 800025c:	496c      	ldr	r1, [pc, #432]	@ (8000410 <main+0x1cc>)
 800025e:	4b6d      	ldr	r3, [pc, #436]	@ (8000414 <main+0x1d0>)
 8000260:	2202      	movs	r2, #2
 8000262:	0018      	movs	r0, r3
 8000264:	f001 f8fc 	bl	8001460 <HAL_ADC_Start_DMA>
  LCD_STARTUP();
 8000268:	f000 f9ec 	bl	8000644 <LCD_STARTUP>

  LCD_CREATE_CHAR(0,  (unsigned char*) BATTERY_CHAR , 0);
 800026c:	4b6a      	ldr	r3, [pc, #424]	@ (8000418 <main+0x1d4>)
 800026e:	2200      	movs	r2, #0
 8000270:	0019      	movs	r1, r3
 8000272:	2000      	movs	r0, #0
 8000274:	f000 fb62 	bl	800093c <LCD_CREATE_CHAR>
  LCD_CREATE_CHAR(1,  (unsigned char*) BATTERY_CHAR , 1);
 8000278:	4b67      	ldr	r3, [pc, #412]	@ (8000418 <main+0x1d4>)
 800027a:	2201      	movs	r2, #1
 800027c:	0019      	movs	r1, r3
 800027e:	2001      	movs	r0, #1
 8000280:	f000 fb5c 	bl	800093c <LCD_CREATE_CHAR>
  LCD_CREATE_CHAR(2,  (unsigned char*) BATTERY_CHAR , 2);
 8000284:	4b64      	ldr	r3, [pc, #400]	@ (8000418 <main+0x1d4>)
 8000286:	2202      	movs	r2, #2
 8000288:	0019      	movs	r1, r3
 800028a:	2002      	movs	r0, #2
 800028c:	f000 fb56 	bl	800093c <LCD_CREATE_CHAR>
  LCD_CREATE_CHAR(3,  (unsigned char*) BATTERY_CHAR , 3);
 8000290:	4b61      	ldr	r3, [pc, #388]	@ (8000418 <main+0x1d4>)
 8000292:	2203      	movs	r2, #3
 8000294:	0019      	movs	r1, r3
 8000296:	2003      	movs	r0, #3
 8000298:	f000 fb50 	bl	800093c <LCD_CREATE_CHAR>
  LCD_CREATE_CHAR(4,  (unsigned char*) BATTERY_CHAR , 4);
 800029c:	4b5e      	ldr	r3, [pc, #376]	@ (8000418 <main+0x1d4>)
 800029e:	2204      	movs	r2, #4
 80002a0:	0019      	movs	r1, r3
 80002a2:	2004      	movs	r0, #4
 80002a4:	f000 fb4a 	bl	800093c <LCD_CREATE_CHAR>
  LCD_CREATE_CHAR(5,  (unsigned char*) BATTERY_CHAR , 5);
 80002a8:	4b5b      	ldr	r3, [pc, #364]	@ (8000418 <main+0x1d4>)
 80002aa:	2205      	movs	r2, #5
 80002ac:	0019      	movs	r1, r3
 80002ae:	2005      	movs	r0, #5
 80002b0:	f000 fb44 	bl	800093c <LCD_CREATE_CHAR>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	locale = LCD_INTERPRETER_LOCALE(1, 4);
 80002b4:	2104      	movs	r1, #4
 80002b6:	2001      	movs	r0, #1
 80002b8:	f000 fb9a 	bl	80009f0 <LCD_INTERPRETER_LOCALE>
 80002bc:	0003      	movs	r3, r0
 80002be:	001a      	movs	r2, r3
 80002c0:	4b56      	ldr	r3, [pc, #344]	@ (800041c <main+0x1d8>)
 80002c2:	701a      	strb	r2, [r3, #0]
	LCD_DATA_MANAGER(locale, INSTRUCTION);
 80002c4:	4b55      	ldr	r3, [pc, #340]	@ (800041c <main+0x1d8>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	2100      	movs	r1, #0
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 f9f8 	bl	80006c0 <LCD_DATA_MANAGER>
	LCD_SEND_MESSAGE("LOAD || TESTER");
 80002d0:	4b53      	ldr	r3, [pc, #332]	@ (8000420 <main+0x1dc>)
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 f9d6 	bl	8000684 <LCD_SEND_MESSAGE>

	bars = VERIFY_ADC_VALUE();
 80002d8:	f000 fd2c 	bl	8000d34 <VERIFY_ADC_VALUE>
 80002dc:	0003      	movs	r3, r0
 80002de:	001a      	movs	r2, r3
 80002e0:	4b50      	ldr	r3, [pc, #320]	@ (8000424 <main+0x1e0>)
 80002e2:	701a      	strb	r2, [r3, #0]

	locale = LCD_INTERPRETER_LOCALE(5, 8);
 80002e4:	2108      	movs	r1, #8
 80002e6:	2005      	movs	r0, #5
 80002e8:	f000 fb82 	bl	80009f0 <LCD_INTERPRETER_LOCALE>
 80002ec:	0003      	movs	r3, r0
 80002ee:	001a      	movs	r2, r3
 80002f0:	4b4a      	ldr	r3, [pc, #296]	@ (800041c <main+0x1d8>)
 80002f2:	701a      	strb	r2, [r3, #0]
	LCD_DATA_MANAGER(locale, INSTRUCTION);
 80002f4:	4b49      	ldr	r3, [pc, #292]	@ (800041c <main+0x1d8>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2100      	movs	r1, #0
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 f9e0 	bl	80006c0 <LCD_DATA_MANAGER>

	switch (bars){
 8000300:	4b48      	ldr	r3, [pc, #288]	@ (8000424 <main+0x1e0>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b05      	cmp	r3, #5
 8000306:	d8d5      	bhi.n	80002b4 <main+0x70>
 8000308:	009a      	lsls	r2, r3, #2
 800030a:	4b47      	ldr	r3, [pc, #284]	@ (8000428 <main+0x1e4>)
 800030c:	18d3      	adds	r3, r2, r3
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	469f      	mov	pc, r3
		case 0:
			LCD_DATA_MANAGER(0x00, DATA);
 8000312:	2101      	movs	r1, #1
 8000314:	2000      	movs	r0, #0
 8000316:	f000 f9d3 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x02, DATA);
 800031a:	2101      	movs	r1, #1
 800031c:	2002      	movs	r0, #2
 800031e:	f000 f9cf 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x02, DATA);
 8000322:	2101      	movs	r1, #1
 8000324:	2002      	movs	r0, #2
 8000326:	f000 f9cb 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x02, DATA);
 800032a:	2101      	movs	r1, #1
 800032c:	2002      	movs	r0, #2
 800032e:	f000 f9c7 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x04, DATA);
 8000332:	2101      	movs	r1, #1
 8000334:	2004      	movs	r0, #4
 8000336:	f000 f9c3 	bl	80006c0 <LCD_DATA_MANAGER>
			break;
 800033a:	e068      	b.n	800040e <main+0x1ca>
		case 1:
			LCD_DATA_MANAGER(0x01, DATA);
 800033c:	2101      	movs	r1, #1
 800033e:	2001      	movs	r0, #1
 8000340:	f000 f9be 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x02, DATA);
 8000344:	2101      	movs	r1, #1
 8000346:	2002      	movs	r0, #2
 8000348:	f000 f9ba 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x02, DATA);
 800034c:	2101      	movs	r1, #1
 800034e:	2002      	movs	r0, #2
 8000350:	f000 f9b6 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x02, DATA);
 8000354:	2101      	movs	r1, #1
 8000356:	2002      	movs	r0, #2
 8000358:	f000 f9b2 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x04, DATA);
 800035c:	2101      	movs	r1, #1
 800035e:	2004      	movs	r0, #4
 8000360:	f000 f9ae 	bl	80006c0 <LCD_DATA_MANAGER>
			break;
 8000364:	e053      	b.n	800040e <main+0x1ca>
		case 2:
			LCD_DATA_MANAGER(0x01, DATA);
 8000366:	2101      	movs	r1, #1
 8000368:	2001      	movs	r0, #1
 800036a:	f000 f9a9 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x03, DATA);
 800036e:	2101      	movs	r1, #1
 8000370:	2003      	movs	r0, #3
 8000372:	f000 f9a5 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x02, DATA);
 8000376:	2101      	movs	r1, #1
 8000378:	2002      	movs	r0, #2
 800037a:	f000 f9a1 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x02, DATA);
 800037e:	2101      	movs	r1, #1
 8000380:	2002      	movs	r0, #2
 8000382:	f000 f99d 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x04, DATA);
 8000386:	2101      	movs	r1, #1
 8000388:	2004      	movs	r0, #4
 800038a:	f000 f999 	bl	80006c0 <LCD_DATA_MANAGER>
			break;
 800038e:	e03e      	b.n	800040e <main+0x1ca>
		case 3:
			LCD_DATA_MANAGER(0x01, DATA);
 8000390:	2101      	movs	r1, #1
 8000392:	2001      	movs	r0, #1
 8000394:	f000 f994 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x03, DATA);
 8000398:	2101      	movs	r1, #1
 800039a:	2003      	movs	r0, #3
 800039c:	f000 f990 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x03, DATA);
 80003a0:	2101      	movs	r1, #1
 80003a2:	2003      	movs	r0, #3
 80003a4:	f000 f98c 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x02, DATA);
 80003a8:	2101      	movs	r1, #1
 80003aa:	2002      	movs	r0, #2
 80003ac:	f000 f988 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x04, DATA);
 80003b0:	2101      	movs	r1, #1
 80003b2:	2004      	movs	r0, #4
 80003b4:	f000 f984 	bl	80006c0 <LCD_DATA_MANAGER>
			break;
 80003b8:	e029      	b.n	800040e <main+0x1ca>
		case 4:
			LCD_DATA_MANAGER(0x01, DATA);
 80003ba:	2101      	movs	r1, #1
 80003bc:	2001      	movs	r0, #1
 80003be:	f000 f97f 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x03, DATA);
 80003c2:	2101      	movs	r1, #1
 80003c4:	2003      	movs	r0, #3
 80003c6:	f000 f97b 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x03, DATA);
 80003ca:	2101      	movs	r1, #1
 80003cc:	2003      	movs	r0, #3
 80003ce:	f000 f977 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x03, DATA);
 80003d2:	2101      	movs	r1, #1
 80003d4:	2003      	movs	r0, #3
 80003d6:	f000 f973 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x04, DATA);
 80003da:	2101      	movs	r1, #1
 80003dc:	2004      	movs	r0, #4
 80003de:	f000 f96f 	bl	80006c0 <LCD_DATA_MANAGER>
			break;
 80003e2:	e014      	b.n	800040e <main+0x1ca>
		case 5:
			LCD_DATA_MANAGER(0x01, DATA);
 80003e4:	2101      	movs	r1, #1
 80003e6:	2001      	movs	r0, #1
 80003e8:	f000 f96a 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x03, DATA);
 80003ec:	2101      	movs	r1, #1
 80003ee:	2003      	movs	r0, #3
 80003f0:	f000 f966 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x03, DATA);
 80003f4:	2101      	movs	r1, #1
 80003f6:	2003      	movs	r0, #3
 80003f8:	f000 f962 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x03, DATA);
 80003fc:	2101      	movs	r1, #1
 80003fe:	2003      	movs	r0, #3
 8000400:	f000 f95e 	bl	80006c0 <LCD_DATA_MANAGER>
			LCD_DATA_MANAGER(0x05, DATA);
 8000404:	2101      	movs	r1, #1
 8000406:	2005      	movs	r0, #5
 8000408:	f000 f95a 	bl	80006c0 <LCD_DATA_MANAGER>
			break;
 800040c:	46c0      	nop			@ (mov r8, r8)
	locale = LCD_INTERPRETER_LOCALE(1, 4);
 800040e:	e751      	b.n	80002b4 <main+0x70>
 8000410:	20000100 	.word	0x20000100
 8000414:	20000058 	.word	0x20000058
 8000418:	20000000 	.word	0x20000000
 800041c:	20000106 	.word	0x20000106
 8000420:	08002e4c 	.word	0x08002e4c
 8000424:	20000107 	.word	0x20000107
 8000428:	08002e5c 	.word	0x08002e5c

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b590      	push	{r4, r7, lr}
 800042e:	b095      	sub	sp, #84	@ 0x54
 8000430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	2418      	movs	r4, #24
 8000434:	193b      	adds	r3, r7, r4
 8000436:	0018      	movs	r0, r3
 8000438:	2338      	movs	r3, #56	@ 0x38
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f002 fccd 	bl	8002ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	0018      	movs	r0, r3
 8000446:	2314      	movs	r3, #20
 8000448:	001a      	movs	r2, r3
 800044a:	2100      	movs	r1, #0
 800044c:	f002 fcc6 	bl	8002ddc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000450:	4b1c      	ldr	r3, [pc, #112]	@ (80004c4 <SystemClock_Config+0x98>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a1c      	ldr	r2, [pc, #112]	@ (80004c8 <SystemClock_Config+0x9c>)
 8000456:	401a      	ands	r2, r3
 8000458:	4b1a      	ldr	r3, [pc, #104]	@ (80004c4 <SystemClock_Config+0x98>)
 800045a:	2180      	movs	r1, #128	@ 0x80
 800045c:	0109      	lsls	r1, r1, #4
 800045e:	430a      	orrs	r2, r1
 8000460:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000462:	0021      	movs	r1, r4
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2202      	movs	r2, #2
 8000468:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2201      	movs	r2, #1
 800046e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2210      	movs	r2, #16
 8000474:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047c:	187b      	adds	r3, r7, r1
 800047e:	0018      	movs	r0, r3
 8000480:	f001 ff1a 	bl	80022b8 <HAL_RCC_OscConfig>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000488:	f000 fcf2 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	220f      	movs	r2, #15
 8000490:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2201      	movs	r2, #1
 8000496:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2280      	movs	r2, #128	@ 0x80
 800049c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004aa:	1d3b      	adds	r3, r7, #4
 80004ac:	2100      	movs	r1, #0
 80004ae:	0018      	movs	r0, r3
 80004b0:	f002 fac6 	bl	8002a40 <HAL_RCC_ClockConfig>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004b8:	f000 fcda 	bl	8000e70 <Error_Handler>
  }
}
 80004bc:	46c0      	nop			@ (mov r8, r8)
 80004be:	46bd      	mov	sp, r7
 80004c0:	b015      	add	sp, #84	@ 0x54
 80004c2:	bd90      	pop	{r4, r7, pc}
 80004c4:	40007000 	.word	0x40007000
 80004c8:	ffffe7ff 	.word	0xffffe7ff

080004cc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	003b      	movs	r3, r7
 80004d4:	0018      	movs	r0, r3
 80004d6:	2308      	movs	r3, #8
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f002 fc7e 	bl	8002ddc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80004e0:	4b2a      	ldr	r3, [pc, #168]	@ (800058c <MX_ADC_Init+0xc0>)
 80004e2:	4a2b      	ldr	r2, [pc, #172]	@ (8000590 <MX_ADC_Init+0xc4>)
 80004e4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80004e6:	4b29      	ldr	r3, [pc, #164]	@ (800058c <MX_ADC_Init+0xc0>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004ec:	4b27      	ldr	r3, [pc, #156]	@ (800058c <MX_ADC_Init+0xc0>)
 80004ee:	2280      	movs	r2, #128	@ 0x80
 80004f0:	05d2      	lsls	r2, r2, #23
 80004f2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004f4:	4b25      	ldr	r3, [pc, #148]	@ (800058c <MX_ADC_Init+0xc0>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80004fa:	4b24      	ldr	r3, [pc, #144]	@ (800058c <MX_ADC_Init+0xc0>)
 80004fc:	2207      	movs	r2, #7
 80004fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000500:	4b22      	ldr	r3, [pc, #136]	@ (800058c <MX_ADC_Init+0xc0>)
 8000502:	2201      	movs	r2, #1
 8000504:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000506:	4b21      	ldr	r3, [pc, #132]	@ (800058c <MX_ADC_Init+0xc0>)
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800050c:	4b1f      	ldr	r3, [pc, #124]	@ (800058c <MX_ADC_Init+0xc0>)
 800050e:	2220      	movs	r2, #32
 8000510:	2101      	movs	r1, #1
 8000512:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000514:	4b1d      	ldr	r3, [pc, #116]	@ (800058c <MX_ADC_Init+0xc0>)
 8000516:	2221      	movs	r2, #33	@ 0x21
 8000518:	2100      	movs	r1, #0
 800051a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051c:	4b1b      	ldr	r3, [pc, #108]	@ (800058c <MX_ADC_Init+0xc0>)
 800051e:	2200      	movs	r2, #0
 8000520:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000522:	4b1a      	ldr	r3, [pc, #104]	@ (800058c <MX_ADC_Init+0xc0>)
 8000524:	22c2      	movs	r2, #194	@ 0xc2
 8000526:	32ff      	adds	r2, #255	@ 0xff
 8000528:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800052a:	4b18      	ldr	r3, [pc, #96]	@ (800058c <MX_ADC_Init+0xc0>)
 800052c:	222c      	movs	r2, #44	@ 0x2c
 800052e:	2101      	movs	r1, #1
 8000530:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000532:	4b16      	ldr	r3, [pc, #88]	@ (800058c <MX_ADC_Init+0xc0>)
 8000534:	2204      	movs	r2, #4
 8000536:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000538:	4b14      	ldr	r3, [pc, #80]	@ (800058c <MX_ADC_Init+0xc0>)
 800053a:	2200      	movs	r2, #0
 800053c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <MX_ADC_Init+0xc0>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000544:	4b11      	ldr	r3, [pc, #68]	@ (800058c <MX_ADC_Init+0xc0>)
 8000546:	2200      	movs	r2, #0
 8000548:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800054a:	4b10      	ldr	r3, [pc, #64]	@ (800058c <MX_ADC_Init+0xc0>)
 800054c:	2200      	movs	r2, #0
 800054e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000550:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <MX_ADC_Init+0xc0>)
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fe10 	bl	8001178 <HAL_ADC_Init>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800055c:	f000 fc88 	bl	8000e70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000560:	003b      	movs	r3, r7
 8000562:	4a0c      	ldr	r2, [pc, #48]	@ (8000594 <MX_ADC_Init+0xc8>)
 8000564:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000566:	003b      	movs	r3, r7
 8000568:	2280      	movs	r2, #128	@ 0x80
 800056a:	0152      	lsls	r2, r2, #5
 800056c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800056e:	003a      	movs	r2, r7
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <MX_ADC_Init+0xc0>)
 8000572:	0011      	movs	r1, r2
 8000574:	0018      	movs	r0, r3
 8000576:	f001 f8c7 	bl	8001708 <HAL_ADC_ConfigChannel>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800057e:	f000 fc77 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	20000058 	.word	0x20000058
 8000590:	40012400 	.word	0x40012400
 8000594:	14000020 	.word	0x14000020

08000598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059e:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <MX_DMA_Init+0x38>)
 80005a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <MX_DMA_Init+0x38>)
 80005a4:	2101      	movs	r1, #1
 80005a6:	430a      	orrs	r2, r1
 80005a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <MX_DMA_Init+0x38>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	2201      	movs	r2, #1
 80005b0:	4013      	ands	r3, r2
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2009      	movs	r0, #9
 80005bc:	f001 fae2 	bl	8001b84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c0:	2009      	movs	r0, #9
 80005c2:	f001 faf4 	bl	8001bae <HAL_NVIC_EnableIRQ>

}
 80005c6:	46c0      	nop			@ (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b002      	add	sp, #8
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	40021000 	.word	0x40021000

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	0018      	movs	r0, r3
 80005de:	2314      	movs	r3, #20
 80005e0:	001a      	movs	r2, r3
 80005e2:	2100      	movs	r1, #0
 80005e4:	f002 fbfa 	bl	8002ddc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_GPIO_Init+0x68>)
 80005ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005ec:	4b13      	ldr	r3, [pc, #76]	@ (800063c <MX_GPIO_Init+0x68>)
 80005ee:	2101      	movs	r1, #1
 80005f0:	430a      	orrs	r2, r1
 80005f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_GPIO_Init+0x68>)
 80005f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005f8:	2201      	movs	r2, #1
 80005fa:	4013      	ands	r3, r2
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|RW_Pin|EN_Pin|D7_Pin
 8000600:	490f      	ldr	r1, [pc, #60]	@ (8000640 <MX_GPIO_Init+0x6c>)
 8000602:	23a0      	movs	r3, #160	@ 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2200      	movs	r2, #0
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fe1d 	bl	8002248 <HAL_GPIO_WritePin>
                          |D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin D7_Pin
                           D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D7_Pin
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <MX_GPIO_Init+0x6c>)
 8000612:	601a      	str	r2, [r3, #0]
                          |D6_Pin|D5_Pin|D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2201      	movs	r2, #1
 8000618:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	1d3a      	adds	r2, r7, #4
 8000628:	23a0      	movs	r3, #160	@ 0xa0
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fc94 	bl	8001f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b006      	add	sp, #24
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	0000870e 	.word	0x0000870e

08000644 <LCD_STARTUP>:

/* USER CODE BEGIN 4 */
void LCD_STARTUP(void){
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	LCD_DATA_MANAGER(0x33, INSTRUCTION);
 8000648:	2100      	movs	r1, #0
 800064a:	2033      	movs	r0, #51	@ 0x33
 800064c:	f000 f838 	bl	80006c0 <LCD_DATA_MANAGER>
	LCD_DATA_MANAGER(0x32, INSTRUCTION);
 8000650:	2100      	movs	r1, #0
 8000652:	2032      	movs	r0, #50	@ 0x32
 8000654:	f000 f834 	bl	80006c0 <LCD_DATA_MANAGER>

	LCD_DATA_MANAGER(0x28, INSTRUCTION);
 8000658:	2100      	movs	r1, #0
 800065a:	2028      	movs	r0, #40	@ 0x28
 800065c:	f000 f830 	bl	80006c0 <LCD_DATA_MANAGER>

	LCD_DATA_MANAGER(0x0C, INSTRUCTION);
 8000660:	2100      	movs	r1, #0
 8000662:	200c      	movs	r0, #12
 8000664:	f000 f82c 	bl	80006c0 <LCD_DATA_MANAGER>
	LCD_DATA_MANAGER(0x06, INSTRUCTION);
 8000668:	2100      	movs	r1, #0
 800066a:	2006      	movs	r0, #6
 800066c:	f000 f828 	bl	80006c0 <LCD_DATA_MANAGER>
	LCD_DATA_MANAGER(0x01, INSTRUCTION);
 8000670:	2100      	movs	r1, #0
 8000672:	2001      	movs	r0, #1
 8000674:	f000 f824 	bl	80006c0 <LCD_DATA_MANAGER>

	HAL_Delay(2);
 8000678:	2002      	movs	r0, #2
 800067a:	f000 fd59 	bl	8001130 <HAL_Delay>
}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <LCD_SEND_MESSAGE>:

void LCD_SEND_MESSAGE(char * message){
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	for (int i = 0; message[i] != '\0'; ++i){
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	e00a      	b.n	80006a8 <LCD_SEND_MESSAGE+0x24>
		LCD_DATA_MANAGER(message[i], DATA);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	18d3      	adds	r3, r2, r3
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2101      	movs	r1, #1
 800069c:	0018      	movs	r0, r3
 800069e:	f000 f80f 	bl	80006c0 <LCD_DATA_MANAGER>
	for (int i = 0; message[i] != '\0'; ++i){
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	3301      	adds	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	18d3      	adds	r3, r2, r3
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1ee      	bne.n	8000692 <LCD_SEND_MESSAGE+0xe>
	}
}
 80006b4:	46c0      	nop			@ (mov r8, r8)
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b004      	add	sp, #16
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <LCD_DATA_MANAGER>:
void LCD_DATA_MANAGER(uint8_t data, uint8_t state){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	0002      	movs	r2, r0
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	1dbb      	adds	r3, r7, #6
 80006ce:	1c0a      	adds	r2, r1, #0
 80006d0:	701a      	strb	r2, [r3, #0]
	PORT.P0 = (data >> 0) & 1;
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2201      	movs	r2, #1
 80006d8:	4013      	ands	r3, r2
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b96      	ldr	r3, [pc, #600]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 80006de:	2101      	movs	r1, #1
 80006e0:	400a      	ands	r2, r1
 80006e2:	0010      	movs	r0, r2
 80006e4:	781a      	ldrb	r2, [r3, #0]
 80006e6:	2101      	movs	r1, #1
 80006e8:	438a      	bics	r2, r1
 80006ea:	1c11      	adds	r1, r2, #0
 80006ec:	1c02      	adds	r2, r0, #0
 80006ee:	430a      	orrs	r2, r1
 80006f0:	701a      	strb	r2, [r3, #0]
	PORT.P1 = (data >> 1) & 1;
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	085b      	lsrs	r3, r3, #1
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	1c1a      	adds	r2, r3, #0
 80006fc:	2301      	movs	r3, #1
 80006fe:	4013      	ands	r3, r2
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b8d      	ldr	r3, [pc, #564]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 8000704:	2101      	movs	r1, #1
 8000706:	400a      	ands	r2, r1
 8000708:	1890      	adds	r0, r2, r2
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	2102      	movs	r1, #2
 800070e:	438a      	bics	r2, r1
 8000710:	1c11      	adds	r1, r2, #0
 8000712:	1c02      	adds	r2, r0, #0
 8000714:	430a      	orrs	r2, r1
 8000716:	701a      	strb	r2, [r3, #0]
	PORT.P2 = (data >> 2) & 1;
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	089b      	lsrs	r3, r3, #2
 800071e:	b2db      	uxtb	r3, r3
 8000720:	1c1a      	adds	r2, r3, #0
 8000722:	2301      	movs	r3, #1
 8000724:	4013      	ands	r3, r2
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b83      	ldr	r3, [pc, #524]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 800072a:	2101      	movs	r1, #1
 800072c:	400a      	ands	r2, r1
 800072e:	0090      	lsls	r0, r2, #2
 8000730:	781a      	ldrb	r2, [r3, #0]
 8000732:	2104      	movs	r1, #4
 8000734:	438a      	bics	r2, r1
 8000736:	1c11      	adds	r1, r2, #0
 8000738:	1c02      	adds	r2, r0, #0
 800073a:	430a      	orrs	r2, r1
 800073c:	701a      	strb	r2, [r3, #0]
	PORT.P3 = (data >> 3) & 1;
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	08db      	lsrs	r3, r3, #3
 8000744:	b2db      	uxtb	r3, r3
 8000746:	1c1a      	adds	r2, r3, #0
 8000748:	2301      	movs	r3, #1
 800074a:	4013      	ands	r3, r2
 800074c:	b2da      	uxtb	r2, r3
 800074e:	4b7a      	ldr	r3, [pc, #488]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 8000750:	2101      	movs	r1, #1
 8000752:	400a      	ands	r2, r1
 8000754:	00d0      	lsls	r0, r2, #3
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	2108      	movs	r1, #8
 800075a:	438a      	bics	r2, r1
 800075c:	1c11      	adds	r1, r2, #0
 800075e:	1c02      	adds	r2, r0, #0
 8000760:	430a      	orrs	r2, r1
 8000762:	701a      	strb	r2, [r3, #0]
	PORT.P4 = (data >> 4) & 1;
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	091b      	lsrs	r3, r3, #4
 800076a:	b2db      	uxtb	r3, r3
 800076c:	1c1a      	adds	r2, r3, #0
 800076e:	2301      	movs	r3, #1
 8000770:	4013      	ands	r3, r2
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b70      	ldr	r3, [pc, #448]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 8000776:	2101      	movs	r1, #1
 8000778:	400a      	ands	r2, r1
 800077a:	0110      	lsls	r0, r2, #4
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	2110      	movs	r1, #16
 8000780:	438a      	bics	r2, r1
 8000782:	1c11      	adds	r1, r2, #0
 8000784:	1c02      	adds	r2, r0, #0
 8000786:	430a      	orrs	r2, r1
 8000788:	701a      	strb	r2, [r3, #0]
	PORT.P5 = (data >> 5) & 1;
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	b2db      	uxtb	r3, r3
 8000792:	1c1a      	adds	r2, r3, #0
 8000794:	2301      	movs	r3, #1
 8000796:	4013      	ands	r3, r2
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b67      	ldr	r3, [pc, #412]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 800079c:	2101      	movs	r1, #1
 800079e:	400a      	ands	r2, r1
 80007a0:	0150      	lsls	r0, r2, #5
 80007a2:	781a      	ldrb	r2, [r3, #0]
 80007a4:	2120      	movs	r1, #32
 80007a6:	438a      	bics	r2, r1
 80007a8:	1c11      	adds	r1, r2, #0
 80007aa:	1c02      	adds	r2, r0, #0
 80007ac:	430a      	orrs	r2, r1
 80007ae:	701a      	strb	r2, [r3, #0]
	PORT.P6 = (data >> 6) & 1;
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	099b      	lsrs	r3, r3, #6
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	1c1a      	adds	r2, r3, #0
 80007ba:	2301      	movs	r3, #1
 80007bc:	4013      	ands	r3, r2
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b5d      	ldr	r3, [pc, #372]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 80007c2:	2101      	movs	r1, #1
 80007c4:	400a      	ands	r2, r1
 80007c6:	0190      	lsls	r0, r2, #6
 80007c8:	781a      	ldrb	r2, [r3, #0]
 80007ca:	2140      	movs	r1, #64	@ 0x40
 80007cc:	438a      	bics	r2, r1
 80007ce:	1c11      	adds	r1, r2, #0
 80007d0:	1c02      	adds	r2, r0, #0
 80007d2:	430a      	orrs	r2, r1
 80007d4:	701a      	strb	r2, [r3, #0]
	PORT.P7 = (data >> 7) & 1;
 80007d6:	1dfb      	adds	r3, r7, #7
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	09db      	lsrs	r3, r3, #7
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	1c1a      	adds	r2, r3, #0
 80007e0:	2301      	movs	r3, #1
 80007e2:	4013      	ands	r3, r2
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b54      	ldr	r3, [pc, #336]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 80007e8:	01d0      	lsls	r0, r2, #7
 80007ea:	781a      	ldrb	r2, [r3, #0]
 80007ec:	217f      	movs	r1, #127	@ 0x7f
 80007ee:	400a      	ands	r2, r1
 80007f0:	1c11      	adds	r1, r2, #0
 80007f2:	1c02      	adds	r2, r0, #0
 80007f4:	430a      	orrs	r2, r1
 80007f6:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, state);
 80007f8:	1dbb      	adds	r3, r7, #6
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	23a0      	movs	r3, #160	@ 0xa0
 80007fe:	05db      	lsls	r3, r3, #23
 8000800:	2102      	movs	r1, #2
 8000802:	0018      	movs	r0, r3
 8000804:	f001 fd20 	bl	8002248 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000808:	23a0      	movs	r3, #160	@ 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	2200      	movs	r2, #0
 800080e:	2104      	movs	r1, #4
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fd19 	bl	8002248 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P4);
 8000816:	4b48      	ldr	r3, [pc, #288]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	06db      	lsls	r3, r3, #27
 800081c:	0fdb      	lsrs	r3, r3, #31
 800081e:	b2db      	uxtb	r3, r3
 8000820:	001a      	movs	r2, r3
 8000822:	2380      	movs	r3, #128	@ 0x80
 8000824:	0219      	lsls	r1, r3, #8
 8000826:	23a0      	movs	r3, #160	@ 0xa0
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	0018      	movs	r0, r3
 800082c:	f001 fd0c 	bl	8002248 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P5);
 8000830:	4b41      	ldr	r3, [pc, #260]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	069b      	lsls	r3, r3, #26
 8000836:	0fdb      	lsrs	r3, r3, #31
 8000838:	b2db      	uxtb	r3, r3
 800083a:	001a      	movs	r2, r3
 800083c:	2380      	movs	r3, #128	@ 0x80
 800083e:	00d9      	lsls	r1, r3, #3
 8000840:	23a0      	movs	r3, #160	@ 0xa0
 8000842:	05db      	lsls	r3, r3, #23
 8000844:	0018      	movs	r0, r3
 8000846:	f001 fcff 	bl	8002248 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P6);
 800084a:	4b3b      	ldr	r3, [pc, #236]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	065b      	lsls	r3, r3, #25
 8000850:	0fdb      	lsrs	r3, r3, #31
 8000852:	b2db      	uxtb	r3, r3
 8000854:	001a      	movs	r2, r3
 8000856:	2380      	movs	r3, #128	@ 0x80
 8000858:	0099      	lsls	r1, r3, #2
 800085a:	23a0      	movs	r3, #160	@ 0xa0
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	0018      	movs	r0, r3
 8000860:	f001 fcf2 	bl	8002248 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P7);
 8000864:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	061b      	lsls	r3, r3, #24
 800086a:	0fdb      	lsrs	r3, r3, #31
 800086c:	b2db      	uxtb	r3, r3
 800086e:	001a      	movs	r2, r3
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	0059      	lsls	r1, r3, #1
 8000874:	23a0      	movs	r3, #160	@ 0xa0
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	0018      	movs	r0, r3
 800087a:	f001 fce5 	bl	8002248 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 800087e:	23a0      	movs	r3, #160	@ 0xa0
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	2108      	movs	r1, #8
 8000884:	0018      	movs	r0, r3
 8000886:	f001 fcfc 	bl	8002282 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 800088a:	2001      	movs	r0, #1
 800088c:	f000 fc50 	bl	8001130 <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8000890:	23a0      	movs	r3, #160	@ 0xa0
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	2108      	movs	r1, #8
 8000896:	0018      	movs	r0, r3
 8000898:	f001 fcf3 	bl	8002282 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f000 fc47 	bl	8001130 <HAL_Delay>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P0);
 80008a2:	4b25      	ldr	r3, [pc, #148]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	07db      	lsls	r3, r3, #31
 80008a8:	0fdb      	lsrs	r3, r3, #31
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	001a      	movs	r2, r3
 80008ae:	2380      	movs	r3, #128	@ 0x80
 80008b0:	0219      	lsls	r1, r3, #8
 80008b2:	23a0      	movs	r3, #160	@ 0xa0
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fcc6 	bl	8002248 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P1);
 80008bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	079b      	lsls	r3, r3, #30
 80008c2:	0fdb      	lsrs	r3, r3, #31
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	001a      	movs	r2, r3
 80008c8:	2380      	movs	r3, #128	@ 0x80
 80008ca:	00d9      	lsls	r1, r3, #3
 80008cc:	23a0      	movs	r3, #160	@ 0xa0
 80008ce:	05db      	lsls	r3, r3, #23
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fcb9 	bl	8002248 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P2);
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	075b      	lsls	r3, r3, #29
 80008dc:	0fdb      	lsrs	r3, r3, #31
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	001a      	movs	r2, r3
 80008e2:	2380      	movs	r3, #128	@ 0x80
 80008e4:	0099      	lsls	r1, r3, #2
 80008e6:	23a0      	movs	r3, #160	@ 0xa0
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 fcac 	bl	8002248 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P3);
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <LCD_DATA_MANAGER+0x278>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	071b      	lsls	r3, r3, #28
 80008f6:	0fdb      	lsrs	r3, r3, #31
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	001a      	movs	r2, r3
 80008fc:	2380      	movs	r3, #128	@ 0x80
 80008fe:	0059      	lsls	r1, r3, #1
 8000900:	23a0      	movs	r3, #160	@ 0xa0
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	0018      	movs	r0, r3
 8000906:	f001 fc9f 	bl	8002248 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 800090a:	23a0      	movs	r3, #160	@ 0xa0
 800090c:	05db      	lsls	r3, r3, #23
 800090e:	2108      	movs	r1, #8
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fcb6 	bl	8002282 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 8000916:	2001      	movs	r0, #1
 8000918:	f000 fc0a 	bl	8001130 <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 800091c:	23a0      	movs	r3, #160	@ 0xa0
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	2108      	movs	r1, #8
 8000922:	0018      	movs	r0, r3
 8000924:	f001 fcad 	bl	8002282 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 8000928:	2001      	movs	r0, #1
 800092a:	f000 fc01 	bl	8001130 <HAL_Delay>
}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b002      	add	sp, #8
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	200000fc 	.word	0x200000fc

0800093c <LCD_CREATE_CHAR>:


void LCD_CREATE_CHAR(uint8_t ADDRS, unsigned char* data, uint8_t select){
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6039      	str	r1, [r7, #0]
 8000944:	0011      	movs	r1, r2
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	1c02      	adds	r2, r0, #0
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	1dbb      	adds	r3, r7, #6
 800094e:	1c0a      	adds	r2, r1, #0
 8000950:	701a      	strb	r2, [r3, #0]
	switch (ADDRS){
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b07      	cmp	r3, #7
 8000958:	d82c      	bhi.n	80009b4 <LCD_CREATE_CHAR+0x78>
 800095a:	009a      	lsls	r2, r3, #2
 800095c:	4b22      	ldr	r3, [pc, #136]	@ (80009e8 <LCD_CREATE_CHAR+0xac>)
 800095e:	18d3      	adds	r3, r2, r3
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	469f      	mov	pc, r3
		case 0: LCD_DATA_MANAGER(0x40 + 0,  INSTRUCTION); break;
 8000964:	2100      	movs	r1, #0
 8000966:	2040      	movs	r0, #64	@ 0x40
 8000968:	f7ff feaa 	bl	80006c0 <LCD_DATA_MANAGER>
 800096c:	e022      	b.n	80009b4 <LCD_CREATE_CHAR+0x78>
		case 1: LCD_DATA_MANAGER(0x40 + 8,  INSTRUCTION); break;
 800096e:	2100      	movs	r1, #0
 8000970:	2048      	movs	r0, #72	@ 0x48
 8000972:	f7ff fea5 	bl	80006c0 <LCD_DATA_MANAGER>
 8000976:	e01d      	b.n	80009b4 <LCD_CREATE_CHAR+0x78>
		case 2: LCD_DATA_MANAGER(0x40 + 16, INSTRUCTION); break;
 8000978:	2100      	movs	r1, #0
 800097a:	2050      	movs	r0, #80	@ 0x50
 800097c:	f7ff fea0 	bl	80006c0 <LCD_DATA_MANAGER>
 8000980:	e018      	b.n	80009b4 <LCD_CREATE_CHAR+0x78>
		case 3: LCD_DATA_MANAGER(0x40 + 24, INSTRUCTION); break;
 8000982:	2100      	movs	r1, #0
 8000984:	2058      	movs	r0, #88	@ 0x58
 8000986:	f7ff fe9b 	bl	80006c0 <LCD_DATA_MANAGER>
 800098a:	e013      	b.n	80009b4 <LCD_CREATE_CHAR+0x78>
		case 4: LCD_DATA_MANAGER(0x40 + 32, INSTRUCTION); break;
 800098c:	2100      	movs	r1, #0
 800098e:	2060      	movs	r0, #96	@ 0x60
 8000990:	f7ff fe96 	bl	80006c0 <LCD_DATA_MANAGER>
 8000994:	e00e      	b.n	80009b4 <LCD_CREATE_CHAR+0x78>
		case 5: LCD_DATA_MANAGER(0x40 + 40, INSTRUCTION); break;
 8000996:	2100      	movs	r1, #0
 8000998:	2068      	movs	r0, #104	@ 0x68
 800099a:	f7ff fe91 	bl	80006c0 <LCD_DATA_MANAGER>
 800099e:	e009      	b.n	80009b4 <LCD_CREATE_CHAR+0x78>
		case 6: LCD_DATA_MANAGER(0x40 + 48, INSTRUCTION); break;
 80009a0:	2100      	movs	r1, #0
 80009a2:	2070      	movs	r0, #112	@ 0x70
 80009a4:	f7ff fe8c 	bl	80006c0 <LCD_DATA_MANAGER>
 80009a8:	e004      	b.n	80009b4 <LCD_CREATE_CHAR+0x78>
		case 7: LCD_DATA_MANAGER(0x40 + 56, INSTRUCTION); break;
 80009aa:	2100      	movs	r1, #0
 80009ac:	2078      	movs	r0, #120	@ 0x78
 80009ae:	f7ff fe87 	bl	80006c0 <LCD_DATA_MANAGER>
 80009b2:	46c0      	nop			@ (mov r8, r8)
	}

	for (int i = 0; i < 8; ++i) LCD_DATA_MANAGER(BATTERY_CHAR[select][i], DATA);
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	e00e      	b.n	80009d8 <LCD_CREATE_CHAR+0x9c>
 80009ba:	1dbb      	adds	r3, r7, #6
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4a0b      	ldr	r2, [pc, #44]	@ (80009ec <LCD_CREATE_CHAR+0xb0>)
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	18d2      	adds	r2, r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	18d3      	adds	r3, r2, r3
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2101      	movs	r1, #1
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff fe77 	bl	80006c0 <LCD_DATA_MANAGER>
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	3301      	adds	r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2b07      	cmp	r3, #7
 80009dc:	dded      	ble.n	80009ba <LCD_CREATE_CHAR+0x7e>
}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b004      	add	sp, #16
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	08002e74 	.word	0x08002e74
 80009ec:	20000000 	.word	0x20000000

080009f0 <LCD_INTERPRETER_LOCALE>:

uint8_t LCD_INTERPRETER_LOCALE(uint8_t row, uint8_t column){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	0002      	movs	r2, r0
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	1dbb      	adds	r3, r7, #6
 80009fe:	1c0a      	adds	r2, r1, #0
 8000a00:	701a      	strb	r2, [r3, #0]
	if ((row == 1) && (column <= 13)){
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d15e      	bne.n	8000ac8 <LCD_INTERPRETER_LOCALE+0xd8>
 8000a0a:	1dbb      	adds	r3, r7, #6
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b0d      	cmp	r3, #13
 8000a10:	d85a      	bhi.n	8000ac8 <LCD_INTERPRETER_LOCALE+0xd8>
		switch (column){
 8000a12:	1dbb      	adds	r3, r7, #6
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b14      	cmp	r3, #20
 8000a18:	d900      	bls.n	8000a1c <LCD_INTERPRETER_LOCALE+0x2c>
 8000a1a:	e17c      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
 8000a1c:	009a      	lsls	r2, r3, #2
 8000a1e:	4bc1      	ldr	r3, [pc, #772]	@ (8000d24 <LCD_INTERPRETER_LOCALE+0x334>)
 8000a20:	18d3      	adds	r3, r2, r3
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	469f      	mov	pc, r3
			case 1: column = 0x80; break;
 8000a26:	1dbb      	adds	r3, r7, #6
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	e04b      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 2: column = 0x81; break;
 8000a2e:	1dbb      	adds	r3, r7, #6
 8000a30:	2281      	movs	r2, #129	@ 0x81
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	e047      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 3: column = 0x82; break;
 8000a36:	1dbb      	adds	r3, r7, #6
 8000a38:	2282      	movs	r2, #130	@ 0x82
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	e043      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 4: column = 0x83; break;
 8000a3e:	1dbb      	adds	r3, r7, #6
 8000a40:	2283      	movs	r2, #131	@ 0x83
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	e03f      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 5: column = 0x84; break;
 8000a46:	1dbb      	adds	r3, r7, #6
 8000a48:	2284      	movs	r2, #132	@ 0x84
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e03b      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 6: column = 0x85; break;
 8000a4e:	1dbb      	adds	r3, r7, #6
 8000a50:	2285      	movs	r2, #133	@ 0x85
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	e037      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 7: column = 0x86; break;
 8000a56:	1dbb      	adds	r3, r7, #6
 8000a58:	2286      	movs	r2, #134	@ 0x86
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	e033      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 8: column = 0x87; break;
 8000a5e:	1dbb      	adds	r3, r7, #6
 8000a60:	2287      	movs	r2, #135	@ 0x87
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	e02f      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 9: column = 0x88; break;
 8000a66:	1dbb      	adds	r3, r7, #6
 8000a68:	2288      	movs	r2, #136	@ 0x88
 8000a6a:	701a      	strb	r2, [r3, #0]
 8000a6c:	e02b      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 10: column = 0x89; break;
 8000a6e:	1dbb      	adds	r3, r7, #6
 8000a70:	2289      	movs	r2, #137	@ 0x89
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	e027      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 11: column = 0x8A; break;
 8000a76:	1dbb      	adds	r3, r7, #6
 8000a78:	228a      	movs	r2, #138	@ 0x8a
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e023      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 12: column = 0x8B; break;
 8000a7e:	1dbb      	adds	r3, r7, #6
 8000a80:	228b      	movs	r2, #139	@ 0x8b
 8000a82:	701a      	strb	r2, [r3, #0]
 8000a84:	e01f      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 13: column = 0x8C; break;
 8000a86:	1dbb      	adds	r3, r7, #6
 8000a88:	228c      	movs	r2, #140	@ 0x8c
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	e01b      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 14: column = 0x8D; break;
 8000a8e:	1dbb      	adds	r3, r7, #6
 8000a90:	228d      	movs	r2, #141	@ 0x8d
 8000a92:	701a      	strb	r2, [r3, #0]
 8000a94:	e017      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 15: column = 0x8E; break;
 8000a96:	1dbb      	adds	r3, r7, #6
 8000a98:	228e      	movs	r2, #142	@ 0x8e
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	e013      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 16: column = 0x8F; break;
 8000a9e:	1dbb      	adds	r3, r7, #6
 8000aa0:	228f      	movs	r2, #143	@ 0x8f
 8000aa2:	701a      	strb	r2, [r3, #0]
 8000aa4:	e00f      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 17: column = 0x90; break;
 8000aa6:	1dbb      	adds	r3, r7, #6
 8000aa8:	2290      	movs	r2, #144	@ 0x90
 8000aaa:	701a      	strb	r2, [r3, #0]
 8000aac:	e00b      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 18: column = 0x91; break;
 8000aae:	1dbb      	adds	r3, r7, #6
 8000ab0:	2291      	movs	r2, #145	@ 0x91
 8000ab2:	701a      	strb	r2, [r3, #0]
 8000ab4:	e007      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 19: column = 0x92; break;
 8000ab6:	1dbb      	adds	r3, r7, #6
 8000ab8:	2292      	movs	r2, #146	@ 0x92
 8000aba:	701a      	strb	r2, [r3, #0]
 8000abc:	e003      	b.n	8000ac6 <LCD_INTERPRETER_LOCALE+0xd6>
			case 20: column = 0x93; break;
 8000abe:	1dbb      	adds	r3, r7, #6
 8000ac0:	2293      	movs	r2, #147	@ 0x93
 8000ac2:	701a      	strb	r2, [r3, #0]
 8000ac4:	46c0      	nop			@ (mov r8, r8)
		switch (column){
 8000ac6:	e126      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
		}
	}

	else if ((row == 2) && (column <= 13)){
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d15e      	bne.n	8000b8e <LCD_INTERPRETER_LOCALE+0x19e>
 8000ad0:	1dbb      	adds	r3, r7, #6
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b0d      	cmp	r3, #13
 8000ad6:	d85a      	bhi.n	8000b8e <LCD_INTERPRETER_LOCALE+0x19e>
		switch (column){
 8000ad8:	1dbb      	adds	r3, r7, #6
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b14      	cmp	r3, #20
 8000ade:	d900      	bls.n	8000ae2 <LCD_INTERPRETER_LOCALE+0xf2>
 8000ae0:	e119      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
 8000ae2:	009a      	lsls	r2, r3, #2
 8000ae4:	4b90      	ldr	r3, [pc, #576]	@ (8000d28 <LCD_INTERPRETER_LOCALE+0x338>)
 8000ae6:	18d3      	adds	r3, r2, r3
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	469f      	mov	pc, r3
			case 1: column = 0xC0; break;
 8000aec:	1dbb      	adds	r3, r7, #6
 8000aee:	22c0      	movs	r2, #192	@ 0xc0
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	e04b      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 2: column = 0xC1; break;
 8000af4:	1dbb      	adds	r3, r7, #6
 8000af6:	22c1      	movs	r2, #193	@ 0xc1
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e047      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 3: column = 0xC2; break;
 8000afc:	1dbb      	adds	r3, r7, #6
 8000afe:	22c2      	movs	r2, #194	@ 0xc2
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e043      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 4: column = 0xC3; break;
 8000b04:	1dbb      	adds	r3, r7, #6
 8000b06:	22c3      	movs	r2, #195	@ 0xc3
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	e03f      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 5: column = 0xC4; break;
 8000b0c:	1dbb      	adds	r3, r7, #6
 8000b0e:	22c4      	movs	r2, #196	@ 0xc4
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e03b      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 6: column = 0xC5; break;
 8000b14:	1dbb      	adds	r3, r7, #6
 8000b16:	22c5      	movs	r2, #197	@ 0xc5
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e037      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 7: column = 0xC6; break;
 8000b1c:	1dbb      	adds	r3, r7, #6
 8000b1e:	22c6      	movs	r2, #198	@ 0xc6
 8000b20:	701a      	strb	r2, [r3, #0]
 8000b22:	e033      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 8: column = 0xC7; break;
 8000b24:	1dbb      	adds	r3, r7, #6
 8000b26:	22c7      	movs	r2, #199	@ 0xc7
 8000b28:	701a      	strb	r2, [r3, #0]
 8000b2a:	e02f      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 9: column = 0xC8; break;
 8000b2c:	1dbb      	adds	r3, r7, #6
 8000b2e:	22c8      	movs	r2, #200	@ 0xc8
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	e02b      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 10: column = 0xC9; break;
 8000b34:	1dbb      	adds	r3, r7, #6
 8000b36:	22c9      	movs	r2, #201	@ 0xc9
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e027      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 11: column = 0xCA; break;
 8000b3c:	1dbb      	adds	r3, r7, #6
 8000b3e:	22ca      	movs	r2, #202	@ 0xca
 8000b40:	701a      	strb	r2, [r3, #0]
 8000b42:	e023      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 12: column = 0xCB; break;
 8000b44:	1dbb      	adds	r3, r7, #6
 8000b46:	22cb      	movs	r2, #203	@ 0xcb
 8000b48:	701a      	strb	r2, [r3, #0]
 8000b4a:	e01f      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 13: column = 0xCC; break;
 8000b4c:	1dbb      	adds	r3, r7, #6
 8000b4e:	22cc      	movs	r2, #204	@ 0xcc
 8000b50:	701a      	strb	r2, [r3, #0]
 8000b52:	e01b      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 14: column = 0xCD; break;
 8000b54:	1dbb      	adds	r3, r7, #6
 8000b56:	22cd      	movs	r2, #205	@ 0xcd
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e017      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 15: column = 0xCE; break;
 8000b5c:	1dbb      	adds	r3, r7, #6
 8000b5e:	22ce      	movs	r2, #206	@ 0xce
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e013      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 16: column = 0xCF; break;
 8000b64:	1dbb      	adds	r3, r7, #6
 8000b66:	22cf      	movs	r2, #207	@ 0xcf
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	e00f      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 17: column = 0xD0; break;
 8000b6c:	1dbb      	adds	r3, r7, #6
 8000b6e:	22d0      	movs	r2, #208	@ 0xd0
 8000b70:	701a      	strb	r2, [r3, #0]
 8000b72:	e00b      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 18: column = 0xD1; break;
 8000b74:	1dbb      	adds	r3, r7, #6
 8000b76:	22d1      	movs	r2, #209	@ 0xd1
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	e007      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 19: column = 0xD2; break;
 8000b7c:	1dbb      	adds	r3, r7, #6
 8000b7e:	22d2      	movs	r2, #210	@ 0xd2
 8000b80:	701a      	strb	r2, [r3, #0]
 8000b82:	e003      	b.n	8000b8c <LCD_INTERPRETER_LOCALE+0x19c>
			case 20: column = 0xD3; break;
 8000b84:	1dbb      	adds	r3, r7, #6
 8000b86:	22d3      	movs	r2, #211	@ 0xd3
 8000b88:	701a      	strb	r2, [r3, #0]
 8000b8a:	46c0      	nop			@ (mov r8, r8)
		switch (column){
 8000b8c:	e0c3      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
		}
	}

	else if ((row == 3) && (column <= 13)){
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b03      	cmp	r3, #3
 8000b94:	d15e      	bne.n	8000c54 <LCD_INTERPRETER_LOCALE+0x264>
 8000b96:	1dbb      	adds	r3, r7, #6
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b0d      	cmp	r3, #13
 8000b9c:	d85a      	bhi.n	8000c54 <LCD_INTERPRETER_LOCALE+0x264>
		switch (column){
 8000b9e:	1dbb      	adds	r3, r7, #6
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b14      	cmp	r3, #20
 8000ba4:	d900      	bls.n	8000ba8 <LCD_INTERPRETER_LOCALE+0x1b8>
 8000ba6:	e0b6      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
 8000ba8:	009a      	lsls	r2, r3, #2
 8000baa:	4b60      	ldr	r3, [pc, #384]	@ (8000d2c <LCD_INTERPRETER_LOCALE+0x33c>)
 8000bac:	18d3      	adds	r3, r2, r3
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	469f      	mov	pc, r3
			case 1: column = 0x94; break;
 8000bb2:	1dbb      	adds	r3, r7, #6
 8000bb4:	2294      	movs	r2, #148	@ 0x94
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	e04b      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 2: column = 0x95; break;
 8000bba:	1dbb      	adds	r3, r7, #6
 8000bbc:	2295      	movs	r2, #149	@ 0x95
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	e047      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 3: column = 0x96; break;
 8000bc2:	1dbb      	adds	r3, r7, #6
 8000bc4:	2296      	movs	r2, #150	@ 0x96
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	e043      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 4: column = 0x97; break;
 8000bca:	1dbb      	adds	r3, r7, #6
 8000bcc:	2297      	movs	r2, #151	@ 0x97
 8000bce:	701a      	strb	r2, [r3, #0]
 8000bd0:	e03f      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 5: column = 0x98; break;
 8000bd2:	1dbb      	adds	r3, r7, #6
 8000bd4:	2298      	movs	r2, #152	@ 0x98
 8000bd6:	701a      	strb	r2, [r3, #0]
 8000bd8:	e03b      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 6: column = 0x99; break;
 8000bda:	1dbb      	adds	r3, r7, #6
 8000bdc:	2299      	movs	r2, #153	@ 0x99
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	e037      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 7: column = 0x9A; break;
 8000be2:	1dbb      	adds	r3, r7, #6
 8000be4:	229a      	movs	r2, #154	@ 0x9a
 8000be6:	701a      	strb	r2, [r3, #0]
 8000be8:	e033      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 8: column = 0x9B; break;
 8000bea:	1dbb      	adds	r3, r7, #6
 8000bec:	229b      	movs	r2, #155	@ 0x9b
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e02f      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 9: column = 0x9C; break;
 8000bf2:	1dbb      	adds	r3, r7, #6
 8000bf4:	229c      	movs	r2, #156	@ 0x9c
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e02b      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 10: column = 0x9D; break;
 8000bfa:	1dbb      	adds	r3, r7, #6
 8000bfc:	229d      	movs	r2, #157	@ 0x9d
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e027      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 11: column = 0x9E; break;
 8000c02:	1dbb      	adds	r3, r7, #6
 8000c04:	229e      	movs	r2, #158	@ 0x9e
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	e023      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 12: column = 0x9F; break;
 8000c0a:	1dbb      	adds	r3, r7, #6
 8000c0c:	229f      	movs	r2, #159	@ 0x9f
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	e01f      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 13: column = 0xA0; break;
 8000c12:	1dbb      	adds	r3, r7, #6
 8000c14:	22a0      	movs	r2, #160	@ 0xa0
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	e01b      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 14: column = 0xA1; break;
 8000c1a:	1dbb      	adds	r3, r7, #6
 8000c1c:	22a1      	movs	r2, #161	@ 0xa1
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	e017      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 15: column = 0xA2; break;
 8000c22:	1dbb      	adds	r3, r7, #6
 8000c24:	22a2      	movs	r2, #162	@ 0xa2
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	e013      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 16: column = 0xA3; break;
 8000c2a:	1dbb      	adds	r3, r7, #6
 8000c2c:	22a3      	movs	r2, #163	@ 0xa3
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	e00f      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 17: column = 0xA4; break;
 8000c32:	1dbb      	adds	r3, r7, #6
 8000c34:	22a4      	movs	r2, #164	@ 0xa4
 8000c36:	701a      	strb	r2, [r3, #0]
 8000c38:	e00b      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 18: column = 0xA5; break;
 8000c3a:	1dbb      	adds	r3, r7, #6
 8000c3c:	22a5      	movs	r2, #165	@ 0xa5
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	e007      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 19: column = 0xA6; break;
 8000c42:	1dbb      	adds	r3, r7, #6
 8000c44:	22a6      	movs	r2, #166	@ 0xa6
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	e003      	b.n	8000c52 <LCD_INTERPRETER_LOCALE+0x262>
			case 20: column = 0xA7; break;
 8000c4a:	1dbb      	adds	r3, r7, #6
 8000c4c:	22a7      	movs	r2, #167	@ 0xa7
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	46c0      	nop			@ (mov r8, r8)
		switch (column){
 8000c52:	e060      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
		}
	}

	else if ((row == 4) && (column <= 13)){
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d15c      	bne.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
 8000c5c:	1dbb      	adds	r3, r7, #6
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b0d      	cmp	r3, #13
 8000c62:	d858      	bhi.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
		switch (column){
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b14      	cmp	r3, #20
 8000c6a:	d854      	bhi.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
 8000c6c:	009a      	lsls	r2, r3, #2
 8000c6e:	4b30      	ldr	r3, [pc, #192]	@ (8000d30 <LCD_INTERPRETER_LOCALE+0x340>)
 8000c70:	18d3      	adds	r3, r2, r3
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	469f      	mov	pc, r3
			case 1: column = 0xD4; break;
 8000c76:	1dbb      	adds	r3, r7, #6
 8000c78:	22d4      	movs	r2, #212	@ 0xd4
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e04b      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 2: column = 0xD5; break;
 8000c7e:	1dbb      	adds	r3, r7, #6
 8000c80:	22d5      	movs	r2, #213	@ 0xd5
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e047      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 3: column = 0xD6; break;
 8000c86:	1dbb      	adds	r3, r7, #6
 8000c88:	22d6      	movs	r2, #214	@ 0xd6
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e043      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 4: column = 0xD7; break;
 8000c8e:	1dbb      	adds	r3, r7, #6
 8000c90:	22d7      	movs	r2, #215	@ 0xd7
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e03f      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 5: column = 0xD8; break;
 8000c96:	1dbb      	adds	r3, r7, #6
 8000c98:	22d8      	movs	r2, #216	@ 0xd8
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e03b      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 6: column = 0xD9; break;
 8000c9e:	1dbb      	adds	r3, r7, #6
 8000ca0:	22d9      	movs	r2, #217	@ 0xd9
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	e037      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 7: column = 0xDA; break;
 8000ca6:	1dbb      	adds	r3, r7, #6
 8000ca8:	22da      	movs	r2, #218	@ 0xda
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	e033      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 8: column = 0xDB; break;
 8000cae:	1dbb      	adds	r3, r7, #6
 8000cb0:	22db      	movs	r2, #219	@ 0xdb
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	e02f      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 9: column = 0xDC; break;
 8000cb6:	1dbb      	adds	r3, r7, #6
 8000cb8:	22dc      	movs	r2, #220	@ 0xdc
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e02b      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 10: column = 0xDD; break;
 8000cbe:	1dbb      	adds	r3, r7, #6
 8000cc0:	22dd      	movs	r2, #221	@ 0xdd
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	e027      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 11: column = 0xDE; break;
 8000cc6:	1dbb      	adds	r3, r7, #6
 8000cc8:	22de      	movs	r2, #222	@ 0xde
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	e023      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 12: column = 0xDF; break;
 8000cce:	1dbb      	adds	r3, r7, #6
 8000cd0:	22df      	movs	r2, #223	@ 0xdf
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e01f      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 13: column = 0xE0; break;
 8000cd6:	1dbb      	adds	r3, r7, #6
 8000cd8:	22e0      	movs	r2, #224	@ 0xe0
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e01b      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 14: column = 0xE1; break;
 8000cde:	1dbb      	adds	r3, r7, #6
 8000ce0:	22e1      	movs	r2, #225	@ 0xe1
 8000ce2:	701a      	strb	r2, [r3, #0]
 8000ce4:	e017      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 15: column = 0xE2; break;
 8000ce6:	1dbb      	adds	r3, r7, #6
 8000ce8:	22e2      	movs	r2, #226	@ 0xe2
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	e013      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 16: column = 0xE3; break;
 8000cee:	1dbb      	adds	r3, r7, #6
 8000cf0:	22e3      	movs	r2, #227	@ 0xe3
 8000cf2:	701a      	strb	r2, [r3, #0]
 8000cf4:	e00f      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 17: column = 0xE4; break;
 8000cf6:	1dbb      	adds	r3, r7, #6
 8000cf8:	22e4      	movs	r2, #228	@ 0xe4
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	e00b      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 18: column = 0xE5; break;
 8000cfe:	1dbb      	adds	r3, r7, #6
 8000d00:	22e5      	movs	r2, #229	@ 0xe5
 8000d02:	701a      	strb	r2, [r3, #0]
 8000d04:	e007      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 19: column = 0xE6; break;
 8000d06:	1dbb      	adds	r3, r7, #6
 8000d08:	22e6      	movs	r2, #230	@ 0xe6
 8000d0a:	701a      	strb	r2, [r3, #0]
 8000d0c:	e003      	b.n	8000d16 <LCD_INTERPRETER_LOCALE+0x326>
			case 20: column = 0xE7; break;
 8000d0e:	1dbb      	adds	r3, r7, #6
 8000d10:	22e7      	movs	r2, #231	@ 0xe7
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return column;
 8000d16:	1dbb      	adds	r3, r7, #6
 8000d18:	781b      	ldrb	r3, [r3, #0]
}
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	08002e94 	.word	0x08002e94
 8000d28:	08002ee8 	.word	0x08002ee8
 8000d2c:	08002f3c 	.word	0x08002f3c
 8000d30:	08002f90 	.word	0x08002f90

08000d34 <VERIFY_ADC_VALUE>:

uint8_t VERIFY_ADC_VALUE(void){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
	uint8_t value;
	uint16_t fundamental = 819;
 8000d3a:	1dbb      	adds	r3, r7, #6
 8000d3c:	4a48      	ldr	r2, [pc, #288]	@ (8000e60 <VERIFY_ADC_VALUE+0x12c>)
 8000d3e:	801a      	strh	r2, [r3, #0]

	if (adc_read < 70) compare_value = 0;
 8000d40:	4b48      	ldr	r3, [pc, #288]	@ (8000e64 <VERIFY_ADC_VALUE+0x130>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	2b45      	cmp	r3, #69	@ 0x45
 8000d46:	d803      	bhi.n	8000d50 <VERIFY_ADC_VALUE+0x1c>
 8000d48:	4b47      	ldr	r3, [pc, #284]	@ (8000e68 <VERIFY_ADC_VALUE+0x134>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	801a      	strh	r2, [r3, #0]
 8000d4e:	e06a      	b.n	8000e26 <VERIFY_ADC_VALUE+0xf2>
	else if(adc_read > 70 && adc_read <= fundamental * 2) compare_value = fundamental;
 8000d50:	4b44      	ldr	r3, [pc, #272]	@ (8000e64 <VERIFY_ADC_VALUE+0x130>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	2b46      	cmp	r3, #70	@ 0x46
 8000d56:	d90c      	bls.n	8000d72 <VERIFY_ADC_VALUE+0x3e>
 8000d58:	4b42      	ldr	r3, [pc, #264]	@ (8000e64 <VERIFY_ADC_VALUE+0x130>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	1dbb      	adds	r3, r7, #6
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dc04      	bgt.n	8000d72 <VERIFY_ADC_VALUE+0x3e>
 8000d68:	4b3f      	ldr	r3, [pc, #252]	@ (8000e68 <VERIFY_ADC_VALUE+0x134>)
 8000d6a:	1dba      	adds	r2, r7, #6
 8000d6c:	8812      	ldrh	r2, [r2, #0]
 8000d6e:	801a      	strh	r2, [r3, #0]
 8000d70:	e059      	b.n	8000e26 <VERIFY_ADC_VALUE+0xf2>
	else if(adc_read >= fundamental * 2 && adc_read < fundamental * 3) compare_value = fundamental * 2;
 8000d72:	4b3c      	ldr	r3, [pc, #240]	@ (8000e64 <VERIFY_ADC_VALUE+0x130>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	001a      	movs	r2, r3
 8000d78:	1dbb      	adds	r3, r7, #6
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	db10      	blt.n	8000da4 <VERIFY_ADC_VALUE+0x70>
 8000d82:	4b38      	ldr	r3, [pc, #224]	@ (8000e64 <VERIFY_ADC_VALUE+0x130>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	0019      	movs	r1, r3
 8000d88:	1dbb      	adds	r3, r7, #6
 8000d8a:	881a      	ldrh	r2, [r3, #0]
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	189b      	adds	r3, r3, r2
 8000d92:	4299      	cmp	r1, r3
 8000d94:	da06      	bge.n	8000da4 <VERIFY_ADC_VALUE+0x70>
 8000d96:	1dbb      	adds	r3, r7, #6
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	18db      	adds	r3, r3, r3
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	4b32      	ldr	r3, [pc, #200]	@ (8000e68 <VERIFY_ADC_VALUE+0x134>)
 8000da0:	801a      	strh	r2, [r3, #0]
 8000da2:	e040      	b.n	8000e26 <VERIFY_ADC_VALUE+0xf2>
	else if(adc_read >= fundamental * 3 && adc_read < fundamental * 4) compare_value = fundamental * 3;
 8000da4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <VERIFY_ADC_VALUE+0x130>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	0019      	movs	r1, r3
 8000daa:	1dbb      	adds	r3, r7, #6
 8000dac:	881a      	ldrh	r2, [r3, #0]
 8000dae:	0013      	movs	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	189b      	adds	r3, r3, r2
 8000db4:	4299      	cmp	r1, r3
 8000db6:	db10      	blt.n	8000dda <VERIFY_ADC_VALUE+0xa6>
 8000db8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e64 <VERIFY_ADC_VALUE+0x130>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	1dbb      	adds	r3, r7, #6
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	da08      	bge.n	8000dda <VERIFY_ADC_VALUE+0xa6>
 8000dc8:	1dbb      	adds	r3, r7, #6
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	1c1a      	adds	r2, r3, #0
 8000dce:	1892      	adds	r2, r2, r2
 8000dd0:	18d3      	adds	r3, r2, r3
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	4b24      	ldr	r3, [pc, #144]	@ (8000e68 <VERIFY_ADC_VALUE+0x134>)
 8000dd6:	801a      	strh	r2, [r3, #0]
 8000dd8:	e025      	b.n	8000e26 <VERIFY_ADC_VALUE+0xf2>
	else if(adc_read >= fundamental * 4 && adc_read < fundamental * 5) compare_value = fundamental * 4;
 8000dda:	4b22      	ldr	r3, [pc, #136]	@ (8000e64 <VERIFY_ADC_VALUE+0x130>)
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	001a      	movs	r2, r3
 8000de0:	1dbb      	adds	r3, r7, #6
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	429a      	cmp	r2, r3
 8000de8:	db10      	blt.n	8000e0c <VERIFY_ADC_VALUE+0xd8>
 8000dea:	4b1e      	ldr	r3, [pc, #120]	@ (8000e64 <VERIFY_ADC_VALUE+0x130>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	0019      	movs	r1, r3
 8000df0:	1dbb      	adds	r3, r7, #6
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	0013      	movs	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	189b      	adds	r3, r3, r2
 8000dfa:	4299      	cmp	r1, r3
 8000dfc:	da06      	bge.n	8000e0c <VERIFY_ADC_VALUE+0xd8>
 8000dfe:	1dbb      	adds	r3, r7, #6
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <VERIFY_ADC_VALUE+0x134>)
 8000e08:	801a      	strh	r2, [r3, #0]
 8000e0a:	e00c      	b.n	8000e26 <VERIFY_ADC_VALUE+0xf2>
	else if(adc_read == fundamental * 5) compare_value = 819 * 5;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <VERIFY_ADC_VALUE+0x130>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	0019      	movs	r1, r3
 8000e12:	1dbb      	adds	r3, r7, #6
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	0013      	movs	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	189b      	adds	r3, r3, r2
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d102      	bne.n	8000e26 <VERIFY_ADC_VALUE+0xf2>
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <VERIFY_ADC_VALUE+0x134>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	@ (8000e6c <VERIFY_ADC_VALUE+0x138>)
 8000e24:	801a      	strh	r2, [r3, #0]

	for (int i = 1; i < 6; ++i){
 8000e26:	2301      	movs	r3, #1
 8000e28:	60bb      	str	r3, [r7, #8]
 8000e2a:	e00f      	b.n	8000e4c <VERIFY_ADC_VALUE+0x118>
		if (fundamental * i == compare_value){
 8000e2c:	1dbb      	adds	r3, r7, #6
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	68ba      	ldr	r2, [r7, #8]
 8000e32:	4353      	muls	r3, r2
 8000e34:	4a0c      	ldr	r2, [pc, #48]	@ (8000e68 <VERIFY_ADC_VALUE+0x134>)
 8000e36:	8812      	ldrh	r2, [r2, #0]
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d104      	bne.n	8000e46 <VERIFY_ADC_VALUE+0x112>
			value = i;
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	701a      	strb	r2, [r3, #0]
			break;
 8000e44:	e005      	b.n	8000e52 <VERIFY_ADC_VALUE+0x11e>
	for (int i = 1; i < 6; ++i){
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2b05      	cmp	r3, #5
 8000e50:	ddec      	ble.n	8000e2c <VERIFY_ADC_VALUE+0xf8>
		}
	}
	return value;
 8000e52:	230f      	movs	r3, #15
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	781b      	ldrb	r3, [r3, #0]
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b004      	add	sp, #16
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	00000333 	.word	0x00000333
 8000e64:	20000104 	.word	0x20000104
 8000e68:	20000108 	.word	0x20000108
 8000e6c:	00000fff 	.word	0x00000fff

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	46c0      	nop			@ (mov r8, r8)
 8000e7a:	e7fd      	b.n	8000e78 <Error_Handler+0x8>

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e80:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <HAL_MspInit+0x24>)
 8000e82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_MspInit+0x24>)
 8000e86:	2101      	movs	r1, #1
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <HAL_MspInit+0x24>)
 8000e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e90:	4b03      	ldr	r3, [pc, #12]	@ (8000ea0 <HAL_MspInit+0x24>)
 8000e92:	2180      	movs	r1, #128	@ 0x80
 8000e94:	0549      	lsls	r1, r1, #21
 8000e96:	430a      	orrs	r2, r1
 8000e98:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b089      	sub	sp, #36	@ 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	240c      	movs	r4, #12
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	2314      	movs	r3, #20
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f001 ff90 	bl	8002ddc <memset>
  if(hadc->Instance==ADC1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a2e      	ldr	r2, [pc, #184]	@ (8000f7c <HAL_ADC_MspInit+0xd8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d155      	bne.n	8000f72 <HAL_ADC_MspInit+0xce>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f80 <HAL_ADC_MspInit+0xdc>)
 8000ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eca:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <HAL_ADC_MspInit+0xdc>)
 8000ecc:	2180      	movs	r1, #128	@ 0x80
 8000ece:	0089      	lsls	r1, r1, #2
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f80 <HAL_ADC_MspInit+0xdc>)
 8000ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ed8:	4b29      	ldr	r3, [pc, #164]	@ (8000f80 <HAL_ADC_MspInit+0xdc>)
 8000eda:	2101      	movs	r1, #1
 8000edc:	430a      	orrs	r2, r1
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ee0:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <HAL_ADC_MspInit+0xdc>)
 8000ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000eec:	193b      	adds	r3, r7, r4
 8000eee:	2220      	movs	r2, #32
 8000ef0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	193a      	adds	r2, r7, r4
 8000f00:	23a0      	movs	r3, #160	@ 0xa0
 8000f02:	05db      	lsls	r3, r3, #23
 8000f04:	0011      	movs	r1, r2
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 f828 	bl	8001f5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f84 <HAL_ADC_MspInit+0xe0>)
 8000f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000f88 <HAL_ADC_MspInit+0xe4>)
 8000f10:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <HAL_ADC_MspInit+0xe0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <HAL_ADC_MspInit+0xe0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <HAL_ADC_MspInit+0xe0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000f24:	4b17      	ldr	r3, [pc, #92]	@ (8000f84 <HAL_ADC_MspInit+0xe0>)
 8000f26:	2280      	movs	r2, #128	@ 0x80
 8000f28:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	@ (8000f84 <HAL_ADC_MspInit+0xe0>)
 8000f2c:	2280      	movs	r2, #128	@ 0x80
 8000f2e:	0052      	lsls	r2, r2, #1
 8000f30:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f32:	4b14      	ldr	r3, [pc, #80]	@ (8000f84 <HAL_ADC_MspInit+0xe0>)
 8000f34:	2280      	movs	r2, #128	@ 0x80
 8000f36:	00d2      	lsls	r2, r2, #3
 8000f38:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000f3a:	4b12      	ldr	r3, [pc, #72]	@ (8000f84 <HAL_ADC_MspInit+0xe0>)
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000f40:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <HAL_ADC_MspInit+0xe0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000f46:	4b0f      	ldr	r3, [pc, #60]	@ (8000f84 <HAL_ADC_MspInit+0xe0>)
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f000 fe4d 	bl	8001be8 <HAL_DMA_Init>
 8000f4e:	1e03      	subs	r3, r0, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8000f52:	f7ff ff8d 	bl	8000e70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <HAL_ADC_MspInit+0xe0>)
 8000f5a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <HAL_ADC_MspInit+0xe0>)
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	200c      	movs	r0, #12
 8000f68:	f000 fe0c 	bl	8001b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000f6c:	200c      	movs	r0, #12
 8000f6e:	f000 fe1e 	bl	8001bae <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b009      	add	sp, #36	@ 0x24
 8000f78:	bd90      	pop	{r4, r7, pc}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	40012400 	.word	0x40012400
 8000f80:	40021000 	.word	0x40021000
 8000f84:	200000b4 	.word	0x200000b4
 8000f88:	40020008 	.word	0x40020008

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f90:	46c0      	nop			@ (mov r8, r8)
 8000f92:	e7fd      	b.n	8000f90 <NMI_Handler+0x4>

08000f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	e7fd      	b.n	8000f98 <HardFault_Handler+0x4>

08000f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 f8a0 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000fc4:	4b03      	ldr	r3, [pc, #12]	@ (8000fd4 <DMA1_Channel1_IRQHandler+0x14>)
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 feec 	bl	8001da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	200000b4 	.word	0x200000b4

08000fd8 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000fdc:	4b03      	ldr	r3, [pc, #12]	@ (8000fec <ADC1_COMP_IRQHandler+0x14>)
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 fad0 	bl	8001584 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	20000058 	.word	0x20000058

08000ff0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ffc:	480d      	ldr	r0, [pc, #52]	@ (8001034 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ffe:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001000:	f7ff fff6 	bl	8000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	@ (8001038 <LoopForever+0x6>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	@ (800103c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	@ (8001040 <LoopForever+0xe>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	@ (8001044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	@ (8001048 <LoopForever+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102a:	f001 fedf 	bl	8002dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff f909 	bl	8000244 <main>

08001032 <LoopForever>:

LoopForever:
    b LoopForever
 8001032:	e7fe      	b.n	8001032 <LoopForever>
   ldr   r0, =_estack
 8001034:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001040:	08003008 	.word	0x08003008
  ldr r2, =_sbss
 8001044:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001048:	20000110 	.word	0x20000110

0800104c <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <DMA1_Channel2_3_IRQHandler>
	...

08001050 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001056:	1dfb      	adds	r3, r7, #7
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <HAL_Init+0x3c>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_Init+0x3c>)
 8001062:	2140      	movs	r1, #64	@ 0x40
 8001064:	430a      	orrs	r2, r1
 8001066:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f811 	bl	8001090 <HAL_InitTick>
 800106e:	1e03      	subs	r3, r0, #0
 8001070:	d003      	beq.n	800107a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
 8001078:	e001      	b.n	800107e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800107a:	f7ff feff 	bl	8000e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
}
 8001082:	0018      	movs	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	b002      	add	sp, #8
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	40022000 	.word	0x40022000

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001098:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <HAL_InitTick+0x5c>)
 800109a:	681c      	ldr	r4, [r3, #0]
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <HAL_InitTick+0x60>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	0019      	movs	r1, r3
 80010a2:	23fa      	movs	r3, #250	@ 0xfa
 80010a4:	0098      	lsls	r0, r3, #2
 80010a6:	f7ff f82f 	bl	8000108 <__udivsi3>
 80010aa:	0003      	movs	r3, r0
 80010ac:	0019      	movs	r1, r3
 80010ae:	0020      	movs	r0, r4
 80010b0:	f7ff f82a 	bl	8000108 <__udivsi3>
 80010b4:	0003      	movs	r3, r0
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 fd89 	bl	8001bce <HAL_SYSTICK_Config>
 80010bc:	1e03      	subs	r3, r0, #0
 80010be:	d001      	beq.n	80010c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e00f      	b.n	80010e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d80b      	bhi.n	80010e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	2301      	movs	r3, #1
 80010ce:	425b      	negs	r3, r3
 80010d0:	2200      	movs	r2, #0
 80010d2:	0018      	movs	r0, r3
 80010d4:	f000 fd56 	bl	8001b84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_InitTick+0x64>)
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b003      	add	sp, #12
 80010ea:	bd90      	pop	{r4, r7, pc}
 80010ec:	20000030 	.word	0x20000030
 80010f0:	20000038 	.word	0x20000038
 80010f4:	20000034 	.word	0x20000034

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <HAL_IncTick+0x1c>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	001a      	movs	r2, r3
 8001102:	4b05      	ldr	r3, [pc, #20]	@ (8001118 <HAL_IncTick+0x20>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	18d2      	adds	r2, r2, r3
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_IncTick+0x20>)
 800110a:	601a      	str	r2, [r3, #0]
}
 800110c:	46c0      	nop			@ (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	20000038 	.word	0x20000038
 8001118:	2000010c 	.word	0x2000010c

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b02      	ldr	r3, [pc, #8]	@ (800112c <HAL_GetTick+0x10>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	2000010c 	.word	0x2000010c

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff fff0 	bl	800111c <HAL_GetTick>
 800113c:	0003      	movs	r3, r0
 800113e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3301      	adds	r3, #1
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <HAL_Delay+0x44>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	001a      	movs	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	189b      	adds	r3, r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	f7ff ffe0 	bl	800111c <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	46c0      	nop			@ (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	20000038 	.word	0x20000038

08001178 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e159      	b.n	800143e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10a      	bne.n	80011a8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2250      	movs	r2, #80	@ 0x50
 800119c:	2100      	movs	r1, #0
 800119e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff fe7e 	bl	8000ea4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ac:	2210      	movs	r2, #16
 80011ae:	4013      	ands	r3, r2
 80011b0:	2b10      	cmp	r3, #16
 80011b2:	d005      	beq.n	80011c0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2204      	movs	r2, #4
 80011bc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011be:	d00b      	beq.n	80011d8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c4:	2210      	movs	r2, #16
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2250      	movs	r2, #80	@ 0x50
 80011d0:	2100      	movs	r1, #0
 80011d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e132      	b.n	800143e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011dc:	4a9a      	ldr	r2, [pc, #616]	@ (8001448 <HAL_ADC_Init+0x2d0>)
 80011de:	4013      	ands	r3, r2
 80011e0:	2202      	movs	r2, #2
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2203      	movs	r2, #3
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d108      	bne.n	8001208 <HAL_ADC_Init+0x90>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2201      	movs	r2, #1
 80011fe:	4013      	ands	r3, r2
 8001200:	2b01      	cmp	r3, #1
 8001202:	d101      	bne.n	8001208 <HAL_ADC_Init+0x90>
 8001204:	2301      	movs	r3, #1
 8001206:	e000      	b.n	800120a <HAL_ADC_Init+0x92>
 8001208:	2300      	movs	r3, #0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d149      	bne.n	80012a2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	23c0      	movs	r3, #192	@ 0xc0
 8001214:	061b      	lsls	r3, r3, #24
 8001216:	429a      	cmp	r2, r3
 8001218:	d00b      	beq.n	8001232 <HAL_ADC_Init+0xba>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	429a      	cmp	r2, r3
 8001224:	d005      	beq.n	8001232 <HAL_ADC_Init+0xba>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	2380      	movs	r3, #128	@ 0x80
 800122c:	061b      	lsls	r3, r3, #24
 800122e:	429a      	cmp	r2, r3
 8001230:	d111      	bne.n	8001256 <HAL_ADC_Init+0xde>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	0892      	lsrs	r2, r2, #2
 8001240:	611a      	str	r2, [r3, #16]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6919      	ldr	r1, [r3, #16]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	e014      	b.n	8001280 <HAL_ADC_Init+0x108>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	0092      	lsls	r2, r2, #2
 8001262:	0892      	lsrs	r2, r2, #2
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	4b79      	ldr	r3, [pc, #484]	@ (800144c <HAL_ADC_Init+0x2d4>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b78      	ldr	r3, [pc, #480]	@ (800144c <HAL_ADC_Init+0x2d4>)
 800126c:	4978      	ldr	r1, [pc, #480]	@ (8001450 <HAL_ADC_Init+0x2d8>)
 800126e:	400a      	ands	r2, r1
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	4b76      	ldr	r3, [pc, #472]	@ (800144c <HAL_ADC_Init+0x2d4>)
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	4b74      	ldr	r3, [pc, #464]	@ (800144c <HAL_ADC_Init+0x2d4>)
 800127c:	430a      	orrs	r2, r1
 800127e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2118      	movs	r1, #24
 800128c:	438a      	bics	r2, r1
 800128e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68d9      	ldr	r1, [r3, #12]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80012a2:	4b6a      	ldr	r3, [pc, #424]	@ (800144c <HAL_ADC_Init+0x2d4>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b69      	ldr	r3, [pc, #420]	@ (800144c <HAL_ADC_Init+0x2d4>)
 80012a8:	496a      	ldr	r1, [pc, #424]	@ (8001454 <HAL_ADC_Init+0x2dc>)
 80012aa:	400a      	ands	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80012ae:	4b67      	ldr	r3, [pc, #412]	@ (800144c <HAL_ADC_Init+0x2d4>)
 80012b0:	6819      	ldr	r1, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b6:	065a      	lsls	r2, r3, #25
 80012b8:	4b64      	ldr	r3, [pc, #400]	@ (800144c <HAL_ADC_Init+0x2d4>)
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	055b      	lsls	r3, r3, #21
 80012c8:	4013      	ands	r3, r2
 80012ca:	d108      	bne.n	80012de <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2180      	movs	r1, #128	@ 0x80
 80012d8:	0549      	lsls	r1, r1, #21
 80012da:	430a      	orrs	r2, r1
 80012dc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	495b      	ldr	r1, [pc, #364]	@ (8001458 <HAL_ADC_Init+0x2e0>)
 80012ea:	400a      	ands	r2, r1
 80012ec:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68d9      	ldr	r1, [r3, #12]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d101      	bne.n	8001304 <HAL_ADC_Init+0x18c>
 8001300:	2304      	movs	r3, #4
 8001302:	e000      	b.n	8001306 <HAL_ADC_Init+0x18e>
 8001304:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001306:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2020      	movs	r0, #32
 800130c:	5c1b      	ldrb	r3, [r3, r0]
 800130e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001310:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	202c      	movs	r0, #44	@ 0x2c
 8001316:	5c1b      	ldrb	r3, [r3, r0]
 8001318:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800131a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001320:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001328:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001330:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800133e:	23c2      	movs	r3, #194	@ 0xc2
 8001340:	33ff      	adds	r3, #255	@ 0xff
 8001342:	429a      	cmp	r2, r3
 8001344:	d00b      	beq.n	800135e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68d9      	ldr	r1, [r3, #12]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2221      	movs	r2, #33	@ 0x21
 8001362:	5c9b      	ldrb	r3, [r3, r2]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d11a      	bne.n	800139e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2220      	movs	r2, #32
 800136c:	5c9b      	ldrb	r3, [r3, r2]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d109      	bne.n	8001386 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2180      	movs	r1, #128	@ 0x80
 800137e:	0249      	lsls	r1, r1, #9
 8001380:	430a      	orrs	r2, r1
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	e00b      	b.n	800139e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800138a:	2220      	movs	r2, #32
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001396:	2201      	movs	r2, #1
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d11f      	bne.n	80013e6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	492a      	ldr	r1, [pc, #168]	@ (800145c <HAL_ADC_Init+0x2e4>)
 80013b2:	400a      	ands	r2, r1
 80013b4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6919      	ldr	r1, [r3, #16]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80013c4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80013ca:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	691a      	ldr	r2, [r3, #16]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2101      	movs	r1, #1
 80013e0:	430a      	orrs	r2, r1
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	e00e      	b.n	8001404 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	2201      	movs	r2, #1
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d107      	bne.n	8001404 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2101      	movs	r1, #1
 8001400:	438a      	bics	r2, r1
 8001402:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	695a      	ldr	r2, [r3, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2107      	movs	r1, #7
 8001410:	438a      	bics	r2, r1
 8001412:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6959      	ldr	r1, [r3, #20]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001430:	2203      	movs	r2, #3
 8001432:	4393      	bics	r3, r2
 8001434:	2201      	movs	r2, #1
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	0018      	movs	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	b002      	add	sp, #8
 8001444:	bd80      	pop	{r7, pc}
 8001446:	46c0      	nop			@ (mov r8, r8)
 8001448:	fffffefd 	.word	0xfffffefd
 800144c:	40012708 	.word	0x40012708
 8001450:	ffc3ffff 	.word	0xffc3ffff
 8001454:	fdffffff 	.word	0xfdffffff
 8001458:	fffe0219 	.word	0xfffe0219
 800145c:	fffffc03 	.word	0xfffffc03

08001460 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800146c:	2317      	movs	r3, #23
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2204      	movs	r2, #4
 800147c:	4013      	ands	r3, r2
 800147e:	d161      	bne.n	8001544 <HAL_ADC_Start_DMA+0xe4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2250      	movs	r2, #80	@ 0x50
 8001484:	5c9b      	ldrb	r3, [r3, r2]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_ADC_Start_DMA+0x2e>
 800148a:	2302      	movs	r3, #2
 800148c:	e061      	b.n	8001552 <HAL_ADC_Start_DMA+0xf2>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2250      	movs	r2, #80	@ 0x50
 8001492:	2101      	movs	r1, #1
 8001494:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d007      	beq.n	80014be <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80014ae:	2317      	movs	r3, #23
 80014b0:	18fc      	adds	r4, r7, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f000 f9ad 	bl	8001814 <ADC_Enable>
 80014ba:	0003      	movs	r3, r0
 80014bc:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014be:	2417      	movs	r4, #23
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d141      	bne.n	800154c <HAL_ADC_Start_DMA+0xec>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014cc:	4a23      	ldr	r2, [pc, #140]	@ (800155c <HAL_ADC_Start_DMA+0xfc>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	2280      	movs	r2, #128	@ 0x80
 80014d2:	0052      	lsls	r2, r2, #1
 80014d4:	431a      	orrs	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2250      	movs	r2, #80	@ 0x50
 80014e4:	2100      	movs	r1, #0
 80014e6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001560 <HAL_ADC_Start_DMA+0x100>)
 80014ee:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001564 <HAL_ADC_Start_DMA+0x104>)
 80014f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001568 <HAL_ADC_Start_DMA+0x108>)
 80014fe:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	221c      	movs	r2, #28
 8001506:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2110      	movs	r1, #16
 8001514:	430a      	orrs	r2, r1
 8001516:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	3340      	adds	r3, #64	@ 0x40
 8001522:	0019      	movs	r1, r3
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	193c      	adds	r4, r7, r4
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f000 fbd5 	bl	8001cd8 <HAL_DMA_Start_IT>
 800152e:	0003      	movs	r3, r0
 8001530:	7023      	strb	r3, [r4, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2104      	movs	r1, #4
 800153e:	430a      	orrs	r2, r1
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	e003      	b.n	800154c <HAL_ADC_Start_DMA+0xec>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001544:	2317      	movs	r3, #23
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	2202      	movs	r2, #2
 800154a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800154c:	2317      	movs	r3, #23
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	781b      	ldrb	r3, [r3, #0]
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b007      	add	sp, #28
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fffff0fe 	.word	0xfffff0fe
 8001560:	080018e5 	.word	0x080018e5
 8001564:	08001999 	.word	0x08001999
 8001568:	080019b7 	.word	0x080019b7

0800156c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2204      	movs	r2, #4
 80015a0:	4013      	ands	r3, r2
 80015a2:	d003      	beq.n	80015ac <HAL_ADC_IRQHandler+0x28>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2204      	movs	r2, #4
 80015a8:	4013      	ands	r3, r2
 80015aa:	d107      	bne.n	80015bc <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2208      	movs	r2, #8
 80015b0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80015b2:	d04e      	beq.n	8001652 <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2208      	movs	r2, #8
 80015b8:	4013      	ands	r3, r2
 80015ba:	d04a      	beq.n	8001652 <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c0:	2210      	movs	r2, #16
 80015c2:	4013      	ands	r3, r2
 80015c4:	d106      	bne.n	80015d4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ca:	2280      	movs	r2, #128	@ 0x80
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	23c0      	movs	r3, #192	@ 0xc0
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	4013      	ands	r3, r2
 80015e0:	d12b      	bne.n	800163a <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2220      	movs	r2, #32
 80015e6:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d126      	bne.n	800163a <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2208      	movs	r2, #8
 80015f0:	4013      	ands	r3, r2
 80015f2:	d022      	beq.n	800163a <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2204      	movs	r2, #4
 80015fc:	4013      	ands	r3, r2
 80015fe:	d110      	bne.n	8001622 <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	210c      	movs	r1, #12
 800160c:	438a      	bics	r2, r1
 800160e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001614:	4a2f      	ldr	r2, [pc, #188]	@ (80016d4 <HAL_ADC_IRQHandler+0x150>)
 8001616:	4013      	ands	r3, r2
 8001618:	2201      	movs	r2, #1
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001620:	e00b      	b.n	800163a <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001626:	2220      	movs	r2, #32
 8001628:	431a      	orrs	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001632:	2201      	movs	r2, #1
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	0018      	movs	r0, r3
 800163e:	f7fe fdef 	bl	8000220 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d003      	beq.n	8001652 <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	220c      	movs	r2, #12
 8001650:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2280      	movs	r2, #128	@ 0x80
 8001656:	4013      	ands	r3, r2
 8001658:	d012      	beq.n	8001680 <HAL_ADC_IRQHandler+0xfc>
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2280      	movs	r2, #128	@ 0x80
 800165e:	4013      	ands	r3, r2
 8001660:	d00e      	beq.n	8001680 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001666:	2280      	movs	r2, #128	@ 0x80
 8001668:	0252      	lsls	r2, r2, #9
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	655a      	str	r2, [r3, #84]	@ 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	0018      	movs	r0, r3
 8001674:	f000 f838 	bl	80016e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2280      	movs	r2, #128	@ 0x80
 800167e:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2210      	movs	r2, #16
 8001684:	4013      	ands	r3, r2
 8001686:	d020      	beq.n	80016ca <HAL_ADC_IRQHandler+0x146>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2210      	movs	r2, #16
 800168c:	4013      	ands	r3, r2
 800168e:	d01c      	beq.n	80016ca <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001694:	2b00      	cmp	r3, #0
 8001696:	d006      	beq.n	80016a6 <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2201      	movs	r2, #1
 80016a0:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d10d      	bne.n	80016c2 <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	2202      	movs	r2, #2
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2210      	movs	r2, #16
 80016b8:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	0018      	movs	r0, r3
 80016be:	f000 f81b 	bl	80016f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2210      	movs	r2, #16
 80016c8:	601a      	str	r2, [r3, #0]
  }

}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b004      	add	sp, #16
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	fffffefe 	.word	0xfffffefe

080016d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80016e0:	46c0      	nop			@ (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b002      	add	sp, #8
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80016f0:	46c0      	nop			@ (mov r8, r8)
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b002      	add	sp, #8
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001700:	46c0      	nop			@ (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b002      	add	sp, #8
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2250      	movs	r2, #80	@ 0x50
 8001716:	5c9b      	ldrb	r3, [r3, r2]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x18>
 800171c:	2302      	movs	r3, #2
 800171e:	e06c      	b.n	80017fa <HAL_ADC_ConfigChannel+0xf2>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2250      	movs	r2, #80	@ 0x50
 8001724:	2101      	movs	r1, #1
 8001726:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2204      	movs	r2, #4
 8001730:	4013      	ands	r3, r2
 8001732:	d00b      	beq.n	800174c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001738:	2220      	movs	r2, #32
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2250      	movs	r2, #80	@ 0x50
 8001744:	2100      	movs	r1, #0
 8001746:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e056      	b.n	80017fa <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a2c      	ldr	r2, [pc, #176]	@ (8001804 <HAL_ADC_ConfigChannel+0xfc>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d028      	beq.n	80017a8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	035b      	lsls	r3, r3, #13
 8001762:	0b5a      	lsrs	r2, r3, #13
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	02db      	lsls	r3, r3, #11
 8001774:	4013      	ands	r3, r2
 8001776:	d009      	beq.n	800178c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001778:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <HAL_ADC_ConfigChannel+0x100>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <HAL_ADC_ConfigChannel+0x100>)
 800177e:	2180      	movs	r1, #128	@ 0x80
 8001780:	0409      	lsls	r1, r1, #16
 8001782:	430a      	orrs	r2, r1
 8001784:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001786:	200a      	movs	r0, #10
 8001788:	f000 f930 	bl	80019ec <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	029b      	lsls	r3, r3, #10
 8001794:	4013      	ands	r3, r2
 8001796:	d02b      	beq.n	80017f0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001798:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <HAL_ADC_ConfigChannel+0x100>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <HAL_ADC_ConfigChannel+0x100>)
 800179e:	2180      	movs	r1, #128	@ 0x80
 80017a0:	03c9      	lsls	r1, r1, #15
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e023      	b.n	80017f0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	035b      	lsls	r3, r3, #13
 80017b4:	0b5b      	lsrs	r3, r3, #13
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	400a      	ands	r2, r1
 80017be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	@ 0x80
 80017c6:	02db      	lsls	r3, r3, #11
 80017c8:	4013      	ands	r3, r2
 80017ca:	d005      	beq.n	80017d8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <HAL_ADC_ConfigChannel+0x100>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <HAL_ADC_ConfigChannel+0x100>)
 80017d2:	490e      	ldr	r1, [pc, #56]	@ (800180c <HAL_ADC_ConfigChannel+0x104>)
 80017d4:	400a      	ands	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	029b      	lsls	r3, r3, #10
 80017e0:	4013      	ands	r3, r2
 80017e2:	d005      	beq.n	80017f0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <HAL_ADC_ConfigChannel+0x100>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <HAL_ADC_ConfigChannel+0x100>)
 80017ea:	4909      	ldr	r1, [pc, #36]	@ (8001810 <HAL_ADC_ConfigChannel+0x108>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2250      	movs	r2, #80	@ 0x50
 80017f4:	2100      	movs	r1, #0
 80017f6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b002      	add	sp, #8
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			@ (mov r8, r8)
 8001804:	00001001 	.word	0x00001001
 8001808:	40012708 	.word	0x40012708
 800180c:	ff7fffff 	.word	0xff7fffff
 8001810:	ffbfffff 	.word	0xffbfffff

08001814 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2203      	movs	r2, #3
 8001828:	4013      	ands	r3, r2
 800182a:	2b01      	cmp	r3, #1
 800182c:	d108      	bne.n	8001840 <ADC_Enable+0x2c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2201      	movs	r2, #1
 8001836:	4013      	ands	r3, r2
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <ADC_Enable+0x2c>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <ADC_Enable+0x2e>
 8001840:	2300      	movs	r3, #0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d146      	bne.n	80018d4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4a24      	ldr	r2, [pc, #144]	@ (80018e0 <ADC_Enable+0xcc>)
 800184e:	4013      	ands	r3, r2
 8001850:	d00d      	beq.n	800186e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001856:	2210      	movs	r2, #16
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001862:	2201      	movs	r2, #1
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e033      	b.n	80018d6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	430a      	orrs	r2, r1
 800187c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800187e:	2001      	movs	r0, #1
 8001880:	f000 f8b4 	bl	80019ec <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001884:	f7ff fc4a 	bl	800111c <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800188c:	e01b      	b.n	80018c6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800188e:	f7ff fc45 	bl	800111c <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b0a      	cmp	r3, #10
 800189a:	d914      	bls.n	80018c6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2201      	movs	r2, #1
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d00d      	beq.n	80018c6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ae:	2210      	movs	r2, #16
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ba:	2201      	movs	r2, #1
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e007      	b.n	80018d6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2201      	movs	r2, #1
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d1dc      	bne.n	800188e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	0018      	movs	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	b004      	add	sp, #16
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	80000017 	.word	0x80000017

080018e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f6:	2250      	movs	r2, #80	@ 0x50
 80018f8:	4013      	ands	r3, r2
 80018fa:	d141      	bne.n	8001980 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001900:	2280      	movs	r2, #128	@ 0x80
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	431a      	orrs	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	23c0      	movs	r3, #192	@ 0xc0
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	4013      	ands	r3, r2
 8001916:	d12e      	bne.n	8001976 <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2220      	movs	r2, #32
 800191c:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800191e:	2b00      	cmp	r3, #0
 8001920:	d129      	bne.n	8001976 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2208      	movs	r2, #8
 800192a:	4013      	ands	r3, r2
 800192c:	2b08      	cmp	r3, #8
 800192e:	d122      	bne.n	8001976 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2204      	movs	r2, #4
 8001938:	4013      	ands	r3, r2
 800193a:	d110      	bne.n	800195e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	210c      	movs	r1, #12
 8001948:	438a      	bics	r2, r1
 800194a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001950:	4a10      	ldr	r2, [pc, #64]	@ (8001994 <ADC_DMAConvCplt+0xb0>)
 8001952:	4013      	ands	r3, r2
 8001954:	2201      	movs	r2, #1
 8001956:	431a      	orrs	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	655a      	str	r2, [r3, #84]	@ 0x54
 800195c:	e00b      	b.n	8001976 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001962:	2220      	movs	r2, #32
 8001964:	431a      	orrs	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196e:	2201      	movs	r2, #1
 8001970:	431a      	orrs	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	0018      	movs	r0, r3
 800197a:	f7fe fc51 	bl	8000220 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800197e:	e005      	b.n	800198c <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	0010      	movs	r0, r2
 800198a:	4798      	blx	r3
}
 800198c:	46c0      	nop			@ (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b004      	add	sp, #16
 8001992:	bd80      	pop	{r7, pc}
 8001994:	fffffefe 	.word	0xfffffefe

08001998 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff fe95 	bl	80016d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b004      	add	sp, #16
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c8:	2240      	movs	r2, #64	@ 0x40
 80019ca:	431a      	orrs	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d4:	2204      	movs	r2, #4
 80019d6:	431a      	orrs	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	0018      	movs	r0, r3
 80019e0:	f7ff fe8a 	bl	80016f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019e4:	46c0      	nop			@ (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b004      	add	sp, #16
 80019ea:	bd80      	pop	{r7, pc}

080019ec <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80019f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <ADC_DelayMicroSecond+0x38>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	490b      	ldr	r1, [pc, #44]	@ (8001a28 <ADC_DelayMicroSecond+0x3c>)
 80019fa:	0018      	movs	r0, r3
 80019fc:	f7fe fb84 	bl	8000108 <__udivsi3>
 8001a00:	0003      	movs	r3, r0
 8001a02:	001a      	movs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4353      	muls	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001a0a:	e002      	b.n	8001a12 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f9      	bne.n	8001a0c <ADC_DelayMicroSecond+0x20>
  }
}
 8001a18:	46c0      	nop			@ (mov r8, r8)
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b004      	add	sp, #16
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	20000030 	.word	0x20000030
 8001a28:	000f4240 	.word	0x000f4240

08001a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	0002      	movs	r2, r0
 8001a34:	1dfb      	adds	r3, r7, #7
 8001a36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	1dfb      	adds	r3, r7, #7
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a3e:	d809      	bhi.n	8001a54 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a40:	1dfb      	adds	r3, r7, #7
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	001a      	movs	r2, r3
 8001a46:	231f      	movs	r3, #31
 8001a48:	401a      	ands	r2, r3
 8001a4a:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <__NVIC_EnableIRQ+0x30>)
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	4091      	lsls	r1, r2
 8001a50:	000a      	movs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]
  }
}
 8001a54:	46c0      	nop			@ (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b002      	add	sp, #8
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	0002      	movs	r2, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	1dfb      	adds	r3, r7, #7
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a74:	d828      	bhi.n	8001ac8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a76:	4a2f      	ldr	r2, [pc, #188]	@ (8001b34 <__NVIC_SetPriority+0xd4>)
 8001a78:	1dfb      	adds	r3, r7, #7
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	33c0      	adds	r3, #192	@ 0xc0
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	589b      	ldr	r3, [r3, r2]
 8001a86:	1dfa      	adds	r2, r7, #7
 8001a88:	7812      	ldrb	r2, [r2, #0]
 8001a8a:	0011      	movs	r1, r2
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	400a      	ands	r2, r1
 8001a90:	00d2      	lsls	r2, r2, #3
 8001a92:	21ff      	movs	r1, #255	@ 0xff
 8001a94:	4091      	lsls	r1, r2
 8001a96:	000a      	movs	r2, r1
 8001a98:	43d2      	mvns	r2, r2
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	019b      	lsls	r3, r3, #6
 8001aa2:	22ff      	movs	r2, #255	@ 0xff
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	1dfb      	adds	r3, r7, #7
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	0018      	movs	r0, r3
 8001aac:	2303      	movs	r3, #3
 8001aae:	4003      	ands	r3, r0
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ab4:	481f      	ldr	r0, [pc, #124]	@ (8001b34 <__NVIC_SetPriority+0xd4>)
 8001ab6:	1dfb      	adds	r3, r7, #7
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	33c0      	adds	r3, #192	@ 0xc0
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ac6:	e031      	b.n	8001b2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b38 <__NVIC_SetPriority+0xd8>)
 8001aca:	1dfb      	adds	r3, r7, #7
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	0019      	movs	r1, r3
 8001ad0:	230f      	movs	r3, #15
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	3b08      	subs	r3, #8
 8001ad6:	089b      	lsrs	r3, r3, #2
 8001ad8:	3306      	adds	r3, #6
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	18d3      	adds	r3, r2, r3
 8001ade:	3304      	adds	r3, #4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	1dfa      	adds	r2, r7, #7
 8001ae4:	7812      	ldrb	r2, [r2, #0]
 8001ae6:	0011      	movs	r1, r2
 8001ae8:	2203      	movs	r2, #3
 8001aea:	400a      	ands	r2, r1
 8001aec:	00d2      	lsls	r2, r2, #3
 8001aee:	21ff      	movs	r1, #255	@ 0xff
 8001af0:	4091      	lsls	r1, r2
 8001af2:	000a      	movs	r2, r1
 8001af4:	43d2      	mvns	r2, r2
 8001af6:	401a      	ands	r2, r3
 8001af8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	019b      	lsls	r3, r3, #6
 8001afe:	22ff      	movs	r2, #255	@ 0xff
 8001b00:	401a      	ands	r2, r3
 8001b02:	1dfb      	adds	r3, r7, #7
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	0018      	movs	r0, r3
 8001b08:	2303      	movs	r3, #3
 8001b0a:	4003      	ands	r3, r0
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b10:	4809      	ldr	r0, [pc, #36]	@ (8001b38 <__NVIC_SetPriority+0xd8>)
 8001b12:	1dfb      	adds	r3, r7, #7
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	001c      	movs	r4, r3
 8001b18:	230f      	movs	r3, #15
 8001b1a:	4023      	ands	r3, r4
 8001b1c:	3b08      	subs	r3, #8
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	430a      	orrs	r2, r1
 8001b22:	3306      	adds	r3, #6
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	18c3      	adds	r3, r0, r3
 8001b28:	3304      	adds	r3, #4
 8001b2a:	601a      	str	r2, [r3, #0]
}
 8001b2c:	46c0      	nop			@ (mov r8, r8)
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b003      	add	sp, #12
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	1e5a      	subs	r2, r3, #1
 8001b48:	2380      	movs	r3, #128	@ 0x80
 8001b4a:	045b      	lsls	r3, r3, #17
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d301      	bcc.n	8001b54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b50:	2301      	movs	r3, #1
 8001b52:	e010      	b.n	8001b76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b54:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <SysTick_Config+0x44>)
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	3a01      	subs	r2, #1
 8001b5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	425b      	negs	r3, r3
 8001b60:	2103      	movs	r1, #3
 8001b62:	0018      	movs	r0, r3
 8001b64:	f7ff ff7c 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <SysTick_Config+0x44>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b6e:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <SysTick_Config+0x44>)
 8001b70:	2207      	movs	r2, #7
 8001b72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b002      	add	sp, #8
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			@ (mov r8, r8)
 8001b80:	e000e010 	.word	0xe000e010

08001b84 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	210f      	movs	r1, #15
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	1c02      	adds	r2, r0, #0
 8001b94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	187b      	adds	r3, r7, r1
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	0011      	movs	r1, r2
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff ff5d 	bl	8001a60 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b004      	add	sp, #16
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff ff33 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff ffaf 	bl	8001b3c <SysTick_Config>
 8001bde:	0003      	movs	r3, r0
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b002      	add	sp, #8
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e061      	b.n	8001cbe <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a32      	ldr	r2, [pc, #200]	@ (8001cc8 <HAL_DMA_Init+0xe0>)
 8001c00:	4694      	mov	ip, r2
 8001c02:	4463      	add	r3, ip
 8001c04:	2114      	movs	r1, #20
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7fe fa7e 	bl	8000108 <__udivsi3>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	009a      	lsls	r2, r3, #2
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a2d      	ldr	r2, [pc, #180]	@ (8001ccc <HAL_DMA_Init+0xe4>)
 8001c18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2225      	movs	r2, #37	@ 0x25
 8001c1e:	2102      	movs	r1, #2
 8001c20:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4a28      	ldr	r2, [pc, #160]	@ (8001cd0 <HAL_DMA_Init+0xe8>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	01db      	lsls	r3, r3, #7
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d018      	beq.n	8001ca6 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001c74:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <HAL_DMA_Init+0xec>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7c:	211c      	movs	r1, #28
 8001c7e:	400b      	ands	r3, r1
 8001c80:	210f      	movs	r1, #15
 8001c82:	4099      	lsls	r1, r3
 8001c84:	000b      	movs	r3, r1
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <HAL_DMA_Init+0xec>)
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001c8e:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <HAL_DMA_Init+0xec>)
 8001c90:	6819      	ldr	r1, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	201c      	movs	r0, #28
 8001c9c:	4003      	ands	r3, r0
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <HAL_DMA_Init+0xec>)
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2225      	movs	r2, #37	@ 0x25
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2224      	movs	r2, #36	@ 0x24
 8001cb8:	2100      	movs	r1, #0
 8001cba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b004      	add	sp, #16
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	bffdfff8 	.word	0xbffdfff8
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	ffff800f 	.word	0xffff800f
 8001cd4:	400200a8 	.word	0x400200a8

08001cd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce6:	2317      	movs	r3, #23
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2224      	movs	r2, #36	@ 0x24
 8001cf2:	5c9b      	ldrb	r3, [r3, r2]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_DMA_Start_IT+0x24>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e04f      	b.n	8001d9c <HAL_DMA_Start_IT+0xc4>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2224      	movs	r2, #36	@ 0x24
 8001d00:	2101      	movs	r1, #1
 8001d02:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2225      	movs	r2, #37	@ 0x25
 8001d08:	5c9b      	ldrb	r3, [r3, r2]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d13a      	bne.n	8001d86 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2225      	movs	r2, #37	@ 0x25
 8001d14:	2102      	movs	r1, #2
 8001d16:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	438a      	bics	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f8e3 	bl	8001f00 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d008      	beq.n	8001d54 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	210e      	movs	r1, #14
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e00f      	b.n	8001d74 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2104      	movs	r1, #4
 8001d60:	438a      	bics	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	210a      	movs	r1, #10
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2101      	movs	r1, #1
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e007      	b.n	8001d96 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2224      	movs	r2, #36	@ 0x24
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d8e:	2317      	movs	r3, #23
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	2202      	movs	r2, #2
 8001d94:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001d96:	2317      	movs	r3, #23
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	781b      	ldrb	r3, [r3, #0]
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b006      	add	sp, #24
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc0:	221c      	movs	r2, #28
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d026      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x7a>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d022      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2220      	movs	r2, #32
 8001de0:	4013      	ands	r3, r2
 8001de2:	d107      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2104      	movs	r1, #4
 8001df0:	438a      	bics	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df8:	221c      	movs	r2, #28
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	2104      	movs	r1, #4
 8001e02:	4091      	lsls	r1, r2
 8001e04:	000a      	movs	r2, r1
 8001e06:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d100      	bne.n	8001e12 <HAL_DMA_IRQHandler+0x6e>
 8001e10:	e071      	b.n	8001ef6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	0010      	movs	r0, r2
 8001e1a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001e1c:	e06b      	b.n	8001ef6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	221c      	movs	r2, #28
 8001e24:	4013      	ands	r3, r2
 8001e26:	2202      	movs	r2, #2
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	0013      	movs	r3, r2
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d02d      	beq.n	8001e8e <HAL_DMA_IRQHandler+0xea>
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2202      	movs	r2, #2
 8001e36:	4013      	ands	r3, r2
 8001e38:	d029      	beq.n	8001e8e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2220      	movs	r2, #32
 8001e42:	4013      	ands	r3, r2
 8001e44:	d10b      	bne.n	8001e5e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	210a      	movs	r1, #10
 8001e52:	438a      	bics	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2225      	movs	r2, #37	@ 0x25
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	221c      	movs	r2, #28
 8001e64:	401a      	ands	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	4091      	lsls	r1, r2
 8001e6e:	000a      	movs	r2, r1
 8001e70:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2224      	movs	r2, #36	@ 0x24
 8001e76:	2100      	movs	r1, #0
 8001e78:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d039      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	0010      	movs	r0, r2
 8001e8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e8c:	e033      	b.n	8001ef6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	221c      	movs	r2, #28
 8001e94:	4013      	ands	r3, r2
 8001e96:	2208      	movs	r2, #8
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	0013      	movs	r3, r2
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d02a      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x154>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d026      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	210e      	movs	r1, #14
 8001eb6:	438a      	bics	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	221c      	movs	r2, #28
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	4091      	lsls	r1, r2
 8001eca:	000a      	movs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2225      	movs	r2, #37	@ 0x25
 8001ed8:	2101      	movs	r1, #1
 8001eda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2224      	movs	r2, #36	@ 0x24
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	0010      	movs	r0, r2
 8001ef4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	46c0      	nop			@ (mov r8, r8)
}
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b004      	add	sp, #16
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	221c      	movs	r2, #28
 8001f14:	401a      	ands	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	4091      	lsls	r1, r2
 8001f1e:	000a      	movs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d108      	bne.n	8001f44 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f42:	e007      	b.n	8001f54 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	60da      	str	r2, [r3, #12]
}
 8001f54:	46c0      	nop			@ (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b004      	add	sp, #16
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f72:	e14f      	b.n	8002214 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2101      	movs	r1, #1
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4091      	lsls	r1, r2
 8001f7e:	000a      	movs	r2, r1
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d100      	bne.n	8001f8c <HAL_GPIO_Init+0x30>
 8001f8a:	e140      	b.n	800220e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2203      	movs	r2, #3
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d005      	beq.n	8001fa4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d130      	bne.n	8002006 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	0013      	movs	r3, r2
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	0013      	movs	r3, r2
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fda:	2201      	movs	r2, #1
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	0013      	movs	r3, r2
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	0013      	movs	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2203      	movs	r2, #3
 800200c:	4013      	ands	r3, r2
 800200e:	2b03      	cmp	r3, #3
 8002010:	d017      	beq.n	8002042 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	409a      	lsls	r2, r3
 8002020:	0013      	movs	r3, r2
 8002022:	43da      	mvns	r2, r3
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	409a      	lsls	r2, r3
 8002034:	0013      	movs	r3, r2
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2203      	movs	r2, #3
 8002048:	4013      	ands	r3, r2
 800204a:	2b02      	cmp	r3, #2
 800204c:	d123      	bne.n	8002096 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	08da      	lsrs	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3208      	adds	r2, #8
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	58d3      	ldr	r3, [r2, r3]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2207      	movs	r2, #7
 8002060:	4013      	ands	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	409a      	lsls	r2, r3
 8002068:	0013      	movs	r3, r2
 800206a:	43da      	mvns	r2, r3
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2107      	movs	r1, #7
 800207a:	400b      	ands	r3, r1
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	409a      	lsls	r2, r3
 8002080:	0013      	movs	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	08da      	lsrs	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3208      	adds	r2, #8
 8002090:	0092      	lsls	r2, r2, #2
 8002092:	6939      	ldr	r1, [r7, #16]
 8002094:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	2203      	movs	r2, #3
 80020a2:	409a      	lsls	r2, r3
 80020a4:	0013      	movs	r3, r2
 80020a6:	43da      	mvns	r2, r3
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2203      	movs	r2, #3
 80020b4:	401a      	ands	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	409a      	lsls	r2, r3
 80020bc:	0013      	movs	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	23c0      	movs	r3, #192	@ 0xc0
 80020d0:	029b      	lsls	r3, r3, #10
 80020d2:	4013      	ands	r3, r2
 80020d4:	d100      	bne.n	80020d8 <HAL_GPIO_Init+0x17c>
 80020d6:	e09a      	b.n	800220e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d8:	4b54      	ldr	r3, [pc, #336]	@ (800222c <HAL_GPIO_Init+0x2d0>)
 80020da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020dc:	4b53      	ldr	r3, [pc, #332]	@ (800222c <HAL_GPIO_Init+0x2d0>)
 80020de:	2101      	movs	r1, #1
 80020e0:	430a      	orrs	r2, r1
 80020e2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e4:	4a52      	ldr	r2, [pc, #328]	@ (8002230 <HAL_GPIO_Init+0x2d4>)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	589b      	ldr	r3, [r3, r2]
 80020f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2203      	movs	r2, #3
 80020f6:	4013      	ands	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	409a      	lsls	r2, r3
 80020fe:	0013      	movs	r3, r2
 8002100:	43da      	mvns	r2, r3
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	23a0      	movs	r3, #160	@ 0xa0
 800210c:	05db      	lsls	r3, r3, #23
 800210e:	429a      	cmp	r2, r3
 8002110:	d019      	beq.n	8002146 <HAL_GPIO_Init+0x1ea>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a47      	ldr	r2, [pc, #284]	@ (8002234 <HAL_GPIO_Init+0x2d8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_GPIO_Init+0x1e6>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a46      	ldr	r2, [pc, #280]	@ (8002238 <HAL_GPIO_Init+0x2dc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00d      	beq.n	800213e <HAL_GPIO_Init+0x1e2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a45      	ldr	r2, [pc, #276]	@ (800223c <HAL_GPIO_Init+0x2e0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x1de>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a44      	ldr	r2, [pc, #272]	@ (8002240 <HAL_GPIO_Init+0x2e4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d101      	bne.n	8002136 <HAL_GPIO_Init+0x1da>
 8002132:	2305      	movs	r3, #5
 8002134:	e008      	b.n	8002148 <HAL_GPIO_Init+0x1ec>
 8002136:	2306      	movs	r3, #6
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x1ec>
 800213a:	2303      	movs	r3, #3
 800213c:	e004      	b.n	8002148 <HAL_GPIO_Init+0x1ec>
 800213e:	2302      	movs	r3, #2
 8002140:	e002      	b.n	8002148 <HAL_GPIO_Init+0x1ec>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_GPIO_Init+0x1ec>
 8002146:	2300      	movs	r3, #0
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	2103      	movs	r1, #3
 800214c:	400a      	ands	r2, r1
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	4093      	lsls	r3, r2
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002158:	4935      	ldr	r1, [pc, #212]	@ (8002230 <HAL_GPIO_Init+0x2d4>)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	3302      	adds	r3, #2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002166:	4b37      	ldr	r3, [pc, #220]	@ (8002244 <HAL_GPIO_Init+0x2e8>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	43da      	mvns	r2, r3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	2380      	movs	r3, #128	@ 0x80
 800217c:	035b      	lsls	r3, r3, #13
 800217e:	4013      	ands	r3, r2
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800218a:	4b2e      	ldr	r3, [pc, #184]	@ (8002244 <HAL_GPIO_Init+0x2e8>)
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002190:	4b2c      	ldr	r3, [pc, #176]	@ (8002244 <HAL_GPIO_Init+0x2e8>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	43da      	mvns	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	039b      	lsls	r3, r3, #14
 80021a8:	4013      	ands	r3, r2
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021b4:	4b23      	ldr	r3, [pc, #140]	@ (8002244 <HAL_GPIO_Init+0x2e8>)
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80021ba:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <HAL_GPIO_Init+0x2e8>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	43da      	mvns	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	2380      	movs	r3, #128	@ 0x80
 80021d0:	029b      	lsls	r3, r3, #10
 80021d2:	4013      	ands	r3, r2
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021de:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <HAL_GPIO_Init+0x2e8>)
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e4:	4b17      	ldr	r3, [pc, #92]	@ (8002244 <HAL_GPIO_Init+0x2e8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	43da      	mvns	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	025b      	lsls	r3, r3, #9
 80021fc:	4013      	ands	r3, r2
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002208:	4b0e      	ldr	r3, [pc, #56]	@ (8002244 <HAL_GPIO_Init+0x2e8>)
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3301      	adds	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	40da      	lsrs	r2, r3
 800221c:	1e13      	subs	r3, r2, #0
 800221e:	d000      	beq.n	8002222 <HAL_GPIO_Init+0x2c6>
 8002220:	e6a8      	b.n	8001f74 <HAL_GPIO_Init+0x18>
  }
}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	46c0      	nop			@ (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b006      	add	sp, #24
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	40010000 	.word	0x40010000
 8002234:	50000400 	.word	0x50000400
 8002238:	50000800 	.word	0x50000800
 800223c:	50000c00 	.word	0x50000c00
 8002240:	50001c00 	.word	0x50001c00
 8002244:	40010400 	.word	0x40010400

08002248 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	0008      	movs	r0, r1
 8002252:	0011      	movs	r1, r2
 8002254:	1cbb      	adds	r3, r7, #2
 8002256:	1c02      	adds	r2, r0, #0
 8002258:	801a      	strh	r2, [r3, #0]
 800225a:	1c7b      	adds	r3, r7, #1
 800225c:	1c0a      	adds	r2, r1, #0
 800225e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002260:	1c7b      	adds	r3, r7, #1
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002268:	1cbb      	adds	r3, r7, #2
 800226a:	881a      	ldrh	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002270:	e003      	b.n	800227a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002272:	1cbb      	adds	r3, r7, #2
 8002274:	881a      	ldrh	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b002      	add	sp, #8
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	000a      	movs	r2, r1
 800228c:	1cbb      	adds	r3, r7, #2
 800228e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002296:	1cbb      	adds	r3, r7, #2
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4013      	ands	r3, r2
 800229e:	041a      	lsls	r2, r3, #16
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	1cb9      	adds	r1, r7, #2
 80022a6:	8809      	ldrh	r1, [r1, #0]
 80022a8:	400b      	ands	r3, r1
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	619a      	str	r2, [r3, #24]
}
 80022b0:	46c0      	nop			@ (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b004      	add	sp, #16
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b8:	b5b0      	push	{r4, r5, r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d102      	bne.n	80022cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f000 fbaf 	bl	8002a2a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022cc:	4bcf      	ldr	r3, [pc, #828]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	220c      	movs	r2, #12
 80022d2:	4013      	ands	r3, r2
 80022d4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d6:	4bcd      	ldr	r3, [pc, #820]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	2380      	movs	r3, #128	@ 0x80
 80022dc:	025b      	lsls	r3, r3, #9
 80022de:	4013      	ands	r3, r2
 80022e0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2201      	movs	r2, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	d100      	bne.n	80022ee <HAL_RCC_OscConfig+0x36>
 80022ec:	e07e      	b.n	80023ec <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d007      	beq.n	8002304 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	2b0c      	cmp	r3, #12
 80022f8:	d112      	bne.n	8002320 <HAL_RCC_OscConfig+0x68>
 80022fa:	69fa      	ldr	r2, [r7, #28]
 80022fc:	2380      	movs	r3, #128	@ 0x80
 80022fe:	025b      	lsls	r3, r3, #9
 8002300:	429a      	cmp	r2, r3
 8002302:	d10d      	bne.n	8002320 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	4bc1      	ldr	r3, [pc, #772]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	029b      	lsls	r3, r3, #10
 800230c:	4013      	ands	r3, r2
 800230e:	d100      	bne.n	8002312 <HAL_RCC_OscConfig+0x5a>
 8002310:	e06b      	b.n	80023ea <HAL_RCC_OscConfig+0x132>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d167      	bne.n	80023ea <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	f000 fb85 	bl	8002a2a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	2380      	movs	r3, #128	@ 0x80
 8002326:	025b      	lsls	r3, r3, #9
 8002328:	429a      	cmp	r2, r3
 800232a:	d107      	bne.n	800233c <HAL_RCC_OscConfig+0x84>
 800232c:	4bb7      	ldr	r3, [pc, #732]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4bb6      	ldr	r3, [pc, #728]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002332:	2180      	movs	r1, #128	@ 0x80
 8002334:	0249      	lsls	r1, r1, #9
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	e027      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	23a0      	movs	r3, #160	@ 0xa0
 8002342:	02db      	lsls	r3, r3, #11
 8002344:	429a      	cmp	r2, r3
 8002346:	d10e      	bne.n	8002366 <HAL_RCC_OscConfig+0xae>
 8002348:	4bb0      	ldr	r3, [pc, #704]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4baf      	ldr	r3, [pc, #700]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 800234e:	2180      	movs	r1, #128	@ 0x80
 8002350:	02c9      	lsls	r1, r1, #11
 8002352:	430a      	orrs	r2, r1
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	4bad      	ldr	r3, [pc, #692]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4bac      	ldr	r3, [pc, #688]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 800235c:	2180      	movs	r1, #128	@ 0x80
 800235e:	0249      	lsls	r1, r1, #9
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e012      	b.n	800238c <HAL_RCC_OscConfig+0xd4>
 8002366:	4ba9      	ldr	r3, [pc, #676]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4ba8      	ldr	r3, [pc, #672]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 800236c:	49a8      	ldr	r1, [pc, #672]	@ (8002610 <HAL_RCC_OscConfig+0x358>)
 800236e:	400a      	ands	r2, r1
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	4ba6      	ldr	r3, [pc, #664]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2380      	movs	r3, #128	@ 0x80
 8002378:	025b      	lsls	r3, r3, #9
 800237a:	4013      	ands	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4ba2      	ldr	r3, [pc, #648]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4ba1      	ldr	r3, [pc, #644]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002386:	49a3      	ldr	r1, [pc, #652]	@ (8002614 <HAL_RCC_OscConfig+0x35c>)
 8002388:	400a      	ands	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d015      	beq.n	80023c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002394:	f7fe fec2 	bl	800111c <HAL_GetTick>
 8002398:	0003      	movs	r3, r0
 800239a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800239c:	e009      	b.n	80023b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800239e:	f7fe febd 	bl	800111c <HAL_GetTick>
 80023a2:	0002      	movs	r2, r0
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b64      	cmp	r3, #100	@ 0x64
 80023aa:	d902      	bls.n	80023b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	f000 fb3c 	bl	8002a2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023b2:	4b96      	ldr	r3, [pc, #600]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	2380      	movs	r3, #128	@ 0x80
 80023b8:	029b      	lsls	r3, r3, #10
 80023ba:	4013      	ands	r3, r2
 80023bc:	d0ef      	beq.n	800239e <HAL_RCC_OscConfig+0xe6>
 80023be:	e015      	b.n	80023ec <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe feac 	bl	800111c <HAL_GetTick>
 80023c4:	0003      	movs	r3, r0
 80023c6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ca:	f7fe fea7 	bl	800111c <HAL_GetTick>
 80023ce:	0002      	movs	r2, r0
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	@ 0x64
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e326      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023dc:	4b8b      	ldr	r3, [pc, #556]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	029b      	lsls	r3, r3, #10
 80023e4:	4013      	ands	r3, r2
 80023e6:	d1f0      	bne.n	80023ca <HAL_RCC_OscConfig+0x112>
 80023e8:	e000      	b.n	80023ec <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ea:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2202      	movs	r2, #2
 80023f2:	4013      	ands	r3, r2
 80023f4:	d100      	bne.n	80023f8 <HAL_RCC_OscConfig+0x140>
 80023f6:	e08b      	b.n	8002510 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d13e      	bne.n	8002488 <HAL_RCC_OscConfig+0x1d0>
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d13b      	bne.n	8002488 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002410:	4b7e      	ldr	r3, [pc, #504]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2204      	movs	r2, #4
 8002416:	4013      	ands	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_RCC_OscConfig+0x16c>
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e302      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002424:	4b79      	ldr	r3, [pc, #484]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4a7b      	ldr	r2, [pc, #492]	@ (8002618 <HAL_RCC_OscConfig+0x360>)
 800242a:	4013      	ands	r3, r2
 800242c:	0019      	movs	r1, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	021a      	lsls	r2, r3, #8
 8002434:	4b75      	ldr	r3, [pc, #468]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002436:	430a      	orrs	r2, r1
 8002438:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800243a:	4b74      	ldr	r3, [pc, #464]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2209      	movs	r2, #9
 8002440:	4393      	bics	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	4b71      	ldr	r3, [pc, #452]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	430a      	orrs	r2, r1
 800244a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800244c:	f000 fc40 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8002450:	0001      	movs	r1, r0
 8002452:	4b6e      	ldr	r3, [pc, #440]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	220f      	movs	r2, #15
 800245a:	4013      	ands	r3, r2
 800245c:	4a6f      	ldr	r2, [pc, #444]	@ (800261c <HAL_RCC_OscConfig+0x364>)
 800245e:	5cd3      	ldrb	r3, [r2, r3]
 8002460:	000a      	movs	r2, r1
 8002462:	40da      	lsrs	r2, r3
 8002464:	4b6e      	ldr	r3, [pc, #440]	@ (8002620 <HAL_RCC_OscConfig+0x368>)
 8002466:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002468:	4b6e      	ldr	r3, [pc, #440]	@ (8002624 <HAL_RCC_OscConfig+0x36c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2513      	movs	r5, #19
 800246e:	197c      	adds	r4, r7, r5
 8002470:	0018      	movs	r0, r3
 8002472:	f7fe fe0d 	bl	8001090 <HAL_InitTick>
 8002476:	0003      	movs	r3, r0
 8002478:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800247a:	197b      	adds	r3, r7, r5
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d046      	beq.n	8002510 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002482:	197b      	adds	r3, r7, r5
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	e2d0      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d027      	beq.n	80024de <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800248e:	4b5f      	ldr	r3, [pc, #380]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2209      	movs	r2, #9
 8002494:	4393      	bics	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	4b5c      	ldr	r3, [pc, #368]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fe3c 	bl	800111c <HAL_GetTick>
 80024a4:	0003      	movs	r3, r0
 80024a6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024aa:	f7fe fe37 	bl	800111c <HAL_GetTick>
 80024ae:	0002      	movs	r2, r0
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e2b6      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024bc:	4b53      	ldr	r3, [pc, #332]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2204      	movs	r2, #4
 80024c2:	4013      	ands	r3, r2
 80024c4:	d0f1      	beq.n	80024aa <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c6:	4b51      	ldr	r3, [pc, #324]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4a53      	ldr	r2, [pc, #332]	@ (8002618 <HAL_RCC_OscConfig+0x360>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	0019      	movs	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	021a      	lsls	r2, r3, #8
 80024d6:	4b4d      	ldr	r3, [pc, #308]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80024d8:	430a      	orrs	r2, r1
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	e018      	b.n	8002510 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b4b      	ldr	r3, [pc, #300]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4b4a      	ldr	r3, [pc, #296]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80024e4:	2101      	movs	r1, #1
 80024e6:	438a      	bics	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fe17 	bl	800111c <HAL_GetTick>
 80024ee:	0003      	movs	r3, r0
 80024f0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f4:	f7fe fe12 	bl	800111c <HAL_GetTick>
 80024f8:	0002      	movs	r2, r0
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e291      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002506:	4b41      	ldr	r3, [pc, #260]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2204      	movs	r2, #4
 800250c:	4013      	ands	r3, r2
 800250e:	d1f1      	bne.n	80024f4 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2210      	movs	r2, #16
 8002516:	4013      	ands	r3, r2
 8002518:	d100      	bne.n	800251c <HAL_RCC_OscConfig+0x264>
 800251a:	e0a1      	b.n	8002660 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d140      	bne.n	80025a4 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002522:	4b3a      	ldr	r3, [pc, #232]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	2380      	movs	r3, #128	@ 0x80
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4013      	ands	r3, r2
 800252c:	d005      	beq.n	800253a <HAL_RCC_OscConfig+0x282>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e277      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800253a:	4b34      	ldr	r3, [pc, #208]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4a3a      	ldr	r2, [pc, #232]	@ (8002628 <HAL_RCC_OscConfig+0x370>)
 8002540:	4013      	ands	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002548:	4b30      	ldr	r3, [pc, #192]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800254e:	4b2f      	ldr	r3, [pc, #188]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	0a19      	lsrs	r1, r3, #8
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	061a      	lsls	r2, r3, #24
 800255c:	4b2b      	ldr	r3, [pc, #172]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	0b5b      	lsrs	r3, r3, #13
 8002568:	3301      	adds	r3, #1
 800256a:	2280      	movs	r2, #128	@ 0x80
 800256c:	0212      	lsls	r2, r2, #8
 800256e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002570:	4b26      	ldr	r3, [pc, #152]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	210f      	movs	r1, #15
 8002578:	400b      	ands	r3, r1
 800257a:	4928      	ldr	r1, [pc, #160]	@ (800261c <HAL_RCC_OscConfig+0x364>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002580:	4b27      	ldr	r3, [pc, #156]	@ (8002620 <HAL_RCC_OscConfig+0x368>)
 8002582:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002584:	4b27      	ldr	r3, [pc, #156]	@ (8002624 <HAL_RCC_OscConfig+0x36c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2513      	movs	r5, #19
 800258a:	197c      	adds	r4, r7, r5
 800258c:	0018      	movs	r0, r3
 800258e:	f7fe fd7f 	bl	8001090 <HAL_InitTick>
 8002592:	0003      	movs	r3, r0
 8002594:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002596:	197b      	adds	r3, r7, r5
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d060      	beq.n	8002660 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800259e:	197b      	adds	r3, r7, r5
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	e242      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d03f      	beq.n	800262c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025ac:	4b17      	ldr	r3, [pc, #92]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b16      	ldr	r3, [pc, #88]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80025b2:	2180      	movs	r1, #128	@ 0x80
 80025b4:	0049      	lsls	r1, r1, #1
 80025b6:	430a      	orrs	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ba:	f7fe fdaf 	bl	800111c <HAL_GetTick>
 80025be:	0003      	movs	r3, r0
 80025c0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c4:	f7fe fdaa 	bl	800111c <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e229      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025d6:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	@ 0x80
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4013      	ands	r3, r2
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e2:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a10      	ldr	r2, [pc, #64]	@ (8002628 <HAL_RCC_OscConfig+0x370>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	0019      	movs	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025f0:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80025f2:	430a      	orrs	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f6:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	0a19      	lsrs	r1, r3, #8
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	061a      	lsls	r2, r3, #24
 8002604:	4b01      	ldr	r3, [pc, #4]	@ (800260c <HAL_RCC_OscConfig+0x354>)
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	e029      	b.n	8002660 <HAL_RCC_OscConfig+0x3a8>
 800260c:	40021000 	.word	0x40021000
 8002610:	fffeffff 	.word	0xfffeffff
 8002614:	fffbffff 	.word	0xfffbffff
 8002618:	ffffe0ff 	.word	0xffffe0ff
 800261c:	08002fe4 	.word	0x08002fe4
 8002620:	20000030 	.word	0x20000030
 8002624:	20000034 	.word	0x20000034
 8002628:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800262c:	4bbd      	ldr	r3, [pc, #756]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4bbc      	ldr	r3, [pc, #752]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002632:	49bd      	ldr	r1, [pc, #756]	@ (8002928 <HAL_RCC_OscConfig+0x670>)
 8002634:	400a      	ands	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe fd70 	bl	800111c <HAL_GetTick>
 800263c:	0003      	movs	r3, r0
 800263e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002642:	f7fe fd6b 	bl	800111c <HAL_GetTick>
 8002646:	0002      	movs	r2, r0
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e1ea      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002654:	4bb3      	ldr	r3, [pc, #716]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2380      	movs	r3, #128	@ 0x80
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	4013      	ands	r3, r2
 800265e:	d1f0      	bne.n	8002642 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2208      	movs	r2, #8
 8002666:	4013      	ands	r3, r2
 8002668:	d036      	beq.n	80026d8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d019      	beq.n	80026a6 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002672:	4bac      	ldr	r3, [pc, #688]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002674:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002676:	4bab      	ldr	r3, [pc, #684]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002678:	2101      	movs	r1, #1
 800267a:	430a      	orrs	r2, r1
 800267c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7fe fd4d 	bl	800111c <HAL_GetTick>
 8002682:	0003      	movs	r3, r0
 8002684:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002688:	f7fe fd48 	bl	800111c <HAL_GetTick>
 800268c:	0002      	movs	r2, r0
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1c7      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800269a:	4ba2      	ldr	r3, [pc, #648]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 800269c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800269e:	2202      	movs	r2, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	d0f1      	beq.n	8002688 <HAL_RCC_OscConfig+0x3d0>
 80026a4:	e018      	b.n	80026d8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a6:	4b9f      	ldr	r3, [pc, #636]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80026a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026aa:	4b9e      	ldr	r3, [pc, #632]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80026ac:	2101      	movs	r1, #1
 80026ae:	438a      	bics	r2, r1
 80026b0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fd33 	bl	800111c <HAL_GetTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026bc:	f7fe fd2e 	bl	800111c <HAL_GetTick>
 80026c0:	0002      	movs	r2, r0
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1ad      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ce:	4b95      	ldr	r3, [pc, #596]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80026d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d2:	2202      	movs	r2, #2
 80026d4:	4013      	ands	r3, r2
 80026d6:	d1f1      	bne.n	80026bc <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2204      	movs	r2, #4
 80026de:	4013      	ands	r3, r2
 80026e0:	d100      	bne.n	80026e4 <HAL_RCC_OscConfig+0x42c>
 80026e2:	e0ae      	b.n	8002842 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e4:	2027      	movs	r0, #39	@ 0x27
 80026e6:	183b      	adds	r3, r7, r0
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ec:	4b8d      	ldr	r3, [pc, #564]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80026ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026f0:	2380      	movs	r3, #128	@ 0x80
 80026f2:	055b      	lsls	r3, r3, #21
 80026f4:	4013      	ands	r3, r2
 80026f6:	d109      	bne.n	800270c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	4b8a      	ldr	r3, [pc, #552]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80026fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026fc:	4b89      	ldr	r3, [pc, #548]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80026fe:	2180      	movs	r1, #128	@ 0x80
 8002700:	0549      	lsls	r1, r1, #21
 8002702:	430a      	orrs	r2, r1
 8002704:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002706:	183b      	adds	r3, r7, r0
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270c:	4b87      	ldr	r3, [pc, #540]	@ (800292c <HAL_RCC_OscConfig+0x674>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2380      	movs	r3, #128	@ 0x80
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4013      	ands	r3, r2
 8002716:	d11a      	bne.n	800274e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002718:	4b84      	ldr	r3, [pc, #528]	@ (800292c <HAL_RCC_OscConfig+0x674>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b83      	ldr	r3, [pc, #524]	@ (800292c <HAL_RCC_OscConfig+0x674>)
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0049      	lsls	r1, r1, #1
 8002722:	430a      	orrs	r2, r1
 8002724:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002726:	f7fe fcf9 	bl	800111c <HAL_GetTick>
 800272a:	0003      	movs	r3, r0
 800272c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002730:	f7fe fcf4 	bl	800111c <HAL_GetTick>
 8002734:	0002      	movs	r2, r0
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	@ 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e173      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b7a      	ldr	r3, [pc, #488]	@ (800292c <HAL_RCC_OscConfig+0x674>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	2380      	movs	r3, #128	@ 0x80
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4013      	ands	r3, r2
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	2380      	movs	r3, #128	@ 0x80
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	429a      	cmp	r2, r3
 8002758:	d107      	bne.n	800276a <HAL_RCC_OscConfig+0x4b2>
 800275a:	4b72      	ldr	r3, [pc, #456]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 800275c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800275e:	4b71      	ldr	r3, [pc, #452]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002760:	2180      	movs	r1, #128	@ 0x80
 8002762:	0049      	lsls	r1, r1, #1
 8002764:	430a      	orrs	r2, r1
 8002766:	651a      	str	r2, [r3, #80]	@ 0x50
 8002768:	e031      	b.n	80027ce <HAL_RCC_OscConfig+0x516>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x4d4>
 8002772:	4b6c      	ldr	r3, [pc, #432]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002774:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002776:	4b6b      	ldr	r3, [pc, #428]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002778:	496b      	ldr	r1, [pc, #428]	@ (8002928 <HAL_RCC_OscConfig+0x670>)
 800277a:	400a      	ands	r2, r1
 800277c:	651a      	str	r2, [r3, #80]	@ 0x50
 800277e:	4b69      	ldr	r3, [pc, #420]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002780:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002782:	4b68      	ldr	r3, [pc, #416]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002784:	496a      	ldr	r1, [pc, #424]	@ (8002930 <HAL_RCC_OscConfig+0x678>)
 8002786:	400a      	ands	r2, r1
 8002788:	651a      	str	r2, [r3, #80]	@ 0x50
 800278a:	e020      	b.n	80027ce <HAL_RCC_OscConfig+0x516>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	23a0      	movs	r3, #160	@ 0xa0
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	429a      	cmp	r2, r3
 8002796:	d10e      	bne.n	80027b6 <HAL_RCC_OscConfig+0x4fe>
 8002798:	4b62      	ldr	r3, [pc, #392]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 800279a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800279c:	4b61      	ldr	r3, [pc, #388]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 800279e:	2180      	movs	r1, #128	@ 0x80
 80027a0:	00c9      	lsls	r1, r1, #3
 80027a2:	430a      	orrs	r2, r1
 80027a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80027a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80027a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027aa:	4b5e      	ldr	r3, [pc, #376]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80027ac:	2180      	movs	r1, #128	@ 0x80
 80027ae:	0049      	lsls	r1, r1, #1
 80027b0:	430a      	orrs	r2, r1
 80027b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80027b4:	e00b      	b.n	80027ce <HAL_RCC_OscConfig+0x516>
 80027b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80027b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80027bc:	495a      	ldr	r1, [pc, #360]	@ (8002928 <HAL_RCC_OscConfig+0x670>)
 80027be:	400a      	ands	r2, r1
 80027c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80027c2:	4b58      	ldr	r3, [pc, #352]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80027c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027c6:	4b57      	ldr	r3, [pc, #348]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80027c8:	4959      	ldr	r1, [pc, #356]	@ (8002930 <HAL_RCC_OscConfig+0x678>)
 80027ca:	400a      	ands	r2, r1
 80027cc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d015      	beq.n	8002802 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d6:	f7fe fca1 	bl	800111c <HAL_GetTick>
 80027da:	0003      	movs	r3, r0
 80027dc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027de:	e009      	b.n	80027f4 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fc9c 	bl	800111c <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	4a52      	ldr	r2, [pc, #328]	@ (8002934 <HAL_RCC_OscConfig+0x67c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e11a      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80027f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4013      	ands	r3, r2
 80027fe:	d0ef      	beq.n	80027e0 <HAL_RCC_OscConfig+0x528>
 8002800:	e014      	b.n	800282c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002802:	f7fe fc8b 	bl	800111c <HAL_GetTick>
 8002806:	0003      	movs	r3, r0
 8002808:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800280a:	e009      	b.n	8002820 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7fe fc86 	bl	800111c <HAL_GetTick>
 8002810:	0002      	movs	r2, r0
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	4a47      	ldr	r2, [pc, #284]	@ (8002934 <HAL_RCC_OscConfig+0x67c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e104      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002820:	4b40      	ldr	r3, [pc, #256]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002822:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4013      	ands	r3, r2
 800282a:	d1ef      	bne.n	800280c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800282c:	2327      	movs	r3, #39	@ 0x27
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4b3b      	ldr	r3, [pc, #236]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800283a:	4b3a      	ldr	r3, [pc, #232]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 800283c:	493e      	ldr	r1, [pc, #248]	@ (8002938 <HAL_RCC_OscConfig+0x680>)
 800283e:	400a      	ands	r2, r1
 8002840:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2220      	movs	r2, #32
 8002848:	4013      	ands	r3, r2
 800284a:	d049      	beq.n	80028e0 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d026      	beq.n	80028a2 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002854:	4b33      	ldr	r3, [pc, #204]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	4b32      	ldr	r3, [pc, #200]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 800285a:	2101      	movs	r1, #1
 800285c:	430a      	orrs	r2, r1
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	4b30      	ldr	r3, [pc, #192]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002864:	4b2f      	ldr	r3, [pc, #188]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002866:	2101      	movs	r1, #1
 8002868:	430a      	orrs	r2, r1
 800286a:	635a      	str	r2, [r3, #52]	@ 0x34
 800286c:	4b33      	ldr	r3, [pc, #204]	@ (800293c <HAL_RCC_OscConfig+0x684>)
 800286e:	6a1a      	ldr	r2, [r3, #32]
 8002870:	4b32      	ldr	r3, [pc, #200]	@ (800293c <HAL_RCC_OscConfig+0x684>)
 8002872:	2180      	movs	r1, #128	@ 0x80
 8002874:	0189      	lsls	r1, r1, #6
 8002876:	430a      	orrs	r2, r1
 8002878:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287a:	f7fe fc4f 	bl	800111c <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002884:	f7fe fc4a 	bl	800111c <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0c9      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002896:	4b23      	ldr	r3, [pc, #140]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2202      	movs	r2, #2
 800289c:	4013      	ands	r3, r2
 800289e:	d0f1      	beq.n	8002884 <HAL_RCC_OscConfig+0x5cc>
 80028a0:	e01e      	b.n	80028e0 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80028a2:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80028a8:	2101      	movs	r1, #1
 80028aa:	438a      	bics	r2, r1
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	4b23      	ldr	r3, [pc, #140]	@ (800293c <HAL_RCC_OscConfig+0x684>)
 80028b0:	6a1a      	ldr	r2, [r3, #32]
 80028b2:	4b22      	ldr	r3, [pc, #136]	@ (800293c <HAL_RCC_OscConfig+0x684>)
 80028b4:	4922      	ldr	r1, [pc, #136]	@ (8002940 <HAL_RCC_OscConfig+0x688>)
 80028b6:	400a      	ands	r2, r1
 80028b8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7fe fc2f 	bl	800111c <HAL_GetTick>
 80028be:	0003      	movs	r3, r0
 80028c0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c4:	f7fe fc2a 	bl	800111c <HAL_GetTick>
 80028c8:	0002      	movs	r2, r0
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0a9      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028d6:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2202      	movs	r2, #2
 80028dc:	4013      	ands	r3, r2
 80028de:	d1f1      	bne.n	80028c4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d100      	bne.n	80028ea <HAL_RCC_OscConfig+0x632>
 80028e8:	e09e      	b.n	8002a28 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	d100      	bne.n	80028f2 <HAL_RCC_OscConfig+0x63a>
 80028f0:	e077      	b.n	80029e2 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d158      	bne.n	80029ac <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <HAL_RCC_OscConfig+0x66c>)
 8002900:	4910      	ldr	r1, [pc, #64]	@ (8002944 <HAL_RCC_OscConfig+0x68c>)
 8002902:	400a      	ands	r2, r1
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7fe fc09 	bl	800111c <HAL_GetTick>
 800290a:	0003      	movs	r3, r0
 800290c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800290e:	e01b      	b.n	8002948 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe fc04 	bl	800111c <HAL_GetTick>
 8002914:	0002      	movs	r2, r0
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d914      	bls.n	8002948 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e083      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	40021000 	.word	0x40021000
 8002928:	fffffeff 	.word	0xfffffeff
 800292c:	40007000 	.word	0x40007000
 8002930:	fffffbff 	.word	0xfffffbff
 8002934:	00001388 	.word	0x00001388
 8002938:	efffffff 	.word	0xefffffff
 800293c:	40010000 	.word	0x40010000
 8002940:	ffffdfff 	.word	0xffffdfff
 8002944:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002948:	4b3a      	ldr	r3, [pc, #232]	@ (8002a34 <HAL_RCC_OscConfig+0x77c>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	049b      	lsls	r3, r3, #18
 8002950:	4013      	ands	r3, r2
 8002952:	d1dd      	bne.n	8002910 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002954:	4b37      	ldr	r3, [pc, #220]	@ (8002a34 <HAL_RCC_OscConfig+0x77c>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a37      	ldr	r2, [pc, #220]	@ (8002a38 <HAL_RCC_OscConfig+0x780>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296c:	431a      	orrs	r2, r3
 800296e:	4b31      	ldr	r3, [pc, #196]	@ (8002a34 <HAL_RCC_OscConfig+0x77c>)
 8002970:	430a      	orrs	r2, r1
 8002972:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002974:	4b2f      	ldr	r3, [pc, #188]	@ (8002a34 <HAL_RCC_OscConfig+0x77c>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b2e      	ldr	r3, [pc, #184]	@ (8002a34 <HAL_RCC_OscConfig+0x77c>)
 800297a:	2180      	movs	r1, #128	@ 0x80
 800297c:	0449      	lsls	r1, r1, #17
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe fbcb 	bl	800111c <HAL_GetTick>
 8002986:	0003      	movs	r3, r0
 8002988:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298c:	f7fe fbc6 	bl	800111c <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e045      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800299e:	4b25      	ldr	r3, [pc, #148]	@ (8002a34 <HAL_RCC_OscConfig+0x77c>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	049b      	lsls	r3, r3, #18
 80029a6:	4013      	ands	r3, r2
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x6d4>
 80029aa:	e03d      	b.n	8002a28 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ac:	4b21      	ldr	r3, [pc, #132]	@ (8002a34 <HAL_RCC_OscConfig+0x77c>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <HAL_RCC_OscConfig+0x77c>)
 80029b2:	4922      	ldr	r1, [pc, #136]	@ (8002a3c <HAL_RCC_OscConfig+0x784>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe fbb0 	bl	800111c <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe fbab 	bl	800111c <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e02a      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029d4:	4b17      	ldr	r3, [pc, #92]	@ (8002a34 <HAL_RCC_OscConfig+0x77c>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2380      	movs	r3, #128	@ 0x80
 80029da:	049b      	lsls	r3, r3, #18
 80029dc:	4013      	ands	r3, r2
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x70a>
 80029e0:	e022      	b.n	8002a28 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e01d      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ee:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <HAL_RCC_OscConfig+0x77c>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	2380      	movs	r3, #128	@ 0x80
 80029f8:	025b      	lsls	r3, r3, #9
 80029fa:	401a      	ands	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d10f      	bne.n	8002a24 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	23f0      	movs	r3, #240	@ 0xf0
 8002a08:	039b      	lsls	r3, r3, #14
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d107      	bne.n	8002a24 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	23c0      	movs	r3, #192	@ 0xc0
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d001      	beq.n	8002a28 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b00a      	add	sp, #40	@ 0x28
 8002a30:	bdb0      	pop	{r4, r5, r7, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	40021000 	.word	0x40021000
 8002a38:	ff02ffff 	.word	0xff02ffff
 8002a3c:	feffffff 	.word	0xfeffffff

08002a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a40:	b5b0      	push	{r4, r5, r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e128      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a54:	4b96      	ldr	r3, [pc, #600]	@ (8002cb0 <HAL_RCC_ClockConfig+0x270>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d91e      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b93      	ldr	r3, [pc, #588]	@ (8002cb0 <HAL_RCC_ClockConfig+0x270>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2201      	movs	r2, #1
 8002a68:	4393      	bics	r3, r2
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	4b90      	ldr	r3, [pc, #576]	@ (8002cb0 <HAL_RCC_ClockConfig+0x270>)
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a74:	f7fe fb52 	bl	800111c <HAL_GetTick>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7c:	e009      	b.n	8002a92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7e:	f7fe fb4d 	bl	800111c <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	4a8a      	ldr	r2, [pc, #552]	@ (8002cb4 <HAL_RCC_ClockConfig+0x274>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e109      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b87      	ldr	r3, [pc, #540]	@ (8002cb0 <HAL_RCC_ClockConfig+0x270>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2201      	movs	r2, #1
 8002a98:	4013      	ands	r3, r2
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1ee      	bne.n	8002a7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aaa:	4b83      	ldr	r3, [pc, #524]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	22f0      	movs	r2, #240	@ 0xf0
 8002ab0:	4393      	bics	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	4b7f      	ldr	r3, [pc, #508]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002aba:	430a      	orrs	r2, r1
 8002abc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d100      	bne.n	8002aca <HAL_RCC_ClockConfig+0x8a>
 8002ac8:	e089      	b.n	8002bde <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ad2:	4b79      	ldr	r3, [pc, #484]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	2380      	movs	r3, #128	@ 0x80
 8002ad8:	029b      	lsls	r3, r3, #10
 8002ada:	4013      	ands	r3, r2
 8002adc:	d120      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e0e1      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b03      	cmp	r3, #3
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aea:	4b73      	ldr	r3, [pc, #460]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	2380      	movs	r3, #128	@ 0x80
 8002af0:	049b      	lsls	r3, r3, #18
 8002af2:	4013      	ands	r3, r2
 8002af4:	d114      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e0d5      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d106      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b02:	4b6d      	ldr	r3, [pc, #436]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2204      	movs	r2, #4
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d109      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0ca      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b10:	4b69      	ldr	r3, [pc, #420]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2380      	movs	r3, #128	@ 0x80
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0c2      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b20:	4b65      	ldr	r3, [pc, #404]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2203      	movs	r2, #3
 8002b26:	4393      	bics	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	4b62      	ldr	r3, [pc, #392]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b34:	f7fe faf2 	bl	800111c <HAL_GetTick>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d111      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b44:	e009      	b.n	8002b5a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b46:	f7fe fae9 	bl	800111c <HAL_GetTick>
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	4a58      	ldr	r2, [pc, #352]	@ (8002cb4 <HAL_RCC_ClockConfig+0x274>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e0a5      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b5a:	4b57      	ldr	r3, [pc, #348]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	220c      	movs	r2, #12
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d1ef      	bne.n	8002b46 <HAL_RCC_ClockConfig+0x106>
 8002b66:	e03a      	b.n	8002bde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d111      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b70:	e009      	b.n	8002b86 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b72:	f7fe fad3 	bl	800111c <HAL_GetTick>
 8002b76:	0002      	movs	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	4a4d      	ldr	r2, [pc, #308]	@ (8002cb4 <HAL_RCC_ClockConfig+0x274>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e08f      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b86:	4b4c      	ldr	r3, [pc, #304]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	d1ef      	bne.n	8002b72 <HAL_RCC_ClockConfig+0x132>
 8002b92:	e024      	b.n	8002bde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b9c:	e009      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b9e:	f7fe fabd 	bl	800111c <HAL_GetTick>
 8002ba2:	0002      	movs	r2, r0
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	4a42      	ldr	r2, [pc, #264]	@ (8002cb4 <HAL_RCC_ClockConfig+0x274>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e079      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb2:	4b41      	ldr	r3, [pc, #260]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	220c      	movs	r2, #12
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d1ef      	bne.n	8002b9e <HAL_RCC_ClockConfig+0x15e>
 8002bbe:	e00e      	b.n	8002bde <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7fe faac 	bl	800111c <HAL_GetTick>
 8002bc4:	0002      	movs	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	4a3a      	ldr	r2, [pc, #232]	@ (8002cb4 <HAL_RCC_ClockConfig+0x274>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e068      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bd4:	4b38      	ldr	r3, [pc, #224]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	220c      	movs	r2, #12
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bde:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <HAL_RCC_ClockConfig+0x270>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2201      	movs	r2, #1
 8002be4:	4013      	ands	r3, r2
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d21e      	bcs.n	8002c2a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bec:	4b30      	ldr	r3, [pc, #192]	@ (8002cb0 <HAL_RCC_ClockConfig+0x270>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4393      	bics	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb0 <HAL_RCC_ClockConfig+0x270>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bfe:	f7fe fa8d 	bl	800111c <HAL_GetTick>
 8002c02:	0003      	movs	r3, r0
 8002c04:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	e009      	b.n	8002c1c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7fe fa88 	bl	800111c <HAL_GetTick>
 8002c0c:	0002      	movs	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	4a28      	ldr	r2, [pc, #160]	@ (8002cb4 <HAL_RCC_ClockConfig+0x274>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e044      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1c:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <HAL_RCC_ClockConfig+0x270>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2201      	movs	r2, #1
 8002c22:	4013      	ands	r3, r2
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d1ee      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	4013      	ands	r3, r2
 8002c32:	d009      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b20      	ldr	r3, [pc, #128]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4a20      	ldr	r2, [pc, #128]	@ (8002cbc <HAL_RCC_ClockConfig+0x27c>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002c44:	430a      	orrs	r2, r1
 8002c46:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c52:	4b19      	ldr	r3, [pc, #100]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc0 <HAL_RCC_ClockConfig+0x280>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	00da      	lsls	r2, r3, #3
 8002c62:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002c64:	430a      	orrs	r2, r1
 8002c66:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c68:	f000 f832 	bl	8002cd0 <HAL_RCC_GetSysClockFreq>
 8002c6c:	0001      	movs	r1, r0
 8002c6e:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <HAL_RCC_ClockConfig+0x278>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	220f      	movs	r2, #15
 8002c76:	4013      	ands	r3, r2
 8002c78:	4a12      	ldr	r2, [pc, #72]	@ (8002cc4 <HAL_RCC_ClockConfig+0x284>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	000a      	movs	r2, r1
 8002c7e:	40da      	lsrs	r2, r3
 8002c80:	4b11      	ldr	r3, [pc, #68]	@ (8002cc8 <HAL_RCC_ClockConfig+0x288>)
 8002c82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c84:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <HAL_RCC_ClockConfig+0x28c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	250b      	movs	r5, #11
 8002c8a:	197c      	adds	r4, r7, r5
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7fe f9ff 	bl	8001090 <HAL_InitTick>
 8002c92:	0003      	movs	r3, r0
 8002c94:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002c96:	197b      	adds	r3, r7, r5
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002c9e:	197b      	adds	r3, r7, r5
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b004      	add	sp, #16
 8002cac:	bdb0      	pop	{r4, r5, r7, pc}
 8002cae:	46c0      	nop			@ (mov r8, r8)
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	00001388 	.word	0x00001388
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	fffff8ff 	.word	0xfffff8ff
 8002cc0:	ffffc7ff 	.word	0xffffc7ff
 8002cc4:	08002fe4 	.word	0x08002fe4
 8002cc8:	20000030 	.word	0x20000030
 8002ccc:	20000034 	.word	0x20000034

08002cd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	220c      	movs	r2, #12
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d013      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x3e>
 8002ce6:	d85c      	bhi.n	8002da2 <HAL_RCC_GetSysClockFreq+0xd2>
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d002      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x22>
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d00b      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x38>
 8002cf0:	e057      	b.n	8002da2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002cf2:	4b35      	ldr	r3, [pc, #212]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2210      	movs	r2, #16
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d002      	beq.n	8002d02 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002cfc:	4b33      	ldr	r3, [pc, #204]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002cfe:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002d00:	e05d      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002d02:	4b33      	ldr	r3, [pc, #204]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002d04:	613b      	str	r3, [r7, #16]
      break;
 8002d06:	e05a      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d08:	4b32      	ldr	r3, [pc, #200]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002d0a:	613b      	str	r3, [r7, #16]
      break;
 8002d0c:	e057      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	0c9b      	lsrs	r3, r3, #18
 8002d12:	220f      	movs	r2, #15
 8002d14:	4013      	ands	r3, r2
 8002d16:	4a30      	ldr	r2, [pc, #192]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d18:	5cd3      	ldrb	r3, [r2, r3]
 8002d1a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	0d9b      	lsrs	r3, r3, #22
 8002d20:	2203      	movs	r2, #3
 8002d22:	4013      	ands	r3, r2
 8002d24:	3301      	adds	r3, #1
 8002d26:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d28:	4b27      	ldr	r3, [pc, #156]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	2380      	movs	r3, #128	@ 0x80
 8002d2e:	025b      	lsls	r3, r3, #9
 8002d30:	4013      	ands	r3, r2
 8002d32:	d00f      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	000a      	movs	r2, r1
 8002d38:	0152      	lsls	r2, r2, #5
 8002d3a:	1a52      	subs	r2, r2, r1
 8002d3c:	0193      	lsls	r3, r2, #6
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	185b      	adds	r3, r3, r1
 8002d44:	025b      	lsls	r3, r3, #9
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7fd f9dd 	bl	8000108 <__udivsi3>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	e023      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d54:	4b1c      	ldr	r3, [pc, #112]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2210      	movs	r2, #16
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d00f      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	000a      	movs	r2, r1
 8002d62:	0152      	lsls	r2, r2, #5
 8002d64:	1a52      	subs	r2, r2, r1
 8002d66:	0193      	lsls	r3, r2, #6
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	185b      	adds	r3, r3, r1
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f7fd f9c8 	bl	8000108 <__udivsi3>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	e00e      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	000a      	movs	r2, r1
 8002d82:	0152      	lsls	r2, r2, #5
 8002d84:	1a52      	subs	r2, r2, r1
 8002d86:	0193      	lsls	r3, r2, #6
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	185b      	adds	r3, r3, r1
 8002d8e:	029b      	lsls	r3, r3, #10
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7fd f9b8 	bl	8000108 <__udivsi3>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	613b      	str	r3, [r7, #16]
      break;
 8002da0:	e00d      	b.n	8002dbe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002da2:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	0b5b      	lsrs	r3, r3, #13
 8002da8:	2207      	movs	r2, #7
 8002daa:	4013      	ands	r3, r2
 8002dac:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	3301      	adds	r3, #1
 8002db2:	2280      	movs	r2, #128	@ 0x80
 8002db4:	0212      	lsls	r2, r2, #8
 8002db6:	409a      	lsls	r2, r3
 8002db8:	0013      	movs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
      break;
 8002dbc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002dbe:	693b      	ldr	r3, [r7, #16]
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b006      	add	sp, #24
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	003d0900 	.word	0x003d0900
 8002dd0:	00f42400 	.word	0x00f42400
 8002dd4:	007a1200 	.word	0x007a1200
 8002dd8:	08002ff4 	.word	0x08002ff4

08002ddc <memset>:
 8002ddc:	0003      	movs	r3, r0
 8002dde:	1882      	adds	r2, r0, r2
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d100      	bne.n	8002de6 <memset+0xa>
 8002de4:	4770      	bx	lr
 8002de6:	7019      	strb	r1, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	e7f9      	b.n	8002de0 <memset+0x4>

08002dec <__libc_init_array>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	2600      	movs	r6, #0
 8002df0:	4c0c      	ldr	r4, [pc, #48]	@ (8002e24 <__libc_init_array+0x38>)
 8002df2:	4d0d      	ldr	r5, [pc, #52]	@ (8002e28 <__libc_init_array+0x3c>)
 8002df4:	1b64      	subs	r4, r4, r5
 8002df6:	10a4      	asrs	r4, r4, #2
 8002df8:	42a6      	cmp	r6, r4
 8002dfa:	d109      	bne.n	8002e10 <__libc_init_array+0x24>
 8002dfc:	2600      	movs	r6, #0
 8002dfe:	f000 f819 	bl	8002e34 <_init>
 8002e02:	4c0a      	ldr	r4, [pc, #40]	@ (8002e2c <__libc_init_array+0x40>)
 8002e04:	4d0a      	ldr	r5, [pc, #40]	@ (8002e30 <__libc_init_array+0x44>)
 8002e06:	1b64      	subs	r4, r4, r5
 8002e08:	10a4      	asrs	r4, r4, #2
 8002e0a:	42a6      	cmp	r6, r4
 8002e0c:	d105      	bne.n	8002e1a <__libc_init_array+0x2e>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	00b3      	lsls	r3, r6, #2
 8002e12:	58eb      	ldr	r3, [r5, r3]
 8002e14:	4798      	blx	r3
 8002e16:	3601      	adds	r6, #1
 8002e18:	e7ee      	b.n	8002df8 <__libc_init_array+0xc>
 8002e1a:	00b3      	lsls	r3, r6, #2
 8002e1c:	58eb      	ldr	r3, [r5, r3]
 8002e1e:	4798      	blx	r3
 8002e20:	3601      	adds	r6, #1
 8002e22:	e7f2      	b.n	8002e0a <__libc_init_array+0x1e>
 8002e24:	08003000 	.word	0x08003000
 8002e28:	08003000 	.word	0x08003000
 8002e2c:	08003004 	.word	0x08003004
 8002e30:	08003000 	.word	0x08003000

08002e34 <_init>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr

08002e40 <_fini>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	46c0      	nop			@ (mov r8, r8)
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr

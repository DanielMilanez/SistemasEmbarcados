
Projeto Ampulheta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bac  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  08003c6c  08003c6c  00004c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a64  08004a64  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004a64  08004a64  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004a64  08004a64  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a64  08004a64  00005a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a68  08004a68  00005a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004a6c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000060  08004acc  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000067c  08004acc  0000667c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094e0  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf5  00000000  00000000  0000f568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00011260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000737  00000000  00000000  00011bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e88  00000000  00000000  00012327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3d0  00000000  00000000  0002a1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bd2d  00000000  00000000  0003757f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b32ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025d8  00000000  00000000  000b32f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b58c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c54 	.word	0x08003c54

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08003c54 	.word	0x08003c54

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <DrawHourglass>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */
void DrawHourglass(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af02      	add	r7, sp, #8
	static uint8_t counter = 1;
	static char buf[10];

	ssd1306_Fill(Black);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 fb6e 	bl	800091c <ssd1306_Fill>

	// Draw name
	ssd1306_SetCursor(0, 0);
 8000240:	2100      	movs	r1, #0
 8000242:	2000      	movs	r0, #0
 8000244:	f000 fcea 	bl	8000c1c <ssd1306_SetCursor>
	if(counter == 1) sprintf(buf, "TEMP.");
 8000248:	4b97      	ldr	r3, [pc, #604]	@ (80004a8 <DrawHourglass+0x274>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d106      	bne.n	800025e <DrawHourglass+0x2a>
 8000250:	4a96      	ldr	r2, [pc, #600]	@ (80004ac <DrawHourglass+0x278>)
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <DrawHourglass+0x27c>)
 8000254:	0011      	movs	r1, r2
 8000256:	0018      	movs	r0, r3
 8000258:	f003 f85e 	bl	8003318 <siprintf>
 800025c:	e022      	b.n	80002a4 <DrawHourglass+0x70>
	else if(counter == 2) sprintf(buf, "TEMP..");
 800025e:	4b92      	ldr	r3, [pc, #584]	@ (80004a8 <DrawHourglass+0x274>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b02      	cmp	r3, #2
 8000264:	d106      	bne.n	8000274 <DrawHourglass+0x40>
 8000266:	4a93      	ldr	r2, [pc, #588]	@ (80004b4 <DrawHourglass+0x280>)
 8000268:	4b91      	ldr	r3, [pc, #580]	@ (80004b0 <DrawHourglass+0x27c>)
 800026a:	0011      	movs	r1, r2
 800026c:	0018      	movs	r0, r3
 800026e:	f003 f853 	bl	8003318 <siprintf>
 8000272:	e017      	b.n	80002a4 <DrawHourglass+0x70>
	else if(counter == 3) sprintf(buf, "TEMP...");
 8000274:	4b8c      	ldr	r3, [pc, #560]	@ (80004a8 <DrawHourglass+0x274>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b03      	cmp	r3, #3
 800027a:	d106      	bne.n	800028a <DrawHourglass+0x56>
 800027c:	4a8e      	ldr	r2, [pc, #568]	@ (80004b8 <DrawHourglass+0x284>)
 800027e:	4b8c      	ldr	r3, [pc, #560]	@ (80004b0 <DrawHourglass+0x27c>)
 8000280:	0011      	movs	r1, r2
 8000282:	0018      	movs	r0, r3
 8000284:	f003 f848 	bl	8003318 <siprintf>
 8000288:	e00c      	b.n	80002a4 <DrawHourglass+0x70>
	else if (counter >= 4) {
 800028a:	4b87      	ldr	r3, [pc, #540]	@ (80004a8 <DrawHourglass+0x274>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b03      	cmp	r3, #3
 8000290:	d908      	bls.n	80002a4 <DrawHourglass+0x70>
		counter = 0;
 8000292:	4b85      	ldr	r3, [pc, #532]	@ (80004a8 <DrawHourglass+0x274>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
		sprintf(buf, "TEMP");
 8000298:	4a88      	ldr	r2, [pc, #544]	@ (80004bc <DrawHourglass+0x288>)
 800029a:	4b85      	ldr	r3, [pc, #532]	@ (80004b0 <DrawHourglass+0x27c>)
 800029c:	0011      	movs	r1, r2
 800029e:	0018      	movs	r0, r3
 80002a0:	f003 f83a 	bl	8003318 <siprintf>
	}

	ssd1306_WriteString(buf, Font_6x8, White);
 80002a4:	4b86      	ldr	r3, [pc, #536]	@ (80004c0 <DrawHourglass+0x28c>)
 80002a6:	4882      	ldr	r0, [pc, #520]	@ (80004b0 <DrawHourglass+0x27c>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	9200      	str	r2, [sp, #0]
 80002ac:	6819      	ldr	r1, [r3, #0]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	f000 fc87 	bl	8000bc4 <ssd1306_WriteString>

	// Draw head
	ssd1306_Line(48, 16 - 10, 80, 16 - 10, White);
 80002b6:	2301      	movs	r3, #1
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2306      	movs	r3, #6
 80002bc:	2250      	movs	r2, #80	@ 0x50
 80002be:	2106      	movs	r1, #6
 80002c0:	2030      	movs	r0, #48	@ 0x30
 80002c2:	f000 fcc5 	bl	8000c50 <ssd1306_Line>
	ssd1306_Line(48, 16 - 10, 48, 16, White);
 80002c6:	2301      	movs	r3, #1
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	2310      	movs	r3, #16
 80002cc:	2230      	movs	r2, #48	@ 0x30
 80002ce:	2106      	movs	r1, #6
 80002d0:	2030      	movs	r0, #48	@ 0x30
 80002d2:	f000 fcbd 	bl	8000c50 <ssd1306_Line>
	ssd1306_Line(80, 16 - 10, 80, 16, White);
 80002d6:	2301      	movs	r3, #1
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	2310      	movs	r3, #16
 80002dc:	2250      	movs	r2, #80	@ 0x50
 80002de:	2106      	movs	r1, #6
 80002e0:	2050      	movs	r0, #80	@ 0x50
 80002e2:	f000 fcb5 	bl	8000c50 <ssd1306_Line>

	// Draw First boddy
	ssd1306_Line(48, 16, 80, 16, White);
 80002e6:	2301      	movs	r3, #1
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	2310      	movs	r3, #16
 80002ec:	2250      	movs	r2, #80	@ 0x50
 80002ee:	2110      	movs	r1, #16
 80002f0:	2030      	movs	r0, #48	@ 0x30
 80002f2:	f000 fcad 	bl	8000c50 <ssd1306_Line>
	ssd1306_Line(48, 16, 64, 2 * 16, White);
 80002f6:	2301      	movs	r3, #1
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2320      	movs	r3, #32
 80002fc:	2240      	movs	r2, #64	@ 0x40
 80002fe:	2110      	movs	r1, #16
 8000300:	2030      	movs	r0, #48	@ 0x30
 8000302:	f000 fca5 	bl	8000c50 <ssd1306_Line>
	ssd1306_Line(80, 16, 64, 2 * 16, White);
 8000306:	2301      	movs	r3, #1
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2320      	movs	r3, #32
 800030c:	2240      	movs	r2, #64	@ 0x40
 800030e:	2110      	movs	r1, #16
 8000310:	2050      	movs	r0, #80	@ 0x50
 8000312:	f000 fc9d 	bl	8000c50 <ssd1306_Line>

	// Draw Second boddy
	ssd1306_Line(48, 48, 80, 48, White);
 8000316:	2301      	movs	r3, #1
 8000318:	9300      	str	r3, [sp, #0]
 800031a:	2330      	movs	r3, #48	@ 0x30
 800031c:	2250      	movs	r2, #80	@ 0x50
 800031e:	2130      	movs	r1, #48	@ 0x30
 8000320:	2030      	movs	r0, #48	@ 0x30
 8000322:	f000 fc95 	bl	8000c50 <ssd1306_Line>
	ssd1306_Line(48, 48, 64, 32, White);
 8000326:	2301      	movs	r3, #1
 8000328:	9300      	str	r3, [sp, #0]
 800032a:	2320      	movs	r3, #32
 800032c:	2240      	movs	r2, #64	@ 0x40
 800032e:	2130      	movs	r1, #48	@ 0x30
 8000330:	2030      	movs	r0, #48	@ 0x30
 8000332:	f000 fc8d 	bl	8000c50 <ssd1306_Line>
	ssd1306_Line(80, 48, 64, 32, White);
 8000336:	2301      	movs	r3, #1
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	2320      	movs	r3, #32
 800033c:	2240      	movs	r2, #64	@ 0x40
 800033e:	2130      	movs	r1, #48	@ 0x30
 8000340:	2050      	movs	r0, #80	@ 0x50
 8000342:	f000 fc85 	bl	8000c50 <ssd1306_Line>

	// Draw Foot
	ssd1306_Line(48, 48 + 10, 80, 48 + 10, White);
 8000346:	2301      	movs	r3, #1
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	233a      	movs	r3, #58	@ 0x3a
 800034c:	2250      	movs	r2, #80	@ 0x50
 800034e:	213a      	movs	r1, #58	@ 0x3a
 8000350:	2030      	movs	r0, #48	@ 0x30
 8000352:	f000 fc7d 	bl	8000c50 <ssd1306_Line>
	ssd1306_Line(48, 48 + 10, 48, 48, White);
 8000356:	2301      	movs	r3, #1
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	2330      	movs	r3, #48	@ 0x30
 800035c:	2230      	movs	r2, #48	@ 0x30
 800035e:	213a      	movs	r1, #58	@ 0x3a
 8000360:	2030      	movs	r0, #48	@ 0x30
 8000362:	f000 fc75 	bl	8000c50 <ssd1306_Line>
	ssd1306_Line(80, 48 + 10, 80, 48, White);
 8000366:	2301      	movs	r3, #1
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2330      	movs	r3, #48	@ 0x30
 800036c:	2250      	movs	r2, #80	@ 0x50
 800036e:	213a      	movs	r1, #58	@ 0x3a
 8000370:	2050      	movs	r0, #80	@ 0x50
 8000372:	f000 fc6d 	bl	8000c50 <ssd1306_Line>

	// Draw send
	uint8_t flag = 1;
 8000376:	230f      	movs	r3, #15
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	2201      	movs	r2, #1
 800037c:	701a      	strb	r2, [r3, #0]
	maximun_x--;
 800037e:	4b51      	ldr	r3, [pc, #324]	@ (80004c4 <DrawHourglass+0x290>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	3b01      	subs	r3, #1
 8000384:	b2da      	uxtb	r2, r3
 8000386:	4b4f      	ldr	r3, [pc, #316]	@ (80004c4 <DrawHourglass+0x290>)
 8000388:	701a      	strb	r2, [r3, #0]
	minimal_x++;
 800038a:	4b4f      	ldr	r3, [pc, #316]	@ (80004c8 <DrawHourglass+0x294>)
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	3301      	adds	r3, #1
 8000390:	b2da      	uxtb	r2, r3
 8000392:	4b4d      	ldr	r3, [pc, #308]	@ (80004c8 <DrawHourglass+0x294>)
 8000394:	701a      	strb	r2, [r3, #0]

	for(int j = PixelControl.y; j <= 31; ++j){
 8000396:	4b4d      	ldr	r3, [pc, #308]	@ (80004cc <DrawHourglass+0x298>)
 8000398:	791b      	ldrb	r3, [r3, #4]
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	e059      	b.n	8000452 <DrawHourglass+0x21e>
		for(int i = PixelControl.x_min; i < PixelControl.x_max; ++i){
 800039e:	4b4b      	ldr	r3, [pc, #300]	@ (80004cc <DrawHourglass+0x298>)
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	e030      	b.n	8000408 <DrawHourglass+0x1d4>
			if (i != PixelControl.x_min && i != PixelControl.x_max){
 80003a6:	4b49      	ldr	r3, [pc, #292]	@ (80004cc <DrawHourglass+0x298>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	001a      	movs	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d027      	beq.n	8000402 <DrawHourglass+0x1ce>
 80003b2:	4b46      	ldr	r3, [pc, #280]	@ (80004cc <DrawHourglass+0x298>)
 80003b4:	785b      	ldrb	r3, [r3, #1]
 80003b6:	001a      	movs	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d021      	beq.n	8000402 <DrawHourglass+0x1ce>
				if(i % 2 == 0 && flag == 1) ssd1306_DrawPixel(i, j, White);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	4013      	ands	r3, r2
 80003c4:	d10c      	bne.n	80003e0 <DrawHourglass+0x1ac>
 80003c6:	230f      	movs	r3, #15
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d107      	bne.n	80003e0 <DrawHourglass+0x1ac>
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	68ba      	ldr	r2, [r7, #8]
 80003d6:	b2d1      	uxtb	r1, r2
 80003d8:	2201      	movs	r2, #1
 80003da:	0018      	movs	r0, r3
 80003dc:	f000 fae6 	bl	80009ac <ssd1306_DrawPixel>
				if(i % 2 != 0 && flag == 0) ssd1306_DrawPixel(i, j, White);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2201      	movs	r2, #1
 80003e4:	4013      	ands	r3, r2
 80003e6:	d00c      	beq.n	8000402 <DrawHourglass+0x1ce>
 80003e8:	230f      	movs	r3, #15
 80003ea:	18fb      	adds	r3, r7, r3
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d107      	bne.n	8000402 <DrawHourglass+0x1ce>
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	68ba      	ldr	r2, [r7, #8]
 80003f8:	b2d1      	uxtb	r1, r2
 80003fa:	2201      	movs	r2, #1
 80003fc:	0018      	movs	r0, r3
 80003fe:	f000 fad5 	bl	80009ac <ssd1306_DrawPixel>
		for(int i = PixelControl.x_min; i < PixelControl.x_max; ++i){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	3301      	adds	r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	4b30      	ldr	r3, [pc, #192]	@ (80004cc <DrawHourglass+0x298>)
 800040a:	785b      	ldrb	r3, [r3, #1]
 800040c:	001a      	movs	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4293      	cmp	r3, r2
 8000412:	dbc8      	blt.n	80003a6 <DrawHourglass+0x172>
			}
		}

		flag = !flag;
 8000414:	210f      	movs	r1, #15
 8000416:	187b      	adds	r3, r7, r1
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	425a      	negs	r2, r3
 800041c:	4153      	adcs	r3, r2
 800041e:	b2da      	uxtb	r2, r3
 8000420:	187b      	adds	r3, r7, r1
 8000422:	701a      	strb	r2, [r3, #0]

		if(PixelControl.x_min == PixelControl.x_max) continue;
 8000424:	4b29      	ldr	r3, [pc, #164]	@ (80004cc <DrawHourglass+0x298>)
 8000426:	781a      	ldrb	r2, [r3, #0]
 8000428:	4b28      	ldr	r3, [pc, #160]	@ (80004cc <DrawHourglass+0x298>)
 800042a:	785b      	ldrb	r3, [r3, #1]
 800042c:	429a      	cmp	r2, r3
 800042e:	d00c      	beq.n	800044a <DrawHourglass+0x216>

		PixelControl.x_min++;
 8000430:	4b26      	ldr	r3, [pc, #152]	@ (80004cc <DrawHourglass+0x298>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	3301      	adds	r3, #1
 8000436:	b2da      	uxtb	r2, r3
 8000438:	4b24      	ldr	r3, [pc, #144]	@ (80004cc <DrawHourglass+0x298>)
 800043a:	701a      	strb	r2, [r3, #0]
		PixelControl.x_max--;
 800043c:	4b23      	ldr	r3, [pc, #140]	@ (80004cc <DrawHourglass+0x298>)
 800043e:	785b      	ldrb	r3, [r3, #1]
 8000440:	3b01      	subs	r3, #1
 8000442:	b2da      	uxtb	r2, r3
 8000444:	4b21      	ldr	r3, [pc, #132]	@ (80004cc <DrawHourglass+0x298>)
 8000446:	705a      	strb	r2, [r3, #1]
 8000448:	e000      	b.n	800044c <DrawHourglass+0x218>
		if(PixelControl.x_min == PixelControl.x_max) continue;
 800044a:	46c0      	nop			@ (mov r8, r8)
	for(int j = PixelControl.y; j <= 31; ++j){
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	3301      	adds	r3, #1
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	2b1f      	cmp	r3, #31
 8000456:	dda2      	ble.n	800039e <DrawHourglass+0x16a>
	}

	PixelControl.x_min = minimal_x;
 8000458:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <DrawHourglass+0x294>)
 800045a:	781a      	ldrb	r2, [r3, #0]
 800045c:	4b1b      	ldr	r3, [pc, #108]	@ (80004cc <DrawHourglass+0x298>)
 800045e:	701a      	strb	r2, [r3, #0]
	PixelControl.x_max = maximun_x;
 8000460:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <DrawHourglass+0x290>)
 8000462:	781a      	ldrb	r2, [r3, #0]
 8000464:	4b19      	ldr	r3, [pc, #100]	@ (80004cc <DrawHourglass+0x298>)
 8000466:	705a      	strb	r2, [r3, #1]

	// Draw reverse send

	// Pixel control
	counter++;
 8000468:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <DrawHourglass+0x274>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	3301      	adds	r3, #1
 800046e:	b2da      	uxtb	r2, r3
 8000470:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <DrawHourglass+0x274>)
 8000472:	701a      	strb	r2, [r3, #0]

	if(PixelControl.y >= 31){
 8000474:	4b15      	ldr	r3, [pc, #84]	@ (80004cc <DrawHourglass+0x298>)
 8000476:	791b      	ldrb	r3, [r3, #4]
 8000478:	2b1e      	cmp	r3, #30
 800047a:	d908      	bls.n	800048e <DrawHourglass+0x25a>
		PixelControl.y = Y;
 800047c:	4b13      	ldr	r3, [pc, #76]	@ (80004cc <DrawHourglass+0x298>)
 800047e:	2210      	movs	r2, #16
 8000480:	711a      	strb	r2, [r3, #4]
		minimal_x = MIN_X;
 8000482:	4b11      	ldr	r3, [pc, #68]	@ (80004c8 <DrawHourglass+0x294>)
 8000484:	2230      	movs	r2, #48	@ 0x30
 8000486:	701a      	strb	r2, [r3, #0]
		maximun_x = MAX_X;
 8000488:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <DrawHourglass+0x290>)
 800048a:	2250      	movs	r2, #80	@ 0x50
 800048c:	701a      	strb	r2, [r3, #0]
	}



	PixelControl.y++;
 800048e:	4b0f      	ldr	r3, [pc, #60]	@ (80004cc <DrawHourglass+0x298>)
 8000490:	791b      	ldrb	r3, [r3, #4]
 8000492:	3301      	adds	r3, #1
 8000494:	b2da      	uxtb	r2, r3
 8000496:	4b0d      	ldr	r3, [pc, #52]	@ (80004cc <DrawHourglass+0x298>)
 8000498:	711a      	strb	r2, [r3, #4]
	ssd1306_UpdateScreen();
 800049a:	f000 fa59 	bl	8000950 <ssd1306_UpdateScreen>
}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b004      	add	sp, #16
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	20000000 	.word	0x20000000
 80004ac:	08003c6c 	.word	0x08003c6c
 80004b0:	20000118 	.word	0x20000118
 80004b4:	08003c74 	.word	0x08003c74
 80004b8:	08003c7c 	.word	0x08003c7c
 80004bc:	08003c84 	.word	0x08003c84
 80004c0:	08004a00 	.word	0x08004a00
 80004c4:	20000112 	.word	0x20000112
 80004c8:	20000113 	.word	0x20000113
 80004cc:	2000010c 	.word	0x2000010c

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fd71 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f885 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f95b 	bl	8000798 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e2:	f000 f8ef 	bl	80006c4 <MX_I2C1_Init>
  MX_RTC_Init();
 80004e6:	f000 f92d 	bl	8000744 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80004ea:	f000 f9ab 	bl	8000844 <ssd1306_Init>
  PixelControl.x_max = MAX_X;
 80004ee:	4b33      	ldr	r3, [pc, #204]	@ (80005bc <main+0xec>)
 80004f0:	2250      	movs	r2, #80	@ 0x50
 80004f2:	705a      	strb	r2, [r3, #1]
  PixelControl.x_min = MIN_X;
 80004f4:	4b31      	ldr	r3, [pc, #196]	@ (80005bc <main+0xec>)
 80004f6:	2230      	movs	r2, #48	@ 0x30
 80004f8:	701a      	strb	r2, [r3, #0]
  PixelControl.reverse_x_max = MAX_X;
 80004fa:	4b30      	ldr	r3, [pc, #192]	@ (80005bc <main+0xec>)
 80004fc:	2250      	movs	r2, #80	@ 0x50
 80004fe:	70da      	strb	r2, [r3, #3]
  PixelControl.reverse_x_min = MIN_X;
 8000500:	4b2e      	ldr	r3, [pc, #184]	@ (80005bc <main+0xec>)
 8000502:	2230      	movs	r2, #48	@ 0x30
 8000504:	709a      	strb	r2, [r3, #2]

  PixelControl.y = Y + 2;
 8000506:	4b2d      	ldr	r3, [pc, #180]	@ (80005bc <main+0xec>)
 8000508:	2212      	movs	r2, #18
 800050a:	711a      	strb	r2, [r3, #4]
  PixelControl.reverse_y = 48;
 800050c:	4b2b      	ldr	r3, [pc, #172]	@ (80005bc <main+0xec>)
 800050e:	2230      	movs	r2, #48	@ 0x30
 8000510:	715a      	strb	r2, [r3, #5]

  minimal_x = MIN_X;
 8000512:	4b2b      	ldr	r3, [pc, #172]	@ (80005c0 <main+0xf0>)
 8000514:	2230      	movs	r2, #48	@ 0x30
 8000516:	701a      	strb	r2, [r3, #0]
  maximun_x = MAX_X;
 8000518:	4b2a      	ldr	r3, [pc, #168]	@ (80005c4 <main+0xf4>)
 800051a:	2250      	movs	r2, #80	@ 0x50
 800051c:	701a      	strb	r2, [r3, #0]

  reverse_min_x = MIN_X;
 800051e:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <main+0xf8>)
 8000520:	2230      	movs	r2, #48	@ 0x30
 8000522:	701a      	strb	r2, [r3, #0]
  reverse_max_x = MAX_X;
 8000524:	4b29      	ldr	r3, [pc, #164]	@ (80005cc <main+0xfc>)
 8000526:	2250      	movs	r2, #80	@ 0x50
 8000528:	701a      	strb	r2, [r3, #0]

  // Starting window
  ssd1306_Fill(Black);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 f9f6 	bl	800091c <ssd1306_Fill>
  ssd1306_SetCursor(32, 32);
 8000530:	2120      	movs	r1, #32
 8000532:	2020      	movs	r0, #32
 8000534:	f000 fb72 	bl	8000c1c <ssd1306_SetCursor>
  ssd1306_WriteString("SELETIVA", Font_7x10, White);
 8000538:	4b25      	ldr	r3, [pc, #148]	@ (80005d0 <main+0x100>)
 800053a:	4826      	ldr	r0, [pc, #152]	@ (80005d4 <main+0x104>)
 800053c:	2201      	movs	r2, #1
 800053e:	9200      	str	r2, [sp, #0]
 8000540:	6819      	ldr	r1, [r3, #0]
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	f000 fb3d 	bl	8000bc4 <ssd1306_WriteString>
  ssd1306_SetCursor(22, 45);
 800054a:	212d      	movs	r1, #45	@ 0x2d
 800054c:	2016      	movs	r0, #22
 800054e:	f000 fb65 	bl	8000c1c <ssd1306_SetCursor>
  ssd1306_WriteString("NACIONAL DF", Font_7x10, White);
 8000552:	4b1f      	ldr	r3, [pc, #124]	@ (80005d0 <main+0x100>)
 8000554:	4820      	ldr	r0, [pc, #128]	@ (80005d8 <main+0x108>)
 8000556:	2201      	movs	r2, #1
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	6819      	ldr	r1, [r3, #0]
 800055c:	685a      	ldr	r2, [r3, #4]
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	f000 fb30 	bl	8000bc4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000564:	f000 f9f4 	bl	8000950 <ssd1306_UpdateScreen>
  HAL_Delay(2000);
 8000568:	23fa      	movs	r3, #250	@ 0xfa
 800056a:	00db      	lsls	r3, r3, #3
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fd95 	bl	800109c <HAL_Delay>

  // Draw Hourglass

  AtualTime.Hours = 0;     // Exemplo de hora
 8000572:	4b1a      	ldr	r3, [pc, #104]	@ (80005dc <main+0x10c>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
  AtualTime.Minutes = 0;   // Exemplo de minuto
 8000578:	4b18      	ldr	r3, [pc, #96]	@ (80005dc <main+0x10c>)
 800057a:	2200      	movs	r2, #0
 800057c:	705a      	strb	r2, [r3, #1]
  AtualTime.Seconds = 0;    // Exemplo de segundo
 800057e:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <main+0x10c>)
 8000580:	2200      	movs	r2, #0
 8000582:	709a      	strb	r2, [r3, #2]

  HAL_RTC_SetTime(&hrtc, &AtualTime, RTC_FORMAT_BIN);
 8000584:	4915      	ldr	r1, [pc, #84]	@ (80005dc <main+0x10c>)
 8000586:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <main+0x110>)
 8000588:	2200      	movs	r2, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f002 fc96 	bl	8002ebc <HAL_RTC_SetTime>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  HAL_RTC_GetTime(&hrtc, &AtualTime, RTC_FORMAT_BIN);
 8000590:	4912      	ldr	r1, [pc, #72]	@ (80005dc <main+0x10c>)
 8000592:	4b13      	ldr	r3, [pc, #76]	@ (80005e0 <main+0x110>)
 8000594:	2200      	movs	r2, #0
 8000596:	0018      	movs	r0, r3
 8000598:	f002 fd3a 	bl	8003010 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 800059c:	4911      	ldr	r1, [pc, #68]	@ (80005e4 <main+0x114>)
 800059e:	4b10      	ldr	r3, [pc, #64]	@ (80005e0 <main+0x110>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	0018      	movs	r0, r3
 80005a4:	f002 fd92 	bl	80030cc <HAL_RTC_GetDate>
	  DrawHourglass();
 80005a8:	f7ff fe44 	bl	8000234 <DrawHourglass>
	  HAL_Delay(1000);
 80005ac:	23fa      	movs	r3, #250	@ 0xfa
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 fd73 	bl	800109c <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &AtualTime, RTC_FORMAT_BIN);
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	e7ea      	b.n	8000590 <main+0xc0>
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	2000010c 	.word	0x2000010c
 80005c0:	20000113 	.word	0x20000113
 80005c4:	20000112 	.word	0x20000112
 80005c8:	20000114 	.word	0x20000114
 80005cc:	20000115 	.word	0x20000115
 80005d0:	08004a0c 	.word	0x08004a0c
 80005d4:	08003c8c 	.word	0x08003c8c
 80005d8:	08003c98 	.word	0x08003c98
 80005dc:	200000f4 	.word	0x200000f4
 80005e0:	200000d0 	.word	0x200000d0
 80005e4:	20000108 	.word	0x20000108

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b09d      	sub	sp, #116	@ 0x74
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	2438      	movs	r4, #56	@ 0x38
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	0018      	movs	r0, r3
 80005f4:	2338      	movs	r3, #56	@ 0x38
 80005f6:	001a      	movs	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f002 fec1 	bl	8003380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fe:	2324      	movs	r3, #36	@ 0x24
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	0018      	movs	r0, r3
 8000604:	2314      	movs	r3, #20
 8000606:	001a      	movs	r2, r3
 8000608:	2100      	movs	r1, #0
 800060a:	f002 feb9 	bl	8003380 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800060e:	003b      	movs	r3, r7
 8000610:	0018      	movs	r0, r3
 8000612:	2324      	movs	r3, #36	@ 0x24
 8000614:	001a      	movs	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f002 feb2 	bl	8003380 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	4b27      	ldr	r3, [pc, #156]	@ (80006bc <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a27      	ldr	r2, [pc, #156]	@ (80006c0 <SystemClock_Config+0xd8>)
 8000622:	401a      	ands	r2, r3
 8000624:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <SystemClock_Config+0xd4>)
 8000626:	2180      	movs	r1, #128	@ 0x80
 8000628:	0109      	lsls	r1, r1, #4
 800062a:	430a      	orrs	r2, r1
 800062c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800062e:	0021      	movs	r1, r4
 8000630:	187b      	adds	r3, r7, r1
 8000632:	220a      	movs	r2, #10
 8000634:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2201      	movs	r2, #1
 800063a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2210      	movs	r2, #16
 8000640:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2200      	movs	r2, #0
 800064c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	187b      	adds	r3, r7, r1
 8000650:	0018      	movs	r0, r3
 8000652:	f001 fc77 	bl	8001f44 <HAL_RCC_OscConfig>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800065a:	f000 f8b3 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	2124      	movs	r1, #36	@ 0x24
 8000660:	187b      	adds	r3, r7, r1
 8000662:	220f      	movs	r2, #15
 8000664:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2201      	movs	r2, #1
 800066a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2280      	movs	r2, #128	@ 0x80
 8000670:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	187b      	adds	r3, r7, r1
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067e:	187b      	adds	r3, r7, r1
 8000680:	2100      	movs	r1, #0
 8000682:	0018      	movs	r0, r3
 8000684:	f002 f822 	bl	80026cc <HAL_RCC_ClockConfig>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800068c:	f000 f89a 	bl	80007c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8000690:	003b      	movs	r3, r7
 8000692:	2228      	movs	r2, #40	@ 0x28
 8000694:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000696:	003b      	movs	r3, r7
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800069c:	003b      	movs	r3, r7
 800069e:	2280      	movs	r2, #128	@ 0x80
 80006a0:	0292      	lsls	r2, r2, #10
 80006a2:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a4:	003b      	movs	r3, r7
 80006a6:	0018      	movs	r0, r3
 80006a8:	f002 f9de 	bl	8002a68 <HAL_RCCEx_PeriphCLKConfig>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80006b0:	f000 f888 	bl	80007c4 <Error_Handler>
  }
}
 80006b4:	46c0      	nop			@ (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b01d      	add	sp, #116	@ 0x74
 80006ba:	bd90      	pop	{r4, r7, pc}
 80006bc:	40007000 	.word	0x40007000
 80006c0:	ffffe7ff 	.word	0xffffe7ff

080006c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006ca:	4a1c      	ldr	r2, [pc, #112]	@ (800073c <MX_I2C1_Init+0x78>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000740 <MX_I2C1_Init+0x7c>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d4:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006da:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006dc:	2201      	movs	r2, #1
 80006de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b14      	ldr	r3, [pc, #80]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000738 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <MX_I2C1_Init+0x74>)
 8000700:	0018      	movs	r0, r3
 8000702:	f000 ff19 	bl	8001538 <HAL_I2C_Init>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800070a:	f000 f85b 	bl	80007c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <MX_I2C1_Init+0x74>)
 8000710:	2100      	movs	r1, #0
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fb7e 	bl	8001e14 <HAL_I2CEx_ConfigAnalogFilter>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800071c:	f000 f852 	bl	80007c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <MX_I2C1_Init+0x74>)
 8000722:	2100      	movs	r1, #0
 8000724:	0018      	movs	r0, r3
 8000726:	f001 fbc1 	bl	8001eac <HAL_I2CEx_ConfigDigitalFilter>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800072e:	f000 f849 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000007c 	.word	0x2000007c
 800073c:	40005400 	.word	0x40005400
 8000740:	00201d2b 	.word	0x00201d2b

08000744 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_RTC_Init+0x4c>)
 800074a:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <MX_RTC_Init+0x50>)
 800074c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <MX_RTC_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_RTC_Init+0x4c>)
 8000756:	227f      	movs	r2, #127	@ 0x7f
 8000758:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800075a:	4b0d      	ldr	r3, [pc, #52]	@ (8000790 <MX_RTC_Init+0x4c>)
 800075c:	22ff      	movs	r2, #255	@ 0xff
 800075e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000760:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_RTC_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <MX_RTC_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_RTC_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000772:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <MX_RTC_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000778:	4b05      	ldr	r3, [pc, #20]	@ (8000790 <MX_RTC_Init+0x4c>)
 800077a:	0018      	movs	r0, r3
 800077c:	f002 fb02 	bl	8002d84 <HAL_RTC_Init>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000784:	f000 f81e 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	200000d0 	.word	0x200000d0
 8000794:	40002800 	.word	0x40002800

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_GPIO_Init+0x28>)
 80007a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007a2:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <MX_GPIO_Init+0x28>)
 80007a4:	2102      	movs	r1, #2
 80007a6:	430a      	orrs	r2, r1
 80007a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007aa:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <MX_GPIO_Init+0x28>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ae:	2202      	movs	r2, #2
 80007b0:	4013      	ands	r3, r2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b002      	add	sp, #8
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	40021000 	.word	0x40021000

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	e7fd      	b.n	80007cc <Error_Handler+0x8>

080007d0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af04      	add	r7, sp, #16
 80007e2:	0002      	movs	r2, r0
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80007e8:	4808      	ldr	r0, [pc, #32]	@ (800080c <ssd1306_WriteCommand+0x30>)
 80007ea:	2301      	movs	r3, #1
 80007ec:	425b      	negs	r3, r3
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	2301      	movs	r3, #1
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2301      	movs	r3, #1
 80007fa:	2200      	movs	r2, #0
 80007fc:	2178      	movs	r1, #120	@ 0x78
 80007fe:	f000 ff41 	bl	8001684 <HAL_I2C_Mem_Write>
}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b002      	add	sp, #8
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	2000007c 	.word	0x2000007c

08000810 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af04      	add	r7, sp, #16
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b29b      	uxth	r3, r3
 800081e:	4808      	ldr	r0, [pc, #32]	@ (8000840 <ssd1306_WriteData+0x30>)
 8000820:	2201      	movs	r2, #1
 8000822:	4252      	negs	r2, r2
 8000824:	9202      	str	r2, [sp, #8]
 8000826:	9301      	str	r3, [sp, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2301      	movs	r3, #1
 800082e:	2240      	movs	r2, #64	@ 0x40
 8000830:	2178      	movs	r1, #120	@ 0x78
 8000832:	f000 ff27 	bl	8001684 <HAL_I2C_Mem_Write>
}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b002      	add	sp, #8
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	2000007c 	.word	0x2000007c

08000844 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000848:	f7ff ffc2 	bl	80007d0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800084c:	2064      	movs	r0, #100	@ 0x64
 800084e:	f000 fc25 	bl	800109c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fa9a 	bl	8000d8c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000858:	2020      	movs	r0, #32
 800085a:	f7ff ffbf 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800085e:	2000      	movs	r0, #0
 8000860:	f7ff ffbc 	bl	80007dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000864:	20b0      	movs	r0, #176	@ 0xb0
 8000866:	f7ff ffb9 	bl	80007dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800086a:	20c8      	movs	r0, #200	@ 0xc8
 800086c:	f7ff ffb6 	bl	80007dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff ffb3 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000876:	2010      	movs	r0, #16
 8000878:	f7ff ffb0 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800087c:	2040      	movs	r0, #64	@ 0x40
 800087e:	f7ff ffad 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000882:	20ff      	movs	r0, #255	@ 0xff
 8000884:	f000 fa6a 	bl	8000d5c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000888:	20a1      	movs	r0, #161	@ 0xa1
 800088a:	f7ff ffa7 	bl	80007dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800088e:	20a6      	movs	r0, #166	@ 0xa6
 8000890:	f7ff ffa4 	bl	80007dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000894:	20a8      	movs	r0, #168	@ 0xa8
 8000896:	f7ff ffa1 	bl	80007dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800089a:	203f      	movs	r0, #63	@ 0x3f
 800089c:	f7ff ff9e 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008a0:	20a4      	movs	r0, #164	@ 0xa4
 80008a2:	f7ff ff9b 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80008a6:	20d3      	movs	r0, #211	@ 0xd3
 80008a8:	f7ff ff98 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff ff95 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80008b2:	20d5      	movs	r0, #213	@ 0xd5
 80008b4:	f7ff ff92 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80008b8:	20f0      	movs	r0, #240	@ 0xf0
 80008ba:	f7ff ff8f 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80008be:	20d9      	movs	r0, #217	@ 0xd9
 80008c0:	f7ff ff8c 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80008c4:	2022      	movs	r0, #34	@ 0x22
 80008c6:	f7ff ff89 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80008ca:	20da      	movs	r0, #218	@ 0xda
 80008cc:	f7ff ff86 	bl	80007dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80008d0:	2012      	movs	r0, #18
 80008d2:	f7ff ff83 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80008d6:	20db      	movs	r0, #219	@ 0xdb
 80008d8:	f7ff ff80 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80008dc:	2020      	movs	r0, #32
 80008de:	f7ff ff7d 	bl	80007dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80008e2:	208d      	movs	r0, #141	@ 0x8d
 80008e4:	f7ff ff7a 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80008e8:	2014      	movs	r0, #20
 80008ea:	f7ff ff77 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80008ee:	2001      	movs	r0, #1
 80008f0:	f000 fa4c 	bl	8000d8c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 f811 	bl	800091c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80008fa:	f000 f829 	bl	8000950 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <ssd1306_Init+0xd4>)
 8000900:	2200      	movs	r2, #0
 8000902:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000904:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <ssd1306_Init+0xd4>)
 8000906:	2200      	movs	r2, #0
 8000908:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800090a:	4b03      	ldr	r3, [pc, #12]	@ (8000918 <ssd1306_Init+0xd4>)
 800090c:	2201      	movs	r2, #1
 800090e:	711a      	strb	r2, [r3, #4]
}
 8000910:	46c0      	nop			@ (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	20000524 	.word	0x20000524

0800091c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	0002      	movs	r2, r0
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d101      	bne.n	8000934 <ssd1306_Fill+0x18>
 8000930:	2300      	movs	r3, #0
 8000932:	e000      	b.n	8000936 <ssd1306_Fill+0x1a>
 8000934:	23ff      	movs	r3, #255	@ 0xff
 8000936:	2280      	movs	r2, #128	@ 0x80
 8000938:	00d2      	lsls	r2, r2, #3
 800093a:	4804      	ldr	r0, [pc, #16]	@ (800094c <ssd1306_Fill+0x30>)
 800093c:	0019      	movs	r1, r3
 800093e:	f002 fd1f 	bl	8003380 <memset>
}
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	20000124 	.word	0x20000124

08000950 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
 800095c:	e01a      	b.n	8000994 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	3b50      	subs	r3, #80	@ 0x50
 8000964:	b2db      	uxtb	r3, r3
 8000966:	0018      	movs	r0, r3
 8000968:	f7ff ff38 	bl	80007dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff ff35 	bl	80007dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000972:	2010      	movs	r0, #16
 8000974:	f7ff ff32 	bl	80007dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	01da      	lsls	r2, r3, #7
 800097e:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <ssd1306_UpdateScreen+0x58>)
 8000980:	18d3      	adds	r3, r2, r3
 8000982:	2180      	movs	r1, #128	@ 0x80
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff ff43 	bl	8000810 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	3201      	adds	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b07      	cmp	r3, #7
 800099a:	d9e0      	bls.n	800095e <ssd1306_UpdateScreen+0xe>
    }
}
 800099c:	46c0      	nop			@ (mov r8, r8)
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	20000124 	.word	0x20000124

080009ac <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	0004      	movs	r4, r0
 80009b4:	0008      	movs	r0, r1
 80009b6:	0011      	movs	r1, r2
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	1c22      	adds	r2, r4, #0
 80009bc:	701a      	strb	r2, [r3, #0]
 80009be:	1dbb      	adds	r3, r7, #6
 80009c0:	1c02      	adds	r2, r0, #0
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	1d7b      	adds	r3, r7, #5
 80009c6:	1c0a      	adds	r2, r1, #0
 80009c8:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db47      	blt.n	8000a64 <ssd1306_DrawPixel+0xb8>
 80009d4:	1dbb      	adds	r3, r7, #6
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80009da:	d843      	bhi.n	8000a64 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80009dc:	1d7b      	adds	r3, r7, #5
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d11e      	bne.n	8000a22 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	1dbb      	adds	r3, r7, #6
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	08db      	lsrs	r3, r3, #3
 80009ee:	b2d8      	uxtb	r0, r3
 80009f0:	0003      	movs	r3, r0
 80009f2:	01db      	lsls	r3, r3, #7
 80009f4:	18d3      	adds	r3, r2, r3
 80009f6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a6c <ssd1306_DrawPixel+0xc0>)
 80009f8:	5cd3      	ldrb	r3, [r2, r3]
 80009fa:	b25a      	sxtb	r2, r3
 80009fc:	1dbb      	adds	r3, r7, #6
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2107      	movs	r1, #7
 8000a02:	400b      	ands	r3, r1
 8000a04:	2101      	movs	r1, #1
 8000a06:	4099      	lsls	r1, r3
 8000a08:	000b      	movs	r3, r1
 8000a0a:	b25b      	sxtb	r3, r3
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b259      	sxtb	r1, r3
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781a      	ldrb	r2, [r3, #0]
 8000a14:	0003      	movs	r3, r0
 8000a16:	01db      	lsls	r3, r3, #7
 8000a18:	18d3      	adds	r3, r2, r3
 8000a1a:	b2c9      	uxtb	r1, r1
 8000a1c:	4a13      	ldr	r2, [pc, #76]	@ (8000a6c <ssd1306_DrawPixel+0xc0>)
 8000a1e:	54d1      	strb	r1, [r2, r3]
 8000a20:	e021      	b.n	8000a66 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781a      	ldrb	r2, [r3, #0]
 8000a26:	1dbb      	adds	r3, r7, #6
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	08db      	lsrs	r3, r3, #3
 8000a2c:	b2d8      	uxtb	r0, r3
 8000a2e:	0003      	movs	r3, r0
 8000a30:	01db      	lsls	r3, r3, #7
 8000a32:	18d3      	adds	r3, r2, r3
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <ssd1306_DrawPixel+0xc0>)
 8000a36:	5cd3      	ldrb	r3, [r2, r3]
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	1dba      	adds	r2, r7, #6
 8000a3c:	7812      	ldrb	r2, [r2, #0]
 8000a3e:	2107      	movs	r1, #7
 8000a40:	400a      	ands	r2, r1
 8000a42:	2101      	movs	r1, #1
 8000a44:	4091      	lsls	r1, r2
 8000a46:	000a      	movs	r2, r1
 8000a48:	b252      	sxtb	r2, r2
 8000a4a:	43d2      	mvns	r2, r2
 8000a4c:	b252      	sxtb	r2, r2
 8000a4e:	4013      	ands	r3, r2
 8000a50:	b259      	sxtb	r1, r3
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	0003      	movs	r3, r0
 8000a58:	01db      	lsls	r3, r3, #7
 8000a5a:	18d3      	adds	r3, r2, r3
 8000a5c:	b2c9      	uxtb	r1, r1
 8000a5e:	4a03      	ldr	r2, [pc, #12]	@ (8000a6c <ssd1306_DrawPixel+0xc0>)
 8000a60:	54d1      	strb	r1, [r2, r3]
 8000a62:	e000      	b.n	8000a66 <ssd1306_DrawPixel+0xba>
        return;
 8000a64:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b003      	add	sp, #12
 8000a6a:	bd90      	pop	{r4, r7, pc}
 8000a6c:	20000124 	.word	0x20000124

08000a70 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b089      	sub	sp, #36	@ 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	0004      	movs	r4, r0
 8000a78:	0038      	movs	r0, r7
 8000a7a:	6001      	str	r1, [r0, #0]
 8000a7c:	6042      	str	r2, [r0, #4]
 8000a7e:	6083      	str	r3, [r0, #8]
 8000a80:	210f      	movs	r1, #15
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	1c22      	adds	r2, r4, #0
 8000a86:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000a88:	000a      	movs	r2, r1
 8000a8a:	18bb      	adds	r3, r7, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b1f      	cmp	r3, #31
 8000a90:	d903      	bls.n	8000a9a <ssd1306_WriteChar+0x2a>
 8000a92:	18bb      	adds	r3, r7, r2
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b7e      	cmp	r3, #126	@ 0x7e
 8000a98:	d901      	bls.n	8000a9e <ssd1306_WriteChar+0x2e>
        return 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e08b      	b.n	8000bb6 <ssd1306_WriteChar+0x146>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d008      	beq.n	8000ab8 <ssd1306_WriteChar+0x48>
 8000aa6:	003b      	movs	r3, r7
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	230f      	movs	r3, #15
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	3b20      	subs	r3, #32
 8000ab2:	18d3      	adds	r3, r2, r3
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	e001      	b.n	8000abc <ssd1306_WriteChar+0x4c>
 8000ab8:	003b      	movs	r3, r7
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2117      	movs	r1, #23
 8000abe:	187a      	adds	r2, r7, r1
 8000ac0:	7013      	strb	r3, [r2, #0]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000ac2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bc0 <ssd1306_WriteChar+0x150>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	18d3      	adds	r3, r2, r3
 8000ace:	2b80      	cmp	r3, #128	@ 0x80
 8000ad0:	dc07      	bgt.n	8000ae2 <ssd1306_WriteChar+0x72>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8000ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8000bc0 <ssd1306_WriteChar+0x150>)
 8000ad4:	885b      	ldrh	r3, [r3, #2]
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	003b      	movs	r3, r7
 8000ada:	785b      	ldrb	r3, [r3, #1]
 8000adc:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8000ade:	2b40      	cmp	r3, #64	@ 0x40
 8000ae0:	dd01      	ble.n	8000ae6 <ssd1306_WriteChar+0x76>
    {
        // Not enough space on current line
        return 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e067      	b.n	8000bb6 <ssd1306_WriteChar+0x146>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
 8000aea:	e051      	b.n	8000b90 <ssd1306_WriteChar+0x120>
        b = Font.data[(ch - 32) * Font.height + i];
 8000aec:	003b      	movs	r3, r7
 8000aee:	685a      	ldr	r2, [r3, #4]
 8000af0:	230f      	movs	r3, #15
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	3b20      	subs	r3, #32
 8000af8:	0039      	movs	r1, r7
 8000afa:	7849      	ldrb	r1, [r1, #1]
 8000afc:	434b      	muls	r3, r1
 8000afe:	0019      	movs	r1, r3
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	18cb      	adds	r3, r1, r3
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	18d3      	adds	r3, r2, r3
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	e035      	b.n	8000b7e <ssd1306_WriteChar+0x10e>
            if((b << j) & 0x8000)  {
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	409a      	lsls	r2, r3
 8000b18:	2380      	movs	r3, #128	@ 0x80
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	d014      	beq.n	8000b4a <ssd1306_WriteChar+0xda>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b20:	4b27      	ldr	r3, [pc, #156]	@ (8000bc0 <ssd1306_WriteChar+0x150>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	18d3      	adds	r3, r2, r3
 8000b2c:	b2d8      	uxtb	r0, r3
 8000b2e:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <ssd1306_WriteChar+0x150>)
 8000b30:	885b      	ldrh	r3, [r3, #2]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	18d3      	adds	r3, r2, r3
 8000b3a:	b2d9      	uxtb	r1, r3
 8000b3c:	2330      	movs	r3, #48	@ 0x30
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	001a      	movs	r2, r3
 8000b44:	f7ff ff32 	bl	80009ac <ssd1306_DrawPixel>
 8000b48:	e016      	b.n	8000b78 <ssd1306_WriteChar+0x108>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc0 <ssd1306_WriteChar+0x150>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	18d3      	adds	r3, r2, r3
 8000b56:	b2d8      	uxtb	r0, r3
 8000b58:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <ssd1306_WriteChar+0x150>)
 8000b5a:	885b      	ldrh	r3, [r3, #2]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	18d3      	adds	r3, r2, r3
 8000b64:	b2d9      	uxtb	r1, r3
 8000b66:	2330      	movs	r3, #48	@ 0x30
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	425a      	negs	r2, r3
 8000b6e:	4153      	adcs	r3, r2
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	001a      	movs	r2, r3
 8000b74:	f7ff ff1a 	bl	80009ac <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	2317      	movs	r3, #23
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d3c3      	bcc.n	8000b12 <ssd1306_WriteChar+0xa2>
    for(i = 0; i < Font.height; i++) {
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61fb      	str	r3, [r7, #28]
 8000b90:	003b      	movs	r3, r7
 8000b92:	785b      	ldrb	r3, [r3, #1]
 8000b94:	001a      	movs	r2, r3
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d3a7      	bcc.n	8000aec <ssd1306_WriteChar+0x7c>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8000b9c:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <ssd1306_WriteChar+0x150>)
 8000b9e:	881a      	ldrh	r2, [r3, #0]
 8000ba0:	2317      	movs	r3, #23
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <ssd1306_WriteChar+0x150>)
 8000bae:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	781b      	ldrb	r3, [r3, #0]
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b009      	add	sp, #36	@ 0x24
 8000bbc:	bd90      	pop	{r4, r7, pc}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	20000524 	.word	0x20000524

08000bc4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af02      	add	r7, sp, #8
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	0038      	movs	r0, r7
 8000bce:	6001      	str	r1, [r0, #0]
 8000bd0:	6042      	str	r2, [r0, #4]
 8000bd2:	6083      	str	r3, [r0, #8]
    while (*str) {
 8000bd4:	e017      	b.n	8000c06 <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	7818      	ldrb	r0, [r3, #0]
 8000bda:	003b      	movs	r3, r7
 8000bdc:	2218      	movs	r2, #24
 8000bde:	18ba      	adds	r2, r7, r2
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	9200      	str	r2, [sp, #0]
 8000be4:	6819      	ldr	r1, [r3, #0]
 8000be6:	685a      	ldr	r2, [r3, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	f7ff ff41 	bl	8000a70 <ssd1306_WriteChar>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d002      	beq.n	8000c00 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	e008      	b.n	8000c12 <ssd1306_WriteString+0x4e>
        }
        str++;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3301      	adds	r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1e3      	bne.n	8000bd6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	781b      	ldrb	r3, [r3, #0]
}
 8000c12:	0018      	movs	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b004      	add	sp, #16
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	0002      	movs	r2, r0
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	1dbb      	adds	r3, r7, #6
 8000c2a:	1c0a      	adds	r2, r1, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <ssd1306_SetCursor+0x30>)
 8000c36:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000c38:	1dbb      	adds	r3, r7, #6
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b03      	ldr	r3, [pc, #12]	@ (8000c4c <ssd1306_SetCursor+0x30>)
 8000c40:	805a      	strh	r2, [r3, #2]
}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			@ (mov r8, r8)
 8000c4c:	20000524 	.word	0x20000524

08000c50 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000c50:	b5b0      	push	{r4, r5, r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	0005      	movs	r5, r0
 8000c58:	000c      	movs	r4, r1
 8000c5a:	0010      	movs	r0, r2
 8000c5c:	0019      	movs	r1, r3
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	1c2a      	adds	r2, r5, #0
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	1c22      	adds	r2, r4, #0
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	1d7b      	adds	r3, r7, #5
 8000c6c:	1c02      	adds	r2, r0, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	1c0a      	adds	r2, r1, #0
 8000c74:	701a      	strb	r2, [r3, #0]
    int32_t deltaX = abs(x2 - x1);
 8000c76:	1d7b      	adds	r3, r7, #5
 8000c78:	781a      	ldrb	r2, [r3, #0]
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	17da      	asrs	r2, r3, #31
 8000c82:	189b      	adds	r3, r3, r2
 8000c84:	4053      	eors	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	781a      	ldrb	r2, [r3, #0]
 8000c8c:	1dbb      	adds	r3, r7, #6
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	17da      	asrs	r2, r3, #31
 8000c94:	189b      	adds	r3, r3, r2
 8000c96:	4053      	eors	r3, r2
 8000c98:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8000c9a:	1dfa      	adds	r2, r7, #7
 8000c9c:	1d7b      	adds	r3, r7, #5
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d201      	bcs.n	8000caa <ssd1306_Line+0x5a>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e001      	b.n	8000cae <ssd1306_Line+0x5e>
 8000caa:	2301      	movs	r3, #1
 8000cac:	425b      	negs	r3, r3
 8000cae:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8000cb0:	1dba      	adds	r2, r7, #6
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	7812      	ldrb	r2, [r2, #0]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d201      	bcs.n	8000cc0 <ssd1306_Line+0x70>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e001      	b.n	8000cc4 <ssd1306_Line+0x74>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8000cce:	2330      	movs	r3, #48	@ 0x30
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	7819      	ldrb	r1, [r3, #0]
 8000cd8:	1d7b      	adds	r3, r7, #5
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff fe65 	bl	80009ac <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8000ce2:	e02b      	b.n	8000d3c <ssd1306_Line+0xec>
        ssd1306_DrawPixel(x1, y1, color);
 8000ce4:	2330      	movs	r3, #48	@ 0x30
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	1dbb      	adds	r3, r7, #6
 8000cec:	7819      	ldrb	r1, [r3, #0]
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fe5a 	bl	80009ac <ssd1306_DrawPixel>
        error2 = error * 2;
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	425b      	negs	r3, r3
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dd0a      	ble.n	8000d1e <ssd1306_Line+0xce>
            error -= deltaY;
 8000d08:	69fa      	ldr	r2, [r7, #28]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	b2d9      	uxtb	r1, r3
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	1dfa      	adds	r2, r7, #7
 8000d18:	7812      	ldrb	r2, [r2, #0]
 8000d1a:	188a      	adds	r2, r1, r2
 8000d1c:	701a      	strb	r2, [r3, #0]
        }
        
        if(error2 < deltaX) {
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	da0a      	bge.n	8000d3c <ssd1306_Line+0xec>
            error += deltaX;
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	18d3      	adds	r3, r2, r3
 8000d2c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	b2d9      	uxtb	r1, r3
 8000d32:	1dbb      	adds	r3, r7, #6
 8000d34:	1dba      	adds	r2, r7, #6
 8000d36:	7812      	ldrb	r2, [r2, #0]
 8000d38:	188a      	adds	r2, r1, r2
 8000d3a:	701a      	strb	r2, [r3, #0]
    while((x1 != x2) || (y1 != y2)) {
 8000d3c:	1dfa      	adds	r2, r7, #7
 8000d3e:	1d7b      	adds	r3, r7, #5
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d1cd      	bne.n	8000ce4 <ssd1306_Line+0x94>
 8000d48:	1dba      	adds	r2, r7, #6
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d1c7      	bne.n	8000ce4 <ssd1306_Line+0x94>
        }
    }
    return;
 8000d54:	46c0      	nop			@ (mov r8, r8)
}
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b008      	add	sp, #32
 8000d5a:	bdb0      	pop	{r4, r5, r7, pc}

08000d5c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	0002      	movs	r2, r0
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000d68:	210f      	movs	r1, #15
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2281      	movs	r2, #129	@ 0x81
 8000d6e:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fd31 	bl	80007dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff fd2c 	bl	80007dc <ssd1306_WriteCommand>
}
 8000d84:	46c0      	nop			@ (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b004      	add	sp, #16
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	0002      	movs	r2, r0
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d007      	beq.n	8000db0 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8000da0:	230f      	movs	r3, #15
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	22af      	movs	r2, #175	@ 0xaf
 8000da6:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8000da8:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <ssd1306_SetDisplayOn+0x48>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	715a      	strb	r2, [r3, #5]
 8000dae:	e006      	b.n	8000dbe <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	22ae      	movs	r2, #174	@ 0xae
 8000db6:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <ssd1306_SetDisplayOn+0x48>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff fd09 	bl	80007dc <ssd1306_WriteCommand>
}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b004      	add	sp, #16
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	20000524 	.word	0x20000524

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ddc:	4b07      	ldr	r3, [pc, #28]	@ (8000dfc <HAL_MspInit+0x24>)
 8000dde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <HAL_MspInit+0x24>)
 8000de2:	2101      	movs	r1, #1
 8000de4:	430a      	orrs	r2, r1
 8000de6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <HAL_MspInit+0x24>)
 8000dea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000dec:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <HAL_MspInit+0x24>)
 8000dee:	2180      	movs	r1, #128	@ 0x80
 8000df0:	0549      	lsls	r1, r1, #21
 8000df2:	430a      	orrs	r2, r1
 8000df4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b089      	sub	sp, #36	@ 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	240c      	movs	r4, #12
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	2314      	movs	r3, #20
 8000e10:	001a      	movs	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	f002 fab4 	bl	8003380 <memset>
  if(hi2c->Instance==I2C1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a18      	ldr	r2, [pc, #96]	@ (8000e80 <HAL_I2C_MspInit+0x80>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d129      	bne.n	8000e76 <HAL_I2C_MspInit+0x76>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <HAL_I2C_MspInit+0x84>)
 8000e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e26:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <HAL_I2C_MspInit+0x84>)
 8000e28:	2102      	movs	r1, #2
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <HAL_I2C_MspInit+0x84>)
 8000e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e32:	2202      	movs	r2, #2
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	22c0      	movs	r2, #192	@ 0xc0
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e42:	0021      	movs	r1, r4
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2212      	movs	r2, #18
 8000e48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2203      	movs	r2, #3
 8000e54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2204      	movs	r2, #4
 8000e5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e88 <HAL_I2C_MspInit+0x88>)
 8000e60:	0019      	movs	r1, r3
 8000e62:	0010      	movs	r0, r2
 8000e64:	f000 f9f2 	bl	800124c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_I2C_MspInit+0x84>)
 8000e6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e6c:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <HAL_I2C_MspInit+0x84>)
 8000e6e:	2180      	movs	r1, #128	@ 0x80
 8000e70:	0389      	lsls	r1, r1, #14
 8000e72:	430a      	orrs	r2, r1
 8000e74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b009      	add	sp, #36	@ 0x24
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	40005400 	.word	0x40005400
 8000e84:	40021000 	.word	0x40021000
 8000e88:	50000400 	.word	0x50000400

08000e8c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a06      	ldr	r2, [pc, #24]	@ (8000eb4 <HAL_RTC_MspInit+0x28>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d106      	bne.n	8000eac <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_RTC_MspInit+0x2c>)
 8000ea0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <HAL_RTC_MspInit+0x2c>)
 8000ea4:	2180      	movs	r1, #128	@ 0x80
 8000ea6:	02c9      	lsls	r1, r1, #11
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40002800 	.word	0x40002800
 8000eb8:	40021000 	.word	0x40021000

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	46c0      	nop			@ (mov r8, r8)
 8000ec2:	e7fd      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec8:	46c0      	nop			@ (mov r8, r8)
 8000eca:	e7fd      	b.n	8000ec8 <HardFault_Handler+0x4>

08000ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ed0:	46c0      	nop			@ (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee4:	f000 f8be 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee8:	46c0      	nop			@ (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef8:	4a14      	ldr	r2, [pc, #80]	@ (8000f4c <_sbrk+0x5c>)
 8000efa:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <_sbrk+0x60>)
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <_sbrk+0x64>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	@ (8000f58 <_sbrk+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	18d3      	adds	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d207      	bcs.n	8000f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f20:	f002 fa36 	bl	8003390 <__errno>
 8000f24:	0003      	movs	r3, r0
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	425b      	negs	r3, r3
 8000f2e:	e009      	b.n	8000f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	18d2      	adds	r2, r2, r3
 8000f3e:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <_sbrk+0x64>)
 8000f40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b006      	add	sp, #24
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20002000 	.word	0x20002000
 8000f50:	00000400 	.word	0x00000400
 8000f54:	2000052c 	.word	0x2000052c
 8000f58:	20000680 	.word	0x20000680

08000f5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000f68:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f6c:	f7ff fff6 	bl	8000f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	@ (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f002 fa01 	bl	800339c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fa99 	bl	80004d0 <main>

08000f9e <LoopForever>:

LoopForever:
    b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   r0, =_estack
 8000fa0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000fac:	08004a6c 	.word	0x08004a6c
  ldr r2, =_sbss
 8000fb0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000fb4:	2000067c 	.word	0x2000067c

08000fb8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_COMP_IRQHandler>
	...

08000fbc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <HAL_Init+0x3c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_Init+0x3c>)
 8000fce:	2140      	movs	r1, #64	@ 0x40
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f000 f811 	bl	8000ffc <HAL_InitTick>
 8000fda:	1e03      	subs	r3, r0, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	e001      	b.n	8000fea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fe6:	f7ff fef7 	bl	8000dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
}
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	40022000 	.word	0x40022000

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <HAL_InitTick+0x5c>)
 8001006:	681c      	ldr	r4, [r3, #0]
 8001008:	4b14      	ldr	r3, [pc, #80]	@ (800105c <HAL_InitTick+0x60>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	0019      	movs	r1, r3
 800100e:	23fa      	movs	r3, #250	@ 0xfa
 8001010:	0098      	lsls	r0, r3, #2
 8001012:	f7ff f883 	bl	800011c <__udivsi3>
 8001016:	0003      	movs	r3, r0
 8001018:	0019      	movs	r1, r3
 800101a:	0020      	movs	r0, r4
 800101c:	f7ff f87e 	bl	800011c <__udivsi3>
 8001020:	0003      	movs	r3, r0
 8001022:	0018      	movs	r0, r3
 8001024:	f000 f905 	bl	8001232 <HAL_SYSTICK_Config>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d001      	beq.n	8001030 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e00f      	b.n	8001050 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b03      	cmp	r3, #3
 8001034:	d80b      	bhi.n	800104e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	2301      	movs	r3, #1
 800103a:	425b      	negs	r3, r3
 800103c:	2200      	movs	r2, #0
 800103e:	0018      	movs	r0, r3
 8001040:	f000 f8e2 	bl	8001208 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_InitTick+0x64>)
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	b003      	add	sp, #12
 8001056:	bd90      	pop	{r4, r7, pc}
 8001058:	20000004 	.word	0x20000004
 800105c:	2000000c 	.word	0x2000000c
 8001060:	20000008 	.word	0x20000008

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <HAL_IncTick+0x1c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	001a      	movs	r2, r3
 800106e:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <HAL_IncTick+0x20>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	18d2      	adds	r2, r2, r3
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <HAL_IncTick+0x20>)
 8001076:	601a      	str	r2, [r3, #0]
}
 8001078:	46c0      	nop			@ (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	2000000c 	.word	0x2000000c
 8001084:	20000530 	.word	0x20000530

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b02      	ldr	r3, [pc, #8]	@ (8001098 <HAL_GetTick+0x10>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	0018      	movs	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	20000530 	.word	0x20000530

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff fff0 	bl	8001088 <HAL_GetTick>
 80010a8:	0003      	movs	r3, r0
 80010aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3301      	adds	r3, #1
 80010b4:	d005      	beq.n	80010c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b6:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <HAL_Delay+0x44>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	001a      	movs	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	189b      	adds	r3, r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	f7ff ffe0 	bl	8001088 <HAL_GetTick>
 80010c8:	0002      	movs	r2, r0
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f7      	bhi.n	80010c4 <HAL_Delay+0x28>
  {
  }
}
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	46bd      	mov	sp, r7
 80010da:	b004      	add	sp, #16
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	46c0      	nop			@ (mov r8, r8)
 80010e0:	2000000c 	.word	0x2000000c

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	0002      	movs	r2, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80010f8:	d828      	bhi.n	800114c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010fa:	4a2f      	ldr	r2, [pc, #188]	@ (80011b8 <__NVIC_SetPriority+0xd4>)
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b25b      	sxtb	r3, r3
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	33c0      	adds	r3, #192	@ 0xc0
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	589b      	ldr	r3, [r3, r2]
 800110a:	1dfa      	adds	r2, r7, #7
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	0011      	movs	r1, r2
 8001110:	2203      	movs	r2, #3
 8001112:	400a      	ands	r2, r1
 8001114:	00d2      	lsls	r2, r2, #3
 8001116:	21ff      	movs	r1, #255	@ 0xff
 8001118:	4091      	lsls	r1, r2
 800111a:	000a      	movs	r2, r1
 800111c:	43d2      	mvns	r2, r2
 800111e:	401a      	ands	r2, r3
 8001120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	019b      	lsls	r3, r3, #6
 8001126:	22ff      	movs	r2, #255	@ 0xff
 8001128:	401a      	ands	r2, r3
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	0018      	movs	r0, r3
 8001130:	2303      	movs	r3, #3
 8001132:	4003      	ands	r3, r0
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001138:	481f      	ldr	r0, [pc, #124]	@ (80011b8 <__NVIC_SetPriority+0xd4>)
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b25b      	sxtb	r3, r3
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	430a      	orrs	r2, r1
 8001144:	33c0      	adds	r3, #192	@ 0xc0
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800114a:	e031      	b.n	80011b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800114c:	4a1b      	ldr	r2, [pc, #108]	@ (80011bc <__NVIC_SetPriority+0xd8>)
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	0019      	movs	r1, r3
 8001154:	230f      	movs	r3, #15
 8001156:	400b      	ands	r3, r1
 8001158:	3b08      	subs	r3, #8
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3306      	adds	r3, #6
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	18d3      	adds	r3, r2, r3
 8001162:	3304      	adds	r3, #4
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	1dfa      	adds	r2, r7, #7
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	0011      	movs	r1, r2
 800116c:	2203      	movs	r2, #3
 800116e:	400a      	ands	r2, r1
 8001170:	00d2      	lsls	r2, r2, #3
 8001172:	21ff      	movs	r1, #255	@ 0xff
 8001174:	4091      	lsls	r1, r2
 8001176:	000a      	movs	r2, r1
 8001178:	43d2      	mvns	r2, r2
 800117a:	401a      	ands	r2, r3
 800117c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	019b      	lsls	r3, r3, #6
 8001182:	22ff      	movs	r2, #255	@ 0xff
 8001184:	401a      	ands	r2, r3
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	0018      	movs	r0, r3
 800118c:	2303      	movs	r3, #3
 800118e:	4003      	ands	r3, r0
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001194:	4809      	ldr	r0, [pc, #36]	@ (80011bc <__NVIC_SetPriority+0xd8>)
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	001c      	movs	r4, r3
 800119c:	230f      	movs	r3, #15
 800119e:	4023      	ands	r3, r4
 80011a0:	3b08      	subs	r3, #8
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	430a      	orrs	r2, r1
 80011a6:	3306      	adds	r3, #6
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	18c3      	adds	r3, r0, r3
 80011ac:	3304      	adds	r3, #4
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	46c0      	nop			@ (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b003      	add	sp, #12
 80011b6:	bd90      	pop	{r4, r7, pc}
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	1e5a      	subs	r2, r3, #1
 80011cc:	2380      	movs	r3, #128	@ 0x80
 80011ce:	045b      	lsls	r3, r3, #17
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d301      	bcc.n	80011d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d4:	2301      	movs	r3, #1
 80011d6:	e010      	b.n	80011fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <SysTick_Config+0x44>)
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	3a01      	subs	r2, #1
 80011de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e0:	2301      	movs	r3, #1
 80011e2:	425b      	negs	r3, r3
 80011e4:	2103      	movs	r1, #3
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff ff7c 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <SysTick_Config+0x44>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <SysTick_Config+0x44>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	210f      	movs	r1, #15
 8001214:	187b      	adds	r3, r7, r1
 8001216:	1c02      	adds	r2, r0, #0
 8001218:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	187b      	adds	r3, r7, r1
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b25b      	sxtb	r3, r3
 8001222:	0011      	movs	r1, r2
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff ff5d 	bl	80010e4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff ffbf 	bl	80011c0 <SysTick_Config>
 8001242:	0003      	movs	r3, r0
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001262:	e14f      	b.n	8001504 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2101      	movs	r1, #1
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4091      	lsls	r1, r2
 800126e:	000a      	movs	r2, r1
 8001270:	4013      	ands	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d100      	bne.n	800127c <HAL_GPIO_Init+0x30>
 800127a:	e140      	b.n	80014fe <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	2203      	movs	r2, #3
 8001282:	4013      	ands	r3, r2
 8001284:	2b01      	cmp	r3, #1
 8001286:	d005      	beq.n	8001294 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2203      	movs	r2, #3
 800128e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001290:	2b02      	cmp	r3, #2
 8001292:	d130      	bne.n	80012f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	409a      	lsls	r2, r3
 80012a2:	0013      	movs	r3, r2
 80012a4:	43da      	mvns	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	409a      	lsls	r2, r3
 80012b6:	0013      	movs	r3, r2
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ca:	2201      	movs	r2, #1
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	43da      	mvns	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	2201      	movs	r2, #1
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2203      	movs	r2, #3
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d017      	beq.n	8001332 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	43da      	mvns	r2, r3
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	409a      	lsls	r2, r3
 8001324:	0013      	movs	r3, r2
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2203      	movs	r2, #3
 8001338:	4013      	ands	r3, r2
 800133a:	2b02      	cmp	r3, #2
 800133c:	d123      	bne.n	8001386 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	58d3      	ldr	r3, [r2, r3]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	2207      	movs	r2, #7
 8001350:	4013      	ands	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	43da      	mvns	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2107      	movs	r1, #7
 800136a:	400b      	ands	r3, r1
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	409a      	lsls	r2, r3
 8001370:	0013      	movs	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	6939      	ldr	r1, [r7, #16]
 8001384:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2203      	movs	r2, #3
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	43da      	mvns	r2, r3
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2203      	movs	r2, #3
 80013a4:	401a      	ands	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	23c0      	movs	r3, #192	@ 0xc0
 80013c0:	029b      	lsls	r3, r3, #10
 80013c2:	4013      	ands	r3, r2
 80013c4:	d100      	bne.n	80013c8 <HAL_GPIO_Init+0x17c>
 80013c6:	e09a      	b.n	80014fe <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c8:	4b54      	ldr	r3, [pc, #336]	@ (800151c <HAL_GPIO_Init+0x2d0>)
 80013ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013cc:	4b53      	ldr	r3, [pc, #332]	@ (800151c <HAL_GPIO_Init+0x2d0>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	430a      	orrs	r2, r1
 80013d2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d4:	4a52      	ldr	r2, [pc, #328]	@ (8001520 <HAL_GPIO_Init+0x2d4>)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	589b      	ldr	r3, [r3, r2]
 80013e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2203      	movs	r2, #3
 80013e6:	4013      	ands	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	409a      	lsls	r2, r3
 80013ee:	0013      	movs	r3, r2
 80013f0:	43da      	mvns	r2, r3
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	23a0      	movs	r3, #160	@ 0xa0
 80013fc:	05db      	lsls	r3, r3, #23
 80013fe:	429a      	cmp	r2, r3
 8001400:	d019      	beq.n	8001436 <HAL_GPIO_Init+0x1ea>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a47      	ldr	r2, [pc, #284]	@ (8001524 <HAL_GPIO_Init+0x2d8>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x1e6>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a46      	ldr	r2, [pc, #280]	@ (8001528 <HAL_GPIO_Init+0x2dc>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x1e2>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a45      	ldr	r2, [pc, #276]	@ (800152c <HAL_GPIO_Init+0x2e0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x1de>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a44      	ldr	r2, [pc, #272]	@ (8001530 <HAL_GPIO_Init+0x2e4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x1da>
 8001422:	2305      	movs	r3, #5
 8001424:	e008      	b.n	8001438 <HAL_GPIO_Init+0x1ec>
 8001426:	2306      	movs	r3, #6
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x1ec>
 800142a:	2303      	movs	r3, #3
 800142c:	e004      	b.n	8001438 <HAL_GPIO_Init+0x1ec>
 800142e:	2302      	movs	r3, #2
 8001430:	e002      	b.n	8001438 <HAL_GPIO_Init+0x1ec>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x1ec>
 8001436:	2300      	movs	r3, #0
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	2103      	movs	r1, #3
 800143c:	400a      	ands	r2, r1
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	4093      	lsls	r3, r2
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001448:	4935      	ldr	r1, [pc, #212]	@ (8001520 <HAL_GPIO_Init+0x2d4>)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	3302      	adds	r3, #2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001456:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <HAL_GPIO_Init+0x2e8>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43da      	mvns	r2, r3
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	2380      	movs	r3, #128	@ 0x80
 800146c:	035b      	lsls	r3, r3, #13
 800146e:	4013      	ands	r3, r2
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800147a:	4b2e      	ldr	r3, [pc, #184]	@ (8001534 <HAL_GPIO_Init+0x2e8>)
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001480:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <HAL_GPIO_Init+0x2e8>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	43da      	mvns	r2, r3
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	039b      	lsls	r3, r3, #14
 8001498:	4013      	ands	r3, r2
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014a4:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <HAL_GPIO_Init+0x2e8>)
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80014aa:	4b22      	ldr	r3, [pc, #136]	@ (8001534 <HAL_GPIO_Init+0x2e8>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	43da      	mvns	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	2380      	movs	r3, #128	@ 0x80
 80014c0:	029b      	lsls	r3, r3, #10
 80014c2:	4013      	ands	r3, r2
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014ce:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <HAL_GPIO_Init+0x2e8>)
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d4:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <HAL_GPIO_Init+0x2e8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	43da      	mvns	r2, r3
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	2380      	movs	r3, #128	@ 0x80
 80014ea:	025b      	lsls	r3, r3, #9
 80014ec:	4013      	ands	r3, r2
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_GPIO_Init+0x2e8>)
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	40da      	lsrs	r2, r3
 800150c:	1e13      	subs	r3, r2, #0
 800150e:	d000      	beq.n	8001512 <HAL_GPIO_Init+0x2c6>
 8001510:	e6a8      	b.n	8001264 <HAL_GPIO_Init+0x18>
  }
}
 8001512:	46c0      	nop			@ (mov r8, r8)
 8001514:	46c0      	nop			@ (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	b006      	add	sp, #24
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	40010000 	.word	0x40010000
 8001524:	50000400 	.word	0x50000400
 8001528:	50000800 	.word	0x50000800
 800152c:	50000c00 	.word	0x50000c00
 8001530:	50001c00 	.word	0x50001c00
 8001534:	40010400 	.word	0x40010400

08001538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e08f      	b.n	800166a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2241      	movs	r2, #65	@ 0x41
 800154e:	5c9b      	ldrb	r3, [r3, r2]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d107      	bne.n	8001566 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2240      	movs	r2, #64	@ 0x40
 800155a:	2100      	movs	r1, #0
 800155c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff fc4d 	bl	8000e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2241      	movs	r2, #65	@ 0x41
 800156a:	2124      	movs	r1, #36	@ 0x24
 800156c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	438a      	bics	r2, r1
 800157c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	493b      	ldr	r1, [pc, #236]	@ (8001674 <HAL_I2C_Init+0x13c>)
 8001588:	400a      	ands	r2, r1
 800158a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4938      	ldr	r1, [pc, #224]	@ (8001678 <HAL_I2C_Init+0x140>)
 8001598:	400a      	ands	r2, r1
 800159a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d108      	bne.n	80015b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2180      	movs	r1, #128	@ 0x80
 80015ae:	0209      	lsls	r1, r1, #8
 80015b0:	430a      	orrs	r2, r1
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	e007      	b.n	80015c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2184      	movs	r1, #132	@ 0x84
 80015c0:	0209      	lsls	r1, r1, #8
 80015c2:	430a      	orrs	r2, r1
 80015c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d109      	bne.n	80015e2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2180      	movs	r1, #128	@ 0x80
 80015da:	0109      	lsls	r1, r1, #4
 80015dc:	430a      	orrs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	e007      	b.n	80015f2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4923      	ldr	r1, [pc, #140]	@ (800167c <HAL_I2C_Init+0x144>)
 80015ee:	400a      	ands	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4920      	ldr	r1, [pc, #128]	@ (8001680 <HAL_I2C_Init+0x148>)
 80015fe:	430a      	orrs	r2, r1
 8001600:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	491a      	ldr	r1, [pc, #104]	@ (8001678 <HAL_I2C_Init+0x140>)
 800160e:	400a      	ands	r2, r1
 8001610:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	431a      	orrs	r2, r3
 800161c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	69d9      	ldr	r1, [r3, #28]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1a      	ldr	r2, [r3, #32]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2101      	movs	r1, #1
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2241      	movs	r2, #65	@ 0x41
 8001656:	2120      	movs	r1, #32
 8001658:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2242      	movs	r2, #66	@ 0x42
 8001664:	2100      	movs	r1, #0
 8001666:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			@ (mov r8, r8)
 8001674:	f0ffffff 	.word	0xf0ffffff
 8001678:	ffff7fff 	.word	0xffff7fff
 800167c:	fffff7ff 	.word	0xfffff7ff
 8001680:	02008000 	.word	0x02008000

08001684 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b089      	sub	sp, #36	@ 0x24
 8001688:	af02      	add	r7, sp, #8
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	000c      	movs	r4, r1
 800168e:	0010      	movs	r0, r2
 8001690:	0019      	movs	r1, r3
 8001692:	230a      	movs	r3, #10
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	1c22      	adds	r2, r4, #0
 8001698:	801a      	strh	r2, [r3, #0]
 800169a:	2308      	movs	r3, #8
 800169c:	18fb      	adds	r3, r7, r3
 800169e:	1c02      	adds	r2, r0, #0
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	1dbb      	adds	r3, r7, #6
 80016a4:	1c0a      	adds	r2, r1, #0
 80016a6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2241      	movs	r2, #65	@ 0x41
 80016ac:	5c9b      	ldrb	r3, [r3, r2]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b20      	cmp	r3, #32
 80016b2:	d000      	beq.n	80016b6 <HAL_I2C_Mem_Write+0x32>
 80016b4:	e10c      	b.n	80018d0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80016b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d004      	beq.n	80016c6 <HAL_I2C_Mem_Write+0x42>
 80016bc:	232c      	movs	r3, #44	@ 0x2c
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d105      	bne.n	80016d2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2280      	movs	r2, #128	@ 0x80
 80016ca:	0092      	lsls	r2, r2, #2
 80016cc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0ff      	b.n	80018d2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2240      	movs	r2, #64	@ 0x40
 80016d6:	5c9b      	ldrb	r3, [r3, r2]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_I2C_Mem_Write+0x5c>
 80016dc:	2302      	movs	r3, #2
 80016de:	e0f8      	b.n	80018d2 <HAL_I2C_Mem_Write+0x24e>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2240      	movs	r2, #64	@ 0x40
 80016e4:	2101      	movs	r1, #1
 80016e6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016e8:	f7ff fcce 	bl	8001088 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	0219      	lsls	r1, r3, #8
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2319      	movs	r3, #25
 80016fc:	2201      	movs	r2, #1
 80016fe:	f000 f975 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 8001702:	1e03      	subs	r3, r0, #0
 8001704:	d001      	beq.n	800170a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0e3      	b.n	80018d2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2241      	movs	r2, #65	@ 0x41
 800170e:	2121      	movs	r1, #33	@ 0x21
 8001710:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2242      	movs	r2, #66	@ 0x42
 8001716:	2140      	movs	r1, #64	@ 0x40
 8001718:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001724:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	222c      	movs	r2, #44	@ 0x2c
 800172a:	18ba      	adds	r2, r7, r2
 800172c:	8812      	ldrh	r2, [r2, #0]
 800172e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001736:	1dbb      	adds	r3, r7, #6
 8001738:	881c      	ldrh	r4, [r3, #0]
 800173a:	2308      	movs	r3, #8
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	881a      	ldrh	r2, [r3, #0]
 8001740:	230a      	movs	r3, #10
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	8819      	ldrh	r1, [r3, #0]
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	0023      	movs	r3, r4
 8001752:	f000 f8c5 	bl	80018e0 <I2C_RequestMemoryWrite>
 8001756:	1e03      	subs	r3, r0, #0
 8001758:	d005      	beq.n	8001766 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2240      	movs	r2, #64	@ 0x40
 800175e:	2100      	movs	r1, #0
 8001760:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0b5      	b.n	80018d2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800176a:	b29b      	uxth	r3, r3
 800176c:	2bff      	cmp	r3, #255	@ 0xff
 800176e:	d911      	bls.n	8001794 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	22ff      	movs	r2, #255	@ 0xff
 8001774:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800177a:	b2da      	uxtb	r2, r3
 800177c:	2380      	movs	r3, #128	@ 0x80
 800177e:	045c      	lsls	r4, r3, #17
 8001780:	230a      	movs	r3, #10
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	8819      	ldrh	r1, [r3, #0]
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	2300      	movs	r3, #0
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	0023      	movs	r3, r4
 800178e:	f000 fb07 	bl	8001da0 <I2C_TransferConfig>
 8001792:	e012      	b.n	80017ba <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001798:	b29a      	uxth	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	049c      	lsls	r4, r3, #18
 80017a8:	230a      	movs	r3, #10
 80017aa:	18fb      	adds	r3, r7, r3
 80017ac:	8819      	ldrh	r1, [r3, #0]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	2300      	movs	r3, #0
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	0023      	movs	r3, r4
 80017b6:	f000 faf3 	bl	8001da0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 f96b 	bl	8001a9c <I2C_WaitOnTXISFlagUntilTimeout>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e081      	b.n	80018d2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d2:	781a      	ldrb	r2, [r3, #0]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3b01      	subs	r3, #1
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001802:	b29b      	uxth	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d03a      	beq.n	800187e <HAL_I2C_Mem_Write+0x1fa>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800180c:	2b00      	cmp	r3, #0
 800180e:	d136      	bne.n	800187e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	0013      	movs	r3, r2
 800181a:	2200      	movs	r2, #0
 800181c:	2180      	movs	r1, #128	@ 0x80
 800181e:	f000 f8e5 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d001      	beq.n	800182a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e053      	b.n	80018d2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800182e:	b29b      	uxth	r3, r3
 8001830:	2bff      	cmp	r3, #255	@ 0xff
 8001832:	d911      	bls.n	8001858 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	22ff      	movs	r2, #255	@ 0xff
 8001838:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800183e:	b2da      	uxtb	r2, r3
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	045c      	lsls	r4, r3, #17
 8001844:	230a      	movs	r3, #10
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	8819      	ldrh	r1, [r3, #0]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	2300      	movs	r3, #0
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	0023      	movs	r3, r4
 8001852:	f000 faa5 	bl	8001da0 <I2C_TransferConfig>
 8001856:	e012      	b.n	800187e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800185c:	b29a      	uxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001866:	b2da      	uxtb	r2, r3
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	049c      	lsls	r4, r3, #18
 800186c:	230a      	movs	r3, #10
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	8819      	ldrh	r1, [r3, #0]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	0023      	movs	r3, r4
 800187a:	f000 fa91 	bl	8001da0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d198      	bne.n	80017ba <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	0018      	movs	r0, r3
 8001890:	f000 f94a 	bl	8001b28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001894:	1e03      	subs	r3, r0, #0
 8001896:	d001      	beq.n	800189c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e01a      	b.n	80018d2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2220      	movs	r2, #32
 80018a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	490b      	ldr	r1, [pc, #44]	@ (80018dc <HAL_I2C_Mem_Write+0x258>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2241      	movs	r2, #65	@ 0x41
 80018b8:	2120      	movs	r1, #32
 80018ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2242      	movs	r2, #66	@ 0x42
 80018c0:	2100      	movs	r1, #0
 80018c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2240      	movs	r2, #64	@ 0x40
 80018c8:	2100      	movs	r1, #0
 80018ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	e000      	b.n	80018d2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80018d0:	2302      	movs	r3, #2
  }
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b007      	add	sp, #28
 80018d8:	bd90      	pop	{r4, r7, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	fe00e800 	.word	0xfe00e800

080018e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	000c      	movs	r4, r1
 80018ea:	0010      	movs	r0, r2
 80018ec:	0019      	movs	r1, r3
 80018ee:	250a      	movs	r5, #10
 80018f0:	197b      	adds	r3, r7, r5
 80018f2:	1c22      	adds	r2, r4, #0
 80018f4:	801a      	strh	r2, [r3, #0]
 80018f6:	2308      	movs	r3, #8
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	1c02      	adds	r2, r0, #0
 80018fc:	801a      	strh	r2, [r3, #0]
 80018fe:	1dbb      	adds	r3, r7, #6
 8001900:	1c0a      	adds	r2, r1, #0
 8001902:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001904:	1dbb      	adds	r3, r7, #6
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	2380      	movs	r3, #128	@ 0x80
 800190c:	045c      	lsls	r4, r3, #17
 800190e:	197b      	adds	r3, r7, r5
 8001910:	8819      	ldrh	r1, [r3, #0]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	4b23      	ldr	r3, [pc, #140]	@ (80019a4 <I2C_RequestMemoryWrite+0xc4>)
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	0023      	movs	r3, r4
 800191a:	f000 fa41 	bl	8001da0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800191e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001920:	6a39      	ldr	r1, [r7, #32]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	0018      	movs	r0, r3
 8001926:	f000 f8b9 	bl	8001a9c <I2C_WaitOnTXISFlagUntilTimeout>
 800192a:	1e03      	subs	r3, r0, #0
 800192c:	d001      	beq.n	8001932 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e033      	b.n	800199a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001932:	1dbb      	adds	r3, r7, #6
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800193a:	2308      	movs	r3, #8
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	629a      	str	r2, [r3, #40]	@ 0x28
 8001948:	e019      	b.n	800197e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800194a:	2308      	movs	r3, #8
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	b29b      	uxth	r3, r3
 8001954:	b2da      	uxtb	r2, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800195c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800195e:	6a39      	ldr	r1, [r7, #32]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	0018      	movs	r0, r3
 8001964:	f000 f89a 	bl	8001a9c <I2C_WaitOnTXISFlagUntilTimeout>
 8001968:	1e03      	subs	r3, r0, #0
 800196a:	d001      	beq.n	8001970 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e014      	b.n	800199a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001970:	2308      	movs	r3, #8
 8001972:	18fb      	adds	r3, r7, r3
 8001974:	881b      	ldrh	r3, [r3, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800197e:	6a3a      	ldr	r2, [r7, #32]
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	0013      	movs	r3, r2
 8001988:	2200      	movs	r2, #0
 800198a:	2180      	movs	r1, #128	@ 0x80
 800198c:	f000 f82e 	bl	80019ec <I2C_WaitOnFlagUntilTimeout>
 8001990:	1e03      	subs	r3, r0, #0
 8001992:	d001      	beq.n	8001998 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b004      	add	sp, #16
 80019a0:	bdb0      	pop	{r4, r5, r7, pc}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	80002000 	.word	0x80002000

080019a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d103      	bne.n	80019c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d007      	beq.n	80019e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699a      	ldr	r2, [r3, #24]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2101      	movs	r1, #1
 80019e0:	430a      	orrs	r2, r1
 80019e2:	619a      	str	r2, [r3, #24]
  }
}
 80019e4:	46c0      	nop			@ (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b002      	add	sp, #8
 80019ea:	bd80      	pop	{r7, pc}

080019ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	1dfb      	adds	r3, r7, #7
 80019fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019fc:	e03a      	b.n	8001a74 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	6839      	ldr	r1, [r7, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f000 f8d3 	bl	8001bb0 <I2C_IsErrorOccurred>
 8001a0a:	1e03      	subs	r3, r0, #0
 8001a0c:	d001      	beq.n	8001a12 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e040      	b.n	8001a94 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	d02d      	beq.n	8001a74 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a18:	f7ff fb36 	bl	8001088 <HAL_GetTick>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d302      	bcc.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0x42>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d122      	bne.n	8001a74 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	4013      	ands	r3, r2
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	425a      	negs	r2, r3
 8001a3e:	4153      	adcs	r3, r2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	001a      	movs	r2, r3
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d113      	bne.n	8001a74 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a50:	2220      	movs	r2, #32
 8001a52:	431a      	orrs	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2241      	movs	r2, #65	@ 0x41
 8001a5c:	2120      	movs	r1, #32
 8001a5e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2242      	movs	r2, #66	@ 0x42
 8001a64:	2100      	movs	r1, #0
 8001a66:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2240      	movs	r2, #64	@ 0x40
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e00f      	b.n	8001a94 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	425a      	negs	r2, r3
 8001a84:	4153      	adcs	r3, r2
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	001a      	movs	r2, r3
 8001a8a:	1dfb      	adds	r3, r7, #7
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d0b5      	beq.n	80019fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b004      	add	sp, #16
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001aa8:	e032      	b.n	8001b10 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 f87d 	bl	8001bb0 <I2C_IsErrorOccurred>
 8001ab6:	1e03      	subs	r3, r0, #0
 8001ab8:	d001      	beq.n	8001abe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e030      	b.n	8001b20 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	d025      	beq.n	8001b10 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac4:	f7ff fae0 	bl	8001088 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d302      	bcc.n	8001ada <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d11a      	bne.n	8001b10 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d013      	beq.n	8001b10 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aec:	2220      	movs	r2, #32
 8001aee:	431a      	orrs	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2241      	movs	r2, #65	@ 0x41
 8001af8:	2120      	movs	r1, #32
 8001afa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2242      	movs	r2, #66	@ 0x42
 8001b00:	2100      	movs	r1, #0
 8001b02:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2240      	movs	r2, #64	@ 0x40
 8001b08:	2100      	movs	r1, #0
 8001b0a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e007      	b.n	8001b20 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2202      	movs	r2, #2
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d1c5      	bne.n	8001aaa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b004      	add	sp, #16
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b34:	e02f      	b.n	8001b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f000 f837 	bl	8001bb0 <I2C_IsErrorOccurred>
 8001b42:	1e03      	subs	r3, r0, #0
 8001b44:	d001      	beq.n	8001b4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e02d      	b.n	8001ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b4a:	f7ff fa9d 	bl	8001088 <HAL_GetTick>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d302      	bcc.n	8001b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11a      	bne.n	8001b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2220      	movs	r2, #32
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b20      	cmp	r3, #32
 8001b6c:	d013      	beq.n	8001b96 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	2220      	movs	r2, #32
 8001b74:	431a      	orrs	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2241      	movs	r2, #65	@ 0x41
 8001b7e:	2120      	movs	r1, #32
 8001b80:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2242      	movs	r2, #66	@ 0x42
 8001b86:	2100      	movs	r1, #0
 8001b88:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2240      	movs	r2, #64	@ 0x40
 8001b8e:	2100      	movs	r1, #0
 8001b90:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e007      	b.n	8001ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d1c8      	bne.n	8001b36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b004      	add	sp, #16
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	@ 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbc:	2327      	movs	r3, #39	@ 0x27
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d100      	bne.n	8001bde <I2C_IsErrorOccurred+0x2e>
 8001bdc:	e079      	b.n	8001cd2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2210      	movs	r2, #16
 8001be4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001be6:	e057      	b.n	8001c98 <I2C_IsErrorOccurred+0xe8>
 8001be8:	2227      	movs	r2, #39	@ 0x27
 8001bea:	18bb      	adds	r3, r7, r2
 8001bec:	18ba      	adds	r2, r7, r2
 8001bee:	7812      	ldrb	r2, [r2, #0]
 8001bf0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	d04f      	beq.n	8001c98 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bf8:	f7ff fa46 	bl	8001088 <HAL_GetTick>
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d302      	bcc.n	8001c0e <I2C_IsErrorOccurred+0x5e>
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d144      	bne.n	8001c98 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	01db      	lsls	r3, r3, #7
 8001c18:	4013      	ands	r3, r2
 8001c1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c1c:	2013      	movs	r0, #19
 8001c1e:	183b      	adds	r3, r7, r0
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	2142      	movs	r1, #66	@ 0x42
 8001c24:	5c52      	ldrb	r2, [r2, r1]
 8001c26:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699a      	ldr	r2, [r3, #24]
 8001c2e:	2380      	movs	r3, #128	@ 0x80
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	401a      	ands	r2, r3
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d126      	bne.n	8001c8a <I2C_IsErrorOccurred+0xda>
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	01db      	lsls	r3, r3, #7
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d021      	beq.n	8001c8a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001c46:	183b      	adds	r3, r7, r0
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d01d      	beq.n	8001c8a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2180      	movs	r1, #128	@ 0x80
 8001c5a:	01c9      	lsls	r1, r1, #7
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c60:	f7ff fa12 	bl	8001088 <HAL_GetTick>
 8001c64:	0003      	movs	r3, r0
 8001c66:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c68:	e00f      	b.n	8001c8a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c6a:	f7ff fa0d 	bl	8001088 <HAL_GetTick>
 8001c6e:	0002      	movs	r2, r0
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b19      	cmp	r3, #25
 8001c76:	d908      	bls.n	8001c8a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c80:	2327      	movs	r3, #39	@ 0x27
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]

              break;
 8001c88:	e006      	b.n	8001c98 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2220      	movs	r2, #32
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d1e8      	bne.n	8001c6a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	d004      	beq.n	8001cb0 <I2C_IsErrorOccurred+0x100>
 8001ca6:	2327      	movs	r3, #39	@ 0x27
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d09b      	beq.n	8001be8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001cb0:	2327      	movs	r3, #39	@ 0x27
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d103      	bne.n	8001cc2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001cca:	2327      	movs	r3, #39	@ 0x27
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	2380      	movs	r3, #128	@ 0x80
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d00c      	beq.n	8001cfe <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2280      	movs	r2, #128	@ 0x80
 8001cf2:	0052      	lsls	r2, r2, #1
 8001cf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cf6:	2327      	movs	r3, #39	@ 0x27
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4013      	ands	r3, r2
 8001d06:	d00c      	beq.n	8001d22 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2280      	movs	r2, #128	@ 0x80
 8001d16:	00d2      	lsls	r2, r2, #3
 8001d18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d1a:	2327      	movs	r3, #39	@ 0x27
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d00c      	beq.n	8001d46 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	4313      	orrs	r3, r2
 8001d32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2280      	movs	r2, #128	@ 0x80
 8001d3a:	0092      	lsls	r2, r2, #2
 8001d3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d3e:	2327      	movs	r3, #39	@ 0x27
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001d46:	2327      	movs	r3, #39	@ 0x27
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01d      	beq.n	8001d8c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff fe28 	bl	80019a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	490e      	ldr	r1, [pc, #56]	@ (8001d9c <I2C_IsErrorOccurred+0x1ec>)
 8001d64:	400a      	ands	r2, r1
 8001d66:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2241      	movs	r2, #65	@ 0x41
 8001d78:	2120      	movs	r1, #32
 8001d7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2242      	movs	r2, #66	@ 0x42
 8001d80:	2100      	movs	r1, #0
 8001d82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2240      	movs	r2, #64	@ 0x40
 8001d88:	2100      	movs	r1, #0
 8001d8a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001d8c:	2327      	movs	r3, #39	@ 0x27
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	781b      	ldrb	r3, [r3, #0]
}
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b00a      	add	sp, #40	@ 0x28
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			@ (mov r8, r8)
 8001d9c:	fe00e800 	.word	0xfe00e800

08001da0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	0008      	movs	r0, r1
 8001daa:	0011      	movs	r1, r2
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	240a      	movs	r4, #10
 8001db0:	193b      	adds	r3, r7, r4
 8001db2:	1c02      	adds	r2, r0, #0
 8001db4:	801a      	strh	r2, [r3, #0]
 8001db6:	2009      	movs	r0, #9
 8001db8:	183b      	adds	r3, r7, r0
 8001dba:	1c0a      	adds	r2, r1, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dbe:	193b      	adds	r3, r7, r4
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	059b      	lsls	r3, r3, #22
 8001dc4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dc6:	183b      	adds	r3, r7, r0
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	0419      	lsls	r1, r3, #16
 8001dcc:	23ff      	movs	r3, #255	@ 0xff
 8001dce:	041b      	lsls	r3, r3, #16
 8001dd0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dd2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	085b      	lsrs	r3, r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001dea:	0d51      	lsrs	r1, r2, #21
 8001dec:	2280      	movs	r2, #128	@ 0x80
 8001dee:	00d2      	lsls	r2, r2, #3
 8001df0:	400a      	ands	r2, r1
 8001df2:	4907      	ldr	r1, [pc, #28]	@ (8001e10 <I2C_TransferConfig+0x70>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	43d2      	mvns	r2, r2
 8001df8:	401a      	ands	r2, r3
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b007      	add	sp, #28
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	03ff63ff 	.word	0x03ff63ff

08001e14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2241      	movs	r2, #65	@ 0x41
 8001e22:	5c9b      	ldrb	r3, [r3, r2]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d138      	bne.n	8001e9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2240      	movs	r2, #64	@ 0x40
 8001e2e:	5c9b      	ldrb	r3, [r3, r2]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e032      	b.n	8001e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2240      	movs	r2, #64	@ 0x40
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2241      	movs	r2, #65	@ 0x41
 8001e44:	2124      	movs	r1, #36	@ 0x24
 8001e46:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2101      	movs	r1, #1
 8001e54:	438a      	bics	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4911      	ldr	r1, [pc, #68]	@ (8001ea8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e64:	400a      	ands	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6819      	ldr	r1, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2101      	movs	r1, #1
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2241      	movs	r2, #65	@ 0x41
 8001e8c:	2120      	movs	r1, #32
 8001e8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2240      	movs	r2, #64	@ 0x40
 8001e94:	2100      	movs	r1, #0
 8001e96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e9c:	2302      	movs	r3, #2
  }
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b002      	add	sp, #8
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	ffffefff 	.word	0xffffefff

08001eac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2241      	movs	r2, #65	@ 0x41
 8001eba:	5c9b      	ldrb	r3, [r3, r2]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b20      	cmp	r3, #32
 8001ec0:	d139      	bne.n	8001f36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2240      	movs	r2, #64	@ 0x40
 8001ec6:	5c9b      	ldrb	r3, [r3, r2]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e033      	b.n	8001f38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2240      	movs	r2, #64	@ 0x40
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2241      	movs	r2, #65	@ 0x41
 8001edc:	2124      	movs	r1, #36	@ 0x24
 8001ede:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2101      	movs	r1, #1
 8001eec:	438a      	bics	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4a11      	ldr	r2, [pc, #68]	@ (8001f40 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2241      	movs	r2, #65	@ 0x41
 8001f26:	2120      	movs	r1, #32
 8001f28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2240      	movs	r2, #64	@ 0x40
 8001f2e:	2100      	movs	r1, #0
 8001f30:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
  }
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b004      	add	sp, #16
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	fffff0ff 	.word	0xfffff0ff

08001f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f44:	b5b0      	push	{r4, r5, r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f000 fbaf 	bl	80026b6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f58:	4bcf      	ldr	r3, [pc, #828]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	220c      	movs	r2, #12
 8001f5e:	4013      	ands	r3, r2
 8001f60:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f62:	4bcd      	ldr	r3, [pc, #820]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	2380      	movs	r3, #128	@ 0x80
 8001f68:	025b      	lsls	r3, r3, #9
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2201      	movs	r2, #1
 8001f74:	4013      	ands	r3, r2
 8001f76:	d100      	bne.n	8001f7a <HAL_RCC_OscConfig+0x36>
 8001f78:	e07e      	b.n	8002078 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d007      	beq.n	8001f90 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d112      	bne.n	8001fac <HAL_RCC_OscConfig+0x68>
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	025b      	lsls	r3, r3, #9
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d10d      	bne.n	8001fac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	4bc1      	ldr	r3, [pc, #772]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	029b      	lsls	r3, r3, #10
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d100      	bne.n	8001f9e <HAL_RCC_OscConfig+0x5a>
 8001f9c:	e06b      	b.n	8002076 <HAL_RCC_OscConfig+0x132>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d167      	bne.n	8002076 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f000 fb85 	bl	80026b6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	025b      	lsls	r3, r3, #9
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x84>
 8001fb8:	4bb7      	ldr	r3, [pc, #732]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4bb6      	ldr	r3, [pc, #728]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8001fbe:	2180      	movs	r1, #128	@ 0x80
 8001fc0:	0249      	lsls	r1, r1, #9
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	e027      	b.n	8002018 <HAL_RCC_OscConfig+0xd4>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	23a0      	movs	r3, #160	@ 0xa0
 8001fce:	02db      	lsls	r3, r3, #11
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d10e      	bne.n	8001ff2 <HAL_RCC_OscConfig+0xae>
 8001fd4:	4bb0      	ldr	r3, [pc, #704]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4baf      	ldr	r3, [pc, #700]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8001fda:	2180      	movs	r1, #128	@ 0x80
 8001fdc:	02c9      	lsls	r1, r1, #11
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	4bad      	ldr	r3, [pc, #692]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	4bac      	ldr	r3, [pc, #688]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8001fe8:	2180      	movs	r1, #128	@ 0x80
 8001fea:	0249      	lsls	r1, r1, #9
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	e012      	b.n	8002018 <HAL_RCC_OscConfig+0xd4>
 8001ff2:	4ba9      	ldr	r3, [pc, #676]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4ba8      	ldr	r3, [pc, #672]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8001ff8:	49a8      	ldr	r1, [pc, #672]	@ (800229c <HAL_RCC_OscConfig+0x358>)
 8001ffa:	400a      	ands	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	4ba6      	ldr	r3, [pc, #664]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	@ 0x80
 8002004:	025b      	lsls	r3, r3, #9
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4ba2      	ldr	r3, [pc, #648]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4ba1      	ldr	r3, [pc, #644]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8002012:	49a3      	ldr	r1, [pc, #652]	@ (80022a0 <HAL_RCC_OscConfig+0x35c>)
 8002014:	400a      	ands	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d015      	beq.n	800204c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff f832 	bl	8001088 <HAL_GetTick>
 8002024:	0003      	movs	r3, r0
 8002026:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002028:	e009      	b.n	800203e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800202a:	f7ff f82d 	bl	8001088 <HAL_GetTick>
 800202e:	0002      	movs	r2, r0
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b64      	cmp	r3, #100	@ 0x64
 8002036:	d902      	bls.n	800203e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	f000 fb3c 	bl	80026b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800203e:	4b96      	ldr	r3, [pc, #600]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	2380      	movs	r3, #128	@ 0x80
 8002044:	029b      	lsls	r3, r3, #10
 8002046:	4013      	ands	r3, r2
 8002048:	d0ef      	beq.n	800202a <HAL_RCC_OscConfig+0xe6>
 800204a:	e015      	b.n	8002078 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff f81c 	bl	8001088 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002056:	f7ff f817 	bl	8001088 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b64      	cmp	r3, #100	@ 0x64
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e326      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002068:	4b8b      	ldr	r3, [pc, #556]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	029b      	lsls	r3, r3, #10
 8002070:	4013      	ands	r3, r2
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_OscConfig+0x112>
 8002074:	e000      	b.n	8002078 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002076:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2202      	movs	r2, #2
 800207e:	4013      	ands	r3, r2
 8002080:	d100      	bne.n	8002084 <HAL_RCC_OscConfig+0x140>
 8002082:	e08b      	b.n	800219c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	2b04      	cmp	r3, #4
 800208e:	d005      	beq.n	800209c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	2b0c      	cmp	r3, #12
 8002094:	d13e      	bne.n	8002114 <HAL_RCC_OscConfig+0x1d0>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d13b      	bne.n	8002114 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800209c:	4b7e      	ldr	r3, [pc, #504]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2204      	movs	r2, #4
 80020a2:	4013      	ands	r3, r2
 80020a4:	d004      	beq.n	80020b0 <HAL_RCC_OscConfig+0x16c>
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e302      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	4b79      	ldr	r3, [pc, #484]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a7b      	ldr	r2, [pc, #492]	@ (80022a4 <HAL_RCC_OscConfig+0x360>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	021a      	lsls	r2, r3, #8
 80020c0:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 80020c2:	430a      	orrs	r2, r1
 80020c4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020c6:	4b74      	ldr	r3, [pc, #464]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2209      	movs	r2, #9
 80020cc:	4393      	bics	r3, r2
 80020ce:	0019      	movs	r1, r3
 80020d0:	4b71      	ldr	r3, [pc, #452]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020d8:	f000 fc40 	bl	800295c <HAL_RCC_GetSysClockFreq>
 80020dc:	0001      	movs	r1, r0
 80020de:	4b6e      	ldr	r3, [pc, #440]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	091b      	lsrs	r3, r3, #4
 80020e4:	220f      	movs	r2, #15
 80020e6:	4013      	ands	r3, r2
 80020e8:	4a6f      	ldr	r2, [pc, #444]	@ (80022a8 <HAL_RCC_OscConfig+0x364>)
 80020ea:	5cd3      	ldrb	r3, [r2, r3]
 80020ec:	000a      	movs	r2, r1
 80020ee:	40da      	lsrs	r2, r3
 80020f0:	4b6e      	ldr	r3, [pc, #440]	@ (80022ac <HAL_RCC_OscConfig+0x368>)
 80020f2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80020f4:	4b6e      	ldr	r3, [pc, #440]	@ (80022b0 <HAL_RCC_OscConfig+0x36c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2513      	movs	r5, #19
 80020fa:	197c      	adds	r4, r7, r5
 80020fc:	0018      	movs	r0, r3
 80020fe:	f7fe ff7d 	bl	8000ffc <HAL_InitTick>
 8002102:	0003      	movs	r3, r0
 8002104:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002106:	197b      	adds	r3, r7, r5
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d046      	beq.n	800219c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800210e:	197b      	adds	r3, r7, r5
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	e2d0      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d027      	beq.n	800216a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800211a:	4b5f      	ldr	r3, [pc, #380]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2209      	movs	r2, #9
 8002120:	4393      	bics	r3, r2
 8002122:	0019      	movs	r1, r3
 8002124:	4b5c      	ldr	r3, [pc, #368]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe ffac 	bl	8001088 <HAL_GetTick>
 8002130:	0003      	movs	r3, r0
 8002132:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002136:	f7fe ffa7 	bl	8001088 <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e2b6      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002148:	4b53      	ldr	r3, [pc, #332]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2204      	movs	r2, #4
 800214e:	4013      	ands	r3, r2
 8002150:	d0f1      	beq.n	8002136 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b51      	ldr	r3, [pc, #324]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4a53      	ldr	r2, [pc, #332]	@ (80022a4 <HAL_RCC_OscConfig+0x360>)
 8002158:	4013      	ands	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	021a      	lsls	r2, r3, #8
 8002162:	4b4d      	ldr	r3, [pc, #308]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8002164:	430a      	orrs	r2, r1
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	e018      	b.n	800219c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b4b      	ldr	r3, [pc, #300]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b4a      	ldr	r3, [pc, #296]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8002170:	2101      	movs	r1, #1
 8002172:	438a      	bics	r2, r1
 8002174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7fe ff87 	bl	8001088 <HAL_GetTick>
 800217a:	0003      	movs	r3, r0
 800217c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002180:	f7fe ff82 	bl	8001088 <HAL_GetTick>
 8002184:	0002      	movs	r2, r0
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e291      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002192:	4b41      	ldr	r3, [pc, #260]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2204      	movs	r2, #4
 8002198:	4013      	ands	r3, r2
 800219a:	d1f1      	bne.n	8002180 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2210      	movs	r2, #16
 80021a2:	4013      	ands	r3, r2
 80021a4:	d100      	bne.n	80021a8 <HAL_RCC_OscConfig+0x264>
 80021a6:	e0a1      	b.n	80022ec <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d140      	bne.n	8002230 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	2380      	movs	r3, #128	@ 0x80
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4013      	ands	r3, r2
 80021b8:	d005      	beq.n	80021c6 <HAL_RCC_OscConfig+0x282>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e277      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c6:	4b34      	ldr	r3, [pc, #208]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4a3a      	ldr	r2, [pc, #232]	@ (80022b4 <HAL_RCC_OscConfig+0x370>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021d4:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021da:	4b2f      	ldr	r3, [pc, #188]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	0a19      	lsrs	r1, r3, #8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	061a      	lsls	r2, r3, #24
 80021e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f2:	0b5b      	lsrs	r3, r3, #13
 80021f4:	3301      	adds	r3, #1
 80021f6:	2280      	movs	r2, #128	@ 0x80
 80021f8:	0212      	lsls	r2, r2, #8
 80021fa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021fc:	4b26      	ldr	r3, [pc, #152]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	210f      	movs	r1, #15
 8002204:	400b      	ands	r3, r1
 8002206:	4928      	ldr	r1, [pc, #160]	@ (80022a8 <HAL_RCC_OscConfig+0x364>)
 8002208:	5ccb      	ldrb	r3, [r1, r3]
 800220a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800220c:	4b27      	ldr	r3, [pc, #156]	@ (80022ac <HAL_RCC_OscConfig+0x368>)
 800220e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002210:	4b27      	ldr	r3, [pc, #156]	@ (80022b0 <HAL_RCC_OscConfig+0x36c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2513      	movs	r5, #19
 8002216:	197c      	adds	r4, r7, r5
 8002218:	0018      	movs	r0, r3
 800221a:	f7fe feef 	bl	8000ffc <HAL_InitTick>
 800221e:	0003      	movs	r3, r0
 8002220:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002222:	197b      	adds	r3, r7, r5
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d060      	beq.n	80022ec <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800222a:	197b      	adds	r3, r7, r5
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	e242      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d03f      	beq.n	80022b8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002238:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b16      	ldr	r3, [pc, #88]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 800223e:	2180      	movs	r1, #128	@ 0x80
 8002240:	0049      	lsls	r1, r1, #1
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7fe ff1f 	bl	8001088 <HAL_GetTick>
 800224a:	0003      	movs	r3, r0
 800224c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002250:	f7fe ff1a 	bl	8001088 <HAL_GetTick>
 8002254:	0002      	movs	r2, r0
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e229      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002262:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	2380      	movs	r3, #128	@ 0x80
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4013      	ands	r3, r2
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800226e:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4a10      	ldr	r2, [pc, #64]	@ (80022b4 <HAL_RCC_OscConfig+0x370>)
 8002274:	4013      	ands	r3, r2
 8002276:	0019      	movs	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002282:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	0a19      	lsrs	r1, r3, #8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	061a      	lsls	r2, r3, #24
 8002290:	4b01      	ldr	r3, [pc, #4]	@ (8002298 <HAL_RCC_OscConfig+0x354>)
 8002292:	430a      	orrs	r2, r1
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	e029      	b.n	80022ec <HAL_RCC_OscConfig+0x3a8>
 8002298:	40021000 	.word	0x40021000
 800229c:	fffeffff 	.word	0xfffeffff
 80022a0:	fffbffff 	.word	0xfffbffff
 80022a4:	ffffe0ff 	.word	0xffffe0ff
 80022a8:	08004a18 	.word	0x08004a18
 80022ac:	20000004 	.word	0x20000004
 80022b0:	20000008 	.word	0x20000008
 80022b4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022b8:	4bbd      	ldr	r3, [pc, #756]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4bbc      	ldr	r3, [pc, #752]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 80022be:	49bd      	ldr	r1, [pc, #756]	@ (80025b4 <HAL_RCC_OscConfig+0x670>)
 80022c0:	400a      	ands	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7fe fee0 	bl	8001088 <HAL_GetTick>
 80022c8:	0003      	movs	r3, r0
 80022ca:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ce:	f7fe fedb 	bl	8001088 <HAL_GetTick>
 80022d2:	0002      	movs	r2, r0
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1ea      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022e0:	4bb3      	ldr	r3, [pc, #716]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4013      	ands	r3, r2
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2208      	movs	r2, #8
 80022f2:	4013      	ands	r3, r2
 80022f4:	d036      	beq.n	8002364 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d019      	beq.n	8002332 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fe:	4bac      	ldr	r3, [pc, #688]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002300:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002302:	4bab      	ldr	r3, [pc, #684]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002304:	2101      	movs	r1, #1
 8002306:	430a      	orrs	r2, r1
 8002308:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7fe febd 	bl	8001088 <HAL_GetTick>
 800230e:	0003      	movs	r3, r0
 8002310:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002314:	f7fe feb8 	bl	8001088 <HAL_GetTick>
 8002318:	0002      	movs	r2, r0
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e1c7      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002326:	4ba2      	ldr	r3, [pc, #648]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800232a:	2202      	movs	r2, #2
 800232c:	4013      	ands	r3, r2
 800232e:	d0f1      	beq.n	8002314 <HAL_RCC_OscConfig+0x3d0>
 8002330:	e018      	b.n	8002364 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002332:	4b9f      	ldr	r3, [pc, #636]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002334:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002336:	4b9e      	ldr	r3, [pc, #632]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002338:	2101      	movs	r1, #1
 800233a:	438a      	bics	r2, r1
 800233c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7fe fea3 	bl	8001088 <HAL_GetTick>
 8002342:	0003      	movs	r3, r0
 8002344:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002348:	f7fe fe9e 	bl	8001088 <HAL_GetTick>
 800234c:	0002      	movs	r2, r0
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e1ad      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800235a:	4b95      	ldr	r3, [pc, #596]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 800235c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800235e:	2202      	movs	r2, #2
 8002360:	4013      	ands	r3, r2
 8002362:	d1f1      	bne.n	8002348 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2204      	movs	r2, #4
 800236a:	4013      	ands	r3, r2
 800236c:	d100      	bne.n	8002370 <HAL_RCC_OscConfig+0x42c>
 800236e:	e0ae      	b.n	80024ce <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002370:	2027      	movs	r0, #39	@ 0x27
 8002372:	183b      	adds	r3, r7, r0
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002378:	4b8d      	ldr	r3, [pc, #564]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 800237a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	055b      	lsls	r3, r3, #21
 8002380:	4013      	ands	r3, r2
 8002382:	d109      	bne.n	8002398 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002384:	4b8a      	ldr	r3, [pc, #552]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002386:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002388:	4b89      	ldr	r3, [pc, #548]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 800238a:	2180      	movs	r1, #128	@ 0x80
 800238c:	0549      	lsls	r1, r1, #21
 800238e:	430a      	orrs	r2, r1
 8002390:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002392:	183b      	adds	r3, r7, r0
 8002394:	2201      	movs	r2, #1
 8002396:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	4b87      	ldr	r3, [pc, #540]	@ (80025b8 <HAL_RCC_OscConfig+0x674>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4013      	ands	r3, r2
 80023a2:	d11a      	bne.n	80023da <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a4:	4b84      	ldr	r3, [pc, #528]	@ (80025b8 <HAL_RCC_OscConfig+0x674>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b83      	ldr	r3, [pc, #524]	@ (80025b8 <HAL_RCC_OscConfig+0x674>)
 80023aa:	2180      	movs	r1, #128	@ 0x80
 80023ac:	0049      	lsls	r1, r1, #1
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b2:	f7fe fe69 	bl	8001088 <HAL_GetTick>
 80023b6:	0003      	movs	r3, r0
 80023b8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023bc:	f7fe fe64 	bl	8001088 <HAL_GetTick>
 80023c0:	0002      	movs	r2, r0
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	@ 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e173      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ce:	4b7a      	ldr	r3, [pc, #488]	@ (80025b8 <HAL_RCC_OscConfig+0x674>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	2380      	movs	r3, #128	@ 0x80
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_OscConfig+0x4b2>
 80023e6:	4b72      	ldr	r3, [pc, #456]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 80023e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023ea:	4b71      	ldr	r3, [pc, #452]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 80023ec:	2180      	movs	r1, #128	@ 0x80
 80023ee:	0049      	lsls	r1, r1, #1
 80023f0:	430a      	orrs	r2, r1
 80023f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80023f4:	e031      	b.n	800245a <HAL_RCC_OscConfig+0x516>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x4d4>
 80023fe:	4b6c      	ldr	r3, [pc, #432]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002400:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002402:	4b6b      	ldr	r3, [pc, #428]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002404:	496b      	ldr	r1, [pc, #428]	@ (80025b4 <HAL_RCC_OscConfig+0x670>)
 8002406:	400a      	ands	r2, r1
 8002408:	651a      	str	r2, [r3, #80]	@ 0x50
 800240a:	4b69      	ldr	r3, [pc, #420]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 800240c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800240e:	4b68      	ldr	r3, [pc, #416]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002410:	496a      	ldr	r1, [pc, #424]	@ (80025bc <HAL_RCC_OscConfig+0x678>)
 8002412:	400a      	ands	r2, r1
 8002414:	651a      	str	r2, [r3, #80]	@ 0x50
 8002416:	e020      	b.n	800245a <HAL_RCC_OscConfig+0x516>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	23a0      	movs	r3, #160	@ 0xa0
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	429a      	cmp	r2, r3
 8002422:	d10e      	bne.n	8002442 <HAL_RCC_OscConfig+0x4fe>
 8002424:	4b62      	ldr	r3, [pc, #392]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002426:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002428:	4b61      	ldr	r3, [pc, #388]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 800242a:	2180      	movs	r1, #128	@ 0x80
 800242c:	00c9      	lsls	r1, r1, #3
 800242e:	430a      	orrs	r2, r1
 8002430:	651a      	str	r2, [r3, #80]	@ 0x50
 8002432:	4b5f      	ldr	r3, [pc, #380]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002434:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002436:	4b5e      	ldr	r3, [pc, #376]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002438:	2180      	movs	r1, #128	@ 0x80
 800243a:	0049      	lsls	r1, r1, #1
 800243c:	430a      	orrs	r2, r1
 800243e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002440:	e00b      	b.n	800245a <HAL_RCC_OscConfig+0x516>
 8002442:	4b5b      	ldr	r3, [pc, #364]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002444:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002446:	4b5a      	ldr	r3, [pc, #360]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002448:	495a      	ldr	r1, [pc, #360]	@ (80025b4 <HAL_RCC_OscConfig+0x670>)
 800244a:	400a      	ands	r2, r1
 800244c:	651a      	str	r2, [r3, #80]	@ 0x50
 800244e:	4b58      	ldr	r3, [pc, #352]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002450:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002452:	4b57      	ldr	r3, [pc, #348]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002454:	4959      	ldr	r1, [pc, #356]	@ (80025bc <HAL_RCC_OscConfig+0x678>)
 8002456:	400a      	ands	r2, r1
 8002458:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d015      	beq.n	800248e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe fe11 	bl	8001088 <HAL_GetTick>
 8002466:	0003      	movs	r3, r0
 8002468:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800246a:	e009      	b.n	8002480 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246c:	f7fe fe0c 	bl	8001088 <HAL_GetTick>
 8002470:	0002      	movs	r2, r0
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	4a52      	ldr	r2, [pc, #328]	@ (80025c0 <HAL_RCC_OscConfig+0x67c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e11a      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002480:	4b4b      	ldr	r3, [pc, #300]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002482:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002484:	2380      	movs	r3, #128	@ 0x80
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4013      	ands	r3, r2
 800248a:	d0ef      	beq.n	800246c <HAL_RCC_OscConfig+0x528>
 800248c:	e014      	b.n	80024b8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7fe fdfb 	bl	8001088 <HAL_GetTick>
 8002492:	0003      	movs	r3, r0
 8002494:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002496:	e009      	b.n	80024ac <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002498:	f7fe fdf6 	bl	8001088 <HAL_GetTick>
 800249c:	0002      	movs	r2, r0
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	4a47      	ldr	r2, [pc, #284]	@ (80025c0 <HAL_RCC_OscConfig+0x67c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e104      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024ac:	4b40      	ldr	r3, [pc, #256]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 80024ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024b0:	2380      	movs	r3, #128	@ 0x80
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4013      	ands	r3, r2
 80024b6:	d1ef      	bne.n	8002498 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024b8:	2327      	movs	r3, #39	@ 0x27
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d105      	bne.n	80024ce <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c2:	4b3b      	ldr	r3, [pc, #236]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 80024c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024c6:	4b3a      	ldr	r3, [pc, #232]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 80024c8:	493e      	ldr	r1, [pc, #248]	@ (80025c4 <HAL_RCC_OscConfig+0x680>)
 80024ca:	400a      	ands	r2, r1
 80024cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2220      	movs	r2, #32
 80024d4:	4013      	ands	r3, r2
 80024d6:	d049      	beq.n	800256c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d026      	beq.n	800252e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80024e0:	4b33      	ldr	r3, [pc, #204]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	4b32      	ldr	r3, [pc, #200]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 80024e6:	2101      	movs	r1, #1
 80024e8:	430a      	orrs	r2, r1
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	4b30      	ldr	r3, [pc, #192]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 80024ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f0:	4b2f      	ldr	r3, [pc, #188]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 80024f2:	2101      	movs	r1, #1
 80024f4:	430a      	orrs	r2, r1
 80024f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80024f8:	4b33      	ldr	r3, [pc, #204]	@ (80025c8 <HAL_RCC_OscConfig+0x684>)
 80024fa:	6a1a      	ldr	r2, [r3, #32]
 80024fc:	4b32      	ldr	r3, [pc, #200]	@ (80025c8 <HAL_RCC_OscConfig+0x684>)
 80024fe:	2180      	movs	r1, #128	@ 0x80
 8002500:	0189      	lsls	r1, r1, #6
 8002502:	430a      	orrs	r2, r1
 8002504:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7fe fdbf 	bl	8001088 <HAL_GetTick>
 800250a:	0003      	movs	r3, r0
 800250c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002510:	f7fe fdba 	bl	8001088 <HAL_GetTick>
 8002514:	0002      	movs	r2, r0
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e0c9      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002522:	4b23      	ldr	r3, [pc, #140]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2202      	movs	r2, #2
 8002528:	4013      	ands	r3, r2
 800252a:	d0f1      	beq.n	8002510 <HAL_RCC_OscConfig+0x5cc>
 800252c:	e01e      	b.n	800256c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	4b1f      	ldr	r3, [pc, #124]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002534:	2101      	movs	r1, #1
 8002536:	438a      	bics	r2, r1
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	4b23      	ldr	r3, [pc, #140]	@ (80025c8 <HAL_RCC_OscConfig+0x684>)
 800253c:	6a1a      	ldr	r2, [r3, #32]
 800253e:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <HAL_RCC_OscConfig+0x684>)
 8002540:	4922      	ldr	r1, [pc, #136]	@ (80025cc <HAL_RCC_OscConfig+0x688>)
 8002542:	400a      	ands	r2, r1
 8002544:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7fe fd9f 	bl	8001088 <HAL_GetTick>
 800254a:	0003      	movs	r3, r0
 800254c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002550:	f7fe fd9a 	bl	8001088 <HAL_GetTick>
 8002554:	0002      	movs	r2, r0
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e0a9      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002562:	4b13      	ldr	r3, [pc, #76]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2202      	movs	r2, #2
 8002568:	4013      	ands	r3, r2
 800256a:	d1f1      	bne.n	8002550 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	2b00      	cmp	r3, #0
 8002572:	d100      	bne.n	8002576 <HAL_RCC_OscConfig+0x632>
 8002574:	e09e      	b.n	80026b4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	2b0c      	cmp	r3, #12
 800257a:	d100      	bne.n	800257e <HAL_RCC_OscConfig+0x63a>
 800257c:	e077      	b.n	800266e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002582:	2b02      	cmp	r3, #2
 8002584:	d158      	bne.n	8002638 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <HAL_RCC_OscConfig+0x66c>)
 800258c:	4910      	ldr	r1, [pc, #64]	@ (80025d0 <HAL_RCC_OscConfig+0x68c>)
 800258e:	400a      	ands	r2, r1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe fd79 	bl	8001088 <HAL_GetTick>
 8002596:	0003      	movs	r3, r0
 8002598:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800259a:	e01b      	b.n	80025d4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe fd74 	bl	8001088 <HAL_GetTick>
 80025a0:	0002      	movs	r2, r0
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d914      	bls.n	80025d4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e083      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	40021000 	.word	0x40021000
 80025b4:	fffffeff 	.word	0xfffffeff
 80025b8:	40007000 	.word	0x40007000
 80025bc:	fffffbff 	.word	0xfffffbff
 80025c0:	00001388 	.word	0x00001388
 80025c4:	efffffff 	.word	0xefffffff
 80025c8:	40010000 	.word	0x40010000
 80025cc:	ffffdfff 	.word	0xffffdfff
 80025d0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025d4:	4b3a      	ldr	r3, [pc, #232]	@ (80026c0 <HAL_RCC_OscConfig+0x77c>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	049b      	lsls	r3, r3, #18
 80025dc:	4013      	ands	r3, r2
 80025de:	d1dd      	bne.n	800259c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e0:	4b37      	ldr	r3, [pc, #220]	@ (80026c0 <HAL_RCC_OscConfig+0x77c>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a37      	ldr	r2, [pc, #220]	@ (80026c4 <HAL_RCC_OscConfig+0x780>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f8:	431a      	orrs	r2, r3
 80025fa:	4b31      	ldr	r3, [pc, #196]	@ (80026c0 <HAL_RCC_OscConfig+0x77c>)
 80025fc:	430a      	orrs	r2, r1
 80025fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002600:	4b2f      	ldr	r3, [pc, #188]	@ (80026c0 <HAL_RCC_OscConfig+0x77c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b2e      	ldr	r3, [pc, #184]	@ (80026c0 <HAL_RCC_OscConfig+0x77c>)
 8002606:	2180      	movs	r1, #128	@ 0x80
 8002608:	0449      	lsls	r1, r1, #17
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260e:	f7fe fd3b 	bl	8001088 <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002618:	f7fe fd36 	bl	8001088 <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e045      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800262a:	4b25      	ldr	r3, [pc, #148]	@ (80026c0 <HAL_RCC_OscConfig+0x77c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	049b      	lsls	r3, r3, #18
 8002632:	4013      	ands	r3, r2
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x6d4>
 8002636:	e03d      	b.n	80026b4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002638:	4b21      	ldr	r3, [pc, #132]	@ (80026c0 <HAL_RCC_OscConfig+0x77c>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b20      	ldr	r3, [pc, #128]	@ (80026c0 <HAL_RCC_OscConfig+0x77c>)
 800263e:	4922      	ldr	r1, [pc, #136]	@ (80026c8 <HAL_RCC_OscConfig+0x784>)
 8002640:	400a      	ands	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe fd20 	bl	8001088 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe fd1b 	bl	8001088 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e02a      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002660:	4b17      	ldr	r3, [pc, #92]	@ (80026c0 <HAL_RCC_OscConfig+0x77c>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	049b      	lsls	r3, r3, #18
 8002668:	4013      	ands	r3, r2
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x70a>
 800266c:	e022      	b.n	80026b4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e01d      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800267a:	4b11      	ldr	r3, [pc, #68]	@ (80026c0 <HAL_RCC_OscConfig+0x77c>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	2380      	movs	r3, #128	@ 0x80
 8002684:	025b      	lsls	r3, r3, #9
 8002686:	401a      	ands	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268c:	429a      	cmp	r2, r3
 800268e:	d10f      	bne.n	80026b0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	23f0      	movs	r3, #240	@ 0xf0
 8002694:	039b      	lsls	r3, r3, #14
 8002696:	401a      	ands	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d107      	bne.n	80026b0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	23c0      	movs	r3, #192	@ 0xc0
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	401a      	ands	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	0018      	movs	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b00a      	add	sp, #40	@ 0x28
 80026bc:	bdb0      	pop	{r4, r5, r7, pc}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	40021000 	.word	0x40021000
 80026c4:	ff02ffff 	.word	0xff02ffff
 80026c8:	feffffff 	.word	0xfeffffff

080026cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b5b0      	push	{r4, r5, r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e128      	b.n	8002932 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e0:	4b96      	ldr	r3, [pc, #600]	@ (800293c <HAL_RCC_ClockConfig+0x270>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2201      	movs	r2, #1
 80026e6:	4013      	ands	r3, r2
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d91e      	bls.n	800272c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b93      	ldr	r3, [pc, #588]	@ (800293c <HAL_RCC_ClockConfig+0x270>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	4393      	bics	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	4b90      	ldr	r3, [pc, #576]	@ (800293c <HAL_RCC_ClockConfig+0x270>)
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002700:	f7fe fcc2 	bl	8001088 <HAL_GetTick>
 8002704:	0003      	movs	r3, r0
 8002706:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002708:	e009      	b.n	800271e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270a:	f7fe fcbd 	bl	8001088 <HAL_GetTick>
 800270e:	0002      	movs	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	4a8a      	ldr	r2, [pc, #552]	@ (8002940 <HAL_RCC_ClockConfig+0x274>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d901      	bls.n	800271e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e109      	b.n	8002932 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b87      	ldr	r3, [pc, #540]	@ (800293c <HAL_RCC_ClockConfig+0x270>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d1ee      	bne.n	800270a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2202      	movs	r2, #2
 8002732:	4013      	ands	r3, r2
 8002734:	d009      	beq.n	800274a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002736:	4b83      	ldr	r3, [pc, #524]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	22f0      	movs	r2, #240	@ 0xf0
 800273c:	4393      	bics	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	4b7f      	ldr	r3, [pc, #508]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 8002746:	430a      	orrs	r2, r1
 8002748:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2201      	movs	r2, #1
 8002750:	4013      	ands	r3, r2
 8002752:	d100      	bne.n	8002756 <HAL_RCC_ClockConfig+0x8a>
 8002754:	e089      	b.n	800286a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800275e:	4b79      	ldr	r3, [pc, #484]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	2380      	movs	r3, #128	@ 0x80
 8002764:	029b      	lsls	r3, r3, #10
 8002766:	4013      	ands	r3, r2
 8002768:	d120      	bne.n	80027ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0e1      	b.n	8002932 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002776:	4b73      	ldr	r3, [pc, #460]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2380      	movs	r3, #128	@ 0x80
 800277c:	049b      	lsls	r3, r3, #18
 800277e:	4013      	ands	r3, r2
 8002780:	d114      	bne.n	80027ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0d5      	b.n	8002932 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d106      	bne.n	800279c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800278e:	4b6d      	ldr	r3, [pc, #436]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2204      	movs	r2, #4
 8002794:	4013      	ands	r3, r2
 8002796:	d109      	bne.n	80027ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0ca      	b.n	8002932 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800279c:	4b69      	ldr	r3, [pc, #420]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	2380      	movs	r3, #128	@ 0x80
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4013      	ands	r3, r2
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0c2      	b.n	8002932 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ac:	4b65      	ldr	r3, [pc, #404]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	2203      	movs	r2, #3
 80027b2:	4393      	bics	r3, r2
 80027b4:	0019      	movs	r1, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	4b62      	ldr	r3, [pc, #392]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 80027bc:	430a      	orrs	r2, r1
 80027be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c0:	f7fe fc62 	bl	8001088 <HAL_GetTick>
 80027c4:	0003      	movs	r3, r0
 80027c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d111      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d0:	e009      	b.n	80027e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d2:	f7fe fc59 	bl	8001088 <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	4a58      	ldr	r2, [pc, #352]	@ (8002940 <HAL_RCC_ClockConfig+0x274>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e0a5      	b.n	8002932 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e6:	4b57      	ldr	r3, [pc, #348]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	220c      	movs	r2, #12
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d1ef      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x106>
 80027f2:	e03a      	b.n	800286a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d111      	bne.n	8002820 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027fc:	e009      	b.n	8002812 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fe:	f7fe fc43 	bl	8001088 <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	4a4d      	ldr	r2, [pc, #308]	@ (8002940 <HAL_RCC_ClockConfig+0x274>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e08f      	b.n	8002932 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002812:	4b4c      	ldr	r3, [pc, #304]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	220c      	movs	r2, #12
 8002818:	4013      	ands	r3, r2
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d1ef      	bne.n	80027fe <HAL_RCC_ClockConfig+0x132>
 800281e:	e024      	b.n	800286a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d11b      	bne.n	8002860 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002828:	e009      	b.n	800283e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282a:	f7fe fc2d 	bl	8001088 <HAL_GetTick>
 800282e:	0002      	movs	r2, r0
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	4a42      	ldr	r2, [pc, #264]	@ (8002940 <HAL_RCC_ClockConfig+0x274>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e079      	b.n	8002932 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800283e:	4b41      	ldr	r3, [pc, #260]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	220c      	movs	r2, #12
 8002844:	4013      	ands	r3, r2
 8002846:	2b04      	cmp	r3, #4
 8002848:	d1ef      	bne.n	800282a <HAL_RCC_ClockConfig+0x15e>
 800284a:	e00e      	b.n	800286a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284c:	f7fe fc1c 	bl	8001088 <HAL_GetTick>
 8002850:	0002      	movs	r2, r0
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	4a3a      	ldr	r2, [pc, #232]	@ (8002940 <HAL_RCC_ClockConfig+0x274>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e068      	b.n	8002932 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002860:	4b38      	ldr	r3, [pc, #224]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	220c      	movs	r2, #12
 8002866:	4013      	ands	r3, r2
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800286a:	4b34      	ldr	r3, [pc, #208]	@ (800293c <HAL_RCC_ClockConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2201      	movs	r2, #1
 8002870:	4013      	ands	r3, r2
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d21e      	bcs.n	80028b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002878:	4b30      	ldr	r3, [pc, #192]	@ (800293c <HAL_RCC_ClockConfig+0x270>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	4393      	bics	r3, r2
 8002880:	0019      	movs	r1, r3
 8002882:	4b2e      	ldr	r3, [pc, #184]	@ (800293c <HAL_RCC_ClockConfig+0x270>)
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800288a:	f7fe fbfd 	bl	8001088 <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	e009      	b.n	80028a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002894:	f7fe fbf8 	bl	8001088 <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	4a28      	ldr	r2, [pc, #160]	@ (8002940 <HAL_RCC_ClockConfig+0x274>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e044      	b.n	8002932 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a8:	4b24      	ldr	r3, [pc, #144]	@ (800293c <HAL_RCC_ClockConfig+0x270>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d1ee      	bne.n	8002894 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2204      	movs	r2, #4
 80028bc:	4013      	ands	r3, r2
 80028be:	d009      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b20      	ldr	r3, [pc, #128]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a20      	ldr	r2, [pc, #128]	@ (8002948 <HAL_RCC_ClockConfig+0x27c>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 80028d0:	430a      	orrs	r2, r1
 80028d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2208      	movs	r2, #8
 80028da:	4013      	ands	r3, r2
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028de:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	4a1a      	ldr	r2, [pc, #104]	@ (800294c <HAL_RCC_ClockConfig+0x280>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	0019      	movs	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	00da      	lsls	r2, r3, #3
 80028ee:	4b15      	ldr	r3, [pc, #84]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 80028f0:	430a      	orrs	r2, r1
 80028f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028f4:	f000 f832 	bl	800295c <HAL_RCC_GetSysClockFreq>
 80028f8:	0001      	movs	r1, r0
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_RCC_ClockConfig+0x278>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	220f      	movs	r2, #15
 8002902:	4013      	ands	r3, r2
 8002904:	4a12      	ldr	r2, [pc, #72]	@ (8002950 <HAL_RCC_ClockConfig+0x284>)
 8002906:	5cd3      	ldrb	r3, [r2, r3]
 8002908:	000a      	movs	r2, r1
 800290a:	40da      	lsrs	r2, r3
 800290c:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <HAL_RCC_ClockConfig+0x288>)
 800290e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002910:	4b11      	ldr	r3, [pc, #68]	@ (8002958 <HAL_RCC_ClockConfig+0x28c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	250b      	movs	r5, #11
 8002916:	197c      	adds	r4, r7, r5
 8002918:	0018      	movs	r0, r3
 800291a:	f7fe fb6f 	bl	8000ffc <HAL_InitTick>
 800291e:	0003      	movs	r3, r0
 8002920:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002922:	197b      	adds	r3, r7, r5
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800292a:	197b      	adds	r3, r7, r5
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	e000      	b.n	8002932 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b004      	add	sp, #16
 8002938:	bdb0      	pop	{r4, r5, r7, pc}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	40022000 	.word	0x40022000
 8002940:	00001388 	.word	0x00001388
 8002944:	40021000 	.word	0x40021000
 8002948:	fffff8ff 	.word	0xfffff8ff
 800294c:	ffffc7ff 	.word	0xffffc7ff
 8002950:	08004a18 	.word	0x08004a18
 8002954:	20000004 	.word	0x20000004
 8002958:	20000008 	.word	0x20000008

0800295c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002962:	4b3c      	ldr	r3, [pc, #240]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	220c      	movs	r2, #12
 800296c:	4013      	ands	r3, r2
 800296e:	2b0c      	cmp	r3, #12
 8002970:	d013      	beq.n	800299a <HAL_RCC_GetSysClockFreq+0x3e>
 8002972:	d85c      	bhi.n	8002a2e <HAL_RCC_GetSysClockFreq+0xd2>
 8002974:	2b04      	cmp	r3, #4
 8002976:	d002      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0x22>
 8002978:	2b08      	cmp	r3, #8
 800297a:	d00b      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x38>
 800297c:	e057      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800297e:	4b35      	ldr	r3, [pc, #212]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2210      	movs	r2, #16
 8002984:	4013      	ands	r3, r2
 8002986:	d002      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002988:	4b33      	ldr	r3, [pc, #204]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0xfc>)
 800298a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800298c:	e05d      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800298e:	4b33      	ldr	r3, [pc, #204]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x100>)
 8002990:	613b      	str	r3, [r7, #16]
      break;
 8002992:	e05a      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002994:	4b32      	ldr	r3, [pc, #200]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x104>)
 8002996:	613b      	str	r3, [r7, #16]
      break;
 8002998:	e057      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	0c9b      	lsrs	r3, r3, #18
 800299e:	220f      	movs	r2, #15
 80029a0:	4013      	ands	r3, r2
 80029a2:	4a30      	ldr	r2, [pc, #192]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a4:	5cd3      	ldrb	r3, [r2, r3]
 80029a6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	0d9b      	lsrs	r3, r3, #22
 80029ac:	2203      	movs	r2, #3
 80029ae:	4013      	ands	r3, r2
 80029b0:	3301      	adds	r3, #1
 80029b2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029b4:	4b27      	ldr	r3, [pc, #156]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	2380      	movs	r3, #128	@ 0x80
 80029ba:	025b      	lsls	r3, r3, #9
 80029bc:	4013      	ands	r3, r2
 80029be:	d00f      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	000a      	movs	r2, r1
 80029c4:	0152      	lsls	r2, r2, #5
 80029c6:	1a52      	subs	r2, r2, r1
 80029c8:	0193      	lsls	r3, r2, #6
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	185b      	adds	r3, r3, r1
 80029d0:	025b      	lsls	r3, r3, #9
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f7fd fba1 	bl	800011c <__udivsi3>
 80029da:	0003      	movs	r3, r0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	e023      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2210      	movs	r2, #16
 80029e6:	4013      	ands	r3, r2
 80029e8:	d00f      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	000a      	movs	r2, r1
 80029ee:	0152      	lsls	r2, r2, #5
 80029f0:	1a52      	subs	r2, r2, r1
 80029f2:	0193      	lsls	r3, r2, #6
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	185b      	adds	r3, r3, r1
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	0018      	movs	r0, r3
 8002a00:	f7fd fb8c 	bl	800011c <__udivsi3>
 8002a04:	0003      	movs	r3, r0
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	e00e      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	000a      	movs	r2, r1
 8002a0e:	0152      	lsls	r2, r2, #5
 8002a10:	1a52      	subs	r2, r2, r1
 8002a12:	0193      	lsls	r3, r2, #6
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	185b      	adds	r3, r3, r1
 8002a1a:	029b      	lsls	r3, r3, #10
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f7fd fb7c 	bl	800011c <__udivsi3>
 8002a24:	0003      	movs	r3, r0
 8002a26:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	613b      	str	r3, [r7, #16]
      break;
 8002a2c:	e00d      	b.n	8002a4a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a2e:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0b5b      	lsrs	r3, r3, #13
 8002a34:	2207      	movs	r2, #7
 8002a36:	4013      	ands	r3, r2
 8002a38:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	2280      	movs	r2, #128	@ 0x80
 8002a40:	0212      	lsls	r2, r2, #8
 8002a42:	409a      	lsls	r2, r3
 8002a44:	0013      	movs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
      break;
 8002a48:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a4a:	693b      	ldr	r3, [r7, #16]
}
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b006      	add	sp, #24
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	003d0900 	.word	0x003d0900
 8002a5c:	00f42400 	.word	0x00f42400
 8002a60:	007a1200 	.word	0x007a1200
 8002a64:	08004a28 	.word	0x08004a28

08002a68 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002a70:	2317      	movs	r3, #23
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d106      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	2380      	movs	r3, #128	@ 0x80
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d100      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002a8e:	e104      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a90:	4bb1      	ldr	r3, [pc, #708]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a94:	2380      	movs	r3, #128	@ 0x80
 8002a96:	055b      	lsls	r3, r3, #21
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d10a      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9c:	4bae      	ldr	r3, [pc, #696]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aa0:	4bad      	ldr	r3, [pc, #692]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002aa2:	2180      	movs	r1, #128	@ 0x80
 8002aa4:	0549      	lsls	r1, r1, #21
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002aaa:	2317      	movs	r3, #23
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab2:	4baa      	ldr	r3, [pc, #680]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	2380      	movs	r3, #128	@ 0x80
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4013      	ands	r3, r2
 8002abc:	d11a      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002abe:	4ba7      	ldr	r3, [pc, #668]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4ba6      	ldr	r3, [pc, #664]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ac4:	2180      	movs	r1, #128	@ 0x80
 8002ac6:	0049      	lsls	r1, r1, #1
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002acc:	f7fe fadc 	bl	8001088 <HAL_GetTick>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7fe fad7 	bl	8001088 <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	@ 0x64
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e133      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4b9c      	ldr	r3, [pc, #624]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	2380      	movs	r3, #128	@ 0x80
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4013      	ands	r3, r2
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002af4:	4b98      	ldr	r3, [pc, #608]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	23c0      	movs	r3, #192	@ 0xc0
 8002afa:	039b      	lsls	r3, r3, #14
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	23c0      	movs	r3, #192	@ 0xc0
 8002b06:	039b      	lsls	r3, r3, #14
 8002b08:	4013      	ands	r3, r2
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d107      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	23c0      	movs	r3, #192	@ 0xc0
 8002b16:	039b      	lsls	r3, r3, #14
 8002b18:	4013      	ands	r3, r2
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d013      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	23c0      	movs	r3, #192	@ 0xc0
 8002b26:	029b      	lsls	r3, r3, #10
 8002b28:	401a      	ands	r2, r3
 8002b2a:	23c0      	movs	r3, #192	@ 0xc0
 8002b2c:	029b      	lsls	r3, r3, #10
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d10a      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b32:	4b89      	ldr	r3, [pc, #548]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	2380      	movs	r3, #128	@ 0x80
 8002b38:	029b      	lsls	r3, r3, #10
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	2380      	movs	r3, #128	@ 0x80
 8002b3e:	029b      	lsls	r3, r3, #10
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d101      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e103      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b48:	4b83      	ldr	r3, [pc, #524]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b4c:	23c0      	movs	r3, #192	@ 0xc0
 8002b4e:	029b      	lsls	r3, r3, #10
 8002b50:	4013      	ands	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d049      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	23c0      	movs	r3, #192	@ 0xc0
 8002b60:	029b      	lsls	r3, r3, #10
 8002b62:	4013      	ands	r3, r2
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d004      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	4013      	ands	r3, r2
 8002b72:	d10d      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	23c0      	movs	r3, #192	@ 0xc0
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d034      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d02e      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b90:	4b71      	ldr	r3, [pc, #452]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b94:	4a72      	ldr	r2, [pc, #456]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002b9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b9e:	4b6e      	ldr	r3, [pc, #440]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ba0:	2180      	movs	r1, #128	@ 0x80
 8002ba2:	0309      	lsls	r1, r1, #12
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba8:	4b6b      	ldr	r3, [pc, #428]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002baa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bac:	4b6a      	ldr	r3, [pc, #424]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bae:	496d      	ldr	r1, [pc, #436]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002bb4:	4b68      	ldr	r3, [pc, #416]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	2380      	movs	r3, #128	@ 0x80
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d014      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fa60 	bl	8001088 <HAL_GetTick>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bcc:	e009      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7fe fa5b 	bl	8001088 <HAL_GetTick>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	4a63      	ldr	r2, [pc, #396]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0b6      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002be2:	4b5d      	ldr	r3, [pc, #372]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002be4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4013      	ands	r3, r2
 8002bec:	d0ef      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d01f      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	23c0      	movs	r3, #192	@ 0xc0
 8002c00:	029b      	lsls	r3, r3, #10
 8002c02:	401a      	ands	r2, r3
 8002c04:	23c0      	movs	r3, #192	@ 0xc0
 8002c06:	029b      	lsls	r3, r3, #10
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d10c      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002c0c:	4b52      	ldr	r3, [pc, #328]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a56      	ldr	r2, [pc, #344]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	0019      	movs	r1, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	23c0      	movs	r3, #192	@ 0xc0
 8002c1c:	039b      	lsls	r3, r3, #14
 8002c1e:	401a      	ands	r2, r3
 8002c20:	4b4d      	ldr	r3, [pc, #308]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	4b4c      	ldr	r3, [pc, #304]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	23c0      	movs	r3, #192	@ 0xc0
 8002c30:	029b      	lsls	r3, r3, #10
 8002c32:	401a      	ands	r2, r3
 8002c34:	4b48      	ldr	r3, [pc, #288]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c36:	430a      	orrs	r2, r1
 8002c38:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	4013      	ands	r3, r2
 8002c42:	d01f      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	23c0      	movs	r3, #192	@ 0xc0
 8002c4a:	029b      	lsls	r3, r3, #10
 8002c4c:	401a      	ands	r2, r3
 8002c4e:	23c0      	movs	r3, #192	@ 0xc0
 8002c50:	029b      	lsls	r3, r3, #10
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002c56:	4b40      	ldr	r3, [pc, #256]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a44      	ldr	r2, [pc, #272]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	23c0      	movs	r3, #192	@ 0xc0
 8002c66:	039b      	lsls	r3, r3, #14
 8002c68:	401a      	ands	r2, r3
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	4b39      	ldr	r3, [pc, #228]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c72:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	23c0      	movs	r3, #192	@ 0xc0
 8002c7a:	029b      	lsls	r3, r3, #10
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	4b36      	ldr	r3, [pc, #216]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c80:	430a      	orrs	r2, r1
 8002c82:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c84:	2317      	movs	r3, #23
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d105      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c8e:	4b32      	ldr	r3, [pc, #200]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c92:	4b31      	ldr	r3, [pc, #196]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c94:	4936      	ldr	r1, [pc, #216]	@ (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d009      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca8:	2203      	movs	r2, #3
 8002caa:	4393      	bics	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	4b29      	ldr	r3, [pc, #164]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cc2:	4b25      	ldr	r3, [pc, #148]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc6:	220c      	movs	r2, #12
 8002cc8:	4393      	bics	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	4b21      	ldr	r3, [pc, #132]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce4:	4a23      	ldr	r2, [pc, #140]	@ (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	4b1a      	ldr	r3, [pc, #104]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cfe:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d02:	4a1d      	ldr	r2, [pc, #116]	@ (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	0019      	movs	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	4b12      	ldr	r3, [pc, #72]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2240      	movs	r2, #64	@ 0x40
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d009      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d20:	4a16      	ldr	r2, [pc, #88]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	0019      	movs	r1, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1a      	ldr	r2, [r3, #32]
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2280      	movs	r2, #128	@ 0x80
 8002d36:	4013      	ands	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002d3a:	4b07      	ldr	r3, [pc, #28]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3e:	4a10      	ldr	r2, [pc, #64]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	0019      	movs	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	4b03      	ldr	r3, [pc, #12]	@ (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b006      	add	sp, #24
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	fffcffff 	.word	0xfffcffff
 8002d64:	fff7ffff 	.word	0xfff7ffff
 8002d68:	00001388 	.word	0x00001388
 8002d6c:	ffcfffff 	.word	0xffcfffff
 8002d70:	efffffff 	.word	0xefffffff
 8002d74:	fffff3ff 	.word	0xfffff3ff
 8002d78:	ffffcfff 	.word	0xffffcfff
 8002d7c:	fbffffff 	.word	0xfbffffff
 8002d80:	fff3ffff 	.word	0xfff3ffff

08002d84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d84:	b5b0      	push	{r4, r5, r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d8c:	230f      	movs	r3, #15
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	2201      	movs	r2, #1
 8002d92:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e088      	b.n	8002eb0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2221      	movs	r2, #33	@ 0x21
 8002da2:	5c9b      	ldrb	r3, [r3, r2]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d107      	bne.n	8002dba <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	2100      	movs	r1, #0
 8002db0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	0018      	movs	r0, r3
 8002db6:	f7fe f869 	bl	8000e8c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2221      	movs	r2, #33	@ 0x21
 8002dbe:	2102      	movs	r1, #2
 8002dc0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2210      	movs	r2, #16
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	d05f      	beq.n	8002e90 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	22ca      	movs	r2, #202	@ 0xca
 8002dd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2253      	movs	r2, #83	@ 0x53
 8002dde:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002de0:	250f      	movs	r5, #15
 8002de2:	197c      	adds	r4, r7, r5
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	0018      	movs	r0, r3
 8002de8:	f000 f9e8 	bl	80031bc <RTC_EnterInitMode>
 8002dec:	0003      	movs	r3, r0
 8002dee:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002df0:	0028      	movs	r0, r5
 8002df2:	183b      	adds	r3, r7, r0
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d12c      	bne.n	8002e54 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	492c      	ldr	r1, [pc, #176]	@ (8002eb8 <HAL_RTC_Init+0x134>)
 8002e06:	400a      	ands	r2, r1
 8002e08:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6899      	ldr	r1, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68d2      	ldr	r2, [r2, #12]
 8002e30:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6919      	ldr	r1, [r3, #16]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	041a      	lsls	r2, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002e46:	183c      	adds	r4, r7, r0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 f9fa 	bl	8003244 <RTC_ExitInitMode>
 8002e50:	0003      	movs	r3, r0
 8002e52:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002e54:	230f      	movs	r3, #15
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d113      	bne.n	8002e86 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2103      	movs	r1, #3
 8002e6a:	438a      	bics	r2, r1
 8002e6c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	22ff      	movs	r2, #255	@ 0xff
 8002e8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e8e:	e003      	b.n	8002e98 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002e90:	230f      	movs	r3, #15
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002e98:	230f      	movs	r3, #15
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2221      	movs	r2, #33	@ 0x21
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002eaa:	230f      	movs	r3, #15
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	781b      	ldrb	r3, [r3, #0]
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b004      	add	sp, #16
 8002eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb8:	ff8fffbf 	.word	0xff8fffbf

08002ebc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ebc:	b5b0      	push	{r4, r5, r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	5c9b      	ldrb	r3, [r3, r2]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_RTC_SetTime+0x1e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e092      	b.n	8003000 <HAL_RTC_SetTime+0x144>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	2101      	movs	r1, #1
 8002ee0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2221      	movs	r2, #33	@ 0x21
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d125      	bne.n	8002f3c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	2240      	movs	r2, #64	@ 0x40
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d102      	bne.n	8002f02 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2200      	movs	r2, #0
 8002f00:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 f9c6 	bl	8003298 <RTC_ByteToBcd2>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	785b      	ldrb	r3, [r3, #1]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 f9bf 	bl	8003298 <RTC_ByteToBcd2>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f1e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	789b      	ldrb	r3, [r3, #2]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 f9b7 	bl	8003298 <RTC_ByteToBcd2>
 8002f2a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f2c:	0022      	movs	r2, r4
 8002f2e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	78db      	ldrb	r3, [r3, #3]
 8002f34:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002f36:	4313      	orrs	r3, r2
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	e017      	b.n	8002f6c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2240      	movs	r2, #64	@ 0x40
 8002f44:	4013      	ands	r3, r2
 8002f46:	d102      	bne.n	8002f4e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	785b      	ldrb	r3, [r3, #1]
 8002f58:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002f5a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002f60:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	78db      	ldrb	r3, [r3, #3]
 8002f66:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	22ca      	movs	r2, #202	@ 0xca
 8002f72:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2253      	movs	r2, #83	@ 0x53
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f7c:	2513      	movs	r5, #19
 8002f7e:	197c      	adds	r4, r7, r5
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 f91a 	bl	80031bc <RTC_EnterInitMode>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002f8c:	0028      	movs	r0, r5
 8002f8e:	183b      	adds	r3, r7, r0
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d120      	bne.n	8002fd8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	491a      	ldr	r1, [pc, #104]	@ (8003008 <HAL_RTC_SetTime+0x14c>)
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4917      	ldr	r1, [pc, #92]	@ (800300c <HAL_RTC_SetTime+0x150>)
 8002fae:	400a      	ands	r2, r1
 8002fb0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6899      	ldr	r1, [r3, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002fca:	183c      	adds	r4, r7, r0
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 f938 	bl	8003244 <RTC_ExitInitMode>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8002fd8:	2313      	movs	r3, #19
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2221      	movs	r2, #33	@ 0x21
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	22ff      	movs	r2, #255	@ 0xff
 8002ff0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	5499      	strb	r1, [r3, r2]

  return status;
 8002ffa:	2313      	movs	r3, #19
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	781b      	ldrb	r3, [r3, #0]
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b006      	add	sp, #24
 8003006:	bdb0      	pop	{r4, r5, r7, pc}
 8003008:	007f7f7f 	.word	0x007f7f7f
 800300c:	fffbffff 	.word	0xfffbffff

08003010 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	045b      	lsls	r3, r3, #17
 8003032:	0c5a      	lsrs	r2, r3, #17
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a22      	ldr	r2, [pc, #136]	@ (80030c8 <HAL_RTC_GetTime+0xb8>)
 8003040:	4013      	ands	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	b2db      	uxtb	r3, r3
 800304a:	223f      	movs	r2, #63	@ 0x3f
 800304c:	4013      	ands	r3, r2
 800304e:	b2da      	uxtb	r2, r3
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	0a1b      	lsrs	r3, r3, #8
 8003058:	b2db      	uxtb	r3, r3
 800305a:	227f      	movs	r2, #127	@ 0x7f
 800305c:	4013      	ands	r3, r2
 800305e:	b2da      	uxtb	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	227f      	movs	r2, #127	@ 0x7f
 800306a:	4013      	ands	r3, r2
 800306c:	b2da      	uxtb	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	0d9b      	lsrs	r3, r3, #22
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2201      	movs	r2, #1
 800307a:	4013      	ands	r3, r2
 800307c:	b2da      	uxtb	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d11a      	bne.n	80030be <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	0018      	movs	r0, r3
 800308e:	f000 f924 	bl	80032da <RTC_Bcd2ToByte>
 8003092:	0003      	movs	r3, r0
 8003094:	001a      	movs	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	785b      	ldrb	r3, [r3, #1]
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 f91b 	bl	80032da <RTC_Bcd2ToByte>
 80030a4:	0003      	movs	r3, r0
 80030a6:	001a      	movs	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	789b      	ldrb	r3, [r3, #2]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 f912 	bl	80032da <RTC_Bcd2ToByte>
 80030b6:	0003      	movs	r3, r0
 80030b8:	001a      	movs	r2, r3
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b006      	add	sp, #24
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	007f7f7f 	.word	0x007f7f7f

080030cc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a21      	ldr	r2, [pc, #132]	@ (8003168 <HAL_RTC_GetDate+0x9c>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	0c1b      	lsrs	r3, r3, #16
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	221f      	movs	r2, #31
 80030fa:	4013      	ands	r3, r2
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	223f      	movs	r2, #63	@ 0x3f
 8003108:	4013      	ands	r3, r2
 800310a:	b2da      	uxtb	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	0b5b      	lsrs	r3, r3, #13
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2207      	movs	r2, #7
 8003118:	4013      	ands	r3, r2
 800311a:	b2da      	uxtb	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d11a      	bne.n	800315c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	78db      	ldrb	r3, [r3, #3]
 800312a:	0018      	movs	r0, r3
 800312c:	f000 f8d5 	bl	80032da <RTC_Bcd2ToByte>
 8003130:	0003      	movs	r3, r0
 8003132:	001a      	movs	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	785b      	ldrb	r3, [r3, #1]
 800313c:	0018      	movs	r0, r3
 800313e:	f000 f8cc 	bl	80032da <RTC_Bcd2ToByte>
 8003142:	0003      	movs	r3, r0
 8003144:	001a      	movs	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	789b      	ldrb	r3, [r3, #2]
 800314e:	0018      	movs	r0, r3
 8003150:	f000 f8c3 	bl	80032da <RTC_Bcd2ToByte>
 8003154:	0003      	movs	r3, r0
 8003156:	001a      	movs	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b006      	add	sp, #24
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	00ffff3f 	.word	0x00ffff3f

0800316c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0e      	ldr	r2, [pc, #56]	@ (80031b8 <HAL_RTC_WaitForSynchro+0x4c>)
 800317e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003180:	f7fd ff82 	bl	8001088 <HAL_GetTick>
 8003184:	0003      	movs	r3, r0
 8003186:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003188:	e00a      	b.n	80031a0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800318a:	f7fd ff7d 	bl	8001088 <HAL_GetTick>
 800318e:	0002      	movs	r2, r0
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1ad2      	subs	r2, r2, r3
 8003194:	23fa      	movs	r3, #250	@ 0xfa
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	429a      	cmp	r2, r3
 800319a:	d901      	bls.n	80031a0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e006      	b.n	80031ae <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	4013      	ands	r3, r2
 80031aa:	d0ee      	beq.n	800318a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	0018      	movs	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b004      	add	sp, #16
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	00017f5f 	.word	0x00017f5f

080031bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031c8:	230f      	movs	r3, #15
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2240      	movs	r2, #64	@ 0x40
 80031d8:	4013      	ands	r3, r2
 80031da:	d12c      	bne.n	8003236 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2180      	movs	r1, #128	@ 0x80
 80031e8:	430a      	orrs	r2, r1
 80031ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031ec:	f7fd ff4c 	bl	8001088 <HAL_GetTick>
 80031f0:	0003      	movs	r3, r0
 80031f2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80031f4:	e014      	b.n	8003220 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031f6:	f7fd ff47 	bl	8001088 <HAL_GetTick>
 80031fa:	0002      	movs	r2, r0
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	1ad2      	subs	r2, r2, r3
 8003200:	200f      	movs	r0, #15
 8003202:	183b      	adds	r3, r7, r0
 8003204:	1839      	adds	r1, r7, r0
 8003206:	7809      	ldrb	r1, [r1, #0]
 8003208:	7019      	strb	r1, [r3, #0]
 800320a:	23fa      	movs	r3, #250	@ 0xfa
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	429a      	cmp	r2, r3
 8003210:	d906      	bls.n	8003220 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2221      	movs	r2, #33	@ 0x21
 8003216:	2104      	movs	r1, #4
 8003218:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800321a:	183b      	adds	r3, r7, r0
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2240      	movs	r2, #64	@ 0x40
 8003228:	4013      	ands	r3, r2
 800322a:	d104      	bne.n	8003236 <RTC_EnterInitMode+0x7a>
 800322c:	230f      	movs	r3, #15
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d1df      	bne.n	80031f6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8003236:	230f      	movs	r3, #15
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	781b      	ldrb	r3, [r3, #0]
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b004      	add	sp, #16
 8003242:	bd80      	pop	{r7, pc}

08003244 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800324c:	240f      	movs	r4, #15
 800324e:	193b      	adds	r3, r7, r4
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2180      	movs	r1, #128	@ 0x80
 8003260:	438a      	bics	r2, r1
 8003262:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2220      	movs	r2, #32
 800326c:	4013      	ands	r3, r2
 800326e:	d10c      	bne.n	800328a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	0018      	movs	r0, r3
 8003274:	f7ff ff7a 	bl	800316c <HAL_RTC_WaitForSynchro>
 8003278:	1e03      	subs	r3, r0, #0
 800327a:	d006      	beq.n	800328a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2221      	movs	r2, #33	@ 0x21
 8003280:	2104      	movs	r1, #4
 8003282:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8003284:	193b      	adds	r3, r7, r4
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800328a:	230f      	movs	r3, #15
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	781b      	ldrb	r3, [r3, #0]
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	b005      	add	sp, #20
 8003296:	bd90      	pop	{r4, r7, pc}

08003298 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	0002      	movs	r2, r0
 80032a0:	1dfb      	adds	r3, r7, #7
 80032a2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80032a8:	e007      	b.n	80032ba <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3301      	adds	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80032b0:	1dfb      	adds	r3, r7, #7
 80032b2:	1dfa      	adds	r2, r7, #7
 80032b4:	7812      	ldrb	r2, [r2, #0]
 80032b6:	3a0a      	subs	r2, #10
 80032b8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80032ba:	1dfb      	adds	r3, r7, #7
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b09      	cmp	r3, #9
 80032c0:	d8f3      	bhi.n	80032aa <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	1dfb      	adds	r3, r7, #7
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	b2db      	uxtb	r3, r3
}
 80032d2:	0018      	movs	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b004      	add	sp, #16
 80032d8:	bd80      	pop	{r7, pc}

080032da <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	0002      	movs	r2, r0
 80032e2:	1dfb      	adds	r3, r7, #7
 80032e4:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80032ea:	1dfb      	adds	r3, r7, #7
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	091b      	lsrs	r3, r3, #4
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	001a      	movs	r2, r3
 80032f4:	0013      	movs	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	189b      	adds	r3, r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	1dfb      	adds	r3, r7, #7
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	210f      	movs	r1, #15
 8003308:	400b      	ands	r3, r1
 800330a:	b2db      	uxtb	r3, r3
 800330c:	18d3      	adds	r3, r2, r3
 800330e:	b2db      	uxtb	r3, r3
}
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	b004      	add	sp, #16
 8003316:	bd80      	pop	{r7, pc}

08003318 <siprintf>:
 8003318:	b40e      	push	{r1, r2, r3}
 800331a:	b510      	push	{r4, lr}
 800331c:	2400      	movs	r4, #0
 800331e:	490c      	ldr	r1, [pc, #48]	@ (8003350 <siprintf+0x38>)
 8003320:	b09d      	sub	sp, #116	@ 0x74
 8003322:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003324:	9002      	str	r0, [sp, #8]
 8003326:	9006      	str	r0, [sp, #24]
 8003328:	9107      	str	r1, [sp, #28]
 800332a:	9104      	str	r1, [sp, #16]
 800332c:	4809      	ldr	r0, [pc, #36]	@ (8003354 <siprintf+0x3c>)
 800332e:	490a      	ldr	r1, [pc, #40]	@ (8003358 <siprintf+0x40>)
 8003330:	cb04      	ldmia	r3!, {r2}
 8003332:	9105      	str	r1, [sp, #20]
 8003334:	6800      	ldr	r0, [r0, #0]
 8003336:	a902      	add	r1, sp, #8
 8003338:	9301      	str	r3, [sp, #4]
 800333a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800333c:	f000 f9ba 	bl	80036b4 <_svfiprintf_r>
 8003340:	9b02      	ldr	r3, [sp, #8]
 8003342:	701c      	strb	r4, [r3, #0]
 8003344:	b01d      	add	sp, #116	@ 0x74
 8003346:	bc10      	pop	{r4}
 8003348:	bc08      	pop	{r3}
 800334a:	b003      	add	sp, #12
 800334c:	4718      	bx	r3
 800334e:	46c0      	nop			@ (mov r8, r8)
 8003350:	7fffffff 	.word	0x7fffffff
 8003354:	20000010 	.word	0x20000010
 8003358:	ffff0208 	.word	0xffff0208

0800335c <memmove>:
 800335c:	b510      	push	{r4, lr}
 800335e:	4288      	cmp	r0, r1
 8003360:	d902      	bls.n	8003368 <memmove+0xc>
 8003362:	188b      	adds	r3, r1, r2
 8003364:	4298      	cmp	r0, r3
 8003366:	d308      	bcc.n	800337a <memmove+0x1e>
 8003368:	2300      	movs	r3, #0
 800336a:	429a      	cmp	r2, r3
 800336c:	d007      	beq.n	800337e <memmove+0x22>
 800336e:	5ccc      	ldrb	r4, [r1, r3]
 8003370:	54c4      	strb	r4, [r0, r3]
 8003372:	3301      	adds	r3, #1
 8003374:	e7f9      	b.n	800336a <memmove+0xe>
 8003376:	5c8b      	ldrb	r3, [r1, r2]
 8003378:	5483      	strb	r3, [r0, r2]
 800337a:	3a01      	subs	r2, #1
 800337c:	d2fb      	bcs.n	8003376 <memmove+0x1a>
 800337e:	bd10      	pop	{r4, pc}

08003380 <memset>:
 8003380:	0003      	movs	r3, r0
 8003382:	1882      	adds	r2, r0, r2
 8003384:	4293      	cmp	r3, r2
 8003386:	d100      	bne.n	800338a <memset+0xa>
 8003388:	4770      	bx	lr
 800338a:	7019      	strb	r1, [r3, #0]
 800338c:	3301      	adds	r3, #1
 800338e:	e7f9      	b.n	8003384 <memset+0x4>

08003390 <__errno>:
 8003390:	4b01      	ldr	r3, [pc, #4]	@ (8003398 <__errno+0x8>)
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	4770      	bx	lr
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	20000010 	.word	0x20000010

0800339c <__libc_init_array>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	2600      	movs	r6, #0
 80033a0:	4c0c      	ldr	r4, [pc, #48]	@ (80033d4 <__libc_init_array+0x38>)
 80033a2:	4d0d      	ldr	r5, [pc, #52]	@ (80033d8 <__libc_init_array+0x3c>)
 80033a4:	1b64      	subs	r4, r4, r5
 80033a6:	10a4      	asrs	r4, r4, #2
 80033a8:	42a6      	cmp	r6, r4
 80033aa:	d109      	bne.n	80033c0 <__libc_init_array+0x24>
 80033ac:	2600      	movs	r6, #0
 80033ae:	f000 fc51 	bl	8003c54 <_init>
 80033b2:	4c0a      	ldr	r4, [pc, #40]	@ (80033dc <__libc_init_array+0x40>)
 80033b4:	4d0a      	ldr	r5, [pc, #40]	@ (80033e0 <__libc_init_array+0x44>)
 80033b6:	1b64      	subs	r4, r4, r5
 80033b8:	10a4      	asrs	r4, r4, #2
 80033ba:	42a6      	cmp	r6, r4
 80033bc:	d105      	bne.n	80033ca <__libc_init_array+0x2e>
 80033be:	bd70      	pop	{r4, r5, r6, pc}
 80033c0:	00b3      	lsls	r3, r6, #2
 80033c2:	58eb      	ldr	r3, [r5, r3]
 80033c4:	4798      	blx	r3
 80033c6:	3601      	adds	r6, #1
 80033c8:	e7ee      	b.n	80033a8 <__libc_init_array+0xc>
 80033ca:	00b3      	lsls	r3, r6, #2
 80033cc:	58eb      	ldr	r3, [r5, r3]
 80033ce:	4798      	blx	r3
 80033d0:	3601      	adds	r6, #1
 80033d2:	e7f2      	b.n	80033ba <__libc_init_array+0x1e>
 80033d4:	08004a64 	.word	0x08004a64
 80033d8:	08004a64 	.word	0x08004a64
 80033dc:	08004a68 	.word	0x08004a68
 80033e0:	08004a64 	.word	0x08004a64

080033e4 <__retarget_lock_acquire_recursive>:
 80033e4:	4770      	bx	lr

080033e6 <__retarget_lock_release_recursive>:
 80033e6:	4770      	bx	lr

080033e8 <memcpy>:
 80033e8:	2300      	movs	r3, #0
 80033ea:	b510      	push	{r4, lr}
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d100      	bne.n	80033f2 <memcpy+0xa>
 80033f0:	bd10      	pop	{r4, pc}
 80033f2:	5ccc      	ldrb	r4, [r1, r3]
 80033f4:	54c4      	strb	r4, [r0, r3]
 80033f6:	3301      	adds	r3, #1
 80033f8:	e7f8      	b.n	80033ec <memcpy+0x4>
	...

080033fc <_free_r>:
 80033fc:	b570      	push	{r4, r5, r6, lr}
 80033fe:	0005      	movs	r5, r0
 8003400:	1e0c      	subs	r4, r1, #0
 8003402:	d010      	beq.n	8003426 <_free_r+0x2a>
 8003404:	3c04      	subs	r4, #4
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	da00      	bge.n	800340e <_free_r+0x12>
 800340c:	18e4      	adds	r4, r4, r3
 800340e:	0028      	movs	r0, r5
 8003410:	f000 f8e0 	bl	80035d4 <__malloc_lock>
 8003414:	4a1d      	ldr	r2, [pc, #116]	@ (800348c <_free_r+0x90>)
 8003416:	6813      	ldr	r3, [r2, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <_free_r+0x2c>
 800341c:	6063      	str	r3, [r4, #4]
 800341e:	6014      	str	r4, [r2, #0]
 8003420:	0028      	movs	r0, r5
 8003422:	f000 f8df 	bl	80035e4 <__malloc_unlock>
 8003426:	bd70      	pop	{r4, r5, r6, pc}
 8003428:	42a3      	cmp	r3, r4
 800342a:	d908      	bls.n	800343e <_free_r+0x42>
 800342c:	6820      	ldr	r0, [r4, #0]
 800342e:	1821      	adds	r1, r4, r0
 8003430:	428b      	cmp	r3, r1
 8003432:	d1f3      	bne.n	800341c <_free_r+0x20>
 8003434:	6819      	ldr	r1, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	1809      	adds	r1, r1, r0
 800343a:	6021      	str	r1, [r4, #0]
 800343c:	e7ee      	b.n	800341c <_free_r+0x20>
 800343e:	001a      	movs	r2, r3
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <_free_r+0x4e>
 8003446:	42a3      	cmp	r3, r4
 8003448:	d9f9      	bls.n	800343e <_free_r+0x42>
 800344a:	6811      	ldr	r1, [r2, #0]
 800344c:	1850      	adds	r0, r2, r1
 800344e:	42a0      	cmp	r0, r4
 8003450:	d10b      	bne.n	800346a <_free_r+0x6e>
 8003452:	6820      	ldr	r0, [r4, #0]
 8003454:	1809      	adds	r1, r1, r0
 8003456:	1850      	adds	r0, r2, r1
 8003458:	6011      	str	r1, [r2, #0]
 800345a:	4283      	cmp	r3, r0
 800345c:	d1e0      	bne.n	8003420 <_free_r+0x24>
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	1841      	adds	r1, r0, r1
 8003464:	6011      	str	r1, [r2, #0]
 8003466:	6053      	str	r3, [r2, #4]
 8003468:	e7da      	b.n	8003420 <_free_r+0x24>
 800346a:	42a0      	cmp	r0, r4
 800346c:	d902      	bls.n	8003474 <_free_r+0x78>
 800346e:	230c      	movs	r3, #12
 8003470:	602b      	str	r3, [r5, #0]
 8003472:	e7d5      	b.n	8003420 <_free_r+0x24>
 8003474:	6820      	ldr	r0, [r4, #0]
 8003476:	1821      	adds	r1, r4, r0
 8003478:	428b      	cmp	r3, r1
 800347a:	d103      	bne.n	8003484 <_free_r+0x88>
 800347c:	6819      	ldr	r1, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	1809      	adds	r1, r1, r0
 8003482:	6021      	str	r1, [r4, #0]
 8003484:	6063      	str	r3, [r4, #4]
 8003486:	6054      	str	r4, [r2, #4]
 8003488:	e7ca      	b.n	8003420 <_free_r+0x24>
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	20000678 	.word	0x20000678

08003490 <sbrk_aligned>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	4e0f      	ldr	r6, [pc, #60]	@ (80034d0 <sbrk_aligned+0x40>)
 8003494:	000d      	movs	r5, r1
 8003496:	6831      	ldr	r1, [r6, #0]
 8003498:	0004      	movs	r4, r0
 800349a:	2900      	cmp	r1, #0
 800349c:	d102      	bne.n	80034a4 <sbrk_aligned+0x14>
 800349e:	f000 fb83 	bl	8003ba8 <_sbrk_r>
 80034a2:	6030      	str	r0, [r6, #0]
 80034a4:	0029      	movs	r1, r5
 80034a6:	0020      	movs	r0, r4
 80034a8:	f000 fb7e 	bl	8003ba8 <_sbrk_r>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d103      	bne.n	80034b8 <sbrk_aligned+0x28>
 80034b0:	2501      	movs	r5, #1
 80034b2:	426d      	negs	r5, r5
 80034b4:	0028      	movs	r0, r5
 80034b6:	bd70      	pop	{r4, r5, r6, pc}
 80034b8:	2303      	movs	r3, #3
 80034ba:	1cc5      	adds	r5, r0, #3
 80034bc:	439d      	bics	r5, r3
 80034be:	42a8      	cmp	r0, r5
 80034c0:	d0f8      	beq.n	80034b4 <sbrk_aligned+0x24>
 80034c2:	1a29      	subs	r1, r5, r0
 80034c4:	0020      	movs	r0, r4
 80034c6:	f000 fb6f 	bl	8003ba8 <_sbrk_r>
 80034ca:	3001      	adds	r0, #1
 80034cc:	d1f2      	bne.n	80034b4 <sbrk_aligned+0x24>
 80034ce:	e7ef      	b.n	80034b0 <sbrk_aligned+0x20>
 80034d0:	20000674 	.word	0x20000674

080034d4 <_malloc_r>:
 80034d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034d6:	2203      	movs	r2, #3
 80034d8:	1ccb      	adds	r3, r1, #3
 80034da:	4393      	bics	r3, r2
 80034dc:	3308      	adds	r3, #8
 80034de:	0005      	movs	r5, r0
 80034e0:	001f      	movs	r7, r3
 80034e2:	2b0c      	cmp	r3, #12
 80034e4:	d234      	bcs.n	8003550 <_malloc_r+0x7c>
 80034e6:	270c      	movs	r7, #12
 80034e8:	42b9      	cmp	r1, r7
 80034ea:	d833      	bhi.n	8003554 <_malloc_r+0x80>
 80034ec:	0028      	movs	r0, r5
 80034ee:	f000 f871 	bl	80035d4 <__malloc_lock>
 80034f2:	4e37      	ldr	r6, [pc, #220]	@ (80035d0 <_malloc_r+0xfc>)
 80034f4:	6833      	ldr	r3, [r6, #0]
 80034f6:	001c      	movs	r4, r3
 80034f8:	2c00      	cmp	r4, #0
 80034fa:	d12f      	bne.n	800355c <_malloc_r+0x88>
 80034fc:	0039      	movs	r1, r7
 80034fe:	0028      	movs	r0, r5
 8003500:	f7ff ffc6 	bl	8003490 <sbrk_aligned>
 8003504:	0004      	movs	r4, r0
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	d15f      	bne.n	80035ca <_malloc_r+0xf6>
 800350a:	6834      	ldr	r4, [r6, #0]
 800350c:	9400      	str	r4, [sp, #0]
 800350e:	9b00      	ldr	r3, [sp, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d14a      	bne.n	80035aa <_malloc_r+0xd6>
 8003514:	2c00      	cmp	r4, #0
 8003516:	d052      	beq.n	80035be <_malloc_r+0xea>
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	0028      	movs	r0, r5
 800351c:	18e3      	adds	r3, r4, r3
 800351e:	9900      	ldr	r1, [sp, #0]
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	f000 fb41 	bl	8003ba8 <_sbrk_r>
 8003526:	9b01      	ldr	r3, [sp, #4]
 8003528:	4283      	cmp	r3, r0
 800352a:	d148      	bne.n	80035be <_malloc_r+0xea>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	0028      	movs	r0, r5
 8003530:	1aff      	subs	r7, r7, r3
 8003532:	0039      	movs	r1, r7
 8003534:	f7ff ffac 	bl	8003490 <sbrk_aligned>
 8003538:	3001      	adds	r0, #1
 800353a:	d040      	beq.n	80035be <_malloc_r+0xea>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	19db      	adds	r3, r3, r7
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	6833      	ldr	r3, [r6, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	2a00      	cmp	r2, #0
 8003548:	d133      	bne.n	80035b2 <_malloc_r+0xde>
 800354a:	9b00      	ldr	r3, [sp, #0]
 800354c:	6033      	str	r3, [r6, #0]
 800354e:	e019      	b.n	8003584 <_malloc_r+0xb0>
 8003550:	2b00      	cmp	r3, #0
 8003552:	dac9      	bge.n	80034e8 <_malloc_r+0x14>
 8003554:	230c      	movs	r3, #12
 8003556:	602b      	str	r3, [r5, #0]
 8003558:	2000      	movs	r0, #0
 800355a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800355c:	6821      	ldr	r1, [r4, #0]
 800355e:	1bc9      	subs	r1, r1, r7
 8003560:	d420      	bmi.n	80035a4 <_malloc_r+0xd0>
 8003562:	290b      	cmp	r1, #11
 8003564:	d90a      	bls.n	800357c <_malloc_r+0xa8>
 8003566:	19e2      	adds	r2, r4, r7
 8003568:	6027      	str	r7, [r4, #0]
 800356a:	42a3      	cmp	r3, r4
 800356c:	d104      	bne.n	8003578 <_malloc_r+0xa4>
 800356e:	6032      	str	r2, [r6, #0]
 8003570:	6863      	ldr	r3, [r4, #4]
 8003572:	6011      	str	r1, [r2, #0]
 8003574:	6053      	str	r3, [r2, #4]
 8003576:	e005      	b.n	8003584 <_malloc_r+0xb0>
 8003578:	605a      	str	r2, [r3, #4]
 800357a:	e7f9      	b.n	8003570 <_malloc_r+0x9c>
 800357c:	6862      	ldr	r2, [r4, #4]
 800357e:	42a3      	cmp	r3, r4
 8003580:	d10e      	bne.n	80035a0 <_malloc_r+0xcc>
 8003582:	6032      	str	r2, [r6, #0]
 8003584:	0028      	movs	r0, r5
 8003586:	f000 f82d 	bl	80035e4 <__malloc_unlock>
 800358a:	0020      	movs	r0, r4
 800358c:	2207      	movs	r2, #7
 800358e:	300b      	adds	r0, #11
 8003590:	1d23      	adds	r3, r4, #4
 8003592:	4390      	bics	r0, r2
 8003594:	1ac2      	subs	r2, r0, r3
 8003596:	4298      	cmp	r0, r3
 8003598:	d0df      	beq.n	800355a <_malloc_r+0x86>
 800359a:	1a1b      	subs	r3, r3, r0
 800359c:	50a3      	str	r3, [r4, r2]
 800359e:	e7dc      	b.n	800355a <_malloc_r+0x86>
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	e7ef      	b.n	8003584 <_malloc_r+0xb0>
 80035a4:	0023      	movs	r3, r4
 80035a6:	6864      	ldr	r4, [r4, #4]
 80035a8:	e7a6      	b.n	80034f8 <_malloc_r+0x24>
 80035aa:	9c00      	ldr	r4, [sp, #0]
 80035ac:	6863      	ldr	r3, [r4, #4]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	e7ad      	b.n	800350e <_malloc_r+0x3a>
 80035b2:	001a      	movs	r2, r3
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	42a3      	cmp	r3, r4
 80035b8:	d1fb      	bne.n	80035b2 <_malloc_r+0xde>
 80035ba:	2300      	movs	r3, #0
 80035bc:	e7da      	b.n	8003574 <_malloc_r+0xa0>
 80035be:	230c      	movs	r3, #12
 80035c0:	0028      	movs	r0, r5
 80035c2:	602b      	str	r3, [r5, #0]
 80035c4:	f000 f80e 	bl	80035e4 <__malloc_unlock>
 80035c8:	e7c6      	b.n	8003558 <_malloc_r+0x84>
 80035ca:	6007      	str	r7, [r0, #0]
 80035cc:	e7da      	b.n	8003584 <_malloc_r+0xb0>
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	20000678 	.word	0x20000678

080035d4 <__malloc_lock>:
 80035d4:	b510      	push	{r4, lr}
 80035d6:	4802      	ldr	r0, [pc, #8]	@ (80035e0 <__malloc_lock+0xc>)
 80035d8:	f7ff ff04 	bl	80033e4 <__retarget_lock_acquire_recursive>
 80035dc:	bd10      	pop	{r4, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	20000670 	.word	0x20000670

080035e4 <__malloc_unlock>:
 80035e4:	b510      	push	{r4, lr}
 80035e6:	4802      	ldr	r0, [pc, #8]	@ (80035f0 <__malloc_unlock+0xc>)
 80035e8:	f7ff fefd 	bl	80033e6 <__retarget_lock_release_recursive>
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	20000670 	.word	0x20000670

080035f4 <__ssputs_r>:
 80035f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f6:	688e      	ldr	r6, [r1, #8]
 80035f8:	b085      	sub	sp, #20
 80035fa:	001f      	movs	r7, r3
 80035fc:	000c      	movs	r4, r1
 80035fe:	680b      	ldr	r3, [r1, #0]
 8003600:	9002      	str	r0, [sp, #8]
 8003602:	9203      	str	r2, [sp, #12]
 8003604:	42be      	cmp	r6, r7
 8003606:	d830      	bhi.n	800366a <__ssputs_r+0x76>
 8003608:	210c      	movs	r1, #12
 800360a:	5e62      	ldrsh	r2, [r4, r1]
 800360c:	2190      	movs	r1, #144	@ 0x90
 800360e:	00c9      	lsls	r1, r1, #3
 8003610:	420a      	tst	r2, r1
 8003612:	d028      	beq.n	8003666 <__ssputs_r+0x72>
 8003614:	2003      	movs	r0, #3
 8003616:	6921      	ldr	r1, [r4, #16]
 8003618:	1a5b      	subs	r3, r3, r1
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	6963      	ldr	r3, [r4, #20]
 800361e:	4343      	muls	r3, r0
 8003620:	9801      	ldr	r0, [sp, #4]
 8003622:	0fdd      	lsrs	r5, r3, #31
 8003624:	18ed      	adds	r5, r5, r3
 8003626:	1c7b      	adds	r3, r7, #1
 8003628:	181b      	adds	r3, r3, r0
 800362a:	106d      	asrs	r5, r5, #1
 800362c:	42ab      	cmp	r3, r5
 800362e:	d900      	bls.n	8003632 <__ssputs_r+0x3e>
 8003630:	001d      	movs	r5, r3
 8003632:	0552      	lsls	r2, r2, #21
 8003634:	d528      	bpl.n	8003688 <__ssputs_r+0x94>
 8003636:	0029      	movs	r1, r5
 8003638:	9802      	ldr	r0, [sp, #8]
 800363a:	f7ff ff4b 	bl	80034d4 <_malloc_r>
 800363e:	1e06      	subs	r6, r0, #0
 8003640:	d02c      	beq.n	800369c <__ssputs_r+0xa8>
 8003642:	9a01      	ldr	r2, [sp, #4]
 8003644:	6921      	ldr	r1, [r4, #16]
 8003646:	f7ff fecf 	bl	80033e8 <memcpy>
 800364a:	89a2      	ldrh	r2, [r4, #12]
 800364c:	4b18      	ldr	r3, [pc, #96]	@ (80036b0 <__ssputs_r+0xbc>)
 800364e:	401a      	ands	r2, r3
 8003650:	2380      	movs	r3, #128	@ 0x80
 8003652:	4313      	orrs	r3, r2
 8003654:	81a3      	strh	r3, [r4, #12]
 8003656:	9b01      	ldr	r3, [sp, #4]
 8003658:	6126      	str	r6, [r4, #16]
 800365a:	18f6      	adds	r6, r6, r3
 800365c:	6026      	str	r6, [r4, #0]
 800365e:	003e      	movs	r6, r7
 8003660:	6165      	str	r5, [r4, #20]
 8003662:	1aed      	subs	r5, r5, r3
 8003664:	60a5      	str	r5, [r4, #8]
 8003666:	42be      	cmp	r6, r7
 8003668:	d900      	bls.n	800366c <__ssputs_r+0x78>
 800366a:	003e      	movs	r6, r7
 800366c:	0032      	movs	r2, r6
 800366e:	9903      	ldr	r1, [sp, #12]
 8003670:	6820      	ldr	r0, [r4, #0]
 8003672:	f7ff fe73 	bl	800335c <memmove>
 8003676:	2000      	movs	r0, #0
 8003678:	68a3      	ldr	r3, [r4, #8]
 800367a:	1b9b      	subs	r3, r3, r6
 800367c:	60a3      	str	r3, [r4, #8]
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	199b      	adds	r3, r3, r6
 8003682:	6023      	str	r3, [r4, #0]
 8003684:	b005      	add	sp, #20
 8003686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003688:	002a      	movs	r2, r5
 800368a:	9802      	ldr	r0, [sp, #8]
 800368c:	f000 faa9 	bl	8003be2 <_realloc_r>
 8003690:	1e06      	subs	r6, r0, #0
 8003692:	d1e0      	bne.n	8003656 <__ssputs_r+0x62>
 8003694:	6921      	ldr	r1, [r4, #16]
 8003696:	9802      	ldr	r0, [sp, #8]
 8003698:	f7ff feb0 	bl	80033fc <_free_r>
 800369c:	230c      	movs	r3, #12
 800369e:	2001      	movs	r0, #1
 80036a0:	9a02      	ldr	r2, [sp, #8]
 80036a2:	4240      	negs	r0, r0
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	89a2      	ldrh	r2, [r4, #12]
 80036a8:	3334      	adds	r3, #52	@ 0x34
 80036aa:	4313      	orrs	r3, r2
 80036ac:	81a3      	strh	r3, [r4, #12]
 80036ae:	e7e9      	b.n	8003684 <__ssputs_r+0x90>
 80036b0:	fffffb7f 	.word	0xfffffb7f

080036b4 <_svfiprintf_r>:
 80036b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b6:	b0a1      	sub	sp, #132	@ 0x84
 80036b8:	9003      	str	r0, [sp, #12]
 80036ba:	001d      	movs	r5, r3
 80036bc:	898b      	ldrh	r3, [r1, #12]
 80036be:	000f      	movs	r7, r1
 80036c0:	0016      	movs	r6, r2
 80036c2:	061b      	lsls	r3, r3, #24
 80036c4:	d511      	bpl.n	80036ea <_svfiprintf_r+0x36>
 80036c6:	690b      	ldr	r3, [r1, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10e      	bne.n	80036ea <_svfiprintf_r+0x36>
 80036cc:	2140      	movs	r1, #64	@ 0x40
 80036ce:	f7ff ff01 	bl	80034d4 <_malloc_r>
 80036d2:	6038      	str	r0, [r7, #0]
 80036d4:	6138      	str	r0, [r7, #16]
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d105      	bne.n	80036e6 <_svfiprintf_r+0x32>
 80036da:	230c      	movs	r3, #12
 80036dc:	9a03      	ldr	r2, [sp, #12]
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	2001      	movs	r0, #1
 80036e2:	4240      	negs	r0, r0
 80036e4:	e0cf      	b.n	8003886 <_svfiprintf_r+0x1d2>
 80036e6:	2340      	movs	r3, #64	@ 0x40
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	2300      	movs	r3, #0
 80036ec:	ac08      	add	r4, sp, #32
 80036ee:	6163      	str	r3, [r4, #20]
 80036f0:	3320      	adds	r3, #32
 80036f2:	7663      	strb	r3, [r4, #25]
 80036f4:	3310      	adds	r3, #16
 80036f6:	76a3      	strb	r3, [r4, #26]
 80036f8:	9507      	str	r5, [sp, #28]
 80036fa:	0035      	movs	r5, r6
 80036fc:	782b      	ldrb	r3, [r5, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <_svfiprintf_r+0x52>
 8003702:	2b25      	cmp	r3, #37	@ 0x25
 8003704:	d148      	bne.n	8003798 <_svfiprintf_r+0xe4>
 8003706:	1bab      	subs	r3, r5, r6
 8003708:	9305      	str	r3, [sp, #20]
 800370a:	42b5      	cmp	r5, r6
 800370c:	d00b      	beq.n	8003726 <_svfiprintf_r+0x72>
 800370e:	0032      	movs	r2, r6
 8003710:	0039      	movs	r1, r7
 8003712:	9803      	ldr	r0, [sp, #12]
 8003714:	f7ff ff6e 	bl	80035f4 <__ssputs_r>
 8003718:	3001      	adds	r0, #1
 800371a:	d100      	bne.n	800371e <_svfiprintf_r+0x6a>
 800371c:	e0ae      	b.n	800387c <_svfiprintf_r+0x1c8>
 800371e:	6963      	ldr	r3, [r4, #20]
 8003720:	9a05      	ldr	r2, [sp, #20]
 8003722:	189b      	adds	r3, r3, r2
 8003724:	6163      	str	r3, [r4, #20]
 8003726:	782b      	ldrb	r3, [r5, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d100      	bne.n	800372e <_svfiprintf_r+0x7a>
 800372c:	e0a6      	b.n	800387c <_svfiprintf_r+0x1c8>
 800372e:	2201      	movs	r2, #1
 8003730:	2300      	movs	r3, #0
 8003732:	4252      	negs	r2, r2
 8003734:	6062      	str	r2, [r4, #4]
 8003736:	a904      	add	r1, sp, #16
 8003738:	3254      	adds	r2, #84	@ 0x54
 800373a:	1852      	adds	r2, r2, r1
 800373c:	1c6e      	adds	r6, r5, #1
 800373e:	6023      	str	r3, [r4, #0]
 8003740:	60e3      	str	r3, [r4, #12]
 8003742:	60a3      	str	r3, [r4, #8]
 8003744:	7013      	strb	r3, [r2, #0]
 8003746:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003748:	4b54      	ldr	r3, [pc, #336]	@ (800389c <_svfiprintf_r+0x1e8>)
 800374a:	2205      	movs	r2, #5
 800374c:	0018      	movs	r0, r3
 800374e:	7831      	ldrb	r1, [r6, #0]
 8003750:	9305      	str	r3, [sp, #20]
 8003752:	f000 fa3b 	bl	8003bcc <memchr>
 8003756:	1c75      	adds	r5, r6, #1
 8003758:	2800      	cmp	r0, #0
 800375a:	d11f      	bne.n	800379c <_svfiprintf_r+0xe8>
 800375c:	6822      	ldr	r2, [r4, #0]
 800375e:	06d3      	lsls	r3, r2, #27
 8003760:	d504      	bpl.n	800376c <_svfiprintf_r+0xb8>
 8003762:	2353      	movs	r3, #83	@ 0x53
 8003764:	a904      	add	r1, sp, #16
 8003766:	185b      	adds	r3, r3, r1
 8003768:	2120      	movs	r1, #32
 800376a:	7019      	strb	r1, [r3, #0]
 800376c:	0713      	lsls	r3, r2, #28
 800376e:	d504      	bpl.n	800377a <_svfiprintf_r+0xc6>
 8003770:	2353      	movs	r3, #83	@ 0x53
 8003772:	a904      	add	r1, sp, #16
 8003774:	185b      	adds	r3, r3, r1
 8003776:	212b      	movs	r1, #43	@ 0x2b
 8003778:	7019      	strb	r1, [r3, #0]
 800377a:	7833      	ldrb	r3, [r6, #0]
 800377c:	2b2a      	cmp	r3, #42	@ 0x2a
 800377e:	d016      	beq.n	80037ae <_svfiprintf_r+0xfa>
 8003780:	0035      	movs	r5, r6
 8003782:	2100      	movs	r1, #0
 8003784:	200a      	movs	r0, #10
 8003786:	68e3      	ldr	r3, [r4, #12]
 8003788:	782a      	ldrb	r2, [r5, #0]
 800378a:	1c6e      	adds	r6, r5, #1
 800378c:	3a30      	subs	r2, #48	@ 0x30
 800378e:	2a09      	cmp	r2, #9
 8003790:	d950      	bls.n	8003834 <_svfiprintf_r+0x180>
 8003792:	2900      	cmp	r1, #0
 8003794:	d111      	bne.n	80037ba <_svfiprintf_r+0x106>
 8003796:	e017      	b.n	80037c8 <_svfiprintf_r+0x114>
 8003798:	3501      	adds	r5, #1
 800379a:	e7af      	b.n	80036fc <_svfiprintf_r+0x48>
 800379c:	9b05      	ldr	r3, [sp, #20]
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	1ac0      	subs	r0, r0, r3
 80037a2:	2301      	movs	r3, #1
 80037a4:	4083      	lsls	r3, r0
 80037a6:	4313      	orrs	r3, r2
 80037a8:	002e      	movs	r6, r5
 80037aa:	6023      	str	r3, [r4, #0]
 80037ac:	e7cc      	b.n	8003748 <_svfiprintf_r+0x94>
 80037ae:	9b07      	ldr	r3, [sp, #28]
 80037b0:	1d19      	adds	r1, r3, #4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	9107      	str	r1, [sp, #28]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	db01      	blt.n	80037be <_svfiprintf_r+0x10a>
 80037ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80037bc:	e004      	b.n	80037c8 <_svfiprintf_r+0x114>
 80037be:	425b      	negs	r3, r3
 80037c0:	60e3      	str	r3, [r4, #12]
 80037c2:	2302      	movs	r3, #2
 80037c4:	4313      	orrs	r3, r2
 80037c6:	6023      	str	r3, [r4, #0]
 80037c8:	782b      	ldrb	r3, [r5, #0]
 80037ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80037cc:	d10c      	bne.n	80037e8 <_svfiprintf_r+0x134>
 80037ce:	786b      	ldrb	r3, [r5, #1]
 80037d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80037d2:	d134      	bne.n	800383e <_svfiprintf_r+0x18a>
 80037d4:	9b07      	ldr	r3, [sp, #28]
 80037d6:	3502      	adds	r5, #2
 80037d8:	1d1a      	adds	r2, r3, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	9207      	str	r2, [sp, #28]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	da01      	bge.n	80037e6 <_svfiprintf_r+0x132>
 80037e2:	2301      	movs	r3, #1
 80037e4:	425b      	negs	r3, r3
 80037e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80037e8:	4e2d      	ldr	r6, [pc, #180]	@ (80038a0 <_svfiprintf_r+0x1ec>)
 80037ea:	2203      	movs	r2, #3
 80037ec:	0030      	movs	r0, r6
 80037ee:	7829      	ldrb	r1, [r5, #0]
 80037f0:	f000 f9ec 	bl	8003bcc <memchr>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d006      	beq.n	8003806 <_svfiprintf_r+0x152>
 80037f8:	2340      	movs	r3, #64	@ 0x40
 80037fa:	1b80      	subs	r0, r0, r6
 80037fc:	4083      	lsls	r3, r0
 80037fe:	6822      	ldr	r2, [r4, #0]
 8003800:	3501      	adds	r5, #1
 8003802:	4313      	orrs	r3, r2
 8003804:	6023      	str	r3, [r4, #0]
 8003806:	7829      	ldrb	r1, [r5, #0]
 8003808:	2206      	movs	r2, #6
 800380a:	4826      	ldr	r0, [pc, #152]	@ (80038a4 <_svfiprintf_r+0x1f0>)
 800380c:	1c6e      	adds	r6, r5, #1
 800380e:	7621      	strb	r1, [r4, #24]
 8003810:	f000 f9dc 	bl	8003bcc <memchr>
 8003814:	2800      	cmp	r0, #0
 8003816:	d038      	beq.n	800388a <_svfiprintf_r+0x1d6>
 8003818:	4b23      	ldr	r3, [pc, #140]	@ (80038a8 <_svfiprintf_r+0x1f4>)
 800381a:	2b00      	cmp	r3, #0
 800381c:	d122      	bne.n	8003864 <_svfiprintf_r+0x1b0>
 800381e:	2207      	movs	r2, #7
 8003820:	9b07      	ldr	r3, [sp, #28]
 8003822:	3307      	adds	r3, #7
 8003824:	4393      	bics	r3, r2
 8003826:	3308      	adds	r3, #8
 8003828:	9307      	str	r3, [sp, #28]
 800382a:	6963      	ldr	r3, [r4, #20]
 800382c:	9a04      	ldr	r2, [sp, #16]
 800382e:	189b      	adds	r3, r3, r2
 8003830:	6163      	str	r3, [r4, #20]
 8003832:	e762      	b.n	80036fa <_svfiprintf_r+0x46>
 8003834:	4343      	muls	r3, r0
 8003836:	0035      	movs	r5, r6
 8003838:	2101      	movs	r1, #1
 800383a:	189b      	adds	r3, r3, r2
 800383c:	e7a4      	b.n	8003788 <_svfiprintf_r+0xd4>
 800383e:	2300      	movs	r3, #0
 8003840:	200a      	movs	r0, #10
 8003842:	0019      	movs	r1, r3
 8003844:	3501      	adds	r5, #1
 8003846:	6063      	str	r3, [r4, #4]
 8003848:	782a      	ldrb	r2, [r5, #0]
 800384a:	1c6e      	adds	r6, r5, #1
 800384c:	3a30      	subs	r2, #48	@ 0x30
 800384e:	2a09      	cmp	r2, #9
 8003850:	d903      	bls.n	800385a <_svfiprintf_r+0x1a6>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0c8      	beq.n	80037e8 <_svfiprintf_r+0x134>
 8003856:	9109      	str	r1, [sp, #36]	@ 0x24
 8003858:	e7c6      	b.n	80037e8 <_svfiprintf_r+0x134>
 800385a:	4341      	muls	r1, r0
 800385c:	0035      	movs	r5, r6
 800385e:	2301      	movs	r3, #1
 8003860:	1889      	adds	r1, r1, r2
 8003862:	e7f1      	b.n	8003848 <_svfiprintf_r+0x194>
 8003864:	aa07      	add	r2, sp, #28
 8003866:	9200      	str	r2, [sp, #0]
 8003868:	0021      	movs	r1, r4
 800386a:	003a      	movs	r2, r7
 800386c:	4b0f      	ldr	r3, [pc, #60]	@ (80038ac <_svfiprintf_r+0x1f8>)
 800386e:	9803      	ldr	r0, [sp, #12]
 8003870:	e000      	b.n	8003874 <_svfiprintf_r+0x1c0>
 8003872:	bf00      	nop
 8003874:	9004      	str	r0, [sp, #16]
 8003876:	9b04      	ldr	r3, [sp, #16]
 8003878:	3301      	adds	r3, #1
 800387a:	d1d6      	bne.n	800382a <_svfiprintf_r+0x176>
 800387c:	89bb      	ldrh	r3, [r7, #12]
 800387e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003880:	065b      	lsls	r3, r3, #25
 8003882:	d500      	bpl.n	8003886 <_svfiprintf_r+0x1d2>
 8003884:	e72c      	b.n	80036e0 <_svfiprintf_r+0x2c>
 8003886:	b021      	add	sp, #132	@ 0x84
 8003888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388a:	aa07      	add	r2, sp, #28
 800388c:	9200      	str	r2, [sp, #0]
 800388e:	0021      	movs	r1, r4
 8003890:	003a      	movs	r2, r7
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <_svfiprintf_r+0x1f8>)
 8003894:	9803      	ldr	r0, [sp, #12]
 8003896:	f000 f87b 	bl	8003990 <_printf_i>
 800389a:	e7eb      	b.n	8003874 <_svfiprintf_r+0x1c0>
 800389c:	08004a31 	.word	0x08004a31
 80038a0:	08004a37 	.word	0x08004a37
 80038a4:	08004a3b 	.word	0x08004a3b
 80038a8:	00000000 	.word	0x00000000
 80038ac:	080035f5 	.word	0x080035f5

080038b0 <_printf_common>:
 80038b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038b2:	0016      	movs	r6, r2
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	688a      	ldr	r2, [r1, #8]
 80038b8:	690b      	ldr	r3, [r1, #16]
 80038ba:	000c      	movs	r4, r1
 80038bc:	9000      	str	r0, [sp, #0]
 80038be:	4293      	cmp	r3, r2
 80038c0:	da00      	bge.n	80038c4 <_printf_common+0x14>
 80038c2:	0013      	movs	r3, r2
 80038c4:	0022      	movs	r2, r4
 80038c6:	6033      	str	r3, [r6, #0]
 80038c8:	3243      	adds	r2, #67	@ 0x43
 80038ca:	7812      	ldrb	r2, [r2, #0]
 80038cc:	2a00      	cmp	r2, #0
 80038ce:	d001      	beq.n	80038d4 <_printf_common+0x24>
 80038d0:	3301      	adds	r3, #1
 80038d2:	6033      	str	r3, [r6, #0]
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	069b      	lsls	r3, r3, #26
 80038d8:	d502      	bpl.n	80038e0 <_printf_common+0x30>
 80038da:	6833      	ldr	r3, [r6, #0]
 80038dc:	3302      	adds	r3, #2
 80038de:	6033      	str	r3, [r6, #0]
 80038e0:	6822      	ldr	r2, [r4, #0]
 80038e2:	2306      	movs	r3, #6
 80038e4:	0015      	movs	r5, r2
 80038e6:	401d      	ands	r5, r3
 80038e8:	421a      	tst	r2, r3
 80038ea:	d027      	beq.n	800393c <_printf_common+0x8c>
 80038ec:	0023      	movs	r3, r4
 80038ee:	3343      	adds	r3, #67	@ 0x43
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	1e5a      	subs	r2, r3, #1
 80038f4:	4193      	sbcs	r3, r2
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	0692      	lsls	r2, r2, #26
 80038fa:	d430      	bmi.n	800395e <_printf_common+0xae>
 80038fc:	0022      	movs	r2, r4
 80038fe:	9901      	ldr	r1, [sp, #4]
 8003900:	9800      	ldr	r0, [sp, #0]
 8003902:	9d08      	ldr	r5, [sp, #32]
 8003904:	3243      	adds	r2, #67	@ 0x43
 8003906:	47a8      	blx	r5
 8003908:	3001      	adds	r0, #1
 800390a:	d025      	beq.n	8003958 <_printf_common+0xa8>
 800390c:	2206      	movs	r2, #6
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	2500      	movs	r5, #0
 8003912:	4013      	ands	r3, r2
 8003914:	2b04      	cmp	r3, #4
 8003916:	d105      	bne.n	8003924 <_printf_common+0x74>
 8003918:	6833      	ldr	r3, [r6, #0]
 800391a:	68e5      	ldr	r5, [r4, #12]
 800391c:	1aed      	subs	r5, r5, r3
 800391e:	43eb      	mvns	r3, r5
 8003920:	17db      	asrs	r3, r3, #31
 8003922:	401d      	ands	r5, r3
 8003924:	68a3      	ldr	r3, [r4, #8]
 8003926:	6922      	ldr	r2, [r4, #16]
 8003928:	4293      	cmp	r3, r2
 800392a:	dd01      	ble.n	8003930 <_printf_common+0x80>
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	18ed      	adds	r5, r5, r3
 8003930:	2600      	movs	r6, #0
 8003932:	42b5      	cmp	r5, r6
 8003934:	d120      	bne.n	8003978 <_printf_common+0xc8>
 8003936:	2000      	movs	r0, #0
 8003938:	e010      	b.n	800395c <_printf_common+0xac>
 800393a:	3501      	adds	r5, #1
 800393c:	68e3      	ldr	r3, [r4, #12]
 800393e:	6832      	ldr	r2, [r6, #0]
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	42ab      	cmp	r3, r5
 8003944:	ddd2      	ble.n	80038ec <_printf_common+0x3c>
 8003946:	0022      	movs	r2, r4
 8003948:	2301      	movs	r3, #1
 800394a:	9901      	ldr	r1, [sp, #4]
 800394c:	9800      	ldr	r0, [sp, #0]
 800394e:	9f08      	ldr	r7, [sp, #32]
 8003950:	3219      	adds	r2, #25
 8003952:	47b8      	blx	r7
 8003954:	3001      	adds	r0, #1
 8003956:	d1f0      	bne.n	800393a <_printf_common+0x8a>
 8003958:	2001      	movs	r0, #1
 800395a:	4240      	negs	r0, r0
 800395c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800395e:	2030      	movs	r0, #48	@ 0x30
 8003960:	18e1      	adds	r1, r4, r3
 8003962:	3143      	adds	r1, #67	@ 0x43
 8003964:	7008      	strb	r0, [r1, #0]
 8003966:	0021      	movs	r1, r4
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	3145      	adds	r1, #69	@ 0x45
 800396c:	7809      	ldrb	r1, [r1, #0]
 800396e:	18a2      	adds	r2, r4, r2
 8003970:	3243      	adds	r2, #67	@ 0x43
 8003972:	3302      	adds	r3, #2
 8003974:	7011      	strb	r1, [r2, #0]
 8003976:	e7c1      	b.n	80038fc <_printf_common+0x4c>
 8003978:	0022      	movs	r2, r4
 800397a:	2301      	movs	r3, #1
 800397c:	9901      	ldr	r1, [sp, #4]
 800397e:	9800      	ldr	r0, [sp, #0]
 8003980:	9f08      	ldr	r7, [sp, #32]
 8003982:	321a      	adds	r2, #26
 8003984:	47b8      	blx	r7
 8003986:	3001      	adds	r0, #1
 8003988:	d0e6      	beq.n	8003958 <_printf_common+0xa8>
 800398a:	3601      	adds	r6, #1
 800398c:	e7d1      	b.n	8003932 <_printf_common+0x82>
	...

08003990 <_printf_i>:
 8003990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003992:	b08b      	sub	sp, #44	@ 0x2c
 8003994:	9206      	str	r2, [sp, #24]
 8003996:	000a      	movs	r2, r1
 8003998:	3243      	adds	r2, #67	@ 0x43
 800399a:	9307      	str	r3, [sp, #28]
 800399c:	9005      	str	r0, [sp, #20]
 800399e:	9203      	str	r2, [sp, #12]
 80039a0:	7e0a      	ldrb	r2, [r1, #24]
 80039a2:	000c      	movs	r4, r1
 80039a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80039a6:	2a78      	cmp	r2, #120	@ 0x78
 80039a8:	d809      	bhi.n	80039be <_printf_i+0x2e>
 80039aa:	2a62      	cmp	r2, #98	@ 0x62
 80039ac:	d80b      	bhi.n	80039c6 <_printf_i+0x36>
 80039ae:	2a00      	cmp	r2, #0
 80039b0:	d100      	bne.n	80039b4 <_printf_i+0x24>
 80039b2:	e0ba      	b.n	8003b2a <_printf_i+0x19a>
 80039b4:	497a      	ldr	r1, [pc, #488]	@ (8003ba0 <_printf_i+0x210>)
 80039b6:	9104      	str	r1, [sp, #16]
 80039b8:	2a58      	cmp	r2, #88	@ 0x58
 80039ba:	d100      	bne.n	80039be <_printf_i+0x2e>
 80039bc:	e08e      	b.n	8003adc <_printf_i+0x14c>
 80039be:	0025      	movs	r5, r4
 80039c0:	3542      	adds	r5, #66	@ 0x42
 80039c2:	702a      	strb	r2, [r5, #0]
 80039c4:	e022      	b.n	8003a0c <_printf_i+0x7c>
 80039c6:	0010      	movs	r0, r2
 80039c8:	3863      	subs	r0, #99	@ 0x63
 80039ca:	2815      	cmp	r0, #21
 80039cc:	d8f7      	bhi.n	80039be <_printf_i+0x2e>
 80039ce:	f7fc fb9b 	bl	8000108 <__gnu_thumb1_case_shi>
 80039d2:	0016      	.short	0x0016
 80039d4:	fff6001f 	.word	0xfff6001f
 80039d8:	fff6fff6 	.word	0xfff6fff6
 80039dc:	001ffff6 	.word	0x001ffff6
 80039e0:	fff6fff6 	.word	0xfff6fff6
 80039e4:	fff6fff6 	.word	0xfff6fff6
 80039e8:	0036009f 	.word	0x0036009f
 80039ec:	fff6007e 	.word	0xfff6007e
 80039f0:	00b0fff6 	.word	0x00b0fff6
 80039f4:	0036fff6 	.word	0x0036fff6
 80039f8:	fff6fff6 	.word	0xfff6fff6
 80039fc:	0082      	.short	0x0082
 80039fe:	0025      	movs	r5, r4
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	3542      	adds	r5, #66	@ 0x42
 8003a04:	1d11      	adds	r1, r2, #4
 8003a06:	6019      	str	r1, [r3, #0]
 8003a08:	6813      	ldr	r3, [r2, #0]
 8003a0a:	702b      	strb	r3, [r5, #0]
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e09e      	b.n	8003b4e <_printf_i+0x1be>
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	6809      	ldr	r1, [r1, #0]
 8003a14:	1d02      	adds	r2, r0, #4
 8003a16:	060d      	lsls	r5, r1, #24
 8003a18:	d50b      	bpl.n	8003a32 <_printf_i+0xa2>
 8003a1a:	6806      	ldr	r6, [r0, #0]
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	2e00      	cmp	r6, #0
 8003a20:	da03      	bge.n	8003a2a <_printf_i+0x9a>
 8003a22:	232d      	movs	r3, #45	@ 0x2d
 8003a24:	9a03      	ldr	r2, [sp, #12]
 8003a26:	4276      	negs	r6, r6
 8003a28:	7013      	strb	r3, [r2, #0]
 8003a2a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ba0 <_printf_i+0x210>)
 8003a2c:	270a      	movs	r7, #10
 8003a2e:	9304      	str	r3, [sp, #16]
 8003a30:	e018      	b.n	8003a64 <_printf_i+0xd4>
 8003a32:	6806      	ldr	r6, [r0, #0]
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	0649      	lsls	r1, r1, #25
 8003a38:	d5f1      	bpl.n	8003a1e <_printf_i+0x8e>
 8003a3a:	b236      	sxth	r6, r6
 8003a3c:	e7ef      	b.n	8003a1e <_printf_i+0x8e>
 8003a3e:	6808      	ldr	r0, [r1, #0]
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	c940      	ldmia	r1!, {r6}
 8003a44:	0605      	lsls	r5, r0, #24
 8003a46:	d402      	bmi.n	8003a4e <_printf_i+0xbe>
 8003a48:	0640      	lsls	r0, r0, #25
 8003a4a:	d500      	bpl.n	8003a4e <_printf_i+0xbe>
 8003a4c:	b2b6      	uxth	r6, r6
 8003a4e:	6019      	str	r1, [r3, #0]
 8003a50:	4b53      	ldr	r3, [pc, #332]	@ (8003ba0 <_printf_i+0x210>)
 8003a52:	270a      	movs	r7, #10
 8003a54:	9304      	str	r3, [sp, #16]
 8003a56:	2a6f      	cmp	r2, #111	@ 0x6f
 8003a58:	d100      	bne.n	8003a5c <_printf_i+0xcc>
 8003a5a:	3f02      	subs	r7, #2
 8003a5c:	0023      	movs	r3, r4
 8003a5e:	2200      	movs	r2, #0
 8003a60:	3343      	adds	r3, #67	@ 0x43
 8003a62:	701a      	strb	r2, [r3, #0]
 8003a64:	6863      	ldr	r3, [r4, #4]
 8003a66:	60a3      	str	r3, [r4, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	db06      	blt.n	8003a7a <_printf_i+0xea>
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	6822      	ldr	r2, [r4, #0]
 8003a70:	9d03      	ldr	r5, [sp, #12]
 8003a72:	438a      	bics	r2, r1
 8003a74:	6022      	str	r2, [r4, #0]
 8003a76:	4333      	orrs	r3, r6
 8003a78:	d00c      	beq.n	8003a94 <_printf_i+0x104>
 8003a7a:	9d03      	ldr	r5, [sp, #12]
 8003a7c:	0030      	movs	r0, r6
 8003a7e:	0039      	movs	r1, r7
 8003a80:	f7fc fbd2 	bl	8000228 <__aeabi_uidivmod>
 8003a84:	9b04      	ldr	r3, [sp, #16]
 8003a86:	3d01      	subs	r5, #1
 8003a88:	5c5b      	ldrb	r3, [r3, r1]
 8003a8a:	702b      	strb	r3, [r5, #0]
 8003a8c:	0033      	movs	r3, r6
 8003a8e:	0006      	movs	r6, r0
 8003a90:	429f      	cmp	r7, r3
 8003a92:	d9f3      	bls.n	8003a7c <_printf_i+0xec>
 8003a94:	2f08      	cmp	r7, #8
 8003a96:	d109      	bne.n	8003aac <_printf_i+0x11c>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	07db      	lsls	r3, r3, #31
 8003a9c:	d506      	bpl.n	8003aac <_printf_i+0x11c>
 8003a9e:	6862      	ldr	r2, [r4, #4]
 8003aa0:	6923      	ldr	r3, [r4, #16]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	dc02      	bgt.n	8003aac <_printf_i+0x11c>
 8003aa6:	2330      	movs	r3, #48	@ 0x30
 8003aa8:	3d01      	subs	r5, #1
 8003aaa:	702b      	strb	r3, [r5, #0]
 8003aac:	9b03      	ldr	r3, [sp, #12]
 8003aae:	1b5b      	subs	r3, r3, r5
 8003ab0:	6123      	str	r3, [r4, #16]
 8003ab2:	9b07      	ldr	r3, [sp, #28]
 8003ab4:	0021      	movs	r1, r4
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	9805      	ldr	r0, [sp, #20]
 8003aba:	9b06      	ldr	r3, [sp, #24]
 8003abc:	aa09      	add	r2, sp, #36	@ 0x24
 8003abe:	f7ff fef7 	bl	80038b0 <_printf_common>
 8003ac2:	3001      	adds	r0, #1
 8003ac4:	d148      	bne.n	8003b58 <_printf_i+0x1c8>
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	4240      	negs	r0, r0
 8003aca:	b00b      	add	sp, #44	@ 0x2c
 8003acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ace:	2220      	movs	r2, #32
 8003ad0:	6809      	ldr	r1, [r1, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	6022      	str	r2, [r4, #0]
 8003ad6:	2278      	movs	r2, #120	@ 0x78
 8003ad8:	4932      	ldr	r1, [pc, #200]	@ (8003ba4 <_printf_i+0x214>)
 8003ada:	9104      	str	r1, [sp, #16]
 8003adc:	0021      	movs	r1, r4
 8003ade:	3145      	adds	r1, #69	@ 0x45
 8003ae0:	700a      	strb	r2, [r1, #0]
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	6822      	ldr	r2, [r4, #0]
 8003ae6:	c940      	ldmia	r1!, {r6}
 8003ae8:	0610      	lsls	r0, r2, #24
 8003aea:	d402      	bmi.n	8003af2 <_printf_i+0x162>
 8003aec:	0650      	lsls	r0, r2, #25
 8003aee:	d500      	bpl.n	8003af2 <_printf_i+0x162>
 8003af0:	b2b6      	uxth	r6, r6
 8003af2:	6019      	str	r1, [r3, #0]
 8003af4:	07d3      	lsls	r3, r2, #31
 8003af6:	d502      	bpl.n	8003afe <_printf_i+0x16e>
 8003af8:	2320      	movs	r3, #32
 8003afa:	4313      	orrs	r3, r2
 8003afc:	6023      	str	r3, [r4, #0]
 8003afe:	2e00      	cmp	r6, #0
 8003b00:	d001      	beq.n	8003b06 <_printf_i+0x176>
 8003b02:	2710      	movs	r7, #16
 8003b04:	e7aa      	b.n	8003a5c <_printf_i+0xcc>
 8003b06:	2220      	movs	r2, #32
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	4393      	bics	r3, r2
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	e7f8      	b.n	8003b02 <_printf_i+0x172>
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	680d      	ldr	r5, [r1, #0]
 8003b14:	1d10      	adds	r0, r2, #4
 8003b16:	6949      	ldr	r1, [r1, #20]
 8003b18:	6018      	str	r0, [r3, #0]
 8003b1a:	6813      	ldr	r3, [r2, #0]
 8003b1c:	062e      	lsls	r6, r5, #24
 8003b1e:	d501      	bpl.n	8003b24 <_printf_i+0x194>
 8003b20:	6019      	str	r1, [r3, #0]
 8003b22:	e002      	b.n	8003b2a <_printf_i+0x19a>
 8003b24:	066d      	lsls	r5, r5, #25
 8003b26:	d5fb      	bpl.n	8003b20 <_printf_i+0x190>
 8003b28:	8019      	strh	r1, [r3, #0]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9d03      	ldr	r5, [sp, #12]
 8003b2e:	6123      	str	r3, [r4, #16]
 8003b30:	e7bf      	b.n	8003ab2 <_printf_i+0x122>
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	1d11      	adds	r1, r2, #4
 8003b36:	6019      	str	r1, [r3, #0]
 8003b38:	6815      	ldr	r5, [r2, #0]
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	0028      	movs	r0, r5
 8003b3e:	6862      	ldr	r2, [r4, #4]
 8003b40:	f000 f844 	bl	8003bcc <memchr>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d001      	beq.n	8003b4c <_printf_i+0x1bc>
 8003b48:	1b40      	subs	r0, r0, r5
 8003b4a:	6060      	str	r0, [r4, #4]
 8003b4c:	6863      	ldr	r3, [r4, #4]
 8003b4e:	6123      	str	r3, [r4, #16]
 8003b50:	2300      	movs	r3, #0
 8003b52:	9a03      	ldr	r2, [sp, #12]
 8003b54:	7013      	strb	r3, [r2, #0]
 8003b56:	e7ac      	b.n	8003ab2 <_printf_i+0x122>
 8003b58:	002a      	movs	r2, r5
 8003b5a:	6923      	ldr	r3, [r4, #16]
 8003b5c:	9906      	ldr	r1, [sp, #24]
 8003b5e:	9805      	ldr	r0, [sp, #20]
 8003b60:	9d07      	ldr	r5, [sp, #28]
 8003b62:	47a8      	blx	r5
 8003b64:	3001      	adds	r0, #1
 8003b66:	d0ae      	beq.n	8003ac6 <_printf_i+0x136>
 8003b68:	6823      	ldr	r3, [r4, #0]
 8003b6a:	079b      	lsls	r3, r3, #30
 8003b6c:	d415      	bmi.n	8003b9a <_printf_i+0x20a>
 8003b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b70:	68e0      	ldr	r0, [r4, #12]
 8003b72:	4298      	cmp	r0, r3
 8003b74:	daa9      	bge.n	8003aca <_printf_i+0x13a>
 8003b76:	0018      	movs	r0, r3
 8003b78:	e7a7      	b.n	8003aca <_printf_i+0x13a>
 8003b7a:	0022      	movs	r2, r4
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	9906      	ldr	r1, [sp, #24]
 8003b80:	9805      	ldr	r0, [sp, #20]
 8003b82:	9e07      	ldr	r6, [sp, #28]
 8003b84:	3219      	adds	r2, #25
 8003b86:	47b0      	blx	r6
 8003b88:	3001      	adds	r0, #1
 8003b8a:	d09c      	beq.n	8003ac6 <_printf_i+0x136>
 8003b8c:	3501      	adds	r5, #1
 8003b8e:	68e3      	ldr	r3, [r4, #12]
 8003b90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	42ab      	cmp	r3, r5
 8003b96:	dcf0      	bgt.n	8003b7a <_printf_i+0x1ea>
 8003b98:	e7e9      	b.n	8003b6e <_printf_i+0x1de>
 8003b9a:	2500      	movs	r5, #0
 8003b9c:	e7f7      	b.n	8003b8e <_printf_i+0x1fe>
 8003b9e:	46c0      	nop			@ (mov r8, r8)
 8003ba0:	08004a42 	.word	0x08004a42
 8003ba4:	08004a53 	.word	0x08004a53

08003ba8 <_sbrk_r>:
 8003ba8:	2300      	movs	r3, #0
 8003baa:	b570      	push	{r4, r5, r6, lr}
 8003bac:	4d06      	ldr	r5, [pc, #24]	@ (8003bc8 <_sbrk_r+0x20>)
 8003bae:	0004      	movs	r4, r0
 8003bb0:	0008      	movs	r0, r1
 8003bb2:	602b      	str	r3, [r5, #0]
 8003bb4:	f7fd f99c 	bl	8000ef0 <_sbrk>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d103      	bne.n	8003bc4 <_sbrk_r+0x1c>
 8003bbc:	682b      	ldr	r3, [r5, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d000      	beq.n	8003bc4 <_sbrk_r+0x1c>
 8003bc2:	6023      	str	r3, [r4, #0]
 8003bc4:	bd70      	pop	{r4, r5, r6, pc}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	2000066c 	.word	0x2000066c

08003bcc <memchr>:
 8003bcc:	b2c9      	uxtb	r1, r1
 8003bce:	1882      	adds	r2, r0, r2
 8003bd0:	4290      	cmp	r0, r2
 8003bd2:	d101      	bne.n	8003bd8 <memchr+0xc>
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	4770      	bx	lr
 8003bd8:	7803      	ldrb	r3, [r0, #0]
 8003bda:	428b      	cmp	r3, r1
 8003bdc:	d0fb      	beq.n	8003bd6 <memchr+0xa>
 8003bde:	3001      	adds	r0, #1
 8003be0:	e7f6      	b.n	8003bd0 <memchr+0x4>

08003be2 <_realloc_r>:
 8003be2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003be4:	0006      	movs	r6, r0
 8003be6:	000c      	movs	r4, r1
 8003be8:	0015      	movs	r5, r2
 8003bea:	2900      	cmp	r1, #0
 8003bec:	d105      	bne.n	8003bfa <_realloc_r+0x18>
 8003bee:	0011      	movs	r1, r2
 8003bf0:	f7ff fc70 	bl	80034d4 <_malloc_r>
 8003bf4:	0004      	movs	r4, r0
 8003bf6:	0020      	movs	r0, r4
 8003bf8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bfa:	2a00      	cmp	r2, #0
 8003bfc:	d103      	bne.n	8003c06 <_realloc_r+0x24>
 8003bfe:	f7ff fbfd 	bl	80033fc <_free_r>
 8003c02:	002c      	movs	r4, r5
 8003c04:	e7f7      	b.n	8003bf6 <_realloc_r+0x14>
 8003c06:	f000 f81c 	bl	8003c42 <_malloc_usable_size_r>
 8003c0a:	0007      	movs	r7, r0
 8003c0c:	4285      	cmp	r5, r0
 8003c0e:	d802      	bhi.n	8003c16 <_realloc_r+0x34>
 8003c10:	0843      	lsrs	r3, r0, #1
 8003c12:	42ab      	cmp	r3, r5
 8003c14:	d3ef      	bcc.n	8003bf6 <_realloc_r+0x14>
 8003c16:	0029      	movs	r1, r5
 8003c18:	0030      	movs	r0, r6
 8003c1a:	f7ff fc5b 	bl	80034d4 <_malloc_r>
 8003c1e:	9001      	str	r0, [sp, #4]
 8003c20:	2800      	cmp	r0, #0
 8003c22:	d101      	bne.n	8003c28 <_realloc_r+0x46>
 8003c24:	9c01      	ldr	r4, [sp, #4]
 8003c26:	e7e6      	b.n	8003bf6 <_realloc_r+0x14>
 8003c28:	002a      	movs	r2, r5
 8003c2a:	42bd      	cmp	r5, r7
 8003c2c:	d900      	bls.n	8003c30 <_realloc_r+0x4e>
 8003c2e:	003a      	movs	r2, r7
 8003c30:	0021      	movs	r1, r4
 8003c32:	9801      	ldr	r0, [sp, #4]
 8003c34:	f7ff fbd8 	bl	80033e8 <memcpy>
 8003c38:	0021      	movs	r1, r4
 8003c3a:	0030      	movs	r0, r6
 8003c3c:	f7ff fbde 	bl	80033fc <_free_r>
 8003c40:	e7f0      	b.n	8003c24 <_realloc_r+0x42>

08003c42 <_malloc_usable_size_r>:
 8003c42:	1f0b      	subs	r3, r1, #4
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	1f18      	subs	r0, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	da01      	bge.n	8003c50 <_malloc_usable_size_r+0xe>
 8003c4c:	580b      	ldr	r3, [r1, r0]
 8003c4e:	18c0      	adds	r0, r0, r3
 8003c50:	4770      	bx	lr
	...

08003c54 <_init>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	469e      	mov	lr, r3
 8003c5e:	4770      	bx	lr

08003c60 <_fini>:
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c66:	bc08      	pop	{r3}
 8003c68:	469e      	mov	lr, r3
 8003c6a:	4770      	bx	lr

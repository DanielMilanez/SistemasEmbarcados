/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int milisecond = 0,
	seconds    = 0,
	minutes    = 0,
	hours      = 0,
	atual_disp = 0;

int numbers[][7] = {
						{1, 1, 1, 1, 1, 1, 0}, // 0
						{0, 1, 1, 0, 0, 0, 0}, // 1
						{1, 1, 0, 1, 1, 0, 1}, // 2
						{1, 1, 1, 1, 0, 0, 1}, // 3
						{0, 1, 1, 0, 0, 1, 1}, // 4
						{1, 0, 1, 1, 0, 1, 1}, // 5
						{1, 0, 1, 1, 1, 1, 1}, // 6
						{1, 1, 1, 0, 0, 0, 0}, // 7
						{1, 1, 1, 1, 1, 1, 1}, // 8
						{1, 1, 1, 1, 0, 1, 1}, // 9
					 };

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
/* USER CODE BEGIN PFP */
int Varredura();
void Draw_Display(int count);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  atual_disp = Varredura();
	  Draw_Display(minutes);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SELETOR_C_Pin|PORT_B_Pin|PORT_A_Pin|PORT_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PORT_C_Pin|PORT_F_Pin|PORT_D_Pin|PORT_E_Pin
                          |SELETOR_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SELETOR_B_GPIO_Port, SELETOR_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SELETOR_C_Pin PORT_B_Pin PORT_A_Pin PORT_G_Pin */
  GPIO_InitStruct.Pin = SELETOR_C_Pin|PORT_B_Pin|PORT_A_Pin|PORT_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : BTN_SEGUNDOS_Pin CLOCK_Pin */
  GPIO_InitStruct.Pin = BTN_SEGUNDOS_Pin|CLOCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PORT_C_Pin PORT_F_Pin PORT_D_Pin PORT_E_Pin
                           SELETOR_A_Pin */
  GPIO_InitStruct.Pin = PORT_C_Pin|PORT_F_Pin|PORT_D_Pin|PORT_E_Pin
                          |SELETOR_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : SELETOR_B_Pin */
  GPIO_InitStruct.Pin = SELETOR_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SELETOR_B_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : BTN_HORAS_Pin BTN_MINUTOS_Pin */
  GPIO_InitStruct.Pin = BTN_HORAS_Pin|BTN_MINUTOS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void Draw_Display(int count){
	// ESCREVENDO VALOR NO DISPLAY
	HAL_GPIO_WritePin(PORT_A_GPIO_Port, PORT_A_Pin, numbers[count][0]);
	HAL_GPIO_WritePin(PORT_B_GPIO_Port, PORT_B_Pin, numbers[count][1]);
	HAL_GPIO_WritePin(PORT_C_GPIO_Port, PORT_C_Pin, numbers[count][2]);
	HAL_GPIO_WritePin(PORT_D_GPIO_Port, PORT_D_Pin, numbers[count][3]);
	HAL_GPIO_WritePin(PORT_E_GPIO_Port, PORT_E_Pin, numbers[count][4]);
	HAL_GPIO_WritePin(PORT_F_GPIO_Port, PORT_F_Pin, numbers[count][5]);
	HAL_GPIO_WritePin(PORT_G_GPIO_Port, PORT_G_Pin, numbers[count][6]);
}

int Varredura(){
	switch (atual_disp){
		case 0:
			// SELECIONANDO O DISPLAY
			HAL_GPIO_WritePin(SELETOR_A_GPIO_Port, SELETOR_A_Pin, 0);
			HAL_GPIO_WritePin(SELETOR_B_GPIO_Port, SELETOR_B_Pin, 0);
			HAL_GPIO_WritePin(SELETOR_C_GPIO_Port, SELETOR_C_Pin, 0);
			return 1;
			break;

		case 1:
			// SELECIONANDO O DISPLAY
			HAL_GPIO_WritePin(SELETOR_A_GPIO_Port, SELETOR_A_Pin, 1);
			HAL_GPIO_WritePin(SELETOR_B_GPIO_Port, SELETOR_B_Pin, 0);
			HAL_GPIO_WritePin(SELETOR_C_GPIO_Port, SELETOR_C_Pin, 0);
			return 2;
			break;

		case 2:
			// SELECIONANDO O DISPLAY
			HAL_GPIO_WritePin(SELETOR_A_GPIO_Port, SELETOR_A_Pin, 0);
			HAL_GPIO_WritePin(SELETOR_B_GPIO_Port, SELETOR_B_Pin, 1);
			HAL_GPIO_WritePin(SELETOR_C_GPIO_Port, SELETOR_C_Pin, 0);
			return 3;
			break;

		case 3:
			// SELECIONANDO O DISPLAY
			HAL_GPIO_WritePin(SELETOR_A_GPIO_Port, SELETOR_A_Pin, 1);
			HAL_GPIO_WritePin(SELETOR_B_GPIO_Port, SELETOR_B_Pin, 1);
			HAL_GPIO_WritePin(SELETOR_C_GPIO_Port, SELETOR_C_Pin, 0);
			return 4;
			break;

		case 4:
			// SELECIONANDO O DISPLAY
			HAL_GPIO_WritePin(SELETOR_A_GPIO_Port, SELETOR_A_Pin, 0);
			HAL_GPIO_WritePin(SELETOR_B_GPIO_Port, SELETOR_B_Pin, 0);
			HAL_GPIO_WritePin(SELETOR_C_GPIO_Port, SELETOR_C_Pin, 1);
			return 5;
			break;

		case 5:
			// SELECIONANDO O DISPLAY
			HAL_GPIO_WritePin(SELETOR_A_GPIO_Port, SELETOR_A_Pin, 1);
			HAL_GPIO_WritePin(SELETOR_B_GPIO_Port, SELETOR_B_Pin, 0);
			HAL_GPIO_WritePin(SELETOR_C_GPIO_Port, SELETOR_C_Pin, 1);
			return 6;
			break;

		case 6:
			// SELECIONANDO O DISPLAY
			HAL_GPIO_WritePin(SELETOR_A_GPIO_Port, SELETOR_A_Pin, 0);
			HAL_GPIO_WritePin(SELETOR_B_GPIO_Port, SELETOR_B_Pin, 1);
			HAL_GPIO_WritePin(SELETOR_C_GPIO_Port, SELETOR_C_Pin, 1);
			return 0;
			break;
	}
	return 0;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	HAL_GPIO_TogglePin(GREEN_LED, GPIO_Pin)
}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

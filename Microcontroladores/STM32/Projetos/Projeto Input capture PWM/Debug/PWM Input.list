
PWM Input.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003920  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080039e0  080039e0  000049e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a3c  08003a3c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003a3c  08003a3c  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003a3c  08003a3c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a3c  08003a3c  00004a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a40  08003a40  00004a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a44  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08003a50  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08003a50  00005074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f0c  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c1  00000000  00000000  0000bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0000d408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f3  00000000  00000000  0000dbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a9e  00000000  00000000  0000e1d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087ab  00000000  00000000  00020c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007526e  00000000  00000000  0002941c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009e68a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d70  00000000  00000000  0009e6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000a0440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080039c8 	.word	0x080039c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080039c8 	.word	0x080039c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	@ 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f001 f9b0 	bl	800158c <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fa71 	bl	8000718 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	@ 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 f807 	bl	8000250 <__aeabi_fsub>
 8000242:	f000 fa69 	bl	8000718 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fsub>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	4647      	mov	r7, r8
 8000254:	46ce      	mov	lr, r9
 8000256:	0243      	lsls	r3, r0, #9
 8000258:	b580      	push	{r7, lr}
 800025a:	0a5f      	lsrs	r7, r3, #9
 800025c:	099b      	lsrs	r3, r3, #6
 800025e:	0045      	lsls	r5, r0, #1
 8000260:	004a      	lsls	r2, r1, #1
 8000262:	469c      	mov	ip, r3
 8000264:	024b      	lsls	r3, r1, #9
 8000266:	0fc4      	lsrs	r4, r0, #31
 8000268:	0fce      	lsrs	r6, r1, #31
 800026a:	0e2d      	lsrs	r5, r5, #24
 800026c:	0a58      	lsrs	r0, r3, #9
 800026e:	0e12      	lsrs	r2, r2, #24
 8000270:	0999      	lsrs	r1, r3, #6
 8000272:	2aff      	cmp	r2, #255	@ 0xff
 8000274:	d06b      	beq.n	800034e <__aeabi_fsub+0xfe>
 8000276:	2301      	movs	r3, #1
 8000278:	405e      	eors	r6, r3
 800027a:	1aab      	subs	r3, r5, r2
 800027c:	42b4      	cmp	r4, r6
 800027e:	d04b      	beq.n	8000318 <__aeabi_fsub+0xc8>
 8000280:	2b00      	cmp	r3, #0
 8000282:	dc00      	bgt.n	8000286 <__aeabi_fsub+0x36>
 8000284:	e0ff      	b.n	8000486 <__aeabi_fsub+0x236>
 8000286:	2a00      	cmp	r2, #0
 8000288:	d100      	bne.n	800028c <__aeabi_fsub+0x3c>
 800028a:	e088      	b.n	800039e <__aeabi_fsub+0x14e>
 800028c:	2dff      	cmp	r5, #255	@ 0xff
 800028e:	d100      	bne.n	8000292 <__aeabi_fsub+0x42>
 8000290:	e0ef      	b.n	8000472 <__aeabi_fsub+0x222>
 8000292:	2280      	movs	r2, #128	@ 0x80
 8000294:	04d2      	lsls	r2, r2, #19
 8000296:	4311      	orrs	r1, r2
 8000298:	2001      	movs	r0, #1
 800029a:	2b1b      	cmp	r3, #27
 800029c:	dc08      	bgt.n	80002b0 <__aeabi_fsub+0x60>
 800029e:	0008      	movs	r0, r1
 80002a0:	2220      	movs	r2, #32
 80002a2:	40d8      	lsrs	r0, r3
 80002a4:	1ad3      	subs	r3, r2, r3
 80002a6:	4099      	lsls	r1, r3
 80002a8:	000b      	movs	r3, r1
 80002aa:	1e5a      	subs	r2, r3, #1
 80002ac:	4193      	sbcs	r3, r2
 80002ae:	4318      	orrs	r0, r3
 80002b0:	4663      	mov	r3, ip
 80002b2:	1a1b      	subs	r3, r3, r0
 80002b4:	469c      	mov	ip, r3
 80002b6:	4663      	mov	r3, ip
 80002b8:	015b      	lsls	r3, r3, #5
 80002ba:	d400      	bmi.n	80002be <__aeabi_fsub+0x6e>
 80002bc:	e0cd      	b.n	800045a <__aeabi_fsub+0x20a>
 80002be:	4663      	mov	r3, ip
 80002c0:	019f      	lsls	r7, r3, #6
 80002c2:	09bf      	lsrs	r7, r7, #6
 80002c4:	0038      	movs	r0, r7
 80002c6:	f001 f96b 	bl	80015a0 <__clzsi2>
 80002ca:	003b      	movs	r3, r7
 80002cc:	3805      	subs	r0, #5
 80002ce:	4083      	lsls	r3, r0
 80002d0:	4285      	cmp	r5, r0
 80002d2:	dc00      	bgt.n	80002d6 <__aeabi_fsub+0x86>
 80002d4:	e0a2      	b.n	800041c <__aeabi_fsub+0x1cc>
 80002d6:	4ab7      	ldr	r2, [pc, #732]	@ (80005b4 <__aeabi_fsub+0x364>)
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	401a      	ands	r2, r3
 80002dc:	4694      	mov	ip, r2
 80002de:	075a      	lsls	r2, r3, #29
 80002e0:	d100      	bne.n	80002e4 <__aeabi_fsub+0x94>
 80002e2:	e0c3      	b.n	800046c <__aeabi_fsub+0x21c>
 80002e4:	220f      	movs	r2, #15
 80002e6:	4013      	ands	r3, r2
 80002e8:	2b04      	cmp	r3, #4
 80002ea:	d100      	bne.n	80002ee <__aeabi_fsub+0x9e>
 80002ec:	e0be      	b.n	800046c <__aeabi_fsub+0x21c>
 80002ee:	2304      	movs	r3, #4
 80002f0:	4698      	mov	r8, r3
 80002f2:	44c4      	add	ip, r8
 80002f4:	4663      	mov	r3, ip
 80002f6:	015b      	lsls	r3, r3, #5
 80002f8:	d400      	bmi.n	80002fc <__aeabi_fsub+0xac>
 80002fa:	e0b7      	b.n	800046c <__aeabi_fsub+0x21c>
 80002fc:	1c68      	adds	r0, r5, #1
 80002fe:	2dfe      	cmp	r5, #254	@ 0xfe
 8000300:	d000      	beq.n	8000304 <__aeabi_fsub+0xb4>
 8000302:	e0a5      	b.n	8000450 <__aeabi_fsub+0x200>
 8000304:	20ff      	movs	r0, #255	@ 0xff
 8000306:	2200      	movs	r2, #0
 8000308:	05c0      	lsls	r0, r0, #23
 800030a:	4310      	orrs	r0, r2
 800030c:	07e4      	lsls	r4, r4, #31
 800030e:	4320      	orrs	r0, r4
 8000310:	bcc0      	pop	{r6, r7}
 8000312:	46b9      	mov	r9, r7
 8000314:	46b0      	mov	r8, r6
 8000316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000318:	2b00      	cmp	r3, #0
 800031a:	dc00      	bgt.n	800031e <__aeabi_fsub+0xce>
 800031c:	e1eb      	b.n	80006f6 <__aeabi_fsub+0x4a6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	d046      	beq.n	80003b0 <__aeabi_fsub+0x160>
 8000322:	2dff      	cmp	r5, #255	@ 0xff
 8000324:	d100      	bne.n	8000328 <__aeabi_fsub+0xd8>
 8000326:	e0a4      	b.n	8000472 <__aeabi_fsub+0x222>
 8000328:	2280      	movs	r2, #128	@ 0x80
 800032a:	04d2      	lsls	r2, r2, #19
 800032c:	4311      	orrs	r1, r2
 800032e:	2b1b      	cmp	r3, #27
 8000330:	dc00      	bgt.n	8000334 <__aeabi_fsub+0xe4>
 8000332:	e0fb      	b.n	800052c <__aeabi_fsub+0x2dc>
 8000334:	2305      	movs	r3, #5
 8000336:	4698      	mov	r8, r3
 8000338:	002b      	movs	r3, r5
 800033a:	44c4      	add	ip, r8
 800033c:	4662      	mov	r2, ip
 800033e:	08d7      	lsrs	r7, r2, #3
 8000340:	2bff      	cmp	r3, #255	@ 0xff
 8000342:	d100      	bne.n	8000346 <__aeabi_fsub+0xf6>
 8000344:	e095      	b.n	8000472 <__aeabi_fsub+0x222>
 8000346:	027a      	lsls	r2, r7, #9
 8000348:	0a52      	lsrs	r2, r2, #9
 800034a:	b2d8      	uxtb	r0, r3
 800034c:	e7dc      	b.n	8000308 <__aeabi_fsub+0xb8>
 800034e:	002b      	movs	r3, r5
 8000350:	3bff      	subs	r3, #255	@ 0xff
 8000352:	4699      	mov	r9, r3
 8000354:	2900      	cmp	r1, #0
 8000356:	d118      	bne.n	800038a <__aeabi_fsub+0x13a>
 8000358:	2301      	movs	r3, #1
 800035a:	405e      	eors	r6, r3
 800035c:	42b4      	cmp	r4, r6
 800035e:	d100      	bne.n	8000362 <__aeabi_fsub+0x112>
 8000360:	e0ca      	b.n	80004f8 <__aeabi_fsub+0x2a8>
 8000362:	464b      	mov	r3, r9
 8000364:	2b00      	cmp	r3, #0
 8000366:	d02d      	beq.n	80003c4 <__aeabi_fsub+0x174>
 8000368:	2d00      	cmp	r5, #0
 800036a:	d000      	beq.n	800036e <__aeabi_fsub+0x11e>
 800036c:	e13c      	b.n	80005e8 <__aeabi_fsub+0x398>
 800036e:	23ff      	movs	r3, #255	@ 0xff
 8000370:	4664      	mov	r4, ip
 8000372:	2c00      	cmp	r4, #0
 8000374:	d100      	bne.n	8000378 <__aeabi_fsub+0x128>
 8000376:	e15f      	b.n	8000638 <__aeabi_fsub+0x3e8>
 8000378:	1e5d      	subs	r5, r3, #1
 800037a:	2b01      	cmp	r3, #1
 800037c:	d100      	bne.n	8000380 <__aeabi_fsub+0x130>
 800037e:	e174      	b.n	800066a <__aeabi_fsub+0x41a>
 8000380:	0034      	movs	r4, r6
 8000382:	2bff      	cmp	r3, #255	@ 0xff
 8000384:	d074      	beq.n	8000470 <__aeabi_fsub+0x220>
 8000386:	002b      	movs	r3, r5
 8000388:	e103      	b.n	8000592 <__aeabi_fsub+0x342>
 800038a:	42b4      	cmp	r4, r6
 800038c:	d100      	bne.n	8000390 <__aeabi_fsub+0x140>
 800038e:	e09c      	b.n	80004ca <__aeabi_fsub+0x27a>
 8000390:	2b00      	cmp	r3, #0
 8000392:	d017      	beq.n	80003c4 <__aeabi_fsub+0x174>
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0ea      	beq.n	800036e <__aeabi_fsub+0x11e>
 8000398:	0007      	movs	r7, r0
 800039a:	0034      	movs	r4, r6
 800039c:	e06c      	b.n	8000478 <__aeabi_fsub+0x228>
 800039e:	2900      	cmp	r1, #0
 80003a0:	d0cc      	beq.n	800033c <__aeabi_fsub+0xec>
 80003a2:	1e5a      	subs	r2, r3, #1
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d02b      	beq.n	8000400 <__aeabi_fsub+0x1b0>
 80003a8:	2bff      	cmp	r3, #255	@ 0xff
 80003aa:	d062      	beq.n	8000472 <__aeabi_fsub+0x222>
 80003ac:	0013      	movs	r3, r2
 80003ae:	e773      	b.n	8000298 <__aeabi_fsub+0x48>
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d0c3      	beq.n	800033c <__aeabi_fsub+0xec>
 80003b4:	1e5a      	subs	r2, r3, #1
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d100      	bne.n	80003bc <__aeabi_fsub+0x16c>
 80003ba:	e11e      	b.n	80005fa <__aeabi_fsub+0x3aa>
 80003bc:	2bff      	cmp	r3, #255	@ 0xff
 80003be:	d058      	beq.n	8000472 <__aeabi_fsub+0x222>
 80003c0:	0013      	movs	r3, r2
 80003c2:	e7b4      	b.n	800032e <__aeabi_fsub+0xde>
 80003c4:	22fe      	movs	r2, #254	@ 0xfe
 80003c6:	1c6b      	adds	r3, r5, #1
 80003c8:	421a      	tst	r2, r3
 80003ca:	d10d      	bne.n	80003e8 <__aeabi_fsub+0x198>
 80003cc:	2d00      	cmp	r5, #0
 80003ce:	d060      	beq.n	8000492 <__aeabi_fsub+0x242>
 80003d0:	4663      	mov	r3, ip
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d000      	beq.n	80003d8 <__aeabi_fsub+0x188>
 80003d6:	e120      	b.n	800061a <__aeabi_fsub+0x3ca>
 80003d8:	2900      	cmp	r1, #0
 80003da:	d000      	beq.n	80003de <__aeabi_fsub+0x18e>
 80003dc:	e128      	b.n	8000630 <__aeabi_fsub+0x3e0>
 80003de:	2280      	movs	r2, #128	@ 0x80
 80003e0:	2400      	movs	r4, #0
 80003e2:	20ff      	movs	r0, #255	@ 0xff
 80003e4:	03d2      	lsls	r2, r2, #15
 80003e6:	e78f      	b.n	8000308 <__aeabi_fsub+0xb8>
 80003e8:	4663      	mov	r3, ip
 80003ea:	1a5f      	subs	r7, r3, r1
 80003ec:	017b      	lsls	r3, r7, #5
 80003ee:	d500      	bpl.n	80003f2 <__aeabi_fsub+0x1a2>
 80003f0:	e0fe      	b.n	80005f0 <__aeabi_fsub+0x3a0>
 80003f2:	2f00      	cmp	r7, #0
 80003f4:	d000      	beq.n	80003f8 <__aeabi_fsub+0x1a8>
 80003f6:	e765      	b.n	80002c4 <__aeabi_fsub+0x74>
 80003f8:	2400      	movs	r4, #0
 80003fa:	2000      	movs	r0, #0
 80003fc:	2200      	movs	r2, #0
 80003fe:	e783      	b.n	8000308 <__aeabi_fsub+0xb8>
 8000400:	4663      	mov	r3, ip
 8000402:	1a59      	subs	r1, r3, r1
 8000404:	014b      	lsls	r3, r1, #5
 8000406:	d400      	bmi.n	800040a <__aeabi_fsub+0x1ba>
 8000408:	e119      	b.n	800063e <__aeabi_fsub+0x3ee>
 800040a:	018f      	lsls	r7, r1, #6
 800040c:	09bf      	lsrs	r7, r7, #6
 800040e:	0038      	movs	r0, r7
 8000410:	f001 f8c6 	bl	80015a0 <__clzsi2>
 8000414:	003b      	movs	r3, r7
 8000416:	3805      	subs	r0, #5
 8000418:	4083      	lsls	r3, r0
 800041a:	2501      	movs	r5, #1
 800041c:	2220      	movs	r2, #32
 800041e:	1b40      	subs	r0, r0, r5
 8000420:	3001      	adds	r0, #1
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	0019      	movs	r1, r3
 8000426:	4093      	lsls	r3, r2
 8000428:	40c1      	lsrs	r1, r0
 800042a:	1e5a      	subs	r2, r3, #1
 800042c:	4193      	sbcs	r3, r2
 800042e:	4319      	orrs	r1, r3
 8000430:	468c      	mov	ip, r1
 8000432:	1e0b      	subs	r3, r1, #0
 8000434:	d0e1      	beq.n	80003fa <__aeabi_fsub+0x1aa>
 8000436:	075b      	lsls	r3, r3, #29
 8000438:	d100      	bne.n	800043c <__aeabi_fsub+0x1ec>
 800043a:	e152      	b.n	80006e2 <__aeabi_fsub+0x492>
 800043c:	230f      	movs	r3, #15
 800043e:	2500      	movs	r5, #0
 8000440:	400b      	ands	r3, r1
 8000442:	2b04      	cmp	r3, #4
 8000444:	d000      	beq.n	8000448 <__aeabi_fsub+0x1f8>
 8000446:	e752      	b.n	80002ee <__aeabi_fsub+0x9e>
 8000448:	2001      	movs	r0, #1
 800044a:	014a      	lsls	r2, r1, #5
 800044c:	d400      	bmi.n	8000450 <__aeabi_fsub+0x200>
 800044e:	e092      	b.n	8000576 <__aeabi_fsub+0x326>
 8000450:	b2c0      	uxtb	r0, r0
 8000452:	4663      	mov	r3, ip
 8000454:	019a      	lsls	r2, r3, #6
 8000456:	0a52      	lsrs	r2, r2, #9
 8000458:	e756      	b.n	8000308 <__aeabi_fsub+0xb8>
 800045a:	4663      	mov	r3, ip
 800045c:	075b      	lsls	r3, r3, #29
 800045e:	d005      	beq.n	800046c <__aeabi_fsub+0x21c>
 8000460:	230f      	movs	r3, #15
 8000462:	4662      	mov	r2, ip
 8000464:	4013      	ands	r3, r2
 8000466:	2b04      	cmp	r3, #4
 8000468:	d000      	beq.n	800046c <__aeabi_fsub+0x21c>
 800046a:	e740      	b.n	80002ee <__aeabi_fsub+0x9e>
 800046c:	002b      	movs	r3, r5
 800046e:	e765      	b.n	800033c <__aeabi_fsub+0xec>
 8000470:	0007      	movs	r7, r0
 8000472:	2f00      	cmp	r7, #0
 8000474:	d100      	bne.n	8000478 <__aeabi_fsub+0x228>
 8000476:	e745      	b.n	8000304 <__aeabi_fsub+0xb4>
 8000478:	2280      	movs	r2, #128	@ 0x80
 800047a:	03d2      	lsls	r2, r2, #15
 800047c:	433a      	orrs	r2, r7
 800047e:	0252      	lsls	r2, r2, #9
 8000480:	20ff      	movs	r0, #255	@ 0xff
 8000482:	0a52      	lsrs	r2, r2, #9
 8000484:	e740      	b.n	8000308 <__aeabi_fsub+0xb8>
 8000486:	2b00      	cmp	r3, #0
 8000488:	d179      	bne.n	800057e <__aeabi_fsub+0x32e>
 800048a:	22fe      	movs	r2, #254	@ 0xfe
 800048c:	1c6b      	adds	r3, r5, #1
 800048e:	421a      	tst	r2, r3
 8000490:	d1aa      	bne.n	80003e8 <__aeabi_fsub+0x198>
 8000492:	4663      	mov	r3, ip
 8000494:	2b00      	cmp	r3, #0
 8000496:	d100      	bne.n	800049a <__aeabi_fsub+0x24a>
 8000498:	e0f5      	b.n	8000686 <__aeabi_fsub+0x436>
 800049a:	2900      	cmp	r1, #0
 800049c:	d100      	bne.n	80004a0 <__aeabi_fsub+0x250>
 800049e:	e0d1      	b.n	8000644 <__aeabi_fsub+0x3f4>
 80004a0:	1a5f      	subs	r7, r3, r1
 80004a2:	2380      	movs	r3, #128	@ 0x80
 80004a4:	04db      	lsls	r3, r3, #19
 80004a6:	421f      	tst	r7, r3
 80004a8:	d100      	bne.n	80004ac <__aeabi_fsub+0x25c>
 80004aa:	e10e      	b.n	80006ca <__aeabi_fsub+0x47a>
 80004ac:	4662      	mov	r2, ip
 80004ae:	2401      	movs	r4, #1
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	4694      	mov	ip, r2
 80004b4:	2000      	movs	r0, #0
 80004b6:	4034      	ands	r4, r6
 80004b8:	2a00      	cmp	r2, #0
 80004ba:	d100      	bne.n	80004be <__aeabi_fsub+0x26e>
 80004bc:	e724      	b.n	8000308 <__aeabi_fsub+0xb8>
 80004be:	2001      	movs	r0, #1
 80004c0:	421a      	tst	r2, r3
 80004c2:	d1c6      	bne.n	8000452 <__aeabi_fsub+0x202>
 80004c4:	2300      	movs	r3, #0
 80004c6:	08d7      	lsrs	r7, r2, #3
 80004c8:	e73d      	b.n	8000346 <__aeabi_fsub+0xf6>
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d017      	beq.n	80004fe <__aeabi_fsub+0x2ae>
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d000      	beq.n	80004d4 <__aeabi_fsub+0x284>
 80004d2:	e0af      	b.n	8000634 <__aeabi_fsub+0x3e4>
 80004d4:	23ff      	movs	r3, #255	@ 0xff
 80004d6:	4665      	mov	r5, ip
 80004d8:	2d00      	cmp	r5, #0
 80004da:	d100      	bne.n	80004de <__aeabi_fsub+0x28e>
 80004dc:	e0ad      	b.n	800063a <__aeabi_fsub+0x3ea>
 80004de:	1e5e      	subs	r6, r3, #1
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fsub+0x296>
 80004e4:	e089      	b.n	80005fa <__aeabi_fsub+0x3aa>
 80004e6:	2bff      	cmp	r3, #255	@ 0xff
 80004e8:	d0c2      	beq.n	8000470 <__aeabi_fsub+0x220>
 80004ea:	2e1b      	cmp	r6, #27
 80004ec:	dc00      	bgt.n	80004f0 <__aeabi_fsub+0x2a0>
 80004ee:	e0ab      	b.n	8000648 <__aeabi_fsub+0x3f8>
 80004f0:	1d4b      	adds	r3, r1, #5
 80004f2:	469c      	mov	ip, r3
 80004f4:	0013      	movs	r3, r2
 80004f6:	e721      	b.n	800033c <__aeabi_fsub+0xec>
 80004f8:	464b      	mov	r3, r9
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d170      	bne.n	80005e0 <__aeabi_fsub+0x390>
 80004fe:	22fe      	movs	r2, #254	@ 0xfe
 8000500:	1c6b      	adds	r3, r5, #1
 8000502:	421a      	tst	r2, r3
 8000504:	d15e      	bne.n	80005c4 <__aeabi_fsub+0x374>
 8000506:	2d00      	cmp	r5, #0
 8000508:	d000      	beq.n	800050c <__aeabi_fsub+0x2bc>
 800050a:	e0c3      	b.n	8000694 <__aeabi_fsub+0x444>
 800050c:	4663      	mov	r3, ip
 800050e:	2b00      	cmp	r3, #0
 8000510:	d100      	bne.n	8000514 <__aeabi_fsub+0x2c4>
 8000512:	e0d0      	b.n	80006b6 <__aeabi_fsub+0x466>
 8000514:	2900      	cmp	r1, #0
 8000516:	d100      	bne.n	800051a <__aeabi_fsub+0x2ca>
 8000518:	e094      	b.n	8000644 <__aeabi_fsub+0x3f4>
 800051a:	000a      	movs	r2, r1
 800051c:	4462      	add	r2, ip
 800051e:	0153      	lsls	r3, r2, #5
 8000520:	d400      	bmi.n	8000524 <__aeabi_fsub+0x2d4>
 8000522:	e0d8      	b.n	80006d6 <__aeabi_fsub+0x486>
 8000524:	0192      	lsls	r2, r2, #6
 8000526:	2001      	movs	r0, #1
 8000528:	0a52      	lsrs	r2, r2, #9
 800052a:	e6ed      	b.n	8000308 <__aeabi_fsub+0xb8>
 800052c:	0008      	movs	r0, r1
 800052e:	2220      	movs	r2, #32
 8000530:	40d8      	lsrs	r0, r3
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	4099      	lsls	r1, r3
 8000536:	000b      	movs	r3, r1
 8000538:	1e5a      	subs	r2, r3, #1
 800053a:	4193      	sbcs	r3, r2
 800053c:	4303      	orrs	r3, r0
 800053e:	449c      	add	ip, r3
 8000540:	4663      	mov	r3, ip
 8000542:	015b      	lsls	r3, r3, #5
 8000544:	d589      	bpl.n	800045a <__aeabi_fsub+0x20a>
 8000546:	3501      	adds	r5, #1
 8000548:	2dff      	cmp	r5, #255	@ 0xff
 800054a:	d100      	bne.n	800054e <__aeabi_fsub+0x2fe>
 800054c:	e6da      	b.n	8000304 <__aeabi_fsub+0xb4>
 800054e:	4662      	mov	r2, ip
 8000550:	2301      	movs	r3, #1
 8000552:	4919      	ldr	r1, [pc, #100]	@ (80005b8 <__aeabi_fsub+0x368>)
 8000554:	4013      	ands	r3, r2
 8000556:	0852      	lsrs	r2, r2, #1
 8000558:	400a      	ands	r2, r1
 800055a:	431a      	orrs	r2, r3
 800055c:	0013      	movs	r3, r2
 800055e:	4694      	mov	ip, r2
 8000560:	075b      	lsls	r3, r3, #29
 8000562:	d004      	beq.n	800056e <__aeabi_fsub+0x31e>
 8000564:	230f      	movs	r3, #15
 8000566:	4013      	ands	r3, r2
 8000568:	2b04      	cmp	r3, #4
 800056a:	d000      	beq.n	800056e <__aeabi_fsub+0x31e>
 800056c:	e6bf      	b.n	80002ee <__aeabi_fsub+0x9e>
 800056e:	4663      	mov	r3, ip
 8000570:	015b      	lsls	r3, r3, #5
 8000572:	d500      	bpl.n	8000576 <__aeabi_fsub+0x326>
 8000574:	e6c2      	b.n	80002fc <__aeabi_fsub+0xac>
 8000576:	4663      	mov	r3, ip
 8000578:	08df      	lsrs	r7, r3, #3
 800057a:	002b      	movs	r3, r5
 800057c:	e6e3      	b.n	8000346 <__aeabi_fsub+0xf6>
 800057e:	1b53      	subs	r3, r2, r5
 8000580:	2d00      	cmp	r5, #0
 8000582:	d100      	bne.n	8000586 <__aeabi_fsub+0x336>
 8000584:	e6f4      	b.n	8000370 <__aeabi_fsub+0x120>
 8000586:	2080      	movs	r0, #128	@ 0x80
 8000588:	4664      	mov	r4, ip
 800058a:	04c0      	lsls	r0, r0, #19
 800058c:	4304      	orrs	r4, r0
 800058e:	46a4      	mov	ip, r4
 8000590:	0034      	movs	r4, r6
 8000592:	2001      	movs	r0, #1
 8000594:	2b1b      	cmp	r3, #27
 8000596:	dc09      	bgt.n	80005ac <__aeabi_fsub+0x35c>
 8000598:	2520      	movs	r5, #32
 800059a:	4660      	mov	r0, ip
 800059c:	40d8      	lsrs	r0, r3
 800059e:	1aeb      	subs	r3, r5, r3
 80005a0:	4665      	mov	r5, ip
 80005a2:	409d      	lsls	r5, r3
 80005a4:	002b      	movs	r3, r5
 80005a6:	1e5d      	subs	r5, r3, #1
 80005a8:	41ab      	sbcs	r3, r5
 80005aa:	4318      	orrs	r0, r3
 80005ac:	1a0b      	subs	r3, r1, r0
 80005ae:	469c      	mov	ip, r3
 80005b0:	0015      	movs	r5, r2
 80005b2:	e680      	b.n	80002b6 <__aeabi_fsub+0x66>
 80005b4:	fbffffff 	.word	0xfbffffff
 80005b8:	7dffffff 	.word	0x7dffffff
 80005bc:	22fe      	movs	r2, #254	@ 0xfe
 80005be:	1c6b      	adds	r3, r5, #1
 80005c0:	4213      	tst	r3, r2
 80005c2:	d0a3      	beq.n	800050c <__aeabi_fsub+0x2bc>
 80005c4:	2bff      	cmp	r3, #255	@ 0xff
 80005c6:	d100      	bne.n	80005ca <__aeabi_fsub+0x37a>
 80005c8:	e69c      	b.n	8000304 <__aeabi_fsub+0xb4>
 80005ca:	4461      	add	r1, ip
 80005cc:	0849      	lsrs	r1, r1, #1
 80005ce:	074a      	lsls	r2, r1, #29
 80005d0:	d049      	beq.n	8000666 <__aeabi_fsub+0x416>
 80005d2:	220f      	movs	r2, #15
 80005d4:	400a      	ands	r2, r1
 80005d6:	2a04      	cmp	r2, #4
 80005d8:	d045      	beq.n	8000666 <__aeabi_fsub+0x416>
 80005da:	1d0a      	adds	r2, r1, #4
 80005dc:	4694      	mov	ip, r2
 80005de:	e6ad      	b.n	800033c <__aeabi_fsub+0xec>
 80005e0:	2d00      	cmp	r5, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fsub+0x396>
 80005e4:	e776      	b.n	80004d4 <__aeabi_fsub+0x284>
 80005e6:	e68d      	b.n	8000304 <__aeabi_fsub+0xb4>
 80005e8:	0034      	movs	r4, r6
 80005ea:	20ff      	movs	r0, #255	@ 0xff
 80005ec:	2200      	movs	r2, #0
 80005ee:	e68b      	b.n	8000308 <__aeabi_fsub+0xb8>
 80005f0:	4663      	mov	r3, ip
 80005f2:	2401      	movs	r4, #1
 80005f4:	1acf      	subs	r7, r1, r3
 80005f6:	4034      	ands	r4, r6
 80005f8:	e664      	b.n	80002c4 <__aeabi_fsub+0x74>
 80005fa:	4461      	add	r1, ip
 80005fc:	014b      	lsls	r3, r1, #5
 80005fe:	d56d      	bpl.n	80006dc <__aeabi_fsub+0x48c>
 8000600:	0848      	lsrs	r0, r1, #1
 8000602:	4944      	ldr	r1, [pc, #272]	@ (8000714 <__aeabi_fsub+0x4c4>)
 8000604:	4001      	ands	r1, r0
 8000606:	0743      	lsls	r3, r0, #29
 8000608:	d02c      	beq.n	8000664 <__aeabi_fsub+0x414>
 800060a:	230f      	movs	r3, #15
 800060c:	4003      	ands	r3, r0
 800060e:	2b04      	cmp	r3, #4
 8000610:	d028      	beq.n	8000664 <__aeabi_fsub+0x414>
 8000612:	1d0b      	adds	r3, r1, #4
 8000614:	469c      	mov	ip, r3
 8000616:	2302      	movs	r3, #2
 8000618:	e690      	b.n	800033c <__aeabi_fsub+0xec>
 800061a:	2900      	cmp	r1, #0
 800061c:	d100      	bne.n	8000620 <__aeabi_fsub+0x3d0>
 800061e:	e72b      	b.n	8000478 <__aeabi_fsub+0x228>
 8000620:	2380      	movs	r3, #128	@ 0x80
 8000622:	03db      	lsls	r3, r3, #15
 8000624:	429f      	cmp	r7, r3
 8000626:	d200      	bcs.n	800062a <__aeabi_fsub+0x3da>
 8000628:	e726      	b.n	8000478 <__aeabi_fsub+0x228>
 800062a:	4298      	cmp	r0, r3
 800062c:	d300      	bcc.n	8000630 <__aeabi_fsub+0x3e0>
 800062e:	e723      	b.n	8000478 <__aeabi_fsub+0x228>
 8000630:	2401      	movs	r4, #1
 8000632:	4034      	ands	r4, r6
 8000634:	0007      	movs	r7, r0
 8000636:	e71f      	b.n	8000478 <__aeabi_fsub+0x228>
 8000638:	0034      	movs	r4, r6
 800063a:	468c      	mov	ip, r1
 800063c:	e67e      	b.n	800033c <__aeabi_fsub+0xec>
 800063e:	2301      	movs	r3, #1
 8000640:	08cf      	lsrs	r7, r1, #3
 8000642:	e680      	b.n	8000346 <__aeabi_fsub+0xf6>
 8000644:	2300      	movs	r3, #0
 8000646:	e67e      	b.n	8000346 <__aeabi_fsub+0xf6>
 8000648:	2020      	movs	r0, #32
 800064a:	4665      	mov	r5, ip
 800064c:	1b80      	subs	r0, r0, r6
 800064e:	4085      	lsls	r5, r0
 8000650:	4663      	mov	r3, ip
 8000652:	0028      	movs	r0, r5
 8000654:	40f3      	lsrs	r3, r6
 8000656:	1e45      	subs	r5, r0, #1
 8000658:	41a8      	sbcs	r0, r5
 800065a:	4303      	orrs	r3, r0
 800065c:	469c      	mov	ip, r3
 800065e:	0015      	movs	r5, r2
 8000660:	448c      	add	ip, r1
 8000662:	e76d      	b.n	8000540 <__aeabi_fsub+0x2f0>
 8000664:	2302      	movs	r3, #2
 8000666:	08cf      	lsrs	r7, r1, #3
 8000668:	e66d      	b.n	8000346 <__aeabi_fsub+0xf6>
 800066a:	1b0f      	subs	r7, r1, r4
 800066c:	017b      	lsls	r3, r7, #5
 800066e:	d528      	bpl.n	80006c2 <__aeabi_fsub+0x472>
 8000670:	01bf      	lsls	r7, r7, #6
 8000672:	09bf      	lsrs	r7, r7, #6
 8000674:	0038      	movs	r0, r7
 8000676:	f000 ff93 	bl	80015a0 <__clzsi2>
 800067a:	003b      	movs	r3, r7
 800067c:	3805      	subs	r0, #5
 800067e:	4083      	lsls	r3, r0
 8000680:	0034      	movs	r4, r6
 8000682:	2501      	movs	r5, #1
 8000684:	e6ca      	b.n	800041c <__aeabi_fsub+0x1cc>
 8000686:	2900      	cmp	r1, #0
 8000688:	d100      	bne.n	800068c <__aeabi_fsub+0x43c>
 800068a:	e6b5      	b.n	80003f8 <__aeabi_fsub+0x1a8>
 800068c:	2401      	movs	r4, #1
 800068e:	0007      	movs	r7, r0
 8000690:	4034      	ands	r4, r6
 8000692:	e658      	b.n	8000346 <__aeabi_fsub+0xf6>
 8000694:	4663      	mov	r3, ip
 8000696:	2b00      	cmp	r3, #0
 8000698:	d100      	bne.n	800069c <__aeabi_fsub+0x44c>
 800069a:	e6e9      	b.n	8000470 <__aeabi_fsub+0x220>
 800069c:	2900      	cmp	r1, #0
 800069e:	d100      	bne.n	80006a2 <__aeabi_fsub+0x452>
 80006a0:	e6ea      	b.n	8000478 <__aeabi_fsub+0x228>
 80006a2:	2380      	movs	r3, #128	@ 0x80
 80006a4:	03db      	lsls	r3, r3, #15
 80006a6:	429f      	cmp	r7, r3
 80006a8:	d200      	bcs.n	80006ac <__aeabi_fsub+0x45c>
 80006aa:	e6e5      	b.n	8000478 <__aeabi_fsub+0x228>
 80006ac:	4298      	cmp	r0, r3
 80006ae:	d300      	bcc.n	80006b2 <__aeabi_fsub+0x462>
 80006b0:	e6e2      	b.n	8000478 <__aeabi_fsub+0x228>
 80006b2:	0007      	movs	r7, r0
 80006b4:	e6e0      	b.n	8000478 <__aeabi_fsub+0x228>
 80006b6:	2900      	cmp	r1, #0
 80006b8:	d100      	bne.n	80006bc <__aeabi_fsub+0x46c>
 80006ba:	e69e      	b.n	80003fa <__aeabi_fsub+0x1aa>
 80006bc:	2300      	movs	r3, #0
 80006be:	08cf      	lsrs	r7, r1, #3
 80006c0:	e641      	b.n	8000346 <__aeabi_fsub+0xf6>
 80006c2:	0034      	movs	r4, r6
 80006c4:	2301      	movs	r3, #1
 80006c6:	08ff      	lsrs	r7, r7, #3
 80006c8:	e63d      	b.n	8000346 <__aeabi_fsub+0xf6>
 80006ca:	2f00      	cmp	r7, #0
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fsub+0x480>
 80006ce:	e693      	b.n	80003f8 <__aeabi_fsub+0x1a8>
 80006d0:	2300      	movs	r3, #0
 80006d2:	08ff      	lsrs	r7, r7, #3
 80006d4:	e637      	b.n	8000346 <__aeabi_fsub+0xf6>
 80006d6:	2300      	movs	r3, #0
 80006d8:	08d7      	lsrs	r7, r2, #3
 80006da:	e634      	b.n	8000346 <__aeabi_fsub+0xf6>
 80006dc:	2301      	movs	r3, #1
 80006de:	08cf      	lsrs	r7, r1, #3
 80006e0:	e631      	b.n	8000346 <__aeabi_fsub+0xf6>
 80006e2:	2280      	movs	r2, #128	@ 0x80
 80006e4:	000b      	movs	r3, r1
 80006e6:	04d2      	lsls	r2, r2, #19
 80006e8:	2001      	movs	r0, #1
 80006ea:	4013      	ands	r3, r2
 80006ec:	4211      	tst	r1, r2
 80006ee:	d000      	beq.n	80006f2 <__aeabi_fsub+0x4a2>
 80006f0:	e6ae      	b.n	8000450 <__aeabi_fsub+0x200>
 80006f2:	08cf      	lsrs	r7, r1, #3
 80006f4:	e627      	b.n	8000346 <__aeabi_fsub+0xf6>
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d100      	bne.n	80006fc <__aeabi_fsub+0x4ac>
 80006fa:	e75f      	b.n	80005bc <__aeabi_fsub+0x36c>
 80006fc:	1b56      	subs	r6, r2, r5
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d101      	bne.n	8000706 <__aeabi_fsub+0x4b6>
 8000702:	0033      	movs	r3, r6
 8000704:	e6e7      	b.n	80004d6 <__aeabi_fsub+0x286>
 8000706:	2380      	movs	r3, #128	@ 0x80
 8000708:	4660      	mov	r0, ip
 800070a:	04db      	lsls	r3, r3, #19
 800070c:	4318      	orrs	r0, r3
 800070e:	4684      	mov	ip, r0
 8000710:	e6eb      	b.n	80004ea <__aeabi_fsub+0x29a>
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	7dffffff 	.word	0x7dffffff

08000718 <__aeabi_f2iz>:
 8000718:	0241      	lsls	r1, r0, #9
 800071a:	0042      	lsls	r2, r0, #1
 800071c:	0fc3      	lsrs	r3, r0, #31
 800071e:	0a49      	lsrs	r1, r1, #9
 8000720:	2000      	movs	r0, #0
 8000722:	0e12      	lsrs	r2, r2, #24
 8000724:	2a7e      	cmp	r2, #126	@ 0x7e
 8000726:	dd03      	ble.n	8000730 <__aeabi_f2iz+0x18>
 8000728:	2a9d      	cmp	r2, #157	@ 0x9d
 800072a:	dd02      	ble.n	8000732 <__aeabi_f2iz+0x1a>
 800072c:	4a09      	ldr	r2, [pc, #36]	@ (8000754 <__aeabi_f2iz+0x3c>)
 800072e:	1898      	adds	r0, r3, r2
 8000730:	4770      	bx	lr
 8000732:	2080      	movs	r0, #128	@ 0x80
 8000734:	0400      	lsls	r0, r0, #16
 8000736:	4301      	orrs	r1, r0
 8000738:	2a95      	cmp	r2, #149	@ 0x95
 800073a:	dc07      	bgt.n	800074c <__aeabi_f2iz+0x34>
 800073c:	2096      	movs	r0, #150	@ 0x96
 800073e:	1a82      	subs	r2, r0, r2
 8000740:	40d1      	lsrs	r1, r2
 8000742:	4248      	negs	r0, r1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f3      	bne.n	8000730 <__aeabi_f2iz+0x18>
 8000748:	0008      	movs	r0, r1
 800074a:	e7f1      	b.n	8000730 <__aeabi_f2iz+0x18>
 800074c:	3a96      	subs	r2, #150	@ 0x96
 800074e:	4091      	lsls	r1, r2
 8000750:	e7f7      	b.n	8000742 <__aeabi_f2iz+0x2a>
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	7fffffff 	.word	0x7fffffff

08000758 <__aeabi_ui2f>:
 8000758:	b510      	push	{r4, lr}
 800075a:	1e04      	subs	r4, r0, #0
 800075c:	d00d      	beq.n	800077a <__aeabi_ui2f+0x22>
 800075e:	f000 ff1f 	bl	80015a0 <__clzsi2>
 8000762:	239e      	movs	r3, #158	@ 0x9e
 8000764:	1a1b      	subs	r3, r3, r0
 8000766:	2b96      	cmp	r3, #150	@ 0x96
 8000768:	dc0c      	bgt.n	8000784 <__aeabi_ui2f+0x2c>
 800076a:	2808      	cmp	r0, #8
 800076c:	d034      	beq.n	80007d8 <__aeabi_ui2f+0x80>
 800076e:	3808      	subs	r0, #8
 8000770:	4084      	lsls	r4, r0
 8000772:	0264      	lsls	r4, r4, #9
 8000774:	0a64      	lsrs	r4, r4, #9
 8000776:	b2d8      	uxtb	r0, r3
 8000778:	e001      	b.n	800077e <__aeabi_ui2f+0x26>
 800077a:	2000      	movs	r0, #0
 800077c:	2400      	movs	r4, #0
 800077e:	05c0      	lsls	r0, r0, #23
 8000780:	4320      	orrs	r0, r4
 8000782:	bd10      	pop	{r4, pc}
 8000784:	2b99      	cmp	r3, #153	@ 0x99
 8000786:	dc13      	bgt.n	80007b0 <__aeabi_ui2f+0x58>
 8000788:	1f42      	subs	r2, r0, #5
 800078a:	4094      	lsls	r4, r2
 800078c:	4a14      	ldr	r2, [pc, #80]	@ (80007e0 <__aeabi_ui2f+0x88>)
 800078e:	4022      	ands	r2, r4
 8000790:	0761      	lsls	r1, r4, #29
 8000792:	d01c      	beq.n	80007ce <__aeabi_ui2f+0x76>
 8000794:	210f      	movs	r1, #15
 8000796:	4021      	ands	r1, r4
 8000798:	2904      	cmp	r1, #4
 800079a:	d018      	beq.n	80007ce <__aeabi_ui2f+0x76>
 800079c:	3204      	adds	r2, #4
 800079e:	08d4      	lsrs	r4, r2, #3
 80007a0:	0152      	lsls	r2, r2, #5
 80007a2:	d515      	bpl.n	80007d0 <__aeabi_ui2f+0x78>
 80007a4:	239f      	movs	r3, #159	@ 0x9f
 80007a6:	0264      	lsls	r4, r4, #9
 80007a8:	1a18      	subs	r0, r3, r0
 80007aa:	0a64      	lsrs	r4, r4, #9
 80007ac:	b2c0      	uxtb	r0, r0
 80007ae:	e7e6      	b.n	800077e <__aeabi_ui2f+0x26>
 80007b0:	0002      	movs	r2, r0
 80007b2:	0021      	movs	r1, r4
 80007b4:	321b      	adds	r2, #27
 80007b6:	4091      	lsls	r1, r2
 80007b8:	000a      	movs	r2, r1
 80007ba:	1e51      	subs	r1, r2, #1
 80007bc:	418a      	sbcs	r2, r1
 80007be:	2105      	movs	r1, #5
 80007c0:	1a09      	subs	r1, r1, r0
 80007c2:	40cc      	lsrs	r4, r1
 80007c4:	4314      	orrs	r4, r2
 80007c6:	4a06      	ldr	r2, [pc, #24]	@ (80007e0 <__aeabi_ui2f+0x88>)
 80007c8:	4022      	ands	r2, r4
 80007ca:	0761      	lsls	r1, r4, #29
 80007cc:	d1e2      	bne.n	8000794 <__aeabi_ui2f+0x3c>
 80007ce:	08d4      	lsrs	r4, r2, #3
 80007d0:	0264      	lsls	r4, r4, #9
 80007d2:	0a64      	lsrs	r4, r4, #9
 80007d4:	b2d8      	uxtb	r0, r3
 80007d6:	e7d2      	b.n	800077e <__aeabi_ui2f+0x26>
 80007d8:	0264      	lsls	r4, r4, #9
 80007da:	0a64      	lsrs	r4, r4, #9
 80007dc:	308e      	adds	r0, #142	@ 0x8e
 80007de:	e7ce      	b.n	800077e <__aeabi_ui2f+0x26>
 80007e0:	fbffffff 	.word	0xfbffffff

080007e4 <__aeabi_ddiv>:
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	46de      	mov	lr, fp
 80007e8:	4645      	mov	r5, r8
 80007ea:	4657      	mov	r7, sl
 80007ec:	464e      	mov	r6, r9
 80007ee:	b5e0      	push	{r5, r6, r7, lr}
 80007f0:	b087      	sub	sp, #28
 80007f2:	9200      	str	r2, [sp, #0]
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	030b      	lsls	r3, r1, #12
 80007f8:	0b1b      	lsrs	r3, r3, #12
 80007fa:	469b      	mov	fp, r3
 80007fc:	0fca      	lsrs	r2, r1, #31
 80007fe:	004b      	lsls	r3, r1, #1
 8000800:	0004      	movs	r4, r0
 8000802:	4680      	mov	r8, r0
 8000804:	0d5b      	lsrs	r3, r3, #21
 8000806:	9202      	str	r2, [sp, #8]
 8000808:	d100      	bne.n	800080c <__aeabi_ddiv+0x28>
 800080a:	e098      	b.n	800093e <__aeabi_ddiv+0x15a>
 800080c:	4a7c      	ldr	r2, [pc, #496]	@ (8000a00 <__aeabi_ddiv+0x21c>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d037      	beq.n	8000882 <__aeabi_ddiv+0x9e>
 8000812:	4659      	mov	r1, fp
 8000814:	0f42      	lsrs	r2, r0, #29
 8000816:	00c9      	lsls	r1, r1, #3
 8000818:	430a      	orrs	r2, r1
 800081a:	2180      	movs	r1, #128	@ 0x80
 800081c:	0409      	lsls	r1, r1, #16
 800081e:	4311      	orrs	r1, r2
 8000820:	00c2      	lsls	r2, r0, #3
 8000822:	4690      	mov	r8, r2
 8000824:	4a77      	ldr	r2, [pc, #476]	@ (8000a04 <__aeabi_ddiv+0x220>)
 8000826:	4689      	mov	r9, r1
 8000828:	4692      	mov	sl, r2
 800082a:	449a      	add	sl, r3
 800082c:	2300      	movs	r3, #0
 800082e:	2400      	movs	r4, #0
 8000830:	9303      	str	r3, [sp, #12]
 8000832:	9e00      	ldr	r6, [sp, #0]
 8000834:	9f01      	ldr	r7, [sp, #4]
 8000836:	033b      	lsls	r3, r7, #12
 8000838:	0b1b      	lsrs	r3, r3, #12
 800083a:	469b      	mov	fp, r3
 800083c:	007b      	lsls	r3, r7, #1
 800083e:	0030      	movs	r0, r6
 8000840:	0d5b      	lsrs	r3, r3, #21
 8000842:	0ffd      	lsrs	r5, r7, #31
 8000844:	2b00      	cmp	r3, #0
 8000846:	d059      	beq.n	80008fc <__aeabi_ddiv+0x118>
 8000848:	4a6d      	ldr	r2, [pc, #436]	@ (8000a00 <__aeabi_ddiv+0x21c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d048      	beq.n	80008e0 <__aeabi_ddiv+0xfc>
 800084e:	4659      	mov	r1, fp
 8000850:	0f72      	lsrs	r2, r6, #29
 8000852:	00c9      	lsls	r1, r1, #3
 8000854:	430a      	orrs	r2, r1
 8000856:	2180      	movs	r1, #128	@ 0x80
 8000858:	0409      	lsls	r1, r1, #16
 800085a:	4311      	orrs	r1, r2
 800085c:	468b      	mov	fp, r1
 800085e:	4969      	ldr	r1, [pc, #420]	@ (8000a04 <__aeabi_ddiv+0x220>)
 8000860:	00f2      	lsls	r2, r6, #3
 8000862:	468c      	mov	ip, r1
 8000864:	4651      	mov	r1, sl
 8000866:	4463      	add	r3, ip
 8000868:	1acb      	subs	r3, r1, r3
 800086a:	469a      	mov	sl, r3
 800086c:	2100      	movs	r1, #0
 800086e:	9e02      	ldr	r6, [sp, #8]
 8000870:	406e      	eors	r6, r5
 8000872:	b2f6      	uxtb	r6, r6
 8000874:	2c0f      	cmp	r4, #15
 8000876:	d900      	bls.n	800087a <__aeabi_ddiv+0x96>
 8000878:	e0ce      	b.n	8000a18 <__aeabi_ddiv+0x234>
 800087a:	4b63      	ldr	r3, [pc, #396]	@ (8000a08 <__aeabi_ddiv+0x224>)
 800087c:	00a4      	lsls	r4, r4, #2
 800087e:	591b      	ldr	r3, [r3, r4]
 8000880:	469f      	mov	pc, r3
 8000882:	465a      	mov	r2, fp
 8000884:	4302      	orrs	r2, r0
 8000886:	4691      	mov	r9, r2
 8000888:	d000      	beq.n	800088c <__aeabi_ddiv+0xa8>
 800088a:	e090      	b.n	80009ae <__aeabi_ddiv+0x1ca>
 800088c:	469a      	mov	sl, r3
 800088e:	2302      	movs	r3, #2
 8000890:	4690      	mov	r8, r2
 8000892:	2408      	movs	r4, #8
 8000894:	9303      	str	r3, [sp, #12]
 8000896:	e7cc      	b.n	8000832 <__aeabi_ddiv+0x4e>
 8000898:	46cb      	mov	fp, r9
 800089a:	4642      	mov	r2, r8
 800089c:	9d02      	ldr	r5, [sp, #8]
 800089e:	9903      	ldr	r1, [sp, #12]
 80008a0:	2902      	cmp	r1, #2
 80008a2:	d100      	bne.n	80008a6 <__aeabi_ddiv+0xc2>
 80008a4:	e1de      	b.n	8000c64 <__aeabi_ddiv+0x480>
 80008a6:	2903      	cmp	r1, #3
 80008a8:	d100      	bne.n	80008ac <__aeabi_ddiv+0xc8>
 80008aa:	e08d      	b.n	80009c8 <__aeabi_ddiv+0x1e4>
 80008ac:	2901      	cmp	r1, #1
 80008ae:	d000      	beq.n	80008b2 <__aeabi_ddiv+0xce>
 80008b0:	e179      	b.n	8000ba6 <__aeabi_ddiv+0x3c2>
 80008b2:	002e      	movs	r6, r5
 80008b4:	2200      	movs	r2, #0
 80008b6:	2300      	movs	r3, #0
 80008b8:	2400      	movs	r4, #0
 80008ba:	4690      	mov	r8, r2
 80008bc:	051b      	lsls	r3, r3, #20
 80008be:	4323      	orrs	r3, r4
 80008c0:	07f6      	lsls	r6, r6, #31
 80008c2:	4333      	orrs	r3, r6
 80008c4:	4640      	mov	r0, r8
 80008c6:	0019      	movs	r1, r3
 80008c8:	b007      	add	sp, #28
 80008ca:	bcf0      	pop	{r4, r5, r6, r7}
 80008cc:	46bb      	mov	fp, r7
 80008ce:	46b2      	mov	sl, r6
 80008d0:	46a9      	mov	r9, r5
 80008d2:	46a0      	mov	r8, r4
 80008d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d6:	2200      	movs	r2, #0
 80008d8:	2400      	movs	r4, #0
 80008da:	4690      	mov	r8, r2
 80008dc:	4b48      	ldr	r3, [pc, #288]	@ (8000a00 <__aeabi_ddiv+0x21c>)
 80008de:	e7ed      	b.n	80008bc <__aeabi_ddiv+0xd8>
 80008e0:	465a      	mov	r2, fp
 80008e2:	9b00      	ldr	r3, [sp, #0]
 80008e4:	431a      	orrs	r2, r3
 80008e6:	4b49      	ldr	r3, [pc, #292]	@ (8000a0c <__aeabi_ddiv+0x228>)
 80008e8:	469c      	mov	ip, r3
 80008ea:	44e2      	add	sl, ip
 80008ec:	2a00      	cmp	r2, #0
 80008ee:	d159      	bne.n	80009a4 <__aeabi_ddiv+0x1c0>
 80008f0:	2302      	movs	r3, #2
 80008f2:	431c      	orrs	r4, r3
 80008f4:	2300      	movs	r3, #0
 80008f6:	2102      	movs	r1, #2
 80008f8:	469b      	mov	fp, r3
 80008fa:	e7b8      	b.n	800086e <__aeabi_ddiv+0x8a>
 80008fc:	465a      	mov	r2, fp
 80008fe:	9b00      	ldr	r3, [sp, #0]
 8000900:	431a      	orrs	r2, r3
 8000902:	d049      	beq.n	8000998 <__aeabi_ddiv+0x1b4>
 8000904:	465b      	mov	r3, fp
 8000906:	2b00      	cmp	r3, #0
 8000908:	d100      	bne.n	800090c <__aeabi_ddiv+0x128>
 800090a:	e19c      	b.n	8000c46 <__aeabi_ddiv+0x462>
 800090c:	4658      	mov	r0, fp
 800090e:	f000 fe47 	bl	80015a0 <__clzsi2>
 8000912:	0002      	movs	r2, r0
 8000914:	0003      	movs	r3, r0
 8000916:	3a0b      	subs	r2, #11
 8000918:	271d      	movs	r7, #29
 800091a:	9e00      	ldr	r6, [sp, #0]
 800091c:	1aba      	subs	r2, r7, r2
 800091e:	0019      	movs	r1, r3
 8000920:	4658      	mov	r0, fp
 8000922:	40d6      	lsrs	r6, r2
 8000924:	3908      	subs	r1, #8
 8000926:	4088      	lsls	r0, r1
 8000928:	0032      	movs	r2, r6
 800092a:	4302      	orrs	r2, r0
 800092c:	4693      	mov	fp, r2
 800092e:	9a00      	ldr	r2, [sp, #0]
 8000930:	408a      	lsls	r2, r1
 8000932:	4937      	ldr	r1, [pc, #220]	@ (8000a10 <__aeabi_ddiv+0x22c>)
 8000934:	4453      	add	r3, sl
 8000936:	468a      	mov	sl, r1
 8000938:	2100      	movs	r1, #0
 800093a:	449a      	add	sl, r3
 800093c:	e797      	b.n	800086e <__aeabi_ddiv+0x8a>
 800093e:	465b      	mov	r3, fp
 8000940:	4303      	orrs	r3, r0
 8000942:	4699      	mov	r9, r3
 8000944:	d021      	beq.n	800098a <__aeabi_ddiv+0x1a6>
 8000946:	465b      	mov	r3, fp
 8000948:	2b00      	cmp	r3, #0
 800094a:	d100      	bne.n	800094e <__aeabi_ddiv+0x16a>
 800094c:	e169      	b.n	8000c22 <__aeabi_ddiv+0x43e>
 800094e:	4658      	mov	r0, fp
 8000950:	f000 fe26 	bl	80015a0 <__clzsi2>
 8000954:	230b      	movs	r3, #11
 8000956:	425b      	negs	r3, r3
 8000958:	469c      	mov	ip, r3
 800095a:	0002      	movs	r2, r0
 800095c:	4484      	add	ip, r0
 800095e:	4666      	mov	r6, ip
 8000960:	231d      	movs	r3, #29
 8000962:	1b9b      	subs	r3, r3, r6
 8000964:	0026      	movs	r6, r4
 8000966:	0011      	movs	r1, r2
 8000968:	4658      	mov	r0, fp
 800096a:	40de      	lsrs	r6, r3
 800096c:	3908      	subs	r1, #8
 800096e:	4088      	lsls	r0, r1
 8000970:	0033      	movs	r3, r6
 8000972:	4303      	orrs	r3, r0
 8000974:	4699      	mov	r9, r3
 8000976:	0023      	movs	r3, r4
 8000978:	408b      	lsls	r3, r1
 800097a:	4698      	mov	r8, r3
 800097c:	4b25      	ldr	r3, [pc, #148]	@ (8000a14 <__aeabi_ddiv+0x230>)
 800097e:	2400      	movs	r4, #0
 8000980:	1a9b      	subs	r3, r3, r2
 8000982:	469a      	mov	sl, r3
 8000984:	2300      	movs	r3, #0
 8000986:	9303      	str	r3, [sp, #12]
 8000988:	e753      	b.n	8000832 <__aeabi_ddiv+0x4e>
 800098a:	2300      	movs	r3, #0
 800098c:	4698      	mov	r8, r3
 800098e:	469a      	mov	sl, r3
 8000990:	3301      	adds	r3, #1
 8000992:	2404      	movs	r4, #4
 8000994:	9303      	str	r3, [sp, #12]
 8000996:	e74c      	b.n	8000832 <__aeabi_ddiv+0x4e>
 8000998:	2301      	movs	r3, #1
 800099a:	431c      	orrs	r4, r3
 800099c:	2300      	movs	r3, #0
 800099e:	2101      	movs	r1, #1
 80009a0:	469b      	mov	fp, r3
 80009a2:	e764      	b.n	800086e <__aeabi_ddiv+0x8a>
 80009a4:	2303      	movs	r3, #3
 80009a6:	0032      	movs	r2, r6
 80009a8:	2103      	movs	r1, #3
 80009aa:	431c      	orrs	r4, r3
 80009ac:	e75f      	b.n	800086e <__aeabi_ddiv+0x8a>
 80009ae:	469a      	mov	sl, r3
 80009b0:	2303      	movs	r3, #3
 80009b2:	46d9      	mov	r9, fp
 80009b4:	240c      	movs	r4, #12
 80009b6:	9303      	str	r3, [sp, #12]
 80009b8:	e73b      	b.n	8000832 <__aeabi_ddiv+0x4e>
 80009ba:	2300      	movs	r3, #0
 80009bc:	2480      	movs	r4, #128	@ 0x80
 80009be:	4698      	mov	r8, r3
 80009c0:	2600      	movs	r6, #0
 80009c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a00 <__aeabi_ddiv+0x21c>)
 80009c4:	0324      	lsls	r4, r4, #12
 80009c6:	e779      	b.n	80008bc <__aeabi_ddiv+0xd8>
 80009c8:	2480      	movs	r4, #128	@ 0x80
 80009ca:	465b      	mov	r3, fp
 80009cc:	0324      	lsls	r4, r4, #12
 80009ce:	431c      	orrs	r4, r3
 80009d0:	0324      	lsls	r4, r4, #12
 80009d2:	002e      	movs	r6, r5
 80009d4:	4690      	mov	r8, r2
 80009d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a00 <__aeabi_ddiv+0x21c>)
 80009d8:	0b24      	lsrs	r4, r4, #12
 80009da:	e76f      	b.n	80008bc <__aeabi_ddiv+0xd8>
 80009dc:	2480      	movs	r4, #128	@ 0x80
 80009de:	464b      	mov	r3, r9
 80009e0:	0324      	lsls	r4, r4, #12
 80009e2:	4223      	tst	r3, r4
 80009e4:	d002      	beq.n	80009ec <__aeabi_ddiv+0x208>
 80009e6:	465b      	mov	r3, fp
 80009e8:	4223      	tst	r3, r4
 80009ea:	d0f0      	beq.n	80009ce <__aeabi_ddiv+0x1ea>
 80009ec:	2480      	movs	r4, #128	@ 0x80
 80009ee:	464b      	mov	r3, r9
 80009f0:	0324      	lsls	r4, r4, #12
 80009f2:	431c      	orrs	r4, r3
 80009f4:	0324      	lsls	r4, r4, #12
 80009f6:	9e02      	ldr	r6, [sp, #8]
 80009f8:	4b01      	ldr	r3, [pc, #4]	@ (8000a00 <__aeabi_ddiv+0x21c>)
 80009fa:	0b24      	lsrs	r4, r4, #12
 80009fc:	e75e      	b.n	80008bc <__aeabi_ddiv+0xd8>
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	000007ff 	.word	0x000007ff
 8000a04:	fffffc01 	.word	0xfffffc01
 8000a08:	080039e0 	.word	0x080039e0
 8000a0c:	fffff801 	.word	0xfffff801
 8000a10:	000003f3 	.word	0x000003f3
 8000a14:	fffffc0d 	.word	0xfffffc0d
 8000a18:	45cb      	cmp	fp, r9
 8000a1a:	d200      	bcs.n	8000a1e <__aeabi_ddiv+0x23a>
 8000a1c:	e0f8      	b.n	8000c10 <__aeabi_ddiv+0x42c>
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_ddiv+0x23e>
 8000a20:	e0f3      	b.n	8000c0a <__aeabi_ddiv+0x426>
 8000a22:	2301      	movs	r3, #1
 8000a24:	425b      	negs	r3, r3
 8000a26:	469c      	mov	ip, r3
 8000a28:	4644      	mov	r4, r8
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	2500      	movs	r5, #0
 8000a2e:	44e2      	add	sl, ip
 8000a30:	465b      	mov	r3, fp
 8000a32:	0e17      	lsrs	r7, r2, #24
 8000a34:	021b      	lsls	r3, r3, #8
 8000a36:	431f      	orrs	r7, r3
 8000a38:	0c19      	lsrs	r1, r3, #16
 8000a3a:	043b      	lsls	r3, r7, #16
 8000a3c:	0212      	lsls	r2, r2, #8
 8000a3e:	9700      	str	r7, [sp, #0]
 8000a40:	0c1f      	lsrs	r7, r3, #16
 8000a42:	4691      	mov	r9, r2
 8000a44:	9102      	str	r1, [sp, #8]
 8000a46:	9703      	str	r7, [sp, #12]
 8000a48:	f7ff fbe4 	bl	8000214 <__aeabi_uidivmod>
 8000a4c:	0002      	movs	r2, r0
 8000a4e:	437a      	muls	r2, r7
 8000a50:	040b      	lsls	r3, r1, #16
 8000a52:	0c21      	lsrs	r1, r4, #16
 8000a54:	4680      	mov	r8, r0
 8000a56:	4319      	orrs	r1, r3
 8000a58:	428a      	cmp	r2, r1
 8000a5a:	d909      	bls.n	8000a70 <__aeabi_ddiv+0x28c>
 8000a5c:	9f00      	ldr	r7, [sp, #0]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	46bc      	mov	ip, r7
 8000a62:	425b      	negs	r3, r3
 8000a64:	4461      	add	r1, ip
 8000a66:	469c      	mov	ip, r3
 8000a68:	44e0      	add	r8, ip
 8000a6a:	428f      	cmp	r7, r1
 8000a6c:	d800      	bhi.n	8000a70 <__aeabi_ddiv+0x28c>
 8000a6e:	e15c      	b.n	8000d2a <__aeabi_ddiv+0x546>
 8000a70:	1a88      	subs	r0, r1, r2
 8000a72:	9902      	ldr	r1, [sp, #8]
 8000a74:	f7ff fbce 	bl	8000214 <__aeabi_uidivmod>
 8000a78:	9a03      	ldr	r2, [sp, #12]
 8000a7a:	0424      	lsls	r4, r4, #16
 8000a7c:	4342      	muls	r2, r0
 8000a7e:	0409      	lsls	r1, r1, #16
 8000a80:	0c24      	lsrs	r4, r4, #16
 8000a82:	0003      	movs	r3, r0
 8000a84:	430c      	orrs	r4, r1
 8000a86:	42a2      	cmp	r2, r4
 8000a88:	d906      	bls.n	8000a98 <__aeabi_ddiv+0x2b4>
 8000a8a:	9900      	ldr	r1, [sp, #0]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	468c      	mov	ip, r1
 8000a90:	4464      	add	r4, ip
 8000a92:	42a1      	cmp	r1, r4
 8000a94:	d800      	bhi.n	8000a98 <__aeabi_ddiv+0x2b4>
 8000a96:	e142      	b.n	8000d1e <__aeabi_ddiv+0x53a>
 8000a98:	1aa0      	subs	r0, r4, r2
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	0412      	lsls	r2, r2, #16
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	4693      	mov	fp, r2
 8000aa2:	464b      	mov	r3, r9
 8000aa4:	4659      	mov	r1, fp
 8000aa6:	0c1b      	lsrs	r3, r3, #16
 8000aa8:	001f      	movs	r7, r3
 8000aaa:	9304      	str	r3, [sp, #16]
 8000aac:	040b      	lsls	r3, r1, #16
 8000aae:	4649      	mov	r1, r9
 8000ab0:	0409      	lsls	r1, r1, #16
 8000ab2:	0c09      	lsrs	r1, r1, #16
 8000ab4:	000c      	movs	r4, r1
 8000ab6:	0c1b      	lsrs	r3, r3, #16
 8000ab8:	435c      	muls	r4, r3
 8000aba:	0c12      	lsrs	r2, r2, #16
 8000abc:	437b      	muls	r3, r7
 8000abe:	4688      	mov	r8, r1
 8000ac0:	4351      	muls	r1, r2
 8000ac2:	437a      	muls	r2, r7
 8000ac4:	0c27      	lsrs	r7, r4, #16
 8000ac6:	46bc      	mov	ip, r7
 8000ac8:	185b      	adds	r3, r3, r1
 8000aca:	4463      	add	r3, ip
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d903      	bls.n	8000ad8 <__aeabi_ddiv+0x2f4>
 8000ad0:	2180      	movs	r1, #128	@ 0x80
 8000ad2:	0249      	lsls	r1, r1, #9
 8000ad4:	468c      	mov	ip, r1
 8000ad6:	4462      	add	r2, ip
 8000ad8:	0c19      	lsrs	r1, r3, #16
 8000ada:	0424      	lsls	r4, r4, #16
 8000adc:	041b      	lsls	r3, r3, #16
 8000ade:	0c24      	lsrs	r4, r4, #16
 8000ae0:	188a      	adds	r2, r1, r2
 8000ae2:	191c      	adds	r4, r3, r4
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	d302      	bcc.n	8000aee <__aeabi_ddiv+0x30a>
 8000ae8:	d116      	bne.n	8000b18 <__aeabi_ddiv+0x334>
 8000aea:	42a5      	cmp	r5, r4
 8000aec:	d214      	bcs.n	8000b18 <__aeabi_ddiv+0x334>
 8000aee:	465b      	mov	r3, fp
 8000af0:	9f00      	ldr	r7, [sp, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	444d      	add	r5, r9
 8000af6:	9305      	str	r3, [sp, #20]
 8000af8:	454d      	cmp	r5, r9
 8000afa:	419b      	sbcs	r3, r3
 8000afc:	46bc      	mov	ip, r7
 8000afe:	425b      	negs	r3, r3
 8000b00:	4463      	add	r3, ip
 8000b02:	18c0      	adds	r0, r0, r3
 8000b04:	4287      	cmp	r7, r0
 8000b06:	d300      	bcc.n	8000b0a <__aeabi_ddiv+0x326>
 8000b08:	e102      	b.n	8000d10 <__aeabi_ddiv+0x52c>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	d900      	bls.n	8000b10 <__aeabi_ddiv+0x32c>
 8000b0e:	e129      	b.n	8000d64 <__aeabi_ddiv+0x580>
 8000b10:	d100      	bne.n	8000b14 <__aeabi_ddiv+0x330>
 8000b12:	e124      	b.n	8000d5e <__aeabi_ddiv+0x57a>
 8000b14:	9b05      	ldr	r3, [sp, #20]
 8000b16:	469b      	mov	fp, r3
 8000b18:	1b2c      	subs	r4, r5, r4
 8000b1a:	42a5      	cmp	r5, r4
 8000b1c:	41ad      	sbcs	r5, r5
 8000b1e:	9b00      	ldr	r3, [sp, #0]
 8000b20:	1a80      	subs	r0, r0, r2
 8000b22:	426d      	negs	r5, r5
 8000b24:	1b40      	subs	r0, r0, r5
 8000b26:	4283      	cmp	r3, r0
 8000b28:	d100      	bne.n	8000b2c <__aeabi_ddiv+0x348>
 8000b2a:	e10f      	b.n	8000d4c <__aeabi_ddiv+0x568>
 8000b2c:	9902      	ldr	r1, [sp, #8]
 8000b2e:	f7ff fb71 	bl	8000214 <__aeabi_uidivmod>
 8000b32:	9a03      	ldr	r2, [sp, #12]
 8000b34:	040b      	lsls	r3, r1, #16
 8000b36:	4342      	muls	r2, r0
 8000b38:	0c21      	lsrs	r1, r4, #16
 8000b3a:	0005      	movs	r5, r0
 8000b3c:	4319      	orrs	r1, r3
 8000b3e:	428a      	cmp	r2, r1
 8000b40:	d900      	bls.n	8000b44 <__aeabi_ddiv+0x360>
 8000b42:	e0cb      	b.n	8000cdc <__aeabi_ddiv+0x4f8>
 8000b44:	1a88      	subs	r0, r1, r2
 8000b46:	9902      	ldr	r1, [sp, #8]
 8000b48:	f7ff fb64 	bl	8000214 <__aeabi_uidivmod>
 8000b4c:	9a03      	ldr	r2, [sp, #12]
 8000b4e:	0424      	lsls	r4, r4, #16
 8000b50:	4342      	muls	r2, r0
 8000b52:	0409      	lsls	r1, r1, #16
 8000b54:	0c24      	lsrs	r4, r4, #16
 8000b56:	0003      	movs	r3, r0
 8000b58:	430c      	orrs	r4, r1
 8000b5a:	42a2      	cmp	r2, r4
 8000b5c:	d900      	bls.n	8000b60 <__aeabi_ddiv+0x37c>
 8000b5e:	e0ca      	b.n	8000cf6 <__aeabi_ddiv+0x512>
 8000b60:	4641      	mov	r1, r8
 8000b62:	1aa4      	subs	r4, r4, r2
 8000b64:	042a      	lsls	r2, r5, #16
 8000b66:	431a      	orrs	r2, r3
 8000b68:	9f04      	ldr	r7, [sp, #16]
 8000b6a:	0413      	lsls	r3, r2, #16
 8000b6c:	0c1b      	lsrs	r3, r3, #16
 8000b6e:	4359      	muls	r1, r3
 8000b70:	4640      	mov	r0, r8
 8000b72:	437b      	muls	r3, r7
 8000b74:	469c      	mov	ip, r3
 8000b76:	0c15      	lsrs	r5, r2, #16
 8000b78:	4368      	muls	r0, r5
 8000b7a:	0c0b      	lsrs	r3, r1, #16
 8000b7c:	4484      	add	ip, r0
 8000b7e:	4463      	add	r3, ip
 8000b80:	437d      	muls	r5, r7
 8000b82:	4298      	cmp	r0, r3
 8000b84:	d903      	bls.n	8000b8e <__aeabi_ddiv+0x3aa>
 8000b86:	2080      	movs	r0, #128	@ 0x80
 8000b88:	0240      	lsls	r0, r0, #9
 8000b8a:	4684      	mov	ip, r0
 8000b8c:	4465      	add	r5, ip
 8000b8e:	0c18      	lsrs	r0, r3, #16
 8000b90:	0409      	lsls	r1, r1, #16
 8000b92:	041b      	lsls	r3, r3, #16
 8000b94:	0c09      	lsrs	r1, r1, #16
 8000b96:	1940      	adds	r0, r0, r5
 8000b98:	185b      	adds	r3, r3, r1
 8000b9a:	4284      	cmp	r4, r0
 8000b9c:	d327      	bcc.n	8000bee <__aeabi_ddiv+0x40a>
 8000b9e:	d023      	beq.n	8000be8 <__aeabi_ddiv+0x404>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	0035      	movs	r5, r6
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	4b94      	ldr	r3, [pc, #592]	@ (8000df8 <__aeabi_ddiv+0x614>)
 8000ba8:	4453      	add	r3, sl
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	dd60      	ble.n	8000c70 <__aeabi_ddiv+0x48c>
 8000bae:	0751      	lsls	r1, r2, #29
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_ddiv+0x3d0>
 8000bb2:	e086      	b.n	8000cc2 <__aeabi_ddiv+0x4de>
 8000bb4:	002e      	movs	r6, r5
 8000bb6:	08d1      	lsrs	r1, r2, #3
 8000bb8:	465a      	mov	r2, fp
 8000bba:	01d2      	lsls	r2, r2, #7
 8000bbc:	d506      	bpl.n	8000bcc <__aeabi_ddiv+0x3e8>
 8000bbe:	465a      	mov	r2, fp
 8000bc0:	4b8e      	ldr	r3, [pc, #568]	@ (8000dfc <__aeabi_ddiv+0x618>)
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	2380      	movs	r3, #128	@ 0x80
 8000bc6:	4693      	mov	fp, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	4453      	add	r3, sl
 8000bcc:	4a8c      	ldr	r2, [pc, #560]	@ (8000e00 <__aeabi_ddiv+0x61c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	dd00      	ble.n	8000bd4 <__aeabi_ddiv+0x3f0>
 8000bd2:	e680      	b.n	80008d6 <__aeabi_ddiv+0xf2>
 8000bd4:	465a      	mov	r2, fp
 8000bd6:	0752      	lsls	r2, r2, #29
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	4690      	mov	r8, r2
 8000bdc:	465a      	mov	r2, fp
 8000bde:	055b      	lsls	r3, r3, #21
 8000be0:	0254      	lsls	r4, r2, #9
 8000be2:	0b24      	lsrs	r4, r4, #12
 8000be4:	0d5b      	lsrs	r3, r3, #21
 8000be6:	e669      	b.n	80008bc <__aeabi_ddiv+0xd8>
 8000be8:	0035      	movs	r5, r6
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0db      	beq.n	8000ba6 <__aeabi_ddiv+0x3c2>
 8000bee:	9d00      	ldr	r5, [sp, #0]
 8000bf0:	1e51      	subs	r1, r2, #1
 8000bf2:	46ac      	mov	ip, r5
 8000bf4:	4464      	add	r4, ip
 8000bf6:	42ac      	cmp	r4, r5
 8000bf8:	d200      	bcs.n	8000bfc <__aeabi_ddiv+0x418>
 8000bfa:	e09e      	b.n	8000d3a <__aeabi_ddiv+0x556>
 8000bfc:	4284      	cmp	r4, r0
 8000bfe:	d200      	bcs.n	8000c02 <__aeabi_ddiv+0x41e>
 8000c00:	e0e1      	b.n	8000dc6 <__aeabi_ddiv+0x5e2>
 8000c02:	d100      	bne.n	8000c06 <__aeabi_ddiv+0x422>
 8000c04:	e0ee      	b.n	8000de4 <__aeabi_ddiv+0x600>
 8000c06:	000a      	movs	r2, r1
 8000c08:	e7ca      	b.n	8000ba0 <__aeabi_ddiv+0x3bc>
 8000c0a:	4542      	cmp	r2, r8
 8000c0c:	d900      	bls.n	8000c10 <__aeabi_ddiv+0x42c>
 8000c0e:	e708      	b.n	8000a22 <__aeabi_ddiv+0x23e>
 8000c10:	464b      	mov	r3, r9
 8000c12:	07dc      	lsls	r4, r3, #31
 8000c14:	0858      	lsrs	r0, r3, #1
 8000c16:	4643      	mov	r3, r8
 8000c18:	085b      	lsrs	r3, r3, #1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	4643      	mov	r3, r8
 8000c1e:	07dd      	lsls	r5, r3, #31
 8000c20:	e706      	b.n	8000a30 <__aeabi_ddiv+0x24c>
 8000c22:	f000 fcbd 	bl	80015a0 <__clzsi2>
 8000c26:	2315      	movs	r3, #21
 8000c28:	469c      	mov	ip, r3
 8000c2a:	4484      	add	ip, r0
 8000c2c:	0002      	movs	r2, r0
 8000c2e:	4663      	mov	r3, ip
 8000c30:	3220      	adds	r2, #32
 8000c32:	2b1c      	cmp	r3, #28
 8000c34:	dc00      	bgt.n	8000c38 <__aeabi_ddiv+0x454>
 8000c36:	e692      	b.n	800095e <__aeabi_ddiv+0x17a>
 8000c38:	0023      	movs	r3, r4
 8000c3a:	3808      	subs	r0, #8
 8000c3c:	4083      	lsls	r3, r0
 8000c3e:	4699      	mov	r9, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	4698      	mov	r8, r3
 8000c44:	e69a      	b.n	800097c <__aeabi_ddiv+0x198>
 8000c46:	f000 fcab 	bl	80015a0 <__clzsi2>
 8000c4a:	0002      	movs	r2, r0
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	3215      	adds	r2, #21
 8000c50:	3320      	adds	r3, #32
 8000c52:	2a1c      	cmp	r2, #28
 8000c54:	dc00      	bgt.n	8000c58 <__aeabi_ddiv+0x474>
 8000c56:	e65f      	b.n	8000918 <__aeabi_ddiv+0x134>
 8000c58:	9900      	ldr	r1, [sp, #0]
 8000c5a:	3808      	subs	r0, #8
 8000c5c:	4081      	lsls	r1, r0
 8000c5e:	2200      	movs	r2, #0
 8000c60:	468b      	mov	fp, r1
 8000c62:	e666      	b.n	8000932 <__aeabi_ddiv+0x14e>
 8000c64:	2200      	movs	r2, #0
 8000c66:	002e      	movs	r6, r5
 8000c68:	2400      	movs	r4, #0
 8000c6a:	4690      	mov	r8, r2
 8000c6c:	4b65      	ldr	r3, [pc, #404]	@ (8000e04 <__aeabi_ddiv+0x620>)
 8000c6e:	e625      	b.n	80008bc <__aeabi_ddiv+0xd8>
 8000c70:	002e      	movs	r6, r5
 8000c72:	2101      	movs	r1, #1
 8000c74:	1ac9      	subs	r1, r1, r3
 8000c76:	2938      	cmp	r1, #56	@ 0x38
 8000c78:	dd00      	ble.n	8000c7c <__aeabi_ddiv+0x498>
 8000c7a:	e61b      	b.n	80008b4 <__aeabi_ddiv+0xd0>
 8000c7c:	291f      	cmp	r1, #31
 8000c7e:	dc7e      	bgt.n	8000d7e <__aeabi_ddiv+0x59a>
 8000c80:	4861      	ldr	r0, [pc, #388]	@ (8000e08 <__aeabi_ddiv+0x624>)
 8000c82:	0014      	movs	r4, r2
 8000c84:	4450      	add	r0, sl
 8000c86:	465b      	mov	r3, fp
 8000c88:	4082      	lsls	r2, r0
 8000c8a:	4083      	lsls	r3, r0
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	1e50      	subs	r0, r2, #1
 8000c90:	4182      	sbcs	r2, r0
 8000c92:	4323      	orrs	r3, r4
 8000c94:	431a      	orrs	r2, r3
 8000c96:	465b      	mov	r3, fp
 8000c98:	40cb      	lsrs	r3, r1
 8000c9a:	0751      	lsls	r1, r2, #29
 8000c9c:	d009      	beq.n	8000cb2 <__aeabi_ddiv+0x4ce>
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	4011      	ands	r1, r2
 8000ca2:	2904      	cmp	r1, #4
 8000ca4:	d005      	beq.n	8000cb2 <__aeabi_ddiv+0x4ce>
 8000ca6:	1d11      	adds	r1, r2, #4
 8000ca8:	4291      	cmp	r1, r2
 8000caa:	4192      	sbcs	r2, r2
 8000cac:	4252      	negs	r2, r2
 8000cae:	189b      	adds	r3, r3, r2
 8000cb0:	000a      	movs	r2, r1
 8000cb2:	0219      	lsls	r1, r3, #8
 8000cb4:	d400      	bmi.n	8000cb8 <__aeabi_ddiv+0x4d4>
 8000cb6:	e09b      	b.n	8000df0 <__aeabi_ddiv+0x60c>
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2301      	movs	r3, #1
 8000cbc:	2400      	movs	r4, #0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	e5fc      	b.n	80008bc <__aeabi_ddiv+0xd8>
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	4011      	ands	r1, r2
 8000cc6:	2904      	cmp	r1, #4
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_ddiv+0x4e8>
 8000cca:	e773      	b.n	8000bb4 <__aeabi_ddiv+0x3d0>
 8000ccc:	1d11      	adds	r1, r2, #4
 8000cce:	4291      	cmp	r1, r2
 8000cd0:	4192      	sbcs	r2, r2
 8000cd2:	4252      	negs	r2, r2
 8000cd4:	002e      	movs	r6, r5
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	4493      	add	fp, r2
 8000cda:	e76d      	b.n	8000bb8 <__aeabi_ddiv+0x3d4>
 8000cdc:	9b00      	ldr	r3, [sp, #0]
 8000cde:	3d01      	subs	r5, #1
 8000ce0:	469c      	mov	ip, r3
 8000ce2:	4461      	add	r1, ip
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d900      	bls.n	8000cea <__aeabi_ddiv+0x506>
 8000ce8:	e72c      	b.n	8000b44 <__aeabi_ddiv+0x360>
 8000cea:	428a      	cmp	r2, r1
 8000cec:	d800      	bhi.n	8000cf0 <__aeabi_ddiv+0x50c>
 8000cee:	e729      	b.n	8000b44 <__aeabi_ddiv+0x360>
 8000cf0:	1e85      	subs	r5, r0, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	e726      	b.n	8000b44 <__aeabi_ddiv+0x360>
 8000cf6:	9900      	ldr	r1, [sp, #0]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	468c      	mov	ip, r1
 8000cfc:	4464      	add	r4, ip
 8000cfe:	42a1      	cmp	r1, r4
 8000d00:	d900      	bls.n	8000d04 <__aeabi_ddiv+0x520>
 8000d02:	e72d      	b.n	8000b60 <__aeabi_ddiv+0x37c>
 8000d04:	42a2      	cmp	r2, r4
 8000d06:	d800      	bhi.n	8000d0a <__aeabi_ddiv+0x526>
 8000d08:	e72a      	b.n	8000b60 <__aeabi_ddiv+0x37c>
 8000d0a:	1e83      	subs	r3, r0, #2
 8000d0c:	4464      	add	r4, ip
 8000d0e:	e727      	b.n	8000b60 <__aeabi_ddiv+0x37c>
 8000d10:	4287      	cmp	r7, r0
 8000d12:	d000      	beq.n	8000d16 <__aeabi_ddiv+0x532>
 8000d14:	e6fe      	b.n	8000b14 <__aeabi_ddiv+0x330>
 8000d16:	45a9      	cmp	r9, r5
 8000d18:	d900      	bls.n	8000d1c <__aeabi_ddiv+0x538>
 8000d1a:	e6fb      	b.n	8000b14 <__aeabi_ddiv+0x330>
 8000d1c:	e6f5      	b.n	8000b0a <__aeabi_ddiv+0x326>
 8000d1e:	42a2      	cmp	r2, r4
 8000d20:	d800      	bhi.n	8000d24 <__aeabi_ddiv+0x540>
 8000d22:	e6b9      	b.n	8000a98 <__aeabi_ddiv+0x2b4>
 8000d24:	1e83      	subs	r3, r0, #2
 8000d26:	4464      	add	r4, ip
 8000d28:	e6b6      	b.n	8000a98 <__aeabi_ddiv+0x2b4>
 8000d2a:	428a      	cmp	r2, r1
 8000d2c:	d800      	bhi.n	8000d30 <__aeabi_ddiv+0x54c>
 8000d2e:	e69f      	b.n	8000a70 <__aeabi_ddiv+0x28c>
 8000d30:	46bc      	mov	ip, r7
 8000d32:	1e83      	subs	r3, r0, #2
 8000d34:	4698      	mov	r8, r3
 8000d36:	4461      	add	r1, ip
 8000d38:	e69a      	b.n	8000a70 <__aeabi_ddiv+0x28c>
 8000d3a:	000a      	movs	r2, r1
 8000d3c:	4284      	cmp	r4, r0
 8000d3e:	d000      	beq.n	8000d42 <__aeabi_ddiv+0x55e>
 8000d40:	e72e      	b.n	8000ba0 <__aeabi_ddiv+0x3bc>
 8000d42:	454b      	cmp	r3, r9
 8000d44:	d000      	beq.n	8000d48 <__aeabi_ddiv+0x564>
 8000d46:	e72b      	b.n	8000ba0 <__aeabi_ddiv+0x3bc>
 8000d48:	0035      	movs	r5, r6
 8000d4a:	e72c      	b.n	8000ba6 <__aeabi_ddiv+0x3c2>
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000df8 <__aeabi_ddiv+0x614>)
 8000d4e:	4a2f      	ldr	r2, [pc, #188]	@ (8000e0c <__aeabi_ddiv+0x628>)
 8000d50:	4453      	add	r3, sl
 8000d52:	4592      	cmp	sl, r2
 8000d54:	db43      	blt.n	8000dde <__aeabi_ddiv+0x5fa>
 8000d56:	2201      	movs	r2, #1
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4493      	add	fp, r2
 8000d5c:	e72c      	b.n	8000bb8 <__aeabi_ddiv+0x3d4>
 8000d5e:	42ac      	cmp	r4, r5
 8000d60:	d800      	bhi.n	8000d64 <__aeabi_ddiv+0x580>
 8000d62:	e6d7      	b.n	8000b14 <__aeabi_ddiv+0x330>
 8000d64:	2302      	movs	r3, #2
 8000d66:	425b      	negs	r3, r3
 8000d68:	469c      	mov	ip, r3
 8000d6a:	9900      	ldr	r1, [sp, #0]
 8000d6c:	444d      	add	r5, r9
 8000d6e:	454d      	cmp	r5, r9
 8000d70:	419b      	sbcs	r3, r3
 8000d72:	44e3      	add	fp, ip
 8000d74:	468c      	mov	ip, r1
 8000d76:	425b      	negs	r3, r3
 8000d78:	4463      	add	r3, ip
 8000d7a:	18c0      	adds	r0, r0, r3
 8000d7c:	e6cc      	b.n	8000b18 <__aeabi_ddiv+0x334>
 8000d7e:	201f      	movs	r0, #31
 8000d80:	4240      	negs	r0, r0
 8000d82:	1ac3      	subs	r3, r0, r3
 8000d84:	4658      	mov	r0, fp
 8000d86:	40d8      	lsrs	r0, r3
 8000d88:	2920      	cmp	r1, #32
 8000d8a:	d004      	beq.n	8000d96 <__aeabi_ddiv+0x5b2>
 8000d8c:	4659      	mov	r1, fp
 8000d8e:	4b20      	ldr	r3, [pc, #128]	@ (8000e10 <__aeabi_ddiv+0x62c>)
 8000d90:	4453      	add	r3, sl
 8000d92:	4099      	lsls	r1, r3
 8000d94:	430a      	orrs	r2, r1
 8000d96:	1e53      	subs	r3, r2, #1
 8000d98:	419a      	sbcs	r2, r3
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	0019      	movs	r1, r3
 8000d9e:	4302      	orrs	r2, r0
 8000da0:	2400      	movs	r4, #0
 8000da2:	4011      	ands	r1, r2
 8000da4:	4213      	tst	r3, r2
 8000da6:	d009      	beq.n	8000dbc <__aeabi_ddiv+0x5d8>
 8000da8:	3308      	adds	r3, #8
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	d01d      	beq.n	8000dec <__aeabi_ddiv+0x608>
 8000db0:	1d13      	adds	r3, r2, #4
 8000db2:	4293      	cmp	r3, r2
 8000db4:	4189      	sbcs	r1, r1
 8000db6:	001a      	movs	r2, r3
 8000db8:	4249      	negs	r1, r1
 8000dba:	0749      	lsls	r1, r1, #29
 8000dbc:	08d2      	lsrs	r2, r2, #3
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	4690      	mov	r8, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e57a      	b.n	80008bc <__aeabi_ddiv+0xd8>
 8000dc6:	4649      	mov	r1, r9
 8000dc8:	9f00      	ldr	r7, [sp, #0]
 8000dca:	004d      	lsls	r5, r1, #1
 8000dcc:	454d      	cmp	r5, r9
 8000dce:	4189      	sbcs	r1, r1
 8000dd0:	46bc      	mov	ip, r7
 8000dd2:	4249      	negs	r1, r1
 8000dd4:	4461      	add	r1, ip
 8000dd6:	46a9      	mov	r9, r5
 8000dd8:	3a02      	subs	r2, #2
 8000dda:	1864      	adds	r4, r4, r1
 8000ddc:	e7ae      	b.n	8000d3c <__aeabi_ddiv+0x558>
 8000dde:	2201      	movs	r2, #1
 8000de0:	4252      	negs	r2, r2
 8000de2:	e746      	b.n	8000c72 <__aeabi_ddiv+0x48e>
 8000de4:	4599      	cmp	r9, r3
 8000de6:	d3ee      	bcc.n	8000dc6 <__aeabi_ddiv+0x5e2>
 8000de8:	000a      	movs	r2, r1
 8000dea:	e7aa      	b.n	8000d42 <__aeabi_ddiv+0x55e>
 8000dec:	2100      	movs	r1, #0
 8000dee:	e7e5      	b.n	8000dbc <__aeabi_ddiv+0x5d8>
 8000df0:	0759      	lsls	r1, r3, #29
 8000df2:	025b      	lsls	r3, r3, #9
 8000df4:	0b1c      	lsrs	r4, r3, #12
 8000df6:	e7e1      	b.n	8000dbc <__aeabi_ddiv+0x5d8>
 8000df8:	000003ff 	.word	0x000003ff
 8000dfc:	feffffff 	.word	0xfeffffff
 8000e00:	000007fe 	.word	0x000007fe
 8000e04:	000007ff 	.word	0x000007ff
 8000e08:	0000041e 	.word	0x0000041e
 8000e0c:	fffffc02 	.word	0xfffffc02
 8000e10:	0000043e 	.word	0x0000043e

08000e14 <__aeabi_dmul>:
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	4657      	mov	r7, sl
 8000e18:	464e      	mov	r6, r9
 8000e1a:	46de      	mov	lr, fp
 8000e1c:	4645      	mov	r5, r8
 8000e1e:	b5e0      	push	{r5, r6, r7, lr}
 8000e20:	001f      	movs	r7, r3
 8000e22:	030b      	lsls	r3, r1, #12
 8000e24:	0b1b      	lsrs	r3, r3, #12
 8000e26:	0016      	movs	r6, r2
 8000e28:	469a      	mov	sl, r3
 8000e2a:	0fca      	lsrs	r2, r1, #31
 8000e2c:	004b      	lsls	r3, r1, #1
 8000e2e:	0004      	movs	r4, r0
 8000e30:	4691      	mov	r9, r2
 8000e32:	b085      	sub	sp, #20
 8000e34:	0d5b      	lsrs	r3, r3, #21
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dmul+0x26>
 8000e38:	e1cf      	b.n	80011da <__aeabi_dmul+0x3c6>
 8000e3a:	4acd      	ldr	r2, [pc, #820]	@ (8001170 <__aeabi_dmul+0x35c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d055      	beq.n	8000eec <__aeabi_dmul+0xd8>
 8000e40:	4651      	mov	r1, sl
 8000e42:	0f42      	lsrs	r2, r0, #29
 8000e44:	00c9      	lsls	r1, r1, #3
 8000e46:	430a      	orrs	r2, r1
 8000e48:	2180      	movs	r1, #128	@ 0x80
 8000e4a:	0409      	lsls	r1, r1, #16
 8000e4c:	4311      	orrs	r1, r2
 8000e4e:	00c2      	lsls	r2, r0, #3
 8000e50:	4690      	mov	r8, r2
 8000e52:	4ac8      	ldr	r2, [pc, #800]	@ (8001174 <__aeabi_dmul+0x360>)
 8000e54:	468a      	mov	sl, r1
 8000e56:	4693      	mov	fp, r2
 8000e58:	449b      	add	fp, r3
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	033c      	lsls	r4, r7, #12
 8000e62:	007b      	lsls	r3, r7, #1
 8000e64:	0ffa      	lsrs	r2, r7, #31
 8000e66:	9601      	str	r6, [sp, #4]
 8000e68:	0b24      	lsrs	r4, r4, #12
 8000e6a:	0d5b      	lsrs	r3, r3, #21
 8000e6c:	9200      	str	r2, [sp, #0]
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_dmul+0x5e>
 8000e70:	e188      	b.n	8001184 <__aeabi_dmul+0x370>
 8000e72:	4abf      	ldr	r2, [pc, #764]	@ (8001170 <__aeabi_dmul+0x35c>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d100      	bne.n	8000e7a <__aeabi_dmul+0x66>
 8000e78:	e092      	b.n	8000fa0 <__aeabi_dmul+0x18c>
 8000e7a:	4abe      	ldr	r2, [pc, #760]	@ (8001174 <__aeabi_dmul+0x360>)
 8000e7c:	4694      	mov	ip, r2
 8000e7e:	4463      	add	r3, ip
 8000e80:	449b      	add	fp, r3
 8000e82:	2d0a      	cmp	r5, #10
 8000e84:	dc42      	bgt.n	8000f0c <__aeabi_dmul+0xf8>
 8000e86:	00e4      	lsls	r4, r4, #3
 8000e88:	0f73      	lsrs	r3, r6, #29
 8000e8a:	4323      	orrs	r3, r4
 8000e8c:	2480      	movs	r4, #128	@ 0x80
 8000e8e:	4649      	mov	r1, r9
 8000e90:	0424      	lsls	r4, r4, #16
 8000e92:	431c      	orrs	r4, r3
 8000e94:	00f3      	lsls	r3, r6, #3
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	9b00      	ldr	r3, [sp, #0]
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	4059      	eors	r1, r3
 8000e9e:	b2cb      	uxtb	r3, r1
 8000ea0:	9303      	str	r3, [sp, #12]
 8000ea2:	2d02      	cmp	r5, #2
 8000ea4:	dc00      	bgt.n	8000ea8 <__aeabi_dmul+0x94>
 8000ea6:	e094      	b.n	8000fd2 <__aeabi_dmul+0x1be>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	40ab      	lsls	r3, r5
 8000eac:	001d      	movs	r5, r3
 8000eae:	23a6      	movs	r3, #166	@ 0xa6
 8000eb0:	002a      	movs	r2, r5
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	401a      	ands	r2, r3
 8000eb6:	421d      	tst	r5, r3
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_dmul+0xa8>
 8000eba:	e229      	b.n	8001310 <__aeabi_dmul+0x4fc>
 8000ebc:	2390      	movs	r3, #144	@ 0x90
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	421d      	tst	r5, r3
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_dmul+0xb2>
 8000ec4:	e24d      	b.n	8001362 <__aeabi_dmul+0x54e>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2480      	movs	r4, #128	@ 0x80
 8000eca:	4699      	mov	r9, r3
 8000ecc:	0324      	lsls	r4, r4, #12
 8000ece:	4ba8      	ldr	r3, [pc, #672]	@ (8001170 <__aeabi_dmul+0x35c>)
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	464a      	mov	r2, r9
 8000ed4:	051b      	lsls	r3, r3, #20
 8000ed6:	4323      	orrs	r3, r4
 8000ed8:	07d2      	lsls	r2, r2, #31
 8000eda:	4313      	orrs	r3, r2
 8000edc:	0019      	movs	r1, r3
 8000ede:	b005      	add	sp, #20
 8000ee0:	bcf0      	pop	{r4, r5, r6, r7}
 8000ee2:	46bb      	mov	fp, r7
 8000ee4:	46b2      	mov	sl, r6
 8000ee6:	46a9      	mov	r9, r5
 8000ee8:	46a0      	mov	r8, r4
 8000eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eec:	4652      	mov	r2, sl
 8000eee:	4302      	orrs	r2, r0
 8000ef0:	4690      	mov	r8, r2
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_dmul+0xe2>
 8000ef4:	e1ac      	b.n	8001250 <__aeabi_dmul+0x43c>
 8000ef6:	469b      	mov	fp, r3
 8000ef8:	2302      	movs	r3, #2
 8000efa:	4692      	mov	sl, r2
 8000efc:	2508      	movs	r5, #8
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	e7ae      	b.n	8000e60 <__aeabi_dmul+0x4c>
 8000f02:	9b00      	ldr	r3, [sp, #0]
 8000f04:	46a2      	mov	sl, r4
 8000f06:	4699      	mov	r9, r3
 8000f08:	9b01      	ldr	r3, [sp, #4]
 8000f0a:	4698      	mov	r8, r3
 8000f0c:	9b02      	ldr	r3, [sp, #8]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d100      	bne.n	8000f14 <__aeabi_dmul+0x100>
 8000f12:	e1ca      	b.n	80012aa <__aeabi_dmul+0x496>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_dmul+0x106>
 8000f18:	e192      	b.n	8001240 <__aeabi_dmul+0x42c>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d110      	bne.n	8000f40 <__aeabi_dmul+0x12c>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2400      	movs	r4, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	e7d4      	b.n	8000ed0 <__aeabi_dmul+0xbc>
 8000f26:	2201      	movs	r2, #1
 8000f28:	087b      	lsrs	r3, r7, #1
 8000f2a:	403a      	ands	r2, r7
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	4652      	mov	r2, sl
 8000f30:	07d2      	lsls	r2, r2, #31
 8000f32:	4313      	orrs	r3, r2
 8000f34:	4698      	mov	r8, r3
 8000f36:	4653      	mov	r3, sl
 8000f38:	085b      	lsrs	r3, r3, #1
 8000f3a:	469a      	mov	sl, r3
 8000f3c:	9b03      	ldr	r3, [sp, #12]
 8000f3e:	4699      	mov	r9, r3
 8000f40:	465b      	mov	r3, fp
 8000f42:	1c58      	adds	r0, r3, #1
 8000f44:	2380      	movs	r3, #128	@ 0x80
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	445b      	add	r3, fp
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	dc00      	bgt.n	8000f50 <__aeabi_dmul+0x13c>
 8000f4e:	e1b1      	b.n	80012b4 <__aeabi_dmul+0x4a0>
 8000f50:	4642      	mov	r2, r8
 8000f52:	0752      	lsls	r2, r2, #29
 8000f54:	d00b      	beq.n	8000f6e <__aeabi_dmul+0x15a>
 8000f56:	220f      	movs	r2, #15
 8000f58:	4641      	mov	r1, r8
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	2a04      	cmp	r2, #4
 8000f5e:	d006      	beq.n	8000f6e <__aeabi_dmul+0x15a>
 8000f60:	4642      	mov	r2, r8
 8000f62:	1d11      	adds	r1, r2, #4
 8000f64:	4541      	cmp	r1, r8
 8000f66:	4192      	sbcs	r2, r2
 8000f68:	4688      	mov	r8, r1
 8000f6a:	4252      	negs	r2, r2
 8000f6c:	4492      	add	sl, r2
 8000f6e:	4652      	mov	r2, sl
 8000f70:	01d2      	lsls	r2, r2, #7
 8000f72:	d506      	bpl.n	8000f82 <__aeabi_dmul+0x16e>
 8000f74:	4652      	mov	r2, sl
 8000f76:	4b80      	ldr	r3, [pc, #512]	@ (8001178 <__aeabi_dmul+0x364>)
 8000f78:	401a      	ands	r2, r3
 8000f7a:	2380      	movs	r3, #128	@ 0x80
 8000f7c:	4692      	mov	sl, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	18c3      	adds	r3, r0, r3
 8000f82:	4a7e      	ldr	r2, [pc, #504]	@ (800117c <__aeabi_dmul+0x368>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	dd00      	ble.n	8000f8a <__aeabi_dmul+0x176>
 8000f88:	e18f      	b.n	80012aa <__aeabi_dmul+0x496>
 8000f8a:	4642      	mov	r2, r8
 8000f8c:	08d1      	lsrs	r1, r2, #3
 8000f8e:	4652      	mov	r2, sl
 8000f90:	0752      	lsls	r2, r2, #29
 8000f92:	430a      	orrs	r2, r1
 8000f94:	4651      	mov	r1, sl
 8000f96:	055b      	lsls	r3, r3, #21
 8000f98:	024c      	lsls	r4, r1, #9
 8000f9a:	0b24      	lsrs	r4, r4, #12
 8000f9c:	0d5b      	lsrs	r3, r3, #21
 8000f9e:	e797      	b.n	8000ed0 <__aeabi_dmul+0xbc>
 8000fa0:	4b73      	ldr	r3, [pc, #460]	@ (8001170 <__aeabi_dmul+0x35c>)
 8000fa2:	4326      	orrs	r6, r4
 8000fa4:	469c      	mov	ip, r3
 8000fa6:	44e3      	add	fp, ip
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_dmul+0x19a>
 8000fac:	e16f      	b.n	800128e <__aeabi_dmul+0x47a>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	4649      	mov	r1, r9
 8000fb2:	431d      	orrs	r5, r3
 8000fb4:	9b00      	ldr	r3, [sp, #0]
 8000fb6:	4059      	eors	r1, r3
 8000fb8:	b2cb      	uxtb	r3, r1
 8000fba:	9303      	str	r3, [sp, #12]
 8000fbc:	2d0a      	cmp	r5, #10
 8000fbe:	dd00      	ble.n	8000fc2 <__aeabi_dmul+0x1ae>
 8000fc0:	e133      	b.n	800122a <__aeabi_dmul+0x416>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	40ab      	lsls	r3, r5
 8000fc6:	001d      	movs	r5, r3
 8000fc8:	2303      	movs	r3, #3
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2288      	movs	r2, #136	@ 0x88
 8000fce:	422a      	tst	r2, r5
 8000fd0:	d197      	bne.n	8000f02 <__aeabi_dmul+0xee>
 8000fd2:	4642      	mov	r2, r8
 8000fd4:	4643      	mov	r3, r8
 8000fd6:	0412      	lsls	r2, r2, #16
 8000fd8:	0c12      	lsrs	r2, r2, #16
 8000fda:	0016      	movs	r6, r2
 8000fdc:	9801      	ldr	r0, [sp, #4]
 8000fde:	0c1d      	lsrs	r5, r3, #16
 8000fe0:	0c03      	lsrs	r3, r0, #16
 8000fe2:	0400      	lsls	r0, r0, #16
 8000fe4:	0c00      	lsrs	r0, r0, #16
 8000fe6:	4346      	muls	r6, r0
 8000fe8:	46b4      	mov	ip, r6
 8000fea:	001e      	movs	r6, r3
 8000fec:	436e      	muls	r6, r5
 8000fee:	9600      	str	r6, [sp, #0]
 8000ff0:	0016      	movs	r6, r2
 8000ff2:	0007      	movs	r7, r0
 8000ff4:	435e      	muls	r6, r3
 8000ff6:	4661      	mov	r1, ip
 8000ff8:	46b0      	mov	r8, r6
 8000ffa:	436f      	muls	r7, r5
 8000ffc:	0c0e      	lsrs	r6, r1, #16
 8000ffe:	44b8      	add	r8, r7
 8001000:	4446      	add	r6, r8
 8001002:	42b7      	cmp	r7, r6
 8001004:	d905      	bls.n	8001012 <__aeabi_dmul+0x1fe>
 8001006:	2180      	movs	r1, #128	@ 0x80
 8001008:	0249      	lsls	r1, r1, #9
 800100a:	4688      	mov	r8, r1
 800100c:	9f00      	ldr	r7, [sp, #0]
 800100e:	4447      	add	r7, r8
 8001010:	9700      	str	r7, [sp, #0]
 8001012:	4661      	mov	r1, ip
 8001014:	0409      	lsls	r1, r1, #16
 8001016:	0c09      	lsrs	r1, r1, #16
 8001018:	0c37      	lsrs	r7, r6, #16
 800101a:	0436      	lsls	r6, r6, #16
 800101c:	468c      	mov	ip, r1
 800101e:	0031      	movs	r1, r6
 8001020:	4461      	add	r1, ip
 8001022:	9101      	str	r1, [sp, #4]
 8001024:	0011      	movs	r1, r2
 8001026:	0c26      	lsrs	r6, r4, #16
 8001028:	0424      	lsls	r4, r4, #16
 800102a:	0c24      	lsrs	r4, r4, #16
 800102c:	4361      	muls	r1, r4
 800102e:	468c      	mov	ip, r1
 8001030:	0021      	movs	r1, r4
 8001032:	4369      	muls	r1, r5
 8001034:	4689      	mov	r9, r1
 8001036:	4661      	mov	r1, ip
 8001038:	0c09      	lsrs	r1, r1, #16
 800103a:	4688      	mov	r8, r1
 800103c:	4372      	muls	r2, r6
 800103e:	444a      	add	r2, r9
 8001040:	4442      	add	r2, r8
 8001042:	4375      	muls	r5, r6
 8001044:	4591      	cmp	r9, r2
 8001046:	d903      	bls.n	8001050 <__aeabi_dmul+0x23c>
 8001048:	2180      	movs	r1, #128	@ 0x80
 800104a:	0249      	lsls	r1, r1, #9
 800104c:	4688      	mov	r8, r1
 800104e:	4445      	add	r5, r8
 8001050:	0c11      	lsrs	r1, r2, #16
 8001052:	4688      	mov	r8, r1
 8001054:	4661      	mov	r1, ip
 8001056:	0409      	lsls	r1, r1, #16
 8001058:	0c09      	lsrs	r1, r1, #16
 800105a:	468c      	mov	ip, r1
 800105c:	0412      	lsls	r2, r2, #16
 800105e:	4462      	add	r2, ip
 8001060:	18b9      	adds	r1, r7, r2
 8001062:	9102      	str	r1, [sp, #8]
 8001064:	4651      	mov	r1, sl
 8001066:	0c09      	lsrs	r1, r1, #16
 8001068:	468c      	mov	ip, r1
 800106a:	4651      	mov	r1, sl
 800106c:	040f      	lsls	r7, r1, #16
 800106e:	0c3f      	lsrs	r7, r7, #16
 8001070:	0039      	movs	r1, r7
 8001072:	4341      	muls	r1, r0
 8001074:	4445      	add	r5, r8
 8001076:	4688      	mov	r8, r1
 8001078:	4661      	mov	r1, ip
 800107a:	4341      	muls	r1, r0
 800107c:	468a      	mov	sl, r1
 800107e:	4641      	mov	r1, r8
 8001080:	4660      	mov	r0, ip
 8001082:	0c09      	lsrs	r1, r1, #16
 8001084:	4689      	mov	r9, r1
 8001086:	4358      	muls	r0, r3
 8001088:	437b      	muls	r3, r7
 800108a:	4453      	add	r3, sl
 800108c:	444b      	add	r3, r9
 800108e:	459a      	cmp	sl, r3
 8001090:	d903      	bls.n	800109a <__aeabi_dmul+0x286>
 8001092:	2180      	movs	r1, #128	@ 0x80
 8001094:	0249      	lsls	r1, r1, #9
 8001096:	4689      	mov	r9, r1
 8001098:	4448      	add	r0, r9
 800109a:	0c19      	lsrs	r1, r3, #16
 800109c:	4689      	mov	r9, r1
 800109e:	4641      	mov	r1, r8
 80010a0:	0409      	lsls	r1, r1, #16
 80010a2:	0c09      	lsrs	r1, r1, #16
 80010a4:	4688      	mov	r8, r1
 80010a6:	0039      	movs	r1, r7
 80010a8:	4361      	muls	r1, r4
 80010aa:	041b      	lsls	r3, r3, #16
 80010ac:	4443      	add	r3, r8
 80010ae:	4688      	mov	r8, r1
 80010b0:	4661      	mov	r1, ip
 80010b2:	434c      	muls	r4, r1
 80010b4:	4371      	muls	r1, r6
 80010b6:	468c      	mov	ip, r1
 80010b8:	4641      	mov	r1, r8
 80010ba:	4377      	muls	r7, r6
 80010bc:	0c0e      	lsrs	r6, r1, #16
 80010be:	193f      	adds	r7, r7, r4
 80010c0:	19f6      	adds	r6, r6, r7
 80010c2:	4448      	add	r0, r9
 80010c4:	42b4      	cmp	r4, r6
 80010c6:	d903      	bls.n	80010d0 <__aeabi_dmul+0x2bc>
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	0249      	lsls	r1, r1, #9
 80010cc:	4689      	mov	r9, r1
 80010ce:	44cc      	add	ip, r9
 80010d0:	9902      	ldr	r1, [sp, #8]
 80010d2:	9f00      	ldr	r7, [sp, #0]
 80010d4:	4689      	mov	r9, r1
 80010d6:	0431      	lsls	r1, r6, #16
 80010d8:	444f      	add	r7, r9
 80010da:	4689      	mov	r9, r1
 80010dc:	4641      	mov	r1, r8
 80010de:	4297      	cmp	r7, r2
 80010e0:	4192      	sbcs	r2, r2
 80010e2:	040c      	lsls	r4, r1, #16
 80010e4:	0c24      	lsrs	r4, r4, #16
 80010e6:	444c      	add	r4, r9
 80010e8:	18ff      	adds	r7, r7, r3
 80010ea:	4252      	negs	r2, r2
 80010ec:	1964      	adds	r4, r4, r5
 80010ee:	18a1      	adds	r1, r4, r2
 80010f0:	429f      	cmp	r7, r3
 80010f2:	419b      	sbcs	r3, r3
 80010f4:	4688      	mov	r8, r1
 80010f6:	4682      	mov	sl, r0
 80010f8:	425b      	negs	r3, r3
 80010fa:	4699      	mov	r9, r3
 80010fc:	4590      	cmp	r8, r2
 80010fe:	4192      	sbcs	r2, r2
 8001100:	42ac      	cmp	r4, r5
 8001102:	41a4      	sbcs	r4, r4
 8001104:	44c2      	add	sl, r8
 8001106:	44d1      	add	r9, sl
 8001108:	4252      	negs	r2, r2
 800110a:	4264      	negs	r4, r4
 800110c:	4314      	orrs	r4, r2
 800110e:	4599      	cmp	r9, r3
 8001110:	419b      	sbcs	r3, r3
 8001112:	4582      	cmp	sl, r0
 8001114:	4192      	sbcs	r2, r2
 8001116:	425b      	negs	r3, r3
 8001118:	4252      	negs	r2, r2
 800111a:	4313      	orrs	r3, r2
 800111c:	464a      	mov	r2, r9
 800111e:	0c36      	lsrs	r6, r6, #16
 8001120:	19a4      	adds	r4, r4, r6
 8001122:	18e3      	adds	r3, r4, r3
 8001124:	4463      	add	r3, ip
 8001126:	025b      	lsls	r3, r3, #9
 8001128:	0dd2      	lsrs	r2, r2, #23
 800112a:	431a      	orrs	r2, r3
 800112c:	9901      	ldr	r1, [sp, #4]
 800112e:	4692      	mov	sl, r2
 8001130:	027a      	lsls	r2, r7, #9
 8001132:	430a      	orrs	r2, r1
 8001134:	1e50      	subs	r0, r2, #1
 8001136:	4182      	sbcs	r2, r0
 8001138:	0dff      	lsrs	r7, r7, #23
 800113a:	4317      	orrs	r7, r2
 800113c:	464a      	mov	r2, r9
 800113e:	0252      	lsls	r2, r2, #9
 8001140:	4317      	orrs	r7, r2
 8001142:	46b8      	mov	r8, r7
 8001144:	01db      	lsls	r3, r3, #7
 8001146:	d500      	bpl.n	800114a <__aeabi_dmul+0x336>
 8001148:	e6ed      	b.n	8000f26 <__aeabi_dmul+0x112>
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <__aeabi_dmul+0x36c>)
 800114c:	9a03      	ldr	r2, [sp, #12]
 800114e:	445b      	add	r3, fp
 8001150:	4691      	mov	r9, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	dc00      	bgt.n	8001158 <__aeabi_dmul+0x344>
 8001156:	e0ac      	b.n	80012b2 <__aeabi_dmul+0x49e>
 8001158:	003a      	movs	r2, r7
 800115a:	0752      	lsls	r2, r2, #29
 800115c:	d100      	bne.n	8001160 <__aeabi_dmul+0x34c>
 800115e:	e710      	b.n	8000f82 <__aeabi_dmul+0x16e>
 8001160:	220f      	movs	r2, #15
 8001162:	4658      	mov	r0, fp
 8001164:	403a      	ands	r2, r7
 8001166:	2a04      	cmp	r2, #4
 8001168:	d000      	beq.n	800116c <__aeabi_dmul+0x358>
 800116a:	e6f9      	b.n	8000f60 <__aeabi_dmul+0x14c>
 800116c:	e709      	b.n	8000f82 <__aeabi_dmul+0x16e>
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	000007ff 	.word	0x000007ff
 8001174:	fffffc01 	.word	0xfffffc01
 8001178:	feffffff 	.word	0xfeffffff
 800117c:	000007fe 	.word	0x000007fe
 8001180:	000003ff 	.word	0x000003ff
 8001184:	0022      	movs	r2, r4
 8001186:	4332      	orrs	r2, r6
 8001188:	d06f      	beq.n	800126a <__aeabi_dmul+0x456>
 800118a:	2c00      	cmp	r4, #0
 800118c:	d100      	bne.n	8001190 <__aeabi_dmul+0x37c>
 800118e:	e0c2      	b.n	8001316 <__aeabi_dmul+0x502>
 8001190:	0020      	movs	r0, r4
 8001192:	f000 fa05 	bl	80015a0 <__clzsi2>
 8001196:	0002      	movs	r2, r0
 8001198:	0003      	movs	r3, r0
 800119a:	3a0b      	subs	r2, #11
 800119c:	201d      	movs	r0, #29
 800119e:	1a82      	subs	r2, r0, r2
 80011a0:	0030      	movs	r0, r6
 80011a2:	0019      	movs	r1, r3
 80011a4:	40d0      	lsrs	r0, r2
 80011a6:	3908      	subs	r1, #8
 80011a8:	408c      	lsls	r4, r1
 80011aa:	0002      	movs	r2, r0
 80011ac:	4322      	orrs	r2, r4
 80011ae:	0034      	movs	r4, r6
 80011b0:	408c      	lsls	r4, r1
 80011b2:	4659      	mov	r1, fp
 80011b4:	1acb      	subs	r3, r1, r3
 80011b6:	4986      	ldr	r1, [pc, #536]	@ (80013d0 <__aeabi_dmul+0x5bc>)
 80011b8:	468b      	mov	fp, r1
 80011ba:	449b      	add	fp, r3
 80011bc:	2d0a      	cmp	r5, #10
 80011be:	dd00      	ble.n	80011c2 <__aeabi_dmul+0x3ae>
 80011c0:	e6a4      	b.n	8000f0c <__aeabi_dmul+0xf8>
 80011c2:	4649      	mov	r1, r9
 80011c4:	9b00      	ldr	r3, [sp, #0]
 80011c6:	9401      	str	r4, [sp, #4]
 80011c8:	4059      	eors	r1, r3
 80011ca:	b2cb      	uxtb	r3, r1
 80011cc:	0014      	movs	r4, r2
 80011ce:	2000      	movs	r0, #0
 80011d0:	9303      	str	r3, [sp, #12]
 80011d2:	2d02      	cmp	r5, #2
 80011d4:	dd00      	ble.n	80011d8 <__aeabi_dmul+0x3c4>
 80011d6:	e667      	b.n	8000ea8 <__aeabi_dmul+0x94>
 80011d8:	e6fb      	b.n	8000fd2 <__aeabi_dmul+0x1be>
 80011da:	4653      	mov	r3, sl
 80011dc:	4303      	orrs	r3, r0
 80011de:	4698      	mov	r8, r3
 80011e0:	d03c      	beq.n	800125c <__aeabi_dmul+0x448>
 80011e2:	4653      	mov	r3, sl
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d100      	bne.n	80011ea <__aeabi_dmul+0x3d6>
 80011e8:	e0a3      	b.n	8001332 <__aeabi_dmul+0x51e>
 80011ea:	4650      	mov	r0, sl
 80011ec:	f000 f9d8 	bl	80015a0 <__clzsi2>
 80011f0:	230b      	movs	r3, #11
 80011f2:	425b      	negs	r3, r3
 80011f4:	469c      	mov	ip, r3
 80011f6:	0002      	movs	r2, r0
 80011f8:	4484      	add	ip, r0
 80011fa:	0011      	movs	r1, r2
 80011fc:	4650      	mov	r0, sl
 80011fe:	3908      	subs	r1, #8
 8001200:	4088      	lsls	r0, r1
 8001202:	231d      	movs	r3, #29
 8001204:	4680      	mov	r8, r0
 8001206:	4660      	mov	r0, ip
 8001208:	1a1b      	subs	r3, r3, r0
 800120a:	0020      	movs	r0, r4
 800120c:	40d8      	lsrs	r0, r3
 800120e:	0003      	movs	r3, r0
 8001210:	4640      	mov	r0, r8
 8001212:	4303      	orrs	r3, r0
 8001214:	469a      	mov	sl, r3
 8001216:	0023      	movs	r3, r4
 8001218:	408b      	lsls	r3, r1
 800121a:	4698      	mov	r8, r3
 800121c:	4b6c      	ldr	r3, [pc, #432]	@ (80013d0 <__aeabi_dmul+0x5bc>)
 800121e:	2500      	movs	r5, #0
 8001220:	1a9b      	subs	r3, r3, r2
 8001222:	469b      	mov	fp, r3
 8001224:	2300      	movs	r3, #0
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	e61a      	b.n	8000e60 <__aeabi_dmul+0x4c>
 800122a:	2d0f      	cmp	r5, #15
 800122c:	d000      	beq.n	8001230 <__aeabi_dmul+0x41c>
 800122e:	e0c9      	b.n	80013c4 <__aeabi_dmul+0x5b0>
 8001230:	2380      	movs	r3, #128	@ 0x80
 8001232:	4652      	mov	r2, sl
 8001234:	031b      	lsls	r3, r3, #12
 8001236:	421a      	tst	r2, r3
 8001238:	d002      	beq.n	8001240 <__aeabi_dmul+0x42c>
 800123a:	421c      	tst	r4, r3
 800123c:	d100      	bne.n	8001240 <__aeabi_dmul+0x42c>
 800123e:	e092      	b.n	8001366 <__aeabi_dmul+0x552>
 8001240:	2480      	movs	r4, #128	@ 0x80
 8001242:	4653      	mov	r3, sl
 8001244:	0324      	lsls	r4, r4, #12
 8001246:	431c      	orrs	r4, r3
 8001248:	0324      	lsls	r4, r4, #12
 800124a:	4642      	mov	r2, r8
 800124c:	0b24      	lsrs	r4, r4, #12
 800124e:	e63e      	b.n	8000ece <__aeabi_dmul+0xba>
 8001250:	469b      	mov	fp, r3
 8001252:	2303      	movs	r3, #3
 8001254:	4680      	mov	r8, r0
 8001256:	250c      	movs	r5, #12
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	e601      	b.n	8000e60 <__aeabi_dmul+0x4c>
 800125c:	2300      	movs	r3, #0
 800125e:	469a      	mov	sl, r3
 8001260:	469b      	mov	fp, r3
 8001262:	3301      	adds	r3, #1
 8001264:	2504      	movs	r5, #4
 8001266:	9302      	str	r3, [sp, #8]
 8001268:	e5fa      	b.n	8000e60 <__aeabi_dmul+0x4c>
 800126a:	2101      	movs	r1, #1
 800126c:	430d      	orrs	r5, r1
 800126e:	2d0a      	cmp	r5, #10
 8001270:	dd00      	ble.n	8001274 <__aeabi_dmul+0x460>
 8001272:	e64b      	b.n	8000f0c <__aeabi_dmul+0xf8>
 8001274:	4649      	mov	r1, r9
 8001276:	9800      	ldr	r0, [sp, #0]
 8001278:	4041      	eors	r1, r0
 800127a:	b2c9      	uxtb	r1, r1
 800127c:	9103      	str	r1, [sp, #12]
 800127e:	2d02      	cmp	r5, #2
 8001280:	dc00      	bgt.n	8001284 <__aeabi_dmul+0x470>
 8001282:	e096      	b.n	80013b2 <__aeabi_dmul+0x59e>
 8001284:	2300      	movs	r3, #0
 8001286:	2400      	movs	r4, #0
 8001288:	2001      	movs	r0, #1
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	e60c      	b.n	8000ea8 <__aeabi_dmul+0x94>
 800128e:	4649      	mov	r1, r9
 8001290:	2302      	movs	r3, #2
 8001292:	9a00      	ldr	r2, [sp, #0]
 8001294:	432b      	orrs	r3, r5
 8001296:	4051      	eors	r1, r2
 8001298:	b2ca      	uxtb	r2, r1
 800129a:	9203      	str	r2, [sp, #12]
 800129c:	2b0a      	cmp	r3, #10
 800129e:	dd00      	ble.n	80012a2 <__aeabi_dmul+0x48e>
 80012a0:	e634      	b.n	8000f0c <__aeabi_dmul+0xf8>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d157      	bne.n	8001356 <__aeabi_dmul+0x542>
 80012a6:	9b03      	ldr	r3, [sp, #12]
 80012a8:	4699      	mov	r9, r3
 80012aa:	2400      	movs	r4, #0
 80012ac:	2200      	movs	r2, #0
 80012ae:	4b49      	ldr	r3, [pc, #292]	@ (80013d4 <__aeabi_dmul+0x5c0>)
 80012b0:	e60e      	b.n	8000ed0 <__aeabi_dmul+0xbc>
 80012b2:	4658      	mov	r0, fp
 80012b4:	2101      	movs	r1, #1
 80012b6:	1ac9      	subs	r1, r1, r3
 80012b8:	2938      	cmp	r1, #56	@ 0x38
 80012ba:	dd00      	ble.n	80012be <__aeabi_dmul+0x4aa>
 80012bc:	e62f      	b.n	8000f1e <__aeabi_dmul+0x10a>
 80012be:	291f      	cmp	r1, #31
 80012c0:	dd56      	ble.n	8001370 <__aeabi_dmul+0x55c>
 80012c2:	221f      	movs	r2, #31
 80012c4:	4654      	mov	r4, sl
 80012c6:	4252      	negs	r2, r2
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	40dc      	lsrs	r4, r3
 80012cc:	2920      	cmp	r1, #32
 80012ce:	d007      	beq.n	80012e0 <__aeabi_dmul+0x4cc>
 80012d0:	4b41      	ldr	r3, [pc, #260]	@ (80013d8 <__aeabi_dmul+0x5c4>)
 80012d2:	4642      	mov	r2, r8
 80012d4:	469c      	mov	ip, r3
 80012d6:	4653      	mov	r3, sl
 80012d8:	4460      	add	r0, ip
 80012da:	4083      	lsls	r3, r0
 80012dc:	431a      	orrs	r2, r3
 80012de:	4690      	mov	r8, r2
 80012e0:	4642      	mov	r2, r8
 80012e2:	2107      	movs	r1, #7
 80012e4:	1e53      	subs	r3, r2, #1
 80012e6:	419a      	sbcs	r2, r3
 80012e8:	000b      	movs	r3, r1
 80012ea:	4322      	orrs	r2, r4
 80012ec:	4013      	ands	r3, r2
 80012ee:	2400      	movs	r4, #0
 80012f0:	4211      	tst	r1, r2
 80012f2:	d009      	beq.n	8001308 <__aeabi_dmul+0x4f4>
 80012f4:	230f      	movs	r3, #15
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d05d      	beq.n	80013b8 <__aeabi_dmul+0x5a4>
 80012fc:	1d11      	adds	r1, r2, #4
 80012fe:	4291      	cmp	r1, r2
 8001300:	419b      	sbcs	r3, r3
 8001302:	000a      	movs	r2, r1
 8001304:	425b      	negs	r3, r3
 8001306:	075b      	lsls	r3, r3, #29
 8001308:	08d2      	lsrs	r2, r2, #3
 800130a:	431a      	orrs	r2, r3
 800130c:	2300      	movs	r3, #0
 800130e:	e5df      	b.n	8000ed0 <__aeabi_dmul+0xbc>
 8001310:	9b03      	ldr	r3, [sp, #12]
 8001312:	4699      	mov	r9, r3
 8001314:	e5fa      	b.n	8000f0c <__aeabi_dmul+0xf8>
 8001316:	9801      	ldr	r0, [sp, #4]
 8001318:	f000 f942 	bl	80015a0 <__clzsi2>
 800131c:	0002      	movs	r2, r0
 800131e:	0003      	movs	r3, r0
 8001320:	3215      	adds	r2, #21
 8001322:	3320      	adds	r3, #32
 8001324:	2a1c      	cmp	r2, #28
 8001326:	dc00      	bgt.n	800132a <__aeabi_dmul+0x516>
 8001328:	e738      	b.n	800119c <__aeabi_dmul+0x388>
 800132a:	9a01      	ldr	r2, [sp, #4]
 800132c:	3808      	subs	r0, #8
 800132e:	4082      	lsls	r2, r0
 8001330:	e73f      	b.n	80011b2 <__aeabi_dmul+0x39e>
 8001332:	f000 f935 	bl	80015a0 <__clzsi2>
 8001336:	2315      	movs	r3, #21
 8001338:	469c      	mov	ip, r3
 800133a:	4484      	add	ip, r0
 800133c:	0002      	movs	r2, r0
 800133e:	4663      	mov	r3, ip
 8001340:	3220      	adds	r2, #32
 8001342:	2b1c      	cmp	r3, #28
 8001344:	dc00      	bgt.n	8001348 <__aeabi_dmul+0x534>
 8001346:	e758      	b.n	80011fa <__aeabi_dmul+0x3e6>
 8001348:	2300      	movs	r3, #0
 800134a:	4698      	mov	r8, r3
 800134c:	0023      	movs	r3, r4
 800134e:	3808      	subs	r0, #8
 8001350:	4083      	lsls	r3, r0
 8001352:	469a      	mov	sl, r3
 8001354:	e762      	b.n	800121c <__aeabi_dmul+0x408>
 8001356:	001d      	movs	r5, r3
 8001358:	2300      	movs	r3, #0
 800135a:	2400      	movs	r4, #0
 800135c:	2002      	movs	r0, #2
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	e5a2      	b.n	8000ea8 <__aeabi_dmul+0x94>
 8001362:	9002      	str	r0, [sp, #8]
 8001364:	e632      	b.n	8000fcc <__aeabi_dmul+0x1b8>
 8001366:	431c      	orrs	r4, r3
 8001368:	9b00      	ldr	r3, [sp, #0]
 800136a:	9a01      	ldr	r2, [sp, #4]
 800136c:	4699      	mov	r9, r3
 800136e:	e5ae      	b.n	8000ece <__aeabi_dmul+0xba>
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <__aeabi_dmul+0x5c8>)
 8001372:	4652      	mov	r2, sl
 8001374:	18c3      	adds	r3, r0, r3
 8001376:	4640      	mov	r0, r8
 8001378:	409a      	lsls	r2, r3
 800137a:	40c8      	lsrs	r0, r1
 800137c:	4302      	orrs	r2, r0
 800137e:	4640      	mov	r0, r8
 8001380:	4098      	lsls	r0, r3
 8001382:	0003      	movs	r3, r0
 8001384:	1e58      	subs	r0, r3, #1
 8001386:	4183      	sbcs	r3, r0
 8001388:	4654      	mov	r4, sl
 800138a:	431a      	orrs	r2, r3
 800138c:	40cc      	lsrs	r4, r1
 800138e:	0753      	lsls	r3, r2, #29
 8001390:	d009      	beq.n	80013a6 <__aeabi_dmul+0x592>
 8001392:	230f      	movs	r3, #15
 8001394:	4013      	ands	r3, r2
 8001396:	2b04      	cmp	r3, #4
 8001398:	d005      	beq.n	80013a6 <__aeabi_dmul+0x592>
 800139a:	1d13      	adds	r3, r2, #4
 800139c:	4293      	cmp	r3, r2
 800139e:	4192      	sbcs	r2, r2
 80013a0:	4252      	negs	r2, r2
 80013a2:	18a4      	adds	r4, r4, r2
 80013a4:	001a      	movs	r2, r3
 80013a6:	0223      	lsls	r3, r4, #8
 80013a8:	d508      	bpl.n	80013bc <__aeabi_dmul+0x5a8>
 80013aa:	2301      	movs	r3, #1
 80013ac:	2400      	movs	r4, #0
 80013ae:	2200      	movs	r2, #0
 80013b0:	e58e      	b.n	8000ed0 <__aeabi_dmul+0xbc>
 80013b2:	4689      	mov	r9, r1
 80013b4:	2400      	movs	r4, #0
 80013b6:	e58b      	b.n	8000ed0 <__aeabi_dmul+0xbc>
 80013b8:	2300      	movs	r3, #0
 80013ba:	e7a5      	b.n	8001308 <__aeabi_dmul+0x4f4>
 80013bc:	0763      	lsls	r3, r4, #29
 80013be:	0264      	lsls	r4, r4, #9
 80013c0:	0b24      	lsrs	r4, r4, #12
 80013c2:	e7a1      	b.n	8001308 <__aeabi_dmul+0x4f4>
 80013c4:	9b00      	ldr	r3, [sp, #0]
 80013c6:	46a2      	mov	sl, r4
 80013c8:	4699      	mov	r9, r3
 80013ca:	9b01      	ldr	r3, [sp, #4]
 80013cc:	4698      	mov	r8, r3
 80013ce:	e737      	b.n	8001240 <__aeabi_dmul+0x42c>
 80013d0:	fffffc0d 	.word	0xfffffc0d
 80013d4:	000007ff 	.word	0x000007ff
 80013d8:	0000043e 	.word	0x0000043e
 80013dc:	0000041e 	.word	0x0000041e

080013e0 <__aeabi_ui2d>:
 80013e0:	b510      	push	{r4, lr}
 80013e2:	1e04      	subs	r4, r0, #0
 80013e4:	d010      	beq.n	8001408 <__aeabi_ui2d+0x28>
 80013e6:	f000 f8db 	bl	80015a0 <__clzsi2>
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <__aeabi_ui2d+0x44>)
 80013ec:	1a1b      	subs	r3, r3, r0
 80013ee:	055b      	lsls	r3, r3, #21
 80013f0:	0d5b      	lsrs	r3, r3, #21
 80013f2:	280a      	cmp	r0, #10
 80013f4:	dc0f      	bgt.n	8001416 <__aeabi_ui2d+0x36>
 80013f6:	220b      	movs	r2, #11
 80013f8:	0021      	movs	r1, r4
 80013fa:	1a12      	subs	r2, r2, r0
 80013fc:	40d1      	lsrs	r1, r2
 80013fe:	3015      	adds	r0, #21
 8001400:	030a      	lsls	r2, r1, #12
 8001402:	4084      	lsls	r4, r0
 8001404:	0b12      	lsrs	r2, r2, #12
 8001406:	e001      	b.n	800140c <__aeabi_ui2d+0x2c>
 8001408:	2300      	movs	r3, #0
 800140a:	2200      	movs	r2, #0
 800140c:	051b      	lsls	r3, r3, #20
 800140e:	4313      	orrs	r3, r2
 8001410:	0020      	movs	r0, r4
 8001412:	0019      	movs	r1, r3
 8001414:	bd10      	pop	{r4, pc}
 8001416:	0022      	movs	r2, r4
 8001418:	380b      	subs	r0, #11
 800141a:	4082      	lsls	r2, r0
 800141c:	0312      	lsls	r2, r2, #12
 800141e:	2400      	movs	r4, #0
 8001420:	0b12      	lsrs	r2, r2, #12
 8001422:	e7f3      	b.n	800140c <__aeabi_ui2d+0x2c>
 8001424:	0000041e 	.word	0x0000041e

08001428 <__aeabi_d2f>:
 8001428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142a:	004b      	lsls	r3, r1, #1
 800142c:	030f      	lsls	r7, r1, #12
 800142e:	0d5b      	lsrs	r3, r3, #21
 8001430:	4c3a      	ldr	r4, [pc, #232]	@ (800151c <__aeabi_d2f+0xf4>)
 8001432:	0f45      	lsrs	r5, r0, #29
 8001434:	b083      	sub	sp, #12
 8001436:	0a7f      	lsrs	r7, r7, #9
 8001438:	1c5e      	adds	r6, r3, #1
 800143a:	432f      	orrs	r7, r5
 800143c:	9000      	str	r0, [sp, #0]
 800143e:	9101      	str	r1, [sp, #4]
 8001440:	0fca      	lsrs	r2, r1, #31
 8001442:	00c5      	lsls	r5, r0, #3
 8001444:	4226      	tst	r6, r4
 8001446:	d00b      	beq.n	8001460 <__aeabi_d2f+0x38>
 8001448:	4935      	ldr	r1, [pc, #212]	@ (8001520 <__aeabi_d2f+0xf8>)
 800144a:	185c      	adds	r4, r3, r1
 800144c:	2cfe      	cmp	r4, #254	@ 0xfe
 800144e:	dd13      	ble.n	8001478 <__aeabi_d2f+0x50>
 8001450:	20ff      	movs	r0, #255	@ 0xff
 8001452:	2300      	movs	r3, #0
 8001454:	05c0      	lsls	r0, r0, #23
 8001456:	4318      	orrs	r0, r3
 8001458:	07d2      	lsls	r2, r2, #31
 800145a:	4310      	orrs	r0, r2
 800145c:	b003      	add	sp, #12
 800145e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001460:	433d      	orrs	r5, r7
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <__aeabi_d2f+0x42>
 8001466:	2000      	movs	r0, #0
 8001468:	e7f4      	b.n	8001454 <__aeabi_d2f+0x2c>
 800146a:	2d00      	cmp	r5, #0
 800146c:	d0f0      	beq.n	8001450 <__aeabi_d2f+0x28>
 800146e:	2380      	movs	r3, #128	@ 0x80
 8001470:	03db      	lsls	r3, r3, #15
 8001472:	20ff      	movs	r0, #255	@ 0xff
 8001474:	433b      	orrs	r3, r7
 8001476:	e7ed      	b.n	8001454 <__aeabi_d2f+0x2c>
 8001478:	2c00      	cmp	r4, #0
 800147a:	dd0c      	ble.n	8001496 <__aeabi_d2f+0x6e>
 800147c:	9b00      	ldr	r3, [sp, #0]
 800147e:	00ff      	lsls	r7, r7, #3
 8001480:	019b      	lsls	r3, r3, #6
 8001482:	1e58      	subs	r0, r3, #1
 8001484:	4183      	sbcs	r3, r0
 8001486:	0f69      	lsrs	r1, r5, #29
 8001488:	433b      	orrs	r3, r7
 800148a:	430b      	orrs	r3, r1
 800148c:	0759      	lsls	r1, r3, #29
 800148e:	d127      	bne.n	80014e0 <__aeabi_d2f+0xb8>
 8001490:	08db      	lsrs	r3, r3, #3
 8001492:	b2e0      	uxtb	r0, r4
 8001494:	e7de      	b.n	8001454 <__aeabi_d2f+0x2c>
 8001496:	0021      	movs	r1, r4
 8001498:	3117      	adds	r1, #23
 800149a:	db31      	blt.n	8001500 <__aeabi_d2f+0xd8>
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	201e      	movs	r0, #30
 80014a0:	0409      	lsls	r1, r1, #16
 80014a2:	4339      	orrs	r1, r7
 80014a4:	1b00      	subs	r0, r0, r4
 80014a6:	281f      	cmp	r0, #31
 80014a8:	dd2d      	ble.n	8001506 <__aeabi_d2f+0xde>
 80014aa:	2602      	movs	r6, #2
 80014ac:	4276      	negs	r6, r6
 80014ae:	1b34      	subs	r4, r6, r4
 80014b0:	000e      	movs	r6, r1
 80014b2:	40e6      	lsrs	r6, r4
 80014b4:	0034      	movs	r4, r6
 80014b6:	2820      	cmp	r0, #32
 80014b8:	d004      	beq.n	80014c4 <__aeabi_d2f+0x9c>
 80014ba:	481a      	ldr	r0, [pc, #104]	@ (8001524 <__aeabi_d2f+0xfc>)
 80014bc:	4684      	mov	ip, r0
 80014be:	4463      	add	r3, ip
 80014c0:	4099      	lsls	r1, r3
 80014c2:	430d      	orrs	r5, r1
 80014c4:	002b      	movs	r3, r5
 80014c6:	1e59      	subs	r1, r3, #1
 80014c8:	418b      	sbcs	r3, r1
 80014ca:	4323      	orrs	r3, r4
 80014cc:	0759      	lsls	r1, r3, #29
 80014ce:	d003      	beq.n	80014d8 <__aeabi_d2f+0xb0>
 80014d0:	210f      	movs	r1, #15
 80014d2:	4019      	ands	r1, r3
 80014d4:	2904      	cmp	r1, #4
 80014d6:	d10b      	bne.n	80014f0 <__aeabi_d2f+0xc8>
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	2000      	movs	r0, #0
 80014dc:	0a5b      	lsrs	r3, r3, #9
 80014de:	e7b9      	b.n	8001454 <__aeabi_d2f+0x2c>
 80014e0:	210f      	movs	r1, #15
 80014e2:	4019      	ands	r1, r3
 80014e4:	2904      	cmp	r1, #4
 80014e6:	d104      	bne.n	80014f2 <__aeabi_d2f+0xca>
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	0a5b      	lsrs	r3, r3, #9
 80014ec:	b2e0      	uxtb	r0, r4
 80014ee:	e7b1      	b.n	8001454 <__aeabi_d2f+0x2c>
 80014f0:	2400      	movs	r4, #0
 80014f2:	3304      	adds	r3, #4
 80014f4:	0159      	lsls	r1, r3, #5
 80014f6:	d5f7      	bpl.n	80014e8 <__aeabi_d2f+0xc0>
 80014f8:	3401      	adds	r4, #1
 80014fa:	2300      	movs	r3, #0
 80014fc:	b2e0      	uxtb	r0, r4
 80014fe:	e7a9      	b.n	8001454 <__aeabi_d2f+0x2c>
 8001500:	2000      	movs	r0, #0
 8001502:	2300      	movs	r3, #0
 8001504:	e7a6      	b.n	8001454 <__aeabi_d2f+0x2c>
 8001506:	4c08      	ldr	r4, [pc, #32]	@ (8001528 <__aeabi_d2f+0x100>)
 8001508:	191c      	adds	r4, r3, r4
 800150a:	002b      	movs	r3, r5
 800150c:	40a5      	lsls	r5, r4
 800150e:	40c3      	lsrs	r3, r0
 8001510:	40a1      	lsls	r1, r4
 8001512:	1e68      	subs	r0, r5, #1
 8001514:	4185      	sbcs	r5, r0
 8001516:	4329      	orrs	r1, r5
 8001518:	430b      	orrs	r3, r1
 800151a:	e7d7      	b.n	80014cc <__aeabi_d2f+0xa4>
 800151c:	000007fe 	.word	0x000007fe
 8001520:	fffffc80 	.word	0xfffffc80
 8001524:	fffffca2 	.word	0xfffffca2
 8001528:	fffffc82 	.word	0xfffffc82

0800152c <__aeabi_cfrcmple>:
 800152c:	4684      	mov	ip, r0
 800152e:	0008      	movs	r0, r1
 8001530:	4661      	mov	r1, ip
 8001532:	e7ff      	b.n	8001534 <__aeabi_cfcmpeq>

08001534 <__aeabi_cfcmpeq>:
 8001534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001536:	f000 f8c1 	bl	80016bc <__lesf2>
 800153a:	2800      	cmp	r0, #0
 800153c:	d401      	bmi.n	8001542 <__aeabi_cfcmpeq+0xe>
 800153e:	2100      	movs	r1, #0
 8001540:	42c8      	cmn	r0, r1
 8001542:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001544 <__aeabi_fcmpeq>:
 8001544:	b510      	push	{r4, lr}
 8001546:	f000 f849 	bl	80015dc <__eqsf2>
 800154a:	4240      	negs	r0, r0
 800154c:	3001      	adds	r0, #1
 800154e:	bd10      	pop	{r4, pc}

08001550 <__aeabi_fcmplt>:
 8001550:	b510      	push	{r4, lr}
 8001552:	f000 f8b3 	bl	80016bc <__lesf2>
 8001556:	2800      	cmp	r0, #0
 8001558:	db01      	blt.n	800155e <__aeabi_fcmplt+0xe>
 800155a:	2000      	movs	r0, #0
 800155c:	bd10      	pop	{r4, pc}
 800155e:	2001      	movs	r0, #1
 8001560:	bd10      	pop	{r4, pc}
 8001562:	46c0      	nop			@ (mov r8, r8)

08001564 <__aeabi_fcmple>:
 8001564:	b510      	push	{r4, lr}
 8001566:	f000 f8a9 	bl	80016bc <__lesf2>
 800156a:	2800      	cmp	r0, #0
 800156c:	dd01      	ble.n	8001572 <__aeabi_fcmple+0xe>
 800156e:	2000      	movs	r0, #0
 8001570:	bd10      	pop	{r4, pc}
 8001572:	2001      	movs	r0, #1
 8001574:	bd10      	pop	{r4, pc}
 8001576:	46c0      	nop			@ (mov r8, r8)

08001578 <__aeabi_fcmpgt>:
 8001578:	b510      	push	{r4, lr}
 800157a:	f000 f857 	bl	800162c <__gesf2>
 800157e:	2800      	cmp	r0, #0
 8001580:	dc01      	bgt.n	8001586 <__aeabi_fcmpgt+0xe>
 8001582:	2000      	movs	r0, #0
 8001584:	bd10      	pop	{r4, pc}
 8001586:	2001      	movs	r0, #1
 8001588:	bd10      	pop	{r4, pc}
 800158a:	46c0      	nop			@ (mov r8, r8)

0800158c <__aeabi_fcmpge>:
 800158c:	b510      	push	{r4, lr}
 800158e:	f000 f84d 	bl	800162c <__gesf2>
 8001592:	2800      	cmp	r0, #0
 8001594:	da01      	bge.n	800159a <__aeabi_fcmpge+0xe>
 8001596:	2000      	movs	r0, #0
 8001598:	bd10      	pop	{r4, pc}
 800159a:	2001      	movs	r0, #1
 800159c:	bd10      	pop	{r4, pc}
 800159e:	46c0      	nop			@ (mov r8, r8)

080015a0 <__clzsi2>:
 80015a0:	211c      	movs	r1, #28
 80015a2:	2301      	movs	r3, #1
 80015a4:	041b      	lsls	r3, r3, #16
 80015a6:	4298      	cmp	r0, r3
 80015a8:	d301      	bcc.n	80015ae <__clzsi2+0xe>
 80015aa:	0c00      	lsrs	r0, r0, #16
 80015ac:	3910      	subs	r1, #16
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d301      	bcc.n	80015b8 <__clzsi2+0x18>
 80015b4:	0a00      	lsrs	r0, r0, #8
 80015b6:	3908      	subs	r1, #8
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	4298      	cmp	r0, r3
 80015bc:	d301      	bcc.n	80015c2 <__clzsi2+0x22>
 80015be:	0900      	lsrs	r0, r0, #4
 80015c0:	3904      	subs	r1, #4
 80015c2:	a202      	add	r2, pc, #8	@ (adr r2, 80015cc <__clzsi2+0x2c>)
 80015c4:	5c10      	ldrb	r0, [r2, r0]
 80015c6:	1840      	adds	r0, r0, r1
 80015c8:	4770      	bx	lr
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	02020304 	.word	0x02020304
 80015d0:	01010101 	.word	0x01010101
	...

080015dc <__eqsf2>:
 80015dc:	b570      	push	{r4, r5, r6, lr}
 80015de:	0042      	lsls	r2, r0, #1
 80015e0:	024e      	lsls	r6, r1, #9
 80015e2:	004c      	lsls	r4, r1, #1
 80015e4:	0245      	lsls	r5, r0, #9
 80015e6:	0a6d      	lsrs	r5, r5, #9
 80015e8:	0e12      	lsrs	r2, r2, #24
 80015ea:	0fc3      	lsrs	r3, r0, #31
 80015ec:	0a76      	lsrs	r6, r6, #9
 80015ee:	0e24      	lsrs	r4, r4, #24
 80015f0:	0fc9      	lsrs	r1, r1, #31
 80015f2:	2aff      	cmp	r2, #255	@ 0xff
 80015f4:	d010      	beq.n	8001618 <__eqsf2+0x3c>
 80015f6:	2cff      	cmp	r4, #255	@ 0xff
 80015f8:	d00c      	beq.n	8001614 <__eqsf2+0x38>
 80015fa:	2001      	movs	r0, #1
 80015fc:	42a2      	cmp	r2, r4
 80015fe:	d10a      	bne.n	8001616 <__eqsf2+0x3a>
 8001600:	42b5      	cmp	r5, r6
 8001602:	d108      	bne.n	8001616 <__eqsf2+0x3a>
 8001604:	428b      	cmp	r3, r1
 8001606:	d00f      	beq.n	8001628 <__eqsf2+0x4c>
 8001608:	2a00      	cmp	r2, #0
 800160a:	d104      	bne.n	8001616 <__eqsf2+0x3a>
 800160c:	0028      	movs	r0, r5
 800160e:	1e43      	subs	r3, r0, #1
 8001610:	4198      	sbcs	r0, r3
 8001612:	e000      	b.n	8001616 <__eqsf2+0x3a>
 8001614:	2001      	movs	r0, #1
 8001616:	bd70      	pop	{r4, r5, r6, pc}
 8001618:	2001      	movs	r0, #1
 800161a:	2cff      	cmp	r4, #255	@ 0xff
 800161c:	d1fb      	bne.n	8001616 <__eqsf2+0x3a>
 800161e:	4335      	orrs	r5, r6
 8001620:	d1f9      	bne.n	8001616 <__eqsf2+0x3a>
 8001622:	404b      	eors	r3, r1
 8001624:	0018      	movs	r0, r3
 8001626:	e7f6      	b.n	8001616 <__eqsf2+0x3a>
 8001628:	2000      	movs	r0, #0
 800162a:	e7f4      	b.n	8001616 <__eqsf2+0x3a>

0800162c <__gesf2>:
 800162c:	b530      	push	{r4, r5, lr}
 800162e:	0042      	lsls	r2, r0, #1
 8001630:	0244      	lsls	r4, r0, #9
 8001632:	024d      	lsls	r5, r1, #9
 8001634:	0fc3      	lsrs	r3, r0, #31
 8001636:	0048      	lsls	r0, r1, #1
 8001638:	0a64      	lsrs	r4, r4, #9
 800163a:	0e12      	lsrs	r2, r2, #24
 800163c:	0a6d      	lsrs	r5, r5, #9
 800163e:	0e00      	lsrs	r0, r0, #24
 8001640:	0fc9      	lsrs	r1, r1, #31
 8001642:	2aff      	cmp	r2, #255	@ 0xff
 8001644:	d018      	beq.n	8001678 <__gesf2+0x4c>
 8001646:	28ff      	cmp	r0, #255	@ 0xff
 8001648:	d00a      	beq.n	8001660 <__gesf2+0x34>
 800164a:	2a00      	cmp	r2, #0
 800164c:	d11e      	bne.n	800168c <__gesf2+0x60>
 800164e:	2800      	cmp	r0, #0
 8001650:	d10a      	bne.n	8001668 <__gesf2+0x3c>
 8001652:	2d00      	cmp	r5, #0
 8001654:	d029      	beq.n	80016aa <__gesf2+0x7e>
 8001656:	2c00      	cmp	r4, #0
 8001658:	d12d      	bne.n	80016b6 <__gesf2+0x8a>
 800165a:	0048      	lsls	r0, r1, #1
 800165c:	3801      	subs	r0, #1
 800165e:	bd30      	pop	{r4, r5, pc}
 8001660:	2d00      	cmp	r5, #0
 8001662:	d125      	bne.n	80016b0 <__gesf2+0x84>
 8001664:	2a00      	cmp	r2, #0
 8001666:	d101      	bne.n	800166c <__gesf2+0x40>
 8001668:	2c00      	cmp	r4, #0
 800166a:	d0f6      	beq.n	800165a <__gesf2+0x2e>
 800166c:	428b      	cmp	r3, r1
 800166e:	d019      	beq.n	80016a4 <__gesf2+0x78>
 8001670:	2001      	movs	r0, #1
 8001672:	425b      	negs	r3, r3
 8001674:	4318      	orrs	r0, r3
 8001676:	e7f2      	b.n	800165e <__gesf2+0x32>
 8001678:	2c00      	cmp	r4, #0
 800167a:	d119      	bne.n	80016b0 <__gesf2+0x84>
 800167c:	28ff      	cmp	r0, #255	@ 0xff
 800167e:	d1f7      	bne.n	8001670 <__gesf2+0x44>
 8001680:	2d00      	cmp	r5, #0
 8001682:	d115      	bne.n	80016b0 <__gesf2+0x84>
 8001684:	2000      	movs	r0, #0
 8001686:	428b      	cmp	r3, r1
 8001688:	d1f2      	bne.n	8001670 <__gesf2+0x44>
 800168a:	e7e8      	b.n	800165e <__gesf2+0x32>
 800168c:	2800      	cmp	r0, #0
 800168e:	d0ef      	beq.n	8001670 <__gesf2+0x44>
 8001690:	428b      	cmp	r3, r1
 8001692:	d1ed      	bne.n	8001670 <__gesf2+0x44>
 8001694:	4282      	cmp	r2, r0
 8001696:	dceb      	bgt.n	8001670 <__gesf2+0x44>
 8001698:	db04      	blt.n	80016a4 <__gesf2+0x78>
 800169a:	42ac      	cmp	r4, r5
 800169c:	d8e8      	bhi.n	8001670 <__gesf2+0x44>
 800169e:	2000      	movs	r0, #0
 80016a0:	42ac      	cmp	r4, r5
 80016a2:	d2dc      	bcs.n	800165e <__gesf2+0x32>
 80016a4:	0058      	lsls	r0, r3, #1
 80016a6:	3801      	subs	r0, #1
 80016a8:	e7d9      	b.n	800165e <__gesf2+0x32>
 80016aa:	2c00      	cmp	r4, #0
 80016ac:	d0d7      	beq.n	800165e <__gesf2+0x32>
 80016ae:	e7df      	b.n	8001670 <__gesf2+0x44>
 80016b0:	2002      	movs	r0, #2
 80016b2:	4240      	negs	r0, r0
 80016b4:	e7d3      	b.n	800165e <__gesf2+0x32>
 80016b6:	428b      	cmp	r3, r1
 80016b8:	d1da      	bne.n	8001670 <__gesf2+0x44>
 80016ba:	e7ee      	b.n	800169a <__gesf2+0x6e>

080016bc <__lesf2>:
 80016bc:	b530      	push	{r4, r5, lr}
 80016be:	0042      	lsls	r2, r0, #1
 80016c0:	0244      	lsls	r4, r0, #9
 80016c2:	024d      	lsls	r5, r1, #9
 80016c4:	0fc3      	lsrs	r3, r0, #31
 80016c6:	0048      	lsls	r0, r1, #1
 80016c8:	0a64      	lsrs	r4, r4, #9
 80016ca:	0e12      	lsrs	r2, r2, #24
 80016cc:	0a6d      	lsrs	r5, r5, #9
 80016ce:	0e00      	lsrs	r0, r0, #24
 80016d0:	0fc9      	lsrs	r1, r1, #31
 80016d2:	2aff      	cmp	r2, #255	@ 0xff
 80016d4:	d017      	beq.n	8001706 <__lesf2+0x4a>
 80016d6:	28ff      	cmp	r0, #255	@ 0xff
 80016d8:	d00a      	beq.n	80016f0 <__lesf2+0x34>
 80016da:	2a00      	cmp	r2, #0
 80016dc:	d11b      	bne.n	8001716 <__lesf2+0x5a>
 80016de:	2800      	cmp	r0, #0
 80016e0:	d10a      	bne.n	80016f8 <__lesf2+0x3c>
 80016e2:	2d00      	cmp	r5, #0
 80016e4:	d01d      	beq.n	8001722 <__lesf2+0x66>
 80016e6:	2c00      	cmp	r4, #0
 80016e8:	d12d      	bne.n	8001746 <__lesf2+0x8a>
 80016ea:	0048      	lsls	r0, r1, #1
 80016ec:	3801      	subs	r0, #1
 80016ee:	e011      	b.n	8001714 <__lesf2+0x58>
 80016f0:	2d00      	cmp	r5, #0
 80016f2:	d10e      	bne.n	8001712 <__lesf2+0x56>
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	d101      	bne.n	80016fc <__lesf2+0x40>
 80016f8:	2c00      	cmp	r4, #0
 80016fa:	d0f6      	beq.n	80016ea <__lesf2+0x2e>
 80016fc:	428b      	cmp	r3, r1
 80016fe:	d10c      	bne.n	800171a <__lesf2+0x5e>
 8001700:	0058      	lsls	r0, r3, #1
 8001702:	3801      	subs	r0, #1
 8001704:	e006      	b.n	8001714 <__lesf2+0x58>
 8001706:	2c00      	cmp	r4, #0
 8001708:	d103      	bne.n	8001712 <__lesf2+0x56>
 800170a:	28ff      	cmp	r0, #255	@ 0xff
 800170c:	d105      	bne.n	800171a <__lesf2+0x5e>
 800170e:	2d00      	cmp	r5, #0
 8001710:	d015      	beq.n	800173e <__lesf2+0x82>
 8001712:	2002      	movs	r0, #2
 8001714:	bd30      	pop	{r4, r5, pc}
 8001716:	2800      	cmp	r0, #0
 8001718:	d106      	bne.n	8001728 <__lesf2+0x6c>
 800171a:	2001      	movs	r0, #1
 800171c:	425b      	negs	r3, r3
 800171e:	4318      	orrs	r0, r3
 8001720:	e7f8      	b.n	8001714 <__lesf2+0x58>
 8001722:	2c00      	cmp	r4, #0
 8001724:	d0f6      	beq.n	8001714 <__lesf2+0x58>
 8001726:	e7f8      	b.n	800171a <__lesf2+0x5e>
 8001728:	428b      	cmp	r3, r1
 800172a:	d1f6      	bne.n	800171a <__lesf2+0x5e>
 800172c:	4282      	cmp	r2, r0
 800172e:	dcf4      	bgt.n	800171a <__lesf2+0x5e>
 8001730:	dbe6      	blt.n	8001700 <__lesf2+0x44>
 8001732:	42ac      	cmp	r4, r5
 8001734:	d8f1      	bhi.n	800171a <__lesf2+0x5e>
 8001736:	2000      	movs	r0, #0
 8001738:	42ac      	cmp	r4, r5
 800173a:	d2eb      	bcs.n	8001714 <__lesf2+0x58>
 800173c:	e7e0      	b.n	8001700 <__lesf2+0x44>
 800173e:	2000      	movs	r0, #0
 8001740:	428b      	cmp	r3, r1
 8001742:	d1ea      	bne.n	800171a <__lesf2+0x5e>
 8001744:	e7e6      	b.n	8001714 <__lesf2+0x58>
 8001746:	428b      	cmp	r3, r1
 8001748:	d1e7      	bne.n	800171a <__lesf2+0x5e>
 800174a:	e7f2      	b.n	8001732 <__lesf2+0x76>

0800174c <HAL_TIM_IC_CaptureCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800174c:	b5b0      	push	{r4, r5, r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e1b      	ldrb	r3, [r3, #24]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d146      	bne.n	80017ea <HAL_TIM_IC_CaptureCallback+0x9e>
		uint32_t period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2100      	movs	r1, #0
 8001760:	0018      	movs	r0, r3
 8001762:	f001 fdab 	bl	80032bc <HAL_TIM_ReadCapturedValue>
 8001766:	0003      	movs	r3, r0
 8001768:	60fb      	str	r3, [r7, #12]
		uint32_t hight_time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2104      	movs	r1, #4
 800176e:	0018      	movs	r0, r3
 8001770:	f001 fda4 	bl	80032bc <HAL_TIM_ReadCapturedValue>
 8001774:	0003      	movs	r3, r0
 8001776:	60bb      	str	r3, [r7, #8]

		float duty = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
		float freq = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]

		if(period != 0){
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d025      	beq.n	80017d2 <HAL_TIM_IC_CaptureCallback+0x86>
			duty = (hight_time * 100.0) / period;
 8001786:	68b8      	ldr	r0, [r7, #8]
 8001788:	f7ff fe2a 	bl	80013e0 <__aeabi_ui2d>
 800178c:	2200      	movs	r2, #0
 800178e:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001790:	f7ff fb40 	bl	8000e14 <__aeabi_dmul>
 8001794:	0002      	movs	r2, r0
 8001796:	000b      	movs	r3, r1
 8001798:	0014      	movs	r4, r2
 800179a:	001d      	movs	r5, r3
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff fe1f 	bl	80013e0 <__aeabi_ui2d>
 80017a2:	0002      	movs	r2, r0
 80017a4:	000b      	movs	r3, r1
 80017a6:	0020      	movs	r0, r4
 80017a8:	0029      	movs	r1, r5
 80017aa:	f7ff f81b 	bl	80007e4 <__aeabi_ddiv>
 80017ae:	0002      	movs	r2, r0
 80017b0:	000b      	movs	r3, r1
 80017b2:	0010      	movs	r0, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	f7ff fe37 	bl	8001428 <__aeabi_d2f>
 80017ba:	1c03      	adds	r3, r0, #0
 80017bc:	617b      	str	r3, [r7, #20]
			freq = TIMER_CLOCK / period;
 80017be:	68f9      	ldr	r1, [r7, #12]
 80017c0:	480d      	ldr	r0, [pc, #52]	@ (80017f8 <HAL_TIM_IC_CaptureCallback+0xac>)
 80017c2:	f7fe fca1 	bl	8000108 <__udivsi3>
 80017c6:	0003      	movs	r3, r0
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7fe ffc5 	bl	8000758 <__aeabi_ui2f>
 80017ce:	1c03      	adds	r3, r0, #0
 80017d0:	613b      	str	r3, [r7, #16]
		}

		DUTY_CICLE = duty;
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7fe fd24 	bl	8000220 <__aeabi_f2uiz>
 80017d8:	0002      	movs	r2, r0
 80017da:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <HAL_TIM_IC_CaptureCallback+0xb0>)
 80017dc:	601a      	str	r2, [r3, #0]
		FREQUENCY  = freq;
 80017de:	6938      	ldr	r0, [r7, #16]
 80017e0:	f7fe fd1e 	bl	8000220 <__aeabi_f2uiz>
 80017e4:	0002      	movs	r2, r0
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80017e8:	601a      	str	r2, [r3, #0]
	}
}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b006      	add	sp, #24
 80017f0:	bdb0      	pop	{r4, r5, r7, pc}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	40590000 	.word	0x40590000
 80017f8:	000f4240 	.word	0x000f4240
 80017fc:	20000068 	.word	0x20000068
 8001800:	2000006c 	.word	0x2000006c

08001804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001808:	f000 f9c4 	bl	8001b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180c:	f000 f812 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001810:	f000 f8f0 	bl	80019f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001814:	f000 f85e 	bl	80018d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001818:	4b05      	ldr	r3, [pc, #20]	@ (8001830 <main+0x2c>)
 800181a:	2100      	movs	r1, #0
 800181c:	0018      	movs	r0, r3
 800181e:	f001 facf 	bl	8002dc0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001822:	4b03      	ldr	r3, [pc, #12]	@ (8001830 <main+0x2c>)
 8001824:	2104      	movs	r1, #4
 8001826:	0018      	movs	r0, r3
 8001828:	f001 fa4a 	bl	8002cc0 <HAL_TIM_IC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800182c:	46c0      	nop			@ (mov r8, r8)
 800182e:	e7fd      	b.n	800182c <main+0x28>
 8001830:	20000028 	.word	0x20000028

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b095      	sub	sp, #84	@ 0x54
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	2418      	movs	r4, #24
 800183c:	193b      	adds	r3, r7, r4
 800183e:	0018      	movs	r0, r3
 8001840:	2338      	movs	r3, #56	@ 0x38
 8001842:	001a      	movs	r2, r3
 8001844:	2100      	movs	r1, #0
 8001846:	f002 f893 	bl	8003970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	0018      	movs	r0, r3
 800184e:	2314      	movs	r3, #20
 8001850:	001a      	movs	r2, r3
 8001852:	2100      	movs	r1, #0
 8001854:	f002 f88c 	bl	8003970 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001858:	4b1c      	ldr	r3, [pc, #112]	@ (80018cc <SystemClock_Config+0x98>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a1c      	ldr	r2, [pc, #112]	@ (80018d0 <SystemClock_Config+0x9c>)
 800185e:	401a      	ands	r2, r3
 8001860:	4b1a      	ldr	r3, [pc, #104]	@ (80018cc <SystemClock_Config+0x98>)
 8001862:	2180      	movs	r1, #128	@ 0x80
 8001864:	0109      	lsls	r1, r1, #4
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800186a:	0021      	movs	r1, r4
 800186c:	187b      	adds	r3, r7, r1
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2201      	movs	r2, #1
 8001876:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2210      	movs	r2, #16
 800187c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800187e:	187b      	adds	r3, r7, r1
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001884:	187b      	adds	r3, r7, r1
 8001886:	0018      	movs	r0, r3
 8001888:	f000 fc48 	bl	800211c <HAL_RCC_OscConfig>
 800188c:	1e03      	subs	r3, r0, #0
 800188e:	d001      	beq.n	8001894 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001890:	f000 f8c6 	bl	8001a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	220f      	movs	r2, #15
 8001898:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800189a:	1d3b      	adds	r3, r7, #4
 800189c:	2201      	movs	r2, #1
 800189e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2280      	movs	r2, #128	@ 0x80
 80018a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2100      	movs	r1, #0
 80018b6:	0018      	movs	r0, r3
 80018b8:	f000 fff4 	bl	80028a4 <HAL_RCC_ClockConfig>
 80018bc:	1e03      	subs	r3, r0, #0
 80018be:	d001      	beq.n	80018c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80018c0:	f000 f8ae 	bl	8001a20 <Error_Handler>
  }
}
 80018c4:	46c0      	nop			@ (mov r8, r8)
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b015      	add	sp, #84	@ 0x54
 80018ca:	bd90      	pop	{r4, r7, pc}
 80018cc:	40007000 	.word	0x40007000
 80018d0:	ffffe7ff 	.word	0xffffe7ff

080018d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	@ 0x30
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018da:	231c      	movs	r3, #28
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	0018      	movs	r0, r3
 80018e0:	2314      	movs	r3, #20
 80018e2:	001a      	movs	r2, r3
 80018e4:	2100      	movs	r1, #0
 80018e6:	f002 f843 	bl	8003970 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018ea:	230c      	movs	r3, #12
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	0018      	movs	r0, r3
 80018f0:	2310      	movs	r3, #16
 80018f2:	001a      	movs	r2, r3
 80018f4:	2100      	movs	r1, #0
 80018f6:	f002 f83b 	bl	8003970 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	0018      	movs	r0, r3
 80018fe:	2308      	movs	r3, #8
 8001900:	001a      	movs	r2, r3
 8001902:	2100      	movs	r1, #0
 8001904:	f002 f834 	bl	8003970 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001908:	4b38      	ldr	r3, [pc, #224]	@ (80019ec <MX_TIM2_Init+0x118>)
 800190a:	2280      	movs	r2, #128	@ 0x80
 800190c:	05d2      	lsls	r2, r2, #23
 800190e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8001910:	4b36      	ldr	r3, [pc, #216]	@ (80019ec <MX_TIM2_Init+0x118>)
 8001912:	2207      	movs	r2, #7
 8001914:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b35      	ldr	r3, [pc, #212]	@ (80019ec <MX_TIM2_Init+0x118>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800191c:	4b33      	ldr	r3, [pc, #204]	@ (80019ec <MX_TIM2_Init+0x118>)
 800191e:	4a34      	ldr	r2, [pc, #208]	@ (80019f0 <MX_TIM2_Init+0x11c>)
 8001920:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b32      	ldr	r3, [pc, #200]	@ (80019ec <MX_TIM2_Init+0x118>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001928:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <MX_TIM2_Init+0x118>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800192e:	4b2f      	ldr	r3, [pc, #188]	@ (80019ec <MX_TIM2_Init+0x118>)
 8001930:	0018      	movs	r0, r3
 8001932:	f001 f985 	bl	8002c40 <HAL_TIM_IC_Init>
 8001936:	1e03      	subs	r3, r0, #0
 8001938:	d001      	beq.n	800193e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800193a:	f000 f871 	bl	8001a20 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800193e:	211c      	movs	r1, #28
 8001940:	187b      	adds	r3, r7, r1
 8001942:	2204      	movs	r2, #4
 8001944:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2250      	movs	r2, #80	@ 0x50
 800194a:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800195e:	187a      	adds	r2, r7, r1
 8001960:	4b22      	ldr	r3, [pc, #136]	@ (80019ec <MX_TIM2_Init+0x118>)
 8001962:	0011      	movs	r1, r2
 8001964:	0018      	movs	r0, r3
 8001966:	f001 fc63 	bl	8003230 <HAL_TIM_SlaveConfigSynchro>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800196e:	f000 f857 	bl	8001a20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001972:	210c      	movs	r1, #12
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800197a:	187b      	adds	r3, r7, r1
 800197c:	2201      	movs	r2, #1
 800197e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001980:	187b      	adds	r3, r7, r1
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8001986:	187b      	adds	r3, r7, r1
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800198c:	1879      	adds	r1, r7, r1
 800198e:	4b17      	ldr	r3, [pc, #92]	@ (80019ec <MX_TIM2_Init+0x118>)
 8001990:	2200      	movs	r2, #0
 8001992:	0018      	movs	r0, r3
 8001994:	f001 fba8 	bl	80030e8 <HAL_TIM_IC_ConfigChannel>
 8001998:	1e03      	subs	r3, r0, #0
 800199a:	d001      	beq.n	80019a0 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800199c:	f000 f840 	bl	8001a20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80019a0:	210c      	movs	r1, #12
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	2202      	movs	r2, #2
 80019a6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	2202      	movs	r2, #2
 80019ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019ae:	1879      	adds	r1, r7, r1
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <MX_TIM2_Init+0x118>)
 80019b2:	2204      	movs	r2, #4
 80019b4:	0018      	movs	r0, r3
 80019b6:	f001 fb97 	bl	80030e8 <HAL_TIM_IC_ConfigChannel>
 80019ba:	1e03      	subs	r3, r0, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80019be:	f000 f82f 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2200      	movs	r2, #0
 80019cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ce:	1d3a      	adds	r2, r7, #4
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <MX_TIM2_Init+0x118>)
 80019d2:	0011      	movs	r1, r2
 80019d4:	0018      	movs	r0, r3
 80019d6:	f001 ff73 	bl	80038c0 <HAL_TIMEx_MasterConfigSynchronization>
 80019da:	1e03      	subs	r3, r0, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 80019de:	f000 f81f 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b00c      	add	sp, #48	@ 0x30
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	20000028 	.word	0x20000028
 80019f0:	0000ffff 	.word	0x0000ffff

080019f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <MX_GPIO_Init+0x28>)
 80019fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019fe:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <MX_GPIO_Init+0x28>)
 8001a00:	2101      	movs	r1, #1
 8001a02:	430a      	orrs	r2, r1
 8001a04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a06:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <MX_GPIO_Init+0x28>)
 8001a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b002      	add	sp, #8
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	40021000 	.word	0x40021000

08001a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a24:	b672      	cpsid	i
}
 8001a26:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a28:	46c0      	nop			@ (mov r8, r8)
 8001a2a:	e7fd      	b.n	8001a28 <Error_Handler+0x8>

08001a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a30:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <HAL_MspInit+0x24>)
 8001a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_MspInit+0x24>)
 8001a36:	2101      	movs	r1, #1
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <HAL_MspInit+0x24>)
 8001a3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a40:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <HAL_MspInit+0x24>)
 8001a42:	2180      	movs	r1, #128	@ 0x80
 8001a44:	0549      	lsls	r1, r1, #21
 8001a46:	430a      	orrs	r2, r1
 8001a48:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	46c0      	nop			@ (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000

08001a54 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b089      	sub	sp, #36	@ 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	240c      	movs	r4, #12
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	0018      	movs	r0, r3
 8001a62:	2314      	movs	r3, #20
 8001a64:	001a      	movs	r2, r3
 8001a66:	2100      	movs	r1, #0
 8001a68:	f001 ff82 	bl	8003970 <memset>
  if(htim_ic->Instance==TIM2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	@ 0x80
 8001a72:	05db      	lsls	r3, r3, #23
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d130      	bne.n	8001ada <HAL_TIM_IC_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <HAL_TIM_IC_MspInit+0x90>)
 8001a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ae4 <HAL_TIM_IC_MspInit+0x90>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	430a      	orrs	r2, r1
 8001a82:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b17      	ldr	r3, [pc, #92]	@ (8001ae4 <HAL_TIM_IC_MspInit+0x90>)
 8001a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <HAL_TIM_IC_MspInit+0x90>)
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a90:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <HAL_TIM_IC_MspInit+0x90>)
 8001a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a94:	2201      	movs	r2, #1
 8001a96:	4013      	ands	r3, r2
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a9c:	0021      	movs	r1, r4
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	2202      	movs	r2, #2
 8001aba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	187a      	adds	r2, r7, r1
 8001abe:	23a0      	movs	r3, #160	@ 0xa0
 8001ac0:	05db      	lsls	r3, r3, #23
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f000 f9b3 	bl	8001e30 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	200f      	movs	r0, #15
 8001ad0:	f000 f97c 	bl	8001dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ad4:	200f      	movs	r0, #15
 8001ad6:	f000 f98e 	bl	8001df6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b009      	add	sp, #36	@ 0x24
 8001ae0:	bd90      	pop	{r4, r7, pc}
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aec:	46c0      	nop			@ (mov r8, r8)
 8001aee:	e7fd      	b.n	8001aec <NMI_Handler+0x4>

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af4:	46c0      	nop			@ (mov r8, r8)
 8001af6:	e7fd      	b.n	8001af4 <HardFault_Handler+0x4>

08001af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001afc:	46c0      	nop			@ (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 f894 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	46c0      	nop			@ (mov r8, r8)
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b20:	4b03      	ldr	r3, [pc, #12]	@ (8001b30 <TIM2_IRQHandler+0x14>)
 8001b22:	0018      	movs	r0, r3
 8001b24:	f001 fa14 	bl	8002f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b28:	46c0      	nop			@ (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	20000028 	.word	0x20000028

08001b34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b38:	46c0      	nop			@ (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001b40:	480d      	ldr	r0, [pc, #52]	@ (8001b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b44:	f7ff fff6 	bl	8001b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b48:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b4a:	490d      	ldr	r1, [pc, #52]	@ (8001b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <LoopForever+0xe>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b60:	4c0a      	ldr	r4, [pc, #40]	@ (8001b8c <LoopForever+0x16>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f001 ff07 	bl	8003980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b72:	f7ff fe47 	bl	8001804 <main>

08001b76 <LoopForever>:

LoopForever:
    b LoopForever
 8001b76:	e7fe      	b.n	8001b76 <LoopForever>
  ldr   r0, =_estack
 8001b78:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b84:	08003a44 	.word	0x08003a44
  ldr r2, =_sbss
 8001b88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b8c:	20000074 	.word	0x20000074

08001b90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC1_COMP_IRQHandler>
	...

08001b94 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <HAL_Init+0x3c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <HAL_Init+0x3c>)
 8001ba6:	2140      	movs	r1, #64	@ 0x40
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bac:	2000      	movs	r0, #0
 8001bae:	f000 f811 	bl	8001bd4 <HAL_InitTick>
 8001bb2:	1e03      	subs	r3, r0, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e001      	b.n	8001bc2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bbe:	f7ff ff35 	bl	8001a2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bc2:	1dfb      	adds	r3, r7, #7
 8001bc4:	781b      	ldrb	r3, [r3, #0]
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			@ (mov r8, r8)
 8001bd0:	40022000 	.word	0x40022000

08001bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bdc:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <HAL_InitTick+0x5c>)
 8001bde:	681c      	ldr	r4, [r3, #0]
 8001be0:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <HAL_InitTick+0x60>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	0019      	movs	r1, r3
 8001be6:	23fa      	movs	r3, #250	@ 0xfa
 8001be8:	0098      	lsls	r0, r3, #2
 8001bea:	f7fe fa8d 	bl	8000108 <__udivsi3>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	0020      	movs	r0, r4
 8001bf4:	f7fe fa88 	bl	8000108 <__udivsi3>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f000 f90b 	bl	8001e16 <HAL_SYSTICK_Config>
 8001c00:	1e03      	subs	r3, r0, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e00f      	b.n	8001c28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d80b      	bhi.n	8001c26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	2301      	movs	r3, #1
 8001c12:	425b      	negs	r3, r3
 8001c14:	2200      	movs	r2, #0
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 f8d8 	bl	8001dcc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <HAL_InitTick+0x64>)
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e000      	b.n	8001c28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b003      	add	sp, #12
 8001c2e:	bd90      	pop	{r4, r7, pc}
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000008 	.word	0x20000008
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_IncTick+0x1c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	001a      	movs	r2, r3
 8001c46:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_IncTick+0x20>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	18d2      	adds	r2, r2, r3
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_IncTick+0x20>)
 8001c4e:	601a      	str	r2, [r3, #0]
}
 8001c50:	46c0      	nop			@ (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	20000070 	.word	0x20000070

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b02      	ldr	r3, [pc, #8]	@ (8001c70 <HAL_GetTick+0x10>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	20000070 	.word	0x20000070

08001c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	1dfb      	adds	r3, r7, #7
 8001c7e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	1dfb      	adds	r3, r7, #7
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c86:	d809      	bhi.n	8001c9c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c88:	1dfb      	adds	r3, r7, #7
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	231f      	movs	r3, #31
 8001c90:	401a      	ands	r2, r3
 8001c92:	4b04      	ldr	r3, [pc, #16]	@ (8001ca4 <__NVIC_EnableIRQ+0x30>)
 8001c94:	2101      	movs	r1, #1
 8001c96:	4091      	lsls	r1, r2
 8001c98:	000a      	movs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]
  }
}
 8001c9c:	46c0      	nop			@ (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b002      	add	sp, #8
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	e000e100 	.word	0xe000e100

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	0002      	movs	r2, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	1dfb      	adds	r3, r7, #7
 8001cb4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cbc:	d828      	bhi.n	8001d10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8001d7c <__NVIC_SetPriority+0xd4>)
 8001cc0:	1dfb      	adds	r3, r7, #7
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	33c0      	adds	r3, #192	@ 0xc0
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	589b      	ldr	r3, [r3, r2]
 8001cce:	1dfa      	adds	r2, r7, #7
 8001cd0:	7812      	ldrb	r2, [r2, #0]
 8001cd2:	0011      	movs	r1, r2
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	400a      	ands	r2, r1
 8001cd8:	00d2      	lsls	r2, r2, #3
 8001cda:	21ff      	movs	r1, #255	@ 0xff
 8001cdc:	4091      	lsls	r1, r2
 8001cde:	000a      	movs	r2, r1
 8001ce0:	43d2      	mvns	r2, r2
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	22ff      	movs	r2, #255	@ 0xff
 8001cec:	401a      	ands	r2, r3
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	4003      	ands	r3, r0
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cfc:	481f      	ldr	r0, [pc, #124]	@ (8001d7c <__NVIC_SetPriority+0xd4>)
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b25b      	sxtb	r3, r3
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	430a      	orrs	r2, r1
 8001d08:	33c0      	adds	r3, #192	@ 0xc0
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d0e:	e031      	b.n	8001d74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d10:	4a1b      	ldr	r2, [pc, #108]	@ (8001d80 <__NVIC_SetPriority+0xd8>)
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	0019      	movs	r1, r3
 8001d18:	230f      	movs	r3, #15
 8001d1a:	400b      	ands	r3, r1
 8001d1c:	3b08      	subs	r3, #8
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3306      	adds	r3, #6
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	18d3      	adds	r3, r2, r3
 8001d26:	3304      	adds	r3, #4
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	1dfa      	adds	r2, r7, #7
 8001d2c:	7812      	ldrb	r2, [r2, #0]
 8001d2e:	0011      	movs	r1, r2
 8001d30:	2203      	movs	r2, #3
 8001d32:	400a      	ands	r2, r1
 8001d34:	00d2      	lsls	r2, r2, #3
 8001d36:	21ff      	movs	r1, #255	@ 0xff
 8001d38:	4091      	lsls	r1, r2
 8001d3a:	000a      	movs	r2, r1
 8001d3c:	43d2      	mvns	r2, r2
 8001d3e:	401a      	ands	r2, r3
 8001d40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	019b      	lsls	r3, r3, #6
 8001d46:	22ff      	movs	r2, #255	@ 0xff
 8001d48:	401a      	ands	r2, r3
 8001d4a:	1dfb      	adds	r3, r7, #7
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	0018      	movs	r0, r3
 8001d50:	2303      	movs	r3, #3
 8001d52:	4003      	ands	r3, r0
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d58:	4809      	ldr	r0, [pc, #36]	@ (8001d80 <__NVIC_SetPriority+0xd8>)
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	001c      	movs	r4, r3
 8001d60:	230f      	movs	r3, #15
 8001d62:	4023      	ands	r3, r4
 8001d64:	3b08      	subs	r3, #8
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	3306      	adds	r3, #6
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	18c3      	adds	r3, r0, r3
 8001d70:	3304      	adds	r3, #4
 8001d72:	601a      	str	r2, [r3, #0]
}
 8001d74:	46c0      	nop			@ (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b003      	add	sp, #12
 8001d7a:	bd90      	pop	{r4, r7, pc}
 8001d7c:	e000e100 	.word	0xe000e100
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	1e5a      	subs	r2, r3, #1
 8001d90:	2380      	movs	r3, #128	@ 0x80
 8001d92:	045b      	lsls	r3, r3, #17
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d301      	bcc.n	8001d9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e010      	b.n	8001dbe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc8 <SysTick_Config+0x44>)
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	3a01      	subs	r2, #1
 8001da2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da4:	2301      	movs	r3, #1
 8001da6:	425b      	negs	r3, r3
 8001da8:	2103      	movs	r1, #3
 8001daa:	0018      	movs	r0, r3
 8001dac:	f7ff ff7c 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <SysTick_Config+0x44>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db6:	4b04      	ldr	r3, [pc, #16]	@ (8001dc8 <SysTick_Config+0x44>)
 8001db8:	2207      	movs	r2, #7
 8001dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b002      	add	sp, #8
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	e000e010 	.word	0xe000e010

08001dcc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	187b      	adds	r3, r7, r1
 8001dda:	1c02      	adds	r2, r0, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	187b      	adds	r3, r7, r1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b25b      	sxtb	r3, r3
 8001de6:	0011      	movs	r1, r2
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7ff ff5d 	bl	8001ca8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001dee:	46c0      	nop			@ (mov r8, r8)
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b004      	add	sp, #16
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	1dfb      	adds	r3, r7, #7
 8001e00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e02:	1dfb      	adds	r3, r7, #7
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	b25b      	sxtb	r3, r3
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f7ff ff33 	bl	8001c74 <__NVIC_EnableIRQ>
}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b002      	add	sp, #8
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7ff ffaf 	bl	8001d84 <SysTick_Config>
 8001e26:	0003      	movs	r3, r0
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e46:	e14f      	b.n	80020e8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4091      	lsls	r1, r2
 8001e52:	000a      	movs	r2, r1
 8001e54:	4013      	ands	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d100      	bne.n	8001e60 <HAL_GPIO_Init+0x30>
 8001e5e:	e140      	b.n	80020e2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2203      	movs	r2, #3
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d005      	beq.n	8001e78 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2203      	movs	r2, #3
 8001e72:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d130      	bne.n	8001eda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	409a      	lsls	r2, r3
 8001e86:	0013      	movs	r3, r2
 8001e88:	43da      	mvns	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	0013      	movs	r3, r2
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eae:	2201      	movs	r2, #1
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2203      	movs	r2, #3
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d017      	beq.n	8001f16 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	0013      	movs	r3, r2
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	409a      	lsls	r2, r3
 8001f08:	0013      	movs	r3, r2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d123      	bne.n	8001f6a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	08da      	lsrs	r2, r3, #3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3208      	adds	r2, #8
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	58d3      	ldr	r3, [r2, r3]
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2207      	movs	r2, #7
 8001f34:	4013      	ands	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	220f      	movs	r2, #15
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	0013      	movs	r3, r2
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2107      	movs	r1, #7
 8001f4e:	400b      	ands	r3, r1
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	409a      	lsls	r2, r3
 8001f54:	0013      	movs	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3208      	adds	r2, #8
 8001f64:	0092      	lsls	r2, r2, #2
 8001f66:	6939      	ldr	r1, [r7, #16]
 8001f68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	2203      	movs	r2, #3
 8001f76:	409a      	lsls	r2, r3
 8001f78:	0013      	movs	r3, r2
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2203      	movs	r2, #3
 8001f88:	401a      	ands	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	0013      	movs	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	23c0      	movs	r3, #192	@ 0xc0
 8001fa4:	029b      	lsls	r3, r3, #10
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d100      	bne.n	8001fac <HAL_GPIO_Init+0x17c>
 8001faa:	e09a      	b.n	80020e2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fac:	4b54      	ldr	r3, [pc, #336]	@ (8002100 <HAL_GPIO_Init+0x2d0>)
 8001fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fb0:	4b53      	ldr	r3, [pc, #332]	@ (8002100 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb8:	4a52      	ldr	r2, [pc, #328]	@ (8002104 <HAL_GPIO_Init+0x2d4>)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	589b      	ldr	r3, [r3, r2]
 8001fc4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2203      	movs	r2, #3
 8001fca:	4013      	ands	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	220f      	movs	r2, #15
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	0013      	movs	r3, r2
 8001fd4:	43da      	mvns	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	23a0      	movs	r3, #160	@ 0xa0
 8001fe0:	05db      	lsls	r3, r3, #23
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d019      	beq.n	800201a <HAL_GPIO_Init+0x1ea>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a47      	ldr	r2, [pc, #284]	@ (8002108 <HAL_GPIO_Init+0x2d8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_GPIO_Init+0x1e6>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a46      	ldr	r2, [pc, #280]	@ (800210c <HAL_GPIO_Init+0x2dc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00d      	beq.n	8002012 <HAL_GPIO_Init+0x1e2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a45      	ldr	r2, [pc, #276]	@ (8002110 <HAL_GPIO_Init+0x2e0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d007      	beq.n	800200e <HAL_GPIO_Init+0x1de>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a44      	ldr	r2, [pc, #272]	@ (8002114 <HAL_GPIO_Init+0x2e4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d101      	bne.n	800200a <HAL_GPIO_Init+0x1da>
 8002006:	2305      	movs	r3, #5
 8002008:	e008      	b.n	800201c <HAL_GPIO_Init+0x1ec>
 800200a:	2306      	movs	r3, #6
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x1ec>
 800200e:	2303      	movs	r3, #3
 8002010:	e004      	b.n	800201c <HAL_GPIO_Init+0x1ec>
 8002012:	2302      	movs	r3, #2
 8002014:	e002      	b.n	800201c <HAL_GPIO_Init+0x1ec>
 8002016:	2301      	movs	r3, #1
 8002018:	e000      	b.n	800201c <HAL_GPIO_Init+0x1ec>
 800201a:	2300      	movs	r3, #0
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	2103      	movs	r1, #3
 8002020:	400a      	ands	r2, r1
 8002022:	0092      	lsls	r2, r2, #2
 8002024:	4093      	lsls	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800202c:	4935      	ldr	r1, [pc, #212]	@ (8002104 <HAL_GPIO_Init+0x2d4>)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	3302      	adds	r3, #2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203a:	4b37      	ldr	r3, [pc, #220]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	43da      	mvns	r2, r3
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4013      	ands	r3, r2
 8002048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	2380      	movs	r3, #128	@ 0x80
 8002050:	035b      	lsls	r3, r3, #13
 8002052:	4013      	ands	r3, r2
 8002054:	d003      	beq.n	800205e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4313      	orrs	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800205e:	4b2e      	ldr	r3, [pc, #184]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002064:	4b2c      	ldr	r3, [pc, #176]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	43da      	mvns	r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	2380      	movs	r3, #128	@ 0x80
 800207a:	039b      	lsls	r3, r3, #14
 800207c:	4013      	ands	r3, r2
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002088:	4b23      	ldr	r3, [pc, #140]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800208e:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43da      	mvns	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	2380      	movs	r3, #128	@ 0x80
 80020a4:	029b      	lsls	r3, r3, #10
 80020a6:	4013      	ands	r3, r2
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020b2:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b8:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	43da      	mvns	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4013      	ands	r3, r2
 80020d2:	d003      	beq.n	80020dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4313      	orrs	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <HAL_GPIO_Init+0x2e8>)
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	40da      	lsrs	r2, r3
 80020f0:	1e13      	subs	r3, r2, #0
 80020f2:	d000      	beq.n	80020f6 <HAL_GPIO_Init+0x2c6>
 80020f4:	e6a8      	b.n	8001e48 <HAL_GPIO_Init+0x18>
  }
}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	46c0      	nop			@ (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b006      	add	sp, #24
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	40010000 	.word	0x40010000
 8002108:	50000400 	.word	0x50000400
 800210c:	50000800 	.word	0x50000800
 8002110:	50000c00 	.word	0x50000c00
 8002114:	50001c00 	.word	0x50001c00
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b5b0      	push	{r4, r5, r7, lr}
 800211e:	b08a      	sub	sp, #40	@ 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	f000 fbaf 	bl	800288e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002130:	4bcf      	ldr	r3, [pc, #828]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	220c      	movs	r2, #12
 8002136:	4013      	ands	r3, r2
 8002138:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800213a:	4bcd      	ldr	r3, [pc, #820]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	025b      	lsls	r3, r3, #9
 8002142:	4013      	ands	r3, r2
 8002144:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2201      	movs	r2, #1
 800214c:	4013      	ands	r3, r2
 800214e:	d100      	bne.n	8002152 <HAL_RCC_OscConfig+0x36>
 8002150:	e07e      	b.n	8002250 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d007      	beq.n	8002168 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d112      	bne.n	8002184 <HAL_RCC_OscConfig+0x68>
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	025b      	lsls	r3, r3, #9
 8002164:	429a      	cmp	r2, r3
 8002166:	d10d      	bne.n	8002184 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	4bc1      	ldr	r3, [pc, #772]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	029b      	lsls	r3, r3, #10
 8002170:	4013      	ands	r3, r2
 8002172:	d100      	bne.n	8002176 <HAL_RCC_OscConfig+0x5a>
 8002174:	e06b      	b.n	800224e <HAL_RCC_OscConfig+0x132>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d167      	bne.n	800224e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	f000 fb85 	bl	800288e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	2380      	movs	r3, #128	@ 0x80
 800218a:	025b      	lsls	r3, r3, #9
 800218c:	429a      	cmp	r2, r3
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_OscConfig+0x84>
 8002190:	4bb7      	ldr	r3, [pc, #732]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4bb6      	ldr	r3, [pc, #728]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002196:	2180      	movs	r1, #128	@ 0x80
 8002198:	0249      	lsls	r1, r1, #9
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e027      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	23a0      	movs	r3, #160	@ 0xa0
 80021a6:	02db      	lsls	r3, r3, #11
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d10e      	bne.n	80021ca <HAL_RCC_OscConfig+0xae>
 80021ac:	4bb0      	ldr	r3, [pc, #704]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4baf      	ldr	r3, [pc, #700]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80021b2:	2180      	movs	r1, #128	@ 0x80
 80021b4:	02c9      	lsls	r1, r1, #11
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	4bad      	ldr	r3, [pc, #692]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4bac      	ldr	r3, [pc, #688]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80021c0:	2180      	movs	r1, #128	@ 0x80
 80021c2:	0249      	lsls	r1, r1, #9
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e012      	b.n	80021f0 <HAL_RCC_OscConfig+0xd4>
 80021ca:	4ba9      	ldr	r3, [pc, #676]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	4ba8      	ldr	r3, [pc, #672]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80021d0:	49a8      	ldr	r1, [pc, #672]	@ (8002474 <HAL_RCC_OscConfig+0x358>)
 80021d2:	400a      	ands	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	4ba6      	ldr	r3, [pc, #664]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	@ 0x80
 80021dc:	025b      	lsls	r3, r3, #9
 80021de:	4013      	ands	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4ba2      	ldr	r3, [pc, #648]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4ba1      	ldr	r3, [pc, #644]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80021ea:	49a3      	ldr	r1, [pc, #652]	@ (8002478 <HAL_RCC_OscConfig+0x35c>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d015      	beq.n	8002224 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fd32 	bl	8001c60 <HAL_GetTick>
 80021fc:	0003      	movs	r3, r0
 80021fe:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002200:	e009      	b.n	8002216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002202:	f7ff fd2d 	bl	8001c60 <HAL_GetTick>
 8002206:	0002      	movs	r2, r0
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b64      	cmp	r3, #100	@ 0x64
 800220e:	d902      	bls.n	8002216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	f000 fb3c 	bl	800288e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002216:	4b96      	ldr	r3, [pc, #600]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	2380      	movs	r3, #128	@ 0x80
 800221c:	029b      	lsls	r3, r3, #10
 800221e:	4013      	ands	r3, r2
 8002220:	d0ef      	beq.n	8002202 <HAL_RCC_OscConfig+0xe6>
 8002222:	e015      	b.n	8002250 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7ff fd1c 	bl	8001c60 <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800222e:	f7ff fd17 	bl	8001c60 <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	@ 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e326      	b.n	800288e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002240:	4b8b      	ldr	r3, [pc, #556]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	029b      	lsls	r3, r3, #10
 8002248:	4013      	ands	r3, r2
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x112>
 800224c:	e000      	b.n	8002250 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2202      	movs	r2, #2
 8002256:	4013      	ands	r3, r2
 8002258:	d100      	bne.n	800225c <HAL_RCC_OscConfig+0x140>
 800225a:	e08b      	b.n	8002374 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	2b04      	cmp	r3, #4
 8002266:	d005      	beq.n	8002274 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	2b0c      	cmp	r3, #12
 800226c:	d13e      	bne.n	80022ec <HAL_RCC_OscConfig+0x1d0>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d13b      	bne.n	80022ec <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002274:	4b7e      	ldr	r3, [pc, #504]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2204      	movs	r2, #4
 800227a:	4013      	ands	r3, r2
 800227c:	d004      	beq.n	8002288 <HAL_RCC_OscConfig+0x16c>
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e302      	b.n	800288e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002288:	4b79      	ldr	r3, [pc, #484]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a7b      	ldr	r2, [pc, #492]	@ (800247c <HAL_RCC_OscConfig+0x360>)
 800228e:	4013      	ands	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	021a      	lsls	r2, r3, #8
 8002298:	4b75      	ldr	r3, [pc, #468]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 800229a:	430a      	orrs	r2, r1
 800229c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800229e:	4b74      	ldr	r3, [pc, #464]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2209      	movs	r2, #9
 80022a4:	4393      	bics	r3, r2
 80022a6:	0019      	movs	r1, r3
 80022a8:	4b71      	ldr	r3, [pc, #452]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022b0:	f000 fc40 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 80022b4:	0001      	movs	r1, r0
 80022b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	220f      	movs	r2, #15
 80022be:	4013      	ands	r3, r2
 80022c0:	4a6f      	ldr	r2, [pc, #444]	@ (8002480 <HAL_RCC_OscConfig+0x364>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	000a      	movs	r2, r1
 80022c6:	40da      	lsrs	r2, r3
 80022c8:	4b6e      	ldr	r3, [pc, #440]	@ (8002484 <HAL_RCC_OscConfig+0x368>)
 80022ca:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80022cc:	4b6e      	ldr	r3, [pc, #440]	@ (8002488 <HAL_RCC_OscConfig+0x36c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2513      	movs	r5, #19
 80022d2:	197c      	adds	r4, r7, r5
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7ff fc7d 	bl	8001bd4 <HAL_InitTick>
 80022da:	0003      	movs	r3, r0
 80022dc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80022de:	197b      	adds	r3, r7, r5
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d046      	beq.n	8002374 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80022e6:	197b      	adds	r3, r7, r5
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	e2d0      	b.n	800288e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d027      	beq.n	8002342 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80022f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2209      	movs	r2, #9
 80022f8:	4393      	bics	r3, r2
 80022fa:	0019      	movs	r1, r3
 80022fc:	4b5c      	ldr	r3, [pc, #368]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff fcac 	bl	8001c60 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230e:	f7ff fca7 	bl	8001c60 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e2b6      	b.n	800288e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002320:	4b53      	ldr	r3, [pc, #332]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2204      	movs	r2, #4
 8002326:	4013      	ands	r3, r2
 8002328:	d0f1      	beq.n	800230e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b51      	ldr	r3, [pc, #324]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a53      	ldr	r2, [pc, #332]	@ (800247c <HAL_RCC_OscConfig+0x360>)
 8002330:	4013      	ands	r3, r2
 8002332:	0019      	movs	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	021a      	lsls	r2, r3, #8
 800233a:	4b4d      	ldr	r3, [pc, #308]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 800233c:	430a      	orrs	r2, r1
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	e018      	b.n	8002374 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002342:	4b4b      	ldr	r3, [pc, #300]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	4b4a      	ldr	r3, [pc, #296]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002348:	2101      	movs	r1, #1
 800234a:	438a      	bics	r2, r1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7ff fc87 	bl	8001c60 <HAL_GetTick>
 8002352:	0003      	movs	r3, r0
 8002354:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002358:	f7ff fc82 	bl	8001c60 <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e291      	b.n	800288e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800236a:	4b41      	ldr	r3, [pc, #260]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2204      	movs	r2, #4
 8002370:	4013      	ands	r3, r2
 8002372:	d1f1      	bne.n	8002358 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2210      	movs	r2, #16
 800237a:	4013      	ands	r3, r2
 800237c:	d100      	bne.n	8002380 <HAL_RCC_OscConfig+0x264>
 800237e:	e0a1      	b.n	80024c4 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d140      	bne.n	8002408 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002386:	4b3a      	ldr	r3, [pc, #232]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	2380      	movs	r3, #128	@ 0x80
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4013      	ands	r3, r2
 8002390:	d005      	beq.n	800239e <HAL_RCC_OscConfig+0x282>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e277      	b.n	800288e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239e:	4b34      	ldr	r3, [pc, #208]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4a3a      	ldr	r2, [pc, #232]	@ (800248c <HAL_RCC_OscConfig+0x370>)
 80023a4:	4013      	ands	r3, r2
 80023a6:	0019      	movs	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023ac:	4b30      	ldr	r3, [pc, #192]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	0a19      	lsrs	r1, r3, #8
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	061a      	lsls	r2, r3, #24
 80023c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ca:	0b5b      	lsrs	r3, r3, #13
 80023cc:	3301      	adds	r3, #1
 80023ce:	2280      	movs	r2, #128	@ 0x80
 80023d0:	0212      	lsls	r2, r2, #8
 80023d2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80023d4:	4b26      	ldr	r3, [pc, #152]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	210f      	movs	r1, #15
 80023dc:	400b      	ands	r3, r1
 80023de:	4928      	ldr	r1, [pc, #160]	@ (8002480 <HAL_RCC_OscConfig+0x364>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80023e4:	4b27      	ldr	r3, [pc, #156]	@ (8002484 <HAL_RCC_OscConfig+0x368>)
 80023e6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80023e8:	4b27      	ldr	r3, [pc, #156]	@ (8002488 <HAL_RCC_OscConfig+0x36c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2513      	movs	r5, #19
 80023ee:	197c      	adds	r4, r7, r5
 80023f0:	0018      	movs	r0, r3
 80023f2:	f7ff fbef 	bl	8001bd4 <HAL_InitTick>
 80023f6:	0003      	movs	r3, r0
 80023f8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80023fa:	197b      	adds	r3, r7, r5
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d060      	beq.n	80024c4 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002402:	197b      	adds	r3, r7, r5
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	e242      	b.n	800288e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d03f      	beq.n	8002490 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002410:	4b17      	ldr	r3, [pc, #92]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b16      	ldr	r3, [pc, #88]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002416:	2180      	movs	r1, #128	@ 0x80
 8002418:	0049      	lsls	r1, r1, #1
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241e:	f7ff fc1f 	bl	8001c60 <HAL_GetTick>
 8002422:	0003      	movs	r3, r0
 8002424:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002428:	f7ff fc1a 	bl	8001c60 <HAL_GetTick>
 800242c:	0002      	movs	r2, r0
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e229      	b.n	800288e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800243a:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	@ 0x80
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4013      	ands	r3, r2
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002446:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4a10      	ldr	r2, [pc, #64]	@ (800248c <HAL_RCC_OscConfig+0x370>)
 800244c:	4013      	ands	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002454:	4b06      	ldr	r3, [pc, #24]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 8002456:	430a      	orrs	r2, r1
 8002458:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800245a:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	0a19      	lsrs	r1, r3, #8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	061a      	lsls	r2, r3, #24
 8002468:	4b01      	ldr	r3, [pc, #4]	@ (8002470 <HAL_RCC_OscConfig+0x354>)
 800246a:	430a      	orrs	r2, r1
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	e029      	b.n	80024c4 <HAL_RCC_OscConfig+0x3a8>
 8002470:	40021000 	.word	0x40021000
 8002474:	fffeffff 	.word	0xfffeffff
 8002478:	fffbffff 	.word	0xfffbffff
 800247c:	ffffe0ff 	.word	0xffffe0ff
 8002480:	08003a20 	.word	0x08003a20
 8002484:	20000000 	.word	0x20000000
 8002488:	20000004 	.word	0x20000004
 800248c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002490:	4bbd      	ldr	r3, [pc, #756]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4bbc      	ldr	r3, [pc, #752]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002496:	49bd      	ldr	r1, [pc, #756]	@ (800278c <HAL_RCC_OscConfig+0x670>)
 8002498:	400a      	ands	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff fbe0 	bl	8001c60 <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024a6:	f7ff fbdb 	bl	8001c60 <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1ea      	b.n	800288e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80024b8:	4bb3      	ldr	r3, [pc, #716]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	2380      	movs	r3, #128	@ 0x80
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4013      	ands	r3, r2
 80024c2:	d1f0      	bne.n	80024a6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2208      	movs	r2, #8
 80024ca:	4013      	ands	r3, r2
 80024cc:	d036      	beq.n	800253c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d019      	beq.n	800250a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4bac      	ldr	r3, [pc, #688]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80024d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024da:	4bab      	ldr	r3, [pc, #684]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80024dc:	2101      	movs	r1, #1
 80024de:	430a      	orrs	r2, r1
 80024e0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e2:	f7ff fbbd 	bl	8001c60 <HAL_GetTick>
 80024e6:	0003      	movs	r3, r0
 80024e8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ec:	f7ff fbb8 	bl	8001c60 <HAL_GetTick>
 80024f0:	0002      	movs	r2, r0
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e1c7      	b.n	800288e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024fe:	4ba2      	ldr	r3, [pc, #648]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002502:	2202      	movs	r2, #2
 8002504:	4013      	ands	r3, r2
 8002506:	d0f1      	beq.n	80024ec <HAL_RCC_OscConfig+0x3d0>
 8002508:	e018      	b.n	800253c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250a:	4b9f      	ldr	r3, [pc, #636]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 800250c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800250e:	4b9e      	ldr	r3, [pc, #632]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002510:	2101      	movs	r1, #1
 8002512:	438a      	bics	r2, r1
 8002514:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002516:	f7ff fba3 	bl	8001c60 <HAL_GetTick>
 800251a:	0003      	movs	r3, r0
 800251c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002520:	f7ff fb9e 	bl	8001c60 <HAL_GetTick>
 8002524:	0002      	movs	r2, r0
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1ad      	b.n	800288e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002532:	4b95      	ldr	r3, [pc, #596]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002536:	2202      	movs	r2, #2
 8002538:	4013      	ands	r3, r2
 800253a:	d1f1      	bne.n	8002520 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2204      	movs	r2, #4
 8002542:	4013      	ands	r3, r2
 8002544:	d100      	bne.n	8002548 <HAL_RCC_OscConfig+0x42c>
 8002546:	e0ae      	b.n	80026a6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002548:	2027      	movs	r0, #39	@ 0x27
 800254a:	183b      	adds	r3, r7, r0
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002550:	4b8d      	ldr	r3, [pc, #564]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	055b      	lsls	r3, r3, #21
 8002558:	4013      	ands	r3, r2
 800255a:	d109      	bne.n	8002570 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255c:	4b8a      	ldr	r3, [pc, #552]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 800255e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002560:	4b89      	ldr	r3, [pc, #548]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002562:	2180      	movs	r1, #128	@ 0x80
 8002564:	0549      	lsls	r1, r1, #21
 8002566:	430a      	orrs	r2, r1
 8002568:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800256a:	183b      	adds	r3, r7, r0
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	4b87      	ldr	r3, [pc, #540]	@ (8002790 <HAL_RCC_OscConfig+0x674>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2380      	movs	r3, #128	@ 0x80
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4013      	ands	r3, r2
 800257a:	d11a      	bne.n	80025b2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257c:	4b84      	ldr	r3, [pc, #528]	@ (8002790 <HAL_RCC_OscConfig+0x674>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b83      	ldr	r3, [pc, #524]	@ (8002790 <HAL_RCC_OscConfig+0x674>)
 8002582:	2180      	movs	r1, #128	@ 0x80
 8002584:	0049      	lsls	r1, r1, #1
 8002586:	430a      	orrs	r2, r1
 8002588:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258a:	f7ff fb69 	bl	8001c60 <HAL_GetTick>
 800258e:	0003      	movs	r3, r0
 8002590:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002594:	f7ff fb64 	bl	8001c60 <HAL_GetTick>
 8002598:	0002      	movs	r2, r0
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e173      	b.n	800288e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002790 <HAL_RCC_OscConfig+0x674>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	2380      	movs	r3, #128	@ 0x80
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4013      	ands	r3, r2
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_OscConfig+0x4b2>
 80025be:	4b72      	ldr	r3, [pc, #456]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80025c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025c2:	4b71      	ldr	r3, [pc, #452]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80025c4:	2180      	movs	r1, #128	@ 0x80
 80025c6:	0049      	lsls	r1, r1, #1
 80025c8:	430a      	orrs	r2, r1
 80025ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80025cc:	e031      	b.n	8002632 <HAL_RCC_OscConfig+0x516>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4d4>
 80025d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80025d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025da:	4b6b      	ldr	r3, [pc, #428]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80025dc:	496b      	ldr	r1, [pc, #428]	@ (800278c <HAL_RCC_OscConfig+0x670>)
 80025de:	400a      	ands	r2, r1
 80025e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80025e2:	4b69      	ldr	r3, [pc, #420]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80025e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025e6:	4b68      	ldr	r3, [pc, #416]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80025e8:	496a      	ldr	r1, [pc, #424]	@ (8002794 <HAL_RCC_OscConfig+0x678>)
 80025ea:	400a      	ands	r2, r1
 80025ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80025ee:	e020      	b.n	8002632 <HAL_RCC_OscConfig+0x516>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	23a0      	movs	r3, #160	@ 0xa0
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d10e      	bne.n	800261a <HAL_RCC_OscConfig+0x4fe>
 80025fc:	4b62      	ldr	r3, [pc, #392]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80025fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002600:	4b61      	ldr	r3, [pc, #388]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002602:	2180      	movs	r1, #128	@ 0x80
 8002604:	00c9      	lsls	r1, r1, #3
 8002606:	430a      	orrs	r2, r1
 8002608:	651a      	str	r2, [r3, #80]	@ 0x50
 800260a:	4b5f      	ldr	r3, [pc, #380]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 800260c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800260e:	4b5e      	ldr	r3, [pc, #376]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002610:	2180      	movs	r1, #128	@ 0x80
 8002612:	0049      	lsls	r1, r1, #1
 8002614:	430a      	orrs	r2, r1
 8002616:	651a      	str	r2, [r3, #80]	@ 0x50
 8002618:	e00b      	b.n	8002632 <HAL_RCC_OscConfig+0x516>
 800261a:	4b5b      	ldr	r3, [pc, #364]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 800261c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800261e:	4b5a      	ldr	r3, [pc, #360]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002620:	495a      	ldr	r1, [pc, #360]	@ (800278c <HAL_RCC_OscConfig+0x670>)
 8002622:	400a      	ands	r2, r1
 8002624:	651a      	str	r2, [r3, #80]	@ 0x50
 8002626:	4b58      	ldr	r3, [pc, #352]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800262a:	4b57      	ldr	r3, [pc, #348]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 800262c:	4959      	ldr	r1, [pc, #356]	@ (8002794 <HAL_RCC_OscConfig+0x678>)
 800262e:	400a      	ands	r2, r1
 8002630:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d015      	beq.n	8002666 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263a:	f7ff fb11 	bl	8001c60 <HAL_GetTick>
 800263e:	0003      	movs	r3, r0
 8002640:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002642:	e009      	b.n	8002658 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7ff fb0c 	bl	8001c60 <HAL_GetTick>
 8002648:	0002      	movs	r2, r0
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	4a52      	ldr	r2, [pc, #328]	@ (8002798 <HAL_RCC_OscConfig+0x67c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e11a      	b.n	800288e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002658:	4b4b      	ldr	r3, [pc, #300]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 800265a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4013      	ands	r3, r2
 8002662:	d0ef      	beq.n	8002644 <HAL_RCC_OscConfig+0x528>
 8002664:	e014      	b.n	8002690 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002666:	f7ff fafb 	bl	8001c60 <HAL_GetTick>
 800266a:	0003      	movs	r3, r0
 800266c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800266e:	e009      	b.n	8002684 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7ff faf6 	bl	8001c60 <HAL_GetTick>
 8002674:	0002      	movs	r2, r0
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	4a47      	ldr	r2, [pc, #284]	@ (8002798 <HAL_RCC_OscConfig+0x67c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e104      	b.n	800288e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002684:	4b40      	ldr	r3, [pc, #256]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002686:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002688:	2380      	movs	r3, #128	@ 0x80
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4013      	ands	r3, r2
 800268e:	d1ef      	bne.n	8002670 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002690:	2327      	movs	r3, #39	@ 0x27
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d105      	bne.n	80026a6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269a:	4b3b      	ldr	r3, [pc, #236]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 800269c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800269e:	4b3a      	ldr	r3, [pc, #232]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80026a0:	493e      	ldr	r1, [pc, #248]	@ (800279c <HAL_RCC_OscConfig+0x680>)
 80026a2:	400a      	ands	r2, r1
 80026a4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2220      	movs	r2, #32
 80026ac:	4013      	ands	r3, r2
 80026ae:	d049      	beq.n	8002744 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d026      	beq.n	8002706 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80026b8:	4b33      	ldr	r3, [pc, #204]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	4b32      	ldr	r3, [pc, #200]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80026be:	2101      	movs	r1, #1
 80026c0:	430a      	orrs	r2, r1
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	4b30      	ldr	r3, [pc, #192]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80026c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80026ca:	2101      	movs	r1, #1
 80026cc:	430a      	orrs	r2, r1
 80026ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80026d0:	4b33      	ldr	r3, [pc, #204]	@ (80027a0 <HAL_RCC_OscConfig+0x684>)
 80026d2:	6a1a      	ldr	r2, [r3, #32]
 80026d4:	4b32      	ldr	r3, [pc, #200]	@ (80027a0 <HAL_RCC_OscConfig+0x684>)
 80026d6:	2180      	movs	r1, #128	@ 0x80
 80026d8:	0189      	lsls	r1, r1, #6
 80026da:	430a      	orrs	r2, r1
 80026dc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7ff fabf 	bl	8001c60 <HAL_GetTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026e8:	f7ff faba 	bl	8001c60 <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e0c9      	b.n	800288e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026fa:	4b23      	ldr	r3, [pc, #140]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2202      	movs	r2, #2
 8002700:	4013      	ands	r3, r2
 8002702:	d0f1      	beq.n	80026e8 <HAL_RCC_OscConfig+0x5cc>
 8002704:	e01e      	b.n	8002744 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002706:	4b20      	ldr	r3, [pc, #128]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	4b1f      	ldr	r3, [pc, #124]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 800270c:	2101      	movs	r1, #1
 800270e:	438a      	bics	r2, r1
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <HAL_RCC_OscConfig+0x684>)
 8002714:	6a1a      	ldr	r2, [r3, #32]
 8002716:	4b22      	ldr	r3, [pc, #136]	@ (80027a0 <HAL_RCC_OscConfig+0x684>)
 8002718:	4922      	ldr	r1, [pc, #136]	@ (80027a4 <HAL_RCC_OscConfig+0x688>)
 800271a:	400a      	ands	r2, r1
 800271c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7ff fa9f 	bl	8001c60 <HAL_GetTick>
 8002722:	0003      	movs	r3, r0
 8002724:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002728:	f7ff fa9a 	bl	8001c60 <HAL_GetTick>
 800272c:	0002      	movs	r2, r0
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e0a9      	b.n	800288e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800273a:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2202      	movs	r2, #2
 8002740:	4013      	ands	r3, r2
 8002742:	d1f1      	bne.n	8002728 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002748:	2b00      	cmp	r3, #0
 800274a:	d100      	bne.n	800274e <HAL_RCC_OscConfig+0x632>
 800274c:	e09e      	b.n	800288c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	2b0c      	cmp	r3, #12
 8002752:	d100      	bne.n	8002756 <HAL_RCC_OscConfig+0x63a>
 8002754:	e077      	b.n	8002846 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	2b02      	cmp	r3, #2
 800275c:	d158      	bne.n	8002810 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275e:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <HAL_RCC_OscConfig+0x66c>)
 8002764:	4910      	ldr	r1, [pc, #64]	@ (80027a8 <HAL_RCC_OscConfig+0x68c>)
 8002766:	400a      	ands	r2, r1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7ff fa79 	bl	8001c60 <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002772:	e01b      	b.n	80027ac <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002774:	f7ff fa74 	bl	8001c60 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d914      	bls.n	80027ac <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e083      	b.n	800288e <HAL_RCC_OscConfig+0x772>
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	40021000 	.word	0x40021000
 800278c:	fffffeff 	.word	0xfffffeff
 8002790:	40007000 	.word	0x40007000
 8002794:	fffffbff 	.word	0xfffffbff
 8002798:	00001388 	.word	0x00001388
 800279c:	efffffff 	.word	0xefffffff
 80027a0:	40010000 	.word	0x40010000
 80027a4:	ffffdfff 	.word	0xffffdfff
 80027a8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002898 <HAL_RCC_OscConfig+0x77c>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	049b      	lsls	r3, r3, #18
 80027b4:	4013      	ands	r3, r2
 80027b6:	d1dd      	bne.n	8002774 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b8:	4b37      	ldr	r3, [pc, #220]	@ (8002898 <HAL_RCC_OscConfig+0x77c>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a37      	ldr	r2, [pc, #220]	@ (800289c <HAL_RCC_OscConfig+0x780>)
 80027be:	4013      	ands	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d0:	431a      	orrs	r2, r3
 80027d2:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <HAL_RCC_OscConfig+0x77c>)
 80027d4:	430a      	orrs	r2, r1
 80027d6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002898 <HAL_RCC_OscConfig+0x77c>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002898 <HAL_RCC_OscConfig+0x77c>)
 80027de:	2180      	movs	r1, #128	@ 0x80
 80027e0:	0449      	lsls	r1, r1, #17
 80027e2:	430a      	orrs	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7ff fa3b 	bl	8001c60 <HAL_GetTick>
 80027ea:	0003      	movs	r3, r0
 80027ec:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7ff fa36 	bl	8001c60 <HAL_GetTick>
 80027f4:	0002      	movs	r2, r0
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e045      	b.n	800288e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002802:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_RCC_OscConfig+0x77c>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	049b      	lsls	r3, r3, #18
 800280a:	4013      	ands	r3, r2
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x6d4>
 800280e:	e03d      	b.n	800288c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002810:	4b21      	ldr	r3, [pc, #132]	@ (8002898 <HAL_RCC_OscConfig+0x77c>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <HAL_RCC_OscConfig+0x77c>)
 8002816:	4922      	ldr	r1, [pc, #136]	@ (80028a0 <HAL_RCC_OscConfig+0x784>)
 8002818:	400a      	ands	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7ff fa20 	bl	8001c60 <HAL_GetTick>
 8002820:	0003      	movs	r3, r0
 8002822:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002826:	f7ff fa1b 	bl	8001c60 <HAL_GetTick>
 800282a:	0002      	movs	r2, r0
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e02a      	b.n	800288e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002838:	4b17      	ldr	r3, [pc, #92]	@ (8002898 <HAL_RCC_OscConfig+0x77c>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	@ 0x80
 800283e:	049b      	lsls	r3, r3, #18
 8002840:	4013      	ands	r3, r2
 8002842:	d1f0      	bne.n	8002826 <HAL_RCC_OscConfig+0x70a>
 8002844:	e022      	b.n	800288c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e01d      	b.n	800288e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002852:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_RCC_OscConfig+0x77c>)
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	025b      	lsls	r3, r3, #9
 800285e:	401a      	ands	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	429a      	cmp	r2, r3
 8002866:	d10f      	bne.n	8002888 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	23f0      	movs	r3, #240	@ 0xf0
 800286c:	039b      	lsls	r3, r3, #14
 800286e:	401a      	ands	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d107      	bne.n	8002888 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	23c0      	movs	r3, #192	@ 0xc0
 800287c:	041b      	lsls	r3, r3, #16
 800287e:	401a      	ands	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	0018      	movs	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	b00a      	add	sp, #40	@ 0x28
 8002894:	bdb0      	pop	{r4, r5, r7, pc}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	40021000 	.word	0x40021000
 800289c:	ff02ffff 	.word	0xff02ffff
 80028a0:	feffffff 	.word	0xfeffffff

080028a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a4:	b5b0      	push	{r4, r5, r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e128      	b.n	8002b0a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028b8:	4b96      	ldr	r3, [pc, #600]	@ (8002b14 <HAL_RCC_ClockConfig+0x270>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2201      	movs	r2, #1
 80028be:	4013      	ands	r3, r2
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d91e      	bls.n	8002904 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b93      	ldr	r3, [pc, #588]	@ (8002b14 <HAL_RCC_ClockConfig+0x270>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2201      	movs	r2, #1
 80028cc:	4393      	bics	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	4b90      	ldr	r3, [pc, #576]	@ (8002b14 <HAL_RCC_ClockConfig+0x270>)
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028d8:	f7ff f9c2 	bl	8001c60 <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e0:	e009      	b.n	80028f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e2:	f7ff f9bd 	bl	8001c60 <HAL_GetTick>
 80028e6:	0002      	movs	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	4a8a      	ldr	r2, [pc, #552]	@ (8002b18 <HAL_RCC_ClockConfig+0x274>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e109      	b.n	8002b0a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b87      	ldr	r3, [pc, #540]	@ (8002b14 <HAL_RCC_ClockConfig+0x270>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2201      	movs	r2, #1
 80028fc:	4013      	ands	r3, r2
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d1ee      	bne.n	80028e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2202      	movs	r2, #2
 800290a:	4013      	ands	r3, r2
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290e:	4b83      	ldr	r3, [pc, #524]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	22f0      	movs	r2, #240	@ 0xf0
 8002914:	4393      	bics	r3, r2
 8002916:	0019      	movs	r1, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	4b7f      	ldr	r3, [pc, #508]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 800291e:	430a      	orrs	r2, r1
 8002920:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2201      	movs	r2, #1
 8002928:	4013      	ands	r3, r2
 800292a:	d100      	bne.n	800292e <HAL_RCC_ClockConfig+0x8a>
 800292c:	e089      	b.n	8002a42 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002936:	4b79      	ldr	r3, [pc, #484]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	2380      	movs	r3, #128	@ 0x80
 800293c:	029b      	lsls	r3, r3, #10
 800293e:	4013      	ands	r3, r2
 8002940:	d120      	bne.n	8002984 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0e1      	b.n	8002b0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800294e:	4b73      	ldr	r3, [pc, #460]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2380      	movs	r3, #128	@ 0x80
 8002954:	049b      	lsls	r3, r3, #18
 8002956:	4013      	ands	r3, r2
 8002958:	d114      	bne.n	8002984 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0d5      	b.n	8002b0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d106      	bne.n	8002974 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002966:	4b6d      	ldr	r3, [pc, #436]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2204      	movs	r2, #4
 800296c:	4013      	ands	r3, r2
 800296e:	d109      	bne.n	8002984 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0ca      	b.n	8002b0a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002974:	4b69      	ldr	r3, [pc, #420]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4013      	ands	r3, r2
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0c2      	b.n	8002b0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002984:	4b65      	ldr	r3, [pc, #404]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	2203      	movs	r2, #3
 800298a:	4393      	bics	r3, r2
 800298c:	0019      	movs	r1, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	4b62      	ldr	r3, [pc, #392]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002998:	f7ff f962 	bl	8001c60 <HAL_GetTick>
 800299c:	0003      	movs	r3, r0
 800299e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d111      	bne.n	80029cc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a8:	e009      	b.n	80029be <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029aa:	f7ff f959 	bl	8001c60 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	4a58      	ldr	r2, [pc, #352]	@ (8002b18 <HAL_RCC_ClockConfig+0x274>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0a5      	b.n	8002b0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029be:	4b57      	ldr	r3, [pc, #348]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	220c      	movs	r2, #12
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d1ef      	bne.n	80029aa <HAL_RCC_ClockConfig+0x106>
 80029ca:	e03a      	b.n	8002a42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d111      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029d4:	e009      	b.n	80029ea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d6:	f7ff f943 	bl	8001c60 <HAL_GetTick>
 80029da:	0002      	movs	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002b18 <HAL_RCC_ClockConfig+0x274>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e08f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ea:	4b4c      	ldr	r3, [pc, #304]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	220c      	movs	r2, #12
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d1ef      	bne.n	80029d6 <HAL_RCC_ClockConfig+0x132>
 80029f6:	e024      	b.n	8002a42 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d11b      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a00:	e009      	b.n	8002a16 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a02:	f7ff f92d 	bl	8001c60 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	4a42      	ldr	r2, [pc, #264]	@ (8002b18 <HAL_RCC_ClockConfig+0x274>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e079      	b.n	8002b0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a16:	4b41      	ldr	r3, [pc, #260]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d1ef      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x15e>
 8002a22:	e00e      	b.n	8002a42 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a24:	f7ff f91c 	bl	8001c60 <HAL_GetTick>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	4a3a      	ldr	r2, [pc, #232]	@ (8002b18 <HAL_RCC_ClockConfig+0x274>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e068      	b.n	8002b0a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a38:	4b38      	ldr	r3, [pc, #224]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	220c      	movs	r2, #12
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a42:	4b34      	ldr	r3, [pc, #208]	@ (8002b14 <HAL_RCC_ClockConfig+0x270>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2201      	movs	r2, #1
 8002a48:	4013      	ands	r3, r2
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d21e      	bcs.n	8002a8e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a50:	4b30      	ldr	r3, [pc, #192]	@ (8002b14 <HAL_RCC_ClockConfig+0x270>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2201      	movs	r2, #1
 8002a56:	4393      	bics	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b14 <HAL_RCC_ClockConfig+0x270>)
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a62:	f7ff f8fd 	bl	8001c60 <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	e009      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6c:	f7ff f8f8 	bl	8001c60 <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	4a28      	ldr	r2, [pc, #160]	@ (8002b18 <HAL_RCC_ClockConfig+0x274>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e044      	b.n	8002b0a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a80:	4b24      	ldr	r3, [pc, #144]	@ (8002b14 <HAL_RCC_ClockConfig+0x270>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2201      	movs	r2, #1
 8002a86:	4013      	ands	r3, r2
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d1ee      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2204      	movs	r2, #4
 8002a94:	4013      	ands	r3, r2
 8002a96:	d009      	beq.n	8002aac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a98:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a20      	ldr	r2, [pc, #128]	@ (8002b20 <HAL_RCC_ClockConfig+0x27c>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2208      	movs	r2, #8
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ab6:	4b19      	ldr	r3, [pc, #100]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	4a1a      	ldr	r2, [pc, #104]	@ (8002b24 <HAL_RCC_ClockConfig+0x280>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	0019      	movs	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	00da      	lsls	r2, r3, #3
 8002ac6:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002acc:	f000 f832 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8002ad0:	0001      	movs	r1, r0
 8002ad2:	4b12      	ldr	r3, [pc, #72]	@ (8002b1c <HAL_RCC_ClockConfig+0x278>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	220f      	movs	r2, #15
 8002ada:	4013      	ands	r3, r2
 8002adc:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <HAL_RCC_ClockConfig+0x284>)
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	000a      	movs	r2, r1
 8002ae2:	40da      	lsrs	r2, r3
 8002ae4:	4b11      	ldr	r3, [pc, #68]	@ (8002b2c <HAL_RCC_ClockConfig+0x288>)
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ae8:	4b11      	ldr	r3, [pc, #68]	@ (8002b30 <HAL_RCC_ClockConfig+0x28c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	250b      	movs	r5, #11
 8002aee:	197c      	adds	r4, r7, r5
 8002af0:	0018      	movs	r0, r3
 8002af2:	f7ff f86f 	bl	8001bd4 <HAL_InitTick>
 8002af6:	0003      	movs	r3, r0
 8002af8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002afa:	197b      	adds	r3, r7, r5
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002b02:	197b      	adds	r3, r7, r5
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	e000      	b.n	8002b0a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b004      	add	sp, #16
 8002b10:	bdb0      	pop	{r4, r5, r7, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	40022000 	.word	0x40022000
 8002b18:	00001388 	.word	0x00001388
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	fffff8ff 	.word	0xfffff8ff
 8002b24:	ffffc7ff 	.word	0xffffc7ff
 8002b28:	08003a20 	.word	0x08003a20
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	20000004 	.word	0x20000004

08002b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	220c      	movs	r2, #12
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d013      	beq.n	8002b72 <HAL_RCC_GetSysClockFreq+0x3e>
 8002b4a:	d85c      	bhi.n	8002c06 <HAL_RCC_GetSysClockFreq+0xd2>
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d002      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0x22>
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d00b      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x38>
 8002b54:	e057      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b56:	4b35      	ldr	r3, [pc, #212]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d002      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002b60:	4b33      	ldr	r3, [pc, #204]	@ (8002c30 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b62:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002b64:	e05d      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002b66:	4b33      	ldr	r3, [pc, #204]	@ (8002c34 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b68:	613b      	str	r3, [r7, #16]
      break;
 8002b6a:	e05a      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b6c:	4b32      	ldr	r3, [pc, #200]	@ (8002c38 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b6e:	613b      	str	r3, [r7, #16]
      break;
 8002b70:	e057      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	0c9b      	lsrs	r3, r3, #18
 8002b76:	220f      	movs	r2, #15
 8002b78:	4013      	ands	r3, r2
 8002b7a:	4a30      	ldr	r2, [pc, #192]	@ (8002c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7c:	5cd3      	ldrb	r3, [r2, r3]
 8002b7e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	0d9b      	lsrs	r3, r3, #22
 8002b84:	2203      	movs	r2, #3
 8002b86:	4013      	ands	r3, r2
 8002b88:	3301      	adds	r3, #1
 8002b8a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8c:	4b27      	ldr	r3, [pc, #156]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	025b      	lsls	r3, r3, #9
 8002b94:	4013      	ands	r3, r2
 8002b96:	d00f      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	000a      	movs	r2, r1
 8002b9c:	0152      	lsls	r2, r2, #5
 8002b9e:	1a52      	subs	r2, r2, r1
 8002ba0:	0193      	lsls	r3, r2, #6
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	185b      	adds	r3, r3, r1
 8002ba8:	025b      	lsls	r3, r3, #9
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7fd faab 	bl	8000108 <__udivsi3>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	e023      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d00f      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	000a      	movs	r2, r1
 8002bc6:	0152      	lsls	r2, r2, #5
 8002bc8:	1a52      	subs	r2, r2, r1
 8002bca:	0193      	lsls	r3, r2, #6
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	185b      	adds	r3, r3, r1
 8002bd2:	021b      	lsls	r3, r3, #8
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f7fd fa96 	bl	8000108 <__udivsi3>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	e00e      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	000a      	movs	r2, r1
 8002be6:	0152      	lsls	r2, r2, #5
 8002be8:	1a52      	subs	r2, r2, r1
 8002bea:	0193      	lsls	r3, r2, #6
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	185b      	adds	r3, r3, r1
 8002bf2:	029b      	lsls	r3, r3, #10
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7fd fa86 	bl	8000108 <__udivsi3>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	613b      	str	r3, [r7, #16]
      break;
 8002c04:	e00d      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c06:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0b5b      	lsrs	r3, r3, #13
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	4013      	ands	r3, r2
 8002c10:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	2280      	movs	r2, #128	@ 0x80
 8002c18:	0212      	lsls	r2, r2, #8
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
      break;
 8002c20:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c22:	693b      	ldr	r3, [r7, #16]
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b006      	add	sp, #24
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	003d0900 	.word	0x003d0900
 8002c34:	00f42400 	.word	0x00f42400
 8002c38:	007a1200 	.word	0x007a1200
 8002c3c:	08003a30 	.word	0x08003a30

08002c40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e032      	b.n	8002cb8 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2239      	movs	r2, #57	@ 0x39
 8002c56:	5c9b      	ldrb	r3, [r3, r2]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d107      	bne.n	8002c6e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2238      	movs	r2, #56	@ 0x38
 8002c62:	2100      	movs	r1, #0
 8002c64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7fe fef3 	bl	8001a54 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2239      	movs	r2, #57	@ 0x39
 8002c72:	2102      	movs	r1, #2
 8002c74:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	0019      	movs	r1, r3
 8002c80:	0010      	movs	r0, r2
 8002c82:	f000 fb6f 	bl	8003364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	223e      	movs	r2, #62	@ 0x3e
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	223a      	movs	r2, #58	@ 0x3a
 8002c92:	2101      	movs	r1, #1
 8002c94:	5499      	strb	r1, [r3, r2]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	223b      	movs	r2, #59	@ 0x3b
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	5499      	strb	r1, [r3, r2]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	223c      	movs	r2, #60	@ 0x3c
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	5499      	strb	r1, [r3, r2]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	223d      	movs	r2, #61	@ 0x3d
 8002caa:	2101      	movs	r1, #1
 8002cac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2239      	movs	r2, #57	@ 0x39
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	0018      	movs	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b002      	add	sp, #8
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d104      	bne.n	8002cda <HAL_TIM_IC_Start+0x1a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	223a      	movs	r2, #58	@ 0x3a
 8002cd4:	5c9b      	ldrb	r3, [r3, r2]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	e013      	b.n	8002d02 <HAL_TIM_IC_Start+0x42>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_IC_Start+0x2a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	223b      	movs	r2, #59	@ 0x3b
 8002ce4:	5c9b      	ldrb	r3, [r3, r2]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	e00b      	b.n	8002d02 <HAL_TIM_IC_Start+0x42>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_IC_Start+0x3a>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	223c      	movs	r2, #60	@ 0x3c
 8002cf4:	5c9b      	ldrb	r3, [r3, r2]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	e003      	b.n	8002d02 <HAL_TIM_IC_Start+0x42>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	223d      	movs	r2, #61	@ 0x3d
 8002cfe:	5c9b      	ldrb	r3, [r3, r2]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	210f      	movs	r1, #15
 8002d04:	187a      	adds	r2, r7, r1
 8002d06:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d08:	187b      	adds	r3, r7, r1
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d001      	beq.n	8002d14 <HAL_TIM_IC_Start+0x54>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e04d      	b.n	8002db0 <HAL_TIM_IC_Start+0xf0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d104      	bne.n	8002d24 <HAL_TIM_IC_Start+0x64>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	223a      	movs	r2, #58	@ 0x3a
 8002d1e:	2102      	movs	r1, #2
 8002d20:	5499      	strb	r1, [r3, r2]
 8002d22:	e013      	b.n	8002d4c <HAL_TIM_IC_Start+0x8c>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d104      	bne.n	8002d34 <HAL_TIM_IC_Start+0x74>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	223b      	movs	r2, #59	@ 0x3b
 8002d2e:	2102      	movs	r1, #2
 8002d30:	5499      	strb	r1, [r3, r2]
 8002d32:	e00b      	b.n	8002d4c <HAL_TIM_IC_Start+0x8c>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d104      	bne.n	8002d44 <HAL_TIM_IC_Start+0x84>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	223c      	movs	r2, #60	@ 0x3c
 8002d3e:	2102      	movs	r1, #2
 8002d40:	5499      	strb	r1, [r3, r2]
 8002d42:	e003      	b.n	8002d4c <HAL_TIM_IC_Start+0x8c>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	223d      	movs	r2, #61	@ 0x3d
 8002d48:	2102      	movs	r1, #2
 8002d4a:	5499      	strb	r1, [r3, r2]

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	2201      	movs	r2, #1
 8002d54:	0018      	movs	r0, r3
 8002d56:	f000 fd8f 	bl	8003878 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	2380      	movs	r3, #128	@ 0x80
 8002d60:	05db      	lsls	r3, r3, #23
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d009      	beq.n	8002d7a <HAL_TIM_IC_Start+0xba>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a13      	ldr	r2, [pc, #76]	@ (8002db8 <HAL_TIM_IC_Start+0xf8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d004      	beq.n	8002d7a <HAL_TIM_IC_Start+0xba>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <HAL_TIM_IC_Start+0xfc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d111      	bne.n	8002d9e <HAL_TIM_IC_Start+0xde>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2207      	movs	r2, #7
 8002d82:	4013      	ands	r3, r2
 8002d84:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b06      	cmp	r3, #6
 8002d8a:	d010      	beq.n	8002dae <HAL_TIM_IC_Start+0xee>
    {
      __HAL_TIM_ENABLE(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2101      	movs	r1, #1
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d9c:	e007      	b.n	8002dae <HAL_TIM_IC_Start+0xee>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2101      	movs	r1, #1
 8002daa:	430a      	orrs	r2, r1
 8002dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b004      	add	sp, #16
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40010800 	.word	0x40010800
 8002dbc:	40011400 	.word	0x40011400

08002dc0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dca:	230f      	movs	r3, #15
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d104      	bne.n	8002de2 <HAL_TIM_IC_Start_IT+0x22>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	223a      	movs	r2, #58	@ 0x3a
 8002ddc:	5c9b      	ldrb	r3, [r3, r2]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e013      	b.n	8002e0a <HAL_TIM_IC_Start_IT+0x4a>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d104      	bne.n	8002df2 <HAL_TIM_IC_Start_IT+0x32>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	223b      	movs	r2, #59	@ 0x3b
 8002dec:	5c9b      	ldrb	r3, [r3, r2]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	e00b      	b.n	8002e0a <HAL_TIM_IC_Start_IT+0x4a>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d104      	bne.n	8002e02 <HAL_TIM_IC_Start_IT+0x42>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	223c      	movs	r2, #60	@ 0x3c
 8002dfc:	5c9b      	ldrb	r3, [r3, r2]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	e003      	b.n	8002e0a <HAL_TIM_IC_Start_IT+0x4a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	223d      	movs	r2, #61	@ 0x3d
 8002e06:	5c9b      	ldrb	r3, [r3, r2]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	210e      	movs	r1, #14
 8002e0c:	187a      	adds	r2, r7, r1
 8002e0e:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d001      	beq.n	8002e1c <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e090      	b.n	8002f3e <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d104      	bne.n	8002e2c <HAL_TIM_IC_Start_IT+0x6c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	223a      	movs	r2, #58	@ 0x3a
 8002e26:	2102      	movs	r1, #2
 8002e28:	5499      	strb	r1, [r3, r2]
 8002e2a:	e013      	b.n	8002e54 <HAL_TIM_IC_Start_IT+0x94>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d104      	bne.n	8002e3c <HAL_TIM_IC_Start_IT+0x7c>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	223b      	movs	r2, #59	@ 0x3b
 8002e36:	2102      	movs	r1, #2
 8002e38:	5499      	strb	r1, [r3, r2]
 8002e3a:	e00b      	b.n	8002e54 <HAL_TIM_IC_Start_IT+0x94>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d104      	bne.n	8002e4c <HAL_TIM_IC_Start_IT+0x8c>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	223c      	movs	r2, #60	@ 0x3c
 8002e46:	2102      	movs	r1, #2
 8002e48:	5499      	strb	r1, [r3, r2]
 8002e4a:	e003      	b.n	8002e54 <HAL_TIM_IC_Start_IT+0x94>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	223d      	movs	r2, #61	@ 0x3d
 8002e50:	2102      	movs	r1, #2
 8002e52:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b0c      	cmp	r3, #12
 8002e58:	d02a      	beq.n	8002eb0 <HAL_TIM_IC_Start_IT+0xf0>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	d830      	bhi.n	8002ec2 <HAL_TIM_IC_Start_IT+0x102>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d01b      	beq.n	8002e9e <HAL_TIM_IC_Start_IT+0xde>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d82a      	bhi.n	8002ec2 <HAL_TIM_IC_Start_IT+0x102>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_TIM_IC_Start_IT+0xba>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d009      	beq.n	8002e8c <HAL_TIM_IC_Start_IT+0xcc>
 8002e78:	e023      	b.n	8002ec2 <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2102      	movs	r1, #2
 8002e86:	430a      	orrs	r2, r1
 8002e88:	60da      	str	r2, [r3, #12]
      break;
 8002e8a:	e01f      	b.n	8002ecc <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2104      	movs	r1, #4
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	60da      	str	r2, [r3, #12]
      break;
 8002e9c:	e016      	b.n	8002ecc <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2108      	movs	r1, #8
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	60da      	str	r2, [r3, #12]
      break;
 8002eae:	e00d      	b.n	8002ecc <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2110      	movs	r1, #16
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	60da      	str	r2, [r3, #12]
      break;
 8002ec0:	e004      	b.n	8002ecc <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 8002ec2:	230f      	movs	r3, #15
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
      break;
 8002eca:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002ecc:	230f      	movs	r3, #15
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d130      	bne.n	8002f38 <HAL_TIM_IC_Start_IT+0x178>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6839      	ldr	r1, [r7, #0]
 8002edc:	2201      	movs	r2, #1
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 fcca 	bl	8003878 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	2380      	movs	r3, #128	@ 0x80
 8002eea:	05db      	lsls	r3, r3, #23
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d009      	beq.n	8002f04 <HAL_TIM_IC_Start_IT+0x144>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a14      	ldr	r2, [pc, #80]	@ (8002f48 <HAL_TIM_IC_Start_IT+0x188>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_TIM_IC_Start_IT+0x144>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a13      	ldr	r2, [pc, #76]	@ (8002f4c <HAL_TIM_IC_Start_IT+0x18c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d111      	bne.n	8002f28 <HAL_TIM_IC_Start_IT+0x168>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2207      	movs	r2, #7
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b06      	cmp	r3, #6
 8002f14:	d010      	beq.n	8002f38 <HAL_TIM_IC_Start_IT+0x178>
      {
        __HAL_TIM_ENABLE(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2101      	movs	r1, #1
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f26:	e007      	b.n	8002f38 <HAL_TIM_IC_Start_IT+0x178>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2101      	movs	r1, #1
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f38:	230f      	movs	r3, #15
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	781b      	ldrb	r3, [r3, #0]
}
 8002f3e:	0018      	movs	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b004      	add	sp, #16
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	46c0      	nop			@ (mov r8, r8)
 8002f48:	40010800 	.word	0x40010800
 8002f4c:	40011400 	.word	0x40011400

08002f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d021      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2202      	movs	r2, #2
 8002f74:	4013      	ands	r3, r2
 8002f76:	d01d      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	4252      	negs	r2, r2
 8002f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2203      	movs	r2, #3
 8002f90:	4013      	ands	r3, r2
 8002f92:	d004      	beq.n	8002f9e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7fe fbd8 	bl	800174c <HAL_TIM_IC_CaptureCallback>
 8002f9c:	e007      	b.n	8002fae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 f9c7 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 f9cb 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d022      	beq.n	8003002 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d01e      	beq.n	8003002 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2205      	movs	r2, #5
 8002fca:	4252      	negs	r2, r2
 8002fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	23c0      	movs	r3, #192	@ 0xc0
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7fe fbb1 	bl	800174c <HAL_TIM_IC_CaptureCallback>
 8002fea:	e007      	b.n	8002ffc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 f9a0 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 f9a4 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2208      	movs	r2, #8
 8003006:	4013      	ands	r3, r2
 8003008:	d021      	beq.n	800304e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2208      	movs	r2, #8
 800300e:	4013      	ands	r3, r2
 8003010:	d01d      	beq.n	800304e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2209      	movs	r2, #9
 8003018:	4252      	negs	r2, r2
 800301a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2204      	movs	r2, #4
 8003020:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	2203      	movs	r2, #3
 800302a:	4013      	ands	r3, r2
 800302c:	d004      	beq.n	8003038 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	0018      	movs	r0, r3
 8003032:	f7fe fb8b 	bl	800174c <HAL_TIM_IC_CaptureCallback>
 8003036:	e007      	b.n	8003048 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	0018      	movs	r0, r3
 800303c:	f000 f97a 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 f97e 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2210      	movs	r2, #16
 8003052:	4013      	ands	r3, r2
 8003054:	d022      	beq.n	800309c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2210      	movs	r2, #16
 800305a:	4013      	ands	r3, r2
 800305c:	d01e      	beq.n	800309c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2211      	movs	r2, #17
 8003064:	4252      	negs	r2, r2
 8003066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2208      	movs	r2, #8
 800306c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	23c0      	movs	r3, #192	@ 0xc0
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4013      	ands	r3, r2
 800307a:	d004      	beq.n	8003086 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	0018      	movs	r0, r3
 8003080:	f7fe fb64 	bl	800174c <HAL_TIM_IC_CaptureCallback>
 8003084:	e007      	b.n	8003096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0018      	movs	r0, r3
 800308a:	f000 f953 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0018      	movs	r0, r3
 8003092:	f000 f957 	bl	8003344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2201      	movs	r2, #1
 80030a0:	4013      	ands	r3, r2
 80030a2:	d00c      	beq.n	80030be <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	4013      	ands	r3, r2
 80030aa:	d008      	beq.n	80030be <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2202      	movs	r2, #2
 80030b2:	4252      	negs	r2, r2
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 f933 	bl	8003324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2240      	movs	r2, #64	@ 0x40
 80030c2:	4013      	ands	r3, r2
 80030c4:	d00c      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2240      	movs	r2, #64	@ 0x40
 80030ca:	4013      	ands	r3, r2
 80030cc:	d008      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2241      	movs	r2, #65	@ 0x41
 80030d4:	4252      	negs	r2, r2
 80030d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	0018      	movs	r0, r3
 80030dc:	f000 f93a 	bl	8003354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030e0:	46c0      	nop			@ (mov r8, r8)
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b004      	add	sp, #16
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f4:	2317      	movs	r3, #23
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2238      	movs	r2, #56	@ 0x38
 8003100:	5c9b      	ldrb	r3, [r3, r2]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_TIM_IC_ConfigChannel+0x22>
 8003106:	2302      	movs	r3, #2
 8003108:	e08c      	b.n	8003224 <HAL_TIM_IC_ConfigChannel+0x13c>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2238      	movs	r2, #56	@ 0x38
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11b      	bne.n	8003150 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003128:	f000 fa08 	bl	800353c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699a      	ldr	r2, [r3, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	210c      	movs	r1, #12
 8003138:	438a      	bics	r2, r1
 800313a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6999      	ldr	r1, [r3, #24]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	619a      	str	r2, [r3, #24]
 800314e:	e062      	b.n	8003216 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b04      	cmp	r3, #4
 8003154:	d11c      	bne.n	8003190 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003166:	f000 fa6d 	bl	8003644 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	492d      	ldr	r1, [pc, #180]	@ (800322c <HAL_TIM_IC_ConfigChannel+0x144>)
 8003176:	400a      	ands	r2, r1
 8003178:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6999      	ldr	r1, [r3, #24]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	021a      	lsls	r2, r3, #8
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	619a      	str	r2, [r3, #24]
 800318e:	e042      	b.n	8003216 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b08      	cmp	r3, #8
 8003194:	d11b      	bne.n	80031ce <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80031a6:	f000 fac1 	bl	800372c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	210c      	movs	r1, #12
 80031b6:	438a      	bics	r2, r1
 80031b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69d9      	ldr	r1, [r3, #28]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	61da      	str	r2, [r3, #28]
 80031cc:	e023      	b.n	8003216 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b0c      	cmp	r3, #12
 80031d2:	d11c      	bne.n	800320e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80031e4:	f000 fae2 	bl	80037ac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	490e      	ldr	r1, [pc, #56]	@ (800322c <HAL_TIM_IC_ConfigChannel+0x144>)
 80031f4:	400a      	ands	r2, r1
 80031f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69d9      	ldr	r1, [r3, #28]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	021a      	lsls	r2, r3, #8
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	61da      	str	r2, [r3, #28]
 800320c:	e003      	b.n	8003216 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800320e:	2317      	movs	r3, #23
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2238      	movs	r2, #56	@ 0x38
 800321a:	2100      	movs	r1, #0
 800321c:	5499      	strb	r1, [r3, r2]

  return status;
 800321e:	2317      	movs	r3, #23
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	781b      	ldrb	r3, [r3, #0]
}
 8003224:	0018      	movs	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	b006      	add	sp, #24
 800322a:	bd80      	pop	{r7, pc}
 800322c:	fffff3ff 	.word	0xfffff3ff

08003230 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2238      	movs	r2, #56	@ 0x38
 800323e:	5c9b      	ldrb	r3, [r3, r2]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003244:	2302      	movs	r3, #2
 8003246:	e032      	b.n	80032ae <HAL_TIM_SlaveConfigSynchro+0x7e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2238      	movs	r2, #56	@ 0x38
 800324c:	2101      	movs	r1, #1
 800324e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2239      	movs	r2, #57	@ 0x39
 8003254:	2102      	movs	r1, #2
 8003256:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0011      	movs	r1, r2
 800325e:	0018      	movs	r0, r3
 8003260:	f000 f8da 	bl	8003418 <TIM_SlaveTimer_SetConfig>
 8003264:	1e03      	subs	r3, r0, #0
 8003266:	d009      	beq.n	800327c <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2239      	movs	r2, #57	@ 0x39
 800326c:	2101      	movs	r1, #1
 800326e:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2238      	movs	r2, #56	@ 0x38
 8003274:	2100      	movs	r1, #0
 8003276:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e018      	b.n	80032ae <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2140      	movs	r1, #64	@ 0x40
 8003288:	438a      	bics	r2, r1
 800328a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4908      	ldr	r1, [pc, #32]	@ (80032b8 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8003298:	400a      	ands	r2, r1
 800329a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2239      	movs	r2, #57	@ 0x39
 80032a0:	2101      	movs	r1, #1
 80032a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2238      	movs	r2, #56	@ 0x38
 80032a8:	2100      	movs	r1, #0
 80032aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	0018      	movs	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b002      	add	sp, #8
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	ffffbfff 	.word	0xffffbfff

080032bc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b0c      	cmp	r3, #12
 80032ce:	d01e      	beq.n	800330e <HAL_TIM_ReadCapturedValue+0x52>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b0c      	cmp	r3, #12
 80032d4:	d820      	bhi.n	8003318 <HAL_TIM_ReadCapturedValue+0x5c>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d013      	beq.n	8003304 <HAL_TIM_ReadCapturedValue+0x48>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d81a      	bhi.n	8003318 <HAL_TIM_ReadCapturedValue+0x5c>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <HAL_TIM_ReadCapturedValue+0x34>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d005      	beq.n	80032fa <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80032ee:	e013      	b.n	8003318 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f6:	60fb      	str	r3, [r7, #12]
      break;
 80032f8:	e00f      	b.n	800331a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	60fb      	str	r3, [r7, #12]
      break;
 8003302:	e00a      	b.n	800331a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330a:	60fb      	str	r3, [r7, #12]
      break;
 800330c:	e005      	b.n	800331a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	60fb      	str	r3, [r7, #12]
      break;
 8003316:	e000      	b.n	800331a <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8003318:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800331a:	68fb      	ldr	r3, [r7, #12]
}
 800331c:	0018      	movs	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	b004      	add	sp, #16
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800332c:	46c0      	nop			@ (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b002      	add	sp, #8
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800333c:	46c0      	nop			@ (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800334c:	46c0      	nop			@ (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800335c:	46c0      	nop			@ (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	2380      	movs	r3, #128	@ 0x80
 8003378:	05db      	lsls	r3, r3, #23
 800337a:	429a      	cmp	r2, r3
 800337c:	d007      	beq.n	800338e <TIM_Base_SetConfig+0x2a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a22      	ldr	r2, [pc, #136]	@ (800340c <TIM_Base_SetConfig+0xa8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d003      	beq.n	800338e <TIM_Base_SetConfig+0x2a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a21      	ldr	r2, [pc, #132]	@ (8003410 <TIM_Base_SetConfig+0xac>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d108      	bne.n	80033a0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2270      	movs	r2, #112	@ 0x70
 8003392:	4393      	bics	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	2380      	movs	r3, #128	@ 0x80
 80033a4:	05db      	lsls	r3, r3, #23
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d007      	beq.n	80033ba <TIM_Base_SetConfig+0x56>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a17      	ldr	r2, [pc, #92]	@ (800340c <TIM_Base_SetConfig+0xa8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d003      	beq.n	80033ba <TIM_Base_SetConfig+0x56>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a16      	ldr	r2, [pc, #88]	@ (8003410 <TIM_Base_SetConfig+0xac>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d108      	bne.n	80033cc <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4a15      	ldr	r2, [pc, #84]	@ (8003414 <TIM_Base_SetConfig+0xb0>)
 80033be:	4013      	ands	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2280      	movs	r2, #128	@ 0x80
 80033d0:	4393      	bics	r3, r2
 80033d2:	001a      	movs	r2, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2204      	movs	r2, #4
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	601a      	str	r2, [r3, #0]
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b004      	add	sp, #16
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40010800 	.word	0x40010800
 8003410:	40011400 	.word	0x40011400
 8003414:	fffffcff 	.word	0xfffffcff

08003418 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003422:	2317      	movs	r3, #23
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	2200      	movs	r2, #0
 8003428:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2270      	movs	r2, #112	@ 0x70
 8003436:	4393      	bics	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	2207      	movs	r2, #7
 8003448:	4393      	bics	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b70      	cmp	r3, #112	@ 0x70
 8003464:	d015      	beq.n	8003492 <TIM_SlaveTimer_SetConfig+0x7a>
 8003466:	d900      	bls.n	800346a <TIM_SlaveTimer_SetConfig+0x52>
 8003468:	e05b      	b.n	8003522 <TIM_SlaveTimer_SetConfig+0x10a>
 800346a:	2b60      	cmp	r3, #96	@ 0x60
 800346c:	d04f      	beq.n	800350e <TIM_SlaveTimer_SetConfig+0xf6>
 800346e:	d858      	bhi.n	8003522 <TIM_SlaveTimer_SetConfig+0x10a>
 8003470:	2b50      	cmp	r3, #80	@ 0x50
 8003472:	d042      	beq.n	80034fa <TIM_SlaveTimer_SetConfig+0xe2>
 8003474:	d855      	bhi.n	8003522 <TIM_SlaveTimer_SetConfig+0x10a>
 8003476:	2b40      	cmp	r3, #64	@ 0x40
 8003478:	d016      	beq.n	80034a8 <TIM_SlaveTimer_SetConfig+0x90>
 800347a:	d852      	bhi.n	8003522 <TIM_SlaveTimer_SetConfig+0x10a>
 800347c:	2b30      	cmp	r3, #48	@ 0x30
 800347e:	d055      	beq.n	800352c <TIM_SlaveTimer_SetConfig+0x114>
 8003480:	d84f      	bhi.n	8003522 <TIM_SlaveTimer_SetConfig+0x10a>
 8003482:	2b20      	cmp	r3, #32
 8003484:	d052      	beq.n	800352c <TIM_SlaveTimer_SetConfig+0x114>
 8003486:	d84c      	bhi.n	8003522 <TIM_SlaveTimer_SetConfig+0x10a>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d04f      	beq.n	800352c <TIM_SlaveTimer_SetConfig+0x114>
 800348c:	2b10      	cmp	r3, #16
 800348e:	d04d      	beq.n	800352c <TIM_SlaveTimer_SetConfig+0x114>
 8003490:	e047      	b.n	8003522 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80034a2:	f000 f9c9 	bl	8003838 <TIM_ETR_SetConfig>
      break;
 80034a6:	e042      	b.n	800352e <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b05      	cmp	r3, #5
 80034ae:	d101      	bne.n	80034b4 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e03f      	b.n	8003534 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6a1a      	ldr	r2, [r3, #32]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2101      	movs	r1, #1
 80034c8:	438a      	bics	r2, r1
 80034ca:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	22f0      	movs	r2, #240	@ 0xf0
 80034d8:	4393      	bics	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	621a      	str	r2, [r3, #32]
      break;
 80034f8:	e019      	b.n	800352e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003506:	001a      	movs	r2, r3
 8003508:	f000 f86e 	bl	80035e8 <TIM_TI1_ConfigInputStage>
      break;
 800350c:	e00f      	b.n	800352e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800351a:	001a      	movs	r2, r3
 800351c:	f000 f8d4 	bl	80036c8 <TIM_TI2_ConfigInputStage>
      break;
 8003520:	e005      	b.n	800352e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003522:	2317      	movs	r3, #23
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	2201      	movs	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
      break;
 800352a:	e000      	b.n	800352e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 800352c:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 800352e:	2317      	movs	r3, #23
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	781b      	ldrb	r3, [r3, #0]
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b006      	add	sp, #24
 800353a:	bd80      	pop	{r7, pc}

0800353c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	2201      	movs	r2, #1
 8003556:	4393      	bics	r3, r2
 8003558:	001a      	movs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	2380      	movs	r3, #128	@ 0x80
 8003568:	05db      	lsls	r3, r3, #23
 800356a:	429a      	cmp	r2, r3
 800356c:	d007      	beq.n	800357e <TIM_TI1_SetConfig+0x42>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4a1b      	ldr	r2, [pc, #108]	@ (80035e0 <TIM_TI1_SetConfig+0xa4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d003      	beq.n	800357e <TIM_TI1_SetConfig+0x42>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4a1a      	ldr	r2, [pc, #104]	@ (80035e4 <TIM_TI1_SetConfig+0xa8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <TIM_TI1_SetConfig+0x46>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <TIM_TI1_SetConfig+0x48>
 8003582:	2300      	movs	r3, #0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2203      	movs	r2, #3
 800358c:	4393      	bics	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	e003      	b.n	80035a2 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2201      	movs	r2, #1
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	22f0      	movs	r2, #240	@ 0xf0
 80035a6:	4393      	bics	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	22ff      	movs	r2, #255	@ 0xff
 80035b0:	4013      	ands	r3, r2
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	220a      	movs	r2, #10
 80035bc:	4393      	bics	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	220a      	movs	r2, #10
 80035c4:	4013      	ands	r3, r2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	621a      	str	r2, [r3, #32]
}
 80035d8:	46c0      	nop			@ (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b006      	add	sp, #24
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40010800 	.word	0x40010800
 80035e4:	40011400 	.word	0x40011400

080035e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	2201      	movs	r2, #1
 8003600:	4393      	bics	r3, r2
 8003602:	001a      	movs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	22f0      	movs	r2, #240	@ 0xf0
 8003612:	4393      	bics	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	220a      	movs	r2, #10
 8003624:	4393      	bics	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	621a      	str	r2, [r3, #32]
}
 800363c:	46c0      	nop			@ (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b006      	add	sp, #24
 8003642:	bd80      	pop	{r7, pc}

08003644 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	2210      	movs	r2, #16
 800365e:	4393      	bics	r3, r2
 8003660:	001a      	movs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4a14      	ldr	r2, [pc, #80]	@ (80036c0 <TIM_TI2_SetConfig+0x7c>)
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4a10      	ldr	r2, [pc, #64]	@ (80036c4 <TIM_TI2_SetConfig+0x80>)
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	031b      	lsls	r3, r3, #12
 800368a:	041b      	lsls	r3, r3, #16
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	22a0      	movs	r2, #160	@ 0xa0
 8003698:	4393      	bics	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	22a0      	movs	r2, #160	@ 0xa0
 80036a2:	4013      	ands	r3, r2
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b006      	add	sp, #24
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	46c0      	nop			@ (mov r8, r8)
 80036c0:	fffffcff 	.word	0xfffffcff
 80036c4:	ffff0fff 	.word	0xffff0fff

080036c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	2210      	movs	r2, #16
 80036e0:	4393      	bics	r3, r2
 80036e2:	001a      	movs	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003728 <TIM_TI2_ConfigInputStage+0x60>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	031b      	lsls	r3, r3, #12
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	22a0      	movs	r2, #160	@ 0xa0
 8003704:	4393      	bics	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b006      	add	sp, #24
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	ffff0fff 	.word	0xffff0fff

0800372c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	4a17      	ldr	r2, [pc, #92]	@ (80037a4 <TIM_TI3_SetConfig+0x78>)
 8003746:	401a      	ands	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	2203      	movs	r2, #3
 8003756:	4393      	bics	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	22f0      	movs	r2, #240	@ 0xf0
 8003766:	4393      	bics	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	22ff      	movs	r2, #255	@ 0xff
 8003770:	4013      	ands	r3, r2
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	4a0b      	ldr	r2, [pc, #44]	@ (80037a8 <TIM_TI3_SetConfig+0x7c>)
 800377c:	4013      	ands	r3, r2
 800377e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	021a      	lsls	r2, r3, #8
 8003784:	23a0      	movs	r3, #160	@ 0xa0
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	4013      	ands	r3, r2
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	621a      	str	r2, [r3, #32]
}
 800379c:	46c0      	nop			@ (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b006      	add	sp, #24
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	fffffeff 	.word	0xfffffeff
 80037a8:	fffff5ff 	.word	0xfffff5ff

080037ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	4a18      	ldr	r2, [pc, #96]	@ (8003828 <TIM_TI4_SetConfig+0x7c>)
 80037c6:	401a      	ands	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4a15      	ldr	r2, [pc, #84]	@ (800382c <TIM_TI4_SetConfig+0x80>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4a12      	ldr	r2, [pc, #72]	@ (8003830 <TIM_TI4_SetConfig+0x84>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	031b      	lsls	r3, r3, #12
 80037f0:	041b      	lsls	r3, r3, #16
 80037f2:	0c1b      	lsrs	r3, r3, #16
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003834 <TIM_TI4_SetConfig+0x88>)
 80037fe:	4013      	ands	r3, r2
 8003800:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	031a      	lsls	r2, r3, #12
 8003806:	23a0      	movs	r3, #160	@ 0xa0
 8003808:	021b      	lsls	r3, r3, #8
 800380a:	4013      	ands	r3, r2
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b006      	add	sp, #24
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	ffffefff 	.word	0xffffefff
 800382c:	fffffcff 	.word	0xfffffcff
 8003830:	ffff0fff 	.word	0xffff0fff
 8003834:	ffff5fff 	.word	0xffff5fff

08003838 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	4a09      	ldr	r2, [pc, #36]	@ (8003874 <TIM_ETR_SetConfig+0x3c>)
 8003850:	4013      	ands	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	021a      	lsls	r2, r3, #8
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	431a      	orrs	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4313      	orrs	r3, r2
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	609a      	str	r2, [r3, #8]
}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b006      	add	sp, #24
 8003872:	bd80      	pop	{r7, pc}
 8003874:	ffff00ff 	.word	0xffff00ff

08003878 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	221f      	movs	r2, #31
 8003888:	4013      	ands	r3, r2
 800388a:	2201      	movs	r2, #1
 800388c:	409a      	lsls	r2, r3
 800388e:	0013      	movs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	43d2      	mvns	r2, r2
 800389a:	401a      	ands	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a1a      	ldr	r2, [r3, #32]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	211f      	movs	r1, #31
 80038a8:	400b      	ands	r3, r1
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4099      	lsls	r1, r3
 80038ae:	000b      	movs	r3, r1
 80038b0:	431a      	orrs	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b006      	add	sp, #24
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2238      	movs	r2, #56	@ 0x38
 80038ce:	5c9b      	ldrb	r3, [r3, r2]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e042      	b.n	800395e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2238      	movs	r2, #56	@ 0x38
 80038dc:	2101      	movs	r1, #1
 80038de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2239      	movs	r2, #57	@ 0x39
 80038e4:	2102      	movs	r1, #2
 80038e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2270      	movs	r2, #112	@ 0x70
 80038fc:	4393      	bics	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	2380      	movs	r3, #128	@ 0x80
 8003918:	05db      	lsls	r3, r3, #23
 800391a:	429a      	cmp	r2, r3
 800391c:	d009      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a11      	ldr	r2, [pc, #68]	@ (8003968 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a0f      	ldr	r2, [pc, #60]	@ (800396c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d10c      	bne.n	800394c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2280      	movs	r2, #128	@ 0x80
 8003936:	4393      	bics	r3, r2
 8003938:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	4313      	orrs	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2239      	movs	r2, #57	@ 0x39
 8003950:	2101      	movs	r1, #1
 8003952:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2238      	movs	r2, #56	@ 0x38
 8003958:	2100      	movs	r1, #0
 800395a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b004      	add	sp, #16
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			@ (mov r8, r8)
 8003968:	40010800 	.word	0x40010800
 800396c:	40011400 	.word	0x40011400

08003970 <memset>:
 8003970:	0003      	movs	r3, r0
 8003972:	1882      	adds	r2, r0, r2
 8003974:	4293      	cmp	r3, r2
 8003976:	d100      	bne.n	800397a <memset+0xa>
 8003978:	4770      	bx	lr
 800397a:	7019      	strb	r1, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	e7f9      	b.n	8003974 <memset+0x4>

08003980 <__libc_init_array>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	2600      	movs	r6, #0
 8003984:	4c0c      	ldr	r4, [pc, #48]	@ (80039b8 <__libc_init_array+0x38>)
 8003986:	4d0d      	ldr	r5, [pc, #52]	@ (80039bc <__libc_init_array+0x3c>)
 8003988:	1b64      	subs	r4, r4, r5
 800398a:	10a4      	asrs	r4, r4, #2
 800398c:	42a6      	cmp	r6, r4
 800398e:	d109      	bne.n	80039a4 <__libc_init_array+0x24>
 8003990:	2600      	movs	r6, #0
 8003992:	f000 f819 	bl	80039c8 <_init>
 8003996:	4c0a      	ldr	r4, [pc, #40]	@ (80039c0 <__libc_init_array+0x40>)
 8003998:	4d0a      	ldr	r5, [pc, #40]	@ (80039c4 <__libc_init_array+0x44>)
 800399a:	1b64      	subs	r4, r4, r5
 800399c:	10a4      	asrs	r4, r4, #2
 800399e:	42a6      	cmp	r6, r4
 80039a0:	d105      	bne.n	80039ae <__libc_init_array+0x2e>
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
 80039a4:	00b3      	lsls	r3, r6, #2
 80039a6:	58eb      	ldr	r3, [r5, r3]
 80039a8:	4798      	blx	r3
 80039aa:	3601      	adds	r6, #1
 80039ac:	e7ee      	b.n	800398c <__libc_init_array+0xc>
 80039ae:	00b3      	lsls	r3, r6, #2
 80039b0:	58eb      	ldr	r3, [r5, r3]
 80039b2:	4798      	blx	r3
 80039b4:	3601      	adds	r6, #1
 80039b6:	e7f2      	b.n	800399e <__libc_init_array+0x1e>
 80039b8:	08003a3c 	.word	0x08003a3c
 80039bc:	08003a3c 	.word	0x08003a3c
 80039c0:	08003a40 	.word	0x08003a40
 80039c4:	08003a3c 	.word	0x08003a3c

080039c8 <_init>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr

080039d4 <_fini>:
 80039d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d6:	46c0      	nop			@ (mov r8, r8)
 80039d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039da:	bc08      	pop	{r3}
 80039dc:	469e      	mov	lr, r3
 80039de:	4770      	bx	lr

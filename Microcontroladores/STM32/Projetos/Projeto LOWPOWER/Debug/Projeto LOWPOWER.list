
Projeto LOWPOWER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016d8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001798  08001798  00002798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017b4  080017b4  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080017b4  080017b4  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080017b4  080017b4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017b4  080017b4  000027b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017b8  080017b8  000027b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080017bc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080017c8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080017c8  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000346d  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fe0  00000000  00000000  000064a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  00007488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000032b  00000000  00000000  000078f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012444  00000000  00000000  00007c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000058d3  00000000  00000000  0001a05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fb54  00000000  00000000  0001f932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008f486  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dc8  00000000  00000000  0008f4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  00090294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001780 	.word	0x08001780

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001780 	.word	0x08001780

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	801a      	strh	r2, [r3, #0]
  SystemClock_Config();
 800022c:	f000 f82a 	bl	8000284 <SystemClock_Config>
  HAL_ResumeTick();
 8000230:	f000 f9f0 	bl	8000614 <HAL_ResumeTick>
}
 8000234:	46c0      	nop			@ (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	b002      	add	sp, #8
 800023a:	bd80      	pop	{r7, pc}

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000240:	f000 f946 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000244:	f000 f81e 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000248:	f000 f876 	bl	8000338 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {

	  HAL_GPIO_WritePin(GRN_LD_GPIO_Port, GRN_LD_Pin, GPIO_PIN_RESET);
 800024c:	23a0      	movs	r3, #160	@ 0xa0
 800024e:	05db      	lsls	r3, r3, #23
 8000250:	2200      	movs	r2, #0
 8000252:	2120      	movs	r1, #32
 8000254:	0018      	movs	r0, r3
 8000256:	f000 fc3f 	bl	8000ad8 <HAL_GPIO_WritePin>


	  HAL_SuspendTick();
 800025a:	f000 f9cd 	bl	80005f8 <HAL_SuspendTick>
	  HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON,  PWR_STOPENTRY_WFI);
 800025e:	2101      	movs	r1, #1
 8000260:	2000      	movs	r0, #0
 8000262:	f000 fc73 	bl	8000b4c <HAL_PWR_EnterSTOPMode>

	  HAL_GPIO_WritePin(GRN_LD_GPIO_Port, GRN_LD_Pin, GPIO_PIN_SET);
 8000266:	23a0      	movs	r3, #160	@ 0xa0
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	2201      	movs	r2, #1
 800026c:	2120      	movs	r1, #32
 800026e:	0018      	movs	r0, r3
 8000270:	f000 fc32 	bl	8000ad8 <HAL_GPIO_WritePin>
	  HAL_Delay(3000);
 8000274:	4b02      	ldr	r3, [pc, #8]	@ (8000280 <main+0x44>)
 8000276:	0018      	movs	r0, r3
 8000278:	f000 f99a 	bl	80005b0 <HAL_Delay>
	  HAL_GPIO_WritePin(GRN_LD_GPIO_Port, GRN_LD_Pin, GPIO_PIN_RESET);
 800027c:	46c0      	nop			@ (mov r8, r8)
 800027e:	e7e5      	b.n	800024c <main+0x10>
 8000280:	00000bb8 	.word	0x00000bb8

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b095      	sub	sp, #84	@ 0x54
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	2418      	movs	r4, #24
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	2338      	movs	r3, #56	@ 0x38
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f001 fa47 	bl	8001728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	0018      	movs	r0, r3
 800029e:	2314      	movs	r3, #20
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f001 fa40 	bl	8001728 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a8:	4b21      	ldr	r3, [pc, #132]	@ (8000330 <SystemClock_Config+0xac>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a21      	ldr	r2, [pc, #132]	@ (8000334 <SystemClock_Config+0xb0>)
 80002ae:	401a      	ands	r2, r3
 80002b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000330 <SystemClock_Config+0xac>)
 80002b2:	2180      	movs	r1, #128	@ 0x80
 80002b4:	0109      	lsls	r1, r1, #4
 80002b6:	430a      	orrs	r2, r1
 80002b8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ba:	0021      	movs	r1, r4
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2202      	movs	r2, #2
 80002c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2201      	movs	r2, #1
 80002c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2210      	movs	r2, #16
 80002cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2202      	movs	r2, #2
 80002d2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2200      	movs	r2, #0
 80002d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2200      	movs	r2, #0
 80002de:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2280      	movs	r2, #128	@ 0x80
 80002e4:	0412      	lsls	r2, r2, #16
 80002e6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 fc8a 	bl	8000c04 <HAL_RCC_OscConfig>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002f4:	f000 f880 	bl	80003f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	220f      	movs	r2, #15
 80002fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2203      	movs	r2, #3
 8000302:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	22a0      	movs	r2, #160	@ 0xa0
 8000308:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	2200      	movs	r2, #0
 800030e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2200      	movs	r2, #0
 8000314:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2100      	movs	r1, #0
 800031a:	0018      	movs	r0, r3
 800031c:	f001 f836 	bl	800138c <HAL_RCC_ClockConfig>
 8000320:	1e03      	subs	r3, r0, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000324:	f000 f868 	bl	80003f8 <Error_Handler>
  }
}
 8000328:	46c0      	nop			@ (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b015      	add	sp, #84	@ 0x54
 800032e:	bd90      	pop	{r4, r7, pc}
 8000330:	40007000 	.word	0x40007000
 8000334:	ffffe7ff 	.word	0xffffe7ff

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b590      	push	{r4, r7, lr}
 800033a:	b089      	sub	sp, #36	@ 0x24
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	240c      	movs	r4, #12
 8000340:	193b      	adds	r3, r7, r4
 8000342:	0018      	movs	r0, r3
 8000344:	2314      	movs	r3, #20
 8000346:	001a      	movs	r2, r3
 8000348:	2100      	movs	r1, #0
 800034a:	f001 f9ed 	bl	8001728 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034e:	4b28      	ldr	r3, [pc, #160]	@ (80003f0 <MX_GPIO_Init+0xb8>)
 8000350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000352:	4b27      	ldr	r3, [pc, #156]	@ (80003f0 <MX_GPIO_Init+0xb8>)
 8000354:	2104      	movs	r1, #4
 8000356:	430a      	orrs	r2, r1
 8000358:	62da      	str	r2, [r3, #44]	@ 0x2c
 800035a:	4b25      	ldr	r3, [pc, #148]	@ (80003f0 <MX_GPIO_Init+0xb8>)
 800035c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800035e:	2204      	movs	r2, #4
 8000360:	4013      	ands	r3, r2
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b22      	ldr	r3, [pc, #136]	@ (80003f0 <MX_GPIO_Init+0xb8>)
 8000368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800036a:	4b21      	ldr	r3, [pc, #132]	@ (80003f0 <MX_GPIO_Init+0xb8>)
 800036c:	2101      	movs	r1, #1
 800036e:	430a      	orrs	r2, r1
 8000370:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000372:	4b1f      	ldr	r3, [pc, #124]	@ (80003f0 <MX_GPIO_Init+0xb8>)
 8000374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000376:	2201      	movs	r2, #1
 8000378:	4013      	ands	r3, r2
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GRN_LD_GPIO_Port, GRN_LD_Pin, GPIO_PIN_RESET);
 800037e:	23a0      	movs	r3, #160	@ 0xa0
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	2200      	movs	r2, #0
 8000384:	2120      	movs	r1, #32
 8000386:	0018      	movs	r0, r3
 8000388:	f000 fba6 	bl	8000ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WKUP_BTN_Pin */
  GPIO_InitStruct.Pin = WKUP_BTN_Pin;
 800038c:	193b      	adds	r3, r7, r4
 800038e:	2280      	movs	r2, #128	@ 0x80
 8000390:	0192      	lsls	r2, r2, #6
 8000392:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000394:	193b      	adds	r3, r7, r4
 8000396:	2284      	movs	r2, #132	@ 0x84
 8000398:	0392      	lsls	r2, r2, #14
 800039a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039c:	193b      	adds	r3, r7, r4
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(WKUP_BTN_GPIO_Port, &GPIO_InitStruct);
 80003a2:	193b      	adds	r3, r7, r4
 80003a4:	4a13      	ldr	r2, [pc, #76]	@ (80003f4 <MX_GPIO_Init+0xbc>)
 80003a6:	0019      	movs	r1, r3
 80003a8:	0010      	movs	r0, r2
 80003aa:	f000 fa1f 	bl	80007ec <HAL_GPIO_Init>

  /*Configure GPIO pin : GRN_LD_Pin */
  GPIO_InitStruct.Pin = GRN_LD_Pin;
 80003ae:	0021      	movs	r1, r4
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2220      	movs	r2, #32
 80003b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2201      	movs	r2, #1
 80003ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GRN_LD_GPIO_Port, &GPIO_InitStruct);
 80003c8:	187a      	adds	r2, r7, r1
 80003ca:	23a0      	movs	r3, #160	@ 0xa0
 80003cc:	05db      	lsls	r3, r3, #23
 80003ce:	0011      	movs	r1, r2
 80003d0:	0018      	movs	r0, r3
 80003d2:	f000 fa0b 	bl	80007ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2100      	movs	r1, #0
 80003da:	2007      	movs	r0, #7
 80003dc:	f000 f9d4 	bl	8000788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80003e0:	2007      	movs	r0, #7
 80003e2:	f000 f9e6 	bl	80007b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003e6:	46c0      	nop			@ (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b009      	add	sp, #36	@ 0x24
 80003ec:	bd90      	pop	{r4, r7, pc}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	40021000 	.word	0x40021000
 80003f4:	50000800 	.word	0x50000800

080003f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003fc:	b672      	cpsid	i
}
 80003fe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000400:	46c0      	nop			@ (mov r8, r8)
 8000402:	e7fd      	b.n	8000400 <Error_Handler+0x8>

08000404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000408:	4b07      	ldr	r3, [pc, #28]	@ (8000428 <HAL_MspInit+0x24>)
 800040a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <HAL_MspInit+0x24>)
 800040e:	2101      	movs	r1, #1
 8000410:	430a      	orrs	r2, r1
 8000412:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000414:	4b04      	ldr	r3, [pc, #16]	@ (8000428 <HAL_MspInit+0x24>)
 8000416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000418:	4b03      	ldr	r3, [pc, #12]	@ (8000428 <HAL_MspInit+0x24>)
 800041a:	2180      	movs	r1, #128	@ 0x80
 800041c:	0549      	lsls	r1, r1, #21
 800041e:	430a      	orrs	r2, r1
 8000420:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40021000 	.word	0x40021000

0800042c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000430:	46c0      	nop			@ (mov r8, r8)
 8000432:	e7fd      	b.n	8000430 <NMI_Handler+0x4>

08000434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	e7fd      	b.n	8000438 <HardFault_Handler+0x4>

0800043c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000440:	46c0      	nop			@ (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000454:	f000 f890 	bl	8000578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000458:	46c0      	nop			@ (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(WKUP_BTN_Pin);
 8000462:	2380      	movs	r3, #128	@ 0x80
 8000464:	019b      	lsls	r3, r3, #6
 8000466:	0018      	movs	r0, r3
 8000468:	f000 fb54 	bl	8000b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800046c:	46c0      	nop			@ (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 800047c:	480d      	ldr	r0, [pc, #52]	@ (80004b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000480:	f7ff fff7 	bl	8000472 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000484:	480c      	ldr	r0, [pc, #48]	@ (80004b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000486:	490d      	ldr	r1, [pc, #52]	@ (80004bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000488:	4a0d      	ldr	r2, [pc, #52]	@ (80004c0 <LoopForever+0xe>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800048c:	e002      	b.n	8000494 <LoopCopyDataInit>

0800048e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000492:	3304      	adds	r3, #4

08000494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000498:	d3f9      	bcc.n	800048e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049a:	4a0a      	ldr	r2, [pc, #40]	@ (80004c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800049c:	4c0a      	ldr	r4, [pc, #40]	@ (80004c8 <LoopForever+0x16>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a0:	e001      	b.n	80004a6 <LoopFillZerobss>

080004a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a4:	3204      	adds	r2, #4

080004a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a8:	d3fb      	bcc.n	80004a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004aa:	f001 f945 	bl	8001738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ae:	f7ff fec5 	bl	800023c <main>

080004b2 <LoopForever>:

LoopForever:
    b LoopForever
 80004b2:	e7fe      	b.n	80004b2 <LoopForever>
  ldr   r0, =_estack
 80004b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004c0:	080017bc 	.word	0x080017bc
  ldr r2, =_sbss
 80004c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004c8:	2000002c 	.word	0x2000002c

080004cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC1_COMP_IRQHandler>
	...

080004d0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	2200      	movs	r2, #0
 80004da:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80004dc:	4b0b      	ldr	r3, [pc, #44]	@ (800050c <HAL_Init+0x3c>)
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <HAL_Init+0x3c>)
 80004e2:	2140      	movs	r1, #64	@ 0x40
 80004e4:	430a      	orrs	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 f811 	bl	8000510 <HAL_InitTick>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d003      	beq.n	80004fa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	e001      	b.n	80004fe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004fa:	f7ff ff83 	bl	8000404 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004fe:	1dfb      	adds	r3, r7, #7
 8000500:	781b      	ldrb	r3, [r3, #0]
}
 8000502:	0018      	movs	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	40022000 	.word	0x40022000

08000510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000518:	4b14      	ldr	r3, [pc, #80]	@ (800056c <HAL_InitTick+0x5c>)
 800051a:	681c      	ldr	r4, [r3, #0]
 800051c:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <HAL_InitTick+0x60>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	0019      	movs	r1, r3
 8000522:	23fa      	movs	r3, #250	@ 0xfa
 8000524:	0098      	lsls	r0, r3, #2
 8000526:	f7ff fdef 	bl	8000108 <__udivsi3>
 800052a:	0003      	movs	r3, r0
 800052c:	0019      	movs	r1, r3
 800052e:	0020      	movs	r0, r4
 8000530:	f7ff fdea 	bl	8000108 <__udivsi3>
 8000534:	0003      	movs	r3, r0
 8000536:	0018      	movs	r0, r3
 8000538:	f000 f94b 	bl	80007d2 <HAL_SYSTICK_Config>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000540:	2301      	movs	r3, #1
 8000542:	e00f      	b.n	8000564 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b03      	cmp	r3, #3
 8000548:	d80b      	bhi.n	8000562 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	2301      	movs	r3, #1
 800054e:	425b      	negs	r3, r3
 8000550:	2200      	movs	r2, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f000 f918 	bl	8000788 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <HAL_InitTick+0x64>)
 800055a:	687a      	ldr	r2, [r7, #4]
 800055c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800055e:	2300      	movs	r3, #0
 8000560:	e000      	b.n	8000564 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000562:	2301      	movs	r3, #1
}
 8000564:	0018      	movs	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	b003      	add	sp, #12
 800056a:	bd90      	pop	{r4, r7, pc}
 800056c:	20000000 	.word	0x20000000
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004

08000578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800057c:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <HAL_IncTick+0x1c>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	001a      	movs	r2, r3
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <HAL_IncTick+0x20>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	18d2      	adds	r2, r2, r3
 8000588:	4b03      	ldr	r3, [pc, #12]	@ (8000598 <HAL_IncTick+0x20>)
 800058a:	601a      	str	r2, [r3, #0]
}
 800058c:	46c0      	nop			@ (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	20000008 	.word	0x20000008
 8000598:	20000028 	.word	0x20000028

0800059c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  return uwTick;
 80005a0:	4b02      	ldr	r3, [pc, #8]	@ (80005ac <HAL_GetTick+0x10>)
 80005a2:	681b      	ldr	r3, [r3, #0]
}
 80005a4:	0018      	movs	r0, r3
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	20000028 	.word	0x20000028

080005b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b8:	f7ff fff0 	bl	800059c <HAL_GetTick>
 80005bc:	0003      	movs	r3, r0
 80005be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	3301      	adds	r3, #1
 80005c8:	d005      	beq.n	80005d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ca:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <HAL_Delay+0x44>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	001a      	movs	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	189b      	adds	r3, r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	f7ff ffe0 	bl	800059c <HAL_GetTick>
 80005dc:	0002      	movs	r2, r0
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d8f7      	bhi.n	80005d8 <HAL_Delay+0x28>
  {
  }
}
 80005e8:	46c0      	nop			@ (mov r8, r8)
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b004      	add	sp, #16
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	20000008 	.word	0x20000008

080005f8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80005fc:	4b04      	ldr	r3, [pc, #16]	@ (8000610 <HAL_SuspendTick+0x18>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b03      	ldr	r3, [pc, #12]	@ (8000610 <HAL_SuspendTick+0x18>)
 8000602:	2102      	movs	r1, #2
 8000604:	438a      	bics	r2, r1
 8000606:	601a      	str	r2, [r3, #0]
}
 8000608:	46c0      	nop			@ (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	e000e010 	.word	0xe000e010

08000614 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000618:	4b04      	ldr	r3, [pc, #16]	@ (800062c <HAL_ResumeTick+0x18>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b03      	ldr	r3, [pc, #12]	@ (800062c <HAL_ResumeTick+0x18>)
 800061e:	2102      	movs	r1, #2
 8000620:	430a      	orrs	r2, r1
 8000622:	601a      	str	r2, [r3, #0]
}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	e000e010 	.word	0xe000e010

08000630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	0002      	movs	r2, r0
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800063c:	1dfb      	adds	r3, r7, #7
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b7f      	cmp	r3, #127	@ 0x7f
 8000642:	d809      	bhi.n	8000658 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	001a      	movs	r2, r3
 800064a:	231f      	movs	r3, #31
 800064c:	401a      	ands	r2, r3
 800064e:	4b04      	ldr	r3, [pc, #16]	@ (8000660 <__NVIC_EnableIRQ+0x30>)
 8000650:	2101      	movs	r1, #1
 8000652:	4091      	lsls	r1, r2
 8000654:	000a      	movs	r2, r1
 8000656:	601a      	str	r2, [r3, #0]
  }
}
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b002      	add	sp, #8
 800065e:	bd80      	pop	{r7, pc}
 8000660:	e000e100 	.word	0xe000e100

08000664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	0002      	movs	r2, r0
 800066c:	6039      	str	r1, [r7, #0]
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b7f      	cmp	r3, #127	@ 0x7f
 8000678:	d828      	bhi.n	80006cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800067a:	4a2f      	ldr	r2, [pc, #188]	@ (8000738 <__NVIC_SetPriority+0xd4>)
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b25b      	sxtb	r3, r3
 8000682:	089b      	lsrs	r3, r3, #2
 8000684:	33c0      	adds	r3, #192	@ 0xc0
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	589b      	ldr	r3, [r3, r2]
 800068a:	1dfa      	adds	r2, r7, #7
 800068c:	7812      	ldrb	r2, [r2, #0]
 800068e:	0011      	movs	r1, r2
 8000690:	2203      	movs	r2, #3
 8000692:	400a      	ands	r2, r1
 8000694:	00d2      	lsls	r2, r2, #3
 8000696:	21ff      	movs	r1, #255	@ 0xff
 8000698:	4091      	lsls	r1, r2
 800069a:	000a      	movs	r2, r1
 800069c:	43d2      	mvns	r2, r2
 800069e:	401a      	ands	r2, r3
 80006a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	019b      	lsls	r3, r3, #6
 80006a6:	22ff      	movs	r2, #255	@ 0xff
 80006a8:	401a      	ands	r2, r3
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	0018      	movs	r0, r3
 80006b0:	2303      	movs	r3, #3
 80006b2:	4003      	ands	r3, r0
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006b8:	481f      	ldr	r0, [pc, #124]	@ (8000738 <__NVIC_SetPriority+0xd4>)
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	089b      	lsrs	r3, r3, #2
 80006c2:	430a      	orrs	r2, r1
 80006c4:	33c0      	adds	r3, #192	@ 0xc0
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006ca:	e031      	b.n	8000730 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006cc:	4a1b      	ldr	r2, [pc, #108]	@ (800073c <__NVIC_SetPriority+0xd8>)
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	0019      	movs	r1, r3
 80006d4:	230f      	movs	r3, #15
 80006d6:	400b      	ands	r3, r1
 80006d8:	3b08      	subs	r3, #8
 80006da:	089b      	lsrs	r3, r3, #2
 80006dc:	3306      	adds	r3, #6
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	18d3      	adds	r3, r2, r3
 80006e2:	3304      	adds	r3, #4
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	1dfa      	adds	r2, r7, #7
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	0011      	movs	r1, r2
 80006ec:	2203      	movs	r2, #3
 80006ee:	400a      	ands	r2, r1
 80006f0:	00d2      	lsls	r2, r2, #3
 80006f2:	21ff      	movs	r1, #255	@ 0xff
 80006f4:	4091      	lsls	r1, r2
 80006f6:	000a      	movs	r2, r1
 80006f8:	43d2      	mvns	r2, r2
 80006fa:	401a      	ands	r2, r3
 80006fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	019b      	lsls	r3, r3, #6
 8000702:	22ff      	movs	r2, #255	@ 0xff
 8000704:	401a      	ands	r2, r3
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	0018      	movs	r0, r3
 800070c:	2303      	movs	r3, #3
 800070e:	4003      	ands	r3, r0
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000714:	4809      	ldr	r0, [pc, #36]	@ (800073c <__NVIC_SetPriority+0xd8>)
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	001c      	movs	r4, r3
 800071c:	230f      	movs	r3, #15
 800071e:	4023      	ands	r3, r4
 8000720:	3b08      	subs	r3, #8
 8000722:	089b      	lsrs	r3, r3, #2
 8000724:	430a      	orrs	r2, r1
 8000726:	3306      	adds	r3, #6
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	18c3      	adds	r3, r0, r3
 800072c:	3304      	adds	r3, #4
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b003      	add	sp, #12
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	e000e100 	.word	0xe000e100
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1e5a      	subs	r2, r3, #1
 800074c:	2380      	movs	r3, #128	@ 0x80
 800074e:	045b      	lsls	r3, r3, #17
 8000750:	429a      	cmp	r2, r3
 8000752:	d301      	bcc.n	8000758 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000754:	2301      	movs	r3, #1
 8000756:	e010      	b.n	800077a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <SysTick_Config+0x44>)
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	3a01      	subs	r2, #1
 800075e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000760:	2301      	movs	r3, #1
 8000762:	425b      	negs	r3, r3
 8000764:	2103      	movs	r1, #3
 8000766:	0018      	movs	r0, r3
 8000768:	f7ff ff7c 	bl	8000664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <SysTick_Config+0x44>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <SysTick_Config+0x44>)
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000778:	2300      	movs	r3, #0
}
 800077a:	0018      	movs	r0, r3
 800077c:	46bd      	mov	sp, r7
 800077e:	b002      	add	sp, #8
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	e000e010 	.word	0xe000e010

08000788 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	60b9      	str	r1, [r7, #8]
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	210f      	movs	r1, #15
 8000794:	187b      	adds	r3, r7, r1
 8000796:	1c02      	adds	r2, r0, #0
 8000798:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	187b      	adds	r3, r7, r1
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	0011      	movs	r1, r2
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff ff5d 	bl	8000664 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b004      	add	sp, #16
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	0002      	movs	r2, r0
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007be:	1dfb      	adds	r3, r7, #7
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b25b      	sxtb	r3, r3
 80007c4:	0018      	movs	r0, r3
 80007c6:	f7ff ff33 	bl	8000630 <__NVIC_EnableIRQ>
}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b002      	add	sp, #8
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	0018      	movs	r0, r3
 80007de:	f7ff ffaf 	bl	8000740 <SysTick_Config>
 80007e2:	0003      	movs	r3, r0
}
 80007e4:	0018      	movs	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}

080007ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000802:	e14f      	b.n	8000aa4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2101      	movs	r1, #1
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	4091      	lsls	r1, r2
 800080e:	000a      	movs	r2, r1
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <HAL_GPIO_Init+0x30>
 800081a:	e140      	b.n	8000a9e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2203      	movs	r2, #3
 8000822:	4013      	ands	r3, r2
 8000824:	2b01      	cmp	r3, #1
 8000826:	d005      	beq.n	8000834 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2203      	movs	r2, #3
 800082e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000830:	2b02      	cmp	r3, #2
 8000832:	d130      	bne.n	8000896 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	2203      	movs	r2, #3
 8000840:	409a      	lsls	r2, r3
 8000842:	0013      	movs	r3, r2
 8000844:	43da      	mvns	r2, r3
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	4013      	ands	r3, r2
 800084a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	68da      	ldr	r2, [r3, #12]
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	409a      	lsls	r2, r3
 8000856:	0013      	movs	r3, r2
 8000858:	693a      	ldr	r2, [r7, #16]
 800085a:	4313      	orrs	r3, r2
 800085c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800086a:	2201      	movs	r2, #1
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	409a      	lsls	r2, r3
 8000870:	0013      	movs	r3, r2
 8000872:	43da      	mvns	r2, r3
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	4013      	ands	r3, r2
 8000878:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	091b      	lsrs	r3, r3, #4
 8000880:	2201      	movs	r2, #1
 8000882:	401a      	ands	r2, r3
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	409a      	lsls	r2, r3
 8000888:	0013      	movs	r3, r2
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	4313      	orrs	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2203      	movs	r2, #3
 800089c:	4013      	ands	r3, r2
 800089e:	2b03      	cmp	r3, #3
 80008a0:	d017      	beq.n	80008d2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	2203      	movs	r2, #3
 80008ae:	409a      	lsls	r2, r3
 80008b0:	0013      	movs	r3, r2
 80008b2:	43da      	mvns	r2, r3
 80008b4:	693b      	ldr	r3, [r7, #16]
 80008b6:	4013      	ands	r3, r2
 80008b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	689a      	ldr	r2, [r3, #8]
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	409a      	lsls	r2, r3
 80008c4:	0013      	movs	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2203      	movs	r2, #3
 80008d8:	4013      	ands	r3, r2
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d123      	bne.n	8000926 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	08da      	lsrs	r2, r3, #3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3208      	adds	r2, #8
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	58d3      	ldr	r3, [r2, r3]
 80008ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	2207      	movs	r2, #7
 80008f0:	4013      	ands	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	220f      	movs	r2, #15
 80008f6:	409a      	lsls	r2, r3
 80008f8:	0013      	movs	r3, r2
 80008fa:	43da      	mvns	r2, r3
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	691a      	ldr	r2, [r3, #16]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	2107      	movs	r1, #7
 800090a:	400b      	ands	r3, r1
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	409a      	lsls	r2, r3
 8000910:	0013      	movs	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	08da      	lsrs	r2, r3, #3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3208      	adds	r2, #8
 8000920:	0092      	lsls	r2, r2, #2
 8000922:	6939      	ldr	r1, [r7, #16]
 8000924:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	2203      	movs	r2, #3
 8000932:	409a      	lsls	r2, r3
 8000934:	0013      	movs	r3, r2
 8000936:	43da      	mvns	r2, r3
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	4013      	ands	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	2203      	movs	r2, #3
 8000944:	401a      	ands	r2, r3
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	409a      	lsls	r2, r3
 800094c:	0013      	movs	r3, r2
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4313      	orrs	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	23c0      	movs	r3, #192	@ 0xc0
 8000960:	029b      	lsls	r3, r3, #10
 8000962:	4013      	ands	r3, r2
 8000964:	d100      	bne.n	8000968 <HAL_GPIO_Init+0x17c>
 8000966:	e09a      	b.n	8000a9e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000968:	4b54      	ldr	r3, [pc, #336]	@ (8000abc <HAL_GPIO_Init+0x2d0>)
 800096a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800096c:	4b53      	ldr	r3, [pc, #332]	@ (8000abc <HAL_GPIO_Init+0x2d0>)
 800096e:	2101      	movs	r1, #1
 8000970:	430a      	orrs	r2, r1
 8000972:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000974:	4a52      	ldr	r2, [pc, #328]	@ (8000ac0 <HAL_GPIO_Init+0x2d4>)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	3302      	adds	r3, #2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	589b      	ldr	r3, [r3, r2]
 8000980:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	2203      	movs	r2, #3
 8000986:	4013      	ands	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	220f      	movs	r2, #15
 800098c:	409a      	lsls	r2, r3
 800098e:	0013      	movs	r3, r2
 8000990:	43da      	mvns	r2, r3
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	23a0      	movs	r3, #160	@ 0xa0
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	429a      	cmp	r2, r3
 80009a0:	d019      	beq.n	80009d6 <HAL_GPIO_Init+0x1ea>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a47      	ldr	r2, [pc, #284]	@ (8000ac4 <HAL_GPIO_Init+0x2d8>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d013      	beq.n	80009d2 <HAL_GPIO_Init+0x1e6>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a46      	ldr	r2, [pc, #280]	@ (8000ac8 <HAL_GPIO_Init+0x2dc>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d00d      	beq.n	80009ce <HAL_GPIO_Init+0x1e2>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a45      	ldr	r2, [pc, #276]	@ (8000acc <HAL_GPIO_Init+0x2e0>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d007      	beq.n	80009ca <HAL_GPIO_Init+0x1de>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a44      	ldr	r2, [pc, #272]	@ (8000ad0 <HAL_GPIO_Init+0x2e4>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <HAL_GPIO_Init+0x1da>
 80009c2:	2305      	movs	r3, #5
 80009c4:	e008      	b.n	80009d8 <HAL_GPIO_Init+0x1ec>
 80009c6:	2306      	movs	r3, #6
 80009c8:	e006      	b.n	80009d8 <HAL_GPIO_Init+0x1ec>
 80009ca:	2303      	movs	r3, #3
 80009cc:	e004      	b.n	80009d8 <HAL_GPIO_Init+0x1ec>
 80009ce:	2302      	movs	r3, #2
 80009d0:	e002      	b.n	80009d8 <HAL_GPIO_Init+0x1ec>
 80009d2:	2301      	movs	r3, #1
 80009d4:	e000      	b.n	80009d8 <HAL_GPIO_Init+0x1ec>
 80009d6:	2300      	movs	r3, #0
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	2103      	movs	r1, #3
 80009dc:	400a      	ands	r2, r1
 80009de:	0092      	lsls	r2, r2, #2
 80009e0:	4093      	lsls	r3, r2
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009e8:	4935      	ldr	r1, [pc, #212]	@ (8000ac0 <HAL_GPIO_Init+0x2d4>)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	3302      	adds	r3, #2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009f6:	4b37      	ldr	r3, [pc, #220]	@ (8000ad4 <HAL_GPIO_Init+0x2e8>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	43da      	mvns	r2, r3
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685a      	ldr	r2, [r3, #4]
 8000a0a:	2380      	movs	r3, #128	@ 0x80
 8000a0c:	035b      	lsls	r3, r3, #13
 8000a0e:	4013      	ands	r3, r2
 8000a10:	d003      	beq.n	8000a1a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad4 <HAL_GPIO_Init+0x2e8>)
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a20:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad4 <HAL_GPIO_Init+0x2e8>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	2380      	movs	r3, #128	@ 0x80
 8000a36:	039b      	lsls	r3, r3, #14
 8000a38:	4013      	ands	r3, r2
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a44:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <HAL_GPIO_Init+0x2e8>)
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000a4a:	4b22      	ldr	r3, [pc, #136]	@ (8000ad4 <HAL_GPIO_Init+0x2e8>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43da      	mvns	r2, r3
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	2380      	movs	r3, #128	@ 0x80
 8000a60:	029b      	lsls	r3, r3, #10
 8000a62:	4013      	ands	r3, r2
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <HAL_GPIO_Init+0x2e8>)
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <HAL_GPIO_Init+0x2e8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43da      	mvns	r2, r3
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	2380      	movs	r3, #128	@ 0x80
 8000a8a:	025b      	lsls	r3, r3, #9
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <HAL_GPIO_Init+0x2e8>)
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	40da      	lsrs	r2, r3
 8000aac:	1e13      	subs	r3, r2, #0
 8000aae:	d000      	beq.n	8000ab2 <HAL_GPIO_Init+0x2c6>
 8000ab0:	e6a8      	b.n	8000804 <HAL_GPIO_Init+0x18>
  }
}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b006      	add	sp, #24
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40010000 	.word	0x40010000
 8000ac4:	50000400 	.word	0x50000400
 8000ac8:	50000800 	.word	0x50000800
 8000acc:	50000c00 	.word	0x50000c00
 8000ad0:	50001c00 	.word	0x50001c00
 8000ad4:	40010400 	.word	0x40010400

08000ad8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	0008      	movs	r0, r1
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	1cbb      	adds	r3, r7, #2
 8000ae6:	1c02      	adds	r2, r0, #0
 8000ae8:	801a      	strh	r2, [r3, #0]
 8000aea:	1c7b      	adds	r3, r7, #1
 8000aec:	1c0a      	adds	r2, r1, #0
 8000aee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000af0:	1c7b      	adds	r3, r7, #1
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d004      	beq.n	8000b02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000af8:	1cbb      	adds	r3, r7, #2
 8000afa:	881a      	ldrh	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000b00:	e003      	b.n	8000b0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000b02:	1cbb      	adds	r3, r7, #2
 8000b04:	881a      	ldrh	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b002      	add	sp, #8
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	1dbb      	adds	r3, r7, #6
 8000b1e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b20:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	1dba      	adds	r2, r7, #6
 8000b26:	8812      	ldrh	r2, [r2, #0]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	d008      	beq.n	8000b3e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000b2e:	1dba      	adds	r2, r7, #6
 8000b30:	8812      	ldrh	r2, [r2, #0]
 8000b32:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b34:	1dbb      	adds	r3, r7, #6
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff fb71 	bl	8000220 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b002      	add	sp, #8
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	40010400 	.word	0x40010400

08000b4c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	000a      	movs	r2, r1
 8000b56:	1cfb      	adds	r3, r7, #3
 8000b58:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8000b5e:	4b25      	ldr	r3, [pc, #148]	@ (8000bf4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	2380      	movs	r3, #128	@ 0x80
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8000b6a:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <HAL_PWR_EnterSTOPMode+0xac>)
 8000b6c:	6a1b      	ldr	r3, [r3, #32]
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d008      	beq.n	8000b8c <HAL_PWR_EnterSTOPMode+0x40>
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d005      	beq.n	8000b8c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8000b80:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8000b86:	491d      	ldr	r1, [pc, #116]	@ (8000bfc <HAL_PWR_EnterSTOPMode+0xb0>)
 8000b88:	400a      	ands	r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8000b8c:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	2203      	movs	r2, #3
 8000b96:	4393      	bics	r3, r2
 8000b98:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8000b9a:	697a      	ldr	r2, [r7, #20]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8000ba8:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <HAL_PWR_EnterSTOPMode+0xb4>)
 8000baa:	691a      	ldr	r2, [r3, #16]
 8000bac:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <HAL_PWR_EnterSTOPMode+0xb4>)
 8000bae:	2104      	movs	r1, #4
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8000bb4:	1cfb      	adds	r3, r7, #3
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d101      	bne.n	8000bc0 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000bbc:	bf30      	wfi
 8000bbe:	e002      	b.n	8000bc6 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8000bc0:	bf40      	sev
    __WFE();
 8000bc2:	bf20      	wfe
    __WFE();
 8000bc4:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_PWR_EnterSTOPMode+0xb4>)
 8000bc8:	691a      	ldr	r2, [r3, #16]
 8000bca:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <HAL_PWR_EnterSTOPMode+0xb4>)
 8000bcc:	2104      	movs	r1, #4
 8000bce:	438a      	bics	r2, r1
 8000bd0:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d009      	beq.n	8000bec <HAL_PWR_EnterSTOPMode+0xa0>
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d006      	beq.n	8000bec <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8000bde:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	4b04      	ldr	r3, [pc, #16]	@ (8000bf4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8000be4:	2180      	movs	r1, #128	@ 0x80
 8000be6:	0089      	lsls	r1, r1, #2
 8000be8:	430a      	orrs	r2, r1
 8000bea:	601a      	str	r2, [r3, #0]
  }
}
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b006      	add	sp, #24
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40007000 	.word	0x40007000
 8000bf8:	40010000 	.word	0x40010000
 8000bfc:	fffffdff 	.word	0xfffffdff
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b08a      	sub	sp, #40	@ 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d102      	bne.n	8000c18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f000 fbaf 	bl	8001376 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c18:	4bcf      	ldr	r3, [pc, #828]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	4013      	ands	r3, r2
 8000c20:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c22:	4bcd      	ldr	r3, [pc, #820]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c24:	68da      	ldr	r2, [r3, #12]
 8000c26:	2380      	movs	r3, #128	@ 0x80
 8000c28:	025b      	lsls	r3, r3, #9
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2201      	movs	r2, #1
 8000c34:	4013      	ands	r3, r2
 8000c36:	d100      	bne.n	8000c3a <HAL_RCC_OscConfig+0x36>
 8000c38:	e07e      	b.n	8000d38 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	2b08      	cmp	r3, #8
 8000c3e:	d007      	beq.n	8000c50 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	2b0c      	cmp	r3, #12
 8000c44:	d112      	bne.n	8000c6c <HAL_RCC_OscConfig+0x68>
 8000c46:	69fa      	ldr	r2, [r7, #28]
 8000c48:	2380      	movs	r3, #128	@ 0x80
 8000c4a:	025b      	lsls	r3, r3, #9
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d10d      	bne.n	8000c6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c50:	4bc1      	ldr	r3, [pc, #772]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2380      	movs	r3, #128	@ 0x80
 8000c56:	029b      	lsls	r3, r3, #10
 8000c58:	4013      	ands	r3, r2
 8000c5a:	d100      	bne.n	8000c5e <HAL_RCC_OscConfig+0x5a>
 8000c5c:	e06b      	b.n	8000d36 <HAL_RCC_OscConfig+0x132>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d167      	bne.n	8000d36 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f000 fb85 	bl	8001376 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	2380      	movs	r3, #128	@ 0x80
 8000c72:	025b      	lsls	r3, r3, #9
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d107      	bne.n	8000c88 <HAL_RCC_OscConfig+0x84>
 8000c78:	4bb7      	ldr	r3, [pc, #732]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4bb6      	ldr	r3, [pc, #728]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c7e:	2180      	movs	r1, #128	@ 0x80
 8000c80:	0249      	lsls	r1, r1, #9
 8000c82:	430a      	orrs	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e027      	b.n	8000cd8 <HAL_RCC_OscConfig+0xd4>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	23a0      	movs	r3, #160	@ 0xa0
 8000c8e:	02db      	lsls	r3, r3, #11
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d10e      	bne.n	8000cb2 <HAL_RCC_OscConfig+0xae>
 8000c94:	4bb0      	ldr	r3, [pc, #704]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4baf      	ldr	r3, [pc, #700]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c9a:	2180      	movs	r1, #128	@ 0x80
 8000c9c:	02c9      	lsls	r1, r1, #11
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	4bad      	ldr	r3, [pc, #692]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4bac      	ldr	r3, [pc, #688]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000ca8:	2180      	movs	r1, #128	@ 0x80
 8000caa:	0249      	lsls	r1, r1, #9
 8000cac:	430a      	orrs	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	e012      	b.n	8000cd8 <HAL_RCC_OscConfig+0xd4>
 8000cb2:	4ba9      	ldr	r3, [pc, #676]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4ba8      	ldr	r3, [pc, #672]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000cb8:	49a8      	ldr	r1, [pc, #672]	@ (8000f5c <HAL_RCC_OscConfig+0x358>)
 8000cba:	400a      	ands	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	4ba6      	ldr	r3, [pc, #664]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	025b      	lsls	r3, r3, #9
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4ba2      	ldr	r3, [pc, #648]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4ba1      	ldr	r3, [pc, #644]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000cd2:	49a3      	ldr	r1, [pc, #652]	@ (8000f60 <HAL_RCC_OscConfig+0x35c>)
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d015      	beq.n	8000d0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fc5c 	bl	800059c <HAL_GetTick>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ce8:	e009      	b.n	8000cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cea:	f7ff fc57 	bl	800059c <HAL_GetTick>
 8000cee:	0002      	movs	r2, r0
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b64      	cmp	r3, #100	@ 0x64
 8000cf6:	d902      	bls.n	8000cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	f000 fb3c 	bl	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000cfe:	4b96      	ldr	r3, [pc, #600]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	2380      	movs	r3, #128	@ 0x80
 8000d04:	029b      	lsls	r3, r3, #10
 8000d06:	4013      	ands	r3, r2
 8000d08:	d0ef      	beq.n	8000cea <HAL_RCC_OscConfig+0xe6>
 8000d0a:	e015      	b.n	8000d38 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fc46 	bl	800059c <HAL_GetTick>
 8000d10:	0003      	movs	r3, r0
 8000d12:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d14:	e008      	b.n	8000d28 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d16:	f7ff fc41 	bl	800059c <HAL_GetTick>
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b64      	cmp	r3, #100	@ 0x64
 8000d22:	d901      	bls.n	8000d28 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e326      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d28:	4b8b      	ldr	r3, [pc, #556]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2380      	movs	r3, #128	@ 0x80
 8000d2e:	029b      	lsls	r3, r3, #10
 8000d30:	4013      	ands	r3, r2
 8000d32:	d1f0      	bne.n	8000d16 <HAL_RCC_OscConfig+0x112>
 8000d34:	e000      	b.n	8000d38 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d36:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d100      	bne.n	8000d44 <HAL_RCC_OscConfig+0x140>
 8000d42:	e08b      	b.n	8000e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d005      	beq.n	8000d5c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d50:	6a3b      	ldr	r3, [r7, #32]
 8000d52:	2b0c      	cmp	r3, #12
 8000d54:	d13e      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x1d0>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d13b      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2204      	movs	r2, #4
 8000d62:	4013      	ands	r3, r2
 8000d64:	d004      	beq.n	8000d70 <HAL_RCC_OscConfig+0x16c>
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e302      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d70:	4b79      	ldr	r3, [pc, #484]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	4a7b      	ldr	r2, [pc, #492]	@ (8000f64 <HAL_RCC_OscConfig+0x360>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	0019      	movs	r1, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	021a      	lsls	r2, r3, #8
 8000d80:	4b75      	ldr	r3, [pc, #468]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d82:	430a      	orrs	r2, r1
 8000d84:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000d86:	4b74      	ldr	r3, [pc, #464]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2209      	movs	r2, #9
 8000d8c:	4393      	bics	r3, r2
 8000d8e:	0019      	movs	r1, r3
 8000d90:	4b71      	ldr	r3, [pc, #452]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d98:	f000 fc40 	bl	800161c <HAL_RCC_GetSysClockFreq>
 8000d9c:	0001      	movs	r1, r0
 8000d9e:	4b6e      	ldr	r3, [pc, #440]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	220f      	movs	r2, #15
 8000da6:	4013      	ands	r3, r2
 8000da8:	4a6f      	ldr	r2, [pc, #444]	@ (8000f68 <HAL_RCC_OscConfig+0x364>)
 8000daa:	5cd3      	ldrb	r3, [r2, r3]
 8000dac:	000a      	movs	r2, r1
 8000dae:	40da      	lsrs	r2, r3
 8000db0:	4b6e      	ldr	r3, [pc, #440]	@ (8000f6c <HAL_RCC_OscConfig+0x368>)
 8000db2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000db4:	4b6e      	ldr	r3, [pc, #440]	@ (8000f70 <HAL_RCC_OscConfig+0x36c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2513      	movs	r5, #19
 8000dba:	197c      	adds	r4, r7, r5
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff fba7 	bl	8000510 <HAL_InitTick>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000dc6:	197b      	adds	r3, r7, r5
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d046      	beq.n	8000e5c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000dce:	197b      	adds	r3, r7, r5
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	e2d0      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d027      	beq.n	8000e2a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000dda:	4b5f      	ldr	r3, [pc, #380]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2209      	movs	r2, #9
 8000de0:	4393      	bics	r3, r2
 8000de2:	0019      	movs	r1, r3
 8000de4:	4b5c      	ldr	r3, [pc, #368]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fbd6 	bl	800059c <HAL_GetTick>
 8000df0:	0003      	movs	r3, r0
 8000df2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df6:	f7ff fbd1 	bl	800059c <HAL_GetTick>
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e2b6      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e08:	4b53      	ldr	r3, [pc, #332]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d0f1      	beq.n	8000df6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e12:	4b51      	ldr	r3, [pc, #324]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	4a53      	ldr	r2, [pc, #332]	@ (8000f64 <HAL_RCC_OscConfig+0x360>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	021a      	lsls	r2, r3, #8
 8000e22:	4b4d      	ldr	r3, [pc, #308]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e24:	430a      	orrs	r2, r1
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	e018      	b.n	8000e5c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e30:	2101      	movs	r1, #1
 8000e32:	438a      	bics	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e36:	f7ff fbb1 	bl	800059c <HAL_GetTick>
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e40:	f7ff fbac 	bl	800059c <HAL_GetTick>
 8000e44:	0002      	movs	r2, r0
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e291      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e52:	4b41      	ldr	r3, [pc, #260]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2204      	movs	r2, #4
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d1f1      	bne.n	8000e40 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2210      	movs	r2, #16
 8000e62:	4013      	ands	r3, r2
 8000e64:	d100      	bne.n	8000e68 <HAL_RCC_OscConfig+0x264>
 8000e66:	e0a1      	b.n	8000fac <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d140      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	2380      	movs	r3, #128	@ 0x80
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4013      	ands	r3, r2
 8000e78:	d005      	beq.n	8000e86 <HAL_RCC_OscConfig+0x282>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e277      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e86:	4b34      	ldr	r3, [pc, #208]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f74 <HAL_RCC_OscConfig+0x370>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	0019      	movs	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e94:	4b30      	ldr	r3, [pc, #192]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e96:	430a      	orrs	r2, r1
 8000e98:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	0a19      	lsrs	r1, r3, #8
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	061a      	lsls	r2, r3, #24
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb2:	0b5b      	lsrs	r3, r3, #13
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	2280      	movs	r2, #128	@ 0x80
 8000eb8:	0212      	lsls	r2, r2, #8
 8000eba:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000ebc:	4b26      	ldr	r3, [pc, #152]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	4928      	ldr	r1, [pc, #160]	@ (8000f68 <HAL_RCC_OscConfig+0x364>)
 8000ec8:	5ccb      	ldrb	r3, [r1, r3]
 8000eca:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ecc:	4b27      	ldr	r3, [pc, #156]	@ (8000f6c <HAL_RCC_OscConfig+0x368>)
 8000ece:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000ed0:	4b27      	ldr	r3, [pc, #156]	@ (8000f70 <HAL_RCC_OscConfig+0x36c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2513      	movs	r5, #19
 8000ed6:	197c      	adds	r4, r7, r5
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff fb19 	bl	8000510 <HAL_InitTick>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000ee2:	197b      	adds	r3, r7, r5
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d060      	beq.n	8000fac <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8000eea:	197b      	adds	r3, r7, r5
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	e242      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d03f      	beq.n	8000f78 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000efe:	2180      	movs	r1, #128	@ 0x80
 8000f00:	0049      	lsls	r1, r1, #1
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fb49 	bl	800059c <HAL_GetTick>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f10:	f7ff fb44 	bl	800059c <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e229      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	2380      	movs	r3, #128	@ 0x80
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d0f0      	beq.n	8000f10 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4a10      	ldr	r2, [pc, #64]	@ (8000f74 <HAL_RCC_OscConfig+0x370>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	0019      	movs	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f42:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	0a19      	lsrs	r1, r3, #8
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	061a      	lsls	r2, r3, #24
 8000f50:	4b01      	ldr	r3, [pc, #4]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000f52:	430a      	orrs	r2, r1
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	e029      	b.n	8000fac <HAL_RCC_OscConfig+0x3a8>
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	fffeffff 	.word	0xfffeffff
 8000f60:	fffbffff 	.word	0xfffbffff
 8000f64:	ffffe0ff 	.word	0xffffe0ff
 8000f68:	08001798 	.word	0x08001798
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000004 	.word	0x20000004
 8000f74:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f78:	4bbd      	ldr	r3, [pc, #756]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4bbc      	ldr	r3, [pc, #752]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000f7e:	49bd      	ldr	r1, [pc, #756]	@ (8001274 <HAL_RCC_OscConfig+0x670>)
 8000f80:	400a      	ands	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fb0a 	bl	800059c <HAL_GetTick>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f8e:	f7ff fb05 	bl	800059c <HAL_GetTick>
 8000f92:	0002      	movs	r2, r0
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e1ea      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fa0:	4bb3      	ldr	r3, [pc, #716]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2380      	movs	r3, #128	@ 0x80
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d1f0      	bne.n	8000f8e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d036      	beq.n	8001024 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d019      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fbe:	4bac      	ldr	r3, [pc, #688]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000fc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fc2:	4bab      	ldr	r3, [pc, #684]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fca:	f7ff fae7 	bl	800059c <HAL_GetTick>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fae2 	bl	800059c <HAL_GetTick>
 8000fd8:	0002      	movs	r2, r0
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e1c7      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000fe6:	4ba2      	ldr	r3, [pc, #648]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fea:	2202      	movs	r2, #2
 8000fec:	4013      	ands	r3, r2
 8000fee:	d0f1      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x3d0>
 8000ff0:	e018      	b.n	8001024 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff2:	4b9f      	ldr	r3, [pc, #636]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000ff4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000ff6:	4b9e      	ldr	r3, [pc, #632]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	438a      	bics	r2, r1
 8000ffc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffe:	f7ff facd 	bl	800059c <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001008:	f7ff fac8 	bl	800059c <HAL_GetTick>
 800100c:	0002      	movs	r2, r0
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1ad      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800101a:	4b95      	ldr	r3, [pc, #596]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 800101c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800101e:	2202      	movs	r2, #2
 8001020:	4013      	ands	r3, r2
 8001022:	d1f1      	bne.n	8001008 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2204      	movs	r2, #4
 800102a:	4013      	ands	r3, r2
 800102c:	d100      	bne.n	8001030 <HAL_RCC_OscConfig+0x42c>
 800102e:	e0ae      	b.n	800118e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001030:	2027      	movs	r0, #39	@ 0x27
 8001032:	183b      	adds	r3, r7, r0
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001038:	4b8d      	ldr	r3, [pc, #564]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 800103a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800103c:	2380      	movs	r3, #128	@ 0x80
 800103e:	055b      	lsls	r3, r3, #21
 8001040:	4013      	ands	r3, r2
 8001042:	d109      	bne.n	8001058 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001044:	4b8a      	ldr	r3, [pc, #552]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001048:	4b89      	ldr	r3, [pc, #548]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 800104a:	2180      	movs	r1, #128	@ 0x80
 800104c:	0549      	lsls	r1, r1, #21
 800104e:	430a      	orrs	r2, r1
 8001050:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001052:	183b      	adds	r3, r7, r0
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	4b87      	ldr	r3, [pc, #540]	@ (8001278 <HAL_RCC_OscConfig+0x674>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4013      	ands	r3, r2
 8001062:	d11a      	bne.n	800109a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001064:	4b84      	ldr	r3, [pc, #528]	@ (8001278 <HAL_RCC_OscConfig+0x674>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b83      	ldr	r3, [pc, #524]	@ (8001278 <HAL_RCC_OscConfig+0x674>)
 800106a:	2180      	movs	r1, #128	@ 0x80
 800106c:	0049      	lsls	r1, r1, #1
 800106e:	430a      	orrs	r2, r1
 8001070:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001072:	f7ff fa93 	bl	800059c <HAL_GetTick>
 8001076:	0003      	movs	r3, r0
 8001078:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800107c:	f7ff fa8e 	bl	800059c <HAL_GetTick>
 8001080:	0002      	movs	r2, r0
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	@ 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e173      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108e:	4b7a      	ldr	r3, [pc, #488]	@ (8001278 <HAL_RCC_OscConfig+0x674>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	2380      	movs	r3, #128	@ 0x80
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4013      	ands	r3, r2
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	2380      	movs	r3, #128	@ 0x80
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d107      	bne.n	80010b6 <HAL_RCC_OscConfig+0x4b2>
 80010a6:	4b72      	ldr	r3, [pc, #456]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010aa:	4b71      	ldr	r3, [pc, #452]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010ac:	2180      	movs	r1, #128	@ 0x80
 80010ae:	0049      	lsls	r1, r1, #1
 80010b0:	430a      	orrs	r2, r1
 80010b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80010b4:	e031      	b.n	800111a <HAL_RCC_OscConfig+0x516>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10c      	bne.n	80010d8 <HAL_RCC_OscConfig+0x4d4>
 80010be:	4b6c      	ldr	r3, [pc, #432]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010c4:	496b      	ldr	r1, [pc, #428]	@ (8001274 <HAL_RCC_OscConfig+0x670>)
 80010c6:	400a      	ands	r2, r1
 80010c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80010ca:	4b69      	ldr	r3, [pc, #420]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010ce:	4b68      	ldr	r3, [pc, #416]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010d0:	496a      	ldr	r1, [pc, #424]	@ (800127c <HAL_RCC_OscConfig+0x678>)
 80010d2:	400a      	ands	r2, r1
 80010d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80010d6:	e020      	b.n	800111a <HAL_RCC_OscConfig+0x516>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	23a0      	movs	r3, #160	@ 0xa0
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d10e      	bne.n	8001102 <HAL_RCC_OscConfig+0x4fe>
 80010e4:	4b62      	ldr	r3, [pc, #392]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010e8:	4b61      	ldr	r3, [pc, #388]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010ea:	2180      	movs	r1, #128	@ 0x80
 80010ec:	00c9      	lsls	r1, r1, #3
 80010ee:	430a      	orrs	r2, r1
 80010f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80010f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010f6:	4b5e      	ldr	r3, [pc, #376]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010f8:	2180      	movs	r1, #128	@ 0x80
 80010fa:	0049      	lsls	r1, r1, #1
 80010fc:	430a      	orrs	r2, r1
 80010fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001100:	e00b      	b.n	800111a <HAL_RCC_OscConfig+0x516>
 8001102:	4b5b      	ldr	r3, [pc, #364]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001104:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001106:	4b5a      	ldr	r3, [pc, #360]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001108:	495a      	ldr	r1, [pc, #360]	@ (8001274 <HAL_RCC_OscConfig+0x670>)
 800110a:	400a      	ands	r2, r1
 800110c:	651a      	str	r2, [r3, #80]	@ 0x50
 800110e:	4b58      	ldr	r3, [pc, #352]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001110:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001112:	4b57      	ldr	r3, [pc, #348]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001114:	4959      	ldr	r1, [pc, #356]	@ (800127c <HAL_RCC_OscConfig+0x678>)
 8001116:	400a      	ands	r2, r1
 8001118:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d015      	beq.n	800114e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001122:	f7ff fa3b 	bl	800059c <HAL_GetTick>
 8001126:	0003      	movs	r3, r0
 8001128:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800112a:	e009      	b.n	8001140 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800112c:	f7ff fa36 	bl	800059c <HAL_GetTick>
 8001130:	0002      	movs	r2, r0
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	4a52      	ldr	r2, [pc, #328]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e11a      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001140:	4b4b      	ldr	r3, [pc, #300]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001142:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4013      	ands	r3, r2
 800114a:	d0ef      	beq.n	800112c <HAL_RCC_OscConfig+0x528>
 800114c:	e014      	b.n	8001178 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114e:	f7ff fa25 	bl	800059c <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001156:	e009      	b.n	800116c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001158:	f7ff fa20 	bl	800059c <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	4a47      	ldr	r2, [pc, #284]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e104      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800116c:	4b40      	ldr	r3, [pc, #256]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 800116e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4013      	ands	r3, r2
 8001176:	d1ef      	bne.n	8001158 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001178:	2327      	movs	r3, #39	@ 0x27
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d105      	bne.n	800118e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001182:	4b3b      	ldr	r3, [pc, #236]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001186:	4b3a      	ldr	r3, [pc, #232]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001188:	493e      	ldr	r1, [pc, #248]	@ (8001284 <HAL_RCC_OscConfig+0x680>)
 800118a:	400a      	ands	r2, r1
 800118c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2220      	movs	r2, #32
 8001194:	4013      	ands	r3, r2
 8001196:	d049      	beq.n	800122c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d026      	beq.n	80011ee <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011a0:	4b33      	ldr	r3, [pc, #204]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	4b32      	ldr	r3, [pc, #200]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011a6:	2101      	movs	r1, #1
 80011a8:	430a      	orrs	r2, r1
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	4b30      	ldr	r3, [pc, #192]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011b2:	2101      	movs	r1, #1
 80011b4:	430a      	orrs	r2, r1
 80011b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80011b8:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <HAL_RCC_OscConfig+0x684>)
 80011ba:	6a1a      	ldr	r2, [r3, #32]
 80011bc:	4b32      	ldr	r3, [pc, #200]	@ (8001288 <HAL_RCC_OscConfig+0x684>)
 80011be:	2180      	movs	r1, #128	@ 0x80
 80011c0:	0189      	lsls	r1, r1, #6
 80011c2:	430a      	orrs	r2, r1
 80011c4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff f9e9 	bl	800059c <HAL_GetTick>
 80011ca:	0003      	movs	r3, r0
 80011cc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011d0:	f7ff f9e4 	bl	800059c <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e0c9      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2202      	movs	r2, #2
 80011e8:	4013      	ands	r3, r2
 80011ea:	d0f1      	beq.n	80011d0 <HAL_RCC_OscConfig+0x5cc>
 80011ec:	e01e      	b.n	800122c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80011ee:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011f4:	2101      	movs	r1, #1
 80011f6:	438a      	bics	r2, r1
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <HAL_RCC_OscConfig+0x684>)
 80011fc:	6a1a      	ldr	r2, [r3, #32]
 80011fe:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <HAL_RCC_OscConfig+0x684>)
 8001200:	4922      	ldr	r1, [pc, #136]	@ (800128c <HAL_RCC_OscConfig+0x688>)
 8001202:	400a      	ands	r2, r1
 8001204:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001206:	f7ff f9c9 	bl	800059c <HAL_GetTick>
 800120a:	0003      	movs	r3, r0
 800120c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001210:	f7ff f9c4 	bl	800059c <HAL_GetTick>
 8001214:	0002      	movs	r2, r0
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e0a9      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001222:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2202      	movs	r2, #2
 8001228:	4013      	ands	r3, r2
 800122a:	d1f1      	bne.n	8001210 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001230:	2b00      	cmp	r3, #0
 8001232:	d100      	bne.n	8001236 <HAL_RCC_OscConfig+0x632>
 8001234:	e09e      	b.n	8001374 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	2b0c      	cmp	r3, #12
 800123a:	d100      	bne.n	800123e <HAL_RCC_OscConfig+0x63a>
 800123c:	e077      	b.n	800132e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001242:	2b02      	cmp	r3, #2
 8001244:	d158      	bne.n	80012f8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 800124c:	4910      	ldr	r1, [pc, #64]	@ (8001290 <HAL_RCC_OscConfig+0x68c>)
 800124e:	400a      	ands	r2, r1
 8001250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff f9a3 	bl	800059c <HAL_GetTick>
 8001256:	0003      	movs	r3, r0
 8001258:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800125a:	e01b      	b.n	8001294 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800125c:	f7ff f99e 	bl	800059c <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d914      	bls.n	8001294 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e083      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	40021000 	.word	0x40021000
 8001274:	fffffeff 	.word	0xfffffeff
 8001278:	40007000 	.word	0x40007000
 800127c:	fffffbff 	.word	0xfffffbff
 8001280:	00001388 	.word	0x00001388
 8001284:	efffffff 	.word	0xefffffff
 8001288:	40010000 	.word	0x40010000
 800128c:	ffffdfff 	.word	0xffffdfff
 8001290:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001294:	4b3a      	ldr	r3, [pc, #232]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	049b      	lsls	r3, r3, #18
 800129c:	4013      	ands	r3, r2
 800129e:	d1dd      	bne.n	800125c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012a0:	4b37      	ldr	r3, [pc, #220]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	4a37      	ldr	r2, [pc, #220]	@ (8001384 <HAL_RCC_OscConfig+0x780>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	0019      	movs	r1, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b8:	431a      	orrs	r2, r3
 80012ba:	4b31      	ldr	r3, [pc, #196]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012bc:	430a      	orrs	r2, r1
 80012be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	0449      	lsls	r1, r1, #17
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7ff f965 	bl	800059c <HAL_GetTick>
 80012d2:	0003      	movs	r3, r0
 80012d4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d8:	f7ff f960 	bl	800059c <HAL_GetTick>
 80012dc:	0002      	movs	r2, r0
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e045      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012ea:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2380      	movs	r3, #128	@ 0x80
 80012f0:	049b      	lsls	r3, r3, #18
 80012f2:	4013      	ands	r3, r2
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x6d4>
 80012f6:	e03d      	b.n	8001374 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f8:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012fe:	4922      	ldr	r1, [pc, #136]	@ (8001388 <HAL_RCC_OscConfig+0x784>)
 8001300:	400a      	ands	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff f94a 	bl	800059c <HAL_GetTick>
 8001308:	0003      	movs	r3, r0
 800130a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130e:	f7ff f945 	bl	800059c <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e02a      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001320:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	049b      	lsls	r3, r3, #18
 8001328:	4013      	ands	r3, r2
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x70a>
 800132c:	e022      	b.n	8001374 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e01d      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	025b      	lsls	r3, r3, #9
 8001346:	401a      	ands	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800134c:	429a      	cmp	r2, r3
 800134e:	d10f      	bne.n	8001370 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	23f0      	movs	r3, #240	@ 0xf0
 8001354:	039b      	lsls	r3, r3, #14
 8001356:	401a      	ands	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135c:	429a      	cmp	r2, r3
 800135e:	d107      	bne.n	8001370 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	23c0      	movs	r3, #192	@ 0xc0
 8001364:	041b      	lsls	r3, r3, #16
 8001366:	401a      	ands	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800136c:	429a      	cmp	r2, r3
 800136e:	d001      	beq.n	8001374 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	0018      	movs	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	b00a      	add	sp, #40	@ 0x28
 800137c:	bdb0      	pop	{r4, r5, r7, pc}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	40021000 	.word	0x40021000
 8001384:	ff02ffff 	.word	0xff02ffff
 8001388:	feffffff 	.word	0xfeffffff

0800138c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e128      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013a0:	4b96      	ldr	r3, [pc, #600]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2201      	movs	r2, #1
 80013a6:	4013      	ands	r3, r2
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d91e      	bls.n	80013ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ae:	4b93      	ldr	r3, [pc, #588]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2201      	movs	r2, #1
 80013b4:	4393      	bics	r3, r2
 80013b6:	0019      	movs	r1, r3
 80013b8:	4b90      	ldr	r3, [pc, #576]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013c0:	f7ff f8ec 	bl	800059c <HAL_GetTick>
 80013c4:	0003      	movs	r3, r0
 80013c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c8:	e009      	b.n	80013de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ca:	f7ff f8e7 	bl	800059c <HAL_GetTick>
 80013ce:	0002      	movs	r2, r0
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	4a8a      	ldr	r2, [pc, #552]	@ (8001600 <HAL_RCC_ClockConfig+0x274>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e109      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013de:	4b87      	ldr	r3, [pc, #540]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2201      	movs	r2, #1
 80013e4:	4013      	ands	r3, r2
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d1ee      	bne.n	80013ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2202      	movs	r2, #2
 80013f2:	4013      	ands	r3, r2
 80013f4:	d009      	beq.n	800140a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f6:	4b83      	ldr	r3, [pc, #524]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	22f0      	movs	r2, #240	@ 0xf0
 80013fc:	4393      	bics	r3, r2
 80013fe:	0019      	movs	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	4b7f      	ldr	r3, [pc, #508]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001406:	430a      	orrs	r2, r1
 8001408:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2201      	movs	r2, #1
 8001410:	4013      	ands	r3, r2
 8001412:	d100      	bne.n	8001416 <HAL_RCC_ClockConfig+0x8a>
 8001414:	e089      	b.n	800152a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d107      	bne.n	800142e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800141e:	4b79      	ldr	r3, [pc, #484]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	029b      	lsls	r3, r3, #10
 8001426:	4013      	ands	r3, r2
 8001428:	d120      	bne.n	800146c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e0e1      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b03      	cmp	r3, #3
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001436:	4b73      	ldr	r3, [pc, #460]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	2380      	movs	r3, #128	@ 0x80
 800143c:	049b      	lsls	r3, r3, #18
 800143e:	4013      	ands	r3, r2
 8001440:	d114      	bne.n	800146c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e0d5      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d106      	bne.n	800145c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800144e:	4b6d      	ldr	r3, [pc, #436]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2204      	movs	r2, #4
 8001454:	4013      	ands	r3, r2
 8001456:	d109      	bne.n	800146c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0ca      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800145c:	4b69      	ldr	r3, [pc, #420]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4013      	ands	r3, r2
 8001466:	d101      	bne.n	800146c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0c2      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146c:	4b65      	ldr	r3, [pc, #404]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2203      	movs	r2, #3
 8001472:	4393      	bics	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4b62      	ldr	r3, [pc, #392]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 800147c:	430a      	orrs	r2, r1
 800147e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff f88c 	bl	800059c <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d111      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001490:	e009      	b.n	80014a6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001492:	f7ff f883 	bl	800059c <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	4a58      	ldr	r2, [pc, #352]	@ (8001600 <HAL_RCC_ClockConfig+0x274>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e0a5      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014a6:	4b57      	ldr	r3, [pc, #348]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	220c      	movs	r2, #12
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d1ef      	bne.n	8001492 <HAL_RCC_ClockConfig+0x106>
 80014b2:	e03a      	b.n	800152a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d111      	bne.n	80014e0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014bc:	e009      	b.n	80014d2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014be:	f7ff f86d 	bl	800059c <HAL_GetTick>
 80014c2:	0002      	movs	r2, r0
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001600 <HAL_RCC_ClockConfig+0x274>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e08f      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	220c      	movs	r2, #12
 80014d8:	4013      	ands	r3, r2
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	d1ef      	bne.n	80014be <HAL_RCC_ClockConfig+0x132>
 80014de:	e024      	b.n	800152a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d11b      	bne.n	8001520 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e8:	e009      	b.n	80014fe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ea:	f7ff f857 	bl	800059c <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	4a42      	ldr	r2, [pc, #264]	@ (8001600 <HAL_RCC_ClockConfig+0x274>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e079      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014fe:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	220c      	movs	r2, #12
 8001504:	4013      	ands	r3, r2
 8001506:	2b04      	cmp	r3, #4
 8001508:	d1ef      	bne.n	80014ea <HAL_RCC_ClockConfig+0x15e>
 800150a:	e00e      	b.n	800152a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150c:	f7ff f846 	bl	800059c <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	4a3a      	ldr	r2, [pc, #232]	@ (8001600 <HAL_RCC_ClockConfig+0x274>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e068      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001520:	4b38      	ldr	r3, [pc, #224]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	220c      	movs	r2, #12
 8001526:	4013      	ands	r3, r2
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800152a:	4b34      	ldr	r3, [pc, #208]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2201      	movs	r2, #1
 8001530:	4013      	ands	r3, r2
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d21e      	bcs.n	8001576 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001538:	4b30      	ldr	r3, [pc, #192]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2201      	movs	r2, #1
 800153e:	4393      	bics	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	4b2e      	ldr	r3, [pc, #184]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800154a:	f7ff f827 	bl	800059c <HAL_GetTick>
 800154e:	0003      	movs	r3, r0
 8001550:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	e009      	b.n	8001568 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001554:	f7ff f822 	bl	800059c <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	4a28      	ldr	r2, [pc, #160]	@ (8001600 <HAL_RCC_ClockConfig+0x274>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e044      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001568:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2201      	movs	r2, #1
 800156e:	4013      	ands	r3, r2
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d1ee      	bne.n	8001554 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2204      	movs	r2, #4
 800157c:	4013      	ands	r3, r2
 800157e:	d009      	beq.n	8001594 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4a20      	ldr	r2, [pc, #128]	@ (8001608 <HAL_RCC_ClockConfig+0x27c>)
 8001586:	4013      	ands	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001590:	430a      	orrs	r2, r1
 8001592:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2208      	movs	r2, #8
 800159a:	4013      	ands	r3, r2
 800159c:	d00a      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	4a1a      	ldr	r2, [pc, #104]	@ (800160c <HAL_RCC_ClockConfig+0x280>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	00da      	lsls	r2, r3, #3
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 80015b0:	430a      	orrs	r2, r1
 80015b2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015b4:	f000 f832 	bl	800161c <HAL_RCC_GetSysClockFreq>
 80015b8:	0001      	movs	r1, r0
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	220f      	movs	r2, #15
 80015c2:	4013      	ands	r3, r2
 80015c4:	4a12      	ldr	r2, [pc, #72]	@ (8001610 <HAL_RCC_ClockConfig+0x284>)
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	000a      	movs	r2, r1
 80015ca:	40da      	lsrs	r2, r3
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <HAL_RCC_ClockConfig+0x288>)
 80015ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_RCC_ClockConfig+0x28c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	250b      	movs	r5, #11
 80015d6:	197c      	adds	r4, r7, r5
 80015d8:	0018      	movs	r0, r3
 80015da:	f7fe ff99 	bl	8000510 <HAL_InitTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80015e2:	197b      	adds	r3, r7, r5
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80015ea:	197b      	adds	r3, r7, r5
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	e000      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b004      	add	sp, #16
 80015f8:	bdb0      	pop	{r4, r5, r7, pc}
 80015fa:	46c0      	nop			@ (mov r8, r8)
 80015fc:	40022000 	.word	0x40022000
 8001600:	00001388 	.word	0x00001388
 8001604:	40021000 	.word	0x40021000
 8001608:	fffff8ff 	.word	0xfffff8ff
 800160c:	ffffc7ff 	.word	0xffffc7ff
 8001610:	08001798 	.word	0x08001798
 8001614:	20000000 	.word	0x20000000
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001622:	4b3c      	ldr	r3, [pc, #240]	@ (8001714 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	220c      	movs	r2, #12
 800162c:	4013      	ands	r3, r2
 800162e:	2b0c      	cmp	r3, #12
 8001630:	d013      	beq.n	800165a <HAL_RCC_GetSysClockFreq+0x3e>
 8001632:	d85c      	bhi.n	80016ee <HAL_RCC_GetSysClockFreq+0xd2>
 8001634:	2b04      	cmp	r3, #4
 8001636:	d002      	beq.n	800163e <HAL_RCC_GetSysClockFreq+0x22>
 8001638:	2b08      	cmp	r3, #8
 800163a:	d00b      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x38>
 800163c:	e057      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800163e:	4b35      	ldr	r3, [pc, #212]	@ (8001714 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2210      	movs	r2, #16
 8001644:	4013      	ands	r3, r2
 8001646:	d002      	beq.n	800164e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001648:	4b33      	ldr	r3, [pc, #204]	@ (8001718 <HAL_RCC_GetSysClockFreq+0xfc>)
 800164a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800164c:	e05d      	b.n	800170a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800164e:	4b33      	ldr	r3, [pc, #204]	@ (800171c <HAL_RCC_GetSysClockFreq+0x100>)
 8001650:	613b      	str	r3, [r7, #16]
      break;
 8001652:	e05a      	b.n	800170a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001654:	4b32      	ldr	r3, [pc, #200]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x104>)
 8001656:	613b      	str	r3, [r7, #16]
      break;
 8001658:	e057      	b.n	800170a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	0c9b      	lsrs	r3, r3, #18
 800165e:	220f      	movs	r2, #15
 8001660:	4013      	ands	r3, r2
 8001662:	4a30      	ldr	r2, [pc, #192]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x108>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	0d9b      	lsrs	r3, r3, #22
 800166c:	2203      	movs	r2, #3
 800166e:	4013      	ands	r3, r2
 8001670:	3301      	adds	r3, #1
 8001672:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001674:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	2380      	movs	r3, #128	@ 0x80
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	4013      	ands	r3, r2
 800167e:	d00f      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	000a      	movs	r2, r1
 8001684:	0152      	lsls	r2, r2, #5
 8001686:	1a52      	subs	r2, r2, r1
 8001688:	0193      	lsls	r3, r2, #6
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	185b      	adds	r3, r3, r1
 8001690:	025b      	lsls	r3, r3, #9
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	0018      	movs	r0, r3
 8001696:	f7fe fd37 	bl	8000108 <__udivsi3>
 800169a:	0003      	movs	r3, r0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e023      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80016a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2210      	movs	r2, #16
 80016a6:	4013      	ands	r3, r2
 80016a8:	d00f      	beq.n	80016ca <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	000a      	movs	r2, r1
 80016ae:	0152      	lsls	r2, r2, #5
 80016b0:	1a52      	subs	r2, r2, r1
 80016b2:	0193      	lsls	r3, r2, #6
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	185b      	adds	r3, r3, r1
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	0018      	movs	r0, r3
 80016c0:	f7fe fd22 	bl	8000108 <__udivsi3>
 80016c4:	0003      	movs	r3, r0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e00e      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	000a      	movs	r2, r1
 80016ce:	0152      	lsls	r2, r2, #5
 80016d0:	1a52      	subs	r2, r2, r1
 80016d2:	0193      	lsls	r3, r2, #6
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	185b      	adds	r3, r3, r1
 80016da:	029b      	lsls	r3, r3, #10
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	0018      	movs	r0, r3
 80016e0:	f7fe fd12 	bl	8000108 <__udivsi3>
 80016e4:	0003      	movs	r3, r0
 80016e6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
      break;
 80016ec:	e00d      	b.n	800170a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	0b5b      	lsrs	r3, r3, #13
 80016f4:	2207      	movs	r2, #7
 80016f6:	4013      	ands	r3, r2
 80016f8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	2280      	movs	r2, #128	@ 0x80
 8001700:	0212      	lsls	r2, r2, #8
 8001702:	409a      	lsls	r2, r3
 8001704:	0013      	movs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      break;
 8001708:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800170a:	693b      	ldr	r3, [r7, #16]
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b006      	add	sp, #24
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	003d0900 	.word	0x003d0900
 800171c:	00f42400 	.word	0x00f42400
 8001720:	007a1200 	.word	0x007a1200
 8001724:	080017a8 	.word	0x080017a8

08001728 <memset>:
 8001728:	0003      	movs	r3, r0
 800172a:	1882      	adds	r2, r0, r2
 800172c:	4293      	cmp	r3, r2
 800172e:	d100      	bne.n	8001732 <memset+0xa>
 8001730:	4770      	bx	lr
 8001732:	7019      	strb	r1, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	e7f9      	b.n	800172c <memset+0x4>

08001738 <__libc_init_array>:
 8001738:	b570      	push	{r4, r5, r6, lr}
 800173a:	2600      	movs	r6, #0
 800173c:	4c0c      	ldr	r4, [pc, #48]	@ (8001770 <__libc_init_array+0x38>)
 800173e:	4d0d      	ldr	r5, [pc, #52]	@ (8001774 <__libc_init_array+0x3c>)
 8001740:	1b64      	subs	r4, r4, r5
 8001742:	10a4      	asrs	r4, r4, #2
 8001744:	42a6      	cmp	r6, r4
 8001746:	d109      	bne.n	800175c <__libc_init_array+0x24>
 8001748:	2600      	movs	r6, #0
 800174a:	f000 f819 	bl	8001780 <_init>
 800174e:	4c0a      	ldr	r4, [pc, #40]	@ (8001778 <__libc_init_array+0x40>)
 8001750:	4d0a      	ldr	r5, [pc, #40]	@ (800177c <__libc_init_array+0x44>)
 8001752:	1b64      	subs	r4, r4, r5
 8001754:	10a4      	asrs	r4, r4, #2
 8001756:	42a6      	cmp	r6, r4
 8001758:	d105      	bne.n	8001766 <__libc_init_array+0x2e>
 800175a:	bd70      	pop	{r4, r5, r6, pc}
 800175c:	00b3      	lsls	r3, r6, #2
 800175e:	58eb      	ldr	r3, [r5, r3]
 8001760:	4798      	blx	r3
 8001762:	3601      	adds	r6, #1
 8001764:	e7ee      	b.n	8001744 <__libc_init_array+0xc>
 8001766:	00b3      	lsls	r3, r6, #2
 8001768:	58eb      	ldr	r3, [r5, r3]
 800176a:	4798      	blx	r3
 800176c:	3601      	adds	r6, #1
 800176e:	e7f2      	b.n	8001756 <__libc_init_array+0x1e>
 8001770:	080017b4 	.word	0x080017b4
 8001774:	080017b4 	.word	0x080017b4
 8001778:	080017b8 	.word	0x080017b8
 800177c:	080017b4 	.word	0x080017b4

08001780 <_init>:
 8001780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001782:	46c0      	nop			@ (mov r8, r8)
 8001784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001786:	bc08      	pop	{r3}
 8001788:	469e      	mov	lr, r3
 800178a:	4770      	bx	lr

0800178c <_fini>:
 800178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001792:	bc08      	pop	{r3}
 8001794:	469e      	mov	lr, r3
 8001796:	4770      	bx	lr

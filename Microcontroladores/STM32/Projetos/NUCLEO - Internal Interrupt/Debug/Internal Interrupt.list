
Internal Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e08  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001ec8  08001ec8  00002ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ee4  08001ee4  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001ee4  08001ee4  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001ee4  08001ee4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ee4  08001ee4  00002ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ee8  08001ee8  00002ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001eec  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08001ef8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08001ef8  00003074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fb1  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b0  00000000  00000000  00009fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0000b498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fe  00000000  00000000  0000bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012ac9  00000000  00000000  0000c27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000879a  00000000  00000000  0001ed47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000752cf  00000000  00000000  000274e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c7b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bac  00000000  00000000  0009c7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0009e3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001eb0 	.word	0x08001eb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001eb0 	.word	0x08001eb0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <HAL_TIM_PeriodElapsedCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if(&htim2 == htim){
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800022c:	429a      	cmp	r2, r3
 800022e:	d105      	bne.n	800023c <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD_YELLOW_GPIO_Port, LD_YELLOW_Pin);
 8000230:	23a0      	movs	r3, #160	@ 0xa0
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	2140      	movs	r1, #64	@ 0x40
 8000236:	0018      	movs	r0, r3
 8000238:	f000 fcad 	bl	8000b96 <HAL_GPIO_TogglePin>
	}
}
 800023c:	46c0      	nop			@ (mov r8, r8)
 800023e:	46bd      	mov	sp, r7
 8000240:	b002      	add	sp, #8
 8000242:	bd80      	pop	{r7, pc}
 8000244:	20000028 	.word	0x20000028

08000248 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	0002      	movs	r2, r0
 8000250:	1dbb      	adds	r3, r7, #6
 8000252:	801a      	strh	r2, [r3, #0]
	uint32_t atual_tick = HAL_GetTick();
 8000254:	f000 fa24 	bl	80006a0 <HAL_GetTick>
 8000258:	0003      	movs	r3, r0
 800025a:	60fb      	str	r3, [r7, #12]
	static uint32_t bref_tick = 0;

	if(GPIO_Pin == SW_INPUT_Pin){
 800025c:	1dbb      	adds	r3, r7, #6
 800025e:	881b      	ldrh	r3, [r3, #0]
 8000260:	2b20      	cmp	r3, #32
 8000262:	d10e      	bne.n	8000282 <HAL_GPIO_EXTI_Callback+0x3a>
		if((atual_tick - bref_tick) > 20) {
 8000264:	4b09      	ldr	r3, [pc, #36]	@ (800028c <HAL_GPIO_EXTI_Callback+0x44>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	1ad3      	subs	r3, r2, r3
 800026c:	2b14      	cmp	r3, #20
 800026e:	d908      	bls.n	8000282 <HAL_GPIO_EXTI_Callback+0x3a>
			count++;
 8000270:	4b07      	ldr	r3, [pc, #28]	@ (8000290 <HAL_GPIO_EXTI_Callback+0x48>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	3301      	adds	r3, #1
 8000276:	b2da      	uxtb	r2, r3
 8000278:	4b05      	ldr	r3, [pc, #20]	@ (8000290 <HAL_GPIO_EXTI_Callback+0x48>)
 800027a:	701a      	strb	r2, [r3, #0]
			bref_tick = atual_tick;
 800027c:	4b03      	ldr	r3, [pc, #12]	@ (800028c <HAL_GPIO_EXTI_Callback+0x44>)
 800027e:	68fa      	ldr	r2, [r7, #12]
 8000280:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000282:	46c0      	nop			@ (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	b004      	add	sp, #16
 8000288:	bd80      	pop	{r7, pc}
 800028a:	46c0      	nop			@ (mov r8, r8)
 800028c:	2000006c 	.word	0x2000006c
 8000290:	20000068 	.word	0x20000068

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000298:	f000 f99c 	bl	80005d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029c:	f000 f80c 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a0:	f000 f8b2 	bl	8000408 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002a4:	f000 f85c 	bl	8000360 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80002a8:	4b02      	ldr	r3, [pc, #8]	@ (80002b4 <main+0x20>)
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 fa7c 	bl	80017a8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b0:	46c0      	nop			@ (mov r8, r8)
 80002b2:	e7fd      	b.n	80002b0 <main+0x1c>
 80002b4:	20000028 	.word	0x20000028

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b095      	sub	sp, #84	@ 0x54
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	2418      	movs	r4, #24
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	2338      	movs	r3, #56	@ 0x38
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f001 fdc5 	bl	8001e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	0018      	movs	r0, r3
 80002d2:	2314      	movs	r3, #20
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f001 fdbe 	bl	8001e58 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <SystemClock_Config+0xa0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1e      	ldr	r2, [pc, #120]	@ (800035c <SystemClock_Config+0xa4>)
 80002e2:	401a      	ands	r2, r3
 80002e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000358 <SystemClock_Config+0xa0>)
 80002e6:	2180      	movs	r1, #128	@ 0x80
 80002e8:	0109      	lsls	r1, r1, #4
 80002ea:	430a      	orrs	r2, r1
 80002ec:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002ee:	0021      	movs	r1, r4
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2210      	movs	r2, #16
 80002f4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2201      	movs	r2, #1
 80002fa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	22a0      	movs	r2, #160	@ 0xa0
 8000306:	0212      	lsls	r2, r2, #8
 8000308:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2200      	movs	r2, #0
 800030e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000310:	187b      	adds	r3, r7, r1
 8000312:	0018      	movs	r0, r3
 8000314:	f000 fc76 	bl	8000c04 <HAL_RCC_OscConfig>
 8000318:	1e03      	subs	r3, r0, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800031c:	f000 f8c4 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	220f      	movs	r2, #15
 8000324:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2100      	movs	r1, #0
 8000342:	0018      	movs	r0, r3
 8000344:	f001 f822 	bl	800138c <HAL_RCC_ClockConfig>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800034c:	f000 f8ac 	bl	80004a8 <Error_Handler>
  }
}
 8000350:	46c0      	nop			@ (mov r8, r8)
 8000352:	46bd      	mov	sp, r7
 8000354:	b015      	add	sp, #84	@ 0x54
 8000356:	bd90      	pop	{r4, r7, pc}
 8000358:	40007000 	.word	0x40007000
 800035c:	ffffe7ff 	.word	0xffffe7ff

08000360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000366:	2308      	movs	r3, #8
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	0018      	movs	r0, r3
 800036c:	2310      	movs	r3, #16
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f001 fd71 	bl	8001e58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000376:	003b      	movs	r3, r7
 8000378:	0018      	movs	r0, r3
 800037a:	2308      	movs	r3, #8
 800037c:	001a      	movs	r2, r3
 800037e:	2100      	movs	r1, #0
 8000380:	f001 fd6a 	bl	8001e58 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000384:	4b1e      	ldr	r3, [pc, #120]	@ (8000400 <MX_TIM2_Init+0xa0>)
 8000386:	2280      	movs	r2, #128	@ 0x80
 8000388:	05d2      	lsls	r2, r2, #23
 800038a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 800038c:	4b1c      	ldr	r3, [pc, #112]	@ (8000400 <MX_TIM2_Init+0xa0>)
 800038e:	4a1d      	ldr	r2, [pc, #116]	@ (8000404 <MX_TIM2_Init+0xa4>)
 8000390:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000392:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_TIM2_Init+0xa0>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000398:	4b19      	ldr	r3, [pc, #100]	@ (8000400 <MX_TIM2_Init+0xa0>)
 800039a:	2263      	movs	r2, #99	@ 0x63
 800039c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800039e:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <MX_TIM2_Init+0xa0>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a4:	4b16      	ldr	r3, [pc, #88]	@ (8000400 <MX_TIM2_Init+0xa0>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003aa:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <MX_TIM2_Init+0xa0>)
 80003ac:	0018      	movs	r0, r3
 80003ae:	f001 f9bb 	bl	8001728 <HAL_TIM_Base_Init>
 80003b2:	1e03      	subs	r3, r0, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80003b6:	f000 f877 	bl	80004a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ba:	2108      	movs	r1, #8
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2280      	movs	r2, #128	@ 0x80
 80003c0:	0152      	lsls	r2, r2, #5
 80003c2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003c4:	187a      	adds	r2, r7, r1
 80003c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000400 <MX_TIM2_Init+0xa0>)
 80003c8:	0011      	movs	r1, r2
 80003ca:	0018      	movs	r0, r3
 80003cc:	f001 fb04 	bl	80019d8 <HAL_TIM_ConfigClockSource>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80003d4:	f000 f868 	bl	80004a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d8:	003b      	movs	r3, r7
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003de:	003b      	movs	r3, r7
 80003e0:	2200      	movs	r2, #0
 80003e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003e4:	003a      	movs	r2, r7
 80003e6:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <MX_TIM2_Init+0xa0>)
 80003e8:	0011      	movs	r1, r2
 80003ea:	0018      	movs	r0, r3
 80003ec:	f001 fcdc 	bl	8001da8 <HAL_TIMEx_MasterConfigSynchronization>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80003f4:	f000 f858 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003f8:	46c0      	nop			@ (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b006      	add	sp, #24
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000028 	.word	0x20000028
 8000404:	00001f3f 	.word	0x00001f3f

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	0018      	movs	r0, r3
 8000412:	2314      	movs	r3, #20
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f001 fd1e 	bl	8001e58 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <MX_GPIO_Init+0x9c>)
 800041e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000420:	4b20      	ldr	r3, [pc, #128]	@ (80004a4 <MX_GPIO_Init+0x9c>)
 8000422:	2101      	movs	r1, #1
 8000424:	430a      	orrs	r2, r1
 8000426:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <MX_GPIO_Init+0x9c>)
 800042a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800042c:	2201      	movs	r2, #1
 800042e:	4013      	ands	r3, r2
 8000430:	603b      	str	r3, [r7, #0]
 8000432:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_YELLOW_GPIO_Port, LD_YELLOW_Pin, GPIO_PIN_RESET);
 8000434:	23a0      	movs	r3, #160	@ 0xa0
 8000436:	05db      	lsls	r3, r3, #23
 8000438:	2200      	movs	r2, #0
 800043a:	2140      	movs	r1, #64	@ 0x40
 800043c:	0018      	movs	r0, r3
 800043e:	f000 fb8d 	bl	8000b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_INPUT_Pin */
  GPIO_InitStruct.Pin = SW_INPUT_Pin;
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2220      	movs	r2, #32
 8000446:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2284      	movs	r2, #132	@ 0x84
 800044c:	0392      	lsls	r2, r2, #14
 800044e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2201      	movs	r2, #1
 8000454:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000456:	1d3a      	adds	r2, r7, #4
 8000458:	23a0      	movs	r3, #160	@ 0xa0
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	0011      	movs	r1, r2
 800045e:	0018      	movs	r0, r3
 8000460:	f000 fa06 	bl	8000870 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_YELLOW_Pin */
  GPIO_InitStruct.Pin = LD_YELLOW_Pin;
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2240      	movs	r2, #64	@ 0x40
 8000468:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2201      	movs	r2, #1
 800046e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800047c:	1d3a      	adds	r2, r7, #4
 800047e:	23a0      	movs	r3, #160	@ 0xa0
 8000480:	05db      	lsls	r3, r3, #23
 8000482:	0011      	movs	r1, r2
 8000484:	0018      	movs	r0, r3
 8000486:	f000 f9f3 	bl	8000870 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2100      	movs	r1, #0
 800048e:	2007      	movs	r0, #7
 8000490:	f000 f9bc 	bl	800080c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000494:	2007      	movs	r0, #7
 8000496:	f000 f9ce 	bl	8000836 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800049a:	46c0      	nop			@ (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b006      	add	sp, #24
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	40021000 	.word	0x40021000

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	46c0      	nop			@ (mov r8, r8)
 80004b2:	e7fd      	b.n	80004b0 <Error_Handler+0x8>

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b8:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <HAL_MspInit+0x24>)
 80004ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <HAL_MspInit+0x24>)
 80004be:	2101      	movs	r1, #1
 80004c0:	430a      	orrs	r2, r1
 80004c2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c4:	4b04      	ldr	r3, [pc, #16]	@ (80004d8 <HAL_MspInit+0x24>)
 80004c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80004c8:	4b03      	ldr	r3, [pc, #12]	@ (80004d8 <HAL_MspInit+0x24>)
 80004ca:	2180      	movs	r1, #128	@ 0x80
 80004cc:	0549      	lsls	r1, r1, #21
 80004ce:	430a      	orrs	r2, r1
 80004d0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40021000 	.word	0x40021000

080004dc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	2380      	movs	r3, #128	@ 0x80
 80004ea:	05db      	lsls	r3, r3, #23
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d10d      	bne.n	800050c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004f0:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <HAL_TIM_Base_MspInit+0x38>)
 80004f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80004f4:	4b07      	ldr	r3, [pc, #28]	@ (8000514 <HAL_TIM_Base_MspInit+0x38>)
 80004f6:	2101      	movs	r1, #1
 80004f8:	430a      	orrs	r2, r1
 80004fa:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2100      	movs	r1, #0
 8000500:	200f      	movs	r0, #15
 8000502:	f000 f983 	bl	800080c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000506:	200f      	movs	r0, #15
 8000508:	f000 f995 	bl	8000836 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000

08000518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	e7fd      	b.n	800051c <NMI_Handler+0x4>

08000520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	e7fd      	b.n	8000524 <HardFault_Handler+0x4>

08000528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800052c:	46c0      	nop			@ (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000540:	f000 f89c 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_INPUT_Pin);
 800054e:	2020      	movs	r0, #32
 8000550:	f000 fb3c 	bl	8000bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000554:	46c0      	nop			@ (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000560:	4b03      	ldr	r3, [pc, #12]	@ (8000570 <TIM2_IRQHandler+0x14>)
 8000562:	0018      	movs	r0, r3
 8000564:	f001 f96c 	bl	8001840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000568:	46c0      	nop			@ (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	20000028 	.word	0x20000028

08000574 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000578:	46c0      	nop			@ (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000580:	480d      	ldr	r0, [pc, #52]	@ (80005b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000582:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000584:	f7ff fff6 	bl	8000574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000588:	480c      	ldr	r0, [pc, #48]	@ (80005bc <LoopForever+0x6>)
  ldr r1, =_edata
 800058a:	490d      	ldr	r1, [pc, #52]	@ (80005c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800058c:	4a0d      	ldr	r2, [pc, #52]	@ (80005c4 <LoopForever+0xe>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000590:	e002      	b.n	8000598 <LoopCopyDataInit>

08000592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000596:	3304      	adds	r3, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800059c:	d3f9      	bcc.n	8000592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059e:	4a0a      	ldr	r2, [pc, #40]	@ (80005c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a0:	4c0a      	ldr	r4, [pc, #40]	@ (80005cc <LoopForever+0x16>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a4:	e001      	b.n	80005aa <LoopFillZerobss>

080005a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a8:	3204      	adds	r2, #4

080005aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ac:	d3fb      	bcc.n	80005a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ae:	f001 fc5b 	bl	8001e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005b2:	f7ff fe6f 	bl	8000294 <main>

080005b6 <LoopForever>:

LoopForever:
    b LoopForever
 80005b6:	e7fe      	b.n	80005b6 <LoopForever>
  ldr   r0, =_estack
 80005b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005c4:	08001eec 	.word	0x08001eec
  ldr r2, =_sbss
 80005c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005cc:	20000074 	.word	0x20000074

080005d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC1_COMP_IRQHandler>
	...

080005d4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005da:	1dfb      	adds	r3, r7, #7
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <HAL_Init+0x3c>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <HAL_Init+0x3c>)
 80005e6:	2140      	movs	r1, #64	@ 0x40
 80005e8:	430a      	orrs	r2, r1
 80005ea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 f811 	bl	8000614 <HAL_InitTick>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d003      	beq.n	80005fe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80005f6:	1dfb      	adds	r3, r7, #7
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	e001      	b.n	8000602 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005fe:	f7ff ff59 	bl	80004b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	781b      	ldrb	r3, [r3, #0]
}
 8000606:	0018      	movs	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	40022000 	.word	0x40022000

08000614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <HAL_InitTick+0x5c>)
 800061e:	681c      	ldr	r4, [r3, #0]
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <HAL_InitTick+0x60>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	0019      	movs	r1, r3
 8000626:	23fa      	movs	r3, #250	@ 0xfa
 8000628:	0098      	lsls	r0, r3, #2
 800062a:	f7ff fd6d 	bl	8000108 <__udivsi3>
 800062e:	0003      	movs	r3, r0
 8000630:	0019      	movs	r1, r3
 8000632:	0020      	movs	r0, r4
 8000634:	f7ff fd68 	bl	8000108 <__udivsi3>
 8000638:	0003      	movs	r3, r0
 800063a:	0018      	movs	r0, r3
 800063c:	f000 f90b 	bl	8000856 <HAL_SYSTICK_Config>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000644:	2301      	movs	r3, #1
 8000646:	e00f      	b.n	8000668 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b03      	cmp	r3, #3
 800064c:	d80b      	bhi.n	8000666 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	2301      	movs	r3, #1
 8000652:	425b      	negs	r3, r3
 8000654:	2200      	movs	r2, #0
 8000656:	0018      	movs	r0, r3
 8000658:	f000 f8d8 	bl	800080c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <HAL_InitTick+0x64>)
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000662:	2300      	movs	r3, #0
 8000664:	e000      	b.n	8000668 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
}
 8000668:	0018      	movs	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	b003      	add	sp, #12
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	20000008 	.word	0x20000008
 8000678:	20000004 	.word	0x20000004

0800067c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <HAL_IncTick+0x1c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	001a      	movs	r2, r3
 8000686:	4b05      	ldr	r3, [pc, #20]	@ (800069c <HAL_IncTick+0x20>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	18d2      	adds	r2, r2, r3
 800068c:	4b03      	ldr	r3, [pc, #12]	@ (800069c <HAL_IncTick+0x20>)
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	46c0      	nop			@ (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	20000008 	.word	0x20000008
 800069c:	20000070 	.word	0x20000070

080006a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b02      	ldr	r3, [pc, #8]	@ (80006b0 <HAL_GetTick+0x10>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	20000070 	.word	0x20000070

080006b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	0002      	movs	r2, r0
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80006c6:	d809      	bhi.n	80006dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	001a      	movs	r2, r3
 80006ce:	231f      	movs	r3, #31
 80006d0:	401a      	ands	r2, r3
 80006d2:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_EnableIRQ+0x30>)
 80006d4:	2101      	movs	r1, #1
 80006d6:	4091      	lsls	r1, r2
 80006d8:	000a      	movs	r2, r1
 80006da:	601a      	str	r2, [r3, #0]
  }
}
 80006dc:	46c0      	nop			@ (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b002      	add	sp, #8
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	0002      	movs	r2, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80006fc:	d828      	bhi.n	8000750 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006fe:	4a2f      	ldr	r2, [pc, #188]	@ (80007bc <__NVIC_SetPriority+0xd4>)
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	b25b      	sxtb	r3, r3
 8000706:	089b      	lsrs	r3, r3, #2
 8000708:	33c0      	adds	r3, #192	@ 0xc0
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	589b      	ldr	r3, [r3, r2]
 800070e:	1dfa      	adds	r2, r7, #7
 8000710:	7812      	ldrb	r2, [r2, #0]
 8000712:	0011      	movs	r1, r2
 8000714:	2203      	movs	r2, #3
 8000716:	400a      	ands	r2, r1
 8000718:	00d2      	lsls	r2, r2, #3
 800071a:	21ff      	movs	r1, #255	@ 0xff
 800071c:	4091      	lsls	r1, r2
 800071e:	000a      	movs	r2, r1
 8000720:	43d2      	mvns	r2, r2
 8000722:	401a      	ands	r2, r3
 8000724:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	019b      	lsls	r3, r3, #6
 800072a:	22ff      	movs	r2, #255	@ 0xff
 800072c:	401a      	ands	r2, r3
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	0018      	movs	r0, r3
 8000734:	2303      	movs	r3, #3
 8000736:	4003      	ands	r3, r0
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073c:	481f      	ldr	r0, [pc, #124]	@ (80007bc <__NVIC_SetPriority+0xd4>)
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b25b      	sxtb	r3, r3
 8000744:	089b      	lsrs	r3, r3, #2
 8000746:	430a      	orrs	r2, r1
 8000748:	33c0      	adds	r3, #192	@ 0xc0
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800074e:	e031      	b.n	80007b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000750:	4a1b      	ldr	r2, [pc, #108]	@ (80007c0 <__NVIC_SetPriority+0xd8>)
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	0019      	movs	r1, r3
 8000758:	230f      	movs	r3, #15
 800075a:	400b      	ands	r3, r1
 800075c:	3b08      	subs	r3, #8
 800075e:	089b      	lsrs	r3, r3, #2
 8000760:	3306      	adds	r3, #6
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	18d3      	adds	r3, r2, r3
 8000766:	3304      	adds	r3, #4
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	1dfa      	adds	r2, r7, #7
 800076c:	7812      	ldrb	r2, [r2, #0]
 800076e:	0011      	movs	r1, r2
 8000770:	2203      	movs	r2, #3
 8000772:	400a      	ands	r2, r1
 8000774:	00d2      	lsls	r2, r2, #3
 8000776:	21ff      	movs	r1, #255	@ 0xff
 8000778:	4091      	lsls	r1, r2
 800077a:	000a      	movs	r2, r1
 800077c:	43d2      	mvns	r2, r2
 800077e:	401a      	ands	r2, r3
 8000780:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	22ff      	movs	r2, #255	@ 0xff
 8000788:	401a      	ands	r2, r3
 800078a:	1dfb      	adds	r3, r7, #7
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	0018      	movs	r0, r3
 8000790:	2303      	movs	r3, #3
 8000792:	4003      	ands	r3, r0
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000798:	4809      	ldr	r0, [pc, #36]	@ (80007c0 <__NVIC_SetPriority+0xd8>)
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	001c      	movs	r4, r3
 80007a0:	230f      	movs	r3, #15
 80007a2:	4023      	ands	r3, r4
 80007a4:	3b08      	subs	r3, #8
 80007a6:	089b      	lsrs	r3, r3, #2
 80007a8:	430a      	orrs	r2, r1
 80007aa:	3306      	adds	r3, #6
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	18c3      	adds	r3, r0, r3
 80007b0:	3304      	adds	r3, #4
 80007b2:	601a      	str	r2, [r3, #0]
}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b003      	add	sp, #12
 80007ba:	bd90      	pop	{r4, r7, pc}
 80007bc:	e000e100 	.word	0xe000e100
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	1e5a      	subs	r2, r3, #1
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	045b      	lsls	r3, r3, #17
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d301      	bcc.n	80007dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d8:	2301      	movs	r3, #1
 80007da:	e010      	b.n	80007fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <SysTick_Config+0x44>)
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	3a01      	subs	r2, #1
 80007e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e4:	2301      	movs	r3, #1
 80007e6:	425b      	negs	r3, r3
 80007e8:	2103      	movs	r1, #3
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff ff7c 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <SysTick_Config+0x44>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f6:	4b04      	ldr	r3, [pc, #16]	@ (8000808 <SysTick_Config+0x44>)
 80007f8:	2207      	movs	r2, #7
 80007fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	0018      	movs	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	e000e010 	.word	0xe000e010

0800080c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	60b9      	str	r1, [r7, #8]
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	210f      	movs	r1, #15
 8000818:	187b      	adds	r3, r7, r1
 800081a:	1c02      	adds	r2, r0, #0
 800081c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	187b      	adds	r3, r7, r1
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b25b      	sxtb	r3, r3
 8000826:	0011      	movs	r1, r2
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff ff5d 	bl	80006e8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b004      	add	sp, #16
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	0002      	movs	r2, r0
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b25b      	sxtb	r3, r3
 8000848:	0018      	movs	r0, r3
 800084a:	f7ff ff33 	bl	80006b4 <__NVIC_EnableIRQ>
}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	0018      	movs	r0, r3
 8000862:	f7ff ffaf 	bl	80007c4 <SysTick_Config>
 8000866:	0003      	movs	r3, r0
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	b002      	add	sp, #8
 800086e:	bd80      	pop	{r7, pc}

08000870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000886:	e14f      	b.n	8000b28 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2101      	movs	r1, #1
 800088e:	697a      	ldr	r2, [r7, #20]
 8000890:	4091      	lsls	r1, r2
 8000892:	000a      	movs	r2, r1
 8000894:	4013      	ands	r3, r2
 8000896:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d100      	bne.n	80008a0 <HAL_GPIO_Init+0x30>
 800089e:	e140      	b.n	8000b22 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2203      	movs	r2, #3
 80008a6:	4013      	ands	r3, r2
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d005      	beq.n	80008b8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2203      	movs	r2, #3
 80008b2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d130      	bne.n	800091a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	2203      	movs	r2, #3
 80008c4:	409a      	lsls	r2, r3
 80008c6:	0013      	movs	r3, r2
 80008c8:	43da      	mvns	r2, r3
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	4013      	ands	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	68da      	ldr	r2, [r3, #12]
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	409a      	lsls	r2, r3
 80008da:	0013      	movs	r3, r2
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4313      	orrs	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008ee:	2201      	movs	r2, #1
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	409a      	lsls	r2, r3
 80008f4:	0013      	movs	r3, r2
 80008f6:	43da      	mvns	r2, r3
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	091b      	lsrs	r3, r3, #4
 8000904:	2201      	movs	r2, #1
 8000906:	401a      	ands	r2, r3
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	409a      	lsls	r2, r3
 800090c:	0013      	movs	r3, r2
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4313      	orrs	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2203      	movs	r2, #3
 8000920:	4013      	ands	r3, r2
 8000922:	2b03      	cmp	r3, #3
 8000924:	d017      	beq.n	8000956 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	2203      	movs	r2, #3
 8000932:	409a      	lsls	r2, r3
 8000934:	0013      	movs	r3, r2
 8000936:	43da      	mvns	r2, r3
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	4013      	ands	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	409a      	lsls	r2, r3
 8000948:	0013      	movs	r3, r2
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4313      	orrs	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2203      	movs	r2, #3
 800095c:	4013      	ands	r3, r2
 800095e:	2b02      	cmp	r3, #2
 8000960:	d123      	bne.n	80009aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	08da      	lsrs	r2, r3, #3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3208      	adds	r2, #8
 800096a:	0092      	lsls	r2, r2, #2
 800096c:	58d3      	ldr	r3, [r2, r3]
 800096e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	2207      	movs	r2, #7
 8000974:	4013      	ands	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	220f      	movs	r2, #15
 800097a:	409a      	lsls	r2, r3
 800097c:	0013      	movs	r3, r2
 800097e:	43da      	mvns	r2, r3
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	691a      	ldr	r2, [r3, #16]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	2107      	movs	r1, #7
 800098e:	400b      	ands	r3, r1
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	409a      	lsls	r2, r3
 8000994:	0013      	movs	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4313      	orrs	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	08da      	lsrs	r2, r3, #3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3208      	adds	r2, #8
 80009a4:	0092      	lsls	r2, r2, #2
 80009a6:	6939      	ldr	r1, [r7, #16]
 80009a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	2203      	movs	r2, #3
 80009b6:	409a      	lsls	r2, r3
 80009b8:	0013      	movs	r3, r2
 80009ba:	43da      	mvns	r2, r3
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2203      	movs	r2, #3
 80009c8:	401a      	ands	r2, r3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	409a      	lsls	r2, r3
 80009d0:	0013      	movs	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	23c0      	movs	r3, #192	@ 0xc0
 80009e4:	029b      	lsls	r3, r3, #10
 80009e6:	4013      	ands	r3, r2
 80009e8:	d100      	bne.n	80009ec <HAL_GPIO_Init+0x17c>
 80009ea:	e09a      	b.n	8000b22 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ec:	4b54      	ldr	r3, [pc, #336]	@ (8000b40 <HAL_GPIO_Init+0x2d0>)
 80009ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009f0:	4b53      	ldr	r3, [pc, #332]	@ (8000b40 <HAL_GPIO_Init+0x2d0>)
 80009f2:	2101      	movs	r1, #1
 80009f4:	430a      	orrs	r2, r1
 80009f6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80009f8:	4a52      	ldr	r2, [pc, #328]	@ (8000b44 <HAL_GPIO_Init+0x2d4>)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	3302      	adds	r3, #2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	589b      	ldr	r3, [r3, r2]
 8000a04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	2203      	movs	r2, #3
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	220f      	movs	r2, #15
 8000a10:	409a      	lsls	r2, r3
 8000a12:	0013      	movs	r3, r2
 8000a14:	43da      	mvns	r2, r3
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	23a0      	movs	r3, #160	@ 0xa0
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d019      	beq.n	8000a5a <HAL_GPIO_Init+0x1ea>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a47      	ldr	r2, [pc, #284]	@ (8000b48 <HAL_GPIO_Init+0x2d8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d013      	beq.n	8000a56 <HAL_GPIO_Init+0x1e6>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a46      	ldr	r2, [pc, #280]	@ (8000b4c <HAL_GPIO_Init+0x2dc>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d00d      	beq.n	8000a52 <HAL_GPIO_Init+0x1e2>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a45      	ldr	r2, [pc, #276]	@ (8000b50 <HAL_GPIO_Init+0x2e0>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d007      	beq.n	8000a4e <HAL_GPIO_Init+0x1de>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a44      	ldr	r2, [pc, #272]	@ (8000b54 <HAL_GPIO_Init+0x2e4>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d101      	bne.n	8000a4a <HAL_GPIO_Init+0x1da>
 8000a46:	2305      	movs	r3, #5
 8000a48:	e008      	b.n	8000a5c <HAL_GPIO_Init+0x1ec>
 8000a4a:	2306      	movs	r3, #6
 8000a4c:	e006      	b.n	8000a5c <HAL_GPIO_Init+0x1ec>
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e004      	b.n	8000a5c <HAL_GPIO_Init+0x1ec>
 8000a52:	2302      	movs	r3, #2
 8000a54:	e002      	b.n	8000a5c <HAL_GPIO_Init+0x1ec>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <HAL_GPIO_Init+0x1ec>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	2103      	movs	r1, #3
 8000a60:	400a      	ands	r2, r1
 8000a62:	0092      	lsls	r2, r2, #2
 8000a64:	4093      	lsls	r3, r2
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a6c:	4935      	ldr	r1, [pc, #212]	@ (8000b44 <HAL_GPIO_Init+0x2d4>)
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	089b      	lsrs	r3, r3, #2
 8000a72:	3302      	adds	r3, #2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a7a:	4b37      	ldr	r3, [pc, #220]	@ (8000b58 <HAL_GPIO_Init+0x2e8>)
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	43da      	mvns	r2, r3
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	4013      	ands	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685a      	ldr	r2, [r3, #4]
 8000a8e:	2380      	movs	r3, #128	@ 0x80
 8000a90:	035b      	lsls	r3, r3, #13
 8000a92:	4013      	ands	r3, r2
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b58 <HAL_GPIO_Init+0x2e8>)
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8000b58 <HAL_GPIO_Init+0x2e8>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	43da      	mvns	r2, r3
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	2380      	movs	r3, #128	@ 0x80
 8000aba:	039b      	lsls	r3, r3, #14
 8000abc:	4013      	ands	r3, r2
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ac8:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <HAL_GPIO_Init+0x2e8>)
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000ace:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <HAL_GPIO_Init+0x2e8>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	2380      	movs	r3, #128	@ 0x80
 8000ae4:	029b      	lsls	r3, r3, #10
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000af2:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <HAL_GPIO_Init+0x2e8>)
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000af8:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <HAL_GPIO_Init+0x2e8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	43da      	mvns	r2, r3
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685a      	ldr	r2, [r3, #4]
 8000b0c:	2380      	movs	r3, #128	@ 0x80
 8000b0e:	025b      	lsls	r3, r3, #9
 8000b10:	4013      	ands	r3, r2
 8000b12:	d003      	beq.n	8000b1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <HAL_GPIO_Init+0x2e8>)
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	40da      	lsrs	r2, r3
 8000b30:	1e13      	subs	r3, r2, #0
 8000b32:	d000      	beq.n	8000b36 <HAL_GPIO_Init+0x2c6>
 8000b34:	e6a8      	b.n	8000888 <HAL_GPIO_Init+0x18>
  }
}
 8000b36:	46c0      	nop			@ (mov r8, r8)
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b006      	add	sp, #24
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40010000 	.word	0x40010000
 8000b48:	50000400 	.word	0x50000400
 8000b4c:	50000800 	.word	0x50000800
 8000b50:	50000c00 	.word	0x50000c00
 8000b54:	50001c00 	.word	0x50001c00
 8000b58:	40010400 	.word	0x40010400

08000b5c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	0008      	movs	r0, r1
 8000b66:	0011      	movs	r1, r2
 8000b68:	1cbb      	adds	r3, r7, #2
 8000b6a:	1c02      	adds	r2, r0, #0
 8000b6c:	801a      	strh	r2, [r3, #0]
 8000b6e:	1c7b      	adds	r3, r7, #1
 8000b70:	1c0a      	adds	r2, r1, #0
 8000b72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b74:	1c7b      	adds	r3, r7, #1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d004      	beq.n	8000b86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b7c:	1cbb      	adds	r3, r7, #2
 8000b7e:	881a      	ldrh	r2, [r3, #0]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000b84:	e003      	b.n	8000b8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000b86:	1cbb      	adds	r3, r7, #2
 8000b88:	881a      	ldrh	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b084      	sub	sp, #16
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	000a      	movs	r2, r1
 8000ba0:	1cbb      	adds	r3, r7, #2
 8000ba2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000baa:	1cbb      	adds	r3, r7, #2
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	041a      	lsls	r2, r3, #16
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	1cb9      	adds	r1, r7, #2
 8000bba:	8809      	ldrh	r1, [r1, #0]
 8000bbc:	400b      	ands	r3, r1
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	619a      	str	r2, [r3, #24]
}
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b004      	add	sp, #16
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	0002      	movs	r2, r0
 8000bd4:	1dbb      	adds	r3, r7, #6
 8000bd6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	1dba      	adds	r2, r7, #6
 8000bde:	8812      	ldrh	r2, [r2, #0]
 8000be0:	4013      	ands	r3, r2
 8000be2:	d008      	beq.n	8000bf6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000be6:	1dba      	adds	r2, r7, #6
 8000be8:	8812      	ldrh	r2, [r2, #0]
 8000bea:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bec:	1dbb      	adds	r3, r7, #6
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff fb29 	bl	8000248 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	40010400 	.word	0x40010400

08000c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b08a      	sub	sp, #40	@ 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d102      	bne.n	8000c18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f000 fbaf 	bl	8001376 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c18:	4bcf      	ldr	r3, [pc, #828]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	4013      	ands	r3, r2
 8000c20:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c22:	4bcd      	ldr	r3, [pc, #820]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c24:	68da      	ldr	r2, [r3, #12]
 8000c26:	2380      	movs	r3, #128	@ 0x80
 8000c28:	025b      	lsls	r3, r3, #9
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2201      	movs	r2, #1
 8000c34:	4013      	ands	r3, r2
 8000c36:	d100      	bne.n	8000c3a <HAL_RCC_OscConfig+0x36>
 8000c38:	e07e      	b.n	8000d38 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	2b08      	cmp	r3, #8
 8000c3e:	d007      	beq.n	8000c50 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	2b0c      	cmp	r3, #12
 8000c44:	d112      	bne.n	8000c6c <HAL_RCC_OscConfig+0x68>
 8000c46:	69fa      	ldr	r2, [r7, #28]
 8000c48:	2380      	movs	r3, #128	@ 0x80
 8000c4a:	025b      	lsls	r3, r3, #9
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d10d      	bne.n	8000c6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c50:	4bc1      	ldr	r3, [pc, #772]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	2380      	movs	r3, #128	@ 0x80
 8000c56:	029b      	lsls	r3, r3, #10
 8000c58:	4013      	ands	r3, r2
 8000c5a:	d100      	bne.n	8000c5e <HAL_RCC_OscConfig+0x5a>
 8000c5c:	e06b      	b.n	8000d36 <HAL_RCC_OscConfig+0x132>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d167      	bne.n	8000d36 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f000 fb85 	bl	8001376 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	2380      	movs	r3, #128	@ 0x80
 8000c72:	025b      	lsls	r3, r3, #9
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d107      	bne.n	8000c88 <HAL_RCC_OscConfig+0x84>
 8000c78:	4bb7      	ldr	r3, [pc, #732]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4bb6      	ldr	r3, [pc, #728]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c7e:	2180      	movs	r1, #128	@ 0x80
 8000c80:	0249      	lsls	r1, r1, #9
 8000c82:	430a      	orrs	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e027      	b.n	8000cd8 <HAL_RCC_OscConfig+0xd4>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	23a0      	movs	r3, #160	@ 0xa0
 8000c8e:	02db      	lsls	r3, r3, #11
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d10e      	bne.n	8000cb2 <HAL_RCC_OscConfig+0xae>
 8000c94:	4bb0      	ldr	r3, [pc, #704]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4baf      	ldr	r3, [pc, #700]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000c9a:	2180      	movs	r1, #128	@ 0x80
 8000c9c:	02c9      	lsls	r1, r1, #11
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	4bad      	ldr	r3, [pc, #692]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4bac      	ldr	r3, [pc, #688]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000ca8:	2180      	movs	r1, #128	@ 0x80
 8000caa:	0249      	lsls	r1, r1, #9
 8000cac:	430a      	orrs	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	e012      	b.n	8000cd8 <HAL_RCC_OscConfig+0xd4>
 8000cb2:	4ba9      	ldr	r3, [pc, #676]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4ba8      	ldr	r3, [pc, #672]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000cb8:	49a8      	ldr	r1, [pc, #672]	@ (8000f5c <HAL_RCC_OscConfig+0x358>)
 8000cba:	400a      	ands	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	4ba6      	ldr	r3, [pc, #664]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	2380      	movs	r3, #128	@ 0x80
 8000cc4:	025b      	lsls	r3, r3, #9
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4ba2      	ldr	r3, [pc, #648]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4ba1      	ldr	r3, [pc, #644]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000cd2:	49a3      	ldr	r1, [pc, #652]	@ (8000f60 <HAL_RCC_OscConfig+0x35c>)
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d015      	beq.n	8000d0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fcde 	bl	80006a0 <HAL_GetTick>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ce8:	e009      	b.n	8000cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cea:	f7ff fcd9 	bl	80006a0 <HAL_GetTick>
 8000cee:	0002      	movs	r2, r0
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b64      	cmp	r3, #100	@ 0x64
 8000cf6:	d902      	bls.n	8000cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	f000 fb3c 	bl	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000cfe:	4b96      	ldr	r3, [pc, #600]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	2380      	movs	r3, #128	@ 0x80
 8000d04:	029b      	lsls	r3, r3, #10
 8000d06:	4013      	ands	r3, r2
 8000d08:	d0ef      	beq.n	8000cea <HAL_RCC_OscConfig+0xe6>
 8000d0a:	e015      	b.n	8000d38 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fcc8 	bl	80006a0 <HAL_GetTick>
 8000d10:	0003      	movs	r3, r0
 8000d12:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d14:	e008      	b.n	8000d28 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d16:	f7ff fcc3 	bl	80006a0 <HAL_GetTick>
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b64      	cmp	r3, #100	@ 0x64
 8000d22:	d901      	bls.n	8000d28 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e326      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000d28:	4b8b      	ldr	r3, [pc, #556]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2380      	movs	r3, #128	@ 0x80
 8000d2e:	029b      	lsls	r3, r3, #10
 8000d30:	4013      	ands	r3, r2
 8000d32:	d1f0      	bne.n	8000d16 <HAL_RCC_OscConfig+0x112>
 8000d34:	e000      	b.n	8000d38 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d36:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d100      	bne.n	8000d44 <HAL_RCC_OscConfig+0x140>
 8000d42:	e08b      	b.n	8000e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d005      	beq.n	8000d5c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d50:	6a3b      	ldr	r3, [r7, #32]
 8000d52:	2b0c      	cmp	r3, #12
 8000d54:	d13e      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x1d0>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d13b      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2204      	movs	r2, #4
 8000d62:	4013      	ands	r3, r2
 8000d64:	d004      	beq.n	8000d70 <HAL_RCC_OscConfig+0x16c>
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e302      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d70:	4b79      	ldr	r3, [pc, #484]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	4a7b      	ldr	r2, [pc, #492]	@ (8000f64 <HAL_RCC_OscConfig+0x360>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	0019      	movs	r1, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	021a      	lsls	r2, r3, #8
 8000d80:	4b75      	ldr	r3, [pc, #468]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d82:	430a      	orrs	r2, r1
 8000d84:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000d86:	4b74      	ldr	r3, [pc, #464]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2209      	movs	r2, #9
 8000d8c:	4393      	bics	r3, r2
 8000d8e:	0019      	movs	r1, r3
 8000d90:	4b71      	ldr	r3, [pc, #452]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d98:	f000 fc40 	bl	800161c <HAL_RCC_GetSysClockFreq>
 8000d9c:	0001      	movs	r1, r0
 8000d9e:	4b6e      	ldr	r3, [pc, #440]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	220f      	movs	r2, #15
 8000da6:	4013      	ands	r3, r2
 8000da8:	4a6f      	ldr	r2, [pc, #444]	@ (8000f68 <HAL_RCC_OscConfig+0x364>)
 8000daa:	5cd3      	ldrb	r3, [r2, r3]
 8000dac:	000a      	movs	r2, r1
 8000dae:	40da      	lsrs	r2, r3
 8000db0:	4b6e      	ldr	r3, [pc, #440]	@ (8000f6c <HAL_RCC_OscConfig+0x368>)
 8000db2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000db4:	4b6e      	ldr	r3, [pc, #440]	@ (8000f70 <HAL_RCC_OscConfig+0x36c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2513      	movs	r5, #19
 8000dba:	197c      	adds	r4, r7, r5
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f7ff fc29 	bl	8000614 <HAL_InitTick>
 8000dc2:	0003      	movs	r3, r0
 8000dc4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000dc6:	197b      	adds	r3, r7, r5
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d046      	beq.n	8000e5c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000dce:	197b      	adds	r3, r7, r5
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	e2d0      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d027      	beq.n	8000e2a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000dda:	4b5f      	ldr	r3, [pc, #380]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2209      	movs	r2, #9
 8000de0:	4393      	bics	r3, r2
 8000de2:	0019      	movs	r1, r3
 8000de4:	4b5c      	ldr	r3, [pc, #368]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fc58 	bl	80006a0 <HAL_GetTick>
 8000df0:	0003      	movs	r3, r0
 8000df2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df6:	f7ff fc53 	bl	80006a0 <HAL_GetTick>
 8000dfa:	0002      	movs	r2, r0
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e2b6      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e08:	4b53      	ldr	r3, [pc, #332]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d0f1      	beq.n	8000df6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e12:	4b51      	ldr	r3, [pc, #324]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	4a53      	ldr	r2, [pc, #332]	@ (8000f64 <HAL_RCC_OscConfig+0x360>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	021a      	lsls	r2, r3, #8
 8000e22:	4b4d      	ldr	r3, [pc, #308]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e24:	430a      	orrs	r2, r1
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	e018      	b.n	8000e5c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e30:	2101      	movs	r1, #1
 8000e32:	438a      	bics	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e36:	f7ff fc33 	bl	80006a0 <HAL_GetTick>
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e40:	f7ff fc2e 	bl	80006a0 <HAL_GetTick>
 8000e44:	0002      	movs	r2, r0
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e291      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000e52:	4b41      	ldr	r3, [pc, #260]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2204      	movs	r2, #4
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d1f1      	bne.n	8000e40 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2210      	movs	r2, #16
 8000e62:	4013      	ands	r3, r2
 8000e64:	d100      	bne.n	8000e68 <HAL_RCC_OscConfig+0x264>
 8000e66:	e0a1      	b.n	8000fac <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e68:	6a3b      	ldr	r3, [r7, #32]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d140      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	2380      	movs	r3, #128	@ 0x80
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4013      	ands	r3, r2
 8000e78:	d005      	beq.n	8000e86 <HAL_RCC_OscConfig+0x282>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e277      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e86:	4b34      	ldr	r3, [pc, #208]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f74 <HAL_RCC_OscConfig+0x370>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	0019      	movs	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e94:	4b30      	ldr	r3, [pc, #192]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e96:	430a      	orrs	r2, r1
 8000e98:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	0a19      	lsrs	r1, r3, #8
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	061a      	lsls	r2, r3, #24
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb2:	0b5b      	lsrs	r3, r3, #13
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	2280      	movs	r2, #128	@ 0x80
 8000eb8:	0212      	lsls	r2, r2, #8
 8000eba:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000ebc:	4b26      	ldr	r3, [pc, #152]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	400b      	ands	r3, r1
 8000ec6:	4928      	ldr	r1, [pc, #160]	@ (8000f68 <HAL_RCC_OscConfig+0x364>)
 8000ec8:	5ccb      	ldrb	r3, [r1, r3]
 8000eca:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000ecc:	4b27      	ldr	r3, [pc, #156]	@ (8000f6c <HAL_RCC_OscConfig+0x368>)
 8000ece:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8000ed0:	4b27      	ldr	r3, [pc, #156]	@ (8000f70 <HAL_RCC_OscConfig+0x36c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2513      	movs	r5, #19
 8000ed6:	197c      	adds	r4, r7, r5
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff fb9b 	bl	8000614 <HAL_InitTick>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8000ee2:	197b      	adds	r3, r7, r5
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d060      	beq.n	8000fac <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8000eea:	197b      	adds	r3, r7, r5
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	e242      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	69db      	ldr	r3, [r3, #28]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d03f      	beq.n	8000f78 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000efe:	2180      	movs	r1, #128	@ 0x80
 8000f00:	0049      	lsls	r1, r1, #1
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fbcb 	bl	80006a0 <HAL_GetTick>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f10:	f7ff fbc6 	bl	80006a0 <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e229      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	2380      	movs	r3, #128	@ 0x80
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d0f0      	beq.n	8000f10 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4a10      	ldr	r2, [pc, #64]	@ (8000f74 <HAL_RCC_OscConfig+0x370>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	0019      	movs	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f42:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	0a19      	lsrs	r1, r3, #8
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a1b      	ldr	r3, [r3, #32]
 8000f4e:	061a      	lsls	r2, r3, #24
 8000f50:	4b01      	ldr	r3, [pc, #4]	@ (8000f58 <HAL_RCC_OscConfig+0x354>)
 8000f52:	430a      	orrs	r2, r1
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	e029      	b.n	8000fac <HAL_RCC_OscConfig+0x3a8>
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	fffeffff 	.word	0xfffeffff
 8000f60:	fffbffff 	.word	0xfffbffff
 8000f64:	ffffe0ff 	.word	0xffffe0ff
 8000f68:	08001ec8 	.word	0x08001ec8
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000004 	.word	0x20000004
 8000f74:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000f78:	4bbd      	ldr	r3, [pc, #756]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4bbc      	ldr	r3, [pc, #752]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000f7e:	49bd      	ldr	r1, [pc, #756]	@ (8001274 <HAL_RCC_OscConfig+0x670>)
 8000f80:	400a      	ands	r2, r1
 8000f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fb8c 	bl	80006a0 <HAL_GetTick>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f8e:	f7ff fb87 	bl	80006a0 <HAL_GetTick>
 8000f92:	0002      	movs	r2, r0
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e1ea      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000fa0:	4bb3      	ldr	r3, [pc, #716]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	2380      	movs	r3, #128	@ 0x80
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d1f0      	bne.n	8000f8e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2208      	movs	r2, #8
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	d036      	beq.n	8001024 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d019      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fbe:	4bac      	ldr	r3, [pc, #688]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000fc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fc2:	4bab      	ldr	r3, [pc, #684]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fca:	f7ff fb69 	bl	80006a0 <HAL_GetTick>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fb64 	bl	80006a0 <HAL_GetTick>
 8000fd8:	0002      	movs	r2, r0
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e1c7      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000fe6:	4ba2      	ldr	r3, [pc, #648]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000fe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fea:	2202      	movs	r2, #2
 8000fec:	4013      	ands	r3, r2
 8000fee:	d0f1      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x3d0>
 8000ff0:	e018      	b.n	8001024 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff2:	4b9f      	ldr	r3, [pc, #636]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000ff4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000ff6:	4b9e      	ldr	r3, [pc, #632]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	438a      	bics	r2, r1
 8000ffc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffe:	f7ff fb4f 	bl	80006a0 <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001008:	f7ff fb4a 	bl	80006a0 <HAL_GetTick>
 800100c:	0002      	movs	r2, r0
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1ad      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800101a:	4b95      	ldr	r3, [pc, #596]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 800101c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800101e:	2202      	movs	r2, #2
 8001020:	4013      	ands	r3, r2
 8001022:	d1f1      	bne.n	8001008 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2204      	movs	r2, #4
 800102a:	4013      	ands	r3, r2
 800102c:	d100      	bne.n	8001030 <HAL_RCC_OscConfig+0x42c>
 800102e:	e0ae      	b.n	800118e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001030:	2027      	movs	r0, #39	@ 0x27
 8001032:	183b      	adds	r3, r7, r0
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001038:	4b8d      	ldr	r3, [pc, #564]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 800103a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800103c:	2380      	movs	r3, #128	@ 0x80
 800103e:	055b      	lsls	r3, r3, #21
 8001040:	4013      	ands	r3, r2
 8001042:	d109      	bne.n	8001058 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001044:	4b8a      	ldr	r3, [pc, #552]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001046:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001048:	4b89      	ldr	r3, [pc, #548]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 800104a:	2180      	movs	r1, #128	@ 0x80
 800104c:	0549      	lsls	r1, r1, #21
 800104e:	430a      	orrs	r2, r1
 8001050:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001052:	183b      	adds	r3, r7, r0
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	4b87      	ldr	r3, [pc, #540]	@ (8001278 <HAL_RCC_OscConfig+0x674>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4013      	ands	r3, r2
 8001062:	d11a      	bne.n	800109a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001064:	4b84      	ldr	r3, [pc, #528]	@ (8001278 <HAL_RCC_OscConfig+0x674>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b83      	ldr	r3, [pc, #524]	@ (8001278 <HAL_RCC_OscConfig+0x674>)
 800106a:	2180      	movs	r1, #128	@ 0x80
 800106c:	0049      	lsls	r1, r1, #1
 800106e:	430a      	orrs	r2, r1
 8001070:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001072:	f7ff fb15 	bl	80006a0 <HAL_GetTick>
 8001076:	0003      	movs	r3, r0
 8001078:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800107c:	f7ff fb10 	bl	80006a0 <HAL_GetTick>
 8001080:	0002      	movs	r2, r0
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	@ 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e173      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108e:	4b7a      	ldr	r3, [pc, #488]	@ (8001278 <HAL_RCC_OscConfig+0x674>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	2380      	movs	r3, #128	@ 0x80
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4013      	ands	r3, r2
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	2380      	movs	r3, #128	@ 0x80
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d107      	bne.n	80010b6 <HAL_RCC_OscConfig+0x4b2>
 80010a6:	4b72      	ldr	r3, [pc, #456]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010aa:	4b71      	ldr	r3, [pc, #452]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010ac:	2180      	movs	r1, #128	@ 0x80
 80010ae:	0049      	lsls	r1, r1, #1
 80010b0:	430a      	orrs	r2, r1
 80010b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80010b4:	e031      	b.n	800111a <HAL_RCC_OscConfig+0x516>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10c      	bne.n	80010d8 <HAL_RCC_OscConfig+0x4d4>
 80010be:	4b6c      	ldr	r3, [pc, #432]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010c4:	496b      	ldr	r1, [pc, #428]	@ (8001274 <HAL_RCC_OscConfig+0x670>)
 80010c6:	400a      	ands	r2, r1
 80010c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80010ca:	4b69      	ldr	r3, [pc, #420]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010ce:	4b68      	ldr	r3, [pc, #416]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010d0:	496a      	ldr	r1, [pc, #424]	@ (800127c <HAL_RCC_OscConfig+0x678>)
 80010d2:	400a      	ands	r2, r1
 80010d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80010d6:	e020      	b.n	800111a <HAL_RCC_OscConfig+0x516>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	23a0      	movs	r3, #160	@ 0xa0
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d10e      	bne.n	8001102 <HAL_RCC_OscConfig+0x4fe>
 80010e4:	4b62      	ldr	r3, [pc, #392]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010e8:	4b61      	ldr	r3, [pc, #388]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010ea:	2180      	movs	r1, #128	@ 0x80
 80010ec:	00c9      	lsls	r1, r1, #3
 80010ee:	430a      	orrs	r2, r1
 80010f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80010f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80010f6:	4b5e      	ldr	r3, [pc, #376]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80010f8:	2180      	movs	r1, #128	@ 0x80
 80010fa:	0049      	lsls	r1, r1, #1
 80010fc:	430a      	orrs	r2, r1
 80010fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001100:	e00b      	b.n	800111a <HAL_RCC_OscConfig+0x516>
 8001102:	4b5b      	ldr	r3, [pc, #364]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001104:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001106:	4b5a      	ldr	r3, [pc, #360]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001108:	495a      	ldr	r1, [pc, #360]	@ (8001274 <HAL_RCC_OscConfig+0x670>)
 800110a:	400a      	ands	r2, r1
 800110c:	651a      	str	r2, [r3, #80]	@ 0x50
 800110e:	4b58      	ldr	r3, [pc, #352]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001110:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001112:	4b57      	ldr	r3, [pc, #348]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001114:	4959      	ldr	r1, [pc, #356]	@ (800127c <HAL_RCC_OscConfig+0x678>)
 8001116:	400a      	ands	r2, r1
 8001118:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d015      	beq.n	800114e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001122:	f7ff fabd 	bl	80006a0 <HAL_GetTick>
 8001126:	0003      	movs	r3, r0
 8001128:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800112a:	e009      	b.n	8001140 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800112c:	f7ff fab8 	bl	80006a0 <HAL_GetTick>
 8001130:	0002      	movs	r2, r0
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	4a52      	ldr	r2, [pc, #328]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e11a      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001140:	4b4b      	ldr	r3, [pc, #300]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001142:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4013      	ands	r3, r2
 800114a:	d0ef      	beq.n	800112c <HAL_RCC_OscConfig+0x528>
 800114c:	e014      	b.n	8001178 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114e:	f7ff faa7 	bl	80006a0 <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001156:	e009      	b.n	800116c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001158:	f7ff faa2 	bl	80006a0 <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	4a47      	ldr	r2, [pc, #284]	@ (8001280 <HAL_RCC_OscConfig+0x67c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e104      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800116c:	4b40      	ldr	r3, [pc, #256]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 800116e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4013      	ands	r3, r2
 8001176:	d1ef      	bne.n	8001158 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001178:	2327      	movs	r3, #39	@ 0x27
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d105      	bne.n	800118e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001182:	4b3b      	ldr	r3, [pc, #236]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001186:	4b3a      	ldr	r3, [pc, #232]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001188:	493e      	ldr	r1, [pc, #248]	@ (8001284 <HAL_RCC_OscConfig+0x680>)
 800118a:	400a      	ands	r2, r1
 800118c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2220      	movs	r2, #32
 8001194:	4013      	ands	r3, r2
 8001196:	d049      	beq.n	800122c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d026      	beq.n	80011ee <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011a0:	4b33      	ldr	r3, [pc, #204]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	4b32      	ldr	r3, [pc, #200]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011a6:	2101      	movs	r1, #1
 80011a8:	430a      	orrs	r2, r1
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	4b30      	ldr	r3, [pc, #192]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011b2:	2101      	movs	r1, #1
 80011b4:	430a      	orrs	r2, r1
 80011b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80011b8:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <HAL_RCC_OscConfig+0x684>)
 80011ba:	6a1a      	ldr	r2, [r3, #32]
 80011bc:	4b32      	ldr	r3, [pc, #200]	@ (8001288 <HAL_RCC_OscConfig+0x684>)
 80011be:	2180      	movs	r1, #128	@ 0x80
 80011c0:	0189      	lsls	r1, r1, #6
 80011c2:	430a      	orrs	r2, r1
 80011c4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c6:	f7ff fa6b 	bl	80006a0 <HAL_GetTick>
 80011ca:	0003      	movs	r3, r0
 80011cc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011d0:	f7ff fa66 	bl	80006a0 <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e0c9      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011e2:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2202      	movs	r2, #2
 80011e8:	4013      	ands	r3, r2
 80011ea:	d0f1      	beq.n	80011d0 <HAL_RCC_OscConfig+0x5cc>
 80011ec:	e01e      	b.n	800122c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80011ee:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 80011f4:	2101      	movs	r1, #1
 80011f6:	438a      	bics	r2, r1
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <HAL_RCC_OscConfig+0x684>)
 80011fc:	6a1a      	ldr	r2, [r3, #32]
 80011fe:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <HAL_RCC_OscConfig+0x684>)
 8001200:	4922      	ldr	r1, [pc, #136]	@ (800128c <HAL_RCC_OscConfig+0x688>)
 8001202:	400a      	ands	r2, r1
 8001204:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001206:	f7ff fa4b 	bl	80006a0 <HAL_GetTick>
 800120a:	0003      	movs	r3, r0
 800120c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001210:	f7ff fa46 	bl	80006a0 <HAL_GetTick>
 8001214:	0002      	movs	r2, r0
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e0a9      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001222:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2202      	movs	r2, #2
 8001228:	4013      	ands	r3, r2
 800122a:	d1f1      	bne.n	8001210 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001230:	2b00      	cmp	r3, #0
 8001232:	d100      	bne.n	8001236 <HAL_RCC_OscConfig+0x632>
 8001234:	e09e      	b.n	8001374 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	2b0c      	cmp	r3, #12
 800123a:	d100      	bne.n	800123e <HAL_RCC_OscConfig+0x63a>
 800123c:	e077      	b.n	800132e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001242:	2b02      	cmp	r3, #2
 8001244:	d158      	bne.n	80012f8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <HAL_RCC_OscConfig+0x66c>)
 800124c:	4910      	ldr	r1, [pc, #64]	@ (8001290 <HAL_RCC_OscConfig+0x68c>)
 800124e:	400a      	ands	r2, r1
 8001250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff fa25 	bl	80006a0 <HAL_GetTick>
 8001256:	0003      	movs	r3, r0
 8001258:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800125a:	e01b      	b.n	8001294 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800125c:	f7ff fa20 	bl	80006a0 <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d914      	bls.n	8001294 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e083      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	40021000 	.word	0x40021000
 8001274:	fffffeff 	.word	0xfffffeff
 8001278:	40007000 	.word	0x40007000
 800127c:	fffffbff 	.word	0xfffffbff
 8001280:	00001388 	.word	0x00001388
 8001284:	efffffff 	.word	0xefffffff
 8001288:	40010000 	.word	0x40010000
 800128c:	ffffdfff 	.word	0xffffdfff
 8001290:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001294:	4b3a      	ldr	r3, [pc, #232]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	049b      	lsls	r3, r3, #18
 800129c:	4013      	ands	r3, r2
 800129e:	d1dd      	bne.n	800125c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012a0:	4b37      	ldr	r3, [pc, #220]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	4a37      	ldr	r2, [pc, #220]	@ (8001384 <HAL_RCC_OscConfig+0x780>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	0019      	movs	r1, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b8:	431a      	orrs	r2, r3
 80012ba:	4b31      	ldr	r3, [pc, #196]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012bc:	430a      	orrs	r2, r1
 80012be:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	0449      	lsls	r1, r1, #17
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7ff f9e7 	bl	80006a0 <HAL_GetTick>
 80012d2:	0003      	movs	r3, r0
 80012d4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d8:	f7ff f9e2 	bl	80006a0 <HAL_GetTick>
 80012dc:	0002      	movs	r2, r0
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e045      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80012ea:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2380      	movs	r3, #128	@ 0x80
 80012f0:	049b      	lsls	r3, r3, #18
 80012f2:	4013      	ands	r3, r2
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x6d4>
 80012f6:	e03d      	b.n	8001374 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f8:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 80012fe:	4922      	ldr	r1, [pc, #136]	@ (8001388 <HAL_RCC_OscConfig+0x784>)
 8001300:	400a      	ands	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff f9cc 	bl	80006a0 <HAL_GetTick>
 8001308:	0003      	movs	r3, r0
 800130a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130e:	f7ff f9c7 	bl	80006a0 <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e02a      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001320:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	049b      	lsls	r3, r3, #18
 8001328:	4013      	ands	r3, r2
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x70a>
 800132c:	e022      	b.n	8001374 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001332:	2b01      	cmp	r3, #1
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e01d      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_RCC_OscConfig+0x77c>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	025b      	lsls	r3, r3, #9
 8001346:	401a      	ands	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800134c:	429a      	cmp	r2, r3
 800134e:	d10f      	bne.n	8001370 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	23f0      	movs	r3, #240	@ 0xf0
 8001354:	039b      	lsls	r3, r3, #14
 8001356:	401a      	ands	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135c:	429a      	cmp	r2, r3
 800135e:	d107      	bne.n	8001370 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	23c0      	movs	r3, #192	@ 0xc0
 8001364:	041b      	lsls	r3, r3, #16
 8001366:	401a      	ands	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800136c:	429a      	cmp	r2, r3
 800136e:	d001      	beq.n	8001374 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	0018      	movs	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	b00a      	add	sp, #40	@ 0x28
 800137c:	bdb0      	pop	{r4, r5, r7, pc}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	40021000 	.word	0x40021000
 8001384:	ff02ffff 	.word	0xff02ffff
 8001388:	feffffff 	.word	0xfeffffff

0800138c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800138c:	b5b0      	push	{r4, r5, r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d101      	bne.n	80013a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e128      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013a0:	4b96      	ldr	r3, [pc, #600]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2201      	movs	r2, #1
 80013a6:	4013      	ands	r3, r2
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d91e      	bls.n	80013ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ae:	4b93      	ldr	r3, [pc, #588]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2201      	movs	r2, #1
 80013b4:	4393      	bics	r3, r2
 80013b6:	0019      	movs	r1, r3
 80013b8:	4b90      	ldr	r3, [pc, #576]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013c0:	f7ff f96e 	bl	80006a0 <HAL_GetTick>
 80013c4:	0003      	movs	r3, r0
 80013c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c8:	e009      	b.n	80013de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013ca:	f7ff f969 	bl	80006a0 <HAL_GetTick>
 80013ce:	0002      	movs	r2, r0
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	4a8a      	ldr	r2, [pc, #552]	@ (8001600 <HAL_RCC_ClockConfig+0x274>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d901      	bls.n	80013de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013da:	2303      	movs	r3, #3
 80013dc:	e109      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013de:	4b87      	ldr	r3, [pc, #540]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2201      	movs	r2, #1
 80013e4:	4013      	ands	r3, r2
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d1ee      	bne.n	80013ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2202      	movs	r2, #2
 80013f2:	4013      	ands	r3, r2
 80013f4:	d009      	beq.n	800140a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f6:	4b83      	ldr	r3, [pc, #524]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	22f0      	movs	r2, #240	@ 0xf0
 80013fc:	4393      	bics	r3, r2
 80013fe:	0019      	movs	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	4b7f      	ldr	r3, [pc, #508]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001406:	430a      	orrs	r2, r1
 8001408:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2201      	movs	r2, #1
 8001410:	4013      	ands	r3, r2
 8001412:	d100      	bne.n	8001416 <HAL_RCC_ClockConfig+0x8a>
 8001414:	e089      	b.n	800152a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d107      	bne.n	800142e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800141e:	4b79      	ldr	r3, [pc, #484]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	029b      	lsls	r3, r3, #10
 8001426:	4013      	ands	r3, r2
 8001428:	d120      	bne.n	800146c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e0e1      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b03      	cmp	r3, #3
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001436:	4b73      	ldr	r3, [pc, #460]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	2380      	movs	r3, #128	@ 0x80
 800143c:	049b      	lsls	r3, r3, #18
 800143e:	4013      	ands	r3, r2
 8001440:	d114      	bne.n	800146c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e0d5      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d106      	bne.n	800145c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800144e:	4b6d      	ldr	r3, [pc, #436]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2204      	movs	r2, #4
 8001454:	4013      	ands	r3, r2
 8001456:	d109      	bne.n	800146c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e0ca      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800145c:	4b69      	ldr	r3, [pc, #420]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4013      	ands	r3, r2
 8001466:	d101      	bne.n	800146c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0c2      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146c:	4b65      	ldr	r3, [pc, #404]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2203      	movs	r2, #3
 8001472:	4393      	bics	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4b62      	ldr	r3, [pc, #392]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 800147c:	430a      	orrs	r2, r1
 800147e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff f90e 	bl	80006a0 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d111      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001490:	e009      	b.n	80014a6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001492:	f7ff f905 	bl	80006a0 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	4a58      	ldr	r2, [pc, #352]	@ (8001600 <HAL_RCC_ClockConfig+0x274>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e0a5      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014a6:	4b57      	ldr	r3, [pc, #348]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	220c      	movs	r2, #12
 80014ac:	4013      	ands	r3, r2
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d1ef      	bne.n	8001492 <HAL_RCC_ClockConfig+0x106>
 80014b2:	e03a      	b.n	800152a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d111      	bne.n	80014e0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014bc:	e009      	b.n	80014d2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014be:	f7ff f8ef 	bl	80006a0 <HAL_GetTick>
 80014c2:	0002      	movs	r2, r0
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001600 <HAL_RCC_ClockConfig+0x274>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e08f      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	220c      	movs	r2, #12
 80014d8:	4013      	ands	r3, r2
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	d1ef      	bne.n	80014be <HAL_RCC_ClockConfig+0x132>
 80014de:	e024      	b.n	800152a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d11b      	bne.n	8001520 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e8:	e009      	b.n	80014fe <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ea:	f7ff f8d9 	bl	80006a0 <HAL_GetTick>
 80014ee:	0002      	movs	r2, r0
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	4a42      	ldr	r2, [pc, #264]	@ (8001600 <HAL_RCC_ClockConfig+0x274>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e079      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014fe:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	220c      	movs	r2, #12
 8001504:	4013      	ands	r3, r2
 8001506:	2b04      	cmp	r3, #4
 8001508:	d1ef      	bne.n	80014ea <HAL_RCC_ClockConfig+0x15e>
 800150a:	e00e      	b.n	800152a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150c:	f7ff f8c8 	bl	80006a0 <HAL_GetTick>
 8001510:	0002      	movs	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	4a3a      	ldr	r2, [pc, #232]	@ (8001600 <HAL_RCC_ClockConfig+0x274>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e068      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001520:	4b38      	ldr	r3, [pc, #224]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	220c      	movs	r2, #12
 8001526:	4013      	ands	r3, r2
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800152a:	4b34      	ldr	r3, [pc, #208]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2201      	movs	r2, #1
 8001530:	4013      	ands	r3, r2
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d21e      	bcs.n	8001576 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001538:	4b30      	ldr	r3, [pc, #192]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2201      	movs	r2, #1
 800153e:	4393      	bics	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	4b2e      	ldr	r3, [pc, #184]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800154a:	f7ff f8a9 	bl	80006a0 <HAL_GetTick>
 800154e:	0003      	movs	r3, r0
 8001550:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	e009      	b.n	8001568 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001554:	f7ff f8a4 	bl	80006a0 <HAL_GetTick>
 8001558:	0002      	movs	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	4a28      	ldr	r2, [pc, #160]	@ (8001600 <HAL_RCC_ClockConfig+0x274>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e044      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001568:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <HAL_RCC_ClockConfig+0x270>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2201      	movs	r2, #1
 800156e:	4013      	ands	r3, r2
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d1ee      	bne.n	8001554 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2204      	movs	r2, #4
 800157c:	4013      	ands	r3, r2
 800157e:	d009      	beq.n	8001594 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	4a20      	ldr	r2, [pc, #128]	@ (8001608 <HAL_RCC_ClockConfig+0x27c>)
 8001586:	4013      	ands	r3, r2
 8001588:	0019      	movs	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 8001590:	430a      	orrs	r2, r1
 8001592:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2208      	movs	r2, #8
 800159a:	4013      	ands	r3, r2
 800159c:	d00a      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	4a1a      	ldr	r2, [pc, #104]	@ (800160c <HAL_RCC_ClockConfig+0x280>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	00da      	lsls	r2, r3, #3
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 80015b0:	430a      	orrs	r2, r1
 80015b2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015b4:	f000 f832 	bl	800161c <HAL_RCC_GetSysClockFreq>
 80015b8:	0001      	movs	r1, r0
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_RCC_ClockConfig+0x278>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	220f      	movs	r2, #15
 80015c2:	4013      	ands	r3, r2
 80015c4:	4a12      	ldr	r2, [pc, #72]	@ (8001610 <HAL_RCC_ClockConfig+0x284>)
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	000a      	movs	r2, r1
 80015ca:	40da      	lsrs	r2, r3
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <HAL_RCC_ClockConfig+0x288>)
 80015ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_RCC_ClockConfig+0x28c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	250b      	movs	r5, #11
 80015d6:	197c      	adds	r4, r7, r5
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff f81b 	bl	8000614 <HAL_InitTick>
 80015de:	0003      	movs	r3, r0
 80015e0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80015e2:	197b      	adds	r3, r7, r5
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d002      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80015ea:	197b      	adds	r3, r7, r5
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	e000      	b.n	80015f2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b004      	add	sp, #16
 80015f8:	bdb0      	pop	{r4, r5, r7, pc}
 80015fa:	46c0      	nop			@ (mov r8, r8)
 80015fc:	40022000 	.word	0x40022000
 8001600:	00001388 	.word	0x00001388
 8001604:	40021000 	.word	0x40021000
 8001608:	fffff8ff 	.word	0xfffff8ff
 800160c:	ffffc7ff 	.word	0xffffc7ff
 8001610:	08001ec8 	.word	0x08001ec8
 8001614:	20000000 	.word	0x20000000
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001622:	4b3c      	ldr	r3, [pc, #240]	@ (8001714 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	220c      	movs	r2, #12
 800162c:	4013      	ands	r3, r2
 800162e:	2b0c      	cmp	r3, #12
 8001630:	d013      	beq.n	800165a <HAL_RCC_GetSysClockFreq+0x3e>
 8001632:	d85c      	bhi.n	80016ee <HAL_RCC_GetSysClockFreq+0xd2>
 8001634:	2b04      	cmp	r3, #4
 8001636:	d002      	beq.n	800163e <HAL_RCC_GetSysClockFreq+0x22>
 8001638:	2b08      	cmp	r3, #8
 800163a:	d00b      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x38>
 800163c:	e057      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800163e:	4b35      	ldr	r3, [pc, #212]	@ (8001714 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2210      	movs	r2, #16
 8001644:	4013      	ands	r3, r2
 8001646:	d002      	beq.n	800164e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001648:	4b33      	ldr	r3, [pc, #204]	@ (8001718 <HAL_RCC_GetSysClockFreq+0xfc>)
 800164a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800164c:	e05d      	b.n	800170a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800164e:	4b33      	ldr	r3, [pc, #204]	@ (800171c <HAL_RCC_GetSysClockFreq+0x100>)
 8001650:	613b      	str	r3, [r7, #16]
      break;
 8001652:	e05a      	b.n	800170a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001654:	4b32      	ldr	r3, [pc, #200]	@ (8001720 <HAL_RCC_GetSysClockFreq+0x104>)
 8001656:	613b      	str	r3, [r7, #16]
      break;
 8001658:	e057      	b.n	800170a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	0c9b      	lsrs	r3, r3, #18
 800165e:	220f      	movs	r2, #15
 8001660:	4013      	ands	r3, r2
 8001662:	4a30      	ldr	r2, [pc, #192]	@ (8001724 <HAL_RCC_GetSysClockFreq+0x108>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	0d9b      	lsrs	r3, r3, #22
 800166c:	2203      	movs	r2, #3
 800166e:	4013      	ands	r3, r2
 8001670:	3301      	adds	r3, #1
 8001672:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001674:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	2380      	movs	r3, #128	@ 0x80
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	4013      	ands	r3, r2
 800167e:	d00f      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	000a      	movs	r2, r1
 8001684:	0152      	lsls	r2, r2, #5
 8001686:	1a52      	subs	r2, r2, r1
 8001688:	0193      	lsls	r3, r2, #6
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	185b      	adds	r3, r3, r1
 8001690:	025b      	lsls	r3, r3, #9
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	0018      	movs	r0, r3
 8001696:	f7fe fd37 	bl	8000108 <__udivsi3>
 800169a:	0003      	movs	r3, r0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e023      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80016a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2210      	movs	r2, #16
 80016a6:	4013      	ands	r3, r2
 80016a8:	d00f      	beq.n	80016ca <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80016aa:	68b9      	ldr	r1, [r7, #8]
 80016ac:	000a      	movs	r2, r1
 80016ae:	0152      	lsls	r2, r2, #5
 80016b0:	1a52      	subs	r2, r2, r1
 80016b2:	0193      	lsls	r3, r2, #6
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	185b      	adds	r3, r3, r1
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	0018      	movs	r0, r3
 80016c0:	f7fe fd22 	bl	8000108 <__udivsi3>
 80016c4:	0003      	movs	r3, r0
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e00e      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	000a      	movs	r2, r1
 80016ce:	0152      	lsls	r2, r2, #5
 80016d0:	1a52      	subs	r2, r2, r1
 80016d2:	0193      	lsls	r3, r2, #6
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	185b      	adds	r3, r3, r1
 80016da:	029b      	lsls	r3, r3, #10
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	0018      	movs	r0, r3
 80016e0:	f7fe fd12 	bl	8000108 <__udivsi3>
 80016e4:	0003      	movs	r3, r0
 80016e6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
      break;
 80016ec:	e00d      	b.n	800170a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80016ee:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	0b5b      	lsrs	r3, r3, #13
 80016f4:	2207      	movs	r2, #7
 80016f6:	4013      	ands	r3, r2
 80016f8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	2280      	movs	r2, #128	@ 0x80
 8001700:	0212      	lsls	r2, r2, #8
 8001702:	409a      	lsls	r2, r3
 8001704:	0013      	movs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      break;
 8001708:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800170a:	693b      	ldr	r3, [r7, #16]
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b006      	add	sp, #24
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	003d0900 	.word	0x003d0900
 800171c:	00f42400 	.word	0x00f42400
 8001720:	007a1200 	.word	0x007a1200
 8001724:	08001ed8 	.word	0x08001ed8

08001728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e032      	b.n	80017a0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2239      	movs	r2, #57	@ 0x39
 800173e:	5c9b      	ldrb	r3, [r3, r2]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d107      	bne.n	8001756 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2238      	movs	r2, #56	@ 0x38
 800174a:	2100      	movs	r1, #0
 800174c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	0018      	movs	r0, r3
 8001752:	f7fe fec3 	bl	80004dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2239      	movs	r2, #57	@ 0x39
 800175a:	2102      	movs	r1, #2
 800175c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3304      	adds	r3, #4
 8001766:	0019      	movs	r1, r3
 8001768:	0010      	movs	r0, r2
 800176a:	f000 fa29 	bl	8001bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	223e      	movs	r2, #62	@ 0x3e
 8001772:	2101      	movs	r1, #1
 8001774:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	223a      	movs	r2, #58	@ 0x3a
 800177a:	2101      	movs	r1, #1
 800177c:	5499      	strb	r1, [r3, r2]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	223b      	movs	r2, #59	@ 0x3b
 8001782:	2101      	movs	r1, #1
 8001784:	5499      	strb	r1, [r3, r2]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	223c      	movs	r2, #60	@ 0x3c
 800178a:	2101      	movs	r1, #1
 800178c:	5499      	strb	r1, [r3, r2]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	223d      	movs	r2, #61	@ 0x3d
 8001792:	2101      	movs	r1, #1
 8001794:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2239      	movs	r2, #57	@ 0x39
 800179a:	2101      	movs	r1, #1
 800179c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2239      	movs	r2, #57	@ 0x39
 80017b4:	5c9b      	ldrb	r3, [r3, r2]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d001      	beq.n	80017c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e036      	b.n	800182e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2239      	movs	r2, #57	@ 0x39
 80017c4:	2102      	movs	r1, #2
 80017c6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2101      	movs	r1, #1
 80017d4:	430a      	orrs	r2, r1
 80017d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	05db      	lsls	r3, r3, #23
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d009      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x50>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a13      	ldr	r2, [pc, #76]	@ (8001838 <HAL_TIM_Base_Start_IT+0x90>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d004      	beq.n	80017f8 <HAL_TIM_Base_Start_IT+0x50>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a12      	ldr	r2, [pc, #72]	@ (800183c <HAL_TIM_Base_Start_IT+0x94>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d111      	bne.n	800181c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2207      	movs	r2, #7
 8001800:	4013      	ands	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2b06      	cmp	r3, #6
 8001808:	d010      	beq.n	800182c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800181a:	e007      	b.n	800182c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2101      	movs	r1, #1
 8001828:	430a      	orrs	r2, r1
 800182a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b004      	add	sp, #16
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	40010800 	.word	0x40010800
 800183c:	40011400 	.word	0x40011400

08001840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	2202      	movs	r2, #2
 800185c:	4013      	ands	r3, r2
 800185e:	d021      	beq.n	80018a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2202      	movs	r2, #2
 8001864:	4013      	ands	r3, r2
 8001866:	d01d      	beq.n	80018a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2203      	movs	r2, #3
 800186e:	4252      	negs	r2, r2
 8001870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2203      	movs	r2, #3
 8001880:	4013      	ands	r3, r2
 8001882:	d004      	beq.n	800188e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	0018      	movs	r0, r3
 8001888:	f000 f982 	bl	8001b90 <HAL_TIM_IC_CaptureCallback>
 800188c:	e007      	b.n	800189e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	0018      	movs	r0, r3
 8001892:	f000 f975 	bl	8001b80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	0018      	movs	r0, r3
 800189a:	f000 f981 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2204      	movs	r2, #4
 80018a8:	4013      	ands	r3, r2
 80018aa:	d022      	beq.n	80018f2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2204      	movs	r2, #4
 80018b0:	4013      	ands	r3, r2
 80018b2:	d01e      	beq.n	80018f2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2205      	movs	r2, #5
 80018ba:	4252      	negs	r2, r2
 80018bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2202      	movs	r2, #2
 80018c2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699a      	ldr	r2, [r3, #24]
 80018ca:	23c0      	movs	r3, #192	@ 0xc0
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4013      	ands	r3, r2
 80018d0:	d004      	beq.n	80018dc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f000 f95b 	bl	8001b90 <HAL_TIM_IC_CaptureCallback>
 80018da:	e007      	b.n	80018ec <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	0018      	movs	r0, r3
 80018e0:	f000 f94e 	bl	8001b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	0018      	movs	r0, r3
 80018e8:	f000 f95a 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2208      	movs	r2, #8
 80018f6:	4013      	ands	r3, r2
 80018f8:	d021      	beq.n	800193e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2208      	movs	r2, #8
 80018fe:	4013      	ands	r3, r2
 8001900:	d01d      	beq.n	800193e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2209      	movs	r2, #9
 8001908:	4252      	negs	r2, r2
 800190a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2204      	movs	r2, #4
 8001910:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	2203      	movs	r2, #3
 800191a:	4013      	ands	r3, r2
 800191c:	d004      	beq.n	8001928 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	0018      	movs	r0, r3
 8001922:	f000 f935 	bl	8001b90 <HAL_TIM_IC_CaptureCallback>
 8001926:	e007      	b.n	8001938 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	0018      	movs	r0, r3
 800192c:	f000 f928 	bl	8001b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	0018      	movs	r0, r3
 8001934:	f000 f934 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2210      	movs	r2, #16
 8001942:	4013      	ands	r3, r2
 8001944:	d022      	beq.n	800198c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2210      	movs	r2, #16
 800194a:	4013      	ands	r3, r2
 800194c:	d01e      	beq.n	800198c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2211      	movs	r2, #17
 8001954:	4252      	negs	r2, r2
 8001956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2208      	movs	r2, #8
 800195c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69da      	ldr	r2, [r3, #28]
 8001964:	23c0      	movs	r3, #192	@ 0xc0
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4013      	ands	r3, r2
 800196a:	d004      	beq.n	8001976 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	0018      	movs	r0, r3
 8001970:	f000 f90e 	bl	8001b90 <HAL_TIM_IC_CaptureCallback>
 8001974:	e007      	b.n	8001986 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	0018      	movs	r0, r3
 800197a:	f000 f901 	bl	8001b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	0018      	movs	r0, r3
 8001982:	f000 f90d 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	2201      	movs	r2, #1
 8001990:	4013      	ands	r3, r2
 8001992:	d00c      	beq.n	80019ae <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2201      	movs	r2, #1
 8001998:	4013      	ands	r3, r2
 800199a:	d008      	beq.n	80019ae <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2202      	movs	r2, #2
 80019a2:	4252      	negs	r2, r2
 80019a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7fe fc39 	bl	8000220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2240      	movs	r2, #64	@ 0x40
 80019b2:	4013      	ands	r3, r2
 80019b4:	d00c      	beq.n	80019d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2240      	movs	r2, #64	@ 0x40
 80019ba:	4013      	ands	r3, r2
 80019bc:	d008      	beq.n	80019d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2241      	movs	r2, #65	@ 0x41
 80019c4:	4252      	negs	r2, r2
 80019c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f000 f8f0 	bl	8001bb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019d0:	46c0      	nop			@ (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b004      	add	sp, #16
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019e2:	230f      	movs	r3, #15
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2238      	movs	r2, #56	@ 0x38
 80019ee:	5c9b      	ldrb	r3, [r3, r2]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_TIM_ConfigClockSource+0x20>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e0bc      	b.n	8001b72 <HAL_TIM_ConfigClockSource+0x19a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2238      	movs	r2, #56	@ 0x38
 80019fc:	2101      	movs	r1, #1
 80019fe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2239      	movs	r2, #57	@ 0x39
 8001a04:	2102      	movs	r1, #2
 8001a06:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2277      	movs	r2, #119	@ 0x77
 8001a14:	4393      	bics	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4a58      	ldr	r2, [pc, #352]	@ (8001b7c <HAL_TIM_ConfigClockSource+0x1a4>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2280      	movs	r2, #128	@ 0x80
 8001a2e:	0192      	lsls	r2, r2, #6
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d040      	beq.n	8001ab6 <HAL_TIM_ConfigClockSource+0xde>
 8001a34:	2280      	movs	r2, #128	@ 0x80
 8001a36:	0192      	lsls	r2, r2, #6
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d900      	bls.n	8001a3e <HAL_TIM_ConfigClockSource+0x66>
 8001a3c:	e088      	b.n	8001b50 <HAL_TIM_ConfigClockSource+0x178>
 8001a3e:	2280      	movs	r2, #128	@ 0x80
 8001a40:	0152      	lsls	r2, r2, #5
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d100      	bne.n	8001a48 <HAL_TIM_ConfigClockSource+0x70>
 8001a46:	e088      	b.n	8001b5a <HAL_TIM_ConfigClockSource+0x182>
 8001a48:	2280      	movs	r2, #128	@ 0x80
 8001a4a:	0152      	lsls	r2, r2, #5
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d900      	bls.n	8001a52 <HAL_TIM_ConfigClockSource+0x7a>
 8001a50:	e07e      	b.n	8001b50 <HAL_TIM_ConfigClockSource+0x178>
 8001a52:	2b70      	cmp	r3, #112	@ 0x70
 8001a54:	d018      	beq.n	8001a88 <HAL_TIM_ConfigClockSource+0xb0>
 8001a56:	d900      	bls.n	8001a5a <HAL_TIM_ConfigClockSource+0x82>
 8001a58:	e07a      	b.n	8001b50 <HAL_TIM_ConfigClockSource+0x178>
 8001a5a:	2b60      	cmp	r3, #96	@ 0x60
 8001a5c:	d04f      	beq.n	8001afe <HAL_TIM_ConfigClockSource+0x126>
 8001a5e:	d900      	bls.n	8001a62 <HAL_TIM_ConfigClockSource+0x8a>
 8001a60:	e076      	b.n	8001b50 <HAL_TIM_ConfigClockSource+0x178>
 8001a62:	2b50      	cmp	r3, #80	@ 0x50
 8001a64:	d03b      	beq.n	8001ade <HAL_TIM_ConfigClockSource+0x106>
 8001a66:	d900      	bls.n	8001a6a <HAL_TIM_ConfigClockSource+0x92>
 8001a68:	e072      	b.n	8001b50 <HAL_TIM_ConfigClockSource+0x178>
 8001a6a:	2b40      	cmp	r3, #64	@ 0x40
 8001a6c:	d057      	beq.n	8001b1e <HAL_TIM_ConfigClockSource+0x146>
 8001a6e:	d900      	bls.n	8001a72 <HAL_TIM_ConfigClockSource+0x9a>
 8001a70:	e06e      	b.n	8001b50 <HAL_TIM_ConfigClockSource+0x178>
 8001a72:	2b30      	cmp	r3, #48	@ 0x30
 8001a74:	d063      	beq.n	8001b3e <HAL_TIM_ConfigClockSource+0x166>
 8001a76:	d86b      	bhi.n	8001b50 <HAL_TIM_ConfigClockSource+0x178>
 8001a78:	2b20      	cmp	r3, #32
 8001a7a:	d060      	beq.n	8001b3e <HAL_TIM_ConfigClockSource+0x166>
 8001a7c:	d868      	bhi.n	8001b50 <HAL_TIM_ConfigClockSource+0x178>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d05d      	beq.n	8001b3e <HAL_TIM_ConfigClockSource+0x166>
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d05b      	beq.n	8001b3e <HAL_TIM_ConfigClockSource+0x166>
 8001a86:	e063      	b.n	8001b50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a98:	f000 f966 	bl	8001d68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2277      	movs	r2, #119	@ 0x77
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	609a      	str	r2, [r3, #8]
      break;
 8001ab4:	e052      	b.n	8001b5c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ac6:	f000 f94f 	bl	8001d68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2180      	movs	r1, #128	@ 0x80
 8001ad6:	01c9      	lsls	r1, r1, #7
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	609a      	str	r2, [r3, #8]
      break;
 8001adc:	e03e      	b.n	8001b5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001aea:	001a      	movs	r2, r3
 8001aec:	f000 f8c2 	bl	8001c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2150      	movs	r1, #80	@ 0x50
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 f91c 	bl	8001d34 <TIM_ITRx_SetConfig>
      break;
 8001afc:	e02e      	b.n	8001b5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	f000 f8e0 	bl	8001cd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2160      	movs	r1, #96	@ 0x60
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 f90c 	bl	8001d34 <TIM_ITRx_SetConfig>
      break;
 8001b1c:	e01e      	b.n	8001b5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	f000 f8a2 	bl	8001c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2140      	movs	r1, #64	@ 0x40
 8001b36:	0018      	movs	r0, r3
 8001b38:	f000 f8fc 	bl	8001d34 <TIM_ITRx_SetConfig>
      break;
 8001b3c:	e00e      	b.n	8001b5c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	0019      	movs	r1, r3
 8001b48:	0010      	movs	r0, r2
 8001b4a:	f000 f8f3 	bl	8001d34 <TIM_ITRx_SetConfig>
      break;
 8001b4e:	e005      	b.n	8001b5c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001b50:	230f      	movs	r3, #15
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
      break;
 8001b58:	e000      	b.n	8001b5c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001b5a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2239      	movs	r2, #57	@ 0x39
 8001b60:	2101      	movs	r1, #1
 8001b62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2238      	movs	r2, #56	@ 0x38
 8001b68:	2100      	movs	r1, #0
 8001b6a:	5499      	strb	r1, [r3, r2]

  return status;
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	781b      	ldrb	r3, [r3, #0]
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b004      	add	sp, #16
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	ffff00ff 	.word	0xffff00ff

08001b80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ba8:	46c0      	nop			@ (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bb8:	46c0      	nop			@ (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	b002      	add	sp, #8
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	2380      	movs	r3, #128	@ 0x80
 8001bd4:	05db      	lsls	r3, r3, #23
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d007      	beq.n	8001bea <TIM_Base_SetConfig+0x2a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a22      	ldr	r2, [pc, #136]	@ (8001c68 <TIM_Base_SetConfig+0xa8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d003      	beq.n	8001bea <TIM_Base_SetConfig+0x2a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a21      	ldr	r2, [pc, #132]	@ (8001c6c <TIM_Base_SetConfig+0xac>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d108      	bne.n	8001bfc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2270      	movs	r2, #112	@ 0x70
 8001bee:	4393      	bics	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	05db      	lsls	r3, r3, #23
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d007      	beq.n	8001c16 <TIM_Base_SetConfig+0x56>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a17      	ldr	r2, [pc, #92]	@ (8001c68 <TIM_Base_SetConfig+0xa8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d003      	beq.n	8001c16 <TIM_Base_SetConfig+0x56>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a16      	ldr	r2, [pc, #88]	@ (8001c6c <TIM_Base_SetConfig+0xac>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d108      	bne.n	8001c28 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4a15      	ldr	r2, [pc, #84]	@ (8001c70 <TIM_Base_SetConfig+0xb0>)
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2280      	movs	r2, #128	@ 0x80
 8001c2c:	4393      	bics	r3, r2
 8001c2e:	001a      	movs	r2, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	601a      	str	r2, [r3, #0]
}
 8001c60:	46c0      	nop			@ (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b004      	add	sp, #16
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40010800 	.word	0x40010800
 8001c6c:	40011400 	.word	0x40011400
 8001c70:	fffffcff 	.word	0xfffffcff

08001c74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4393      	bics	r3, r2
 8001c8e:	001a      	movs	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	22f0      	movs	r2, #240	@ 0xf0
 8001c9e:	4393      	bics	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	011b      	lsls	r3, r3, #4
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	220a      	movs	r2, #10
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	621a      	str	r2, [r3, #32]
}
 8001cc8:	46c0      	nop			@ (mov r8, r8)
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b006      	add	sp, #24
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	2210      	movs	r2, #16
 8001ce8:	4393      	bics	r3, r2
 8001cea:	001a      	movs	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <TIM_TI2_ConfigInputStage+0x60>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	031b      	lsls	r3, r3, #12
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	22a0      	movs	r2, #160	@ 0xa0
 8001d0c:	4393      	bics	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	621a      	str	r2, [r3, #32]
}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b006      	add	sp, #24
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	ffff0fff 	.word	0xffff0fff

08001d34 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2270      	movs	r2, #112	@ 0x70
 8001d48:	4393      	bics	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	2207      	movs	r2, #7
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	609a      	str	r2, [r3, #8]
}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	4a09      	ldr	r2, [pc, #36]	@ (8001da4 <TIM_ETR_SetConfig+0x3c>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	021a      	lsls	r2, r3, #8
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	609a      	str	r2, [r3, #8]
}
 8001d9c:	46c0      	nop			@ (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b006      	add	sp, #24
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	ffff00ff 	.word	0xffff00ff

08001da8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2238      	movs	r2, #56	@ 0x38
 8001db6:	5c9b      	ldrb	r3, [r3, r2]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e042      	b.n	8001e46 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2238      	movs	r2, #56	@ 0x38
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2239      	movs	r2, #57	@ 0x39
 8001dcc:	2102      	movs	r1, #2
 8001dce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2270      	movs	r2, #112	@ 0x70
 8001de4:	4393      	bics	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	2380      	movs	r3, #128	@ 0x80
 8001e00:	05db      	lsls	r3, r3, #23
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d009      	beq.n	8001e1a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a11      	ldr	r2, [pc, #68]	@ (8001e50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d004      	beq.n	8001e1a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0f      	ldr	r2, [pc, #60]	@ (8001e54 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10c      	bne.n	8001e34 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2280      	movs	r2, #128	@ 0x80
 8001e1e:	4393      	bics	r3, r2
 8001e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2239      	movs	r2, #57	@ 0x39
 8001e38:	2101      	movs	r1, #1
 8001e3a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2238      	movs	r2, #56	@ 0x38
 8001e40:	2100      	movs	r1, #0
 8001e42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	0018      	movs	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b004      	add	sp, #16
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	40010800 	.word	0x40010800
 8001e54:	40011400 	.word	0x40011400

08001e58 <memset>:
 8001e58:	0003      	movs	r3, r0
 8001e5a:	1882      	adds	r2, r0, r2
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d100      	bne.n	8001e62 <memset+0xa>
 8001e60:	4770      	bx	lr
 8001e62:	7019      	strb	r1, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	e7f9      	b.n	8001e5c <memset+0x4>

08001e68 <__libc_init_array>:
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	2600      	movs	r6, #0
 8001e6c:	4c0c      	ldr	r4, [pc, #48]	@ (8001ea0 <__libc_init_array+0x38>)
 8001e6e:	4d0d      	ldr	r5, [pc, #52]	@ (8001ea4 <__libc_init_array+0x3c>)
 8001e70:	1b64      	subs	r4, r4, r5
 8001e72:	10a4      	asrs	r4, r4, #2
 8001e74:	42a6      	cmp	r6, r4
 8001e76:	d109      	bne.n	8001e8c <__libc_init_array+0x24>
 8001e78:	2600      	movs	r6, #0
 8001e7a:	f000 f819 	bl	8001eb0 <_init>
 8001e7e:	4c0a      	ldr	r4, [pc, #40]	@ (8001ea8 <__libc_init_array+0x40>)
 8001e80:	4d0a      	ldr	r5, [pc, #40]	@ (8001eac <__libc_init_array+0x44>)
 8001e82:	1b64      	subs	r4, r4, r5
 8001e84:	10a4      	asrs	r4, r4, #2
 8001e86:	42a6      	cmp	r6, r4
 8001e88:	d105      	bne.n	8001e96 <__libc_init_array+0x2e>
 8001e8a:	bd70      	pop	{r4, r5, r6, pc}
 8001e8c:	00b3      	lsls	r3, r6, #2
 8001e8e:	58eb      	ldr	r3, [r5, r3]
 8001e90:	4798      	blx	r3
 8001e92:	3601      	adds	r6, #1
 8001e94:	e7ee      	b.n	8001e74 <__libc_init_array+0xc>
 8001e96:	00b3      	lsls	r3, r6, #2
 8001e98:	58eb      	ldr	r3, [r5, r3]
 8001e9a:	4798      	blx	r3
 8001e9c:	3601      	adds	r6, #1
 8001e9e:	e7f2      	b.n	8001e86 <__libc_init_array+0x1e>
 8001ea0:	08001ee4 	.word	0x08001ee4
 8001ea4:	08001ee4 	.word	0x08001ee4
 8001ea8:	08001ee8 	.word	0x08001ee8
 8001eac:	08001ee4 	.word	0x08001ee4

08001eb0 <_init>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb6:	bc08      	pop	{r3}
 8001eb8:	469e      	mov	lr, r3
 8001eba:	4770      	bx	lr

08001ebc <_fini>:
 8001ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ebe:	46c0      	nop			@ (mov r8, r8)
 8001ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ec2:	bc08      	pop	{r3}
 8001ec4:	469e      	mov	lr, r3
 8001ec6:	4770      	bx	lr

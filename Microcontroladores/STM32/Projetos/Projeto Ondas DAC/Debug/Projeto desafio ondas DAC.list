
Projeto desafio ondas DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08004d98  08004d98  00005d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f90  08004f90  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004f90  08004f90  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004f90  08004f90  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f90  08004f90  00005f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f94  08004f94  00005f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004f98  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08004fa4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004fa4  0000618c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b16  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aba  00000000  00000000  0000eb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00010608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073a  00000000  00000000  00010f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014089  00000000  00000000  000116d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad12  00000000  00000000  0002575b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c2af  00000000  00000000  0003046d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac71c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024e4  00000000  00000000  000ac760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  000aec44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d7c 	.word	0x08004d7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004d7c 	.word	0x08004d7c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fccb 	bl	8000da0 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fc0f 	bl	8000c38 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fcbd 	bl	8000da0 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fcb3 	bl	8000da0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fc39 	bl	8000cc0 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fc2f 	bl	8000cc0 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__aeabi_d2uiz>:
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	2200      	movs	r2, #0
 8000474:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <__aeabi_d2uiz+0x38>)
 8000476:	0004      	movs	r4, r0
 8000478:	000d      	movs	r5, r1
 800047a:	f7ff ffef 	bl	800045c <__aeabi_dcmpge>
 800047e:	2800      	cmp	r0, #0
 8000480:	d104      	bne.n	800048c <__aeabi_d2uiz+0x1c>
 8000482:	0020      	movs	r0, r4
 8000484:	0029      	movs	r1, r5
 8000486:	f001 fbe9 	bl	8001c5c <__aeabi_d2iz>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <__aeabi_d2uiz+0x38>)
 800048e:	2200      	movs	r2, #0
 8000490:	0020      	movs	r0, r4
 8000492:	0029      	movs	r1, r5
 8000494:	f000 ffd8 	bl	8001448 <__aeabi_dsub>
 8000498:	f001 fbe0 	bl	8001c5c <__aeabi_d2iz>
 800049c:	2380      	movs	r3, #128	@ 0x80
 800049e:	061b      	lsls	r3, r3, #24
 80004a0:	469c      	mov	ip, r3
 80004a2:	4460      	add	r0, ip
 80004a4:	e7f1      	b.n	800048a <__aeabi_d2uiz+0x1a>
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	41e00000 	.word	0x41e00000

080004ac <__aeabi_dadd>:
 80004ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ae:	464f      	mov	r7, r9
 80004b0:	4646      	mov	r6, r8
 80004b2:	46d6      	mov	lr, sl
 80004b4:	b5c0      	push	{r6, r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	9000      	str	r0, [sp, #0]
 80004ba:	9101      	str	r1, [sp, #4]
 80004bc:	030e      	lsls	r6, r1, #12
 80004be:	004c      	lsls	r4, r1, #1
 80004c0:	0fcd      	lsrs	r5, r1, #31
 80004c2:	0a71      	lsrs	r1, r6, #9
 80004c4:	9e00      	ldr	r6, [sp, #0]
 80004c6:	005f      	lsls	r7, r3, #1
 80004c8:	0f76      	lsrs	r6, r6, #29
 80004ca:	430e      	orrs	r6, r1
 80004cc:	9900      	ldr	r1, [sp, #0]
 80004ce:	9200      	str	r2, [sp, #0]
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	00c9      	lsls	r1, r1, #3
 80004d4:	4689      	mov	r9, r1
 80004d6:	0319      	lsls	r1, r3, #12
 80004d8:	0d7b      	lsrs	r3, r7, #21
 80004da:	4698      	mov	r8, r3
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	0a49      	lsrs	r1, r1, #9
 80004e0:	0fdb      	lsrs	r3, r3, #31
 80004e2:	469c      	mov	ip, r3
 80004e4:	9b00      	ldr	r3, [sp, #0]
 80004e6:	9a00      	ldr	r2, [sp, #0]
 80004e8:	0f5b      	lsrs	r3, r3, #29
 80004ea:	430b      	orrs	r3, r1
 80004ec:	4641      	mov	r1, r8
 80004ee:	0d64      	lsrs	r4, r4, #21
 80004f0:	00d2      	lsls	r2, r2, #3
 80004f2:	1a61      	subs	r1, r4, r1
 80004f4:	4565      	cmp	r5, ip
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x4e>
 80004f8:	e0a6      	b.n	8000648 <__aeabi_dadd+0x19c>
 80004fa:	2900      	cmp	r1, #0
 80004fc:	dd72      	ble.n	80005e4 <__aeabi_dadd+0x138>
 80004fe:	4647      	mov	r7, r8
 8000500:	2f00      	cmp	r7, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_dadd+0x5a>
 8000504:	e0dd      	b.n	80006c2 <__aeabi_dadd+0x216>
 8000506:	4fcc      	ldr	r7, [pc, #816]	@ (8000838 <__aeabi_dadd+0x38c>)
 8000508:	42bc      	cmp	r4, r7
 800050a:	d100      	bne.n	800050e <__aeabi_dadd+0x62>
 800050c:	e19a      	b.n	8000844 <__aeabi_dadd+0x398>
 800050e:	2701      	movs	r7, #1
 8000510:	2938      	cmp	r1, #56	@ 0x38
 8000512:	dc17      	bgt.n	8000544 <__aeabi_dadd+0x98>
 8000514:	2780      	movs	r7, #128	@ 0x80
 8000516:	043f      	lsls	r7, r7, #16
 8000518:	433b      	orrs	r3, r7
 800051a:	291f      	cmp	r1, #31
 800051c:	dd00      	ble.n	8000520 <__aeabi_dadd+0x74>
 800051e:	e1dd      	b.n	80008dc <__aeabi_dadd+0x430>
 8000520:	2720      	movs	r7, #32
 8000522:	1a78      	subs	r0, r7, r1
 8000524:	001f      	movs	r7, r3
 8000526:	4087      	lsls	r7, r0
 8000528:	46ba      	mov	sl, r7
 800052a:	0017      	movs	r7, r2
 800052c:	40cf      	lsrs	r7, r1
 800052e:	4684      	mov	ip, r0
 8000530:	0038      	movs	r0, r7
 8000532:	4657      	mov	r7, sl
 8000534:	4307      	orrs	r7, r0
 8000536:	4660      	mov	r0, ip
 8000538:	4082      	lsls	r2, r0
 800053a:	40cb      	lsrs	r3, r1
 800053c:	1e50      	subs	r0, r2, #1
 800053e:	4182      	sbcs	r2, r0
 8000540:	1af6      	subs	r6, r6, r3
 8000542:	4317      	orrs	r7, r2
 8000544:	464b      	mov	r3, r9
 8000546:	1bdf      	subs	r7, r3, r7
 8000548:	45b9      	cmp	r9, r7
 800054a:	4180      	sbcs	r0, r0
 800054c:	4240      	negs	r0, r0
 800054e:	1a36      	subs	r6, r6, r0
 8000550:	0233      	lsls	r3, r6, #8
 8000552:	d400      	bmi.n	8000556 <__aeabi_dadd+0xaa>
 8000554:	e0ff      	b.n	8000756 <__aeabi_dadd+0x2aa>
 8000556:	0276      	lsls	r6, r6, #9
 8000558:	0a76      	lsrs	r6, r6, #9
 800055a:	2e00      	cmp	r6, #0
 800055c:	d100      	bne.n	8000560 <__aeabi_dadd+0xb4>
 800055e:	e13c      	b.n	80007da <__aeabi_dadd+0x32e>
 8000560:	0030      	movs	r0, r6
 8000562:	f001 fbe5 	bl	8001d30 <__clzsi2>
 8000566:	0003      	movs	r3, r0
 8000568:	3b08      	subs	r3, #8
 800056a:	2120      	movs	r1, #32
 800056c:	0038      	movs	r0, r7
 800056e:	1aca      	subs	r2, r1, r3
 8000570:	40d0      	lsrs	r0, r2
 8000572:	409e      	lsls	r6, r3
 8000574:	0002      	movs	r2, r0
 8000576:	409f      	lsls	r7, r3
 8000578:	4332      	orrs	r2, r6
 800057a:	429c      	cmp	r4, r3
 800057c:	dd00      	ble.n	8000580 <__aeabi_dadd+0xd4>
 800057e:	e1a6      	b.n	80008ce <__aeabi_dadd+0x422>
 8000580:	1b18      	subs	r0, r3, r4
 8000582:	3001      	adds	r0, #1
 8000584:	1a09      	subs	r1, r1, r0
 8000586:	003e      	movs	r6, r7
 8000588:	408f      	lsls	r7, r1
 800058a:	40c6      	lsrs	r6, r0
 800058c:	1e7b      	subs	r3, r7, #1
 800058e:	419f      	sbcs	r7, r3
 8000590:	0013      	movs	r3, r2
 8000592:	408b      	lsls	r3, r1
 8000594:	4337      	orrs	r7, r6
 8000596:	431f      	orrs	r7, r3
 8000598:	40c2      	lsrs	r2, r0
 800059a:	003b      	movs	r3, r7
 800059c:	0016      	movs	r6, r2
 800059e:	2400      	movs	r4, #0
 80005a0:	4313      	orrs	r3, r2
 80005a2:	d100      	bne.n	80005a6 <__aeabi_dadd+0xfa>
 80005a4:	e1df      	b.n	8000966 <__aeabi_dadd+0x4ba>
 80005a6:	077b      	lsls	r3, r7, #29
 80005a8:	d100      	bne.n	80005ac <__aeabi_dadd+0x100>
 80005aa:	e332      	b.n	8000c12 <__aeabi_dadd+0x766>
 80005ac:	230f      	movs	r3, #15
 80005ae:	003a      	movs	r2, r7
 80005b0:	403b      	ands	r3, r7
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d004      	beq.n	80005c0 <__aeabi_dadd+0x114>
 80005b6:	1d3a      	adds	r2, r7, #4
 80005b8:	42ba      	cmp	r2, r7
 80005ba:	41bf      	sbcs	r7, r7
 80005bc:	427f      	negs	r7, r7
 80005be:	19f6      	adds	r6, r6, r7
 80005c0:	0233      	lsls	r3, r6, #8
 80005c2:	d400      	bmi.n	80005c6 <__aeabi_dadd+0x11a>
 80005c4:	e323      	b.n	8000c0e <__aeabi_dadd+0x762>
 80005c6:	4b9c      	ldr	r3, [pc, #624]	@ (8000838 <__aeabi_dadd+0x38c>)
 80005c8:	3401      	adds	r4, #1
 80005ca:	429c      	cmp	r4, r3
 80005cc:	d100      	bne.n	80005d0 <__aeabi_dadd+0x124>
 80005ce:	e0b4      	b.n	800073a <__aeabi_dadd+0x28e>
 80005d0:	4b9a      	ldr	r3, [pc, #616]	@ (800083c <__aeabi_dadd+0x390>)
 80005d2:	0564      	lsls	r4, r4, #21
 80005d4:	401e      	ands	r6, r3
 80005d6:	0d64      	lsrs	r4, r4, #21
 80005d8:	0777      	lsls	r7, r6, #29
 80005da:	08d2      	lsrs	r2, r2, #3
 80005dc:	0276      	lsls	r6, r6, #9
 80005de:	4317      	orrs	r7, r2
 80005e0:	0b36      	lsrs	r6, r6, #12
 80005e2:	e0ac      	b.n	800073e <__aeabi_dadd+0x292>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	d100      	bne.n	80005ea <__aeabi_dadd+0x13e>
 80005e8:	e07e      	b.n	80006e8 <__aeabi_dadd+0x23c>
 80005ea:	4641      	mov	r1, r8
 80005ec:	1b09      	subs	r1, r1, r4
 80005ee:	2c00      	cmp	r4, #0
 80005f0:	d000      	beq.n	80005f4 <__aeabi_dadd+0x148>
 80005f2:	e160      	b.n	80008b6 <__aeabi_dadd+0x40a>
 80005f4:	0034      	movs	r4, r6
 80005f6:	4648      	mov	r0, r9
 80005f8:	4304      	orrs	r4, r0
 80005fa:	d100      	bne.n	80005fe <__aeabi_dadd+0x152>
 80005fc:	e1c9      	b.n	8000992 <__aeabi_dadd+0x4e6>
 80005fe:	1e4c      	subs	r4, r1, #1
 8000600:	2901      	cmp	r1, #1
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x15a>
 8000604:	e22e      	b.n	8000a64 <__aeabi_dadd+0x5b8>
 8000606:	4d8c      	ldr	r5, [pc, #560]	@ (8000838 <__aeabi_dadd+0x38c>)
 8000608:	42a9      	cmp	r1, r5
 800060a:	d100      	bne.n	800060e <__aeabi_dadd+0x162>
 800060c:	e224      	b.n	8000a58 <__aeabi_dadd+0x5ac>
 800060e:	2701      	movs	r7, #1
 8000610:	2c38      	cmp	r4, #56	@ 0x38
 8000612:	dc11      	bgt.n	8000638 <__aeabi_dadd+0x18c>
 8000614:	0021      	movs	r1, r4
 8000616:	291f      	cmp	r1, #31
 8000618:	dd00      	ble.n	800061c <__aeabi_dadd+0x170>
 800061a:	e20b      	b.n	8000a34 <__aeabi_dadd+0x588>
 800061c:	2420      	movs	r4, #32
 800061e:	0037      	movs	r7, r6
 8000620:	4648      	mov	r0, r9
 8000622:	1a64      	subs	r4, r4, r1
 8000624:	40a7      	lsls	r7, r4
 8000626:	40c8      	lsrs	r0, r1
 8000628:	4307      	orrs	r7, r0
 800062a:	4648      	mov	r0, r9
 800062c:	40a0      	lsls	r0, r4
 800062e:	40ce      	lsrs	r6, r1
 8000630:	1e44      	subs	r4, r0, #1
 8000632:	41a0      	sbcs	r0, r4
 8000634:	1b9b      	subs	r3, r3, r6
 8000636:	4307      	orrs	r7, r0
 8000638:	1bd7      	subs	r7, r2, r7
 800063a:	42ba      	cmp	r2, r7
 800063c:	4192      	sbcs	r2, r2
 800063e:	4252      	negs	r2, r2
 8000640:	4665      	mov	r5, ip
 8000642:	4644      	mov	r4, r8
 8000644:	1a9e      	subs	r6, r3, r2
 8000646:	e783      	b.n	8000550 <__aeabi_dadd+0xa4>
 8000648:	2900      	cmp	r1, #0
 800064a:	dc00      	bgt.n	800064e <__aeabi_dadd+0x1a2>
 800064c:	e09c      	b.n	8000788 <__aeabi_dadd+0x2dc>
 800064e:	4647      	mov	r7, r8
 8000650:	2f00      	cmp	r7, #0
 8000652:	d167      	bne.n	8000724 <__aeabi_dadd+0x278>
 8000654:	001f      	movs	r7, r3
 8000656:	4317      	orrs	r7, r2
 8000658:	d100      	bne.n	800065c <__aeabi_dadd+0x1b0>
 800065a:	e0e4      	b.n	8000826 <__aeabi_dadd+0x37a>
 800065c:	1e48      	subs	r0, r1, #1
 800065e:	2901      	cmp	r1, #1
 8000660:	d100      	bne.n	8000664 <__aeabi_dadd+0x1b8>
 8000662:	e19b      	b.n	800099c <__aeabi_dadd+0x4f0>
 8000664:	4f74      	ldr	r7, [pc, #464]	@ (8000838 <__aeabi_dadd+0x38c>)
 8000666:	42b9      	cmp	r1, r7
 8000668:	d100      	bne.n	800066c <__aeabi_dadd+0x1c0>
 800066a:	e0eb      	b.n	8000844 <__aeabi_dadd+0x398>
 800066c:	2701      	movs	r7, #1
 800066e:	0001      	movs	r1, r0
 8000670:	2838      	cmp	r0, #56	@ 0x38
 8000672:	dc11      	bgt.n	8000698 <__aeabi_dadd+0x1ec>
 8000674:	291f      	cmp	r1, #31
 8000676:	dd00      	ble.n	800067a <__aeabi_dadd+0x1ce>
 8000678:	e1c7      	b.n	8000a0a <__aeabi_dadd+0x55e>
 800067a:	2720      	movs	r7, #32
 800067c:	1a78      	subs	r0, r7, r1
 800067e:	001f      	movs	r7, r3
 8000680:	4684      	mov	ip, r0
 8000682:	4087      	lsls	r7, r0
 8000684:	0010      	movs	r0, r2
 8000686:	40c8      	lsrs	r0, r1
 8000688:	4307      	orrs	r7, r0
 800068a:	4660      	mov	r0, ip
 800068c:	4082      	lsls	r2, r0
 800068e:	40cb      	lsrs	r3, r1
 8000690:	1e50      	subs	r0, r2, #1
 8000692:	4182      	sbcs	r2, r0
 8000694:	18f6      	adds	r6, r6, r3
 8000696:	4317      	orrs	r7, r2
 8000698:	444f      	add	r7, r9
 800069a:	454f      	cmp	r7, r9
 800069c:	4180      	sbcs	r0, r0
 800069e:	4240      	negs	r0, r0
 80006a0:	1836      	adds	r6, r6, r0
 80006a2:	0233      	lsls	r3, r6, #8
 80006a4:	d557      	bpl.n	8000756 <__aeabi_dadd+0x2aa>
 80006a6:	4b64      	ldr	r3, [pc, #400]	@ (8000838 <__aeabi_dadd+0x38c>)
 80006a8:	3401      	adds	r4, #1
 80006aa:	429c      	cmp	r4, r3
 80006ac:	d045      	beq.n	800073a <__aeabi_dadd+0x28e>
 80006ae:	2101      	movs	r1, #1
 80006b0:	4b62      	ldr	r3, [pc, #392]	@ (800083c <__aeabi_dadd+0x390>)
 80006b2:	087a      	lsrs	r2, r7, #1
 80006b4:	401e      	ands	r6, r3
 80006b6:	4039      	ands	r1, r7
 80006b8:	430a      	orrs	r2, r1
 80006ba:	07f7      	lsls	r7, r6, #31
 80006bc:	4317      	orrs	r7, r2
 80006be:	0876      	lsrs	r6, r6, #1
 80006c0:	e771      	b.n	80005a6 <__aeabi_dadd+0xfa>
 80006c2:	001f      	movs	r7, r3
 80006c4:	4317      	orrs	r7, r2
 80006c6:	d100      	bne.n	80006ca <__aeabi_dadd+0x21e>
 80006c8:	e0ad      	b.n	8000826 <__aeabi_dadd+0x37a>
 80006ca:	1e4f      	subs	r7, r1, #1
 80006cc:	46bc      	mov	ip, r7
 80006ce:	2901      	cmp	r1, #1
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x228>
 80006d2:	e182      	b.n	80009da <__aeabi_dadd+0x52e>
 80006d4:	4f58      	ldr	r7, [pc, #352]	@ (8000838 <__aeabi_dadd+0x38c>)
 80006d6:	42b9      	cmp	r1, r7
 80006d8:	d100      	bne.n	80006dc <__aeabi_dadd+0x230>
 80006da:	e190      	b.n	80009fe <__aeabi_dadd+0x552>
 80006dc:	4661      	mov	r1, ip
 80006de:	2701      	movs	r7, #1
 80006e0:	2938      	cmp	r1, #56	@ 0x38
 80006e2:	dd00      	ble.n	80006e6 <__aeabi_dadd+0x23a>
 80006e4:	e72e      	b.n	8000544 <__aeabi_dadd+0x98>
 80006e6:	e718      	b.n	800051a <__aeabi_dadd+0x6e>
 80006e8:	4f55      	ldr	r7, [pc, #340]	@ (8000840 <__aeabi_dadd+0x394>)
 80006ea:	1c61      	adds	r1, r4, #1
 80006ec:	4239      	tst	r1, r7
 80006ee:	d000      	beq.n	80006f2 <__aeabi_dadd+0x246>
 80006f0:	e0d0      	b.n	8000894 <__aeabi_dadd+0x3e8>
 80006f2:	0031      	movs	r1, r6
 80006f4:	4648      	mov	r0, r9
 80006f6:	001f      	movs	r7, r3
 80006f8:	4301      	orrs	r1, r0
 80006fa:	4317      	orrs	r7, r2
 80006fc:	2c00      	cmp	r4, #0
 80006fe:	d000      	beq.n	8000702 <__aeabi_dadd+0x256>
 8000700:	e13d      	b.n	800097e <__aeabi_dadd+0x4d2>
 8000702:	2900      	cmp	r1, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_dadd+0x25c>
 8000706:	e1bc      	b.n	8000a82 <__aeabi_dadd+0x5d6>
 8000708:	2f00      	cmp	r7, #0
 800070a:	d000      	beq.n	800070e <__aeabi_dadd+0x262>
 800070c:	e1bf      	b.n	8000a8e <__aeabi_dadd+0x5e2>
 800070e:	464b      	mov	r3, r9
 8000710:	2100      	movs	r1, #0
 8000712:	08d8      	lsrs	r0, r3, #3
 8000714:	0777      	lsls	r7, r6, #29
 8000716:	4307      	orrs	r7, r0
 8000718:	08f0      	lsrs	r0, r6, #3
 800071a:	0306      	lsls	r6, r0, #12
 800071c:	054c      	lsls	r4, r1, #21
 800071e:	0b36      	lsrs	r6, r6, #12
 8000720:	0d64      	lsrs	r4, r4, #21
 8000722:	e00c      	b.n	800073e <__aeabi_dadd+0x292>
 8000724:	4f44      	ldr	r7, [pc, #272]	@ (8000838 <__aeabi_dadd+0x38c>)
 8000726:	42bc      	cmp	r4, r7
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0x280>
 800072a:	e08b      	b.n	8000844 <__aeabi_dadd+0x398>
 800072c:	2701      	movs	r7, #1
 800072e:	2938      	cmp	r1, #56	@ 0x38
 8000730:	dcb2      	bgt.n	8000698 <__aeabi_dadd+0x1ec>
 8000732:	2780      	movs	r7, #128	@ 0x80
 8000734:	043f      	lsls	r7, r7, #16
 8000736:	433b      	orrs	r3, r7
 8000738:	e79c      	b.n	8000674 <__aeabi_dadd+0x1c8>
 800073a:	2600      	movs	r6, #0
 800073c:	2700      	movs	r7, #0
 800073e:	0524      	lsls	r4, r4, #20
 8000740:	4334      	orrs	r4, r6
 8000742:	07ed      	lsls	r5, r5, #31
 8000744:	432c      	orrs	r4, r5
 8000746:	0038      	movs	r0, r7
 8000748:	0021      	movs	r1, r4
 800074a:	b002      	add	sp, #8
 800074c:	bce0      	pop	{r5, r6, r7}
 800074e:	46ba      	mov	sl, r7
 8000750:	46b1      	mov	r9, r6
 8000752:	46a8      	mov	r8, r5
 8000754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000756:	077b      	lsls	r3, r7, #29
 8000758:	d004      	beq.n	8000764 <__aeabi_dadd+0x2b8>
 800075a:	230f      	movs	r3, #15
 800075c:	403b      	ands	r3, r7
 800075e:	2b04      	cmp	r3, #4
 8000760:	d000      	beq.n	8000764 <__aeabi_dadd+0x2b8>
 8000762:	e728      	b.n	80005b6 <__aeabi_dadd+0x10a>
 8000764:	08f8      	lsrs	r0, r7, #3
 8000766:	4b34      	ldr	r3, [pc, #208]	@ (8000838 <__aeabi_dadd+0x38c>)
 8000768:	0777      	lsls	r7, r6, #29
 800076a:	4307      	orrs	r7, r0
 800076c:	08f0      	lsrs	r0, r6, #3
 800076e:	429c      	cmp	r4, r3
 8000770:	d000      	beq.n	8000774 <__aeabi_dadd+0x2c8>
 8000772:	e24a      	b.n	8000c0a <__aeabi_dadd+0x75e>
 8000774:	003b      	movs	r3, r7
 8000776:	4303      	orrs	r3, r0
 8000778:	d059      	beq.n	800082e <__aeabi_dadd+0x382>
 800077a:	2680      	movs	r6, #128	@ 0x80
 800077c:	0336      	lsls	r6, r6, #12
 800077e:	4306      	orrs	r6, r0
 8000780:	0336      	lsls	r6, r6, #12
 8000782:	4c2d      	ldr	r4, [pc, #180]	@ (8000838 <__aeabi_dadd+0x38c>)
 8000784:	0b36      	lsrs	r6, r6, #12
 8000786:	e7da      	b.n	800073e <__aeabi_dadd+0x292>
 8000788:	2900      	cmp	r1, #0
 800078a:	d061      	beq.n	8000850 <__aeabi_dadd+0x3a4>
 800078c:	4641      	mov	r1, r8
 800078e:	1b09      	subs	r1, r1, r4
 8000790:	2c00      	cmp	r4, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ea>
 8000794:	e0b9      	b.n	800090a <__aeabi_dadd+0x45e>
 8000796:	4c28      	ldr	r4, [pc, #160]	@ (8000838 <__aeabi_dadd+0x38c>)
 8000798:	45a0      	cmp	r8, r4
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x2f2>
 800079c:	e1a5      	b.n	8000aea <__aeabi_dadd+0x63e>
 800079e:	2701      	movs	r7, #1
 80007a0:	2938      	cmp	r1, #56	@ 0x38
 80007a2:	dc13      	bgt.n	80007cc <__aeabi_dadd+0x320>
 80007a4:	2480      	movs	r4, #128	@ 0x80
 80007a6:	0424      	lsls	r4, r4, #16
 80007a8:	4326      	orrs	r6, r4
 80007aa:	291f      	cmp	r1, #31
 80007ac:	dd00      	ble.n	80007b0 <__aeabi_dadd+0x304>
 80007ae:	e1c8      	b.n	8000b42 <__aeabi_dadd+0x696>
 80007b0:	2420      	movs	r4, #32
 80007b2:	0037      	movs	r7, r6
 80007b4:	4648      	mov	r0, r9
 80007b6:	1a64      	subs	r4, r4, r1
 80007b8:	40a7      	lsls	r7, r4
 80007ba:	40c8      	lsrs	r0, r1
 80007bc:	4307      	orrs	r7, r0
 80007be:	4648      	mov	r0, r9
 80007c0:	40a0      	lsls	r0, r4
 80007c2:	40ce      	lsrs	r6, r1
 80007c4:	1e44      	subs	r4, r0, #1
 80007c6:	41a0      	sbcs	r0, r4
 80007c8:	199b      	adds	r3, r3, r6
 80007ca:	4307      	orrs	r7, r0
 80007cc:	18bf      	adds	r7, r7, r2
 80007ce:	4297      	cmp	r7, r2
 80007d0:	4192      	sbcs	r2, r2
 80007d2:	4252      	negs	r2, r2
 80007d4:	4644      	mov	r4, r8
 80007d6:	18d6      	adds	r6, r2, r3
 80007d8:	e763      	b.n	80006a2 <__aeabi_dadd+0x1f6>
 80007da:	0038      	movs	r0, r7
 80007dc:	f001 faa8 	bl	8001d30 <__clzsi2>
 80007e0:	0003      	movs	r3, r0
 80007e2:	3318      	adds	r3, #24
 80007e4:	2b1f      	cmp	r3, #31
 80007e6:	dc00      	bgt.n	80007ea <__aeabi_dadd+0x33e>
 80007e8:	e6bf      	b.n	800056a <__aeabi_dadd+0xbe>
 80007ea:	003a      	movs	r2, r7
 80007ec:	3808      	subs	r0, #8
 80007ee:	4082      	lsls	r2, r0
 80007f0:	429c      	cmp	r4, r3
 80007f2:	dd00      	ble.n	80007f6 <__aeabi_dadd+0x34a>
 80007f4:	e083      	b.n	80008fe <__aeabi_dadd+0x452>
 80007f6:	1b1b      	subs	r3, r3, r4
 80007f8:	1c58      	adds	r0, r3, #1
 80007fa:	281f      	cmp	r0, #31
 80007fc:	dc00      	bgt.n	8000800 <__aeabi_dadd+0x354>
 80007fe:	e1b4      	b.n	8000b6a <__aeabi_dadd+0x6be>
 8000800:	0017      	movs	r7, r2
 8000802:	3b1f      	subs	r3, #31
 8000804:	40df      	lsrs	r7, r3
 8000806:	2820      	cmp	r0, #32
 8000808:	d005      	beq.n	8000816 <__aeabi_dadd+0x36a>
 800080a:	2340      	movs	r3, #64	@ 0x40
 800080c:	1a1b      	subs	r3, r3, r0
 800080e:	409a      	lsls	r2, r3
 8000810:	1e53      	subs	r3, r2, #1
 8000812:	419a      	sbcs	r2, r3
 8000814:	4317      	orrs	r7, r2
 8000816:	2400      	movs	r4, #0
 8000818:	2f00      	cmp	r7, #0
 800081a:	d00a      	beq.n	8000832 <__aeabi_dadd+0x386>
 800081c:	077b      	lsls	r3, r7, #29
 800081e:	d000      	beq.n	8000822 <__aeabi_dadd+0x376>
 8000820:	e6c4      	b.n	80005ac <__aeabi_dadd+0x100>
 8000822:	0026      	movs	r6, r4
 8000824:	e79e      	b.n	8000764 <__aeabi_dadd+0x2b8>
 8000826:	464b      	mov	r3, r9
 8000828:	000c      	movs	r4, r1
 800082a:	08d8      	lsrs	r0, r3, #3
 800082c:	e79b      	b.n	8000766 <__aeabi_dadd+0x2ba>
 800082e:	2700      	movs	r7, #0
 8000830:	4c01      	ldr	r4, [pc, #4]	@ (8000838 <__aeabi_dadd+0x38c>)
 8000832:	2600      	movs	r6, #0
 8000834:	e783      	b.n	800073e <__aeabi_dadd+0x292>
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	000007ff 	.word	0x000007ff
 800083c:	ff7fffff 	.word	0xff7fffff
 8000840:	000007fe 	.word	0x000007fe
 8000844:	464b      	mov	r3, r9
 8000846:	0777      	lsls	r7, r6, #29
 8000848:	08d8      	lsrs	r0, r3, #3
 800084a:	4307      	orrs	r7, r0
 800084c:	08f0      	lsrs	r0, r6, #3
 800084e:	e791      	b.n	8000774 <__aeabi_dadd+0x2c8>
 8000850:	4fcd      	ldr	r7, [pc, #820]	@ (8000b88 <__aeabi_dadd+0x6dc>)
 8000852:	1c61      	adds	r1, r4, #1
 8000854:	4239      	tst	r1, r7
 8000856:	d16b      	bne.n	8000930 <__aeabi_dadd+0x484>
 8000858:	0031      	movs	r1, r6
 800085a:	4648      	mov	r0, r9
 800085c:	4301      	orrs	r1, r0
 800085e:	2c00      	cmp	r4, #0
 8000860:	d000      	beq.n	8000864 <__aeabi_dadd+0x3b8>
 8000862:	e14b      	b.n	8000afc <__aeabi_dadd+0x650>
 8000864:	001f      	movs	r7, r3
 8000866:	4317      	orrs	r7, r2
 8000868:	2900      	cmp	r1, #0
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x3c2>
 800086c:	e181      	b.n	8000b72 <__aeabi_dadd+0x6c6>
 800086e:	2f00      	cmp	r7, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_dadd+0x3c8>
 8000872:	e74c      	b.n	800070e <__aeabi_dadd+0x262>
 8000874:	444a      	add	r2, r9
 8000876:	454a      	cmp	r2, r9
 8000878:	4180      	sbcs	r0, r0
 800087a:	18f6      	adds	r6, r6, r3
 800087c:	4240      	negs	r0, r0
 800087e:	1836      	adds	r6, r6, r0
 8000880:	0233      	lsls	r3, r6, #8
 8000882:	d500      	bpl.n	8000886 <__aeabi_dadd+0x3da>
 8000884:	e1b0      	b.n	8000be8 <__aeabi_dadd+0x73c>
 8000886:	0017      	movs	r7, r2
 8000888:	4691      	mov	r9, r2
 800088a:	4337      	orrs	r7, r6
 800088c:	d000      	beq.n	8000890 <__aeabi_dadd+0x3e4>
 800088e:	e73e      	b.n	800070e <__aeabi_dadd+0x262>
 8000890:	2600      	movs	r6, #0
 8000892:	e754      	b.n	800073e <__aeabi_dadd+0x292>
 8000894:	4649      	mov	r1, r9
 8000896:	1a89      	subs	r1, r1, r2
 8000898:	4688      	mov	r8, r1
 800089a:	45c1      	cmp	r9, r8
 800089c:	41bf      	sbcs	r7, r7
 800089e:	1af1      	subs	r1, r6, r3
 80008a0:	427f      	negs	r7, r7
 80008a2:	1bc9      	subs	r1, r1, r7
 80008a4:	020f      	lsls	r7, r1, #8
 80008a6:	d461      	bmi.n	800096c <__aeabi_dadd+0x4c0>
 80008a8:	4647      	mov	r7, r8
 80008aa:	430f      	orrs	r7, r1
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x404>
 80008ae:	e0bd      	b.n	8000a2c <__aeabi_dadd+0x580>
 80008b0:	000e      	movs	r6, r1
 80008b2:	4647      	mov	r7, r8
 80008b4:	e651      	b.n	800055a <__aeabi_dadd+0xae>
 80008b6:	4cb5      	ldr	r4, [pc, #724]	@ (8000b8c <__aeabi_dadd+0x6e0>)
 80008b8:	45a0      	cmp	r8, r4
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x412>
 80008bc:	e100      	b.n	8000ac0 <__aeabi_dadd+0x614>
 80008be:	2701      	movs	r7, #1
 80008c0:	2938      	cmp	r1, #56	@ 0x38
 80008c2:	dd00      	ble.n	80008c6 <__aeabi_dadd+0x41a>
 80008c4:	e6b8      	b.n	8000638 <__aeabi_dadd+0x18c>
 80008c6:	2480      	movs	r4, #128	@ 0x80
 80008c8:	0424      	lsls	r4, r4, #16
 80008ca:	4326      	orrs	r6, r4
 80008cc:	e6a3      	b.n	8000616 <__aeabi_dadd+0x16a>
 80008ce:	4eb0      	ldr	r6, [pc, #704]	@ (8000b90 <__aeabi_dadd+0x6e4>)
 80008d0:	1ae4      	subs	r4, r4, r3
 80008d2:	4016      	ands	r6, r2
 80008d4:	077b      	lsls	r3, r7, #29
 80008d6:	d000      	beq.n	80008da <__aeabi_dadd+0x42e>
 80008d8:	e73f      	b.n	800075a <__aeabi_dadd+0x2ae>
 80008da:	e743      	b.n	8000764 <__aeabi_dadd+0x2b8>
 80008dc:	000f      	movs	r7, r1
 80008de:	0018      	movs	r0, r3
 80008e0:	3f20      	subs	r7, #32
 80008e2:	40f8      	lsrs	r0, r7
 80008e4:	4684      	mov	ip, r0
 80008e6:	2920      	cmp	r1, #32
 80008e8:	d003      	beq.n	80008f2 <__aeabi_dadd+0x446>
 80008ea:	2740      	movs	r7, #64	@ 0x40
 80008ec:	1a79      	subs	r1, r7, r1
 80008ee:	408b      	lsls	r3, r1
 80008f0:	431a      	orrs	r2, r3
 80008f2:	1e53      	subs	r3, r2, #1
 80008f4:	419a      	sbcs	r2, r3
 80008f6:	4663      	mov	r3, ip
 80008f8:	0017      	movs	r7, r2
 80008fa:	431f      	orrs	r7, r3
 80008fc:	e622      	b.n	8000544 <__aeabi_dadd+0x98>
 80008fe:	48a4      	ldr	r0, [pc, #656]	@ (8000b90 <__aeabi_dadd+0x6e4>)
 8000900:	1ae1      	subs	r1, r4, r3
 8000902:	4010      	ands	r0, r2
 8000904:	0747      	lsls	r7, r0, #29
 8000906:	08c0      	lsrs	r0, r0, #3
 8000908:	e707      	b.n	800071a <__aeabi_dadd+0x26e>
 800090a:	0034      	movs	r4, r6
 800090c:	4648      	mov	r0, r9
 800090e:	4304      	orrs	r4, r0
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x468>
 8000912:	e0fa      	b.n	8000b0a <__aeabi_dadd+0x65e>
 8000914:	1e4c      	subs	r4, r1, #1
 8000916:	2901      	cmp	r1, #1
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x470>
 800091a:	e0d7      	b.n	8000acc <__aeabi_dadd+0x620>
 800091c:	4f9b      	ldr	r7, [pc, #620]	@ (8000b8c <__aeabi_dadd+0x6e0>)
 800091e:	42b9      	cmp	r1, r7
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x478>
 8000922:	e0e2      	b.n	8000aea <__aeabi_dadd+0x63e>
 8000924:	2701      	movs	r7, #1
 8000926:	2c38      	cmp	r4, #56	@ 0x38
 8000928:	dd00      	ble.n	800092c <__aeabi_dadd+0x480>
 800092a:	e74f      	b.n	80007cc <__aeabi_dadd+0x320>
 800092c:	0021      	movs	r1, r4
 800092e:	e73c      	b.n	80007aa <__aeabi_dadd+0x2fe>
 8000930:	4c96      	ldr	r4, [pc, #600]	@ (8000b8c <__aeabi_dadd+0x6e0>)
 8000932:	42a1      	cmp	r1, r4
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x48c>
 8000936:	e0dd      	b.n	8000af4 <__aeabi_dadd+0x648>
 8000938:	444a      	add	r2, r9
 800093a:	454a      	cmp	r2, r9
 800093c:	4180      	sbcs	r0, r0
 800093e:	18f3      	adds	r3, r6, r3
 8000940:	4240      	negs	r0, r0
 8000942:	1818      	adds	r0, r3, r0
 8000944:	07c7      	lsls	r7, r0, #31
 8000946:	0852      	lsrs	r2, r2, #1
 8000948:	4317      	orrs	r7, r2
 800094a:	0846      	lsrs	r6, r0, #1
 800094c:	0752      	lsls	r2, r2, #29
 800094e:	d005      	beq.n	800095c <__aeabi_dadd+0x4b0>
 8000950:	220f      	movs	r2, #15
 8000952:	000c      	movs	r4, r1
 8000954:	403a      	ands	r2, r7
 8000956:	2a04      	cmp	r2, #4
 8000958:	d000      	beq.n	800095c <__aeabi_dadd+0x4b0>
 800095a:	e62c      	b.n	80005b6 <__aeabi_dadd+0x10a>
 800095c:	0776      	lsls	r6, r6, #29
 800095e:	08ff      	lsrs	r7, r7, #3
 8000960:	4337      	orrs	r7, r6
 8000962:	0900      	lsrs	r0, r0, #4
 8000964:	e6d9      	b.n	800071a <__aeabi_dadd+0x26e>
 8000966:	2700      	movs	r7, #0
 8000968:	2600      	movs	r6, #0
 800096a:	e6e8      	b.n	800073e <__aeabi_dadd+0x292>
 800096c:	4649      	mov	r1, r9
 800096e:	1a57      	subs	r7, r2, r1
 8000970:	42ba      	cmp	r2, r7
 8000972:	4192      	sbcs	r2, r2
 8000974:	1b9e      	subs	r6, r3, r6
 8000976:	4252      	negs	r2, r2
 8000978:	4665      	mov	r5, ip
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	e5ed      	b.n	800055a <__aeabi_dadd+0xae>
 800097e:	2900      	cmp	r1, #0
 8000980:	d000      	beq.n	8000984 <__aeabi_dadd+0x4d8>
 8000982:	e0c6      	b.n	8000b12 <__aeabi_dadd+0x666>
 8000984:	2f00      	cmp	r7, #0
 8000986:	d167      	bne.n	8000a58 <__aeabi_dadd+0x5ac>
 8000988:	2680      	movs	r6, #128	@ 0x80
 800098a:	2500      	movs	r5, #0
 800098c:	4c7f      	ldr	r4, [pc, #508]	@ (8000b8c <__aeabi_dadd+0x6e0>)
 800098e:	0336      	lsls	r6, r6, #12
 8000990:	e6d5      	b.n	800073e <__aeabi_dadd+0x292>
 8000992:	4665      	mov	r5, ip
 8000994:	000c      	movs	r4, r1
 8000996:	001e      	movs	r6, r3
 8000998:	08d0      	lsrs	r0, r2, #3
 800099a:	e6e4      	b.n	8000766 <__aeabi_dadd+0x2ba>
 800099c:	444a      	add	r2, r9
 800099e:	454a      	cmp	r2, r9
 80009a0:	4180      	sbcs	r0, r0
 80009a2:	18f3      	adds	r3, r6, r3
 80009a4:	4240      	negs	r0, r0
 80009a6:	1818      	adds	r0, r3, r0
 80009a8:	0011      	movs	r1, r2
 80009aa:	0203      	lsls	r3, r0, #8
 80009ac:	d400      	bmi.n	80009b0 <__aeabi_dadd+0x504>
 80009ae:	e096      	b.n	8000ade <__aeabi_dadd+0x632>
 80009b0:	4b77      	ldr	r3, [pc, #476]	@ (8000b90 <__aeabi_dadd+0x6e4>)
 80009b2:	0849      	lsrs	r1, r1, #1
 80009b4:	4018      	ands	r0, r3
 80009b6:	07c3      	lsls	r3, r0, #31
 80009b8:	430b      	orrs	r3, r1
 80009ba:	0844      	lsrs	r4, r0, #1
 80009bc:	0749      	lsls	r1, r1, #29
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x516>
 80009c0:	e129      	b.n	8000c16 <__aeabi_dadd+0x76a>
 80009c2:	220f      	movs	r2, #15
 80009c4:	401a      	ands	r2, r3
 80009c6:	2a04      	cmp	r2, #4
 80009c8:	d100      	bne.n	80009cc <__aeabi_dadd+0x520>
 80009ca:	e0ea      	b.n	8000ba2 <__aeabi_dadd+0x6f6>
 80009cc:	1d1f      	adds	r7, r3, #4
 80009ce:	429f      	cmp	r7, r3
 80009d0:	41b6      	sbcs	r6, r6
 80009d2:	4276      	negs	r6, r6
 80009d4:	1936      	adds	r6, r6, r4
 80009d6:	2402      	movs	r4, #2
 80009d8:	e6c4      	b.n	8000764 <__aeabi_dadd+0x2b8>
 80009da:	4649      	mov	r1, r9
 80009dc:	1a8f      	subs	r7, r1, r2
 80009de:	45b9      	cmp	r9, r7
 80009e0:	4180      	sbcs	r0, r0
 80009e2:	1af6      	subs	r6, r6, r3
 80009e4:	4240      	negs	r0, r0
 80009e6:	1a36      	subs	r6, r6, r0
 80009e8:	0233      	lsls	r3, r6, #8
 80009ea:	d406      	bmi.n	80009fa <__aeabi_dadd+0x54e>
 80009ec:	0773      	lsls	r3, r6, #29
 80009ee:	08ff      	lsrs	r7, r7, #3
 80009f0:	2101      	movs	r1, #1
 80009f2:	431f      	orrs	r7, r3
 80009f4:	08f0      	lsrs	r0, r6, #3
 80009f6:	e690      	b.n	800071a <__aeabi_dadd+0x26e>
 80009f8:	4665      	mov	r5, ip
 80009fa:	2401      	movs	r4, #1
 80009fc:	e5ab      	b.n	8000556 <__aeabi_dadd+0xaa>
 80009fe:	464b      	mov	r3, r9
 8000a00:	0777      	lsls	r7, r6, #29
 8000a02:	08d8      	lsrs	r0, r3, #3
 8000a04:	4307      	orrs	r7, r0
 8000a06:	08f0      	lsrs	r0, r6, #3
 8000a08:	e6b4      	b.n	8000774 <__aeabi_dadd+0x2c8>
 8000a0a:	000f      	movs	r7, r1
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	3f20      	subs	r7, #32
 8000a10:	40f8      	lsrs	r0, r7
 8000a12:	4684      	mov	ip, r0
 8000a14:	2920      	cmp	r1, #32
 8000a16:	d003      	beq.n	8000a20 <__aeabi_dadd+0x574>
 8000a18:	2740      	movs	r7, #64	@ 0x40
 8000a1a:	1a79      	subs	r1, r7, r1
 8000a1c:	408b      	lsls	r3, r1
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	1e53      	subs	r3, r2, #1
 8000a22:	419a      	sbcs	r2, r3
 8000a24:	4663      	mov	r3, ip
 8000a26:	0017      	movs	r7, r2
 8000a28:	431f      	orrs	r7, r3
 8000a2a:	e635      	b.n	8000698 <__aeabi_dadd+0x1ec>
 8000a2c:	2500      	movs	r5, #0
 8000a2e:	2400      	movs	r4, #0
 8000a30:	2600      	movs	r6, #0
 8000a32:	e684      	b.n	800073e <__aeabi_dadd+0x292>
 8000a34:	000c      	movs	r4, r1
 8000a36:	0035      	movs	r5, r6
 8000a38:	3c20      	subs	r4, #32
 8000a3a:	40e5      	lsrs	r5, r4
 8000a3c:	2920      	cmp	r1, #32
 8000a3e:	d005      	beq.n	8000a4c <__aeabi_dadd+0x5a0>
 8000a40:	2440      	movs	r4, #64	@ 0x40
 8000a42:	1a61      	subs	r1, r4, r1
 8000a44:	408e      	lsls	r6, r1
 8000a46:	4649      	mov	r1, r9
 8000a48:	4331      	orrs	r1, r6
 8000a4a:	4689      	mov	r9, r1
 8000a4c:	4648      	mov	r0, r9
 8000a4e:	1e41      	subs	r1, r0, #1
 8000a50:	4188      	sbcs	r0, r1
 8000a52:	0007      	movs	r7, r0
 8000a54:	432f      	orrs	r7, r5
 8000a56:	e5ef      	b.n	8000638 <__aeabi_dadd+0x18c>
 8000a58:	08d2      	lsrs	r2, r2, #3
 8000a5a:	075f      	lsls	r7, r3, #29
 8000a5c:	4665      	mov	r5, ip
 8000a5e:	4317      	orrs	r7, r2
 8000a60:	08d8      	lsrs	r0, r3, #3
 8000a62:	e687      	b.n	8000774 <__aeabi_dadd+0x2c8>
 8000a64:	1a17      	subs	r7, r2, r0
 8000a66:	42ba      	cmp	r2, r7
 8000a68:	4192      	sbcs	r2, r2
 8000a6a:	1b9e      	subs	r6, r3, r6
 8000a6c:	4252      	negs	r2, r2
 8000a6e:	1ab6      	subs	r6, r6, r2
 8000a70:	0233      	lsls	r3, r6, #8
 8000a72:	d4c1      	bmi.n	80009f8 <__aeabi_dadd+0x54c>
 8000a74:	0773      	lsls	r3, r6, #29
 8000a76:	08ff      	lsrs	r7, r7, #3
 8000a78:	4665      	mov	r5, ip
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	431f      	orrs	r7, r3
 8000a7e:	08f0      	lsrs	r0, r6, #3
 8000a80:	e64b      	b.n	800071a <__aeabi_dadd+0x26e>
 8000a82:	2f00      	cmp	r7, #0
 8000a84:	d07b      	beq.n	8000b7e <__aeabi_dadd+0x6d2>
 8000a86:	4665      	mov	r5, ip
 8000a88:	001e      	movs	r6, r3
 8000a8a:	4691      	mov	r9, r2
 8000a8c:	e63f      	b.n	800070e <__aeabi_dadd+0x262>
 8000a8e:	1a81      	subs	r1, r0, r2
 8000a90:	4688      	mov	r8, r1
 8000a92:	45c1      	cmp	r9, r8
 8000a94:	41a4      	sbcs	r4, r4
 8000a96:	1af1      	subs	r1, r6, r3
 8000a98:	4264      	negs	r4, r4
 8000a9a:	1b09      	subs	r1, r1, r4
 8000a9c:	2480      	movs	r4, #128	@ 0x80
 8000a9e:	0424      	lsls	r4, r4, #16
 8000aa0:	4221      	tst	r1, r4
 8000aa2:	d077      	beq.n	8000b94 <__aeabi_dadd+0x6e8>
 8000aa4:	1a10      	subs	r0, r2, r0
 8000aa6:	4282      	cmp	r2, r0
 8000aa8:	4192      	sbcs	r2, r2
 8000aaa:	0007      	movs	r7, r0
 8000aac:	1b9e      	subs	r6, r3, r6
 8000aae:	4252      	negs	r2, r2
 8000ab0:	1ab6      	subs	r6, r6, r2
 8000ab2:	4337      	orrs	r7, r6
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_dadd+0x60c>
 8000ab6:	e0a0      	b.n	8000bfa <__aeabi_dadd+0x74e>
 8000ab8:	4665      	mov	r5, ip
 8000aba:	2400      	movs	r4, #0
 8000abc:	2600      	movs	r6, #0
 8000abe:	e63e      	b.n	800073e <__aeabi_dadd+0x292>
 8000ac0:	075f      	lsls	r7, r3, #29
 8000ac2:	08d2      	lsrs	r2, r2, #3
 8000ac4:	4665      	mov	r5, ip
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	08d8      	lsrs	r0, r3, #3
 8000aca:	e653      	b.n	8000774 <__aeabi_dadd+0x2c8>
 8000acc:	1881      	adds	r1, r0, r2
 8000ace:	4291      	cmp	r1, r2
 8000ad0:	4192      	sbcs	r2, r2
 8000ad2:	18f0      	adds	r0, r6, r3
 8000ad4:	4252      	negs	r2, r2
 8000ad6:	1880      	adds	r0, r0, r2
 8000ad8:	0203      	lsls	r3, r0, #8
 8000ada:	d500      	bpl.n	8000ade <__aeabi_dadd+0x632>
 8000adc:	e768      	b.n	80009b0 <__aeabi_dadd+0x504>
 8000ade:	0747      	lsls	r7, r0, #29
 8000ae0:	08c9      	lsrs	r1, r1, #3
 8000ae2:	430f      	orrs	r7, r1
 8000ae4:	08c0      	lsrs	r0, r0, #3
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	e617      	b.n	800071a <__aeabi_dadd+0x26e>
 8000aea:	08d2      	lsrs	r2, r2, #3
 8000aec:	075f      	lsls	r7, r3, #29
 8000aee:	4317      	orrs	r7, r2
 8000af0:	08d8      	lsrs	r0, r3, #3
 8000af2:	e63f      	b.n	8000774 <__aeabi_dadd+0x2c8>
 8000af4:	000c      	movs	r4, r1
 8000af6:	2600      	movs	r6, #0
 8000af8:	2700      	movs	r7, #0
 8000afa:	e620      	b.n	800073e <__aeabi_dadd+0x292>
 8000afc:	2900      	cmp	r1, #0
 8000afe:	d156      	bne.n	8000bae <__aeabi_dadd+0x702>
 8000b00:	075f      	lsls	r7, r3, #29
 8000b02:	08d2      	lsrs	r2, r2, #3
 8000b04:	4317      	orrs	r7, r2
 8000b06:	08d8      	lsrs	r0, r3, #3
 8000b08:	e634      	b.n	8000774 <__aeabi_dadd+0x2c8>
 8000b0a:	000c      	movs	r4, r1
 8000b0c:	001e      	movs	r6, r3
 8000b0e:	08d0      	lsrs	r0, r2, #3
 8000b10:	e629      	b.n	8000766 <__aeabi_dadd+0x2ba>
 8000b12:	08c1      	lsrs	r1, r0, #3
 8000b14:	0770      	lsls	r0, r6, #29
 8000b16:	4301      	orrs	r1, r0
 8000b18:	08f0      	lsrs	r0, r6, #3
 8000b1a:	2f00      	cmp	r7, #0
 8000b1c:	d062      	beq.n	8000be4 <__aeabi_dadd+0x738>
 8000b1e:	2480      	movs	r4, #128	@ 0x80
 8000b20:	0324      	lsls	r4, r4, #12
 8000b22:	4220      	tst	r0, r4
 8000b24:	d007      	beq.n	8000b36 <__aeabi_dadd+0x68a>
 8000b26:	08de      	lsrs	r6, r3, #3
 8000b28:	4226      	tst	r6, r4
 8000b2a:	d104      	bne.n	8000b36 <__aeabi_dadd+0x68a>
 8000b2c:	4665      	mov	r5, ip
 8000b2e:	0030      	movs	r0, r6
 8000b30:	08d1      	lsrs	r1, r2, #3
 8000b32:	075b      	lsls	r3, r3, #29
 8000b34:	4319      	orrs	r1, r3
 8000b36:	0f4f      	lsrs	r7, r1, #29
 8000b38:	00c9      	lsls	r1, r1, #3
 8000b3a:	08c9      	lsrs	r1, r1, #3
 8000b3c:	077f      	lsls	r7, r7, #29
 8000b3e:	430f      	orrs	r7, r1
 8000b40:	e618      	b.n	8000774 <__aeabi_dadd+0x2c8>
 8000b42:	000c      	movs	r4, r1
 8000b44:	0030      	movs	r0, r6
 8000b46:	3c20      	subs	r4, #32
 8000b48:	40e0      	lsrs	r0, r4
 8000b4a:	4684      	mov	ip, r0
 8000b4c:	2920      	cmp	r1, #32
 8000b4e:	d005      	beq.n	8000b5c <__aeabi_dadd+0x6b0>
 8000b50:	2440      	movs	r4, #64	@ 0x40
 8000b52:	1a61      	subs	r1, r4, r1
 8000b54:	408e      	lsls	r6, r1
 8000b56:	4649      	mov	r1, r9
 8000b58:	4331      	orrs	r1, r6
 8000b5a:	4689      	mov	r9, r1
 8000b5c:	4648      	mov	r0, r9
 8000b5e:	1e41      	subs	r1, r0, #1
 8000b60:	4188      	sbcs	r0, r1
 8000b62:	4661      	mov	r1, ip
 8000b64:	0007      	movs	r7, r0
 8000b66:	430f      	orrs	r7, r1
 8000b68:	e630      	b.n	80007cc <__aeabi_dadd+0x320>
 8000b6a:	2120      	movs	r1, #32
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	1a09      	subs	r1, r1, r0
 8000b70:	e50e      	b.n	8000590 <__aeabi_dadd+0xe4>
 8000b72:	001e      	movs	r6, r3
 8000b74:	2f00      	cmp	r7, #0
 8000b76:	d000      	beq.n	8000b7a <__aeabi_dadd+0x6ce>
 8000b78:	e522      	b.n	80005c0 <__aeabi_dadd+0x114>
 8000b7a:	2400      	movs	r4, #0
 8000b7c:	e758      	b.n	8000a30 <__aeabi_dadd+0x584>
 8000b7e:	2500      	movs	r5, #0
 8000b80:	2400      	movs	r4, #0
 8000b82:	2600      	movs	r6, #0
 8000b84:	e5db      	b.n	800073e <__aeabi_dadd+0x292>
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	000007fe 	.word	0x000007fe
 8000b8c:	000007ff 	.word	0x000007ff
 8000b90:	ff7fffff 	.word	0xff7fffff
 8000b94:	4647      	mov	r7, r8
 8000b96:	430f      	orrs	r7, r1
 8000b98:	d100      	bne.n	8000b9c <__aeabi_dadd+0x6f0>
 8000b9a:	e747      	b.n	8000a2c <__aeabi_dadd+0x580>
 8000b9c:	000e      	movs	r6, r1
 8000b9e:	46c1      	mov	r9, r8
 8000ba0:	e5b5      	b.n	800070e <__aeabi_dadd+0x262>
 8000ba2:	08df      	lsrs	r7, r3, #3
 8000ba4:	0764      	lsls	r4, r4, #29
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	4327      	orrs	r7, r4
 8000baa:	0900      	lsrs	r0, r0, #4
 8000bac:	e5b5      	b.n	800071a <__aeabi_dadd+0x26e>
 8000bae:	0019      	movs	r1, r3
 8000bb0:	08c0      	lsrs	r0, r0, #3
 8000bb2:	0777      	lsls	r7, r6, #29
 8000bb4:	4307      	orrs	r7, r0
 8000bb6:	4311      	orrs	r1, r2
 8000bb8:	08f0      	lsrs	r0, r6, #3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dadd+0x714>
 8000bbe:	e5d9      	b.n	8000774 <__aeabi_dadd+0x2c8>
 8000bc0:	2180      	movs	r1, #128	@ 0x80
 8000bc2:	0309      	lsls	r1, r1, #12
 8000bc4:	4208      	tst	r0, r1
 8000bc6:	d007      	beq.n	8000bd8 <__aeabi_dadd+0x72c>
 8000bc8:	08dc      	lsrs	r4, r3, #3
 8000bca:	420c      	tst	r4, r1
 8000bcc:	d104      	bne.n	8000bd8 <__aeabi_dadd+0x72c>
 8000bce:	08d2      	lsrs	r2, r2, #3
 8000bd0:	075b      	lsls	r3, r3, #29
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	0017      	movs	r7, r2
 8000bd6:	0020      	movs	r0, r4
 8000bd8:	0f7b      	lsrs	r3, r7, #29
 8000bda:	00ff      	lsls	r7, r7, #3
 8000bdc:	08ff      	lsrs	r7, r7, #3
 8000bde:	075b      	lsls	r3, r3, #29
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e5c7      	b.n	8000774 <__aeabi_dadd+0x2c8>
 8000be4:	000f      	movs	r7, r1
 8000be6:	e5c5      	b.n	8000774 <__aeabi_dadd+0x2c8>
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <__aeabi_dadd+0x788>)
 8000bea:	08d2      	lsrs	r2, r2, #3
 8000bec:	4033      	ands	r3, r6
 8000bee:	075f      	lsls	r7, r3, #29
 8000bf0:	025b      	lsls	r3, r3, #9
 8000bf2:	2401      	movs	r4, #1
 8000bf4:	4317      	orrs	r7, r2
 8000bf6:	0b1e      	lsrs	r6, r3, #12
 8000bf8:	e5a1      	b.n	800073e <__aeabi_dadd+0x292>
 8000bfa:	4226      	tst	r6, r4
 8000bfc:	d012      	beq.n	8000c24 <__aeabi_dadd+0x778>
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <__aeabi_dadd+0x788>)
 8000c00:	4665      	mov	r5, ip
 8000c02:	0002      	movs	r2, r0
 8000c04:	2401      	movs	r4, #1
 8000c06:	401e      	ands	r6, r3
 8000c08:	e4e6      	b.n	80005d8 <__aeabi_dadd+0x12c>
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	e585      	b.n	800071a <__aeabi_dadd+0x26e>
 8000c0e:	0017      	movs	r7, r2
 8000c10:	e5a8      	b.n	8000764 <__aeabi_dadd+0x2b8>
 8000c12:	003a      	movs	r2, r7
 8000c14:	e4d4      	b.n	80005c0 <__aeabi_dadd+0x114>
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	0764      	lsls	r4, r4, #29
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	0027      	movs	r7, r4
 8000c1e:	2102      	movs	r1, #2
 8000c20:	0900      	lsrs	r0, r0, #4
 8000c22:	e57a      	b.n	800071a <__aeabi_dadd+0x26e>
 8000c24:	08c0      	lsrs	r0, r0, #3
 8000c26:	0777      	lsls	r7, r6, #29
 8000c28:	4307      	orrs	r7, r0
 8000c2a:	4665      	mov	r5, ip
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	08f0      	lsrs	r0, r6, #3
 8000c30:	e573      	b.n	800071a <__aeabi_dadd+0x26e>
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	ff7fffff 	.word	0xff7fffff

08000c38 <__eqdf2>:
 8000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c3a:	4657      	mov	r7, sl
 8000c3c:	46de      	mov	lr, fp
 8000c3e:	464e      	mov	r6, r9
 8000c40:	4645      	mov	r5, r8
 8000c42:	b5e0      	push	{r5, r6, r7, lr}
 8000c44:	000d      	movs	r5, r1
 8000c46:	0004      	movs	r4, r0
 8000c48:	0fe8      	lsrs	r0, r5, #31
 8000c4a:	4683      	mov	fp, r0
 8000c4c:	0309      	lsls	r1, r1, #12
 8000c4e:	0fd8      	lsrs	r0, r3, #31
 8000c50:	0b09      	lsrs	r1, r1, #12
 8000c52:	4682      	mov	sl, r0
 8000c54:	4819      	ldr	r0, [pc, #100]	@ (8000cbc <__eqdf2+0x84>)
 8000c56:	468c      	mov	ip, r1
 8000c58:	031f      	lsls	r7, r3, #12
 8000c5a:	0069      	lsls	r1, r5, #1
 8000c5c:	005e      	lsls	r6, r3, #1
 8000c5e:	0d49      	lsrs	r1, r1, #21
 8000c60:	0b3f      	lsrs	r7, r7, #12
 8000c62:	0d76      	lsrs	r6, r6, #21
 8000c64:	4281      	cmp	r1, r0
 8000c66:	d018      	beq.n	8000c9a <__eqdf2+0x62>
 8000c68:	4286      	cmp	r6, r0
 8000c6a:	d00f      	beq.n	8000c8c <__eqdf2+0x54>
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	42b1      	cmp	r1, r6
 8000c70:	d10d      	bne.n	8000c8e <__eqdf2+0x56>
 8000c72:	45bc      	cmp	ip, r7
 8000c74:	d10b      	bne.n	8000c8e <__eqdf2+0x56>
 8000c76:	4294      	cmp	r4, r2
 8000c78:	d109      	bne.n	8000c8e <__eqdf2+0x56>
 8000c7a:	45d3      	cmp	fp, sl
 8000c7c:	d01c      	beq.n	8000cb8 <__eqdf2+0x80>
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d105      	bne.n	8000c8e <__eqdf2+0x56>
 8000c82:	4660      	mov	r0, ip
 8000c84:	4320      	orrs	r0, r4
 8000c86:	1e43      	subs	r3, r0, #1
 8000c88:	4198      	sbcs	r0, r3
 8000c8a:	e000      	b.n	8000c8e <__eqdf2+0x56>
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	bcf0      	pop	{r4, r5, r6, r7}
 8000c90:	46bb      	mov	fp, r7
 8000c92:	46b2      	mov	sl, r6
 8000c94:	46a9      	mov	r9, r5
 8000c96:	46a0      	mov	r8, r4
 8000c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	428e      	cmp	r6, r1
 8000c9e:	d1f6      	bne.n	8000c8e <__eqdf2+0x56>
 8000ca0:	4661      	mov	r1, ip
 8000ca2:	4339      	orrs	r1, r7
 8000ca4:	000f      	movs	r7, r1
 8000ca6:	4317      	orrs	r7, r2
 8000ca8:	4327      	orrs	r7, r4
 8000caa:	d1f0      	bne.n	8000c8e <__eqdf2+0x56>
 8000cac:	465b      	mov	r3, fp
 8000cae:	4652      	mov	r2, sl
 8000cb0:	1a98      	subs	r0, r3, r2
 8000cb2:	1e43      	subs	r3, r0, #1
 8000cb4:	4198      	sbcs	r0, r3
 8000cb6:	e7ea      	b.n	8000c8e <__eqdf2+0x56>
 8000cb8:	2000      	movs	r0, #0
 8000cba:	e7e8      	b.n	8000c8e <__eqdf2+0x56>
 8000cbc:	000007ff 	.word	0x000007ff

08000cc0 <__gedf2>:
 8000cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc2:	4657      	mov	r7, sl
 8000cc4:	464e      	mov	r6, r9
 8000cc6:	4645      	mov	r5, r8
 8000cc8:	46de      	mov	lr, fp
 8000cca:	b5e0      	push	{r5, r6, r7, lr}
 8000ccc:	000d      	movs	r5, r1
 8000cce:	030e      	lsls	r6, r1, #12
 8000cd0:	0049      	lsls	r1, r1, #1
 8000cd2:	0d49      	lsrs	r1, r1, #21
 8000cd4:	468a      	mov	sl, r1
 8000cd6:	0fdf      	lsrs	r7, r3, #31
 8000cd8:	0fe9      	lsrs	r1, r5, #31
 8000cda:	46bc      	mov	ip, r7
 8000cdc:	b083      	sub	sp, #12
 8000cde:	4f2f      	ldr	r7, [pc, #188]	@ (8000d9c <__gedf2+0xdc>)
 8000ce0:	0004      	movs	r4, r0
 8000ce2:	4680      	mov	r8, r0
 8000ce4:	9101      	str	r1, [sp, #4]
 8000ce6:	0058      	lsls	r0, r3, #1
 8000ce8:	0319      	lsls	r1, r3, #12
 8000cea:	4691      	mov	r9, r2
 8000cec:	0b36      	lsrs	r6, r6, #12
 8000cee:	0b09      	lsrs	r1, r1, #12
 8000cf0:	0d40      	lsrs	r0, r0, #21
 8000cf2:	45ba      	cmp	sl, r7
 8000cf4:	d01d      	beq.n	8000d32 <__gedf2+0x72>
 8000cf6:	42b8      	cmp	r0, r7
 8000cf8:	d00d      	beq.n	8000d16 <__gedf2+0x56>
 8000cfa:	4657      	mov	r7, sl
 8000cfc:	2f00      	cmp	r7, #0
 8000cfe:	d12a      	bne.n	8000d56 <__gedf2+0x96>
 8000d00:	4334      	orrs	r4, r6
 8000d02:	2800      	cmp	r0, #0
 8000d04:	d124      	bne.n	8000d50 <__gedf2+0x90>
 8000d06:	430a      	orrs	r2, r1
 8000d08:	d036      	beq.n	8000d78 <__gedf2+0xb8>
 8000d0a:	2c00      	cmp	r4, #0
 8000d0c:	d141      	bne.n	8000d92 <__gedf2+0xd2>
 8000d0e:	4663      	mov	r3, ip
 8000d10:	0058      	lsls	r0, r3, #1
 8000d12:	3801      	subs	r0, #1
 8000d14:	e015      	b.n	8000d42 <__gedf2+0x82>
 8000d16:	4311      	orrs	r1, r2
 8000d18:	d138      	bne.n	8000d8c <__gedf2+0xcc>
 8000d1a:	4653      	mov	r3, sl
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d101      	bne.n	8000d24 <__gedf2+0x64>
 8000d20:	4326      	orrs	r6, r4
 8000d22:	d0f4      	beq.n	8000d0e <__gedf2+0x4e>
 8000d24:	9b01      	ldr	r3, [sp, #4]
 8000d26:	4563      	cmp	r3, ip
 8000d28:	d107      	bne.n	8000d3a <__gedf2+0x7a>
 8000d2a:	9b01      	ldr	r3, [sp, #4]
 8000d2c:	0058      	lsls	r0, r3, #1
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e007      	b.n	8000d42 <__gedf2+0x82>
 8000d32:	4326      	orrs	r6, r4
 8000d34:	d12a      	bne.n	8000d8c <__gedf2+0xcc>
 8000d36:	4550      	cmp	r0, sl
 8000d38:	d021      	beq.n	8000d7e <__gedf2+0xbe>
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	9b01      	ldr	r3, [sp, #4]
 8000d3e:	425f      	negs	r7, r3
 8000d40:	4338      	orrs	r0, r7
 8000d42:	b003      	add	sp, #12
 8000d44:	bcf0      	pop	{r4, r5, r6, r7}
 8000d46:	46bb      	mov	fp, r7
 8000d48:	46b2      	mov	sl, r6
 8000d4a:	46a9      	mov	r9, r5
 8000d4c:	46a0      	mov	r8, r4
 8000d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d0dc      	beq.n	8000d0e <__gedf2+0x4e>
 8000d54:	e7e6      	b.n	8000d24 <__gedf2+0x64>
 8000d56:	2800      	cmp	r0, #0
 8000d58:	d0ef      	beq.n	8000d3a <__gedf2+0x7a>
 8000d5a:	9b01      	ldr	r3, [sp, #4]
 8000d5c:	4563      	cmp	r3, ip
 8000d5e:	d1ec      	bne.n	8000d3a <__gedf2+0x7a>
 8000d60:	4582      	cmp	sl, r0
 8000d62:	dcea      	bgt.n	8000d3a <__gedf2+0x7a>
 8000d64:	dbe1      	blt.n	8000d2a <__gedf2+0x6a>
 8000d66:	428e      	cmp	r6, r1
 8000d68:	d8e7      	bhi.n	8000d3a <__gedf2+0x7a>
 8000d6a:	d1de      	bne.n	8000d2a <__gedf2+0x6a>
 8000d6c:	45c8      	cmp	r8, r9
 8000d6e:	d8e4      	bhi.n	8000d3a <__gedf2+0x7a>
 8000d70:	2000      	movs	r0, #0
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2e5      	bcs.n	8000d42 <__gedf2+0x82>
 8000d76:	e7d8      	b.n	8000d2a <__gedf2+0x6a>
 8000d78:	2c00      	cmp	r4, #0
 8000d7a:	d0e2      	beq.n	8000d42 <__gedf2+0x82>
 8000d7c:	e7dd      	b.n	8000d3a <__gedf2+0x7a>
 8000d7e:	4311      	orrs	r1, r2
 8000d80:	d104      	bne.n	8000d8c <__gedf2+0xcc>
 8000d82:	9b01      	ldr	r3, [sp, #4]
 8000d84:	4563      	cmp	r3, ip
 8000d86:	d1d8      	bne.n	8000d3a <__gedf2+0x7a>
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e7da      	b.n	8000d42 <__gedf2+0x82>
 8000d8c:	2002      	movs	r0, #2
 8000d8e:	4240      	negs	r0, r0
 8000d90:	e7d7      	b.n	8000d42 <__gedf2+0x82>
 8000d92:	9b01      	ldr	r3, [sp, #4]
 8000d94:	4563      	cmp	r3, ip
 8000d96:	d0e6      	beq.n	8000d66 <__gedf2+0xa6>
 8000d98:	e7cf      	b.n	8000d3a <__gedf2+0x7a>
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	000007ff 	.word	0x000007ff

08000da0 <__ledf2>:
 8000da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da2:	4657      	mov	r7, sl
 8000da4:	464e      	mov	r6, r9
 8000da6:	4645      	mov	r5, r8
 8000da8:	46de      	mov	lr, fp
 8000daa:	b5e0      	push	{r5, r6, r7, lr}
 8000dac:	000d      	movs	r5, r1
 8000dae:	030e      	lsls	r6, r1, #12
 8000db0:	0049      	lsls	r1, r1, #1
 8000db2:	0d49      	lsrs	r1, r1, #21
 8000db4:	468a      	mov	sl, r1
 8000db6:	0fdf      	lsrs	r7, r3, #31
 8000db8:	0fe9      	lsrs	r1, r5, #31
 8000dba:	46bc      	mov	ip, r7
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	4f2e      	ldr	r7, [pc, #184]	@ (8000e78 <__ledf2+0xd8>)
 8000dc0:	0004      	movs	r4, r0
 8000dc2:	4680      	mov	r8, r0
 8000dc4:	9101      	str	r1, [sp, #4]
 8000dc6:	0058      	lsls	r0, r3, #1
 8000dc8:	0319      	lsls	r1, r3, #12
 8000dca:	4691      	mov	r9, r2
 8000dcc:	0b36      	lsrs	r6, r6, #12
 8000dce:	0b09      	lsrs	r1, r1, #12
 8000dd0:	0d40      	lsrs	r0, r0, #21
 8000dd2:	45ba      	cmp	sl, r7
 8000dd4:	d01e      	beq.n	8000e14 <__ledf2+0x74>
 8000dd6:	42b8      	cmp	r0, r7
 8000dd8:	d00d      	beq.n	8000df6 <__ledf2+0x56>
 8000dda:	4657      	mov	r7, sl
 8000ddc:	2f00      	cmp	r7, #0
 8000dde:	d127      	bne.n	8000e30 <__ledf2+0x90>
 8000de0:	4334      	orrs	r4, r6
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d133      	bne.n	8000e4e <__ledf2+0xae>
 8000de6:	430a      	orrs	r2, r1
 8000de8:	d034      	beq.n	8000e54 <__ledf2+0xb4>
 8000dea:	2c00      	cmp	r4, #0
 8000dec:	d140      	bne.n	8000e70 <__ledf2+0xd0>
 8000dee:	4663      	mov	r3, ip
 8000df0:	0058      	lsls	r0, r3, #1
 8000df2:	3801      	subs	r0, #1
 8000df4:	e015      	b.n	8000e22 <__ledf2+0x82>
 8000df6:	4311      	orrs	r1, r2
 8000df8:	d112      	bne.n	8000e20 <__ledf2+0x80>
 8000dfa:	4653      	mov	r3, sl
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d101      	bne.n	8000e04 <__ledf2+0x64>
 8000e00:	4326      	orrs	r6, r4
 8000e02:	d0f4      	beq.n	8000dee <__ledf2+0x4e>
 8000e04:	9b01      	ldr	r3, [sp, #4]
 8000e06:	4563      	cmp	r3, ip
 8000e08:	d01d      	beq.n	8000e46 <__ledf2+0xa6>
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	9b01      	ldr	r3, [sp, #4]
 8000e0e:	425f      	negs	r7, r3
 8000e10:	4338      	orrs	r0, r7
 8000e12:	e006      	b.n	8000e22 <__ledf2+0x82>
 8000e14:	4326      	orrs	r6, r4
 8000e16:	d103      	bne.n	8000e20 <__ledf2+0x80>
 8000e18:	4550      	cmp	r0, sl
 8000e1a:	d1f6      	bne.n	8000e0a <__ledf2+0x6a>
 8000e1c:	4311      	orrs	r1, r2
 8000e1e:	d01c      	beq.n	8000e5a <__ledf2+0xba>
 8000e20:	2002      	movs	r0, #2
 8000e22:	b003      	add	sp, #12
 8000e24:	bcf0      	pop	{r4, r5, r6, r7}
 8000e26:	46bb      	mov	fp, r7
 8000e28:	46b2      	mov	sl, r6
 8000e2a:	46a9      	mov	r9, r5
 8000e2c:	46a0      	mov	r8, r4
 8000e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e30:	2800      	cmp	r0, #0
 8000e32:	d0ea      	beq.n	8000e0a <__ledf2+0x6a>
 8000e34:	9b01      	ldr	r3, [sp, #4]
 8000e36:	4563      	cmp	r3, ip
 8000e38:	d1e7      	bne.n	8000e0a <__ledf2+0x6a>
 8000e3a:	4582      	cmp	sl, r0
 8000e3c:	dce5      	bgt.n	8000e0a <__ledf2+0x6a>
 8000e3e:	db02      	blt.n	8000e46 <__ledf2+0xa6>
 8000e40:	428e      	cmp	r6, r1
 8000e42:	d8e2      	bhi.n	8000e0a <__ledf2+0x6a>
 8000e44:	d00e      	beq.n	8000e64 <__ledf2+0xc4>
 8000e46:	9b01      	ldr	r3, [sp, #4]
 8000e48:	0058      	lsls	r0, r3, #1
 8000e4a:	3801      	subs	r0, #1
 8000e4c:	e7e9      	b.n	8000e22 <__ledf2+0x82>
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	d0cd      	beq.n	8000dee <__ledf2+0x4e>
 8000e52:	e7d7      	b.n	8000e04 <__ledf2+0x64>
 8000e54:	2c00      	cmp	r4, #0
 8000e56:	d0e4      	beq.n	8000e22 <__ledf2+0x82>
 8000e58:	e7d7      	b.n	8000e0a <__ledf2+0x6a>
 8000e5a:	9b01      	ldr	r3, [sp, #4]
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	4563      	cmp	r3, ip
 8000e60:	d0df      	beq.n	8000e22 <__ledf2+0x82>
 8000e62:	e7d2      	b.n	8000e0a <__ledf2+0x6a>
 8000e64:	45c8      	cmp	r8, r9
 8000e66:	d8d0      	bhi.n	8000e0a <__ledf2+0x6a>
 8000e68:	2000      	movs	r0, #0
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2d9      	bcs.n	8000e22 <__ledf2+0x82>
 8000e6e:	e7ea      	b.n	8000e46 <__ledf2+0xa6>
 8000e70:	9b01      	ldr	r3, [sp, #4]
 8000e72:	4563      	cmp	r3, ip
 8000e74:	d0e4      	beq.n	8000e40 <__ledf2+0xa0>
 8000e76:	e7c8      	b.n	8000e0a <__ledf2+0x6a>
 8000e78:	000007ff 	.word	0x000007ff

08000e7c <__aeabi_dmul>:
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	4657      	mov	r7, sl
 8000e80:	464e      	mov	r6, r9
 8000e82:	46de      	mov	lr, fp
 8000e84:	4645      	mov	r5, r8
 8000e86:	b5e0      	push	{r5, r6, r7, lr}
 8000e88:	001f      	movs	r7, r3
 8000e8a:	030b      	lsls	r3, r1, #12
 8000e8c:	0b1b      	lsrs	r3, r3, #12
 8000e8e:	0016      	movs	r6, r2
 8000e90:	469a      	mov	sl, r3
 8000e92:	0fca      	lsrs	r2, r1, #31
 8000e94:	004b      	lsls	r3, r1, #1
 8000e96:	0004      	movs	r4, r0
 8000e98:	4691      	mov	r9, r2
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	0d5b      	lsrs	r3, r3, #21
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_dmul+0x26>
 8000ea0:	e1cf      	b.n	8001242 <__aeabi_dmul+0x3c6>
 8000ea2:	4acd      	ldr	r2, [pc, #820]	@ (80011d8 <__aeabi_dmul+0x35c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d055      	beq.n	8000f54 <__aeabi_dmul+0xd8>
 8000ea8:	4651      	mov	r1, sl
 8000eaa:	0f42      	lsrs	r2, r0, #29
 8000eac:	00c9      	lsls	r1, r1, #3
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	2180      	movs	r1, #128	@ 0x80
 8000eb2:	0409      	lsls	r1, r1, #16
 8000eb4:	4311      	orrs	r1, r2
 8000eb6:	00c2      	lsls	r2, r0, #3
 8000eb8:	4690      	mov	r8, r2
 8000eba:	4ac8      	ldr	r2, [pc, #800]	@ (80011dc <__aeabi_dmul+0x360>)
 8000ebc:	468a      	mov	sl, r1
 8000ebe:	4693      	mov	fp, r2
 8000ec0:	449b      	add	fp, r3
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	033c      	lsls	r4, r7, #12
 8000eca:	007b      	lsls	r3, r7, #1
 8000ecc:	0ffa      	lsrs	r2, r7, #31
 8000ece:	9601      	str	r6, [sp, #4]
 8000ed0:	0b24      	lsrs	r4, r4, #12
 8000ed2:	0d5b      	lsrs	r3, r3, #21
 8000ed4:	9200      	str	r2, [sp, #0]
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dmul+0x5e>
 8000ed8:	e188      	b.n	80011ec <__aeabi_dmul+0x370>
 8000eda:	4abf      	ldr	r2, [pc, #764]	@ (80011d8 <__aeabi_dmul+0x35c>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dmul+0x66>
 8000ee0:	e092      	b.n	8001008 <__aeabi_dmul+0x18c>
 8000ee2:	4abe      	ldr	r2, [pc, #760]	@ (80011dc <__aeabi_dmul+0x360>)
 8000ee4:	4694      	mov	ip, r2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	449b      	add	fp, r3
 8000eea:	2d0a      	cmp	r5, #10
 8000eec:	dc42      	bgt.n	8000f74 <__aeabi_dmul+0xf8>
 8000eee:	00e4      	lsls	r4, r4, #3
 8000ef0:	0f73      	lsrs	r3, r6, #29
 8000ef2:	4323      	orrs	r3, r4
 8000ef4:	2480      	movs	r4, #128	@ 0x80
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	0424      	lsls	r4, r4, #16
 8000efa:	431c      	orrs	r4, r3
 8000efc:	00f3      	lsls	r3, r6, #3
 8000efe:	9301      	str	r3, [sp, #4]
 8000f00:	9b00      	ldr	r3, [sp, #0]
 8000f02:	2000      	movs	r0, #0
 8000f04:	4059      	eors	r1, r3
 8000f06:	b2cb      	uxtb	r3, r1
 8000f08:	9303      	str	r3, [sp, #12]
 8000f0a:	2d02      	cmp	r5, #2
 8000f0c:	dc00      	bgt.n	8000f10 <__aeabi_dmul+0x94>
 8000f0e:	e094      	b.n	800103a <__aeabi_dmul+0x1be>
 8000f10:	2301      	movs	r3, #1
 8000f12:	40ab      	lsls	r3, r5
 8000f14:	001d      	movs	r5, r3
 8000f16:	23a6      	movs	r3, #166	@ 0xa6
 8000f18:	002a      	movs	r2, r5
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	421d      	tst	r5, r3
 8000f20:	d000      	beq.n	8000f24 <__aeabi_dmul+0xa8>
 8000f22:	e229      	b.n	8001378 <__aeabi_dmul+0x4fc>
 8000f24:	2390      	movs	r3, #144	@ 0x90
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	421d      	tst	r5, r3
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_dmul+0xb2>
 8000f2c:	e24d      	b.n	80013ca <__aeabi_dmul+0x54e>
 8000f2e:	2300      	movs	r3, #0
 8000f30:	2480      	movs	r4, #128	@ 0x80
 8000f32:	4699      	mov	r9, r3
 8000f34:	0324      	lsls	r4, r4, #12
 8000f36:	4ba8      	ldr	r3, [pc, #672]	@ (80011d8 <__aeabi_dmul+0x35c>)
 8000f38:	0010      	movs	r0, r2
 8000f3a:	464a      	mov	r2, r9
 8000f3c:	051b      	lsls	r3, r3, #20
 8000f3e:	4323      	orrs	r3, r4
 8000f40:	07d2      	lsls	r2, r2, #31
 8000f42:	4313      	orrs	r3, r2
 8000f44:	0019      	movs	r1, r3
 8000f46:	b005      	add	sp, #20
 8000f48:	bcf0      	pop	{r4, r5, r6, r7}
 8000f4a:	46bb      	mov	fp, r7
 8000f4c:	46b2      	mov	sl, r6
 8000f4e:	46a9      	mov	r9, r5
 8000f50:	46a0      	mov	r8, r4
 8000f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f54:	4652      	mov	r2, sl
 8000f56:	4302      	orrs	r2, r0
 8000f58:	4690      	mov	r8, r2
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_dmul+0xe2>
 8000f5c:	e1ac      	b.n	80012b8 <__aeabi_dmul+0x43c>
 8000f5e:	469b      	mov	fp, r3
 8000f60:	2302      	movs	r3, #2
 8000f62:	4692      	mov	sl, r2
 8000f64:	2508      	movs	r5, #8
 8000f66:	9302      	str	r3, [sp, #8]
 8000f68:	e7ae      	b.n	8000ec8 <__aeabi_dmul+0x4c>
 8000f6a:	9b00      	ldr	r3, [sp, #0]
 8000f6c:	46a2      	mov	sl, r4
 8000f6e:	4699      	mov	r9, r3
 8000f70:	9b01      	ldr	r3, [sp, #4]
 8000f72:	4698      	mov	r8, r3
 8000f74:	9b02      	ldr	r3, [sp, #8]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d100      	bne.n	8000f7c <__aeabi_dmul+0x100>
 8000f7a:	e1ca      	b.n	8001312 <__aeabi_dmul+0x496>
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dmul+0x106>
 8000f80:	e192      	b.n	80012a8 <__aeabi_dmul+0x42c>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d110      	bne.n	8000fa8 <__aeabi_dmul+0x12c>
 8000f86:	2300      	movs	r3, #0
 8000f88:	2400      	movs	r4, #0
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	e7d4      	b.n	8000f38 <__aeabi_dmul+0xbc>
 8000f8e:	2201      	movs	r2, #1
 8000f90:	087b      	lsrs	r3, r7, #1
 8000f92:	403a      	ands	r2, r7
 8000f94:	4313      	orrs	r3, r2
 8000f96:	4652      	mov	r2, sl
 8000f98:	07d2      	lsls	r2, r2, #31
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	4698      	mov	r8, r3
 8000f9e:	4653      	mov	r3, sl
 8000fa0:	085b      	lsrs	r3, r3, #1
 8000fa2:	469a      	mov	sl, r3
 8000fa4:	9b03      	ldr	r3, [sp, #12]
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	465b      	mov	r3, fp
 8000faa:	1c58      	adds	r0, r3, #1
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	445b      	add	r3, fp
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	dc00      	bgt.n	8000fb8 <__aeabi_dmul+0x13c>
 8000fb6:	e1b1      	b.n	800131c <__aeabi_dmul+0x4a0>
 8000fb8:	4642      	mov	r2, r8
 8000fba:	0752      	lsls	r2, r2, #29
 8000fbc:	d00b      	beq.n	8000fd6 <__aeabi_dmul+0x15a>
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	4641      	mov	r1, r8
 8000fc2:	400a      	ands	r2, r1
 8000fc4:	2a04      	cmp	r2, #4
 8000fc6:	d006      	beq.n	8000fd6 <__aeabi_dmul+0x15a>
 8000fc8:	4642      	mov	r2, r8
 8000fca:	1d11      	adds	r1, r2, #4
 8000fcc:	4541      	cmp	r1, r8
 8000fce:	4192      	sbcs	r2, r2
 8000fd0:	4688      	mov	r8, r1
 8000fd2:	4252      	negs	r2, r2
 8000fd4:	4492      	add	sl, r2
 8000fd6:	4652      	mov	r2, sl
 8000fd8:	01d2      	lsls	r2, r2, #7
 8000fda:	d506      	bpl.n	8000fea <__aeabi_dmul+0x16e>
 8000fdc:	4652      	mov	r2, sl
 8000fde:	4b80      	ldr	r3, [pc, #512]	@ (80011e0 <__aeabi_dmul+0x364>)
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	2380      	movs	r3, #128	@ 0x80
 8000fe4:	4692      	mov	sl, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	18c3      	adds	r3, r0, r3
 8000fea:	4a7e      	ldr	r2, [pc, #504]	@ (80011e4 <__aeabi_dmul+0x368>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	dd00      	ble.n	8000ff2 <__aeabi_dmul+0x176>
 8000ff0:	e18f      	b.n	8001312 <__aeabi_dmul+0x496>
 8000ff2:	4642      	mov	r2, r8
 8000ff4:	08d1      	lsrs	r1, r2, #3
 8000ff6:	4652      	mov	r2, sl
 8000ff8:	0752      	lsls	r2, r2, #29
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	4651      	mov	r1, sl
 8000ffe:	055b      	lsls	r3, r3, #21
 8001000:	024c      	lsls	r4, r1, #9
 8001002:	0b24      	lsrs	r4, r4, #12
 8001004:	0d5b      	lsrs	r3, r3, #21
 8001006:	e797      	b.n	8000f38 <__aeabi_dmul+0xbc>
 8001008:	4b73      	ldr	r3, [pc, #460]	@ (80011d8 <__aeabi_dmul+0x35c>)
 800100a:	4326      	orrs	r6, r4
 800100c:	469c      	mov	ip, r3
 800100e:	44e3      	add	fp, ip
 8001010:	2e00      	cmp	r6, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_dmul+0x19a>
 8001014:	e16f      	b.n	80012f6 <__aeabi_dmul+0x47a>
 8001016:	2303      	movs	r3, #3
 8001018:	4649      	mov	r1, r9
 800101a:	431d      	orrs	r5, r3
 800101c:	9b00      	ldr	r3, [sp, #0]
 800101e:	4059      	eors	r1, r3
 8001020:	b2cb      	uxtb	r3, r1
 8001022:	9303      	str	r3, [sp, #12]
 8001024:	2d0a      	cmp	r5, #10
 8001026:	dd00      	ble.n	800102a <__aeabi_dmul+0x1ae>
 8001028:	e133      	b.n	8001292 <__aeabi_dmul+0x416>
 800102a:	2301      	movs	r3, #1
 800102c:	40ab      	lsls	r3, r5
 800102e:	001d      	movs	r5, r3
 8001030:	2303      	movs	r3, #3
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2288      	movs	r2, #136	@ 0x88
 8001036:	422a      	tst	r2, r5
 8001038:	d197      	bne.n	8000f6a <__aeabi_dmul+0xee>
 800103a:	4642      	mov	r2, r8
 800103c:	4643      	mov	r3, r8
 800103e:	0412      	lsls	r2, r2, #16
 8001040:	0c12      	lsrs	r2, r2, #16
 8001042:	0016      	movs	r6, r2
 8001044:	9801      	ldr	r0, [sp, #4]
 8001046:	0c1d      	lsrs	r5, r3, #16
 8001048:	0c03      	lsrs	r3, r0, #16
 800104a:	0400      	lsls	r0, r0, #16
 800104c:	0c00      	lsrs	r0, r0, #16
 800104e:	4346      	muls	r6, r0
 8001050:	46b4      	mov	ip, r6
 8001052:	001e      	movs	r6, r3
 8001054:	436e      	muls	r6, r5
 8001056:	9600      	str	r6, [sp, #0]
 8001058:	0016      	movs	r6, r2
 800105a:	0007      	movs	r7, r0
 800105c:	435e      	muls	r6, r3
 800105e:	4661      	mov	r1, ip
 8001060:	46b0      	mov	r8, r6
 8001062:	436f      	muls	r7, r5
 8001064:	0c0e      	lsrs	r6, r1, #16
 8001066:	44b8      	add	r8, r7
 8001068:	4446      	add	r6, r8
 800106a:	42b7      	cmp	r7, r6
 800106c:	d905      	bls.n	800107a <__aeabi_dmul+0x1fe>
 800106e:	2180      	movs	r1, #128	@ 0x80
 8001070:	0249      	lsls	r1, r1, #9
 8001072:	4688      	mov	r8, r1
 8001074:	9f00      	ldr	r7, [sp, #0]
 8001076:	4447      	add	r7, r8
 8001078:	9700      	str	r7, [sp, #0]
 800107a:	4661      	mov	r1, ip
 800107c:	0409      	lsls	r1, r1, #16
 800107e:	0c09      	lsrs	r1, r1, #16
 8001080:	0c37      	lsrs	r7, r6, #16
 8001082:	0436      	lsls	r6, r6, #16
 8001084:	468c      	mov	ip, r1
 8001086:	0031      	movs	r1, r6
 8001088:	4461      	add	r1, ip
 800108a:	9101      	str	r1, [sp, #4]
 800108c:	0011      	movs	r1, r2
 800108e:	0c26      	lsrs	r6, r4, #16
 8001090:	0424      	lsls	r4, r4, #16
 8001092:	0c24      	lsrs	r4, r4, #16
 8001094:	4361      	muls	r1, r4
 8001096:	468c      	mov	ip, r1
 8001098:	0021      	movs	r1, r4
 800109a:	4369      	muls	r1, r5
 800109c:	4689      	mov	r9, r1
 800109e:	4661      	mov	r1, ip
 80010a0:	0c09      	lsrs	r1, r1, #16
 80010a2:	4688      	mov	r8, r1
 80010a4:	4372      	muls	r2, r6
 80010a6:	444a      	add	r2, r9
 80010a8:	4442      	add	r2, r8
 80010aa:	4375      	muls	r5, r6
 80010ac:	4591      	cmp	r9, r2
 80010ae:	d903      	bls.n	80010b8 <__aeabi_dmul+0x23c>
 80010b0:	2180      	movs	r1, #128	@ 0x80
 80010b2:	0249      	lsls	r1, r1, #9
 80010b4:	4688      	mov	r8, r1
 80010b6:	4445      	add	r5, r8
 80010b8:	0c11      	lsrs	r1, r2, #16
 80010ba:	4688      	mov	r8, r1
 80010bc:	4661      	mov	r1, ip
 80010be:	0409      	lsls	r1, r1, #16
 80010c0:	0c09      	lsrs	r1, r1, #16
 80010c2:	468c      	mov	ip, r1
 80010c4:	0412      	lsls	r2, r2, #16
 80010c6:	4462      	add	r2, ip
 80010c8:	18b9      	adds	r1, r7, r2
 80010ca:	9102      	str	r1, [sp, #8]
 80010cc:	4651      	mov	r1, sl
 80010ce:	0c09      	lsrs	r1, r1, #16
 80010d0:	468c      	mov	ip, r1
 80010d2:	4651      	mov	r1, sl
 80010d4:	040f      	lsls	r7, r1, #16
 80010d6:	0c3f      	lsrs	r7, r7, #16
 80010d8:	0039      	movs	r1, r7
 80010da:	4341      	muls	r1, r0
 80010dc:	4445      	add	r5, r8
 80010de:	4688      	mov	r8, r1
 80010e0:	4661      	mov	r1, ip
 80010e2:	4341      	muls	r1, r0
 80010e4:	468a      	mov	sl, r1
 80010e6:	4641      	mov	r1, r8
 80010e8:	4660      	mov	r0, ip
 80010ea:	0c09      	lsrs	r1, r1, #16
 80010ec:	4689      	mov	r9, r1
 80010ee:	4358      	muls	r0, r3
 80010f0:	437b      	muls	r3, r7
 80010f2:	4453      	add	r3, sl
 80010f4:	444b      	add	r3, r9
 80010f6:	459a      	cmp	sl, r3
 80010f8:	d903      	bls.n	8001102 <__aeabi_dmul+0x286>
 80010fa:	2180      	movs	r1, #128	@ 0x80
 80010fc:	0249      	lsls	r1, r1, #9
 80010fe:	4689      	mov	r9, r1
 8001100:	4448      	add	r0, r9
 8001102:	0c19      	lsrs	r1, r3, #16
 8001104:	4689      	mov	r9, r1
 8001106:	4641      	mov	r1, r8
 8001108:	0409      	lsls	r1, r1, #16
 800110a:	0c09      	lsrs	r1, r1, #16
 800110c:	4688      	mov	r8, r1
 800110e:	0039      	movs	r1, r7
 8001110:	4361      	muls	r1, r4
 8001112:	041b      	lsls	r3, r3, #16
 8001114:	4443      	add	r3, r8
 8001116:	4688      	mov	r8, r1
 8001118:	4661      	mov	r1, ip
 800111a:	434c      	muls	r4, r1
 800111c:	4371      	muls	r1, r6
 800111e:	468c      	mov	ip, r1
 8001120:	4641      	mov	r1, r8
 8001122:	4377      	muls	r7, r6
 8001124:	0c0e      	lsrs	r6, r1, #16
 8001126:	193f      	adds	r7, r7, r4
 8001128:	19f6      	adds	r6, r6, r7
 800112a:	4448      	add	r0, r9
 800112c:	42b4      	cmp	r4, r6
 800112e:	d903      	bls.n	8001138 <__aeabi_dmul+0x2bc>
 8001130:	2180      	movs	r1, #128	@ 0x80
 8001132:	0249      	lsls	r1, r1, #9
 8001134:	4689      	mov	r9, r1
 8001136:	44cc      	add	ip, r9
 8001138:	9902      	ldr	r1, [sp, #8]
 800113a:	9f00      	ldr	r7, [sp, #0]
 800113c:	4689      	mov	r9, r1
 800113e:	0431      	lsls	r1, r6, #16
 8001140:	444f      	add	r7, r9
 8001142:	4689      	mov	r9, r1
 8001144:	4641      	mov	r1, r8
 8001146:	4297      	cmp	r7, r2
 8001148:	4192      	sbcs	r2, r2
 800114a:	040c      	lsls	r4, r1, #16
 800114c:	0c24      	lsrs	r4, r4, #16
 800114e:	444c      	add	r4, r9
 8001150:	18ff      	adds	r7, r7, r3
 8001152:	4252      	negs	r2, r2
 8001154:	1964      	adds	r4, r4, r5
 8001156:	18a1      	adds	r1, r4, r2
 8001158:	429f      	cmp	r7, r3
 800115a:	419b      	sbcs	r3, r3
 800115c:	4688      	mov	r8, r1
 800115e:	4682      	mov	sl, r0
 8001160:	425b      	negs	r3, r3
 8001162:	4699      	mov	r9, r3
 8001164:	4590      	cmp	r8, r2
 8001166:	4192      	sbcs	r2, r2
 8001168:	42ac      	cmp	r4, r5
 800116a:	41a4      	sbcs	r4, r4
 800116c:	44c2      	add	sl, r8
 800116e:	44d1      	add	r9, sl
 8001170:	4252      	negs	r2, r2
 8001172:	4264      	negs	r4, r4
 8001174:	4314      	orrs	r4, r2
 8001176:	4599      	cmp	r9, r3
 8001178:	419b      	sbcs	r3, r3
 800117a:	4582      	cmp	sl, r0
 800117c:	4192      	sbcs	r2, r2
 800117e:	425b      	negs	r3, r3
 8001180:	4252      	negs	r2, r2
 8001182:	4313      	orrs	r3, r2
 8001184:	464a      	mov	r2, r9
 8001186:	0c36      	lsrs	r6, r6, #16
 8001188:	19a4      	adds	r4, r4, r6
 800118a:	18e3      	adds	r3, r4, r3
 800118c:	4463      	add	r3, ip
 800118e:	025b      	lsls	r3, r3, #9
 8001190:	0dd2      	lsrs	r2, r2, #23
 8001192:	431a      	orrs	r2, r3
 8001194:	9901      	ldr	r1, [sp, #4]
 8001196:	4692      	mov	sl, r2
 8001198:	027a      	lsls	r2, r7, #9
 800119a:	430a      	orrs	r2, r1
 800119c:	1e50      	subs	r0, r2, #1
 800119e:	4182      	sbcs	r2, r0
 80011a0:	0dff      	lsrs	r7, r7, #23
 80011a2:	4317      	orrs	r7, r2
 80011a4:	464a      	mov	r2, r9
 80011a6:	0252      	lsls	r2, r2, #9
 80011a8:	4317      	orrs	r7, r2
 80011aa:	46b8      	mov	r8, r7
 80011ac:	01db      	lsls	r3, r3, #7
 80011ae:	d500      	bpl.n	80011b2 <__aeabi_dmul+0x336>
 80011b0:	e6ed      	b.n	8000f8e <__aeabi_dmul+0x112>
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <__aeabi_dmul+0x36c>)
 80011b4:	9a03      	ldr	r2, [sp, #12]
 80011b6:	445b      	add	r3, fp
 80011b8:	4691      	mov	r9, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	dc00      	bgt.n	80011c0 <__aeabi_dmul+0x344>
 80011be:	e0ac      	b.n	800131a <__aeabi_dmul+0x49e>
 80011c0:	003a      	movs	r2, r7
 80011c2:	0752      	lsls	r2, r2, #29
 80011c4:	d100      	bne.n	80011c8 <__aeabi_dmul+0x34c>
 80011c6:	e710      	b.n	8000fea <__aeabi_dmul+0x16e>
 80011c8:	220f      	movs	r2, #15
 80011ca:	4658      	mov	r0, fp
 80011cc:	403a      	ands	r2, r7
 80011ce:	2a04      	cmp	r2, #4
 80011d0:	d000      	beq.n	80011d4 <__aeabi_dmul+0x358>
 80011d2:	e6f9      	b.n	8000fc8 <__aeabi_dmul+0x14c>
 80011d4:	e709      	b.n	8000fea <__aeabi_dmul+0x16e>
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	000007ff 	.word	0x000007ff
 80011dc:	fffffc01 	.word	0xfffffc01
 80011e0:	feffffff 	.word	0xfeffffff
 80011e4:	000007fe 	.word	0x000007fe
 80011e8:	000003ff 	.word	0x000003ff
 80011ec:	0022      	movs	r2, r4
 80011ee:	4332      	orrs	r2, r6
 80011f0:	d06f      	beq.n	80012d2 <__aeabi_dmul+0x456>
 80011f2:	2c00      	cmp	r4, #0
 80011f4:	d100      	bne.n	80011f8 <__aeabi_dmul+0x37c>
 80011f6:	e0c2      	b.n	800137e <__aeabi_dmul+0x502>
 80011f8:	0020      	movs	r0, r4
 80011fa:	f000 fd99 	bl	8001d30 <__clzsi2>
 80011fe:	0002      	movs	r2, r0
 8001200:	0003      	movs	r3, r0
 8001202:	3a0b      	subs	r2, #11
 8001204:	201d      	movs	r0, #29
 8001206:	1a82      	subs	r2, r0, r2
 8001208:	0030      	movs	r0, r6
 800120a:	0019      	movs	r1, r3
 800120c:	40d0      	lsrs	r0, r2
 800120e:	3908      	subs	r1, #8
 8001210:	408c      	lsls	r4, r1
 8001212:	0002      	movs	r2, r0
 8001214:	4322      	orrs	r2, r4
 8001216:	0034      	movs	r4, r6
 8001218:	408c      	lsls	r4, r1
 800121a:	4659      	mov	r1, fp
 800121c:	1acb      	subs	r3, r1, r3
 800121e:	4986      	ldr	r1, [pc, #536]	@ (8001438 <__aeabi_dmul+0x5bc>)
 8001220:	468b      	mov	fp, r1
 8001222:	449b      	add	fp, r3
 8001224:	2d0a      	cmp	r5, #10
 8001226:	dd00      	ble.n	800122a <__aeabi_dmul+0x3ae>
 8001228:	e6a4      	b.n	8000f74 <__aeabi_dmul+0xf8>
 800122a:	4649      	mov	r1, r9
 800122c:	9b00      	ldr	r3, [sp, #0]
 800122e:	9401      	str	r4, [sp, #4]
 8001230:	4059      	eors	r1, r3
 8001232:	b2cb      	uxtb	r3, r1
 8001234:	0014      	movs	r4, r2
 8001236:	2000      	movs	r0, #0
 8001238:	9303      	str	r3, [sp, #12]
 800123a:	2d02      	cmp	r5, #2
 800123c:	dd00      	ble.n	8001240 <__aeabi_dmul+0x3c4>
 800123e:	e667      	b.n	8000f10 <__aeabi_dmul+0x94>
 8001240:	e6fb      	b.n	800103a <__aeabi_dmul+0x1be>
 8001242:	4653      	mov	r3, sl
 8001244:	4303      	orrs	r3, r0
 8001246:	4698      	mov	r8, r3
 8001248:	d03c      	beq.n	80012c4 <__aeabi_dmul+0x448>
 800124a:	4653      	mov	r3, sl
 800124c:	2b00      	cmp	r3, #0
 800124e:	d100      	bne.n	8001252 <__aeabi_dmul+0x3d6>
 8001250:	e0a3      	b.n	800139a <__aeabi_dmul+0x51e>
 8001252:	4650      	mov	r0, sl
 8001254:	f000 fd6c 	bl	8001d30 <__clzsi2>
 8001258:	230b      	movs	r3, #11
 800125a:	425b      	negs	r3, r3
 800125c:	469c      	mov	ip, r3
 800125e:	0002      	movs	r2, r0
 8001260:	4484      	add	ip, r0
 8001262:	0011      	movs	r1, r2
 8001264:	4650      	mov	r0, sl
 8001266:	3908      	subs	r1, #8
 8001268:	4088      	lsls	r0, r1
 800126a:	231d      	movs	r3, #29
 800126c:	4680      	mov	r8, r0
 800126e:	4660      	mov	r0, ip
 8001270:	1a1b      	subs	r3, r3, r0
 8001272:	0020      	movs	r0, r4
 8001274:	40d8      	lsrs	r0, r3
 8001276:	0003      	movs	r3, r0
 8001278:	4640      	mov	r0, r8
 800127a:	4303      	orrs	r3, r0
 800127c:	469a      	mov	sl, r3
 800127e:	0023      	movs	r3, r4
 8001280:	408b      	lsls	r3, r1
 8001282:	4698      	mov	r8, r3
 8001284:	4b6c      	ldr	r3, [pc, #432]	@ (8001438 <__aeabi_dmul+0x5bc>)
 8001286:	2500      	movs	r5, #0
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	469b      	mov	fp, r3
 800128c:	2300      	movs	r3, #0
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	e61a      	b.n	8000ec8 <__aeabi_dmul+0x4c>
 8001292:	2d0f      	cmp	r5, #15
 8001294:	d000      	beq.n	8001298 <__aeabi_dmul+0x41c>
 8001296:	e0c9      	b.n	800142c <__aeabi_dmul+0x5b0>
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	4652      	mov	r2, sl
 800129c:	031b      	lsls	r3, r3, #12
 800129e:	421a      	tst	r2, r3
 80012a0:	d002      	beq.n	80012a8 <__aeabi_dmul+0x42c>
 80012a2:	421c      	tst	r4, r3
 80012a4:	d100      	bne.n	80012a8 <__aeabi_dmul+0x42c>
 80012a6:	e092      	b.n	80013ce <__aeabi_dmul+0x552>
 80012a8:	2480      	movs	r4, #128	@ 0x80
 80012aa:	4653      	mov	r3, sl
 80012ac:	0324      	lsls	r4, r4, #12
 80012ae:	431c      	orrs	r4, r3
 80012b0:	0324      	lsls	r4, r4, #12
 80012b2:	4642      	mov	r2, r8
 80012b4:	0b24      	lsrs	r4, r4, #12
 80012b6:	e63e      	b.n	8000f36 <__aeabi_dmul+0xba>
 80012b8:	469b      	mov	fp, r3
 80012ba:	2303      	movs	r3, #3
 80012bc:	4680      	mov	r8, r0
 80012be:	250c      	movs	r5, #12
 80012c0:	9302      	str	r3, [sp, #8]
 80012c2:	e601      	b.n	8000ec8 <__aeabi_dmul+0x4c>
 80012c4:	2300      	movs	r3, #0
 80012c6:	469a      	mov	sl, r3
 80012c8:	469b      	mov	fp, r3
 80012ca:	3301      	adds	r3, #1
 80012cc:	2504      	movs	r5, #4
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	e5fa      	b.n	8000ec8 <__aeabi_dmul+0x4c>
 80012d2:	2101      	movs	r1, #1
 80012d4:	430d      	orrs	r5, r1
 80012d6:	2d0a      	cmp	r5, #10
 80012d8:	dd00      	ble.n	80012dc <__aeabi_dmul+0x460>
 80012da:	e64b      	b.n	8000f74 <__aeabi_dmul+0xf8>
 80012dc:	4649      	mov	r1, r9
 80012de:	9800      	ldr	r0, [sp, #0]
 80012e0:	4041      	eors	r1, r0
 80012e2:	b2c9      	uxtb	r1, r1
 80012e4:	9103      	str	r1, [sp, #12]
 80012e6:	2d02      	cmp	r5, #2
 80012e8:	dc00      	bgt.n	80012ec <__aeabi_dmul+0x470>
 80012ea:	e096      	b.n	800141a <__aeabi_dmul+0x59e>
 80012ec:	2300      	movs	r3, #0
 80012ee:	2400      	movs	r4, #0
 80012f0:	2001      	movs	r0, #1
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	e60c      	b.n	8000f10 <__aeabi_dmul+0x94>
 80012f6:	4649      	mov	r1, r9
 80012f8:	2302      	movs	r3, #2
 80012fa:	9a00      	ldr	r2, [sp, #0]
 80012fc:	432b      	orrs	r3, r5
 80012fe:	4051      	eors	r1, r2
 8001300:	b2ca      	uxtb	r2, r1
 8001302:	9203      	str	r2, [sp, #12]
 8001304:	2b0a      	cmp	r3, #10
 8001306:	dd00      	ble.n	800130a <__aeabi_dmul+0x48e>
 8001308:	e634      	b.n	8000f74 <__aeabi_dmul+0xf8>
 800130a:	2d00      	cmp	r5, #0
 800130c:	d157      	bne.n	80013be <__aeabi_dmul+0x542>
 800130e:	9b03      	ldr	r3, [sp, #12]
 8001310:	4699      	mov	r9, r3
 8001312:	2400      	movs	r4, #0
 8001314:	2200      	movs	r2, #0
 8001316:	4b49      	ldr	r3, [pc, #292]	@ (800143c <__aeabi_dmul+0x5c0>)
 8001318:	e60e      	b.n	8000f38 <__aeabi_dmul+0xbc>
 800131a:	4658      	mov	r0, fp
 800131c:	2101      	movs	r1, #1
 800131e:	1ac9      	subs	r1, r1, r3
 8001320:	2938      	cmp	r1, #56	@ 0x38
 8001322:	dd00      	ble.n	8001326 <__aeabi_dmul+0x4aa>
 8001324:	e62f      	b.n	8000f86 <__aeabi_dmul+0x10a>
 8001326:	291f      	cmp	r1, #31
 8001328:	dd56      	ble.n	80013d8 <__aeabi_dmul+0x55c>
 800132a:	221f      	movs	r2, #31
 800132c:	4654      	mov	r4, sl
 800132e:	4252      	negs	r2, r2
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	40dc      	lsrs	r4, r3
 8001334:	2920      	cmp	r1, #32
 8001336:	d007      	beq.n	8001348 <__aeabi_dmul+0x4cc>
 8001338:	4b41      	ldr	r3, [pc, #260]	@ (8001440 <__aeabi_dmul+0x5c4>)
 800133a:	4642      	mov	r2, r8
 800133c:	469c      	mov	ip, r3
 800133e:	4653      	mov	r3, sl
 8001340:	4460      	add	r0, ip
 8001342:	4083      	lsls	r3, r0
 8001344:	431a      	orrs	r2, r3
 8001346:	4690      	mov	r8, r2
 8001348:	4642      	mov	r2, r8
 800134a:	2107      	movs	r1, #7
 800134c:	1e53      	subs	r3, r2, #1
 800134e:	419a      	sbcs	r2, r3
 8001350:	000b      	movs	r3, r1
 8001352:	4322      	orrs	r2, r4
 8001354:	4013      	ands	r3, r2
 8001356:	2400      	movs	r4, #0
 8001358:	4211      	tst	r1, r2
 800135a:	d009      	beq.n	8001370 <__aeabi_dmul+0x4f4>
 800135c:	230f      	movs	r3, #15
 800135e:	4013      	ands	r3, r2
 8001360:	2b04      	cmp	r3, #4
 8001362:	d05d      	beq.n	8001420 <__aeabi_dmul+0x5a4>
 8001364:	1d11      	adds	r1, r2, #4
 8001366:	4291      	cmp	r1, r2
 8001368:	419b      	sbcs	r3, r3
 800136a:	000a      	movs	r2, r1
 800136c:	425b      	negs	r3, r3
 800136e:	075b      	lsls	r3, r3, #29
 8001370:	08d2      	lsrs	r2, r2, #3
 8001372:	431a      	orrs	r2, r3
 8001374:	2300      	movs	r3, #0
 8001376:	e5df      	b.n	8000f38 <__aeabi_dmul+0xbc>
 8001378:	9b03      	ldr	r3, [sp, #12]
 800137a:	4699      	mov	r9, r3
 800137c:	e5fa      	b.n	8000f74 <__aeabi_dmul+0xf8>
 800137e:	9801      	ldr	r0, [sp, #4]
 8001380:	f000 fcd6 	bl	8001d30 <__clzsi2>
 8001384:	0002      	movs	r2, r0
 8001386:	0003      	movs	r3, r0
 8001388:	3215      	adds	r2, #21
 800138a:	3320      	adds	r3, #32
 800138c:	2a1c      	cmp	r2, #28
 800138e:	dc00      	bgt.n	8001392 <__aeabi_dmul+0x516>
 8001390:	e738      	b.n	8001204 <__aeabi_dmul+0x388>
 8001392:	9a01      	ldr	r2, [sp, #4]
 8001394:	3808      	subs	r0, #8
 8001396:	4082      	lsls	r2, r0
 8001398:	e73f      	b.n	800121a <__aeabi_dmul+0x39e>
 800139a:	f000 fcc9 	bl	8001d30 <__clzsi2>
 800139e:	2315      	movs	r3, #21
 80013a0:	469c      	mov	ip, r3
 80013a2:	4484      	add	ip, r0
 80013a4:	0002      	movs	r2, r0
 80013a6:	4663      	mov	r3, ip
 80013a8:	3220      	adds	r2, #32
 80013aa:	2b1c      	cmp	r3, #28
 80013ac:	dc00      	bgt.n	80013b0 <__aeabi_dmul+0x534>
 80013ae:	e758      	b.n	8001262 <__aeabi_dmul+0x3e6>
 80013b0:	2300      	movs	r3, #0
 80013b2:	4698      	mov	r8, r3
 80013b4:	0023      	movs	r3, r4
 80013b6:	3808      	subs	r0, #8
 80013b8:	4083      	lsls	r3, r0
 80013ba:	469a      	mov	sl, r3
 80013bc:	e762      	b.n	8001284 <__aeabi_dmul+0x408>
 80013be:	001d      	movs	r5, r3
 80013c0:	2300      	movs	r3, #0
 80013c2:	2400      	movs	r4, #0
 80013c4:	2002      	movs	r0, #2
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	e5a2      	b.n	8000f10 <__aeabi_dmul+0x94>
 80013ca:	9002      	str	r0, [sp, #8]
 80013cc:	e632      	b.n	8001034 <__aeabi_dmul+0x1b8>
 80013ce:	431c      	orrs	r4, r3
 80013d0:	9b00      	ldr	r3, [sp, #0]
 80013d2:	9a01      	ldr	r2, [sp, #4]
 80013d4:	4699      	mov	r9, r3
 80013d6:	e5ae      	b.n	8000f36 <__aeabi_dmul+0xba>
 80013d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <__aeabi_dmul+0x5c8>)
 80013da:	4652      	mov	r2, sl
 80013dc:	18c3      	adds	r3, r0, r3
 80013de:	4640      	mov	r0, r8
 80013e0:	409a      	lsls	r2, r3
 80013e2:	40c8      	lsrs	r0, r1
 80013e4:	4302      	orrs	r2, r0
 80013e6:	4640      	mov	r0, r8
 80013e8:	4098      	lsls	r0, r3
 80013ea:	0003      	movs	r3, r0
 80013ec:	1e58      	subs	r0, r3, #1
 80013ee:	4183      	sbcs	r3, r0
 80013f0:	4654      	mov	r4, sl
 80013f2:	431a      	orrs	r2, r3
 80013f4:	40cc      	lsrs	r4, r1
 80013f6:	0753      	lsls	r3, r2, #29
 80013f8:	d009      	beq.n	800140e <__aeabi_dmul+0x592>
 80013fa:	230f      	movs	r3, #15
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d005      	beq.n	800140e <__aeabi_dmul+0x592>
 8001402:	1d13      	adds	r3, r2, #4
 8001404:	4293      	cmp	r3, r2
 8001406:	4192      	sbcs	r2, r2
 8001408:	4252      	negs	r2, r2
 800140a:	18a4      	adds	r4, r4, r2
 800140c:	001a      	movs	r2, r3
 800140e:	0223      	lsls	r3, r4, #8
 8001410:	d508      	bpl.n	8001424 <__aeabi_dmul+0x5a8>
 8001412:	2301      	movs	r3, #1
 8001414:	2400      	movs	r4, #0
 8001416:	2200      	movs	r2, #0
 8001418:	e58e      	b.n	8000f38 <__aeabi_dmul+0xbc>
 800141a:	4689      	mov	r9, r1
 800141c:	2400      	movs	r4, #0
 800141e:	e58b      	b.n	8000f38 <__aeabi_dmul+0xbc>
 8001420:	2300      	movs	r3, #0
 8001422:	e7a5      	b.n	8001370 <__aeabi_dmul+0x4f4>
 8001424:	0763      	lsls	r3, r4, #29
 8001426:	0264      	lsls	r4, r4, #9
 8001428:	0b24      	lsrs	r4, r4, #12
 800142a:	e7a1      	b.n	8001370 <__aeabi_dmul+0x4f4>
 800142c:	9b00      	ldr	r3, [sp, #0]
 800142e:	46a2      	mov	sl, r4
 8001430:	4699      	mov	r9, r3
 8001432:	9b01      	ldr	r3, [sp, #4]
 8001434:	4698      	mov	r8, r3
 8001436:	e737      	b.n	80012a8 <__aeabi_dmul+0x42c>
 8001438:	fffffc0d 	.word	0xfffffc0d
 800143c:	000007ff 	.word	0x000007ff
 8001440:	0000043e 	.word	0x0000043e
 8001444:	0000041e 	.word	0x0000041e

08001448 <__aeabi_dsub>:
 8001448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144a:	4657      	mov	r7, sl
 800144c:	464e      	mov	r6, r9
 800144e:	4645      	mov	r5, r8
 8001450:	46de      	mov	lr, fp
 8001452:	b5e0      	push	{r5, r6, r7, lr}
 8001454:	b083      	sub	sp, #12
 8001456:	9000      	str	r0, [sp, #0]
 8001458:	9101      	str	r1, [sp, #4]
 800145a:	030c      	lsls	r4, r1, #12
 800145c:	004d      	lsls	r5, r1, #1
 800145e:	0fce      	lsrs	r6, r1, #31
 8001460:	0a61      	lsrs	r1, r4, #9
 8001462:	9c00      	ldr	r4, [sp, #0]
 8001464:	005f      	lsls	r7, r3, #1
 8001466:	0f64      	lsrs	r4, r4, #29
 8001468:	430c      	orrs	r4, r1
 800146a:	9900      	ldr	r1, [sp, #0]
 800146c:	9200      	str	r2, [sp, #0]
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	00c8      	lsls	r0, r1, #3
 8001472:	0319      	lsls	r1, r3, #12
 8001474:	0d7b      	lsrs	r3, r7, #21
 8001476:	4699      	mov	r9, r3
 8001478:	9b01      	ldr	r3, [sp, #4]
 800147a:	4fcc      	ldr	r7, [pc, #816]	@ (80017ac <__aeabi_dsub+0x364>)
 800147c:	0fdb      	lsrs	r3, r3, #31
 800147e:	469c      	mov	ip, r3
 8001480:	0a4b      	lsrs	r3, r1, #9
 8001482:	9900      	ldr	r1, [sp, #0]
 8001484:	4680      	mov	r8, r0
 8001486:	0f49      	lsrs	r1, r1, #29
 8001488:	4319      	orrs	r1, r3
 800148a:	9b00      	ldr	r3, [sp, #0]
 800148c:	468b      	mov	fp, r1
 800148e:	00da      	lsls	r2, r3, #3
 8001490:	4692      	mov	sl, r2
 8001492:	0d6d      	lsrs	r5, r5, #21
 8001494:	45b9      	cmp	r9, r7
 8001496:	d100      	bne.n	800149a <__aeabi_dsub+0x52>
 8001498:	e0bf      	b.n	800161a <__aeabi_dsub+0x1d2>
 800149a:	2301      	movs	r3, #1
 800149c:	4661      	mov	r1, ip
 800149e:	4059      	eors	r1, r3
 80014a0:	464b      	mov	r3, r9
 80014a2:	468c      	mov	ip, r1
 80014a4:	1aeb      	subs	r3, r5, r3
 80014a6:	428e      	cmp	r6, r1
 80014a8:	d075      	beq.n	8001596 <__aeabi_dsub+0x14e>
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	dc00      	bgt.n	80014b0 <__aeabi_dsub+0x68>
 80014ae:	e2a3      	b.n	80019f8 <__aeabi_dsub+0x5b0>
 80014b0:	4649      	mov	r1, r9
 80014b2:	2900      	cmp	r1, #0
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dsub+0x70>
 80014b6:	e0ce      	b.n	8001656 <__aeabi_dsub+0x20e>
 80014b8:	42bd      	cmp	r5, r7
 80014ba:	d100      	bne.n	80014be <__aeabi_dsub+0x76>
 80014bc:	e200      	b.n	80018c0 <__aeabi_dsub+0x478>
 80014be:	2701      	movs	r7, #1
 80014c0:	2b38      	cmp	r3, #56	@ 0x38
 80014c2:	dc19      	bgt.n	80014f8 <__aeabi_dsub+0xb0>
 80014c4:	2780      	movs	r7, #128	@ 0x80
 80014c6:	4659      	mov	r1, fp
 80014c8:	043f      	lsls	r7, r7, #16
 80014ca:	4339      	orrs	r1, r7
 80014cc:	468b      	mov	fp, r1
 80014ce:	2b1f      	cmp	r3, #31
 80014d0:	dd00      	ble.n	80014d4 <__aeabi_dsub+0x8c>
 80014d2:	e1fa      	b.n	80018ca <__aeabi_dsub+0x482>
 80014d4:	2720      	movs	r7, #32
 80014d6:	1af9      	subs	r1, r7, r3
 80014d8:	468c      	mov	ip, r1
 80014da:	4659      	mov	r1, fp
 80014dc:	4667      	mov	r7, ip
 80014de:	40b9      	lsls	r1, r7
 80014e0:	000f      	movs	r7, r1
 80014e2:	0011      	movs	r1, r2
 80014e4:	40d9      	lsrs	r1, r3
 80014e6:	430f      	orrs	r7, r1
 80014e8:	4661      	mov	r1, ip
 80014ea:	408a      	lsls	r2, r1
 80014ec:	1e51      	subs	r1, r2, #1
 80014ee:	418a      	sbcs	r2, r1
 80014f0:	4659      	mov	r1, fp
 80014f2:	40d9      	lsrs	r1, r3
 80014f4:	4317      	orrs	r7, r2
 80014f6:	1a64      	subs	r4, r4, r1
 80014f8:	1bc7      	subs	r7, r0, r7
 80014fa:	42b8      	cmp	r0, r7
 80014fc:	4180      	sbcs	r0, r0
 80014fe:	4240      	negs	r0, r0
 8001500:	1a24      	subs	r4, r4, r0
 8001502:	0223      	lsls	r3, r4, #8
 8001504:	d400      	bmi.n	8001508 <__aeabi_dsub+0xc0>
 8001506:	e140      	b.n	800178a <__aeabi_dsub+0x342>
 8001508:	0264      	lsls	r4, r4, #9
 800150a:	0a64      	lsrs	r4, r4, #9
 800150c:	2c00      	cmp	r4, #0
 800150e:	d100      	bne.n	8001512 <__aeabi_dsub+0xca>
 8001510:	e154      	b.n	80017bc <__aeabi_dsub+0x374>
 8001512:	0020      	movs	r0, r4
 8001514:	f000 fc0c 	bl	8001d30 <__clzsi2>
 8001518:	0003      	movs	r3, r0
 800151a:	3b08      	subs	r3, #8
 800151c:	2120      	movs	r1, #32
 800151e:	0038      	movs	r0, r7
 8001520:	1aca      	subs	r2, r1, r3
 8001522:	40d0      	lsrs	r0, r2
 8001524:	409c      	lsls	r4, r3
 8001526:	0002      	movs	r2, r0
 8001528:	409f      	lsls	r7, r3
 800152a:	4322      	orrs	r2, r4
 800152c:	429d      	cmp	r5, r3
 800152e:	dd00      	ble.n	8001532 <__aeabi_dsub+0xea>
 8001530:	e1a6      	b.n	8001880 <__aeabi_dsub+0x438>
 8001532:	1b58      	subs	r0, r3, r5
 8001534:	3001      	adds	r0, #1
 8001536:	1a09      	subs	r1, r1, r0
 8001538:	003c      	movs	r4, r7
 800153a:	408f      	lsls	r7, r1
 800153c:	40c4      	lsrs	r4, r0
 800153e:	1e7b      	subs	r3, r7, #1
 8001540:	419f      	sbcs	r7, r3
 8001542:	0013      	movs	r3, r2
 8001544:	408b      	lsls	r3, r1
 8001546:	4327      	orrs	r7, r4
 8001548:	431f      	orrs	r7, r3
 800154a:	40c2      	lsrs	r2, r0
 800154c:	003b      	movs	r3, r7
 800154e:	0014      	movs	r4, r2
 8001550:	2500      	movs	r5, #0
 8001552:	4313      	orrs	r3, r2
 8001554:	d100      	bne.n	8001558 <__aeabi_dsub+0x110>
 8001556:	e1f7      	b.n	8001948 <__aeabi_dsub+0x500>
 8001558:	077b      	lsls	r3, r7, #29
 800155a:	d100      	bne.n	800155e <__aeabi_dsub+0x116>
 800155c:	e377      	b.n	8001c4e <__aeabi_dsub+0x806>
 800155e:	230f      	movs	r3, #15
 8001560:	0038      	movs	r0, r7
 8001562:	403b      	ands	r3, r7
 8001564:	2b04      	cmp	r3, #4
 8001566:	d004      	beq.n	8001572 <__aeabi_dsub+0x12a>
 8001568:	1d38      	adds	r0, r7, #4
 800156a:	42b8      	cmp	r0, r7
 800156c:	41bf      	sbcs	r7, r7
 800156e:	427f      	negs	r7, r7
 8001570:	19e4      	adds	r4, r4, r7
 8001572:	0223      	lsls	r3, r4, #8
 8001574:	d400      	bmi.n	8001578 <__aeabi_dsub+0x130>
 8001576:	e368      	b.n	8001c4a <__aeabi_dsub+0x802>
 8001578:	4b8c      	ldr	r3, [pc, #560]	@ (80017ac <__aeabi_dsub+0x364>)
 800157a:	3501      	adds	r5, #1
 800157c:	429d      	cmp	r5, r3
 800157e:	d100      	bne.n	8001582 <__aeabi_dsub+0x13a>
 8001580:	e0f4      	b.n	800176c <__aeabi_dsub+0x324>
 8001582:	4b8b      	ldr	r3, [pc, #556]	@ (80017b0 <__aeabi_dsub+0x368>)
 8001584:	056d      	lsls	r5, r5, #21
 8001586:	401c      	ands	r4, r3
 8001588:	0d6d      	lsrs	r5, r5, #21
 800158a:	0767      	lsls	r7, r4, #29
 800158c:	08c0      	lsrs	r0, r0, #3
 800158e:	0264      	lsls	r4, r4, #9
 8001590:	4307      	orrs	r7, r0
 8001592:	0b24      	lsrs	r4, r4, #12
 8001594:	e0ec      	b.n	8001770 <__aeabi_dsub+0x328>
 8001596:	2b00      	cmp	r3, #0
 8001598:	dc00      	bgt.n	800159c <__aeabi_dsub+0x154>
 800159a:	e329      	b.n	8001bf0 <__aeabi_dsub+0x7a8>
 800159c:	4649      	mov	r1, r9
 800159e:	2900      	cmp	r1, #0
 80015a0:	d000      	beq.n	80015a4 <__aeabi_dsub+0x15c>
 80015a2:	e0d6      	b.n	8001752 <__aeabi_dsub+0x30a>
 80015a4:	4659      	mov	r1, fp
 80015a6:	4311      	orrs	r1, r2
 80015a8:	d100      	bne.n	80015ac <__aeabi_dsub+0x164>
 80015aa:	e12e      	b.n	800180a <__aeabi_dsub+0x3c2>
 80015ac:	1e59      	subs	r1, r3, #1
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d100      	bne.n	80015b4 <__aeabi_dsub+0x16c>
 80015b2:	e1e6      	b.n	8001982 <__aeabi_dsub+0x53a>
 80015b4:	42bb      	cmp	r3, r7
 80015b6:	d100      	bne.n	80015ba <__aeabi_dsub+0x172>
 80015b8:	e182      	b.n	80018c0 <__aeabi_dsub+0x478>
 80015ba:	2701      	movs	r7, #1
 80015bc:	000b      	movs	r3, r1
 80015be:	2938      	cmp	r1, #56	@ 0x38
 80015c0:	dc14      	bgt.n	80015ec <__aeabi_dsub+0x1a4>
 80015c2:	2b1f      	cmp	r3, #31
 80015c4:	dd00      	ble.n	80015c8 <__aeabi_dsub+0x180>
 80015c6:	e23c      	b.n	8001a42 <__aeabi_dsub+0x5fa>
 80015c8:	2720      	movs	r7, #32
 80015ca:	1af9      	subs	r1, r7, r3
 80015cc:	468c      	mov	ip, r1
 80015ce:	4659      	mov	r1, fp
 80015d0:	4667      	mov	r7, ip
 80015d2:	40b9      	lsls	r1, r7
 80015d4:	000f      	movs	r7, r1
 80015d6:	0011      	movs	r1, r2
 80015d8:	40d9      	lsrs	r1, r3
 80015da:	430f      	orrs	r7, r1
 80015dc:	4661      	mov	r1, ip
 80015de:	408a      	lsls	r2, r1
 80015e0:	1e51      	subs	r1, r2, #1
 80015e2:	418a      	sbcs	r2, r1
 80015e4:	4659      	mov	r1, fp
 80015e6:	40d9      	lsrs	r1, r3
 80015e8:	4317      	orrs	r7, r2
 80015ea:	1864      	adds	r4, r4, r1
 80015ec:	183f      	adds	r7, r7, r0
 80015ee:	4287      	cmp	r7, r0
 80015f0:	4180      	sbcs	r0, r0
 80015f2:	4240      	negs	r0, r0
 80015f4:	1824      	adds	r4, r4, r0
 80015f6:	0223      	lsls	r3, r4, #8
 80015f8:	d400      	bmi.n	80015fc <__aeabi_dsub+0x1b4>
 80015fa:	e0c6      	b.n	800178a <__aeabi_dsub+0x342>
 80015fc:	4b6b      	ldr	r3, [pc, #428]	@ (80017ac <__aeabi_dsub+0x364>)
 80015fe:	3501      	adds	r5, #1
 8001600:	429d      	cmp	r5, r3
 8001602:	d100      	bne.n	8001606 <__aeabi_dsub+0x1be>
 8001604:	e0b2      	b.n	800176c <__aeabi_dsub+0x324>
 8001606:	2101      	movs	r1, #1
 8001608:	4b69      	ldr	r3, [pc, #420]	@ (80017b0 <__aeabi_dsub+0x368>)
 800160a:	087a      	lsrs	r2, r7, #1
 800160c:	401c      	ands	r4, r3
 800160e:	4039      	ands	r1, r7
 8001610:	430a      	orrs	r2, r1
 8001612:	07e7      	lsls	r7, r4, #31
 8001614:	4317      	orrs	r7, r2
 8001616:	0864      	lsrs	r4, r4, #1
 8001618:	e79e      	b.n	8001558 <__aeabi_dsub+0x110>
 800161a:	4b66      	ldr	r3, [pc, #408]	@ (80017b4 <__aeabi_dsub+0x36c>)
 800161c:	4311      	orrs	r1, r2
 800161e:	468a      	mov	sl, r1
 8001620:	18eb      	adds	r3, r5, r3
 8001622:	2900      	cmp	r1, #0
 8001624:	d028      	beq.n	8001678 <__aeabi_dsub+0x230>
 8001626:	4566      	cmp	r6, ip
 8001628:	d02c      	beq.n	8001684 <__aeabi_dsub+0x23c>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d05b      	beq.n	80016e6 <__aeabi_dsub+0x29e>
 800162e:	2d00      	cmp	r5, #0
 8001630:	d100      	bne.n	8001634 <__aeabi_dsub+0x1ec>
 8001632:	e12c      	b.n	800188e <__aeabi_dsub+0x446>
 8001634:	465b      	mov	r3, fp
 8001636:	4666      	mov	r6, ip
 8001638:	075f      	lsls	r7, r3, #29
 800163a:	08d2      	lsrs	r2, r2, #3
 800163c:	4317      	orrs	r7, r2
 800163e:	08dd      	lsrs	r5, r3, #3
 8001640:	003b      	movs	r3, r7
 8001642:	432b      	orrs	r3, r5
 8001644:	d100      	bne.n	8001648 <__aeabi_dsub+0x200>
 8001646:	e0e2      	b.n	800180e <__aeabi_dsub+0x3c6>
 8001648:	2480      	movs	r4, #128	@ 0x80
 800164a:	0324      	lsls	r4, r4, #12
 800164c:	432c      	orrs	r4, r5
 800164e:	0324      	lsls	r4, r4, #12
 8001650:	4d56      	ldr	r5, [pc, #344]	@ (80017ac <__aeabi_dsub+0x364>)
 8001652:	0b24      	lsrs	r4, r4, #12
 8001654:	e08c      	b.n	8001770 <__aeabi_dsub+0x328>
 8001656:	4659      	mov	r1, fp
 8001658:	4311      	orrs	r1, r2
 800165a:	d100      	bne.n	800165e <__aeabi_dsub+0x216>
 800165c:	e0d5      	b.n	800180a <__aeabi_dsub+0x3c2>
 800165e:	1e59      	subs	r1, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d100      	bne.n	8001666 <__aeabi_dsub+0x21e>
 8001664:	e1b9      	b.n	80019da <__aeabi_dsub+0x592>
 8001666:	42bb      	cmp	r3, r7
 8001668:	d100      	bne.n	800166c <__aeabi_dsub+0x224>
 800166a:	e1b1      	b.n	80019d0 <__aeabi_dsub+0x588>
 800166c:	2701      	movs	r7, #1
 800166e:	000b      	movs	r3, r1
 8001670:	2938      	cmp	r1, #56	@ 0x38
 8001672:	dd00      	ble.n	8001676 <__aeabi_dsub+0x22e>
 8001674:	e740      	b.n	80014f8 <__aeabi_dsub+0xb0>
 8001676:	e72a      	b.n	80014ce <__aeabi_dsub+0x86>
 8001678:	4661      	mov	r1, ip
 800167a:	2701      	movs	r7, #1
 800167c:	4079      	eors	r1, r7
 800167e:	468c      	mov	ip, r1
 8001680:	4566      	cmp	r6, ip
 8001682:	d1d2      	bne.n	800162a <__aeabi_dsub+0x1e2>
 8001684:	2b00      	cmp	r3, #0
 8001686:	d100      	bne.n	800168a <__aeabi_dsub+0x242>
 8001688:	e0c5      	b.n	8001816 <__aeabi_dsub+0x3ce>
 800168a:	2d00      	cmp	r5, #0
 800168c:	d000      	beq.n	8001690 <__aeabi_dsub+0x248>
 800168e:	e155      	b.n	800193c <__aeabi_dsub+0x4f4>
 8001690:	464b      	mov	r3, r9
 8001692:	0025      	movs	r5, r4
 8001694:	4305      	orrs	r5, r0
 8001696:	d100      	bne.n	800169a <__aeabi_dsub+0x252>
 8001698:	e212      	b.n	8001ac0 <__aeabi_dsub+0x678>
 800169a:	1e59      	subs	r1, r3, #1
 800169c:	468c      	mov	ip, r1
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d100      	bne.n	80016a4 <__aeabi_dsub+0x25c>
 80016a2:	e249      	b.n	8001b38 <__aeabi_dsub+0x6f0>
 80016a4:	4d41      	ldr	r5, [pc, #260]	@ (80017ac <__aeabi_dsub+0x364>)
 80016a6:	42ab      	cmp	r3, r5
 80016a8:	d100      	bne.n	80016ac <__aeabi_dsub+0x264>
 80016aa:	e28f      	b.n	8001bcc <__aeabi_dsub+0x784>
 80016ac:	2701      	movs	r7, #1
 80016ae:	2938      	cmp	r1, #56	@ 0x38
 80016b0:	dc11      	bgt.n	80016d6 <__aeabi_dsub+0x28e>
 80016b2:	4663      	mov	r3, ip
 80016b4:	2b1f      	cmp	r3, #31
 80016b6:	dd00      	ble.n	80016ba <__aeabi_dsub+0x272>
 80016b8:	e25b      	b.n	8001b72 <__aeabi_dsub+0x72a>
 80016ba:	4661      	mov	r1, ip
 80016bc:	2320      	movs	r3, #32
 80016be:	0027      	movs	r7, r4
 80016c0:	1a5b      	subs	r3, r3, r1
 80016c2:	0005      	movs	r5, r0
 80016c4:	4098      	lsls	r0, r3
 80016c6:	409f      	lsls	r7, r3
 80016c8:	40cd      	lsrs	r5, r1
 80016ca:	1e43      	subs	r3, r0, #1
 80016cc:	4198      	sbcs	r0, r3
 80016ce:	40cc      	lsrs	r4, r1
 80016d0:	432f      	orrs	r7, r5
 80016d2:	4307      	orrs	r7, r0
 80016d4:	44a3      	add	fp, r4
 80016d6:	18bf      	adds	r7, r7, r2
 80016d8:	4297      	cmp	r7, r2
 80016da:	4192      	sbcs	r2, r2
 80016dc:	4252      	negs	r2, r2
 80016de:	445a      	add	r2, fp
 80016e0:	0014      	movs	r4, r2
 80016e2:	464d      	mov	r5, r9
 80016e4:	e787      	b.n	80015f6 <__aeabi_dsub+0x1ae>
 80016e6:	4f34      	ldr	r7, [pc, #208]	@ (80017b8 <__aeabi_dsub+0x370>)
 80016e8:	1c6b      	adds	r3, r5, #1
 80016ea:	423b      	tst	r3, r7
 80016ec:	d000      	beq.n	80016f0 <__aeabi_dsub+0x2a8>
 80016ee:	e0b6      	b.n	800185e <__aeabi_dsub+0x416>
 80016f0:	4659      	mov	r1, fp
 80016f2:	0023      	movs	r3, r4
 80016f4:	4311      	orrs	r1, r2
 80016f6:	000f      	movs	r7, r1
 80016f8:	4303      	orrs	r3, r0
 80016fa:	2d00      	cmp	r5, #0
 80016fc:	d000      	beq.n	8001700 <__aeabi_dsub+0x2b8>
 80016fe:	e126      	b.n	800194e <__aeabi_dsub+0x506>
 8001700:	2b00      	cmp	r3, #0
 8001702:	d100      	bne.n	8001706 <__aeabi_dsub+0x2be>
 8001704:	e1c0      	b.n	8001a88 <__aeabi_dsub+0x640>
 8001706:	2900      	cmp	r1, #0
 8001708:	d100      	bne.n	800170c <__aeabi_dsub+0x2c4>
 800170a:	e0a1      	b.n	8001850 <__aeabi_dsub+0x408>
 800170c:	1a83      	subs	r3, r0, r2
 800170e:	4698      	mov	r8, r3
 8001710:	465b      	mov	r3, fp
 8001712:	4540      	cmp	r0, r8
 8001714:	41ad      	sbcs	r5, r5
 8001716:	1ae3      	subs	r3, r4, r3
 8001718:	426d      	negs	r5, r5
 800171a:	1b5b      	subs	r3, r3, r5
 800171c:	2580      	movs	r5, #128	@ 0x80
 800171e:	042d      	lsls	r5, r5, #16
 8001720:	422b      	tst	r3, r5
 8001722:	d100      	bne.n	8001726 <__aeabi_dsub+0x2de>
 8001724:	e14b      	b.n	80019be <__aeabi_dsub+0x576>
 8001726:	465b      	mov	r3, fp
 8001728:	1a10      	subs	r0, r2, r0
 800172a:	4282      	cmp	r2, r0
 800172c:	4192      	sbcs	r2, r2
 800172e:	1b1c      	subs	r4, r3, r4
 8001730:	0007      	movs	r7, r0
 8001732:	2601      	movs	r6, #1
 8001734:	4663      	mov	r3, ip
 8001736:	4252      	negs	r2, r2
 8001738:	1aa4      	subs	r4, r4, r2
 800173a:	4327      	orrs	r7, r4
 800173c:	401e      	ands	r6, r3
 800173e:	2f00      	cmp	r7, #0
 8001740:	d100      	bne.n	8001744 <__aeabi_dsub+0x2fc>
 8001742:	e142      	b.n	80019ca <__aeabi_dsub+0x582>
 8001744:	422c      	tst	r4, r5
 8001746:	d100      	bne.n	800174a <__aeabi_dsub+0x302>
 8001748:	e26d      	b.n	8001c26 <__aeabi_dsub+0x7de>
 800174a:	4b19      	ldr	r3, [pc, #100]	@ (80017b0 <__aeabi_dsub+0x368>)
 800174c:	2501      	movs	r5, #1
 800174e:	401c      	ands	r4, r3
 8001750:	e71b      	b.n	800158a <__aeabi_dsub+0x142>
 8001752:	42bd      	cmp	r5, r7
 8001754:	d100      	bne.n	8001758 <__aeabi_dsub+0x310>
 8001756:	e13b      	b.n	80019d0 <__aeabi_dsub+0x588>
 8001758:	2701      	movs	r7, #1
 800175a:	2b38      	cmp	r3, #56	@ 0x38
 800175c:	dd00      	ble.n	8001760 <__aeabi_dsub+0x318>
 800175e:	e745      	b.n	80015ec <__aeabi_dsub+0x1a4>
 8001760:	2780      	movs	r7, #128	@ 0x80
 8001762:	4659      	mov	r1, fp
 8001764:	043f      	lsls	r7, r7, #16
 8001766:	4339      	orrs	r1, r7
 8001768:	468b      	mov	fp, r1
 800176a:	e72a      	b.n	80015c2 <__aeabi_dsub+0x17a>
 800176c:	2400      	movs	r4, #0
 800176e:	2700      	movs	r7, #0
 8001770:	052d      	lsls	r5, r5, #20
 8001772:	4325      	orrs	r5, r4
 8001774:	07f6      	lsls	r6, r6, #31
 8001776:	4335      	orrs	r5, r6
 8001778:	0038      	movs	r0, r7
 800177a:	0029      	movs	r1, r5
 800177c:	b003      	add	sp, #12
 800177e:	bcf0      	pop	{r4, r5, r6, r7}
 8001780:	46bb      	mov	fp, r7
 8001782:	46b2      	mov	sl, r6
 8001784:	46a9      	mov	r9, r5
 8001786:	46a0      	mov	r8, r4
 8001788:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800178a:	077b      	lsls	r3, r7, #29
 800178c:	d004      	beq.n	8001798 <__aeabi_dsub+0x350>
 800178e:	230f      	movs	r3, #15
 8001790:	403b      	ands	r3, r7
 8001792:	2b04      	cmp	r3, #4
 8001794:	d000      	beq.n	8001798 <__aeabi_dsub+0x350>
 8001796:	e6e7      	b.n	8001568 <__aeabi_dsub+0x120>
 8001798:	002b      	movs	r3, r5
 800179a:	08f8      	lsrs	r0, r7, #3
 800179c:	4a03      	ldr	r2, [pc, #12]	@ (80017ac <__aeabi_dsub+0x364>)
 800179e:	0767      	lsls	r7, r4, #29
 80017a0:	4307      	orrs	r7, r0
 80017a2:	08e5      	lsrs	r5, r4, #3
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d100      	bne.n	80017aa <__aeabi_dsub+0x362>
 80017a8:	e74a      	b.n	8001640 <__aeabi_dsub+0x1f8>
 80017aa:	e0a5      	b.n	80018f8 <__aeabi_dsub+0x4b0>
 80017ac:	000007ff 	.word	0x000007ff
 80017b0:	ff7fffff 	.word	0xff7fffff
 80017b4:	fffff801 	.word	0xfffff801
 80017b8:	000007fe 	.word	0x000007fe
 80017bc:	0038      	movs	r0, r7
 80017be:	f000 fab7 	bl	8001d30 <__clzsi2>
 80017c2:	0003      	movs	r3, r0
 80017c4:	3318      	adds	r3, #24
 80017c6:	2b1f      	cmp	r3, #31
 80017c8:	dc00      	bgt.n	80017cc <__aeabi_dsub+0x384>
 80017ca:	e6a7      	b.n	800151c <__aeabi_dsub+0xd4>
 80017cc:	003a      	movs	r2, r7
 80017ce:	3808      	subs	r0, #8
 80017d0:	4082      	lsls	r2, r0
 80017d2:	429d      	cmp	r5, r3
 80017d4:	dd00      	ble.n	80017d8 <__aeabi_dsub+0x390>
 80017d6:	e08a      	b.n	80018ee <__aeabi_dsub+0x4a6>
 80017d8:	1b5b      	subs	r3, r3, r5
 80017da:	1c58      	adds	r0, r3, #1
 80017dc:	281f      	cmp	r0, #31
 80017de:	dc00      	bgt.n	80017e2 <__aeabi_dsub+0x39a>
 80017e0:	e1d8      	b.n	8001b94 <__aeabi_dsub+0x74c>
 80017e2:	0017      	movs	r7, r2
 80017e4:	3b1f      	subs	r3, #31
 80017e6:	40df      	lsrs	r7, r3
 80017e8:	2820      	cmp	r0, #32
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dsub+0x3b0>
 80017ec:	2340      	movs	r3, #64	@ 0x40
 80017ee:	1a1b      	subs	r3, r3, r0
 80017f0:	409a      	lsls	r2, r3
 80017f2:	1e53      	subs	r3, r2, #1
 80017f4:	419a      	sbcs	r2, r3
 80017f6:	4317      	orrs	r7, r2
 80017f8:	2500      	movs	r5, #0
 80017fa:	2f00      	cmp	r7, #0
 80017fc:	d100      	bne.n	8001800 <__aeabi_dsub+0x3b8>
 80017fe:	e0e5      	b.n	80019cc <__aeabi_dsub+0x584>
 8001800:	077b      	lsls	r3, r7, #29
 8001802:	d000      	beq.n	8001806 <__aeabi_dsub+0x3be>
 8001804:	e6ab      	b.n	800155e <__aeabi_dsub+0x116>
 8001806:	002c      	movs	r4, r5
 8001808:	e7c6      	b.n	8001798 <__aeabi_dsub+0x350>
 800180a:	08c0      	lsrs	r0, r0, #3
 800180c:	e7c6      	b.n	800179c <__aeabi_dsub+0x354>
 800180e:	2700      	movs	r7, #0
 8001810:	2400      	movs	r4, #0
 8001812:	4dd1      	ldr	r5, [pc, #836]	@ (8001b58 <__aeabi_dsub+0x710>)
 8001814:	e7ac      	b.n	8001770 <__aeabi_dsub+0x328>
 8001816:	4fd1      	ldr	r7, [pc, #836]	@ (8001b5c <__aeabi_dsub+0x714>)
 8001818:	1c6b      	adds	r3, r5, #1
 800181a:	423b      	tst	r3, r7
 800181c:	d171      	bne.n	8001902 <__aeabi_dsub+0x4ba>
 800181e:	0023      	movs	r3, r4
 8001820:	4303      	orrs	r3, r0
 8001822:	2d00      	cmp	r5, #0
 8001824:	d000      	beq.n	8001828 <__aeabi_dsub+0x3e0>
 8001826:	e14e      	b.n	8001ac6 <__aeabi_dsub+0x67e>
 8001828:	4657      	mov	r7, sl
 800182a:	2b00      	cmp	r3, #0
 800182c:	d100      	bne.n	8001830 <__aeabi_dsub+0x3e8>
 800182e:	e1b5      	b.n	8001b9c <__aeabi_dsub+0x754>
 8001830:	2f00      	cmp	r7, #0
 8001832:	d00d      	beq.n	8001850 <__aeabi_dsub+0x408>
 8001834:	1883      	adds	r3, r0, r2
 8001836:	4283      	cmp	r3, r0
 8001838:	4180      	sbcs	r0, r0
 800183a:	445c      	add	r4, fp
 800183c:	4240      	negs	r0, r0
 800183e:	1824      	adds	r4, r4, r0
 8001840:	0222      	lsls	r2, r4, #8
 8001842:	d500      	bpl.n	8001846 <__aeabi_dsub+0x3fe>
 8001844:	e1c8      	b.n	8001bd8 <__aeabi_dsub+0x790>
 8001846:	001f      	movs	r7, r3
 8001848:	4698      	mov	r8, r3
 800184a:	4327      	orrs	r7, r4
 800184c:	d100      	bne.n	8001850 <__aeabi_dsub+0x408>
 800184e:	e0bc      	b.n	80019ca <__aeabi_dsub+0x582>
 8001850:	4643      	mov	r3, r8
 8001852:	0767      	lsls	r7, r4, #29
 8001854:	08db      	lsrs	r3, r3, #3
 8001856:	431f      	orrs	r7, r3
 8001858:	08e5      	lsrs	r5, r4, #3
 800185a:	2300      	movs	r3, #0
 800185c:	e04c      	b.n	80018f8 <__aeabi_dsub+0x4b0>
 800185e:	1a83      	subs	r3, r0, r2
 8001860:	4698      	mov	r8, r3
 8001862:	465b      	mov	r3, fp
 8001864:	4540      	cmp	r0, r8
 8001866:	41bf      	sbcs	r7, r7
 8001868:	1ae3      	subs	r3, r4, r3
 800186a:	427f      	negs	r7, r7
 800186c:	1bdb      	subs	r3, r3, r7
 800186e:	021f      	lsls	r7, r3, #8
 8001870:	d47c      	bmi.n	800196c <__aeabi_dsub+0x524>
 8001872:	4647      	mov	r7, r8
 8001874:	431f      	orrs	r7, r3
 8001876:	d100      	bne.n	800187a <__aeabi_dsub+0x432>
 8001878:	e0a6      	b.n	80019c8 <__aeabi_dsub+0x580>
 800187a:	001c      	movs	r4, r3
 800187c:	4647      	mov	r7, r8
 800187e:	e645      	b.n	800150c <__aeabi_dsub+0xc4>
 8001880:	4cb7      	ldr	r4, [pc, #732]	@ (8001b60 <__aeabi_dsub+0x718>)
 8001882:	1aed      	subs	r5, r5, r3
 8001884:	4014      	ands	r4, r2
 8001886:	077b      	lsls	r3, r7, #29
 8001888:	d000      	beq.n	800188c <__aeabi_dsub+0x444>
 800188a:	e780      	b.n	800178e <__aeabi_dsub+0x346>
 800188c:	e784      	b.n	8001798 <__aeabi_dsub+0x350>
 800188e:	464b      	mov	r3, r9
 8001890:	0025      	movs	r5, r4
 8001892:	4305      	orrs	r5, r0
 8001894:	d066      	beq.n	8001964 <__aeabi_dsub+0x51c>
 8001896:	1e5f      	subs	r7, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d100      	bne.n	800189e <__aeabi_dsub+0x456>
 800189c:	e0fc      	b.n	8001a98 <__aeabi_dsub+0x650>
 800189e:	4dae      	ldr	r5, [pc, #696]	@ (8001b58 <__aeabi_dsub+0x710>)
 80018a0:	42ab      	cmp	r3, r5
 80018a2:	d100      	bne.n	80018a6 <__aeabi_dsub+0x45e>
 80018a4:	e15e      	b.n	8001b64 <__aeabi_dsub+0x71c>
 80018a6:	4666      	mov	r6, ip
 80018a8:	2f38      	cmp	r7, #56	@ 0x38
 80018aa:	dc00      	bgt.n	80018ae <__aeabi_dsub+0x466>
 80018ac:	e0b4      	b.n	8001a18 <__aeabi_dsub+0x5d0>
 80018ae:	2001      	movs	r0, #1
 80018b0:	1a17      	subs	r7, r2, r0
 80018b2:	42ba      	cmp	r2, r7
 80018b4:	4192      	sbcs	r2, r2
 80018b6:	465b      	mov	r3, fp
 80018b8:	4252      	negs	r2, r2
 80018ba:	464d      	mov	r5, r9
 80018bc:	1a9c      	subs	r4, r3, r2
 80018be:	e620      	b.n	8001502 <__aeabi_dsub+0xba>
 80018c0:	0767      	lsls	r7, r4, #29
 80018c2:	08c0      	lsrs	r0, r0, #3
 80018c4:	4307      	orrs	r7, r0
 80018c6:	08e5      	lsrs	r5, r4, #3
 80018c8:	e6ba      	b.n	8001640 <__aeabi_dsub+0x1f8>
 80018ca:	001f      	movs	r7, r3
 80018cc:	4659      	mov	r1, fp
 80018ce:	3f20      	subs	r7, #32
 80018d0:	40f9      	lsrs	r1, r7
 80018d2:	000f      	movs	r7, r1
 80018d4:	2b20      	cmp	r3, #32
 80018d6:	d005      	beq.n	80018e4 <__aeabi_dsub+0x49c>
 80018d8:	2140      	movs	r1, #64	@ 0x40
 80018da:	1acb      	subs	r3, r1, r3
 80018dc:	4659      	mov	r1, fp
 80018de:	4099      	lsls	r1, r3
 80018e0:	430a      	orrs	r2, r1
 80018e2:	4692      	mov	sl, r2
 80018e4:	4653      	mov	r3, sl
 80018e6:	1e5a      	subs	r2, r3, #1
 80018e8:	4193      	sbcs	r3, r2
 80018ea:	431f      	orrs	r7, r3
 80018ec:	e604      	b.n	80014f8 <__aeabi_dsub+0xb0>
 80018ee:	1aeb      	subs	r3, r5, r3
 80018f0:	4d9b      	ldr	r5, [pc, #620]	@ (8001b60 <__aeabi_dsub+0x718>)
 80018f2:	4015      	ands	r5, r2
 80018f4:	076f      	lsls	r7, r5, #29
 80018f6:	08ed      	lsrs	r5, r5, #3
 80018f8:	032c      	lsls	r4, r5, #12
 80018fa:	055d      	lsls	r5, r3, #21
 80018fc:	0b24      	lsrs	r4, r4, #12
 80018fe:	0d6d      	lsrs	r5, r5, #21
 8001900:	e736      	b.n	8001770 <__aeabi_dsub+0x328>
 8001902:	4d95      	ldr	r5, [pc, #596]	@ (8001b58 <__aeabi_dsub+0x710>)
 8001904:	42ab      	cmp	r3, r5
 8001906:	d100      	bne.n	800190a <__aeabi_dsub+0x4c2>
 8001908:	e0d6      	b.n	8001ab8 <__aeabi_dsub+0x670>
 800190a:	1882      	adds	r2, r0, r2
 800190c:	0021      	movs	r1, r4
 800190e:	4282      	cmp	r2, r0
 8001910:	4180      	sbcs	r0, r0
 8001912:	4459      	add	r1, fp
 8001914:	4240      	negs	r0, r0
 8001916:	1808      	adds	r0, r1, r0
 8001918:	07c7      	lsls	r7, r0, #31
 800191a:	0852      	lsrs	r2, r2, #1
 800191c:	4317      	orrs	r7, r2
 800191e:	0844      	lsrs	r4, r0, #1
 8001920:	0752      	lsls	r2, r2, #29
 8001922:	d400      	bmi.n	8001926 <__aeabi_dsub+0x4de>
 8001924:	e185      	b.n	8001c32 <__aeabi_dsub+0x7ea>
 8001926:	220f      	movs	r2, #15
 8001928:	001d      	movs	r5, r3
 800192a:	403a      	ands	r2, r7
 800192c:	2a04      	cmp	r2, #4
 800192e:	d000      	beq.n	8001932 <__aeabi_dsub+0x4ea>
 8001930:	e61a      	b.n	8001568 <__aeabi_dsub+0x120>
 8001932:	08ff      	lsrs	r7, r7, #3
 8001934:	0764      	lsls	r4, r4, #29
 8001936:	4327      	orrs	r7, r4
 8001938:	0905      	lsrs	r5, r0, #4
 800193a:	e7dd      	b.n	80018f8 <__aeabi_dsub+0x4b0>
 800193c:	465b      	mov	r3, fp
 800193e:	08d2      	lsrs	r2, r2, #3
 8001940:	075f      	lsls	r7, r3, #29
 8001942:	4317      	orrs	r7, r2
 8001944:	08dd      	lsrs	r5, r3, #3
 8001946:	e67b      	b.n	8001640 <__aeabi_dsub+0x1f8>
 8001948:	2700      	movs	r7, #0
 800194a:	2400      	movs	r4, #0
 800194c:	e710      	b.n	8001770 <__aeabi_dsub+0x328>
 800194e:	2b00      	cmp	r3, #0
 8001950:	d000      	beq.n	8001954 <__aeabi_dsub+0x50c>
 8001952:	e0d6      	b.n	8001b02 <__aeabi_dsub+0x6ba>
 8001954:	2900      	cmp	r1, #0
 8001956:	d000      	beq.n	800195a <__aeabi_dsub+0x512>
 8001958:	e12f      	b.n	8001bba <__aeabi_dsub+0x772>
 800195a:	2480      	movs	r4, #128	@ 0x80
 800195c:	2600      	movs	r6, #0
 800195e:	4d7e      	ldr	r5, [pc, #504]	@ (8001b58 <__aeabi_dsub+0x710>)
 8001960:	0324      	lsls	r4, r4, #12
 8001962:	e705      	b.n	8001770 <__aeabi_dsub+0x328>
 8001964:	4666      	mov	r6, ip
 8001966:	465c      	mov	r4, fp
 8001968:	08d0      	lsrs	r0, r2, #3
 800196a:	e717      	b.n	800179c <__aeabi_dsub+0x354>
 800196c:	465b      	mov	r3, fp
 800196e:	1a17      	subs	r7, r2, r0
 8001970:	42ba      	cmp	r2, r7
 8001972:	4192      	sbcs	r2, r2
 8001974:	1b1c      	subs	r4, r3, r4
 8001976:	2601      	movs	r6, #1
 8001978:	4663      	mov	r3, ip
 800197a:	4252      	negs	r2, r2
 800197c:	1aa4      	subs	r4, r4, r2
 800197e:	401e      	ands	r6, r3
 8001980:	e5c4      	b.n	800150c <__aeabi_dsub+0xc4>
 8001982:	1883      	adds	r3, r0, r2
 8001984:	4283      	cmp	r3, r0
 8001986:	4180      	sbcs	r0, r0
 8001988:	445c      	add	r4, fp
 800198a:	4240      	negs	r0, r0
 800198c:	1825      	adds	r5, r4, r0
 800198e:	022a      	lsls	r2, r5, #8
 8001990:	d400      	bmi.n	8001994 <__aeabi_dsub+0x54c>
 8001992:	e0da      	b.n	8001b4a <__aeabi_dsub+0x702>
 8001994:	4a72      	ldr	r2, [pc, #456]	@ (8001b60 <__aeabi_dsub+0x718>)
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	4015      	ands	r5, r2
 800199a:	07ea      	lsls	r2, r5, #31
 800199c:	431a      	orrs	r2, r3
 800199e:	0869      	lsrs	r1, r5, #1
 80019a0:	075b      	lsls	r3, r3, #29
 80019a2:	d400      	bmi.n	80019a6 <__aeabi_dsub+0x55e>
 80019a4:	e14a      	b.n	8001c3c <__aeabi_dsub+0x7f4>
 80019a6:	230f      	movs	r3, #15
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dsub+0x568>
 80019ae:	e0fc      	b.n	8001baa <__aeabi_dsub+0x762>
 80019b0:	1d17      	adds	r7, r2, #4
 80019b2:	4297      	cmp	r7, r2
 80019b4:	41a4      	sbcs	r4, r4
 80019b6:	4264      	negs	r4, r4
 80019b8:	2502      	movs	r5, #2
 80019ba:	1864      	adds	r4, r4, r1
 80019bc:	e6ec      	b.n	8001798 <__aeabi_dsub+0x350>
 80019be:	4647      	mov	r7, r8
 80019c0:	001c      	movs	r4, r3
 80019c2:	431f      	orrs	r7, r3
 80019c4:	d000      	beq.n	80019c8 <__aeabi_dsub+0x580>
 80019c6:	e743      	b.n	8001850 <__aeabi_dsub+0x408>
 80019c8:	2600      	movs	r6, #0
 80019ca:	2500      	movs	r5, #0
 80019cc:	2400      	movs	r4, #0
 80019ce:	e6cf      	b.n	8001770 <__aeabi_dsub+0x328>
 80019d0:	08c0      	lsrs	r0, r0, #3
 80019d2:	0767      	lsls	r7, r4, #29
 80019d4:	4307      	orrs	r7, r0
 80019d6:	08e5      	lsrs	r5, r4, #3
 80019d8:	e632      	b.n	8001640 <__aeabi_dsub+0x1f8>
 80019da:	1a87      	subs	r7, r0, r2
 80019dc:	465b      	mov	r3, fp
 80019de:	42b8      	cmp	r0, r7
 80019e0:	4180      	sbcs	r0, r0
 80019e2:	1ae4      	subs	r4, r4, r3
 80019e4:	4240      	negs	r0, r0
 80019e6:	1a24      	subs	r4, r4, r0
 80019e8:	0223      	lsls	r3, r4, #8
 80019ea:	d428      	bmi.n	8001a3e <__aeabi_dsub+0x5f6>
 80019ec:	0763      	lsls	r3, r4, #29
 80019ee:	08ff      	lsrs	r7, r7, #3
 80019f0:	431f      	orrs	r7, r3
 80019f2:	08e5      	lsrs	r5, r4, #3
 80019f4:	2301      	movs	r3, #1
 80019f6:	e77f      	b.n	80018f8 <__aeabi_dsub+0x4b0>
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d100      	bne.n	80019fe <__aeabi_dsub+0x5b6>
 80019fc:	e673      	b.n	80016e6 <__aeabi_dsub+0x29e>
 80019fe:	464b      	mov	r3, r9
 8001a00:	1b5f      	subs	r7, r3, r5
 8001a02:	003b      	movs	r3, r7
 8001a04:	2d00      	cmp	r5, #0
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dsub+0x5c2>
 8001a08:	e742      	b.n	8001890 <__aeabi_dsub+0x448>
 8001a0a:	2f38      	cmp	r7, #56	@ 0x38
 8001a0c:	dd00      	ble.n	8001a10 <__aeabi_dsub+0x5c8>
 8001a0e:	e0ec      	b.n	8001bea <__aeabi_dsub+0x7a2>
 8001a10:	2380      	movs	r3, #128	@ 0x80
 8001a12:	000e      	movs	r6, r1
 8001a14:	041b      	lsls	r3, r3, #16
 8001a16:	431c      	orrs	r4, r3
 8001a18:	2f1f      	cmp	r7, #31
 8001a1a:	dc25      	bgt.n	8001a68 <__aeabi_dsub+0x620>
 8001a1c:	2520      	movs	r5, #32
 8001a1e:	0023      	movs	r3, r4
 8001a20:	1bed      	subs	r5, r5, r7
 8001a22:	0001      	movs	r1, r0
 8001a24:	40a8      	lsls	r0, r5
 8001a26:	40ab      	lsls	r3, r5
 8001a28:	40f9      	lsrs	r1, r7
 8001a2a:	1e45      	subs	r5, r0, #1
 8001a2c:	41a8      	sbcs	r0, r5
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	40fc      	lsrs	r4, r7
 8001a32:	4318      	orrs	r0, r3
 8001a34:	465b      	mov	r3, fp
 8001a36:	1b1b      	subs	r3, r3, r4
 8001a38:	469b      	mov	fp, r3
 8001a3a:	e739      	b.n	80018b0 <__aeabi_dsub+0x468>
 8001a3c:	4666      	mov	r6, ip
 8001a3e:	2501      	movs	r5, #1
 8001a40:	e562      	b.n	8001508 <__aeabi_dsub+0xc0>
 8001a42:	001f      	movs	r7, r3
 8001a44:	4659      	mov	r1, fp
 8001a46:	3f20      	subs	r7, #32
 8001a48:	40f9      	lsrs	r1, r7
 8001a4a:	468c      	mov	ip, r1
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d005      	beq.n	8001a5c <__aeabi_dsub+0x614>
 8001a50:	2740      	movs	r7, #64	@ 0x40
 8001a52:	4659      	mov	r1, fp
 8001a54:	1afb      	subs	r3, r7, r3
 8001a56:	4099      	lsls	r1, r3
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	4692      	mov	sl, r2
 8001a5c:	4657      	mov	r7, sl
 8001a5e:	1e7b      	subs	r3, r7, #1
 8001a60:	419f      	sbcs	r7, r3
 8001a62:	4663      	mov	r3, ip
 8001a64:	431f      	orrs	r7, r3
 8001a66:	e5c1      	b.n	80015ec <__aeabi_dsub+0x1a4>
 8001a68:	003b      	movs	r3, r7
 8001a6a:	0025      	movs	r5, r4
 8001a6c:	3b20      	subs	r3, #32
 8001a6e:	40dd      	lsrs	r5, r3
 8001a70:	2f20      	cmp	r7, #32
 8001a72:	d004      	beq.n	8001a7e <__aeabi_dsub+0x636>
 8001a74:	2340      	movs	r3, #64	@ 0x40
 8001a76:	1bdb      	subs	r3, r3, r7
 8001a78:	409c      	lsls	r4, r3
 8001a7a:	4320      	orrs	r0, r4
 8001a7c:	4680      	mov	r8, r0
 8001a7e:	4640      	mov	r0, r8
 8001a80:	1e43      	subs	r3, r0, #1
 8001a82:	4198      	sbcs	r0, r3
 8001a84:	4328      	orrs	r0, r5
 8001a86:	e713      	b.n	80018b0 <__aeabi_dsub+0x468>
 8001a88:	2900      	cmp	r1, #0
 8001a8a:	d09d      	beq.n	80019c8 <__aeabi_dsub+0x580>
 8001a8c:	2601      	movs	r6, #1
 8001a8e:	4663      	mov	r3, ip
 8001a90:	465c      	mov	r4, fp
 8001a92:	4690      	mov	r8, r2
 8001a94:	401e      	ands	r6, r3
 8001a96:	e6db      	b.n	8001850 <__aeabi_dsub+0x408>
 8001a98:	1a17      	subs	r7, r2, r0
 8001a9a:	465b      	mov	r3, fp
 8001a9c:	42ba      	cmp	r2, r7
 8001a9e:	4192      	sbcs	r2, r2
 8001aa0:	1b1c      	subs	r4, r3, r4
 8001aa2:	4252      	negs	r2, r2
 8001aa4:	1aa4      	subs	r4, r4, r2
 8001aa6:	0223      	lsls	r3, r4, #8
 8001aa8:	d4c8      	bmi.n	8001a3c <__aeabi_dsub+0x5f4>
 8001aaa:	0763      	lsls	r3, r4, #29
 8001aac:	08ff      	lsrs	r7, r7, #3
 8001aae:	431f      	orrs	r7, r3
 8001ab0:	4666      	mov	r6, ip
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	08e5      	lsrs	r5, r4, #3
 8001ab6:	e71f      	b.n	80018f8 <__aeabi_dsub+0x4b0>
 8001ab8:	001d      	movs	r5, r3
 8001aba:	2400      	movs	r4, #0
 8001abc:	2700      	movs	r7, #0
 8001abe:	e657      	b.n	8001770 <__aeabi_dsub+0x328>
 8001ac0:	465c      	mov	r4, fp
 8001ac2:	08d0      	lsrs	r0, r2, #3
 8001ac4:	e66a      	b.n	800179c <__aeabi_dsub+0x354>
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x684>
 8001aca:	e737      	b.n	800193c <__aeabi_dsub+0x4f4>
 8001acc:	4653      	mov	r3, sl
 8001ace:	08c0      	lsrs	r0, r0, #3
 8001ad0:	0767      	lsls	r7, r4, #29
 8001ad2:	4307      	orrs	r7, r0
 8001ad4:	08e5      	lsrs	r5, r4, #3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dsub+0x694>
 8001ada:	e5b1      	b.n	8001640 <__aeabi_dsub+0x1f8>
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	031b      	lsls	r3, r3, #12
 8001ae0:	421d      	tst	r5, r3
 8001ae2:	d008      	beq.n	8001af6 <__aeabi_dsub+0x6ae>
 8001ae4:	4659      	mov	r1, fp
 8001ae6:	08c8      	lsrs	r0, r1, #3
 8001ae8:	4218      	tst	r0, r3
 8001aea:	d104      	bne.n	8001af6 <__aeabi_dsub+0x6ae>
 8001aec:	08d2      	lsrs	r2, r2, #3
 8001aee:	0749      	lsls	r1, r1, #29
 8001af0:	430a      	orrs	r2, r1
 8001af2:	0017      	movs	r7, r2
 8001af4:	0005      	movs	r5, r0
 8001af6:	0f7b      	lsrs	r3, r7, #29
 8001af8:	00ff      	lsls	r7, r7, #3
 8001afa:	08ff      	lsrs	r7, r7, #3
 8001afc:	075b      	lsls	r3, r3, #29
 8001afe:	431f      	orrs	r7, r3
 8001b00:	e59e      	b.n	8001640 <__aeabi_dsub+0x1f8>
 8001b02:	08c0      	lsrs	r0, r0, #3
 8001b04:	0763      	lsls	r3, r4, #29
 8001b06:	4318      	orrs	r0, r3
 8001b08:	08e5      	lsrs	r5, r4, #3
 8001b0a:	2900      	cmp	r1, #0
 8001b0c:	d053      	beq.n	8001bb6 <__aeabi_dsub+0x76e>
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	031b      	lsls	r3, r3, #12
 8001b12:	421d      	tst	r5, r3
 8001b14:	d00a      	beq.n	8001b2c <__aeabi_dsub+0x6e4>
 8001b16:	4659      	mov	r1, fp
 8001b18:	08cc      	lsrs	r4, r1, #3
 8001b1a:	421c      	tst	r4, r3
 8001b1c:	d106      	bne.n	8001b2c <__aeabi_dsub+0x6e4>
 8001b1e:	2601      	movs	r6, #1
 8001b20:	4663      	mov	r3, ip
 8001b22:	0025      	movs	r5, r4
 8001b24:	08d0      	lsrs	r0, r2, #3
 8001b26:	0749      	lsls	r1, r1, #29
 8001b28:	4308      	orrs	r0, r1
 8001b2a:	401e      	ands	r6, r3
 8001b2c:	0f47      	lsrs	r7, r0, #29
 8001b2e:	00c0      	lsls	r0, r0, #3
 8001b30:	08c0      	lsrs	r0, r0, #3
 8001b32:	077f      	lsls	r7, r7, #29
 8001b34:	4307      	orrs	r7, r0
 8001b36:	e583      	b.n	8001640 <__aeabi_dsub+0x1f8>
 8001b38:	1883      	adds	r3, r0, r2
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	4192      	sbcs	r2, r2
 8001b3e:	445c      	add	r4, fp
 8001b40:	4252      	negs	r2, r2
 8001b42:	18a5      	adds	r5, r4, r2
 8001b44:	022a      	lsls	r2, r5, #8
 8001b46:	d500      	bpl.n	8001b4a <__aeabi_dsub+0x702>
 8001b48:	e724      	b.n	8001994 <__aeabi_dsub+0x54c>
 8001b4a:	076f      	lsls	r7, r5, #29
 8001b4c:	08db      	lsrs	r3, r3, #3
 8001b4e:	431f      	orrs	r7, r3
 8001b50:	08ed      	lsrs	r5, r5, #3
 8001b52:	2301      	movs	r3, #1
 8001b54:	e6d0      	b.n	80018f8 <__aeabi_dsub+0x4b0>
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	000007ff 	.word	0x000007ff
 8001b5c:	000007fe 	.word	0x000007fe
 8001b60:	ff7fffff 	.word	0xff7fffff
 8001b64:	465b      	mov	r3, fp
 8001b66:	08d2      	lsrs	r2, r2, #3
 8001b68:	075f      	lsls	r7, r3, #29
 8001b6a:	4666      	mov	r6, ip
 8001b6c:	4317      	orrs	r7, r2
 8001b6e:	08dd      	lsrs	r5, r3, #3
 8001b70:	e566      	b.n	8001640 <__aeabi_dsub+0x1f8>
 8001b72:	0025      	movs	r5, r4
 8001b74:	3b20      	subs	r3, #32
 8001b76:	40dd      	lsrs	r5, r3
 8001b78:	4663      	mov	r3, ip
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	d005      	beq.n	8001b8a <__aeabi_dsub+0x742>
 8001b7e:	2340      	movs	r3, #64	@ 0x40
 8001b80:	4661      	mov	r1, ip
 8001b82:	1a5b      	subs	r3, r3, r1
 8001b84:	409c      	lsls	r4, r3
 8001b86:	4320      	orrs	r0, r4
 8001b88:	4680      	mov	r8, r0
 8001b8a:	4647      	mov	r7, r8
 8001b8c:	1e7b      	subs	r3, r7, #1
 8001b8e:	419f      	sbcs	r7, r3
 8001b90:	432f      	orrs	r7, r5
 8001b92:	e5a0      	b.n	80016d6 <__aeabi_dsub+0x28e>
 8001b94:	2120      	movs	r1, #32
 8001b96:	2700      	movs	r7, #0
 8001b98:	1a09      	subs	r1, r1, r0
 8001b9a:	e4d2      	b.n	8001542 <__aeabi_dsub+0xfa>
 8001b9c:	2f00      	cmp	r7, #0
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x75a>
 8001ba0:	e713      	b.n	80019ca <__aeabi_dsub+0x582>
 8001ba2:	465c      	mov	r4, fp
 8001ba4:	0017      	movs	r7, r2
 8001ba6:	2500      	movs	r5, #0
 8001ba8:	e5f6      	b.n	8001798 <__aeabi_dsub+0x350>
 8001baa:	08d7      	lsrs	r7, r2, #3
 8001bac:	0749      	lsls	r1, r1, #29
 8001bae:	2302      	movs	r3, #2
 8001bb0:	430f      	orrs	r7, r1
 8001bb2:	092d      	lsrs	r5, r5, #4
 8001bb4:	e6a0      	b.n	80018f8 <__aeabi_dsub+0x4b0>
 8001bb6:	0007      	movs	r7, r0
 8001bb8:	e542      	b.n	8001640 <__aeabi_dsub+0x1f8>
 8001bba:	465b      	mov	r3, fp
 8001bbc:	2601      	movs	r6, #1
 8001bbe:	075f      	lsls	r7, r3, #29
 8001bc0:	08dd      	lsrs	r5, r3, #3
 8001bc2:	4663      	mov	r3, ip
 8001bc4:	08d2      	lsrs	r2, r2, #3
 8001bc6:	4317      	orrs	r7, r2
 8001bc8:	401e      	ands	r6, r3
 8001bca:	e539      	b.n	8001640 <__aeabi_dsub+0x1f8>
 8001bcc:	465b      	mov	r3, fp
 8001bce:	08d2      	lsrs	r2, r2, #3
 8001bd0:	075f      	lsls	r7, r3, #29
 8001bd2:	4317      	orrs	r7, r2
 8001bd4:	08dd      	lsrs	r5, r3, #3
 8001bd6:	e533      	b.n	8001640 <__aeabi_dsub+0x1f8>
 8001bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c54 <__aeabi_dsub+0x80c>)
 8001bda:	08db      	lsrs	r3, r3, #3
 8001bdc:	4022      	ands	r2, r4
 8001bde:	0757      	lsls	r7, r2, #29
 8001be0:	0252      	lsls	r2, r2, #9
 8001be2:	2501      	movs	r5, #1
 8001be4:	431f      	orrs	r7, r3
 8001be6:	0b14      	lsrs	r4, r2, #12
 8001be8:	e5c2      	b.n	8001770 <__aeabi_dsub+0x328>
 8001bea:	000e      	movs	r6, r1
 8001bec:	2001      	movs	r0, #1
 8001bee:	e65f      	b.n	80018b0 <__aeabi_dsub+0x468>
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00d      	beq.n	8001c10 <__aeabi_dsub+0x7c8>
 8001bf4:	464b      	mov	r3, r9
 8001bf6:	1b5b      	subs	r3, r3, r5
 8001bf8:	469c      	mov	ip, r3
 8001bfa:	2d00      	cmp	r5, #0
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dsub+0x7b8>
 8001bfe:	e548      	b.n	8001692 <__aeabi_dsub+0x24a>
 8001c00:	2701      	movs	r7, #1
 8001c02:	2b38      	cmp	r3, #56	@ 0x38
 8001c04:	dd00      	ble.n	8001c08 <__aeabi_dsub+0x7c0>
 8001c06:	e566      	b.n	80016d6 <__aeabi_dsub+0x28e>
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	041b      	lsls	r3, r3, #16
 8001c0c:	431c      	orrs	r4, r3
 8001c0e:	e550      	b.n	80016b2 <__aeabi_dsub+0x26a>
 8001c10:	1c6b      	adds	r3, r5, #1
 8001c12:	4d11      	ldr	r5, [pc, #68]	@ (8001c58 <__aeabi_dsub+0x810>)
 8001c14:	422b      	tst	r3, r5
 8001c16:	d000      	beq.n	8001c1a <__aeabi_dsub+0x7d2>
 8001c18:	e673      	b.n	8001902 <__aeabi_dsub+0x4ba>
 8001c1a:	4659      	mov	r1, fp
 8001c1c:	0023      	movs	r3, r4
 8001c1e:	4311      	orrs	r1, r2
 8001c20:	468a      	mov	sl, r1
 8001c22:	4303      	orrs	r3, r0
 8001c24:	e600      	b.n	8001828 <__aeabi_dsub+0x3e0>
 8001c26:	0767      	lsls	r7, r4, #29
 8001c28:	08c0      	lsrs	r0, r0, #3
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	4307      	orrs	r7, r0
 8001c2e:	08e5      	lsrs	r5, r4, #3
 8001c30:	e662      	b.n	80018f8 <__aeabi_dsub+0x4b0>
 8001c32:	0764      	lsls	r4, r4, #29
 8001c34:	08ff      	lsrs	r7, r7, #3
 8001c36:	4327      	orrs	r7, r4
 8001c38:	0905      	lsrs	r5, r0, #4
 8001c3a:	e65d      	b.n	80018f8 <__aeabi_dsub+0x4b0>
 8001c3c:	08d2      	lsrs	r2, r2, #3
 8001c3e:	0749      	lsls	r1, r1, #29
 8001c40:	4311      	orrs	r1, r2
 8001c42:	000f      	movs	r7, r1
 8001c44:	2302      	movs	r3, #2
 8001c46:	092d      	lsrs	r5, r5, #4
 8001c48:	e656      	b.n	80018f8 <__aeabi_dsub+0x4b0>
 8001c4a:	0007      	movs	r7, r0
 8001c4c:	e5a4      	b.n	8001798 <__aeabi_dsub+0x350>
 8001c4e:	0038      	movs	r0, r7
 8001c50:	e48f      	b.n	8001572 <__aeabi_dsub+0x12a>
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	ff7fffff 	.word	0xff7fffff
 8001c58:	000007fe 	.word	0x000007fe

08001c5c <__aeabi_d2iz>:
 8001c5c:	000b      	movs	r3, r1
 8001c5e:	0002      	movs	r2, r0
 8001c60:	b570      	push	{r4, r5, r6, lr}
 8001c62:	4d16      	ldr	r5, [pc, #88]	@ (8001cbc <__aeabi_d2iz+0x60>)
 8001c64:	030c      	lsls	r4, r1, #12
 8001c66:	b082      	sub	sp, #8
 8001c68:	0049      	lsls	r1, r1, #1
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	9200      	str	r2, [sp, #0]
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	0b24      	lsrs	r4, r4, #12
 8001c72:	0d49      	lsrs	r1, r1, #21
 8001c74:	0fde      	lsrs	r6, r3, #31
 8001c76:	42a9      	cmp	r1, r5
 8001c78:	dd04      	ble.n	8001c84 <__aeabi_d2iz+0x28>
 8001c7a:	4811      	ldr	r0, [pc, #68]	@ (8001cc0 <__aeabi_d2iz+0x64>)
 8001c7c:	4281      	cmp	r1, r0
 8001c7e:	dd03      	ble.n	8001c88 <__aeabi_d2iz+0x2c>
 8001c80:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <__aeabi_d2iz+0x68>)
 8001c82:	18f0      	adds	r0, r6, r3
 8001c84:	b002      	add	sp, #8
 8001c86:	bd70      	pop	{r4, r5, r6, pc}
 8001c88:	2080      	movs	r0, #128	@ 0x80
 8001c8a:	0340      	lsls	r0, r0, #13
 8001c8c:	4320      	orrs	r0, r4
 8001c8e:	4c0e      	ldr	r4, [pc, #56]	@ (8001cc8 <__aeabi_d2iz+0x6c>)
 8001c90:	1a64      	subs	r4, r4, r1
 8001c92:	2c1f      	cmp	r4, #31
 8001c94:	dd08      	ble.n	8001ca8 <__aeabi_d2iz+0x4c>
 8001c96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ccc <__aeabi_d2iz+0x70>)
 8001c98:	1a5b      	subs	r3, r3, r1
 8001c9a:	40d8      	lsrs	r0, r3
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	4258      	negs	r0, r3
 8001ca0:	2e00      	cmp	r6, #0
 8001ca2:	d1ef      	bne.n	8001c84 <__aeabi_d2iz+0x28>
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	e7ed      	b.n	8001c84 <__aeabi_d2iz+0x28>
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <__aeabi_d2iz+0x74>)
 8001caa:	9a00      	ldr	r2, [sp, #0]
 8001cac:	469c      	mov	ip, r3
 8001cae:	0003      	movs	r3, r0
 8001cb0:	4461      	add	r1, ip
 8001cb2:	408b      	lsls	r3, r1
 8001cb4:	40e2      	lsrs	r2, r4
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	e7f1      	b.n	8001c9e <__aeabi_d2iz+0x42>
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	000003fe 	.word	0x000003fe
 8001cc0:	0000041d 	.word	0x0000041d
 8001cc4:	7fffffff 	.word	0x7fffffff
 8001cc8:	00000433 	.word	0x00000433
 8001ccc:	00000413 	.word	0x00000413
 8001cd0:	fffffbed 	.word	0xfffffbed

08001cd4 <__aeabi_i2d>:
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d016      	beq.n	8001d08 <__aeabi_i2d+0x34>
 8001cda:	17c3      	asrs	r3, r0, #31
 8001cdc:	18c5      	adds	r5, r0, r3
 8001cde:	405d      	eors	r5, r3
 8001ce0:	0fc4      	lsrs	r4, r0, #31
 8001ce2:	0028      	movs	r0, r5
 8001ce4:	f000 f824 	bl	8001d30 <__clzsi2>
 8001ce8:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <__aeabi_i2d+0x58>)
 8001cea:	1a1b      	subs	r3, r3, r0
 8001cec:	055b      	lsls	r3, r3, #21
 8001cee:	0d5b      	lsrs	r3, r3, #21
 8001cf0:	280a      	cmp	r0, #10
 8001cf2:	dc14      	bgt.n	8001d1e <__aeabi_i2d+0x4a>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	002e      	movs	r6, r5
 8001cf8:	3215      	adds	r2, #21
 8001cfa:	4096      	lsls	r6, r2
 8001cfc:	220b      	movs	r2, #11
 8001cfe:	1a12      	subs	r2, r2, r0
 8001d00:	40d5      	lsrs	r5, r2
 8001d02:	032d      	lsls	r5, r5, #12
 8001d04:	0b2d      	lsrs	r5, r5, #12
 8001d06:	e003      	b.n	8001d10 <__aeabi_i2d+0x3c>
 8001d08:	2400      	movs	r4, #0
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	2500      	movs	r5, #0
 8001d0e:	2600      	movs	r6, #0
 8001d10:	051b      	lsls	r3, r3, #20
 8001d12:	432b      	orrs	r3, r5
 8001d14:	07e4      	lsls	r4, r4, #31
 8001d16:	4323      	orrs	r3, r4
 8001d18:	0030      	movs	r0, r6
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	bd70      	pop	{r4, r5, r6, pc}
 8001d1e:	380b      	subs	r0, #11
 8001d20:	4085      	lsls	r5, r0
 8001d22:	032d      	lsls	r5, r5, #12
 8001d24:	2600      	movs	r6, #0
 8001d26:	0b2d      	lsrs	r5, r5, #12
 8001d28:	e7f2      	b.n	8001d10 <__aeabi_i2d+0x3c>
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	0000041e 	.word	0x0000041e

08001d30 <__clzsi2>:
 8001d30:	211c      	movs	r1, #28
 8001d32:	2301      	movs	r3, #1
 8001d34:	041b      	lsls	r3, r3, #16
 8001d36:	4298      	cmp	r0, r3
 8001d38:	d301      	bcc.n	8001d3e <__clzsi2+0xe>
 8001d3a:	0c00      	lsrs	r0, r0, #16
 8001d3c:	3910      	subs	r1, #16
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	4298      	cmp	r0, r3
 8001d42:	d301      	bcc.n	8001d48 <__clzsi2+0x18>
 8001d44:	0a00      	lsrs	r0, r0, #8
 8001d46:	3908      	subs	r1, #8
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	4298      	cmp	r0, r3
 8001d4c:	d301      	bcc.n	8001d52 <__clzsi2+0x22>
 8001d4e:	0900      	lsrs	r0, r0, #4
 8001d50:	3904      	subs	r1, #4
 8001d52:	a202      	add	r2, pc, #8	@ (adr r2, 8001d5c <__clzsi2+0x2c>)
 8001d54:	5c10      	ldrb	r0, [r2, r0]
 8001d56:	1840      	adds	r0, r0, r1
 8001d58:	4770      	bx	lr
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	02020304 	.word	0x02020304
 8001d60:	01010101 	.word	0x01010101
	...

08001d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d72:	f000 fa5f 	bl	8002234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d76:	f000 f85b 	bl	8001e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d7a:	f000 f92f 	bl	8001fdc <MX_GPIO_Init>
  MX_DMA_Init();
 8001d7e:	f000 f90f 	bl	8001fa0 <MX_DMA_Init>
  MX_TIM6_Init();
 8001d82:	f000 f8d3 	bl	8001f2c <MX_TIM6_Init>
  MX_DAC_Init();
 8001d86:	f000 f8a3 	bl	8001ed0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim6);
//  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
  HAL_TIM_Base_Start(&htim6);
 8001d8a:	4b22      	ldr	r3, [pc, #136]	@ (8001e14 <main+0xa8>)
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f001 fe13 	bl	80039b8 <HAL_TIM_Base_Start>
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *) SINE, SIZE, DAC_ALIGN_12B_R);
 8001d92:	4a21      	ldr	r2, [pc, #132]	@ (8001e18 <main+0xac>)
 8001d94:	4821      	ldr	r0, [pc, #132]	@ (8001e1c <main+0xb0>)
 8001d96:	2300      	movs	r3, #0
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2364      	movs	r3, #100	@ 0x64
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	f000 fc27 	bl	80025f0 <HAL_DAC_Start_DMA>

  // Sinal senoidal
  for (int i = 0; i < SIZE; ++i) SINE[i] = (sin((CONST2PI / SIZE) * i) + 1) * ((2482 + 1) / 2) + OFFSET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	e02f      	b.n	8001e08 <main+0x9c>
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ff93 	bl	8001cd4 <__aeabi_i2d>
 8001dae:	4a1c      	ldr	r2, [pc, #112]	@ (8001e20 <main+0xb4>)
 8001db0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <main+0xb8>)
 8001db2:	f7ff f863 	bl	8000e7c <__aeabi_dmul>
 8001db6:	0002      	movs	r2, r0
 8001db8:	000b      	movs	r3, r1
 8001dba:	0010      	movs	r0, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	f002 f811 	bl	8003de4 <sin>
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <main+0xbc>)
 8001dc6:	f7fe fb71 	bl	80004ac <__aeabi_dadd>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	000b      	movs	r3, r1
 8001dce:	0010      	movs	r0, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <main+0xc0>)
 8001dd6:	f7ff f851 	bl	8000e7c <__aeabi_dmul>
 8001dda:	0002      	movs	r2, r0
 8001ddc:	000b      	movs	r3, r1
 8001dde:	0010      	movs	r0, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	2200      	movs	r2, #0
 8001de4:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <main+0xc0>)
 8001de6:	f7fe fb61 	bl	80004ac <__aeabi_dadd>
 8001dea:	0002      	movs	r2, r0
 8001dec:	000b      	movs	r3, r1
 8001dee:	0010      	movs	r0, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	f7fe fb3d 	bl	8000470 <__aeabi_d2uiz>
 8001df6:	0003      	movs	r3, r0
 8001df8:	b299      	uxth	r1, r3
 8001dfa:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <main+0xac>)
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	0052      	lsls	r2, r2, #1
 8001e00:	52d1      	strh	r1, [r2, r3]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3301      	adds	r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b63      	cmp	r3, #99	@ 0x63
 8001e0c:	ddcc      	ble.n	8001da8 <main+0x3c>
//  for (int i = 500, j = 500; i < 1000; ++i, --j) SINE[i] = j * FI + OFFSET;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	e7fd      	b.n	8001e0e <main+0xa2>
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	20000080 	.word	0x20000080
 8001e18:	200000c0 	.word	0x200000c0
 8001e1c:	20000028 	.word	0x20000028
 8001e20:	afd8cb33 	.word	0xafd8cb33
 8001e24:	3fb015bf 	.word	0x3fb015bf
 8001e28:	3ff00000 	.word	0x3ff00000
 8001e2c:	40936400 	.word	0x40936400

08001e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b095      	sub	sp, #84	@ 0x54
 8001e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e36:	2418      	movs	r4, #24
 8001e38:	193b      	adds	r3, r7, r4
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	2338      	movs	r3, #56	@ 0x38
 8001e3e:	001a      	movs	r2, r3
 8001e40:	2100      	movs	r1, #0
 8001e42:	f001 ffa3 	bl	8003d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	0018      	movs	r0, r3
 8001e4a:	2314      	movs	r3, #20
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	2100      	movs	r1, #0
 8001e50:	f001 ff9c 	bl	8003d8c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <SystemClock_Config+0x98>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1c      	ldr	r2, [pc, #112]	@ (8001ecc <SystemClock_Config+0x9c>)
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <SystemClock_Config+0x98>)
 8001e5e:	2180      	movs	r1, #128	@ 0x80
 8001e60:	0109      	lsls	r1, r1, #4
 8001e62:	430a      	orrs	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e66:	0021      	movs	r1, r4
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e6e:	187b      	adds	r3, r7, r1
 8001e70:	2201      	movs	r2, #1
 8001e72:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e74:	187b      	adds	r3, r7, r1
 8001e76:	2210      	movs	r2, #16
 8001e78:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e80:	187b      	adds	r3, r7, r1
 8001e82:	0018      	movs	r0, r3
 8001e84:	f000 ffc6 	bl	8002e14 <HAL_RCC_OscConfig>
 8001e88:	1e03      	subs	r3, r0, #0
 8001e8a:	d001      	beq.n	8001e90 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001e8c:	f000 f8bc 	bl	8002008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	220f      	movs	r2, #15
 8001e94:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	2201      	movs	r2, #1
 8001e9a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2280      	movs	r2, #128	@ 0x80
 8001ea0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f001 fb72 	bl	800359c <HAL_RCC_ClockConfig>
 8001eb8:	1e03      	subs	r3, r0, #0
 8001eba:	d001      	beq.n	8001ec0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001ebc:	f000 f8a4 	bl	8002008 <Error_Handler>
  }
}
 8001ec0:	46c0      	nop			@ (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b015      	add	sp, #84	@ 0x54
 8001ec6:	bd90      	pop	{r4, r7, pc}
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	ffffe7ff 	.word	0xffffe7ff

08001ed0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001ed6:	003b      	movs	r3, r7
 8001ed8:	0018      	movs	r0, r3
 8001eda:	2308      	movs	r3, #8
 8001edc:	001a      	movs	r2, r3
 8001ede:	2100      	movs	r1, #0
 8001ee0:	f001 ff54 	bl	8003d8c <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <MX_DAC_Init+0x54>)
 8001ee6:	4a10      	ldr	r2, [pc, #64]	@ (8001f28 <MX_DAC_Init+0x58>)
 8001ee8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001eea:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <MX_DAC_Init+0x54>)
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 faef 	bl	80024d0 <HAL_DAC_Init>
 8001ef2:	1e03      	subs	r3, r0, #0
 8001ef4:	d001      	beq.n	8001efa <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 8001ef6:	f000 f887 	bl	8002008 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001efa:	003b      	movs	r3, r7
 8001efc:	2204      	movs	r2, #4
 8001efe:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f00:	003b      	movs	r3, r7
 8001f02:	2200      	movs	r2, #0
 8001f04:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f06:	0039      	movs	r1, r7
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <MX_DAC_Init+0x54>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f000 fb23 	bl	8002558 <HAL_DAC_ConfigChannel>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d001      	beq.n	8001f1a <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 8001f16:	f000 f877 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b002      	add	sp, #8
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	20000028 	.word	0x20000028
 8001f28:	40007400 	.word	0x40007400

08001f2c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f32:	003b      	movs	r3, r7
 8001f34:	0018      	movs	r0, r3
 8001f36:	2308      	movs	r3, #8
 8001f38:	001a      	movs	r2, r3
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	f001 ff26 	bl	8003d8c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f40:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <MX_TIM6_Init+0x6c>)
 8001f42:	4a16      	ldr	r2, [pc, #88]	@ (8001f9c <MX_TIM6_Init+0x70>)
 8001f44:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8001f46:	4b14      	ldr	r3, [pc, #80]	@ (8001f98 <MX_TIM6_Init+0x6c>)
 8001f48:	224f      	movs	r2, #79	@ 0x4f
 8001f4a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	@ (8001f98 <MX_TIM6_Init+0x6c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001f52:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <MX_TIM6_Init+0x6c>)
 8001f54:	2263      	movs	r2, #99	@ 0x63
 8001f56:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	@ (8001f98 <MX_TIM6_Init+0x6c>)
 8001f5a:	2280      	movs	r2, #128	@ 0x80
 8001f5c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <MX_TIM6_Init+0x6c>)
 8001f60:	0018      	movs	r0, r3
 8001f62:	f001 fce9 	bl	8003938 <HAL_TIM_Base_Init>
 8001f66:	1e03      	subs	r3, r0, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001f6a:	f000 f84d 	bl	8002008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f6e:	003b      	movs	r3, r7
 8001f70:	2220      	movs	r2, #32
 8001f72:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f74:	003b      	movs	r3, r7
 8001f76:	2200      	movs	r2, #0
 8001f78:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f7a:	003a      	movs	r2, r7
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <MX_TIM6_Init+0x6c>)
 8001f7e:	0011      	movs	r1, r2
 8001f80:	0018      	movs	r0, r3
 8001f82:	f001 feab 	bl	8003cdc <HAL_TIMEx_MasterConfigSynchronization>
 8001f86:	1e03      	subs	r3, r0, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001f8a:	f000 f83d 	bl	8002008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b002      	add	sp, #8
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	20000080 	.word	0x20000080
 8001f9c:	40001000 	.word	0x40001000

08001fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <MX_DMA_Init+0x38>)
 8001fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001faa:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <MX_DMA_Init+0x38>)
 8001fac:	2101      	movs	r1, #1
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fb2:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <MX_DMA_Init+0x38>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	200a      	movs	r0, #10
 8001fc4:	f000 fa52 	bl	800246c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001fc8:	200a      	movs	r0, #10
 8001fca:	f000 fa64 	bl	8002496 <HAL_NVIC_EnableIRQ>

}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b002      	add	sp, #8
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	40021000 	.word	0x40021000

08001fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <MX_GPIO_Init+0x28>)
 8001fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <MX_GPIO_Init+0x28>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	430a      	orrs	r2, r1
 8001fec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fee:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <MX_GPIO_Init+0x28>)
 8001ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b002      	add	sp, #8
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			@ (mov r8, r8)
 8002004:	40021000 	.word	0x40021000

08002008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800200c:	b672      	cpsid	i
}
 800200e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002010:	46c0      	nop			@ (mov r8, r8)
 8002012:	e7fd      	b.n	8002010 <Error_Handler+0x8>

08002014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002018:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <HAL_MspInit+0x24>)
 800201a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_MspInit+0x24>)
 800201e:	2101      	movs	r1, #1
 8002020:	430a      	orrs	r2, r1
 8002022:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002024:	4b04      	ldr	r3, [pc, #16]	@ (8002038 <HAL_MspInit+0x24>)
 8002026:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <HAL_MspInit+0x24>)
 800202a:	2180      	movs	r1, #128	@ 0x80
 800202c:	0549      	lsls	r1, r1, #21
 800202e:	430a      	orrs	r2, r1
 8002030:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000

0800203c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b089      	sub	sp, #36	@ 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	240c      	movs	r4, #12
 8002046:	193b      	adds	r3, r7, r4
 8002048:	0018      	movs	r0, r3
 800204a:	2314      	movs	r3, #20
 800204c:	001a      	movs	r2, r3
 800204e:	2100      	movs	r1, #0
 8002050:	f001 fe9c 	bl	8003d8c <memset>
  if(hdac->Instance==DAC)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a2e      	ldr	r2, [pc, #184]	@ (8002114 <HAL_DAC_MspInit+0xd8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d155      	bne.n	800210a <HAL_DAC_MspInit+0xce>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800205e:	4b2e      	ldr	r3, [pc, #184]	@ (8002118 <HAL_DAC_MspInit+0xdc>)
 8002060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002062:	4b2d      	ldr	r3, [pc, #180]	@ (8002118 <HAL_DAC_MspInit+0xdc>)
 8002064:	2180      	movs	r1, #128	@ 0x80
 8002066:	0589      	lsls	r1, r1, #22
 8002068:	430a      	orrs	r2, r1
 800206a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	4b2a      	ldr	r3, [pc, #168]	@ (8002118 <HAL_DAC_MspInit+0xdc>)
 800206e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002070:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <HAL_DAC_MspInit+0xdc>)
 8002072:	2101      	movs	r1, #1
 8002074:	430a      	orrs	r2, r1
 8002076:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002078:	4b27      	ldr	r3, [pc, #156]	@ (8002118 <HAL_DAC_MspInit+0xdc>)
 800207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207c:	2201      	movs	r2, #1
 800207e:	4013      	ands	r3, r2
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002084:	193b      	adds	r3, r7, r4
 8002086:	2210      	movs	r2, #16
 8002088:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800208a:	193b      	adds	r3, r7, r4
 800208c:	2203      	movs	r2, #3
 800208e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	193b      	adds	r3, r7, r4
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	193a      	adds	r2, r7, r4
 8002098:	23a0      	movs	r3, #160	@ 0xa0
 800209a:	05db      	lsls	r3, r3, #23
 800209c:	0011      	movs	r1, r2
 800209e:	0018      	movs	r0, r3
 80020a0:	f000 fd42 	bl	8002b28 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel2;
 80020a4:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <HAL_DAC_MspInit+0xe0>)
 80020a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002120 <HAL_DAC_MspInit+0xe4>)
 80020a8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_9;
 80020aa:	4b1c      	ldr	r3, [pc, #112]	@ (800211c <HAL_DAC_MspInit+0xe0>)
 80020ac:	2209      	movs	r2, #9
 80020ae:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020b0:	4b1a      	ldr	r3, [pc, #104]	@ (800211c <HAL_DAC_MspInit+0xe0>)
 80020b2:	2210      	movs	r2, #16
 80020b4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020b6:	4b19      	ldr	r3, [pc, #100]	@ (800211c <HAL_DAC_MspInit+0xe0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80020bc:	4b17      	ldr	r3, [pc, #92]	@ (800211c <HAL_DAC_MspInit+0xe0>)
 80020be:	2280      	movs	r2, #128	@ 0x80
 80020c0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020c2:	4b16      	ldr	r3, [pc, #88]	@ (800211c <HAL_DAC_MspInit+0xe0>)
 80020c4:	2280      	movs	r2, #128	@ 0x80
 80020c6:	0052      	lsls	r2, r2, #1
 80020c8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020ca:	4b14      	ldr	r3, [pc, #80]	@ (800211c <HAL_DAC_MspInit+0xe0>)
 80020cc:	2280      	movs	r2, #128	@ 0x80
 80020ce:	00d2      	lsls	r2, r2, #3
 80020d0:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80020d2:	4b12      	ldr	r3, [pc, #72]	@ (800211c <HAL_DAC_MspInit+0xe0>)
 80020d4:	2220      	movs	r2, #32
 80020d6:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80020d8:	4b10      	ldr	r3, [pc, #64]	@ (800211c <HAL_DAC_MspInit+0xe0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80020de:	4b0f      	ldr	r3, [pc, #60]	@ (800211c <HAL_DAC_MspInit+0xe0>)
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 fb67 	bl	80027b4 <HAL_DMA_Init>
 80020e6:	1e03      	subs	r3, r0, #0
 80020e8:	d001      	beq.n	80020ee <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 80020ea:	f7ff ff8d 	bl	8002008 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <HAL_DAC_MspInit+0xe0>)
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	4b09      	ldr	r3, [pc, #36]	@ (800211c <HAL_DAC_MspInit+0xe0>)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	2011      	movs	r0, #17
 8002100:	f000 f9b4 	bl	800246c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002104:	2011      	movs	r0, #17
 8002106:	f000 f9c6 	bl	8002496 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	46bd      	mov	sp, r7
 800210e:	b009      	add	sp, #36	@ 0x24
 8002110:	bd90      	pop	{r4, r7, pc}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	40007400 	.word	0x40007400
 8002118:	40021000 	.word	0x40021000
 800211c:	20000038 	.word	0x20000038
 8002120:	4002001c 	.word	0x4002001c

08002124 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <HAL_TIM_Base_MspInit+0x38>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10d      	bne.n	8002152 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <HAL_TIM_Base_MspInit+0x3c>)
 8002138:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <HAL_TIM_Base_MspInit+0x3c>)
 800213c:	2110      	movs	r1, #16
 800213e:	430a      	orrs	r2, r1
 8002140:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	2011      	movs	r0, #17
 8002148:	f000 f990 	bl	800246c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800214c:	2011      	movs	r0, #17
 800214e:	f000 f9a2 	bl	8002496 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	46bd      	mov	sp, r7
 8002156:	b002      	add	sp, #8
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	40001000 	.word	0x40001000
 8002160:	40021000 	.word	0x40021000

08002164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	e7fd      	b.n	8002168 <NMI_Handler+0x4>

0800216c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002170:	46c0      	nop			@ (mov r8, r8)
 8002172:	e7fd      	b.n	8002170 <HardFault_Handler+0x4>

08002174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002178:	46c0      	nop			@ (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800218c:	f000 f8a6 	bl	80022dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002190:	46c0      	nop			@ (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <DMA1_Channel2_3_IRQHandler+0x14>)
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 fbe6 	bl	8002970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80021a4:	46c0      	nop			@ (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	20000038 	.word	0x20000038

080021b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021b4:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <TIM6_DAC_IRQHandler+0x1c>)
 80021b6:	0018      	movs	r0, r3
 80021b8:	f001 fc42 	bl	8003a40 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 80021bc:	4b04      	ldr	r3, [pc, #16]	@ (80021d0 <TIM6_DAC_IRQHandler+0x20>)
 80021be:	0018      	movs	r0, r3
 80021c0:	f000 fa90 	bl	80026e4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021c4:	46c0      	nop			@ (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	20000080 	.word	0x20000080
 80021d0:	20000028 	.word	0x20000028

080021d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d8:	46c0      	nop			@ (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80021e0:	480d      	ldr	r0, [pc, #52]	@ (8002218 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021e2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021e4:	f7ff fff6 	bl	80021d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021e8:	480c      	ldr	r0, [pc, #48]	@ (800221c <LoopForever+0x6>)
  ldr r1, =_edata
 80021ea:	490d      	ldr	r1, [pc, #52]	@ (8002220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <LoopForever+0xe>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f0:	e002      	b.n	80021f8 <LoopCopyDataInit>

080021f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021f6:	3304      	adds	r3, #4

080021f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021fc:	d3f9      	bcc.n	80021f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002200:	4c0a      	ldr	r4, [pc, #40]	@ (800222c <LoopForever+0x16>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002204:	e001      	b.n	800220a <LoopFillZerobss>

08002206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002208:	3204      	adds	r2, #4

0800220a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800220c:	d3fb      	bcc.n	8002206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800220e:	f001 fdc5 	bl	8003d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002212:	f7ff fdab 	bl	8001d6c <main>

08002216 <LoopForever>:

LoopForever:
    b LoopForever
 8002216:	e7fe      	b.n	8002216 <LoopForever>
  ldr   r0, =_estack
 8002218:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800221c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002220:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002224:	08004f98 	.word	0x08004f98
  ldr r2, =_sbss
 8002228:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800222c:	2000018c 	.word	0x2000018c

08002230 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002230:	e7fe      	b.n	8002230 <ADC1_COMP_IRQHandler>
	...

08002234 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800223a:	1dfb      	adds	r3, r7, #7
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_Init+0x3c>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <HAL_Init+0x3c>)
 8002246:	2140      	movs	r1, #64	@ 0x40
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800224c:	2000      	movs	r0, #0
 800224e:	f000 f811 	bl	8002274 <HAL_InitTick>
 8002252:	1e03      	subs	r3, r0, #0
 8002254:	d003      	beq.n	800225e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	e001      	b.n	8002262 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800225e:	f7ff fed9 	bl	8002014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	781b      	ldrb	r3, [r3, #0]
}
 8002266:	0018      	movs	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	b002      	add	sp, #8
 800226c:	bd80      	pop	{r7, pc}
 800226e:	46c0      	nop			@ (mov r8, r8)
 8002270:	40022000 	.word	0x40022000

08002274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800227c:	4b14      	ldr	r3, [pc, #80]	@ (80022d0 <HAL_InitTick+0x5c>)
 800227e:	681c      	ldr	r4, [r3, #0]
 8002280:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <HAL_InitTick+0x60>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	0019      	movs	r1, r3
 8002286:	23fa      	movs	r3, #250	@ 0xfa
 8002288:	0098      	lsls	r0, r3, #2
 800228a:	f7fd ff3d 	bl	8000108 <__udivsi3>
 800228e:	0003      	movs	r3, r0
 8002290:	0019      	movs	r1, r3
 8002292:	0020      	movs	r0, r4
 8002294:	f7fd ff38 	bl	8000108 <__udivsi3>
 8002298:	0003      	movs	r3, r0
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f90b 	bl	80024b6 <HAL_SYSTICK_Config>
 80022a0:	1e03      	subs	r3, r0, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e00f      	b.n	80022c8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d80b      	bhi.n	80022c6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	2301      	movs	r3, #1
 80022b2:	425b      	negs	r3, r3
 80022b4:	2200      	movs	r2, #0
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 f8d8 	bl	800246c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022bc:	4b06      	ldr	r3, [pc, #24]	@ (80022d8 <HAL_InitTick+0x64>)
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b003      	add	sp, #12
 80022ce:	bd90      	pop	{r4, r7, pc}
 80022d0:	20000000 	.word	0x20000000
 80022d4:	20000008 	.word	0x20000008
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e0:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <HAL_IncTick+0x1c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	001a      	movs	r2, r3
 80022e6:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_IncTick+0x20>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	18d2      	adds	r2, r2, r3
 80022ec:	4b03      	ldr	r3, [pc, #12]	@ (80022fc <HAL_IncTick+0x20>)
 80022ee:	601a      	str	r2, [r3, #0]
}
 80022f0:	46c0      	nop			@ (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	20000008 	.word	0x20000008
 80022fc:	20000188 	.word	0x20000188

08002300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  return uwTick;
 8002304:	4b02      	ldr	r3, [pc, #8]	@ (8002310 <HAL_GetTick+0x10>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	20000188 	.word	0x20000188

08002314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	0002      	movs	r2, r0
 800231c:	1dfb      	adds	r3, r7, #7
 800231e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b7f      	cmp	r3, #127	@ 0x7f
 8002326:	d809      	bhi.n	800233c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002328:	1dfb      	adds	r3, r7, #7
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	001a      	movs	r2, r3
 800232e:	231f      	movs	r3, #31
 8002330:	401a      	ands	r2, r3
 8002332:	4b04      	ldr	r3, [pc, #16]	@ (8002344 <__NVIC_EnableIRQ+0x30>)
 8002334:	2101      	movs	r1, #1
 8002336:	4091      	lsls	r1, r2
 8002338:	000a      	movs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
  }
}
 800233c:	46c0      	nop			@ (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	0002      	movs	r2, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b7f      	cmp	r3, #127	@ 0x7f
 800235c:	d828      	bhi.n	80023b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800235e:	4a2f      	ldr	r2, [pc, #188]	@ (800241c <__NVIC_SetPriority+0xd4>)
 8002360:	1dfb      	adds	r3, r7, #7
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b25b      	sxtb	r3, r3
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	33c0      	adds	r3, #192	@ 0xc0
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	589b      	ldr	r3, [r3, r2]
 800236e:	1dfa      	adds	r2, r7, #7
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	0011      	movs	r1, r2
 8002374:	2203      	movs	r2, #3
 8002376:	400a      	ands	r2, r1
 8002378:	00d2      	lsls	r2, r2, #3
 800237a:	21ff      	movs	r1, #255	@ 0xff
 800237c:	4091      	lsls	r1, r2
 800237e:	000a      	movs	r2, r1
 8002380:	43d2      	mvns	r2, r2
 8002382:	401a      	ands	r2, r3
 8002384:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	22ff      	movs	r2, #255	@ 0xff
 800238c:	401a      	ands	r2, r3
 800238e:	1dfb      	adds	r3, r7, #7
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	0018      	movs	r0, r3
 8002394:	2303      	movs	r3, #3
 8002396:	4003      	ands	r3, r0
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800239c:	481f      	ldr	r0, [pc, #124]	@ (800241c <__NVIC_SetPriority+0xd4>)
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b25b      	sxtb	r3, r3
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	430a      	orrs	r2, r1
 80023a8:	33c0      	adds	r3, #192	@ 0xc0
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023ae:	e031      	b.n	8002414 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002420 <__NVIC_SetPriority+0xd8>)
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	0019      	movs	r1, r3
 80023b8:	230f      	movs	r3, #15
 80023ba:	400b      	ands	r3, r1
 80023bc:	3b08      	subs	r3, #8
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	3306      	adds	r3, #6
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	18d3      	adds	r3, r2, r3
 80023c6:	3304      	adds	r3, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	1dfa      	adds	r2, r7, #7
 80023cc:	7812      	ldrb	r2, [r2, #0]
 80023ce:	0011      	movs	r1, r2
 80023d0:	2203      	movs	r2, #3
 80023d2:	400a      	ands	r2, r1
 80023d4:	00d2      	lsls	r2, r2, #3
 80023d6:	21ff      	movs	r1, #255	@ 0xff
 80023d8:	4091      	lsls	r1, r2
 80023da:	000a      	movs	r2, r1
 80023dc:	43d2      	mvns	r2, r2
 80023de:	401a      	ands	r2, r3
 80023e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	019b      	lsls	r3, r3, #6
 80023e6:	22ff      	movs	r2, #255	@ 0xff
 80023e8:	401a      	ands	r2, r3
 80023ea:	1dfb      	adds	r3, r7, #7
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	0018      	movs	r0, r3
 80023f0:	2303      	movs	r3, #3
 80023f2:	4003      	ands	r3, r0
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f8:	4809      	ldr	r0, [pc, #36]	@ (8002420 <__NVIC_SetPriority+0xd8>)
 80023fa:	1dfb      	adds	r3, r7, #7
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	001c      	movs	r4, r3
 8002400:	230f      	movs	r3, #15
 8002402:	4023      	ands	r3, r4
 8002404:	3b08      	subs	r3, #8
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	430a      	orrs	r2, r1
 800240a:	3306      	adds	r3, #6
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	18c3      	adds	r3, r0, r3
 8002410:	3304      	adds	r3, #4
 8002412:	601a      	str	r2, [r3, #0]
}
 8002414:	46c0      	nop			@ (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b003      	add	sp, #12
 800241a:	bd90      	pop	{r4, r7, pc}
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	1e5a      	subs	r2, r3, #1
 8002430:	2380      	movs	r3, #128	@ 0x80
 8002432:	045b      	lsls	r3, r3, #17
 8002434:	429a      	cmp	r2, r3
 8002436:	d301      	bcc.n	800243c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002438:	2301      	movs	r3, #1
 800243a:	e010      	b.n	800245e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243c:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <SysTick_Config+0x44>)
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	3a01      	subs	r2, #1
 8002442:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002444:	2301      	movs	r3, #1
 8002446:	425b      	negs	r3, r3
 8002448:	2103      	movs	r1, #3
 800244a:	0018      	movs	r0, r3
 800244c:	f7ff ff7c 	bl	8002348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <SysTick_Config+0x44>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <SysTick_Config+0x44>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	0018      	movs	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	b002      	add	sp, #8
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			@ (mov r8, r8)
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	210f      	movs	r1, #15
 8002478:	187b      	adds	r3, r7, r1
 800247a:	1c02      	adds	r2, r0, #0
 800247c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	187b      	adds	r3, r7, r1
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b25b      	sxtb	r3, r3
 8002486:	0011      	movs	r1, r2
 8002488:	0018      	movs	r0, r3
 800248a:	f7ff ff5d 	bl	8002348 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	46bd      	mov	sp, r7
 8002492:	b004      	add	sp, #16
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	0002      	movs	r2, r0
 800249e:	1dfb      	adds	r3, r7, #7
 80024a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a2:	1dfb      	adds	r3, r7, #7
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b25b      	sxtb	r3, r3
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7ff ff33 	bl	8002314 <__NVIC_EnableIRQ>
}
 80024ae:	46c0      	nop			@ (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b002      	add	sp, #8
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f7ff ffaf 	bl	8002424 <SysTick_Config>
 80024c6:	0003      	movs	r3, r0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b002      	add	sp, #8
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e015      	b.n	800250e <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	791b      	ldrb	r3, [r3, #4]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d106      	bne.n	80024fa <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7ff fda1 	bl	800203c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2202      	movs	r2, #2
 80024fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b002      	add	sp, #8
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b002      	add	sp, #8
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b002      	add	sp, #8
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b002      	add	sp, #8
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (STM32L07x/STM32L08x only)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	795b      	ldrb	r3, [r3, #5]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_DAC_ConfigChannel+0x20>
 8002574:	2302      	movs	r3, #2
 8002576:	e035      	b.n	80025e4 <HAL_DAC_ConfigChannel+0x8c>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2202      	movs	r2, #2
 8002582:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800258c:	4a17      	ldr	r2, [pc, #92]	@ (80025ec <HAL_DAC_ConfigChannel+0x94>)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	409a      	lsls	r2, r3
 8002592:	0013      	movs	r3, r2
 8002594:	43da      	mvns	r2, r3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	4013      	ands	r3, r2
 800259a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	409a      	lsls	r2, r3
 80025ae:	0013      	movs	r3, r2
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << Channel));
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	21c0      	movs	r1, #192	@ 0xc0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4099      	lsls	r1, r3
 80025ca:	000b      	movs	r3, r1
 80025cc:	43d9      	mvns	r1, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	400a      	ands	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2201      	movs	r2, #1
 80025da:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b006      	add	sp, #24
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	00000ffe 	.word	0x00000ffe

080025f0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	795b      	ldrb	r3, [r3, #5]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_DAC_Start_DMA+0x1e>
 800260a:	2302      	movs	r3, #2
 800260c:	e05f      	b.n	80026ce <HAL_DAC_Start_DMA+0xde>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2202      	movs	r2, #2
 8002618:	711a      	strb	r2, [r3, #4]

  /* Set the DMA transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4a2e      	ldr	r2, [pc, #184]	@ (80026d8 <HAL_DAC_Start_DMA+0xe8>)
 8002620:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA half transfer complete callback for channel1 */
  hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4a2d      	ldr	r2, [pc, #180]	@ (80026dc <HAL_DAC_Start_DMA+0xec>)
 8002628:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA error callback for channel1 */
  hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	4a2c      	ldr	r2, [pc, #176]	@ (80026e0 <HAL_DAC_Start_DMA+0xf0>)
 8002630:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the selected DAC channel1 DMA request */
  SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2180      	movs	r1, #128	@ 0x80
 800263e:	0149      	lsls	r1, r1, #5
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]
     
  /* Case of use of channel 1 */
  switch(Alignment)
 8002644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_DAC_Start_DMA+0x62>
 800264a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264c:	2b04      	cmp	r3, #4
 800264e:	d005      	beq.n	800265c <HAL_DAC_Start_DMA+0x6c>
 8002650:	e009      	b.n	8002666 <HAL_DAC_Start_DMA+0x76>
  {
    case DAC_ALIGN_12B_R:
      /* Get DHR12R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3308      	adds	r3, #8
 8002658:	617b      	str	r3, [r7, #20]
      break;
 800265a:	e009      	b.n	8002670 <HAL_DAC_Start_DMA+0x80>
    case DAC_ALIGN_12B_L:
      /* Get DHR12L1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	330c      	adds	r3, #12
 8002662:	617b      	str	r3, [r7, #20]
      break;
 8002664:	e004      	b.n	8002670 <HAL_DAC_Start_DMA+0x80>
    default:
      /* Get DHR8R1 address */
      tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3310      	adds	r3, #16
 800266c:	617b      	str	r3, [r7, #20]
      break;
 800266e:	46c0      	nop			@ (mov r8, r8)
  }
  UNUSED(tmpreg);   /* avoid warning on tmpreg affectation */

  /* Enable the DAC DMA underrun interrupt */
  __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2180      	movs	r1, #128	@ 0x80
 800267c:	0189      	lsls	r1, r1, #6
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
  
  /* Enable the DMA Stream */
  status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6898      	ldr	r0, [r3, #8]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	2513      	movs	r5, #19
 800268a:	197c      	adds	r4, r7, r5
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	f000 f908 	bl	80028a4 <HAL_DMA_Start_IT>
 8002694:	0003      	movs	r3, r0
 8002696:	7023      	strb	r3, [r4, #0]
  
  /* Enable the Peripharal */
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800269e:	197b      	adds	r3, r7, r5
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10a      	bne.n	80026bc <HAL_DAC_Start_DMA+0xcc>
  {
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6819      	ldr	r1, [r3, #0]
 80026ac:	2201      	movs	r2, #1
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	409a      	lsls	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e005      	b.n	80026c8 <HAL_DAC_Start_DMA+0xd8>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2204      	movs	r2, #4
 80026c2:	431a      	orrs	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	60da      	str	r2, [r3, #12]
  }
  
  /* Return function status */
  return status;
 80026c8:	2313      	movs	r3, #19
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	781b      	ldrb	r3, [r3, #0]
}
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b006      	add	sp, #24
 80026d4:	bdb0      	pop	{r4, r5, r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	08002741 	.word	0x08002741
 80026dc:	08002765 	.word	0x08002765
 80026e0:	08002783 	.word	0x08002783

080026e4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check underrun flag of DAC channel 1 */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026f2:	2380      	movs	r3, #128	@ 0x80
 80026f4:	019b      	lsls	r3, r3, #6
 80026f6:	401a      	ands	r2, r3
 80026f8:	2380      	movs	r3, #128	@ 0x80
 80026fa:	019b      	lsls	r3, r3, #6
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d119      	bne.n	8002734 <HAL_DAC_IRQHandler+0x50>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2204      	movs	r2, #4
 8002704:	711a      	strb	r2, [r3, #4]

    /* Set DAC error code to chanel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	60da      	str	r2, [r3, #12]

    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2280      	movs	r2, #128	@ 0x80
 8002718:	0192      	lsls	r2, r2, #6
 800271a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable the selected DAC channel1 DMA request */
    CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4905      	ldr	r1, [pc, #20]	@ (800273c <HAL_DAC_IRQHandler+0x58>)
 8002728:	400a      	ands	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

    /* Error callback */
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	0018      	movs	r0, r3
 8002730:	f7ff ff09 	bl	8002546 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
}
 8002734:	46c0      	nop			@ (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b002      	add	sp, #8
 800273a:	bd80      	pop	{r7, pc}
 800273c:	ffffefff 	.word	0xffffefff

08002740 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff fee0 	bl	8002516 <HAL_DAC_ConvCpltCallbackCh1>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	711a      	strb	r2, [r3, #4]
}
 800275c:	46c0      	nop			@ (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b004      	add	sp, #16
 8002762:	bd80      	pop	{r7, pc}

08002764 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	60fb      	str	r3, [r7, #12]

  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	0018      	movs	r0, r3
 8002776:	f7ff fed6 	bl	8002526 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  
}
 800277a:	46c0      	nop			@ (mov r8, r8)
 800277c:	46bd      	mov	sp, r7
 800277e:	b004      	add	sp, #16
 8002780:	bd80      	pop	{r7, pc}

08002782 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2204      	movs	r2, #4
 8002796:	431a      	orrs	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	60da      	str	r2, [r3, #12]

  HAL_DAC_ErrorCallbackCh1(hdac);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	0018      	movs	r0, r3
 80027a0:	f7ff fec9 	bl	8002536 <HAL_DAC_ErrorCallbackCh1>

  hdac->State= HAL_DAC_STATE_READY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	711a      	strb	r2, [r3, #4]
}
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b004      	add	sp, #16
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e061      	b.n	800288a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a32      	ldr	r2, [pc, #200]	@ (8002894 <HAL_DMA_Init+0xe0>)
 80027cc:	4694      	mov	ip, r2
 80027ce:	4463      	add	r3, ip
 80027d0:	2114      	movs	r1, #20
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7fd fc98 	bl	8000108 <__udivsi3>
 80027d8:	0003      	movs	r3, r0
 80027da:	009a      	lsls	r2, r3, #2
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002898 <HAL_DMA_Init+0xe4>)
 80027e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2225      	movs	r2, #37	@ 0x25
 80027ea:	2102      	movs	r1, #2
 80027ec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a28      	ldr	r2, [pc, #160]	@ (800289c <HAL_DMA_Init+0xe8>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002806:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	2380      	movs	r3, #128	@ 0x80
 800283a:	01db      	lsls	r3, r3, #7
 800283c:	429a      	cmp	r2, r3
 800283e:	d018      	beq.n	8002872 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002840:	4b17      	ldr	r3, [pc, #92]	@ (80028a0 <HAL_DMA_Init+0xec>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002848:	211c      	movs	r1, #28
 800284a:	400b      	ands	r3, r1
 800284c:	210f      	movs	r1, #15
 800284e:	4099      	lsls	r1, r3
 8002850:	000b      	movs	r3, r1
 8002852:	43d9      	mvns	r1, r3
 8002854:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <HAL_DMA_Init+0xec>)
 8002856:	400a      	ands	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800285a:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <HAL_DMA_Init+0xec>)
 800285c:	6819      	ldr	r1, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002866:	201c      	movs	r0, #28
 8002868:	4003      	ands	r3, r0
 800286a:	409a      	lsls	r2, r3
 800286c:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <HAL_DMA_Init+0xec>)
 800286e:	430a      	orrs	r2, r1
 8002870:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2225      	movs	r2, #37	@ 0x25
 800287c:	2101      	movs	r1, #1
 800287e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2224      	movs	r2, #36	@ 0x24
 8002884:	2100      	movs	r1, #0
 8002886:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b004      	add	sp, #16
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	bffdfff8 	.word	0xbffdfff8
 8002898:	40020000 	.word	0x40020000
 800289c:	ffff800f 	.word	0xffff800f
 80028a0:	400200a8 	.word	0x400200a8

080028a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b2:	2317      	movs	r3, #23
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2224      	movs	r2, #36	@ 0x24
 80028be:	5c9b      	ldrb	r3, [r3, r2]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_DMA_Start_IT+0x24>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e04f      	b.n	8002968 <HAL_DMA_Start_IT+0xc4>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2224      	movs	r2, #36	@ 0x24
 80028cc:	2101      	movs	r1, #1
 80028ce:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2225      	movs	r2, #37	@ 0x25
 80028d4:	5c9b      	ldrb	r3, [r3, r2]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d13a      	bne.n	8002952 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2225      	movs	r2, #37	@ 0x25
 80028e0:	2102      	movs	r1, #2
 80028e2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2101      	movs	r1, #1
 80028f6:	438a      	bics	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f8e3 	bl	8002acc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	210e      	movs	r1, #14
 800291a:	430a      	orrs	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e00f      	b.n	8002940 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2104      	movs	r1, #4
 800292c:	438a      	bics	r2, r1
 800292e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	210a      	movs	r1, #10
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2101      	movs	r1, #1
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e007      	b.n	8002962 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2224      	movs	r2, #36	@ 0x24
 8002956:	2100      	movs	r1, #0
 8002958:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800295a:	2317      	movs	r3, #23
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	2202      	movs	r2, #2
 8002960:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002962:	2317      	movs	r3, #23
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	781b      	ldrb	r3, [r3, #0]
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b006      	add	sp, #24
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298c:	221c      	movs	r2, #28
 800298e:	4013      	ands	r3, r2
 8002990:	2204      	movs	r2, #4
 8002992:	409a      	lsls	r2, r3
 8002994:	0013      	movs	r3, r2
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4013      	ands	r3, r2
 800299a:	d026      	beq.n	80029ea <HAL_DMA_IRQHandler+0x7a>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2204      	movs	r2, #4
 80029a0:	4013      	ands	r3, r2
 80029a2:	d022      	beq.n	80029ea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2220      	movs	r2, #32
 80029ac:	4013      	ands	r3, r2
 80029ae:	d107      	bne.n	80029c0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2104      	movs	r1, #4
 80029bc:	438a      	bics	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	221c      	movs	r2, #28
 80029c6:	401a      	ands	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	2104      	movs	r1, #4
 80029ce:	4091      	lsls	r1, r2
 80029d0:	000a      	movs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d100      	bne.n	80029de <HAL_DMA_IRQHandler+0x6e>
 80029dc:	e071      	b.n	8002ac2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	0010      	movs	r0, r2
 80029e6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80029e8:	e06b      	b.n	8002ac2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ee:	221c      	movs	r2, #28
 80029f0:	4013      	ands	r3, r2
 80029f2:	2202      	movs	r2, #2
 80029f4:	409a      	lsls	r2, r3
 80029f6:	0013      	movs	r3, r2
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	d02d      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xea>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2202      	movs	r2, #2
 8002a02:	4013      	ands	r3, r2
 8002a04:	d029      	beq.n	8002a5a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d10b      	bne.n	8002a2a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	210a      	movs	r1, #10
 8002a1e:	438a      	bics	r2, r1
 8002a20:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2225      	movs	r2, #37	@ 0x25
 8002a26:	2101      	movs	r1, #1
 8002a28:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2e:	221c      	movs	r2, #28
 8002a30:	401a      	ands	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	2102      	movs	r1, #2
 8002a38:	4091      	lsls	r1, r2
 8002a3a:	000a      	movs	r2, r1
 8002a3c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2224      	movs	r2, #36	@ 0x24
 8002a42:	2100      	movs	r1, #0
 8002a44:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d039      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	0010      	movs	r0, r2
 8002a56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a58:	e033      	b.n	8002ac2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5e:	221c      	movs	r2, #28
 8002a60:	4013      	ands	r3, r2
 8002a62:	2208      	movs	r2, #8
 8002a64:	409a      	lsls	r2, r3
 8002a66:	0013      	movs	r3, r2
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d02a      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x154>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2208      	movs	r2, #8
 8002a72:	4013      	ands	r3, r2
 8002a74:	d026      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	210e      	movs	r1, #14
 8002a82:	438a      	bics	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	221c      	movs	r2, #28
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	2101      	movs	r1, #1
 8002a94:	4091      	lsls	r1, r2
 8002a96:	000a      	movs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2225      	movs	r2, #37	@ 0x25
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2224      	movs	r2, #36	@ 0x24
 8002aac:	2100      	movs	r1, #0
 8002aae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	0010      	movs	r0, r2
 8002ac0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	46c0      	nop			@ (mov r8, r8)
}
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b004      	add	sp, #16
 8002aca:	bd80      	pop	{r7, pc}

08002acc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	221c      	movs	r2, #28
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4091      	lsls	r1, r2
 8002aea:	000a      	movs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d108      	bne.n	8002b10 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b0e:	e007      	b.n	8002b20 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	60da      	str	r2, [r3, #12]
}
 8002b20:	46c0      	nop			@ (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b004      	add	sp, #16
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b3e:	e14f      	b.n	8002de0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4091      	lsls	r1, r2
 8002b4a:	000a      	movs	r2, r1
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d100      	bne.n	8002b58 <HAL_GPIO_Init+0x30>
 8002b56:	e140      	b.n	8002dda <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d005      	beq.n	8002b70 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2203      	movs	r2, #3
 8002b6a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d130      	bne.n	8002bd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	0013      	movs	r3, r2
 8002b80:	43da      	mvns	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	409a      	lsls	r2, r3
 8002b92:	0013      	movs	r3, r2
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	0013      	movs	r3, r2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d017      	beq.n	8002c0e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	409a      	lsls	r2, r3
 8002bec:	0013      	movs	r3, r2
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	0013      	movs	r3, r2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2203      	movs	r2, #3
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d123      	bne.n	8002c62 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	08da      	lsrs	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3208      	adds	r2, #8
 8002c22:	0092      	lsls	r2, r2, #2
 8002c24:	58d3      	ldr	r3, [r2, r3]
 8002c26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2207      	movs	r2, #7
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	220f      	movs	r2, #15
 8002c32:	409a      	lsls	r2, r3
 8002c34:	0013      	movs	r3, r2
 8002c36:	43da      	mvns	r2, r3
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2107      	movs	r1, #7
 8002c46:	400b      	ands	r3, r1
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	0013      	movs	r3, r2
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	08da      	lsrs	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3208      	adds	r2, #8
 8002c5c:	0092      	lsls	r2, r2, #2
 8002c5e:	6939      	ldr	r1, [r7, #16]
 8002c60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	0013      	movs	r3, r2
 8002c72:	43da      	mvns	r2, r3
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2203      	movs	r2, #3
 8002c80:	401a      	ands	r2, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	409a      	lsls	r2, r3
 8002c88:	0013      	movs	r3, r2
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	23c0      	movs	r3, #192	@ 0xc0
 8002c9c:	029b      	lsls	r3, r3, #10
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d100      	bne.n	8002ca4 <HAL_GPIO_Init+0x17c>
 8002ca2:	e09a      	b.n	8002dda <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca4:	4b54      	ldr	r3, [pc, #336]	@ (8002df8 <HAL_GPIO_Init+0x2d0>)
 8002ca6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ca8:	4b53      	ldr	r3, [pc, #332]	@ (8002df8 <HAL_GPIO_Init+0x2d0>)
 8002caa:	2101      	movs	r1, #1
 8002cac:	430a      	orrs	r2, r1
 8002cae:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb0:	4a52      	ldr	r2, [pc, #328]	@ (8002dfc <HAL_GPIO_Init+0x2d4>)
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	589b      	ldr	r3, [r3, r2]
 8002cbc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	0013      	movs	r3, r2
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	23a0      	movs	r3, #160	@ 0xa0
 8002cd8:	05db      	lsls	r3, r3, #23
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d019      	beq.n	8002d12 <HAL_GPIO_Init+0x1ea>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a47      	ldr	r2, [pc, #284]	@ (8002e00 <HAL_GPIO_Init+0x2d8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d013      	beq.n	8002d0e <HAL_GPIO_Init+0x1e6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a46      	ldr	r2, [pc, #280]	@ (8002e04 <HAL_GPIO_Init+0x2dc>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00d      	beq.n	8002d0a <HAL_GPIO_Init+0x1e2>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a45      	ldr	r2, [pc, #276]	@ (8002e08 <HAL_GPIO_Init+0x2e0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d007      	beq.n	8002d06 <HAL_GPIO_Init+0x1de>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a44      	ldr	r2, [pc, #272]	@ (8002e0c <HAL_GPIO_Init+0x2e4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d101      	bne.n	8002d02 <HAL_GPIO_Init+0x1da>
 8002cfe:	2305      	movs	r3, #5
 8002d00:	e008      	b.n	8002d14 <HAL_GPIO_Init+0x1ec>
 8002d02:	2306      	movs	r3, #6
 8002d04:	e006      	b.n	8002d14 <HAL_GPIO_Init+0x1ec>
 8002d06:	2303      	movs	r3, #3
 8002d08:	e004      	b.n	8002d14 <HAL_GPIO_Init+0x1ec>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e002      	b.n	8002d14 <HAL_GPIO_Init+0x1ec>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_GPIO_Init+0x1ec>
 8002d12:	2300      	movs	r3, #0
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	2103      	movs	r1, #3
 8002d18:	400a      	ands	r2, r1
 8002d1a:	0092      	lsls	r2, r2, #2
 8002d1c:	4093      	lsls	r3, r2
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d24:	4935      	ldr	r1, [pc, #212]	@ (8002dfc <HAL_GPIO_Init+0x2d4>)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	089b      	lsrs	r3, r3, #2
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d32:	4b37      	ldr	r3, [pc, #220]	@ (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	2380      	movs	r3, #128	@ 0x80
 8002d48:	035b      	lsls	r3, r3, #13
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d56:	4b2e      	ldr	r3, [pc, #184]	@ (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	43da      	mvns	r2, r3
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	039b      	lsls	r3, r3, #14
 8002d74:	4013      	ands	r3, r2
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d80:	4b23      	ldr	r3, [pc, #140]	@ (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002d86:	4b22      	ldr	r3, [pc, #136]	@ (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	2380      	movs	r3, #128	@ 0x80
 8002d9c:	029b      	lsls	r3, r3, #10
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002daa:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002db0:	4b17      	ldr	r3, [pc, #92]	@ (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	43da      	mvns	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	2380      	movs	r3, #128	@ 0x80
 8002dc6:	025b      	lsls	r3, r3, #9
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e10 <HAL_GPIO_Init+0x2e8>)
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	40da      	lsrs	r2, r3
 8002de8:	1e13      	subs	r3, r2, #0
 8002dea:	d000      	beq.n	8002dee <HAL_GPIO_Init+0x2c6>
 8002dec:	e6a8      	b.n	8002b40 <HAL_GPIO_Init+0x18>
  }
}
 8002dee:	46c0      	nop			@ (mov r8, r8)
 8002df0:	46c0      	nop			@ (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b006      	add	sp, #24
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	50000400 	.word	0x50000400
 8002e04:	50000800 	.word	0x50000800
 8002e08:	50000c00 	.word	0x50000c00
 8002e0c:	50001c00 	.word	0x50001c00
 8002e10:	40010400 	.word	0x40010400

08002e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e14:	b5b0      	push	{r4, r5, r7, lr}
 8002e16:	b08a      	sub	sp, #40	@ 0x28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f000 fbaf 	bl	8003586 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e28:	4bcf      	ldr	r3, [pc, #828]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	220c      	movs	r2, #12
 8002e2e:	4013      	ands	r3, r2
 8002e30:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e32:	4bcd      	ldr	r3, [pc, #820]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	2380      	movs	r3, #128	@ 0x80
 8002e38:	025b      	lsls	r3, r3, #9
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2201      	movs	r2, #1
 8002e44:	4013      	ands	r3, r2
 8002e46:	d100      	bne.n	8002e4a <HAL_RCC_OscConfig+0x36>
 8002e48:	e07e      	b.n	8002f48 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d007      	beq.n	8002e60 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	2b0c      	cmp	r3, #12
 8002e54:	d112      	bne.n	8002e7c <HAL_RCC_OscConfig+0x68>
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	2380      	movs	r3, #128	@ 0x80
 8002e5a:	025b      	lsls	r3, r3, #9
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	4bc1      	ldr	r3, [pc, #772]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	2380      	movs	r3, #128	@ 0x80
 8002e66:	029b      	lsls	r3, r3, #10
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d100      	bne.n	8002e6e <HAL_RCC_OscConfig+0x5a>
 8002e6c:	e06b      	b.n	8002f46 <HAL_RCC_OscConfig+0x132>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d167      	bne.n	8002f46 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f000 fb85 	bl	8003586 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	2380      	movs	r3, #128	@ 0x80
 8002e82:	025b      	lsls	r3, r3, #9
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d107      	bne.n	8002e98 <HAL_RCC_OscConfig+0x84>
 8002e88:	4bb7      	ldr	r3, [pc, #732]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4bb6      	ldr	r3, [pc, #728]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002e8e:	2180      	movs	r1, #128	@ 0x80
 8002e90:	0249      	lsls	r1, r1, #9
 8002e92:	430a      	orrs	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e027      	b.n	8002ee8 <HAL_RCC_OscConfig+0xd4>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	23a0      	movs	r3, #160	@ 0xa0
 8002e9e:	02db      	lsls	r3, r3, #11
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d10e      	bne.n	8002ec2 <HAL_RCC_OscConfig+0xae>
 8002ea4:	4bb0      	ldr	r3, [pc, #704]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4baf      	ldr	r3, [pc, #700]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002eaa:	2180      	movs	r1, #128	@ 0x80
 8002eac:	02c9      	lsls	r1, r1, #11
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	4bad      	ldr	r3, [pc, #692]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4bac      	ldr	r3, [pc, #688]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002eb8:	2180      	movs	r1, #128	@ 0x80
 8002eba:	0249      	lsls	r1, r1, #9
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	e012      	b.n	8002ee8 <HAL_RCC_OscConfig+0xd4>
 8002ec2:	4ba9      	ldr	r3, [pc, #676]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4ba8      	ldr	r3, [pc, #672]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002ec8:	49a8      	ldr	r1, [pc, #672]	@ (800316c <HAL_RCC_OscConfig+0x358>)
 8002eca:	400a      	ands	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	4ba6      	ldr	r3, [pc, #664]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	2380      	movs	r3, #128	@ 0x80
 8002ed4:	025b      	lsls	r3, r3, #9
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4ba2      	ldr	r3, [pc, #648]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4ba1      	ldr	r3, [pc, #644]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002ee2:	49a3      	ldr	r1, [pc, #652]	@ (8003170 <HAL_RCC_OscConfig+0x35c>)
 8002ee4:	400a      	ands	r2, r1
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d015      	beq.n	8002f1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7ff fa06 	bl	8002300 <HAL_GetTick>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ef8:	e009      	b.n	8002f0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002efa:	f7ff fa01 	bl	8002300 <HAL_GetTick>
 8002efe:	0002      	movs	r2, r0
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b64      	cmp	r3, #100	@ 0x64
 8002f06:	d902      	bls.n	8002f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	f000 fb3c 	bl	8003586 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f0e:	4b96      	ldr	r3, [pc, #600]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	@ 0x80
 8002f14:	029b      	lsls	r3, r3, #10
 8002f16:	4013      	ands	r3, r2
 8002f18:	d0ef      	beq.n	8002efa <HAL_RCC_OscConfig+0xe6>
 8002f1a:	e015      	b.n	8002f48 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1c:	f7ff f9f0 	bl	8002300 <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f26:	f7ff f9eb 	bl	8002300 <HAL_GetTick>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b64      	cmp	r3, #100	@ 0x64
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e326      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f38:	4b8b      	ldr	r3, [pc, #556]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2380      	movs	r3, #128	@ 0x80
 8002f3e:	029b      	lsls	r3, r3, #10
 8002f40:	4013      	ands	r3, r2
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0x112>
 8002f44:	e000      	b.n	8002f48 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f46:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d100      	bne.n	8002f54 <HAL_RCC_OscConfig+0x140>
 8002f52:	e08b      	b.n	800306c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d13e      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1d0>
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d13b      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2204      	movs	r2, #4
 8002f72:	4013      	ands	r3, r2
 8002f74:	d004      	beq.n	8002f80 <HAL_RCC_OscConfig+0x16c>
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e302      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f80:	4b79      	ldr	r3, [pc, #484]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a7b      	ldr	r2, [pc, #492]	@ (8003174 <HAL_RCC_OscConfig+0x360>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	021a      	lsls	r2, r3, #8
 8002f90:	4b75      	ldr	r3, [pc, #468]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002f96:	4b74      	ldr	r3, [pc, #464]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2209      	movs	r2, #9
 8002f9c:	4393      	bics	r3, r2
 8002f9e:	0019      	movs	r1, r3
 8002fa0:	4b71      	ldr	r3, [pc, #452]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fa8:	f000 fc40 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8002fac:	0001      	movs	r1, r0
 8002fae:	4b6e      	ldr	r3, [pc, #440]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	220f      	movs	r2, #15
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	4a6f      	ldr	r2, [pc, #444]	@ (8003178 <HAL_RCC_OscConfig+0x364>)
 8002fba:	5cd3      	ldrb	r3, [r2, r3]
 8002fbc:	000a      	movs	r2, r1
 8002fbe:	40da      	lsrs	r2, r3
 8002fc0:	4b6e      	ldr	r3, [pc, #440]	@ (800317c <HAL_RCC_OscConfig+0x368>)
 8002fc2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002fc4:	4b6e      	ldr	r3, [pc, #440]	@ (8003180 <HAL_RCC_OscConfig+0x36c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2513      	movs	r5, #19
 8002fca:	197c      	adds	r4, r7, r5
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff f951 	bl	8002274 <HAL_InitTick>
 8002fd2:	0003      	movs	r3, r0
 8002fd4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002fd6:	197b      	adds	r3, r7, r5
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d046      	beq.n	800306c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002fde:	197b      	adds	r3, r7, r5
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	e2d0      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d027      	beq.n	800303a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002fea:	4b5f      	ldr	r3, [pc, #380]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2209      	movs	r2, #9
 8002ff0:	4393      	bics	r3, r2
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	4b5c      	ldr	r3, [pc, #368]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7ff f980 	bl	8002300 <HAL_GetTick>
 8003000:	0003      	movs	r3, r0
 8003002:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003006:	f7ff f97b 	bl	8002300 <HAL_GetTick>
 800300a:	0002      	movs	r2, r0
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e2b6      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003018:	4b53      	ldr	r3, [pc, #332]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2204      	movs	r2, #4
 800301e:	4013      	ands	r3, r2
 8003020:	d0f1      	beq.n	8003006 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b51      	ldr	r3, [pc, #324]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4a53      	ldr	r2, [pc, #332]	@ (8003174 <HAL_RCC_OscConfig+0x360>)
 8003028:	4013      	ands	r3, r2
 800302a:	0019      	movs	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	021a      	lsls	r2, r3, #8
 8003032:	4b4d      	ldr	r3, [pc, #308]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	e018      	b.n	800306c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303a:	4b4b      	ldr	r3, [pc, #300]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4b4a      	ldr	r3, [pc, #296]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8003040:	2101      	movs	r1, #1
 8003042:	438a      	bics	r2, r1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003046:	f7ff f95b 	bl	8002300 <HAL_GetTick>
 800304a:	0003      	movs	r3, r0
 800304c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003050:	f7ff f956 	bl	8002300 <HAL_GetTick>
 8003054:	0002      	movs	r2, r0
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e291      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003062:	4b41      	ldr	r3, [pc, #260]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2204      	movs	r2, #4
 8003068:	4013      	ands	r3, r2
 800306a:	d1f1      	bne.n	8003050 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2210      	movs	r2, #16
 8003072:	4013      	ands	r3, r2
 8003074:	d100      	bne.n	8003078 <HAL_RCC_OscConfig+0x264>
 8003076:	e0a1      	b.n	80031bc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d140      	bne.n	8003100 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800307e:	4b3a      	ldr	r3, [pc, #232]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	2380      	movs	r3, #128	@ 0x80
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4013      	ands	r3, r2
 8003088:	d005      	beq.n	8003096 <HAL_RCC_OscConfig+0x282>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e277      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003096:	4b34      	ldr	r3, [pc, #208]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4a3a      	ldr	r2, [pc, #232]	@ (8003184 <HAL_RCC_OscConfig+0x370>)
 800309c:	4013      	ands	r3, r2
 800309e:	0019      	movs	r1, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030a4:	4b30      	ldr	r3, [pc, #192]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	0a19      	lsrs	r1, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	061a      	lsls	r2, r3, #24
 80030b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c2:	0b5b      	lsrs	r3, r3, #13
 80030c4:	3301      	adds	r3, #1
 80030c6:	2280      	movs	r2, #128	@ 0x80
 80030c8:	0212      	lsls	r2, r2, #8
 80030ca:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80030cc:	4b26      	ldr	r3, [pc, #152]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	210f      	movs	r1, #15
 80030d4:	400b      	ands	r3, r1
 80030d6:	4928      	ldr	r1, [pc, #160]	@ (8003178 <HAL_RCC_OscConfig+0x364>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80030dc:	4b27      	ldr	r3, [pc, #156]	@ (800317c <HAL_RCC_OscConfig+0x368>)
 80030de:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80030e0:	4b27      	ldr	r3, [pc, #156]	@ (8003180 <HAL_RCC_OscConfig+0x36c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2513      	movs	r5, #19
 80030e6:	197c      	adds	r4, r7, r5
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7ff f8c3 	bl	8002274 <HAL_InitTick>
 80030ee:	0003      	movs	r3, r0
 80030f0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80030f2:	197b      	adds	r3, r7, r5
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d060      	beq.n	80031bc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80030fa:	197b      	adds	r3, r7, r5
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	e242      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d03f      	beq.n	8003188 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003108:	4b17      	ldr	r3, [pc, #92]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b16      	ldr	r3, [pc, #88]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 800310e:	2180      	movs	r1, #128	@ 0x80
 8003110:	0049      	lsls	r1, r1, #1
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003116:	f7ff f8f3 	bl	8002300 <HAL_GetTick>
 800311a:	0003      	movs	r3, r0
 800311c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003120:	f7ff f8ee 	bl	8002300 <HAL_GetTick>
 8003124:	0002      	movs	r2, r0
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e229      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003132:	4b0d      	ldr	r3, [pc, #52]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	2380      	movs	r3, #128	@ 0x80
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4013      	ands	r3, r2
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800313e:	4b0a      	ldr	r3, [pc, #40]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a10      	ldr	r2, [pc, #64]	@ (8003184 <HAL_RCC_OscConfig+0x370>)
 8003144:	4013      	ands	r3, r2
 8003146:	0019      	movs	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800314c:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 800314e:	430a      	orrs	r2, r1
 8003150:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003152:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	0a19      	lsrs	r1, r3, #8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	061a      	lsls	r2, r3, #24
 8003160:	4b01      	ldr	r3, [pc, #4]	@ (8003168 <HAL_RCC_OscConfig+0x354>)
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
 8003166:	e029      	b.n	80031bc <HAL_RCC_OscConfig+0x3a8>
 8003168:	40021000 	.word	0x40021000
 800316c:	fffeffff 	.word	0xfffeffff
 8003170:	fffbffff 	.word	0xfffbffff
 8003174:	ffffe0ff 	.word	0xffffe0ff
 8003178:	08004d98 	.word	0x08004d98
 800317c:	20000000 	.word	0x20000000
 8003180:	20000004 	.word	0x20000004
 8003184:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003188:	4bbd      	ldr	r3, [pc, #756]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4bbc      	ldr	r3, [pc, #752]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 800318e:	49bd      	ldr	r1, [pc, #756]	@ (8003484 <HAL_RCC_OscConfig+0x670>)
 8003190:	400a      	ands	r2, r1
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7ff f8b4 	bl	8002300 <HAL_GetTick>
 8003198:	0003      	movs	r3, r0
 800319a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800319e:	f7ff f8af 	bl	8002300 <HAL_GetTick>
 80031a2:	0002      	movs	r2, r0
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e1ea      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031b0:	4bb3      	ldr	r3, [pc, #716]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4013      	ands	r3, r2
 80031ba:	d1f0      	bne.n	800319e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2208      	movs	r2, #8
 80031c2:	4013      	ands	r3, r2
 80031c4:	d036      	beq.n	8003234 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d019      	beq.n	8003202 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ce:	4bac      	ldr	r3, [pc, #688]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80031d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031d2:	4bab      	ldr	r3, [pc, #684]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80031d4:	2101      	movs	r1, #1
 80031d6:	430a      	orrs	r2, r1
 80031d8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031da:	f7ff f891 	bl	8002300 <HAL_GetTick>
 80031de:	0003      	movs	r3, r0
 80031e0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e4:	f7ff f88c 	bl	8002300 <HAL_GetTick>
 80031e8:	0002      	movs	r2, r0
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e1c7      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031f6:	4ba2      	ldr	r3, [pc, #648]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80031f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031fa:	2202      	movs	r2, #2
 80031fc:	4013      	ands	r3, r2
 80031fe:	d0f1      	beq.n	80031e4 <HAL_RCC_OscConfig+0x3d0>
 8003200:	e018      	b.n	8003234 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003202:	4b9f      	ldr	r3, [pc, #636]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003204:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003206:	4b9e      	ldr	r3, [pc, #632]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003208:	2101      	movs	r1, #1
 800320a:	438a      	bics	r2, r1
 800320c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320e:	f7ff f877 	bl	8002300 <HAL_GetTick>
 8003212:	0003      	movs	r3, r0
 8003214:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003218:	f7ff f872 	bl	8002300 <HAL_GetTick>
 800321c:	0002      	movs	r2, r0
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1ad      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800322a:	4b95      	ldr	r3, [pc, #596]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 800322c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800322e:	2202      	movs	r2, #2
 8003230:	4013      	ands	r3, r2
 8003232:	d1f1      	bne.n	8003218 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2204      	movs	r2, #4
 800323a:	4013      	ands	r3, r2
 800323c:	d100      	bne.n	8003240 <HAL_RCC_OscConfig+0x42c>
 800323e:	e0ae      	b.n	800339e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003240:	2027      	movs	r0, #39	@ 0x27
 8003242:	183b      	adds	r3, r7, r0
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003248:	4b8d      	ldr	r3, [pc, #564]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 800324a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800324c:	2380      	movs	r3, #128	@ 0x80
 800324e:	055b      	lsls	r3, r3, #21
 8003250:	4013      	ands	r3, r2
 8003252:	d109      	bne.n	8003268 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003254:	4b8a      	ldr	r3, [pc, #552]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003258:	4b89      	ldr	r3, [pc, #548]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 800325a:	2180      	movs	r1, #128	@ 0x80
 800325c:	0549      	lsls	r1, r1, #21
 800325e:	430a      	orrs	r2, r1
 8003260:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003262:	183b      	adds	r3, r7, r0
 8003264:	2201      	movs	r2, #1
 8003266:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003268:	4b87      	ldr	r3, [pc, #540]	@ (8003488 <HAL_RCC_OscConfig+0x674>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	2380      	movs	r3, #128	@ 0x80
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4013      	ands	r3, r2
 8003272:	d11a      	bne.n	80032aa <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003274:	4b84      	ldr	r3, [pc, #528]	@ (8003488 <HAL_RCC_OscConfig+0x674>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b83      	ldr	r3, [pc, #524]	@ (8003488 <HAL_RCC_OscConfig+0x674>)
 800327a:	2180      	movs	r1, #128	@ 0x80
 800327c:	0049      	lsls	r1, r1, #1
 800327e:	430a      	orrs	r2, r1
 8003280:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003282:	f7ff f83d 	bl	8002300 <HAL_GetTick>
 8003286:	0003      	movs	r3, r0
 8003288:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328c:	f7ff f838 	bl	8002300 <HAL_GetTick>
 8003290:	0002      	movs	r2, r0
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	@ 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e173      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	4b7a      	ldr	r3, [pc, #488]	@ (8003488 <HAL_RCC_OscConfig+0x674>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4013      	ands	r3, r2
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_OscConfig+0x4b2>
 80032b6:	4b72      	ldr	r3, [pc, #456]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80032b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032ba:	4b71      	ldr	r3, [pc, #452]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80032bc:	2180      	movs	r1, #128	@ 0x80
 80032be:	0049      	lsls	r1, r1, #1
 80032c0:	430a      	orrs	r2, r1
 80032c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80032c4:	e031      	b.n	800332a <HAL_RCC_OscConfig+0x516>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
 80032ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80032d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032d2:	4b6b      	ldr	r3, [pc, #428]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80032d4:	496b      	ldr	r1, [pc, #428]	@ (8003484 <HAL_RCC_OscConfig+0x670>)
 80032d6:	400a      	ands	r2, r1
 80032d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80032da:	4b69      	ldr	r3, [pc, #420]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80032dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032de:	4b68      	ldr	r3, [pc, #416]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80032e0:	496a      	ldr	r1, [pc, #424]	@ (800348c <HAL_RCC_OscConfig+0x678>)
 80032e2:	400a      	ands	r2, r1
 80032e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80032e6:	e020      	b.n	800332a <HAL_RCC_OscConfig+0x516>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689a      	ldr	r2, [r3, #8]
 80032ec:	23a0      	movs	r3, #160	@ 0xa0
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d10e      	bne.n	8003312 <HAL_RCC_OscConfig+0x4fe>
 80032f4:	4b62      	ldr	r3, [pc, #392]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80032f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80032f8:	4b61      	ldr	r3, [pc, #388]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80032fa:	2180      	movs	r1, #128	@ 0x80
 80032fc:	00c9      	lsls	r1, r1, #3
 80032fe:	430a      	orrs	r2, r1
 8003300:	651a      	str	r2, [r3, #80]	@ 0x50
 8003302:	4b5f      	ldr	r3, [pc, #380]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003304:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003306:	4b5e      	ldr	r3, [pc, #376]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003308:	2180      	movs	r1, #128	@ 0x80
 800330a:	0049      	lsls	r1, r1, #1
 800330c:	430a      	orrs	r2, r1
 800330e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003310:	e00b      	b.n	800332a <HAL_RCC_OscConfig+0x516>
 8003312:	4b5b      	ldr	r3, [pc, #364]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003314:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003316:	4b5a      	ldr	r3, [pc, #360]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003318:	495a      	ldr	r1, [pc, #360]	@ (8003484 <HAL_RCC_OscConfig+0x670>)
 800331a:	400a      	ands	r2, r1
 800331c:	651a      	str	r2, [r3, #80]	@ 0x50
 800331e:	4b58      	ldr	r3, [pc, #352]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003320:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003322:	4b57      	ldr	r3, [pc, #348]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003324:	4959      	ldr	r1, [pc, #356]	@ (800348c <HAL_RCC_OscConfig+0x678>)
 8003326:	400a      	ands	r2, r1
 8003328:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d015      	beq.n	800335e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003332:	f7fe ffe5 	bl	8002300 <HAL_GetTick>
 8003336:	0003      	movs	r3, r0
 8003338:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800333a:	e009      	b.n	8003350 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fe ffe0 	bl	8002300 <HAL_GetTick>
 8003340:	0002      	movs	r2, r0
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	4a52      	ldr	r2, [pc, #328]	@ (8003490 <HAL_RCC_OscConfig+0x67c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e11a      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003350:	4b4b      	ldr	r3, [pc, #300]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003352:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4013      	ands	r3, r2
 800335a:	d0ef      	beq.n	800333c <HAL_RCC_OscConfig+0x528>
 800335c:	e014      	b.n	8003388 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335e:	f7fe ffcf 	bl	8002300 <HAL_GetTick>
 8003362:	0003      	movs	r3, r0
 8003364:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003366:	e009      	b.n	800337c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fe ffca 	bl	8002300 <HAL_GetTick>
 800336c:	0002      	movs	r2, r0
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	4a47      	ldr	r2, [pc, #284]	@ (8003490 <HAL_RCC_OscConfig+0x67c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e104      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800337c:	4b40      	ldr	r3, [pc, #256]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 800337e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003380:	2380      	movs	r3, #128	@ 0x80
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4013      	ands	r3, r2
 8003386:	d1ef      	bne.n	8003368 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003388:	2327      	movs	r3, #39	@ 0x27
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d105      	bne.n	800339e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003392:	4b3b      	ldr	r3, [pc, #236]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003394:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003396:	4b3a      	ldr	r3, [pc, #232]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003398:	493e      	ldr	r1, [pc, #248]	@ (8003494 <HAL_RCC_OscConfig+0x680>)
 800339a:	400a      	ands	r2, r1
 800339c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2220      	movs	r2, #32
 80033a4:	4013      	ands	r3, r2
 80033a6:	d049      	beq.n	800343c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d026      	beq.n	80033fe <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80033b0:	4b33      	ldr	r3, [pc, #204]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	4b32      	ldr	r3, [pc, #200]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80033b6:	2101      	movs	r1, #1
 80033b8:	430a      	orrs	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	4b30      	ldr	r3, [pc, #192]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80033be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80033c2:	2101      	movs	r1, #1
 80033c4:	430a      	orrs	r2, r1
 80033c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80033c8:	4b33      	ldr	r3, [pc, #204]	@ (8003498 <HAL_RCC_OscConfig+0x684>)
 80033ca:	6a1a      	ldr	r2, [r3, #32]
 80033cc:	4b32      	ldr	r3, [pc, #200]	@ (8003498 <HAL_RCC_OscConfig+0x684>)
 80033ce:	2180      	movs	r1, #128	@ 0x80
 80033d0:	0189      	lsls	r1, r1, #6
 80033d2:	430a      	orrs	r2, r1
 80033d4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d6:	f7fe ff93 	bl	8002300 <HAL_GetTick>
 80033da:	0003      	movs	r3, r0
 80033dc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e0:	f7fe ff8e 	bl	8002300 <HAL_GetTick>
 80033e4:	0002      	movs	r2, r0
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e0c9      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033f2:	4b23      	ldr	r3, [pc, #140]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2202      	movs	r2, #2
 80033f8:	4013      	ands	r3, r2
 80033fa:	d0f1      	beq.n	80033e0 <HAL_RCC_OscConfig+0x5cc>
 80033fc:	e01e      	b.n	800343c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80033fe:	4b20      	ldr	r3, [pc, #128]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	4b1f      	ldr	r3, [pc, #124]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003404:	2101      	movs	r1, #1
 8003406:	438a      	bics	r2, r1
 8003408:	609a      	str	r2, [r3, #8]
 800340a:	4b23      	ldr	r3, [pc, #140]	@ (8003498 <HAL_RCC_OscConfig+0x684>)
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	4b22      	ldr	r3, [pc, #136]	@ (8003498 <HAL_RCC_OscConfig+0x684>)
 8003410:	4922      	ldr	r1, [pc, #136]	@ (800349c <HAL_RCC_OscConfig+0x688>)
 8003412:	400a      	ands	r2, r1
 8003414:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe ff73 	bl	8002300 <HAL_GetTick>
 800341a:	0003      	movs	r3, r0
 800341c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003420:	f7fe ff6e 	bl	8002300 <HAL_GetTick>
 8003424:	0002      	movs	r2, r0
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e0a9      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003432:	4b13      	ldr	r3, [pc, #76]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2202      	movs	r2, #2
 8003438:	4013      	ands	r3, r2
 800343a:	d1f1      	bne.n	8003420 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	d100      	bne.n	8003446 <HAL_RCC_OscConfig+0x632>
 8003444:	e09e      	b.n	8003584 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	2b0c      	cmp	r3, #12
 800344a:	d100      	bne.n	800344e <HAL_RCC_OscConfig+0x63a>
 800344c:	e077      	b.n	800353e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003452:	2b02      	cmp	r3, #2
 8003454:	d158      	bne.n	8003508 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b0a      	ldr	r3, [pc, #40]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	4b09      	ldr	r3, [pc, #36]	@ (8003480 <HAL_RCC_OscConfig+0x66c>)
 800345c:	4910      	ldr	r1, [pc, #64]	@ (80034a0 <HAL_RCC_OscConfig+0x68c>)
 800345e:	400a      	ands	r2, r1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fe ff4d 	bl	8002300 <HAL_GetTick>
 8003466:	0003      	movs	r3, r0
 8003468:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800346a:	e01b      	b.n	80034a4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346c:	f7fe ff48 	bl	8002300 <HAL_GetTick>
 8003470:	0002      	movs	r2, r0
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d914      	bls.n	80034a4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e083      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	40021000 	.word	0x40021000
 8003484:	fffffeff 	.word	0xfffffeff
 8003488:	40007000 	.word	0x40007000
 800348c:	fffffbff 	.word	0xfffffbff
 8003490:	00001388 	.word	0x00001388
 8003494:	efffffff 	.word	0xefffffff
 8003498:	40010000 	.word	0x40010000
 800349c:	ffffdfff 	.word	0xffffdfff
 80034a0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003590 <HAL_RCC_OscConfig+0x77c>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	2380      	movs	r3, #128	@ 0x80
 80034aa:	049b      	lsls	r3, r3, #18
 80034ac:	4013      	ands	r3, r2
 80034ae:	d1dd      	bne.n	800346c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b0:	4b37      	ldr	r3, [pc, #220]	@ (8003590 <HAL_RCC_OscConfig+0x77c>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4a37      	ldr	r2, [pc, #220]	@ (8003594 <HAL_RCC_OscConfig+0x780>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	0019      	movs	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c8:	431a      	orrs	r2, r3
 80034ca:	4b31      	ldr	r3, [pc, #196]	@ (8003590 <HAL_RCC_OscConfig+0x77c>)
 80034cc:	430a      	orrs	r2, r1
 80034ce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003590 <HAL_RCC_OscConfig+0x77c>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003590 <HAL_RCC_OscConfig+0x77c>)
 80034d6:	2180      	movs	r1, #128	@ 0x80
 80034d8:	0449      	lsls	r1, r1, #17
 80034da:	430a      	orrs	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe ff0f 	bl	8002300 <HAL_GetTick>
 80034e2:	0003      	movs	r3, r0
 80034e4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe ff0a 	bl	8002300 <HAL_GetTick>
 80034ec:	0002      	movs	r2, r0
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e045      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80034fa:	4b25      	ldr	r3, [pc, #148]	@ (8003590 <HAL_RCC_OscConfig+0x77c>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	2380      	movs	r3, #128	@ 0x80
 8003500:	049b      	lsls	r3, r3, #18
 8003502:	4013      	ands	r3, r2
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x6d4>
 8003506:	e03d      	b.n	8003584 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003508:	4b21      	ldr	r3, [pc, #132]	@ (8003590 <HAL_RCC_OscConfig+0x77c>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b20      	ldr	r3, [pc, #128]	@ (8003590 <HAL_RCC_OscConfig+0x77c>)
 800350e:	4922      	ldr	r1, [pc, #136]	@ (8003598 <HAL_RCC_OscConfig+0x784>)
 8003510:	400a      	ands	r2, r1
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fe fef4 	bl	8002300 <HAL_GetTick>
 8003518:	0003      	movs	r3, r0
 800351a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351e:	f7fe feef 	bl	8002300 <HAL_GetTick>
 8003522:	0002      	movs	r2, r0
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e02a      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003530:	4b17      	ldr	r3, [pc, #92]	@ (8003590 <HAL_RCC_OscConfig+0x77c>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	2380      	movs	r3, #128	@ 0x80
 8003536:	049b      	lsls	r3, r3, #18
 8003538:	4013      	ands	r3, r2
 800353a:	d1f0      	bne.n	800351e <HAL_RCC_OscConfig+0x70a>
 800353c:	e022      	b.n	8003584 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e01d      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800354a:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <HAL_RCC_OscConfig+0x77c>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	2380      	movs	r3, #128	@ 0x80
 8003554:	025b      	lsls	r3, r3, #9
 8003556:	401a      	ands	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355c:	429a      	cmp	r2, r3
 800355e:	d10f      	bne.n	8003580 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	23f0      	movs	r3, #240	@ 0xf0
 8003564:	039b      	lsls	r3, r3, #14
 8003566:	401a      	ands	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d107      	bne.n	8003580 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	23c0      	movs	r3, #192	@ 0xc0
 8003574:	041b      	lsls	r3, r3, #16
 8003576:	401a      	ands	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b00a      	add	sp, #40	@ 0x28
 800358c:	bdb0      	pop	{r4, r5, r7, pc}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	40021000 	.word	0x40021000
 8003594:	ff02ffff 	.word	0xff02ffff
 8003598:	feffffff 	.word	0xfeffffff

0800359c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800359c:	b5b0      	push	{r4, r5, r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e128      	b.n	8003802 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b0:	4b96      	ldr	r3, [pc, #600]	@ (800380c <HAL_RCC_ClockConfig+0x270>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2201      	movs	r2, #1
 80035b6:	4013      	ands	r3, r2
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d91e      	bls.n	80035fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b93      	ldr	r3, [pc, #588]	@ (800380c <HAL_RCC_ClockConfig+0x270>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2201      	movs	r2, #1
 80035c4:	4393      	bics	r3, r2
 80035c6:	0019      	movs	r1, r3
 80035c8:	4b90      	ldr	r3, [pc, #576]	@ (800380c <HAL_RCC_ClockConfig+0x270>)
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035d0:	f7fe fe96 	bl	8002300 <HAL_GetTick>
 80035d4:	0003      	movs	r3, r0
 80035d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d8:	e009      	b.n	80035ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035da:	f7fe fe91 	bl	8002300 <HAL_GetTick>
 80035de:	0002      	movs	r2, r0
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	4a8a      	ldr	r2, [pc, #552]	@ (8003810 <HAL_RCC_ClockConfig+0x274>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e109      	b.n	8003802 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b87      	ldr	r3, [pc, #540]	@ (800380c <HAL_RCC_ClockConfig+0x270>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2201      	movs	r2, #1
 80035f4:	4013      	ands	r3, r2
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1ee      	bne.n	80035da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2202      	movs	r2, #2
 8003602:	4013      	ands	r3, r2
 8003604:	d009      	beq.n	800361a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003606:	4b83      	ldr	r3, [pc, #524]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	22f0      	movs	r2, #240	@ 0xf0
 800360c:	4393      	bics	r3, r2
 800360e:	0019      	movs	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	4b7f      	ldr	r3, [pc, #508]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 8003616:	430a      	orrs	r2, r1
 8003618:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2201      	movs	r2, #1
 8003620:	4013      	ands	r3, r2
 8003622:	d100      	bne.n	8003626 <HAL_RCC_ClockConfig+0x8a>
 8003624:	e089      	b.n	800373a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b02      	cmp	r3, #2
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800362e:	4b79      	ldr	r3, [pc, #484]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	2380      	movs	r3, #128	@ 0x80
 8003634:	029b      	lsls	r3, r3, #10
 8003636:	4013      	ands	r3, r2
 8003638:	d120      	bne.n	800367c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e0e1      	b.n	8003802 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b03      	cmp	r3, #3
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003646:	4b73      	ldr	r3, [pc, #460]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	2380      	movs	r3, #128	@ 0x80
 800364c:	049b      	lsls	r3, r3, #18
 800364e:	4013      	ands	r3, r2
 8003650:	d114      	bne.n	800367c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0d5      	b.n	8003802 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d106      	bne.n	800366c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800365e:	4b6d      	ldr	r3, [pc, #436]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2204      	movs	r2, #4
 8003664:	4013      	ands	r3, r2
 8003666:	d109      	bne.n	800367c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0ca      	b.n	8003802 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800366c:	4b69      	ldr	r3, [pc, #420]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2380      	movs	r3, #128	@ 0x80
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4013      	ands	r3, r2
 8003676:	d101      	bne.n	800367c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0c2      	b.n	8003802 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367c:	4b65      	ldr	r3, [pc, #404]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2203      	movs	r2, #3
 8003682:	4393      	bics	r3, r2
 8003684:	0019      	movs	r1, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	4b62      	ldr	r3, [pc, #392]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 800368c:	430a      	orrs	r2, r1
 800368e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003690:	f7fe fe36 	bl	8002300 <HAL_GetTick>
 8003694:	0003      	movs	r3, r0
 8003696:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d111      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036a0:	e009      	b.n	80036b6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a2:	f7fe fe2d 	bl	8002300 <HAL_GetTick>
 80036a6:	0002      	movs	r2, r0
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	4a58      	ldr	r2, [pc, #352]	@ (8003810 <HAL_RCC_ClockConfig+0x274>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e0a5      	b.n	8003802 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036b6:	4b57      	ldr	r3, [pc, #348]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	220c      	movs	r2, #12
 80036bc:	4013      	ands	r3, r2
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d1ef      	bne.n	80036a2 <HAL_RCC_ClockConfig+0x106>
 80036c2:	e03a      	b.n	800373a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b03      	cmp	r3, #3
 80036ca:	d111      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036cc:	e009      	b.n	80036e2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ce:	f7fe fe17 	bl	8002300 <HAL_GetTick>
 80036d2:	0002      	movs	r2, r0
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003810 <HAL_RCC_ClockConfig+0x274>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e08f      	b.n	8003802 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	220c      	movs	r2, #12
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b0c      	cmp	r3, #12
 80036ec:	d1ef      	bne.n	80036ce <HAL_RCC_ClockConfig+0x132>
 80036ee:	e024      	b.n	800373a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d11b      	bne.n	8003730 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80036f8:	e009      	b.n	800370e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fa:	f7fe fe01 	bl	8002300 <HAL_GetTick>
 80036fe:	0002      	movs	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	4a42      	ldr	r2, [pc, #264]	@ (8003810 <HAL_RCC_ClockConfig+0x274>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e079      	b.n	8003802 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800370e:	4b41      	ldr	r3, [pc, #260]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	220c      	movs	r2, #12
 8003714:	4013      	ands	r3, r2
 8003716:	2b04      	cmp	r3, #4
 8003718:	d1ef      	bne.n	80036fa <HAL_RCC_ClockConfig+0x15e>
 800371a:	e00e      	b.n	800373a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800371c:	f7fe fdf0 	bl	8002300 <HAL_GetTick>
 8003720:	0002      	movs	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	4a3a      	ldr	r2, [pc, #232]	@ (8003810 <HAL_RCC_ClockConfig+0x274>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e068      	b.n	8003802 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003730:	4b38      	ldr	r3, [pc, #224]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	220c      	movs	r2, #12
 8003736:	4013      	ands	r3, r2
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800373a:	4b34      	ldr	r3, [pc, #208]	@ (800380c <HAL_RCC_ClockConfig+0x270>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2201      	movs	r2, #1
 8003740:	4013      	ands	r3, r2
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d21e      	bcs.n	8003786 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003748:	4b30      	ldr	r3, [pc, #192]	@ (800380c <HAL_RCC_ClockConfig+0x270>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2201      	movs	r2, #1
 800374e:	4393      	bics	r3, r2
 8003750:	0019      	movs	r1, r3
 8003752:	4b2e      	ldr	r3, [pc, #184]	@ (800380c <HAL_RCC_ClockConfig+0x270>)
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800375a:	f7fe fdd1 	bl	8002300 <HAL_GetTick>
 800375e:	0003      	movs	r3, r0
 8003760:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	e009      	b.n	8003778 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003764:	f7fe fdcc 	bl	8002300 <HAL_GetTick>
 8003768:	0002      	movs	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	4a28      	ldr	r2, [pc, #160]	@ (8003810 <HAL_RCC_ClockConfig+0x274>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e044      	b.n	8003802 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003778:	4b24      	ldr	r3, [pc, #144]	@ (800380c <HAL_RCC_ClockConfig+0x270>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2201      	movs	r2, #1
 800377e:	4013      	ands	r3, r2
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d1ee      	bne.n	8003764 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2204      	movs	r2, #4
 800378c:	4013      	ands	r3, r2
 800378e:	d009      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003790:	4b20      	ldr	r3, [pc, #128]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a20      	ldr	r2, [pc, #128]	@ (8003818 <HAL_RCC_ClockConfig+0x27c>)
 8003796:	4013      	ands	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	4b1d      	ldr	r3, [pc, #116]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 80037a0:	430a      	orrs	r2, r1
 80037a2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2208      	movs	r2, #8
 80037aa:	4013      	ands	r3, r2
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037ae:	4b19      	ldr	r3, [pc, #100]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	4a1a      	ldr	r2, [pc, #104]	@ (800381c <HAL_RCC_ClockConfig+0x280>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	0019      	movs	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	00da      	lsls	r2, r3, #3
 80037be:	4b15      	ldr	r3, [pc, #84]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 80037c0:	430a      	orrs	r2, r1
 80037c2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037c4:	f000 f832 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80037c8:	0001      	movs	r1, r0
 80037ca:	4b12      	ldr	r3, [pc, #72]	@ (8003814 <HAL_RCC_ClockConfig+0x278>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	220f      	movs	r2, #15
 80037d2:	4013      	ands	r3, r2
 80037d4:	4a12      	ldr	r2, [pc, #72]	@ (8003820 <HAL_RCC_ClockConfig+0x284>)
 80037d6:	5cd3      	ldrb	r3, [r2, r3]
 80037d8:	000a      	movs	r2, r1
 80037da:	40da      	lsrs	r2, r3
 80037dc:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <HAL_RCC_ClockConfig+0x288>)
 80037de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037e0:	4b11      	ldr	r3, [pc, #68]	@ (8003828 <HAL_RCC_ClockConfig+0x28c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	250b      	movs	r5, #11
 80037e6:	197c      	adds	r4, r7, r5
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7fe fd43 	bl	8002274 <HAL_InitTick>
 80037ee:	0003      	movs	r3, r0
 80037f0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80037f2:	197b      	adds	r3, r7, r5
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80037fa:	197b      	adds	r3, r7, r5
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	e000      	b.n	8003802 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	0018      	movs	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	b004      	add	sp, #16
 8003808:	bdb0      	pop	{r4, r5, r7, pc}
 800380a:	46c0      	nop			@ (mov r8, r8)
 800380c:	40022000 	.word	0x40022000
 8003810:	00001388 	.word	0x00001388
 8003814:	40021000 	.word	0x40021000
 8003818:	fffff8ff 	.word	0xfffff8ff
 800381c:	ffffc7ff 	.word	0xffffc7ff
 8003820:	08004d98 	.word	0x08004d98
 8003824:	20000000 	.word	0x20000000
 8003828:	20000004 	.word	0x20000004

0800382c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003832:	4b3c      	ldr	r3, [pc, #240]	@ (8003924 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	220c      	movs	r2, #12
 800383c:	4013      	ands	r3, r2
 800383e:	2b0c      	cmp	r3, #12
 8003840:	d013      	beq.n	800386a <HAL_RCC_GetSysClockFreq+0x3e>
 8003842:	d85c      	bhi.n	80038fe <HAL_RCC_GetSysClockFreq+0xd2>
 8003844:	2b04      	cmp	r3, #4
 8003846:	d002      	beq.n	800384e <HAL_RCC_GetSysClockFreq+0x22>
 8003848:	2b08      	cmp	r3, #8
 800384a:	d00b      	beq.n	8003864 <HAL_RCC_GetSysClockFreq+0x38>
 800384c:	e057      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800384e:	4b35      	ldr	r3, [pc, #212]	@ (8003924 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2210      	movs	r2, #16
 8003854:	4013      	ands	r3, r2
 8003856:	d002      	beq.n	800385e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003858:	4b33      	ldr	r3, [pc, #204]	@ (8003928 <HAL_RCC_GetSysClockFreq+0xfc>)
 800385a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800385c:	e05d      	b.n	800391a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800385e:	4b33      	ldr	r3, [pc, #204]	@ (800392c <HAL_RCC_GetSysClockFreq+0x100>)
 8003860:	613b      	str	r3, [r7, #16]
      break;
 8003862:	e05a      	b.n	800391a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003864:	4b32      	ldr	r3, [pc, #200]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x104>)
 8003866:	613b      	str	r3, [r7, #16]
      break;
 8003868:	e057      	b.n	800391a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	0c9b      	lsrs	r3, r3, #18
 800386e:	220f      	movs	r2, #15
 8003870:	4013      	ands	r3, r2
 8003872:	4a30      	ldr	r2, [pc, #192]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x108>)
 8003874:	5cd3      	ldrb	r3, [r2, r3]
 8003876:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	0d9b      	lsrs	r3, r3, #22
 800387c:	2203      	movs	r2, #3
 800387e:	4013      	ands	r3, r2
 8003880:	3301      	adds	r3, #1
 8003882:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003884:	4b27      	ldr	r3, [pc, #156]	@ (8003924 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	2380      	movs	r3, #128	@ 0x80
 800388a:	025b      	lsls	r3, r3, #9
 800388c:	4013      	ands	r3, r2
 800388e:	d00f      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	000a      	movs	r2, r1
 8003894:	0152      	lsls	r2, r2, #5
 8003896:	1a52      	subs	r2, r2, r1
 8003898:	0193      	lsls	r3, r2, #6
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	185b      	adds	r3, r3, r1
 80038a0:	025b      	lsls	r3, r3, #9
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7fc fc2f 	bl	8000108 <__udivsi3>
 80038aa:	0003      	movs	r3, r0
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e023      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80038b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003924 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2210      	movs	r2, #16
 80038b6:	4013      	ands	r3, r2
 80038b8:	d00f      	beq.n	80038da <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	000a      	movs	r2, r1
 80038be:	0152      	lsls	r2, r2, #5
 80038c0:	1a52      	subs	r2, r2, r1
 80038c2:	0193      	lsls	r3, r2, #6
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	185b      	adds	r3, r3, r1
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	0018      	movs	r0, r3
 80038d0:	f7fc fc1a 	bl	8000108 <__udivsi3>
 80038d4:	0003      	movs	r3, r0
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e00e      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	000a      	movs	r2, r1
 80038de:	0152      	lsls	r2, r2, #5
 80038e0:	1a52      	subs	r2, r2, r1
 80038e2:	0193      	lsls	r3, r2, #6
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	185b      	adds	r3, r3, r1
 80038ea:	029b      	lsls	r3, r3, #10
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7fc fc0a 	bl	8000108 <__udivsi3>
 80038f4:	0003      	movs	r3, r0
 80038f6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	613b      	str	r3, [r7, #16]
      break;
 80038fc:	e00d      	b.n	800391a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80038fe:	4b09      	ldr	r3, [pc, #36]	@ (8003924 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	0b5b      	lsrs	r3, r3, #13
 8003904:	2207      	movs	r2, #7
 8003906:	4013      	ands	r3, r2
 8003908:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	3301      	adds	r3, #1
 800390e:	2280      	movs	r2, #128	@ 0x80
 8003910:	0212      	lsls	r2, r2, #8
 8003912:	409a      	lsls	r2, r3
 8003914:	0013      	movs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
      break;
 8003918:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800391a:	693b      	ldr	r3, [r7, #16]
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b006      	add	sp, #24
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40021000 	.word	0x40021000
 8003928:	003d0900 	.word	0x003d0900
 800392c:	00f42400 	.word	0x00f42400
 8003930:	007a1200 	.word	0x007a1200
 8003934:	08004da8 	.word	0x08004da8

08003938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e032      	b.n	80039b0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2239      	movs	r2, #57	@ 0x39
 800394e:	5c9b      	ldrb	r3, [r3, r2]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d107      	bne.n	8003966 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2238      	movs	r2, #56	@ 0x38
 800395a:	2100      	movs	r1, #0
 800395c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	0018      	movs	r0, r3
 8003962:	f7fe fbdf 	bl	8002124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2239      	movs	r2, #57	@ 0x39
 800396a:	2102      	movs	r1, #2
 800396c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3304      	adds	r3, #4
 8003976:	0019      	movs	r1, r3
 8003978:	0010      	movs	r0, r2
 800397a:	f000 f955 	bl	8003c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	223e      	movs	r2, #62	@ 0x3e
 8003982:	2101      	movs	r1, #1
 8003984:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	223a      	movs	r2, #58	@ 0x3a
 800398a:	2101      	movs	r1, #1
 800398c:	5499      	strb	r1, [r3, r2]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	223b      	movs	r2, #59	@ 0x3b
 8003992:	2101      	movs	r1, #1
 8003994:	5499      	strb	r1, [r3, r2]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	223c      	movs	r2, #60	@ 0x3c
 800399a:	2101      	movs	r1, #1
 800399c:	5499      	strb	r1, [r3, r2]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	223d      	movs	r2, #61	@ 0x3d
 80039a2:	2101      	movs	r1, #1
 80039a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2239      	movs	r2, #57	@ 0x39
 80039aa:	2101      	movs	r1, #1
 80039ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b002      	add	sp, #8
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2239      	movs	r2, #57	@ 0x39
 80039c4:	5c9b      	ldrb	r3, [r3, r2]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d001      	beq.n	80039d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e02e      	b.n	8003a2e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2239      	movs	r2, #57	@ 0x39
 80039d4:	2102      	movs	r1, #2
 80039d6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	2380      	movs	r3, #128	@ 0x80
 80039de:	05db      	lsls	r3, r3, #23
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d009      	beq.n	80039f8 <HAL_TIM_Base_Start+0x40>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a13      	ldr	r2, [pc, #76]	@ (8003a38 <HAL_TIM_Base_Start+0x80>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_TIM_Base_Start+0x40>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a12      	ldr	r2, [pc, #72]	@ (8003a3c <HAL_TIM_Base_Start+0x84>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d111      	bne.n	8003a1c <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2207      	movs	r2, #7
 8003a00:	4013      	ands	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b06      	cmp	r3, #6
 8003a08:	d010      	beq.n	8003a2c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2101      	movs	r1, #1
 8003a16:	430a      	orrs	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1a:	e007      	b.n	8003a2c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2101      	movs	r1, #1
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	0018      	movs	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b004      	add	sp, #16
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	40010800 	.word	0x40010800
 8003a3c:	40011400 	.word	0x40011400

08003a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d021      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2202      	movs	r2, #2
 8003a64:	4013      	ands	r3, r2
 8003a66:	d01d      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	4252      	negs	r2, r2
 8003a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2203      	movs	r2, #3
 8003a80:	4013      	ands	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 f8b6 	bl	8003bf8 <HAL_TIM_IC_CaptureCallback>
 8003a8c:	e007      	b.n	8003a9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	0018      	movs	r0, r3
 8003a92:	f000 f8a9 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f000 f8b5 	bl	8003c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d022      	beq.n	8003af2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2204      	movs	r2, #4
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d01e      	beq.n	8003af2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2205      	movs	r2, #5
 8003aba:	4252      	negs	r2, r2
 8003abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	23c0      	movs	r3, #192	@ 0xc0
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 f88f 	bl	8003bf8 <HAL_TIM_IC_CaptureCallback>
 8003ada:	e007      	b.n	8003aec <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f000 f882 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f000 f88e 	bl	8003c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2208      	movs	r2, #8
 8003af6:	4013      	ands	r3, r2
 8003af8:	d021      	beq.n	8003b3e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2208      	movs	r2, #8
 8003afe:	4013      	ands	r3, r2
 8003b00:	d01d      	beq.n	8003b3e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2209      	movs	r2, #9
 8003b08:	4252      	negs	r2, r2
 8003b0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	2203      	movs	r2, #3
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d004      	beq.n	8003b28 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 f869 	bl	8003bf8 <HAL_TIM_IC_CaptureCallback>
 8003b26:	e007      	b.n	8003b38 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 f85c 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 f868 	bl	8003c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2210      	movs	r2, #16
 8003b42:	4013      	ands	r3, r2
 8003b44:	d022      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2210      	movs	r2, #16
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d01e      	beq.n	8003b8c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2211      	movs	r2, #17
 8003b54:	4252      	negs	r2, r2
 8003b56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	23c0      	movs	r3, #192	@ 0xc0
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d004      	beq.n	8003b76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 f842 	bl	8003bf8 <HAL_TIM_IC_CaptureCallback>
 8003b74:	e007      	b.n	8003b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f000 f835 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 f841 	bl	8003c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	4013      	ands	r3, r2
 8003b92:	d00c      	beq.n	8003bae <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d008      	beq.n	8003bae <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	4252      	negs	r2, r2
 8003ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f000 f815 	bl	8003bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2240      	movs	r2, #64	@ 0x40
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2240      	movs	r2, #64	@ 0x40
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d008      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2241      	movs	r2, #65	@ 0x41
 8003bc4:	4252      	negs	r2, r2
 8003bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 f824 	bl	8003c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bd0:	46c0      	nop			@ (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b004      	add	sp, #16
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003be0:	46c0      	nop			@ (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bf0:	46c0      	nop			@ (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c00:	46c0      	nop			@ (mov r8, r8)
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b002      	add	sp, #8
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c10:	46c0      	nop			@ (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b002      	add	sp, #8
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c20:	46c0      	nop			@ (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b002      	add	sp, #8
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	2380      	movs	r3, #128	@ 0x80
 8003c3c:	05db      	lsls	r3, r3, #23
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d007      	beq.n	8003c52 <TIM_Base_SetConfig+0x2a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a22      	ldr	r2, [pc, #136]	@ (8003cd0 <TIM_Base_SetConfig+0xa8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_Base_SetConfig+0x2a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a21      	ldr	r2, [pc, #132]	@ (8003cd4 <TIM_Base_SetConfig+0xac>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2270      	movs	r2, #112	@ 0x70
 8003c56:	4393      	bics	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	2380      	movs	r3, #128	@ 0x80
 8003c68:	05db      	lsls	r3, r3, #23
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d007      	beq.n	8003c7e <TIM_Base_SetConfig+0x56>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a17      	ldr	r2, [pc, #92]	@ (8003cd0 <TIM_Base_SetConfig+0xa8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_Base_SetConfig+0x56>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a16      	ldr	r2, [pc, #88]	@ (8003cd4 <TIM_Base_SetConfig+0xac>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d108      	bne.n	8003c90 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4a15      	ldr	r2, [pc, #84]	@ (8003cd8 <TIM_Base_SetConfig+0xb0>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2280      	movs	r2, #128	@ 0x80
 8003c94:	4393      	bics	r3, r2
 8003c96:	001a      	movs	r2, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	601a      	str	r2, [r3, #0]
}
 8003cc8:	46c0      	nop			@ (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b004      	add	sp, #16
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40010800 	.word	0x40010800
 8003cd4:	40011400 	.word	0x40011400
 8003cd8:	fffffcff 	.word	0xfffffcff

08003cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2238      	movs	r2, #56	@ 0x38
 8003cea:	5c9b      	ldrb	r3, [r3, r2]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e042      	b.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2238      	movs	r2, #56	@ 0x38
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2239      	movs	r2, #57	@ 0x39
 8003d00:	2102      	movs	r1, #2
 8003d02:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2270      	movs	r2, #112	@ 0x70
 8003d18:	4393      	bics	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	2380      	movs	r3, #128	@ 0x80
 8003d34:	05db      	lsls	r3, r3, #23
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d009      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a11      	ldr	r2, [pc, #68]	@ (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a0f      	ldr	r2, [pc, #60]	@ (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10c      	bne.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2280      	movs	r2, #128	@ 0x80
 8003d52:	4393      	bics	r3, r2
 8003d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2239      	movs	r2, #57	@ 0x39
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2238      	movs	r2, #56	@ 0x38
 8003d74:	2100      	movs	r1, #0
 8003d76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b004      	add	sp, #16
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			@ (mov r8, r8)
 8003d84:	40010800 	.word	0x40010800
 8003d88:	40011400 	.word	0x40011400

08003d8c <memset>:
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	1882      	adds	r2, r0, r2
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d100      	bne.n	8003d96 <memset+0xa>
 8003d94:	4770      	bx	lr
 8003d96:	7019      	strb	r1, [r3, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	e7f9      	b.n	8003d90 <memset+0x4>

08003d9c <__libc_init_array>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	2600      	movs	r6, #0
 8003da0:	4c0c      	ldr	r4, [pc, #48]	@ (8003dd4 <__libc_init_array+0x38>)
 8003da2:	4d0d      	ldr	r5, [pc, #52]	@ (8003dd8 <__libc_init_array+0x3c>)
 8003da4:	1b64      	subs	r4, r4, r5
 8003da6:	10a4      	asrs	r4, r4, #2
 8003da8:	42a6      	cmp	r6, r4
 8003daa:	d109      	bne.n	8003dc0 <__libc_init_array+0x24>
 8003dac:	2600      	movs	r6, #0
 8003dae:	f000 ffe5 	bl	8004d7c <_init>
 8003db2:	4c0a      	ldr	r4, [pc, #40]	@ (8003ddc <__libc_init_array+0x40>)
 8003db4:	4d0a      	ldr	r5, [pc, #40]	@ (8003de0 <__libc_init_array+0x44>)
 8003db6:	1b64      	subs	r4, r4, r5
 8003db8:	10a4      	asrs	r4, r4, #2
 8003dba:	42a6      	cmp	r6, r4
 8003dbc:	d105      	bne.n	8003dca <__libc_init_array+0x2e>
 8003dbe:	bd70      	pop	{r4, r5, r6, pc}
 8003dc0:	00b3      	lsls	r3, r6, #2
 8003dc2:	58eb      	ldr	r3, [r5, r3]
 8003dc4:	4798      	blx	r3
 8003dc6:	3601      	adds	r6, #1
 8003dc8:	e7ee      	b.n	8003da8 <__libc_init_array+0xc>
 8003dca:	00b3      	lsls	r3, r6, #2
 8003dcc:	58eb      	ldr	r3, [r5, r3]
 8003dce:	4798      	blx	r3
 8003dd0:	3601      	adds	r6, #1
 8003dd2:	e7f2      	b.n	8003dba <__libc_init_array+0x1e>
 8003dd4:	08004f90 	.word	0x08004f90
 8003dd8:	08004f90 	.word	0x08004f90
 8003ddc:	08004f94 	.word	0x08004f94
 8003de0:	08004f90 	.word	0x08004f90

08003de4 <sin>:
 8003de4:	b530      	push	{r4, r5, lr}
 8003de6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e64 <sin+0x80>)
 8003de8:	004b      	lsls	r3, r1, #1
 8003dea:	b087      	sub	sp, #28
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d806      	bhi.n	8003e00 <sin+0x1c>
 8003df2:	2300      	movs	r3, #0
 8003df4:	2200      	movs	r2, #0
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f000 f8f7 	bl	8003fec <__kernel_sin>
 8003dfe:	e006      	b.n	8003e0e <sin+0x2a>
 8003e00:	4a19      	ldr	r2, [pc, #100]	@ (8003e68 <sin+0x84>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d905      	bls.n	8003e12 <sin+0x2e>
 8003e06:	0002      	movs	r2, r0
 8003e08:	000b      	movs	r3, r1
 8003e0a:	f7fd fb1d 	bl	8001448 <__aeabi_dsub>
 8003e0e:	b007      	add	sp, #28
 8003e10:	bd30      	pop	{r4, r5, pc}
 8003e12:	aa02      	add	r2, sp, #8
 8003e14:	f000 f996 	bl	8004144 <__ieee754_rem_pio2>
 8003e18:	9c04      	ldr	r4, [sp, #16]
 8003e1a:	9d05      	ldr	r5, [sp, #20]
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	4003      	ands	r3, r0
 8003e20:	9802      	ldr	r0, [sp, #8]
 8003e22:	9903      	ldr	r1, [sp, #12]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d008      	beq.n	8003e3a <sin+0x56>
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d00b      	beq.n	8003e44 <sin+0x60>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d113      	bne.n	8003e58 <sin+0x74>
 8003e30:	3301      	adds	r3, #1
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	0022      	movs	r2, r4
 8003e36:	002b      	movs	r3, r5
 8003e38:	e7df      	b.n	8003dfa <sin+0x16>
 8003e3a:	0022      	movs	r2, r4
 8003e3c:	002b      	movs	r3, r5
 8003e3e:	f000 f815 	bl	8003e6c <__kernel_cos>
 8003e42:	e7e4      	b.n	8003e0e <sin+0x2a>
 8003e44:	2301      	movs	r3, #1
 8003e46:	0022      	movs	r2, r4
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	002b      	movs	r3, r5
 8003e4c:	f000 f8ce 	bl	8003fec <__kernel_sin>
 8003e50:	2380      	movs	r3, #128	@ 0x80
 8003e52:	061b      	lsls	r3, r3, #24
 8003e54:	18c9      	adds	r1, r1, r3
 8003e56:	e7da      	b.n	8003e0e <sin+0x2a>
 8003e58:	0022      	movs	r2, r4
 8003e5a:	002b      	movs	r3, r5
 8003e5c:	f000 f806 	bl	8003e6c <__kernel_cos>
 8003e60:	e7f6      	b.n	8003e50 <sin+0x6c>
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	3fe921fb 	.word	0x3fe921fb
 8003e68:	7fefffff 	.word	0x7fefffff

08003e6c <__kernel_cos>:
 8003e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	9204      	str	r2, [sp, #16]
 8003e72:	9305      	str	r3, [sp, #20]
 8003e74:	004b      	lsls	r3, r1, #1
 8003e76:	085b      	lsrs	r3, r3, #1
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	23f9      	movs	r3, #249	@ 0xf9
 8003e7c:	9a01      	ldr	r2, [sp, #4]
 8003e7e:	0004      	movs	r4, r0
 8003e80:	000d      	movs	r5, r1
 8003e82:	059b      	lsls	r3, r3, #22
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d204      	bcs.n	8003e92 <__kernel_cos+0x26>
 8003e88:	f7fd fee8 	bl	8001c5c <__aeabi_d2iz>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d100      	bne.n	8003e92 <__kernel_cos+0x26>
 8003e90:	e084      	b.n	8003f9c <__kernel_cos+0x130>
 8003e92:	0022      	movs	r2, r4
 8003e94:	002b      	movs	r3, r5
 8003e96:	0020      	movs	r0, r4
 8003e98:	0029      	movs	r1, r5
 8003e9a:	f7fc ffef 	bl	8000e7c <__aeabi_dmul>
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	4b40      	ldr	r3, [pc, #256]	@ (8003fa4 <__kernel_cos+0x138>)
 8003ea2:	0006      	movs	r6, r0
 8003ea4:	000f      	movs	r7, r1
 8003ea6:	f7fc ffe9 	bl	8000e7c <__aeabi_dmul>
 8003eaa:	4a3f      	ldr	r2, [pc, #252]	@ (8003fa8 <__kernel_cos+0x13c>)
 8003eac:	9002      	str	r0, [sp, #8]
 8003eae:	9103      	str	r1, [sp, #12]
 8003eb0:	4b3e      	ldr	r3, [pc, #248]	@ (8003fac <__kernel_cos+0x140>)
 8003eb2:	0030      	movs	r0, r6
 8003eb4:	0039      	movs	r1, r7
 8003eb6:	f7fc ffe1 	bl	8000e7c <__aeabi_dmul>
 8003eba:	4a3d      	ldr	r2, [pc, #244]	@ (8003fb0 <__kernel_cos+0x144>)
 8003ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8003fb4 <__kernel_cos+0x148>)
 8003ebe:	f7fc faf5 	bl	80004ac <__aeabi_dadd>
 8003ec2:	0032      	movs	r2, r6
 8003ec4:	003b      	movs	r3, r7
 8003ec6:	f7fc ffd9 	bl	8000e7c <__aeabi_dmul>
 8003eca:	4a3b      	ldr	r2, [pc, #236]	@ (8003fb8 <__kernel_cos+0x14c>)
 8003ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8003fbc <__kernel_cos+0x150>)
 8003ece:	f7fd fabb 	bl	8001448 <__aeabi_dsub>
 8003ed2:	0032      	movs	r2, r6
 8003ed4:	003b      	movs	r3, r7
 8003ed6:	f7fc ffd1 	bl	8000e7c <__aeabi_dmul>
 8003eda:	4a39      	ldr	r2, [pc, #228]	@ (8003fc0 <__kernel_cos+0x154>)
 8003edc:	4b39      	ldr	r3, [pc, #228]	@ (8003fc4 <__kernel_cos+0x158>)
 8003ede:	f7fc fae5 	bl	80004ac <__aeabi_dadd>
 8003ee2:	0032      	movs	r2, r6
 8003ee4:	003b      	movs	r3, r7
 8003ee6:	f7fc ffc9 	bl	8000e7c <__aeabi_dmul>
 8003eea:	4a37      	ldr	r2, [pc, #220]	@ (8003fc8 <__kernel_cos+0x15c>)
 8003eec:	4b37      	ldr	r3, [pc, #220]	@ (8003fcc <__kernel_cos+0x160>)
 8003eee:	f7fd faab 	bl	8001448 <__aeabi_dsub>
 8003ef2:	0032      	movs	r2, r6
 8003ef4:	003b      	movs	r3, r7
 8003ef6:	f7fc ffc1 	bl	8000e7c <__aeabi_dmul>
 8003efa:	4a35      	ldr	r2, [pc, #212]	@ (8003fd0 <__kernel_cos+0x164>)
 8003efc:	4b35      	ldr	r3, [pc, #212]	@ (8003fd4 <__kernel_cos+0x168>)
 8003efe:	f7fc fad5 	bl	80004ac <__aeabi_dadd>
 8003f02:	0032      	movs	r2, r6
 8003f04:	003b      	movs	r3, r7
 8003f06:	f7fc ffb9 	bl	8000e7c <__aeabi_dmul>
 8003f0a:	0032      	movs	r2, r6
 8003f0c:	003b      	movs	r3, r7
 8003f0e:	f7fc ffb5 	bl	8000e7c <__aeabi_dmul>
 8003f12:	9a04      	ldr	r2, [sp, #16]
 8003f14:	9b05      	ldr	r3, [sp, #20]
 8003f16:	0006      	movs	r6, r0
 8003f18:	000f      	movs	r7, r1
 8003f1a:	0020      	movs	r0, r4
 8003f1c:	0029      	movs	r1, r5
 8003f1e:	f7fc ffad 	bl	8000e7c <__aeabi_dmul>
 8003f22:	0002      	movs	r2, r0
 8003f24:	000b      	movs	r3, r1
 8003f26:	0030      	movs	r0, r6
 8003f28:	0039      	movs	r1, r7
 8003f2a:	f7fd fa8d 	bl	8001448 <__aeabi_dsub>
 8003f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd8 <__kernel_cos+0x16c>)
 8003f30:	9a01      	ldr	r2, [sp, #4]
 8003f32:	9004      	str	r0, [sp, #16]
 8003f34:	9105      	str	r1, [sp, #20]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d80d      	bhi.n	8003f56 <__kernel_cos+0xea>
 8003f3a:	0002      	movs	r2, r0
 8003f3c:	000b      	movs	r3, r1
 8003f3e:	9802      	ldr	r0, [sp, #8]
 8003f40:	9903      	ldr	r1, [sp, #12]
 8003f42:	f7fd fa81 	bl	8001448 <__aeabi_dsub>
 8003f46:	0002      	movs	r2, r0
 8003f48:	2000      	movs	r0, #0
 8003f4a:	000b      	movs	r3, r1
 8003f4c:	4923      	ldr	r1, [pc, #140]	@ (8003fdc <__kernel_cos+0x170>)
 8003f4e:	f7fd fa7b 	bl	8001448 <__aeabi_dsub>
 8003f52:	b007      	add	sp, #28
 8003f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f56:	4b22      	ldr	r3, [pc, #136]	@ (8003fe0 <__kernel_cos+0x174>)
 8003f58:	9a01      	ldr	r2, [sp, #4]
 8003f5a:	2600      	movs	r6, #0
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d81b      	bhi.n	8003f98 <__kernel_cos+0x12c>
 8003f60:	0013      	movs	r3, r2
 8003f62:	4a20      	ldr	r2, [pc, #128]	@ (8003fe4 <__kernel_cos+0x178>)
 8003f64:	4694      	mov	ip, r2
 8003f66:	4463      	add	r3, ip
 8003f68:	001f      	movs	r7, r3
 8003f6a:	0032      	movs	r2, r6
 8003f6c:	003b      	movs	r3, r7
 8003f6e:	2000      	movs	r0, #0
 8003f70:	491a      	ldr	r1, [pc, #104]	@ (8003fdc <__kernel_cos+0x170>)
 8003f72:	f7fd fa69 	bl	8001448 <__aeabi_dsub>
 8003f76:	0032      	movs	r2, r6
 8003f78:	0004      	movs	r4, r0
 8003f7a:	000d      	movs	r5, r1
 8003f7c:	9802      	ldr	r0, [sp, #8]
 8003f7e:	9903      	ldr	r1, [sp, #12]
 8003f80:	003b      	movs	r3, r7
 8003f82:	f7fd fa61 	bl	8001448 <__aeabi_dsub>
 8003f86:	9a04      	ldr	r2, [sp, #16]
 8003f88:	9b05      	ldr	r3, [sp, #20]
 8003f8a:	f7fd fa5d 	bl	8001448 <__aeabi_dsub>
 8003f8e:	0002      	movs	r2, r0
 8003f90:	000b      	movs	r3, r1
 8003f92:	0020      	movs	r0, r4
 8003f94:	0029      	movs	r1, r5
 8003f96:	e7da      	b.n	8003f4e <__kernel_cos+0xe2>
 8003f98:	4f13      	ldr	r7, [pc, #76]	@ (8003fe8 <__kernel_cos+0x17c>)
 8003f9a:	e7e6      	b.n	8003f6a <__kernel_cos+0xfe>
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	490f      	ldr	r1, [pc, #60]	@ (8003fdc <__kernel_cos+0x170>)
 8003fa0:	e7d7      	b.n	8003f52 <__kernel_cos+0xe6>
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	3fe00000 	.word	0x3fe00000
 8003fa8:	be8838d4 	.word	0xbe8838d4
 8003fac:	bda8fae9 	.word	0xbda8fae9
 8003fb0:	bdb4b1c4 	.word	0xbdb4b1c4
 8003fb4:	3e21ee9e 	.word	0x3e21ee9e
 8003fb8:	809c52ad 	.word	0x809c52ad
 8003fbc:	3e927e4f 	.word	0x3e927e4f
 8003fc0:	19cb1590 	.word	0x19cb1590
 8003fc4:	3efa01a0 	.word	0x3efa01a0
 8003fc8:	16c15177 	.word	0x16c15177
 8003fcc:	3f56c16c 	.word	0x3f56c16c
 8003fd0:	5555554c 	.word	0x5555554c
 8003fd4:	3fa55555 	.word	0x3fa55555
 8003fd8:	3fd33332 	.word	0x3fd33332
 8003fdc:	3ff00000 	.word	0x3ff00000
 8003fe0:	3fe90000 	.word	0x3fe90000
 8003fe4:	ffe00000 	.word	0xffe00000
 8003fe8:	3fd20000 	.word	0x3fd20000

08003fec <__kernel_sin>:
 8003fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fee:	b089      	sub	sp, #36	@ 0x24
 8003ff0:	9202      	str	r2, [sp, #8]
 8003ff2:	9303      	str	r3, [sp, #12]
 8003ff4:	22f9      	movs	r2, #249	@ 0xf9
 8003ff6:	004b      	lsls	r3, r1, #1
 8003ff8:	0006      	movs	r6, r0
 8003ffa:	000f      	movs	r7, r1
 8003ffc:	085b      	lsrs	r3, r3, #1
 8003ffe:	0592      	lsls	r2, r2, #22
 8004000:	4293      	cmp	r3, r2
 8004002:	d203      	bcs.n	800400c <__kernel_sin+0x20>
 8004004:	f7fd fe2a 	bl	8001c5c <__aeabi_d2iz>
 8004008:	2800      	cmp	r0, #0
 800400a:	d04c      	beq.n	80040a6 <__kernel_sin+0xba>
 800400c:	0032      	movs	r2, r6
 800400e:	003b      	movs	r3, r7
 8004010:	0030      	movs	r0, r6
 8004012:	0039      	movs	r1, r7
 8004014:	f7fc ff32 	bl	8000e7c <__aeabi_dmul>
 8004018:	0004      	movs	r4, r0
 800401a:	000d      	movs	r5, r1
 800401c:	0002      	movs	r2, r0
 800401e:	000b      	movs	r3, r1
 8004020:	0030      	movs	r0, r6
 8004022:	0039      	movs	r1, r7
 8004024:	f7fc ff2a 	bl	8000e7c <__aeabi_dmul>
 8004028:	4a39      	ldr	r2, [pc, #228]	@ (8004110 <__kernel_sin+0x124>)
 800402a:	9000      	str	r0, [sp, #0]
 800402c:	9101      	str	r1, [sp, #4]
 800402e:	4b39      	ldr	r3, [pc, #228]	@ (8004114 <__kernel_sin+0x128>)
 8004030:	0020      	movs	r0, r4
 8004032:	0029      	movs	r1, r5
 8004034:	f7fc ff22 	bl	8000e7c <__aeabi_dmul>
 8004038:	4a37      	ldr	r2, [pc, #220]	@ (8004118 <__kernel_sin+0x12c>)
 800403a:	4b38      	ldr	r3, [pc, #224]	@ (800411c <__kernel_sin+0x130>)
 800403c:	f7fd fa04 	bl	8001448 <__aeabi_dsub>
 8004040:	0022      	movs	r2, r4
 8004042:	002b      	movs	r3, r5
 8004044:	f7fc ff1a 	bl	8000e7c <__aeabi_dmul>
 8004048:	4a35      	ldr	r2, [pc, #212]	@ (8004120 <__kernel_sin+0x134>)
 800404a:	4b36      	ldr	r3, [pc, #216]	@ (8004124 <__kernel_sin+0x138>)
 800404c:	f7fc fa2e 	bl	80004ac <__aeabi_dadd>
 8004050:	0022      	movs	r2, r4
 8004052:	002b      	movs	r3, r5
 8004054:	f7fc ff12 	bl	8000e7c <__aeabi_dmul>
 8004058:	4a33      	ldr	r2, [pc, #204]	@ (8004128 <__kernel_sin+0x13c>)
 800405a:	4b34      	ldr	r3, [pc, #208]	@ (800412c <__kernel_sin+0x140>)
 800405c:	f7fd f9f4 	bl	8001448 <__aeabi_dsub>
 8004060:	0022      	movs	r2, r4
 8004062:	002b      	movs	r3, r5
 8004064:	f7fc ff0a 	bl	8000e7c <__aeabi_dmul>
 8004068:	4b31      	ldr	r3, [pc, #196]	@ (8004130 <__kernel_sin+0x144>)
 800406a:	4a32      	ldr	r2, [pc, #200]	@ (8004134 <__kernel_sin+0x148>)
 800406c:	f7fc fa1e 	bl	80004ac <__aeabi_dadd>
 8004070:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004072:	9004      	str	r0, [sp, #16]
 8004074:	9105      	str	r1, [sp, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d119      	bne.n	80040ae <__kernel_sin+0xc2>
 800407a:	0002      	movs	r2, r0
 800407c:	000b      	movs	r3, r1
 800407e:	0020      	movs	r0, r4
 8004080:	0029      	movs	r1, r5
 8004082:	f7fc fefb 	bl	8000e7c <__aeabi_dmul>
 8004086:	4a2c      	ldr	r2, [pc, #176]	@ (8004138 <__kernel_sin+0x14c>)
 8004088:	4b2c      	ldr	r3, [pc, #176]	@ (800413c <__kernel_sin+0x150>)
 800408a:	f7fd f9dd 	bl	8001448 <__aeabi_dsub>
 800408e:	9a00      	ldr	r2, [sp, #0]
 8004090:	9b01      	ldr	r3, [sp, #4]
 8004092:	f7fc fef3 	bl	8000e7c <__aeabi_dmul>
 8004096:	0002      	movs	r2, r0
 8004098:	000b      	movs	r3, r1
 800409a:	0030      	movs	r0, r6
 800409c:	0039      	movs	r1, r7
 800409e:	f7fc fa05 	bl	80004ac <__aeabi_dadd>
 80040a2:	0006      	movs	r6, r0
 80040a4:	000f      	movs	r7, r1
 80040a6:	0030      	movs	r0, r6
 80040a8:	0039      	movs	r1, r7
 80040aa:	b009      	add	sp, #36	@ 0x24
 80040ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ae:	2200      	movs	r2, #0
 80040b0:	9802      	ldr	r0, [sp, #8]
 80040b2:	9903      	ldr	r1, [sp, #12]
 80040b4:	4b22      	ldr	r3, [pc, #136]	@ (8004140 <__kernel_sin+0x154>)
 80040b6:	f7fc fee1 	bl	8000e7c <__aeabi_dmul>
 80040ba:	9a04      	ldr	r2, [sp, #16]
 80040bc:	9b05      	ldr	r3, [sp, #20]
 80040be:	9006      	str	r0, [sp, #24]
 80040c0:	9107      	str	r1, [sp, #28]
 80040c2:	9800      	ldr	r0, [sp, #0]
 80040c4:	9901      	ldr	r1, [sp, #4]
 80040c6:	f7fc fed9 	bl	8000e7c <__aeabi_dmul>
 80040ca:	0002      	movs	r2, r0
 80040cc:	000b      	movs	r3, r1
 80040ce:	9806      	ldr	r0, [sp, #24]
 80040d0:	9907      	ldr	r1, [sp, #28]
 80040d2:	f7fd f9b9 	bl	8001448 <__aeabi_dsub>
 80040d6:	0022      	movs	r2, r4
 80040d8:	002b      	movs	r3, r5
 80040da:	f7fc fecf 	bl	8000e7c <__aeabi_dmul>
 80040de:	9a02      	ldr	r2, [sp, #8]
 80040e0:	9b03      	ldr	r3, [sp, #12]
 80040e2:	f7fd f9b1 	bl	8001448 <__aeabi_dsub>
 80040e6:	4a14      	ldr	r2, [pc, #80]	@ (8004138 <__kernel_sin+0x14c>)
 80040e8:	0004      	movs	r4, r0
 80040ea:	000d      	movs	r5, r1
 80040ec:	9800      	ldr	r0, [sp, #0]
 80040ee:	9901      	ldr	r1, [sp, #4]
 80040f0:	4b12      	ldr	r3, [pc, #72]	@ (800413c <__kernel_sin+0x150>)
 80040f2:	f7fc fec3 	bl	8000e7c <__aeabi_dmul>
 80040f6:	0002      	movs	r2, r0
 80040f8:	000b      	movs	r3, r1
 80040fa:	0020      	movs	r0, r4
 80040fc:	0029      	movs	r1, r5
 80040fe:	f7fc f9d5 	bl	80004ac <__aeabi_dadd>
 8004102:	0002      	movs	r2, r0
 8004104:	000b      	movs	r3, r1
 8004106:	0030      	movs	r0, r6
 8004108:	0039      	movs	r1, r7
 800410a:	f7fd f99d 	bl	8001448 <__aeabi_dsub>
 800410e:	e7c8      	b.n	80040a2 <__kernel_sin+0xb6>
 8004110:	5acfd57c 	.word	0x5acfd57c
 8004114:	3de5d93a 	.word	0x3de5d93a
 8004118:	8a2b9ceb 	.word	0x8a2b9ceb
 800411c:	3e5ae5e6 	.word	0x3e5ae5e6
 8004120:	57b1fe7d 	.word	0x57b1fe7d
 8004124:	3ec71de3 	.word	0x3ec71de3
 8004128:	19c161d5 	.word	0x19c161d5
 800412c:	3f2a01a0 	.word	0x3f2a01a0
 8004130:	3f811111 	.word	0x3f811111
 8004134:	1110f8a6 	.word	0x1110f8a6
 8004138:	55555549 	.word	0x55555549
 800413c:	3fc55555 	.word	0x3fc55555
 8004140:	3fe00000 	.word	0x3fe00000

08004144 <__ieee754_rem_pio2>:
 8004144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004146:	4baf      	ldr	r3, [pc, #700]	@ (8004404 <__ieee754_rem_pio2+0x2c0>)
 8004148:	b095      	sub	sp, #84	@ 0x54
 800414a:	004d      	lsls	r5, r1, #1
 800414c:	0017      	movs	r7, r2
 800414e:	910d      	str	r1, [sp, #52]	@ 0x34
 8004150:	086d      	lsrs	r5, r5, #1
 8004152:	429d      	cmp	r5, r3
 8004154:	d807      	bhi.n	8004166 <__ieee754_rem_pio2+0x22>
 8004156:	6010      	str	r0, [r2, #0]
 8004158:	6051      	str	r1, [r2, #4]
 800415a:	2300      	movs	r3, #0
 800415c:	2200      	movs	r2, #0
 800415e:	60ba      	str	r2, [r7, #8]
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	2300      	movs	r3, #0
 8004164:	e024      	b.n	80041b0 <__ieee754_rem_pio2+0x6c>
 8004166:	4ba8      	ldr	r3, [pc, #672]	@ (8004408 <__ieee754_rem_pio2+0x2c4>)
 8004168:	429d      	cmp	r5, r3
 800416a:	d900      	bls.n	800416e <__ieee754_rem_pio2+0x2a>
 800416c:	e072      	b.n	8004254 <__ieee754_rem_pio2+0x110>
 800416e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004170:	4ca6      	ldr	r4, [pc, #664]	@ (800440c <__ieee754_rem_pio2+0x2c8>)
 8004172:	4aa7      	ldr	r2, [pc, #668]	@ (8004410 <__ieee754_rem_pio2+0x2cc>)
 8004174:	2b00      	cmp	r3, #0
 8004176:	dd37      	ble.n	80041e8 <__ieee754_rem_pio2+0xa4>
 8004178:	4ba4      	ldr	r3, [pc, #656]	@ (800440c <__ieee754_rem_pio2+0x2c8>)
 800417a:	f7fd f965 	bl	8001448 <__aeabi_dsub>
 800417e:	9002      	str	r0, [sp, #8]
 8004180:	9103      	str	r1, [sp, #12]
 8004182:	42a5      	cmp	r5, r4
 8004184:	d018      	beq.n	80041b8 <__ieee754_rem_pio2+0x74>
 8004186:	4aa3      	ldr	r2, [pc, #652]	@ (8004414 <__ieee754_rem_pio2+0x2d0>)
 8004188:	4ba3      	ldr	r3, [pc, #652]	@ (8004418 <__ieee754_rem_pio2+0x2d4>)
 800418a:	f7fd f95d 	bl	8001448 <__aeabi_dsub>
 800418e:	0002      	movs	r2, r0
 8004190:	000b      	movs	r3, r1
 8004192:	0004      	movs	r4, r0
 8004194:	000d      	movs	r5, r1
 8004196:	9802      	ldr	r0, [sp, #8]
 8004198:	9903      	ldr	r1, [sp, #12]
 800419a:	f7fd f955 	bl	8001448 <__aeabi_dsub>
 800419e:	4a9d      	ldr	r2, [pc, #628]	@ (8004414 <__ieee754_rem_pio2+0x2d0>)
 80041a0:	4b9d      	ldr	r3, [pc, #628]	@ (8004418 <__ieee754_rem_pio2+0x2d4>)
 80041a2:	f7fd f951 	bl	8001448 <__aeabi_dsub>
 80041a6:	2301      	movs	r3, #1
 80041a8:	603c      	str	r4, [r7, #0]
 80041aa:	607d      	str	r5, [r7, #4]
 80041ac:	60b8      	str	r0, [r7, #8]
 80041ae:	60f9      	str	r1, [r7, #12]
 80041b0:	9302      	str	r3, [sp, #8]
 80041b2:	9802      	ldr	r0, [sp, #8]
 80041b4:	b015      	add	sp, #84	@ 0x54
 80041b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b8:	22d3      	movs	r2, #211	@ 0xd3
 80041ba:	9802      	ldr	r0, [sp, #8]
 80041bc:	9903      	ldr	r1, [sp, #12]
 80041be:	4b96      	ldr	r3, [pc, #600]	@ (8004418 <__ieee754_rem_pio2+0x2d4>)
 80041c0:	0552      	lsls	r2, r2, #21
 80041c2:	f7fd f941 	bl	8001448 <__aeabi_dsub>
 80041c6:	4a95      	ldr	r2, [pc, #596]	@ (800441c <__ieee754_rem_pio2+0x2d8>)
 80041c8:	4b95      	ldr	r3, [pc, #596]	@ (8004420 <__ieee754_rem_pio2+0x2dc>)
 80041ca:	9002      	str	r0, [sp, #8]
 80041cc:	9103      	str	r1, [sp, #12]
 80041ce:	f7fd f93b 	bl	8001448 <__aeabi_dsub>
 80041d2:	0002      	movs	r2, r0
 80041d4:	000b      	movs	r3, r1
 80041d6:	0004      	movs	r4, r0
 80041d8:	000d      	movs	r5, r1
 80041da:	9802      	ldr	r0, [sp, #8]
 80041dc:	9903      	ldr	r1, [sp, #12]
 80041de:	f7fd f933 	bl	8001448 <__aeabi_dsub>
 80041e2:	4a8e      	ldr	r2, [pc, #568]	@ (800441c <__ieee754_rem_pio2+0x2d8>)
 80041e4:	4b8e      	ldr	r3, [pc, #568]	@ (8004420 <__ieee754_rem_pio2+0x2dc>)
 80041e6:	e7dc      	b.n	80041a2 <__ieee754_rem_pio2+0x5e>
 80041e8:	4b88      	ldr	r3, [pc, #544]	@ (800440c <__ieee754_rem_pio2+0x2c8>)
 80041ea:	f7fc f95f 	bl	80004ac <__aeabi_dadd>
 80041ee:	9002      	str	r0, [sp, #8]
 80041f0:	9103      	str	r1, [sp, #12]
 80041f2:	42a5      	cmp	r5, r4
 80041f4:	d016      	beq.n	8004224 <__ieee754_rem_pio2+0xe0>
 80041f6:	4a87      	ldr	r2, [pc, #540]	@ (8004414 <__ieee754_rem_pio2+0x2d0>)
 80041f8:	4b87      	ldr	r3, [pc, #540]	@ (8004418 <__ieee754_rem_pio2+0x2d4>)
 80041fa:	f7fc f957 	bl	80004ac <__aeabi_dadd>
 80041fe:	0002      	movs	r2, r0
 8004200:	000b      	movs	r3, r1
 8004202:	0004      	movs	r4, r0
 8004204:	000d      	movs	r5, r1
 8004206:	9802      	ldr	r0, [sp, #8]
 8004208:	9903      	ldr	r1, [sp, #12]
 800420a:	f7fd f91d 	bl	8001448 <__aeabi_dsub>
 800420e:	4a81      	ldr	r2, [pc, #516]	@ (8004414 <__ieee754_rem_pio2+0x2d0>)
 8004210:	4b81      	ldr	r3, [pc, #516]	@ (8004418 <__ieee754_rem_pio2+0x2d4>)
 8004212:	f7fc f94b 	bl	80004ac <__aeabi_dadd>
 8004216:	2301      	movs	r3, #1
 8004218:	603c      	str	r4, [r7, #0]
 800421a:	607d      	str	r5, [r7, #4]
 800421c:	60b8      	str	r0, [r7, #8]
 800421e:	60f9      	str	r1, [r7, #12]
 8004220:	425b      	negs	r3, r3
 8004222:	e7c5      	b.n	80041b0 <__ieee754_rem_pio2+0x6c>
 8004224:	22d3      	movs	r2, #211	@ 0xd3
 8004226:	9802      	ldr	r0, [sp, #8]
 8004228:	9903      	ldr	r1, [sp, #12]
 800422a:	4b7b      	ldr	r3, [pc, #492]	@ (8004418 <__ieee754_rem_pio2+0x2d4>)
 800422c:	0552      	lsls	r2, r2, #21
 800422e:	f7fc f93d 	bl	80004ac <__aeabi_dadd>
 8004232:	4a7a      	ldr	r2, [pc, #488]	@ (800441c <__ieee754_rem_pio2+0x2d8>)
 8004234:	4b7a      	ldr	r3, [pc, #488]	@ (8004420 <__ieee754_rem_pio2+0x2dc>)
 8004236:	9002      	str	r0, [sp, #8]
 8004238:	9103      	str	r1, [sp, #12]
 800423a:	f7fc f937 	bl	80004ac <__aeabi_dadd>
 800423e:	0002      	movs	r2, r0
 8004240:	000b      	movs	r3, r1
 8004242:	0004      	movs	r4, r0
 8004244:	000d      	movs	r5, r1
 8004246:	9802      	ldr	r0, [sp, #8]
 8004248:	9903      	ldr	r1, [sp, #12]
 800424a:	f7fd f8fd 	bl	8001448 <__aeabi_dsub>
 800424e:	4a73      	ldr	r2, [pc, #460]	@ (800441c <__ieee754_rem_pio2+0x2d8>)
 8004250:	4b73      	ldr	r3, [pc, #460]	@ (8004420 <__ieee754_rem_pio2+0x2dc>)
 8004252:	e7de      	b.n	8004212 <__ieee754_rem_pio2+0xce>
 8004254:	4b73      	ldr	r3, [pc, #460]	@ (8004424 <__ieee754_rem_pio2+0x2e0>)
 8004256:	429d      	cmp	r5, r3
 8004258:	d900      	bls.n	800425c <__ieee754_rem_pio2+0x118>
 800425a:	e0c6      	b.n	80043ea <__ieee754_rem_pio2+0x2a6>
 800425c:	f000 f94e 	bl	80044fc <fabs>
 8004260:	4a71      	ldr	r2, [pc, #452]	@ (8004428 <__ieee754_rem_pio2+0x2e4>)
 8004262:	4b72      	ldr	r3, [pc, #456]	@ (800442c <__ieee754_rem_pio2+0x2e8>)
 8004264:	9004      	str	r0, [sp, #16]
 8004266:	9105      	str	r1, [sp, #20]
 8004268:	f7fc fe08 	bl	8000e7c <__aeabi_dmul>
 800426c:	2200      	movs	r2, #0
 800426e:	4b70      	ldr	r3, [pc, #448]	@ (8004430 <__ieee754_rem_pio2+0x2ec>)
 8004270:	f7fc f91c 	bl	80004ac <__aeabi_dadd>
 8004274:	f7fd fcf2 	bl	8001c5c <__aeabi_d2iz>
 8004278:	9002      	str	r0, [sp, #8]
 800427a:	f7fd fd2b 	bl	8001cd4 <__aeabi_i2d>
 800427e:	4a64      	ldr	r2, [pc, #400]	@ (8004410 <__ieee754_rem_pio2+0x2cc>)
 8004280:	4b62      	ldr	r3, [pc, #392]	@ (800440c <__ieee754_rem_pio2+0x2c8>)
 8004282:	9008      	str	r0, [sp, #32]
 8004284:	9109      	str	r1, [sp, #36]	@ 0x24
 8004286:	f7fc fdf9 	bl	8000e7c <__aeabi_dmul>
 800428a:	0002      	movs	r2, r0
 800428c:	000b      	movs	r3, r1
 800428e:	9804      	ldr	r0, [sp, #16]
 8004290:	9905      	ldr	r1, [sp, #20]
 8004292:	f7fd f8d9 	bl	8001448 <__aeabi_dsub>
 8004296:	4b60      	ldr	r3, [pc, #384]	@ (8004418 <__ieee754_rem_pio2+0x2d4>)
 8004298:	9004      	str	r0, [sp, #16]
 800429a:	9105      	str	r1, [sp, #20]
 800429c:	9808      	ldr	r0, [sp, #32]
 800429e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80042a0:	4a5c      	ldr	r2, [pc, #368]	@ (8004414 <__ieee754_rem_pio2+0x2d0>)
 80042a2:	f7fc fdeb 	bl	8000e7c <__aeabi_dmul>
 80042a6:	9b02      	ldr	r3, [sp, #8]
 80042a8:	9006      	str	r0, [sp, #24]
 80042aa:	9107      	str	r1, [sp, #28]
 80042ac:	2b1f      	cmp	r3, #31
 80042ae:	dc0d      	bgt.n	80042cc <__ieee754_rem_pio2+0x188>
 80042b0:	9a02      	ldr	r2, [sp, #8]
 80042b2:	4b60      	ldr	r3, [pc, #384]	@ (8004434 <__ieee754_rem_pio2+0x2f0>)
 80042b4:	3a01      	subs	r2, #1
 80042b6:	0092      	lsls	r2, r2, #2
 80042b8:	58d3      	ldr	r3, [r2, r3]
 80042ba:	42ab      	cmp	r3, r5
 80042bc:	d006      	beq.n	80042cc <__ieee754_rem_pio2+0x188>
 80042be:	0002      	movs	r2, r0
 80042c0:	000b      	movs	r3, r1
 80042c2:	9804      	ldr	r0, [sp, #16]
 80042c4:	9905      	ldr	r1, [sp, #20]
 80042c6:	f7fd f8bf 	bl	8001448 <__aeabi_dsub>
 80042ca:	e00b      	b.n	80042e4 <__ieee754_rem_pio2+0x1a0>
 80042cc:	9a06      	ldr	r2, [sp, #24]
 80042ce:	9b07      	ldr	r3, [sp, #28]
 80042d0:	9804      	ldr	r0, [sp, #16]
 80042d2:	9905      	ldr	r1, [sp, #20]
 80042d4:	f7fd f8b8 	bl	8001448 <__aeabi_dsub>
 80042d8:	004b      	lsls	r3, r1, #1
 80042da:	152e      	asrs	r6, r5, #20
 80042dc:	0d5b      	lsrs	r3, r3, #21
 80042de:	1af3      	subs	r3, r6, r3
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	dc02      	bgt.n	80042ea <__ieee754_rem_pio2+0x1a6>
 80042e4:	6038      	str	r0, [r7, #0]
 80042e6:	6079      	str	r1, [r7, #4]
 80042e8:	e039      	b.n	800435e <__ieee754_rem_pio2+0x21a>
 80042ea:	22d3      	movs	r2, #211	@ 0xd3
 80042ec:	9808      	ldr	r0, [sp, #32]
 80042ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80042f0:	4b49      	ldr	r3, [pc, #292]	@ (8004418 <__ieee754_rem_pio2+0x2d4>)
 80042f2:	0552      	lsls	r2, r2, #21
 80042f4:	f7fc fdc2 	bl	8000e7c <__aeabi_dmul>
 80042f8:	0004      	movs	r4, r0
 80042fa:	000d      	movs	r5, r1
 80042fc:	0002      	movs	r2, r0
 80042fe:	000b      	movs	r3, r1
 8004300:	9804      	ldr	r0, [sp, #16]
 8004302:	9905      	ldr	r1, [sp, #20]
 8004304:	f7fd f8a0 	bl	8001448 <__aeabi_dsub>
 8004308:	0002      	movs	r2, r0
 800430a:	000b      	movs	r3, r1
 800430c:	900a      	str	r0, [sp, #40]	@ 0x28
 800430e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004310:	9804      	ldr	r0, [sp, #16]
 8004312:	9905      	ldr	r1, [sp, #20]
 8004314:	f7fd f898 	bl	8001448 <__aeabi_dsub>
 8004318:	0022      	movs	r2, r4
 800431a:	002b      	movs	r3, r5
 800431c:	f7fd f894 	bl	8001448 <__aeabi_dsub>
 8004320:	0004      	movs	r4, r0
 8004322:	000d      	movs	r5, r1
 8004324:	9808      	ldr	r0, [sp, #32]
 8004326:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004328:	4a3c      	ldr	r2, [pc, #240]	@ (800441c <__ieee754_rem_pio2+0x2d8>)
 800432a:	4b3d      	ldr	r3, [pc, #244]	@ (8004420 <__ieee754_rem_pio2+0x2dc>)
 800432c:	f7fc fda6 	bl	8000e7c <__aeabi_dmul>
 8004330:	0022      	movs	r2, r4
 8004332:	002b      	movs	r3, r5
 8004334:	f7fd f888 	bl	8001448 <__aeabi_dsub>
 8004338:	000b      	movs	r3, r1
 800433a:	0002      	movs	r2, r0
 800433c:	9006      	str	r0, [sp, #24]
 800433e:	9107      	str	r1, [sp, #28]
 8004340:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004342:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004344:	f7fd f880 	bl	8001448 <__aeabi_dsub>
 8004348:	004b      	lsls	r3, r1, #1
 800434a:	0d5b      	lsrs	r3, r3, #21
 800434c:	1af3      	subs	r3, r6, r3
 800434e:	2b31      	cmp	r3, #49	@ 0x31
 8004350:	dc21      	bgt.n	8004396 <__ieee754_rem_pio2+0x252>
 8004352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004354:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8004356:	6038      	str	r0, [r7, #0]
 8004358:	6079      	str	r1, [r7, #4]
 800435a:	9304      	str	r3, [sp, #16]
 800435c:	9405      	str	r4, [sp, #20]
 800435e:	683c      	ldr	r4, [r7, #0]
 8004360:	687d      	ldr	r5, [r7, #4]
 8004362:	9804      	ldr	r0, [sp, #16]
 8004364:	9905      	ldr	r1, [sp, #20]
 8004366:	0022      	movs	r2, r4
 8004368:	002b      	movs	r3, r5
 800436a:	f7fd f86d 	bl	8001448 <__aeabi_dsub>
 800436e:	9a06      	ldr	r2, [sp, #24]
 8004370:	9b07      	ldr	r3, [sp, #28]
 8004372:	f7fd f869 	bl	8001448 <__aeabi_dsub>
 8004376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004378:	60b8      	str	r0, [r7, #8]
 800437a:	60f9      	str	r1, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	db00      	blt.n	8004382 <__ieee754_rem_pio2+0x23e>
 8004380:	e717      	b.n	80041b2 <__ieee754_rem_pio2+0x6e>
 8004382:	2280      	movs	r2, #128	@ 0x80
 8004384:	0612      	lsls	r2, r2, #24
 8004386:	18ab      	adds	r3, r5, r2
 8004388:	607b      	str	r3, [r7, #4]
 800438a:	188b      	adds	r3, r1, r2
 800438c:	603c      	str	r4, [r7, #0]
 800438e:	60b8      	str	r0, [r7, #8]
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	9b02      	ldr	r3, [sp, #8]
 8004394:	e744      	b.n	8004220 <__ieee754_rem_pio2+0xdc>
 8004396:	22b8      	movs	r2, #184	@ 0xb8
 8004398:	9808      	ldr	r0, [sp, #32]
 800439a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800439c:	4b20      	ldr	r3, [pc, #128]	@ (8004420 <__ieee754_rem_pio2+0x2dc>)
 800439e:	0592      	lsls	r2, r2, #22
 80043a0:	f7fc fd6c 	bl	8000e7c <__aeabi_dmul>
 80043a4:	0004      	movs	r4, r0
 80043a6:	000d      	movs	r5, r1
 80043a8:	0002      	movs	r2, r0
 80043aa:	000b      	movs	r3, r1
 80043ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80043ae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80043b0:	f7fd f84a 	bl	8001448 <__aeabi_dsub>
 80043b4:	0002      	movs	r2, r0
 80043b6:	000b      	movs	r3, r1
 80043b8:	9004      	str	r0, [sp, #16]
 80043ba:	9105      	str	r1, [sp, #20]
 80043bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80043be:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80043c0:	f7fd f842 	bl	8001448 <__aeabi_dsub>
 80043c4:	0022      	movs	r2, r4
 80043c6:	002b      	movs	r3, r5
 80043c8:	f7fd f83e 	bl	8001448 <__aeabi_dsub>
 80043cc:	0004      	movs	r4, r0
 80043ce:	000d      	movs	r5, r1
 80043d0:	9808      	ldr	r0, [sp, #32]
 80043d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80043d4:	4a18      	ldr	r2, [pc, #96]	@ (8004438 <__ieee754_rem_pio2+0x2f4>)
 80043d6:	4b19      	ldr	r3, [pc, #100]	@ (800443c <__ieee754_rem_pio2+0x2f8>)
 80043d8:	f7fc fd50 	bl	8000e7c <__aeabi_dmul>
 80043dc:	0022      	movs	r2, r4
 80043de:	002b      	movs	r3, r5
 80043e0:	f7fd f832 	bl	8001448 <__aeabi_dsub>
 80043e4:	9006      	str	r0, [sp, #24]
 80043e6:	9107      	str	r1, [sp, #28]
 80043e8:	e769      	b.n	80042be <__ieee754_rem_pio2+0x17a>
 80043ea:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <__ieee754_rem_pio2+0x2fc>)
 80043ec:	429d      	cmp	r5, r3
 80043ee:	d929      	bls.n	8004444 <__ieee754_rem_pio2+0x300>
 80043f0:	0002      	movs	r2, r0
 80043f2:	000b      	movs	r3, r1
 80043f4:	f7fd f828 	bl	8001448 <__aeabi_dsub>
 80043f8:	60b8      	str	r0, [r7, #8]
 80043fa:	60f9      	str	r1, [r7, #12]
 80043fc:	6038      	str	r0, [r7, #0]
 80043fe:	6079      	str	r1, [r7, #4]
 8004400:	e6af      	b.n	8004162 <__ieee754_rem_pio2+0x1e>
 8004402:	46c0      	nop			@ (mov r8, r8)
 8004404:	3fe921fb 	.word	0x3fe921fb
 8004408:	4002d97b 	.word	0x4002d97b
 800440c:	3ff921fb 	.word	0x3ff921fb
 8004410:	54400000 	.word	0x54400000
 8004414:	1a626331 	.word	0x1a626331
 8004418:	3dd0b461 	.word	0x3dd0b461
 800441c:	2e037073 	.word	0x2e037073
 8004420:	3ba3198a 	.word	0x3ba3198a
 8004424:	413921fb 	.word	0x413921fb
 8004428:	6dc9c883 	.word	0x6dc9c883
 800442c:	3fe45f30 	.word	0x3fe45f30
 8004430:	3fe00000 	.word	0x3fe00000
 8004434:	08004db4 	.word	0x08004db4
 8004438:	252049c1 	.word	0x252049c1
 800443c:	397b839a 	.word	0x397b839a
 8004440:	7fefffff 	.word	0x7fefffff
 8004444:	4b2a      	ldr	r3, [pc, #168]	@ (80044f0 <__ieee754_rem_pio2+0x3ac>)
 8004446:	152e      	asrs	r6, r5, #20
 8004448:	18f6      	adds	r6, r6, r3
 800444a:	0531      	lsls	r1, r6, #20
 800444c:	1a6b      	subs	r3, r5, r1
 800444e:	0019      	movs	r1, r3
 8004450:	001d      	movs	r5, r3
 8004452:	0004      	movs	r4, r0
 8004454:	f7fd fc02 	bl	8001c5c <__aeabi_d2iz>
 8004458:	f7fd fc3c 	bl	8001cd4 <__aeabi_i2d>
 800445c:	0002      	movs	r2, r0
 800445e:	000b      	movs	r3, r1
 8004460:	0020      	movs	r0, r4
 8004462:	0029      	movs	r1, r5
 8004464:	920e      	str	r2, [sp, #56]	@ 0x38
 8004466:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004468:	f7fc ffee 	bl	8001448 <__aeabi_dsub>
 800446c:	2200      	movs	r2, #0
 800446e:	4b21      	ldr	r3, [pc, #132]	@ (80044f4 <__ieee754_rem_pio2+0x3b0>)
 8004470:	f7fc fd04 	bl	8000e7c <__aeabi_dmul>
 8004474:	000d      	movs	r5, r1
 8004476:	0004      	movs	r4, r0
 8004478:	f7fd fbf0 	bl	8001c5c <__aeabi_d2iz>
 800447c:	f7fd fc2a 	bl	8001cd4 <__aeabi_i2d>
 8004480:	0002      	movs	r2, r0
 8004482:	000b      	movs	r3, r1
 8004484:	0020      	movs	r0, r4
 8004486:	0029      	movs	r1, r5
 8004488:	9210      	str	r2, [sp, #64]	@ 0x40
 800448a:	9311      	str	r3, [sp, #68]	@ 0x44
 800448c:	f7fc ffdc 	bl	8001448 <__aeabi_dsub>
 8004490:	2200      	movs	r2, #0
 8004492:	4b18      	ldr	r3, [pc, #96]	@ (80044f4 <__ieee754_rem_pio2+0x3b0>)
 8004494:	f7fc fcf2 	bl	8000e7c <__aeabi_dmul>
 8004498:	2503      	movs	r5, #3
 800449a:	9012      	str	r0, [sp, #72]	@ 0x48
 800449c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800449e:	ac0e      	add	r4, sp, #56	@ 0x38
 80044a0:	2200      	movs	r2, #0
 80044a2:	6920      	ldr	r0, [r4, #16]
 80044a4:	6961      	ldr	r1, [r4, #20]
 80044a6:	2300      	movs	r3, #0
 80044a8:	9502      	str	r5, [sp, #8]
 80044aa:	3c08      	subs	r4, #8
 80044ac:	3d01      	subs	r5, #1
 80044ae:	f7fb ffb1 	bl	8000414 <__aeabi_dcmpeq>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d1f4      	bne.n	80044a0 <__ieee754_rem_pio2+0x35c>
 80044b6:	4b10      	ldr	r3, [pc, #64]	@ (80044f8 <__ieee754_rem_pio2+0x3b4>)
 80044b8:	0032      	movs	r2, r6
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	2302      	movs	r3, #2
 80044be:	0039      	movs	r1, r7
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	a80e      	add	r0, sp, #56	@ 0x38
 80044c4:	9b02      	ldr	r3, [sp, #8]
 80044c6:	f000 f81d 	bl	8004504 <__kernel_rem_pio2>
 80044ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044cc:	9002      	str	r0, [sp, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	db00      	blt.n	80044d4 <__ieee754_rem_pio2+0x390>
 80044d2:	e66e      	b.n	80041b2 <__ieee754_rem_pio2+0x6e>
 80044d4:	2080      	movs	r0, #128	@ 0x80
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	0600      	lsls	r0, r0, #24
 80044dc:	180b      	adds	r3, r1, r0
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	603a      	str	r2, [r7, #0]
 80044e2:	607b      	str	r3, [r7, #4]
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	180b      	adds	r3, r1, r0
 80044e8:	60ba      	str	r2, [r7, #8]
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	e751      	b.n	8004392 <__ieee754_rem_pio2+0x24e>
 80044ee:	46c0      	nop			@ (mov r8, r8)
 80044f0:	fffffbea 	.word	0xfffffbea
 80044f4:	41700000 	.word	0x41700000
 80044f8:	08004e34 	.word	0x08004e34

080044fc <fabs>:
 80044fc:	0049      	lsls	r1, r1, #1
 80044fe:	084b      	lsrs	r3, r1, #1
 8004500:	0019      	movs	r1, r3
 8004502:	4770      	bx	lr

08004504 <__kernel_rem_pio2>:
 8004504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004506:	4cc6      	ldr	r4, [pc, #792]	@ (8004820 <__kernel_rem_pio2+0x31c>)
 8004508:	44a5      	add	sp, r4
 800450a:	0014      	movs	r4, r2
 800450c:	9aa4      	ldr	r2, [sp, #656]	@ 0x290
 800450e:	930e      	str	r3, [sp, #56]	@ 0x38
 8004510:	4bc4      	ldr	r3, [pc, #784]	@ (8004824 <__kernel_rem_pio2+0x320>)
 8004512:	0092      	lsls	r2, r2, #2
 8004514:	58d3      	ldr	r3, [r2, r3]
 8004516:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004518:	9308      	str	r3, [sp, #32]
 800451a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800451c:	9105      	str	r1, [sp, #20]
 800451e:	3b01      	subs	r3, #1
 8004520:	930d      	str	r3, [sp, #52]	@ 0x34
 8004522:	2300      	movs	r3, #0
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	0023      	movs	r3, r4
 8004528:	3314      	adds	r3, #20
 800452a:	db04      	blt.n	8004536 <__kernel_rem_pio2+0x32>
 800452c:	2118      	movs	r1, #24
 800452e:	1ee0      	subs	r0, r4, #3
 8004530:	f7fb fe74 	bl	800021c <__divsi3>
 8004534:	9000      	str	r0, [sp, #0]
 8004536:	9b00      	ldr	r3, [sp, #0]
 8004538:	ae26      	add	r6, sp, #152	@ 0x98
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	2318      	movs	r3, #24
 800453e:	425b      	negs	r3, r3
 8004540:	4353      	muls	r3, r2
 8004542:	191b      	adds	r3, r3, r4
 8004544:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004546:	9302      	str	r3, [sp, #8]
 8004548:	9b00      	ldr	r3, [sp, #0]
 800454a:	1a9d      	subs	r5, r3, r2
 800454c:	002c      	movs	r4, r5
 800454e:	9b08      	ldr	r3, [sp, #32]
 8004550:	189f      	adds	r7, r3, r2
 8004552:	1b63      	subs	r3, r4, r5
 8004554:	429f      	cmp	r7, r3
 8004556:	da0f      	bge.n	8004578 <__kernel_rem_pio2+0x74>
 8004558:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800455a:	af76      	add	r7, sp, #472	@ 0x1d8
 800455c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800455e:	9a08      	ldr	r2, [sp, #32]
 8004560:	1aeb      	subs	r3, r5, r3
 8004562:	429a      	cmp	r2, r3
 8004564:	db30      	blt.n	80045c8 <__kernel_rem_pio2+0xc4>
 8004566:	00eb      	lsls	r3, r5, #3
 8004568:	aa26      	add	r2, sp, #152	@ 0x98
 800456a:	2400      	movs	r4, #0
 800456c:	189e      	adds	r6, r3, r2
 800456e:	2300      	movs	r3, #0
 8004570:	9306      	str	r3, [sp, #24]
 8004572:	9407      	str	r4, [sp, #28]
 8004574:	2400      	movs	r4, #0
 8004576:	e01e      	b.n	80045b6 <__kernel_rem_pio2+0xb2>
 8004578:	2c00      	cmp	r4, #0
 800457a:	db07      	blt.n	800458c <__kernel_rem_pio2+0x88>
 800457c:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 800457e:	00a3      	lsls	r3, r4, #2
 8004580:	58d0      	ldr	r0, [r2, r3]
 8004582:	f7fd fba7 	bl	8001cd4 <__aeabi_i2d>
 8004586:	c603      	stmia	r6!, {r0, r1}
 8004588:	3401      	adds	r4, #1
 800458a:	e7e2      	b.n	8004552 <__kernel_rem_pio2+0x4e>
 800458c:	2000      	movs	r0, #0
 800458e:	2100      	movs	r1, #0
 8004590:	e7f9      	b.n	8004586 <__kernel_rem_pio2+0x82>
 8004592:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004594:	00e1      	lsls	r1, r4, #3
 8004596:	1859      	adds	r1, r3, r1
 8004598:	6808      	ldr	r0, [r1, #0]
 800459a:	6849      	ldr	r1, [r1, #4]
 800459c:	6832      	ldr	r2, [r6, #0]
 800459e:	6873      	ldr	r3, [r6, #4]
 80045a0:	f7fc fc6c 	bl	8000e7c <__aeabi_dmul>
 80045a4:	0002      	movs	r2, r0
 80045a6:	000b      	movs	r3, r1
 80045a8:	9806      	ldr	r0, [sp, #24]
 80045aa:	9907      	ldr	r1, [sp, #28]
 80045ac:	f7fb ff7e 	bl	80004ac <__aeabi_dadd>
 80045b0:	9006      	str	r0, [sp, #24]
 80045b2:	9107      	str	r1, [sp, #28]
 80045b4:	3401      	adds	r4, #1
 80045b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045b8:	3e08      	subs	r6, #8
 80045ba:	429c      	cmp	r4, r3
 80045bc:	dde9      	ble.n	8004592 <__kernel_rem_pio2+0x8e>
 80045be:	9b06      	ldr	r3, [sp, #24]
 80045c0:	9c07      	ldr	r4, [sp, #28]
 80045c2:	3501      	adds	r5, #1
 80045c4:	c718      	stmia	r7!, {r3, r4}
 80045c6:	e7c9      	b.n	800455c <__kernel_rem_pio2+0x58>
 80045c8:	9b08      	ldr	r3, [sp, #32]
 80045ca:	aa12      	add	r2, sp, #72	@ 0x48
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	189b      	adds	r3, r3, r2
 80045d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80045d2:	9b00      	ldr	r3, [sp, #0]
 80045d4:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	18d3      	adds	r3, r2, r3
 80045da:	9310      	str	r3, [sp, #64]	@ 0x40
 80045dc:	9b08      	ldr	r3, [sp, #32]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	9b00      	ldr	r3, [sp, #0]
 80045e2:	aa76      	add	r2, sp, #472	@ 0x1d8
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	18d3      	adds	r3, r2, r3
 80045e8:	681e      	ldr	r6, [r3, #0]
 80045ea:	685f      	ldr	r7, [r3, #4]
 80045ec:	ab12      	add	r3, sp, #72	@ 0x48
 80045ee:	001d      	movs	r5, r3
 80045f0:	9c00      	ldr	r4, [sp, #0]
 80045f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80045f4:	2c00      	cmp	r4, #0
 80045f6:	dc73      	bgt.n	80046e0 <__kernel_rem_pio2+0x1dc>
 80045f8:	0030      	movs	r0, r6
 80045fa:	0039      	movs	r1, r7
 80045fc:	9a02      	ldr	r2, [sp, #8]
 80045fe:	f000 fad5 	bl	8004bac <scalbn>
 8004602:	23ff      	movs	r3, #255	@ 0xff
 8004604:	2200      	movs	r2, #0
 8004606:	059b      	lsls	r3, r3, #22
 8004608:	0004      	movs	r4, r0
 800460a:	000d      	movs	r5, r1
 800460c:	f7fc fc36 	bl	8000e7c <__aeabi_dmul>
 8004610:	f000 fb38 	bl	8004c84 <floor>
 8004614:	2200      	movs	r2, #0
 8004616:	4b84      	ldr	r3, [pc, #528]	@ (8004828 <__kernel_rem_pio2+0x324>)
 8004618:	f7fc fc30 	bl	8000e7c <__aeabi_dmul>
 800461c:	0002      	movs	r2, r0
 800461e:	000b      	movs	r3, r1
 8004620:	0020      	movs	r0, r4
 8004622:	0029      	movs	r1, r5
 8004624:	f7fc ff10 	bl	8001448 <__aeabi_dsub>
 8004628:	000d      	movs	r5, r1
 800462a:	0004      	movs	r4, r0
 800462c:	f7fd fb16 	bl	8001c5c <__aeabi_d2iz>
 8004630:	900c      	str	r0, [sp, #48]	@ 0x30
 8004632:	f7fd fb4f 	bl	8001cd4 <__aeabi_i2d>
 8004636:	000b      	movs	r3, r1
 8004638:	0002      	movs	r2, r0
 800463a:	0029      	movs	r1, r5
 800463c:	0020      	movs	r0, r4
 800463e:	f7fc ff03 	bl	8001448 <__aeabi_dsub>
 8004642:	9b02      	ldr	r3, [sp, #8]
 8004644:	0006      	movs	r6, r0
 8004646:	000f      	movs	r7, r1
 8004648:	2b00      	cmp	r3, #0
 800464a:	dd6f      	ble.n	800472c <__kernel_rem_pio2+0x228>
 800464c:	2018      	movs	r0, #24
 800464e:	9b00      	ldr	r3, [sp, #0]
 8004650:	aa12      	add	r2, sp, #72	@ 0x48
 8004652:	3b01      	subs	r3, #1
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	589a      	ldr	r2, [r3, r2]
 8004658:	9902      	ldr	r1, [sp, #8]
 800465a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800465c:	1a40      	subs	r0, r0, r1
 800465e:	0011      	movs	r1, r2
 8004660:	4101      	asrs	r1, r0
 8004662:	1864      	adds	r4, r4, r1
 8004664:	4081      	lsls	r1, r0
 8004666:	1a52      	subs	r2, r2, r1
 8004668:	a912      	add	r1, sp, #72	@ 0x48
 800466a:	505a      	str	r2, [r3, r1]
 800466c:	2317      	movs	r3, #23
 800466e:	9902      	ldr	r1, [sp, #8]
 8004670:	940c      	str	r4, [sp, #48]	@ 0x30
 8004672:	1a5b      	subs	r3, r3, r1
 8004674:	411a      	asrs	r2, r3
 8004676:	9206      	str	r2, [sp, #24]
 8004678:	9b06      	ldr	r3, [sp, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	dd68      	ble.n	8004750 <__kernel_rem_pio2+0x24c>
 800467e:	2200      	movs	r2, #0
 8004680:	2580      	movs	r5, #128	@ 0x80
 8004682:	0014      	movs	r4, r2
 8004684:	2101      	movs	r1, #1
 8004686:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004688:	4868      	ldr	r0, [pc, #416]	@ (800482c <__kernel_rem_pio2+0x328>)
 800468a:	3301      	adds	r3, #1
 800468c:	930c      	str	r3, [sp, #48]	@ 0x30
 800468e:	046d      	lsls	r5, r5, #17
 8004690:	9b00      	ldr	r3, [sp, #0]
 8004692:	4293      	cmp	r3, r2
 8004694:	dd00      	ble.n	8004698 <__kernel_rem_pio2+0x194>
 8004696:	e098      	b.n	80047ca <__kernel_rem_pio2+0x2c6>
 8004698:	9b02      	ldr	r3, [sp, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	dd05      	ble.n	80046aa <__kernel_rem_pio2+0x1a6>
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d100      	bne.n	80046a4 <__kernel_rem_pio2+0x1a0>
 80046a2:	e0a4      	b.n	80047ee <__kernel_rem_pio2+0x2ea>
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d100      	bne.n	80046aa <__kernel_rem_pio2+0x1a6>
 80046a8:	e0ab      	b.n	8004802 <__kernel_rem_pio2+0x2fe>
 80046aa:	9b06      	ldr	r3, [sp, #24]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d14f      	bne.n	8004750 <__kernel_rem_pio2+0x24c>
 80046b0:	0032      	movs	r2, r6
 80046b2:	003b      	movs	r3, r7
 80046b4:	2000      	movs	r0, #0
 80046b6:	495e      	ldr	r1, [pc, #376]	@ (8004830 <__kernel_rem_pio2+0x32c>)
 80046b8:	f7fc fec6 	bl	8001448 <__aeabi_dsub>
 80046bc:	0006      	movs	r6, r0
 80046be:	000f      	movs	r7, r1
 80046c0:	2c00      	cmp	r4, #0
 80046c2:	d045      	beq.n	8004750 <__kernel_rem_pio2+0x24c>
 80046c4:	9a02      	ldr	r2, [sp, #8]
 80046c6:	2000      	movs	r0, #0
 80046c8:	4959      	ldr	r1, [pc, #356]	@ (8004830 <__kernel_rem_pio2+0x32c>)
 80046ca:	f000 fa6f 	bl	8004bac <scalbn>
 80046ce:	0002      	movs	r2, r0
 80046d0:	000b      	movs	r3, r1
 80046d2:	0030      	movs	r0, r6
 80046d4:	0039      	movs	r1, r7
 80046d6:	f7fc feb7 	bl	8001448 <__aeabi_dsub>
 80046da:	0006      	movs	r6, r0
 80046dc:	000f      	movs	r7, r1
 80046de:	e037      	b.n	8004750 <__kernel_rem_pio2+0x24c>
 80046e0:	2200      	movs	r2, #0
 80046e2:	4b54      	ldr	r3, [pc, #336]	@ (8004834 <__kernel_rem_pio2+0x330>)
 80046e4:	0030      	movs	r0, r6
 80046e6:	0039      	movs	r1, r7
 80046e8:	f7fc fbc8 	bl	8000e7c <__aeabi_dmul>
 80046ec:	f7fd fab6 	bl	8001c5c <__aeabi_d2iz>
 80046f0:	f7fd faf0 	bl	8001cd4 <__aeabi_i2d>
 80046f4:	2200      	movs	r2, #0
 80046f6:	4b50      	ldr	r3, [pc, #320]	@ (8004838 <__kernel_rem_pio2+0x334>)
 80046f8:	9006      	str	r0, [sp, #24]
 80046fa:	9107      	str	r1, [sp, #28]
 80046fc:	f7fc fbbe 	bl	8000e7c <__aeabi_dmul>
 8004700:	0002      	movs	r2, r0
 8004702:	000b      	movs	r3, r1
 8004704:	0030      	movs	r0, r6
 8004706:	0039      	movs	r1, r7
 8004708:	f7fc fe9e 	bl	8001448 <__aeabi_dsub>
 800470c:	f7fd faa6 	bl	8001c5c <__aeabi_d2iz>
 8004710:	3c01      	subs	r4, #1
 8004712:	aa76      	add	r2, sp, #472	@ 0x1d8
 8004714:	00e3      	lsls	r3, r4, #3
 8004716:	18d3      	adds	r3, r2, r3
 8004718:	c501      	stmia	r5!, {r0}
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	9806      	ldr	r0, [sp, #24]
 8004720:	9907      	ldr	r1, [sp, #28]
 8004722:	f7fb fec3 	bl	80004ac <__aeabi_dadd>
 8004726:	0006      	movs	r6, r0
 8004728:	000f      	movs	r7, r1
 800472a:	e763      	b.n	80045f4 <__kernel_rem_pio2+0xf0>
 800472c:	9b02      	ldr	r3, [sp, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d107      	bne.n	8004742 <__kernel_rem_pio2+0x23e>
 8004732:	9b00      	ldr	r3, [sp, #0]
 8004734:	aa12      	add	r2, sp, #72	@ 0x48
 8004736:	3b01      	subs	r3, #1
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	589b      	ldr	r3, [r3, r2]
 800473c:	15db      	asrs	r3, r3, #23
 800473e:	9306      	str	r3, [sp, #24]
 8004740:	e79a      	b.n	8004678 <__kernel_rem_pio2+0x174>
 8004742:	2200      	movs	r2, #0
 8004744:	4b3d      	ldr	r3, [pc, #244]	@ (800483c <__kernel_rem_pio2+0x338>)
 8004746:	f7fb fe89 	bl	800045c <__aeabi_dcmpge>
 800474a:	2800      	cmp	r0, #0
 800474c:	d13a      	bne.n	80047c4 <__kernel_rem_pio2+0x2c0>
 800474e:	9006      	str	r0, [sp, #24]
 8004750:	2200      	movs	r2, #0
 8004752:	2300      	movs	r3, #0
 8004754:	0030      	movs	r0, r6
 8004756:	0039      	movs	r1, r7
 8004758:	f7fb fe5c 	bl	8000414 <__aeabi_dcmpeq>
 800475c:	2800      	cmp	r0, #0
 800475e:	d100      	bne.n	8004762 <__kernel_rem_pio2+0x25e>
 8004760:	e0b5      	b.n	80048ce <__kernel_rem_pio2+0x3ca>
 8004762:	2200      	movs	r2, #0
 8004764:	9b00      	ldr	r3, [sp, #0]
 8004766:	3b01      	subs	r3, #1
 8004768:	9908      	ldr	r1, [sp, #32]
 800476a:	428b      	cmp	r3, r1
 800476c:	da51      	bge.n	8004812 <__kernel_rem_pio2+0x30e>
 800476e:	2a00      	cmp	r2, #0
 8004770:	d100      	bne.n	8004774 <__kernel_rem_pio2+0x270>
 8004772:	e096      	b.n	80048a2 <__kernel_rem_pio2+0x39e>
 8004774:	9b00      	ldr	r3, [sp, #0]
 8004776:	aa12      	add	r2, sp, #72	@ 0x48
 8004778:	3b01      	subs	r3, #1
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	9b02      	ldr	r3, [sp, #8]
 800477e:	3b18      	subs	r3, #24
 8004780:	9302      	str	r3, [sp, #8]
 8004782:	9b00      	ldr	r3, [sp, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	589b      	ldr	r3, [r3, r2]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f3      	beq.n	8004774 <__kernel_rem_pio2+0x270>
 800478c:	2000      	movs	r0, #0
 800478e:	9a02      	ldr	r2, [sp, #8]
 8004790:	4927      	ldr	r1, [pc, #156]	@ (8004830 <__kernel_rem_pio2+0x32c>)
 8004792:	f000 fa0b 	bl	8004bac <scalbn>
 8004796:	0004      	movs	r4, r0
 8004798:	000d      	movs	r5, r1
 800479a:	9e00      	ldr	r6, [sp, #0]
 800479c:	2e00      	cmp	r6, #0
 800479e:	db00      	blt.n	80047a2 <__kernel_rem_pio2+0x29e>
 80047a0:	e0d2      	b.n	8004948 <__kernel_rem_pio2+0x444>
 80047a2:	4b27      	ldr	r3, [pc, #156]	@ (8004840 <__kernel_rem_pio2+0x33c>)
 80047a4:	9c00      	ldr	r4, [sp, #0]
 80047a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80047a8:	2c00      	cmp	r4, #0
 80047aa:	da00      	bge.n	80047ae <__kernel_rem_pio2+0x2aa>
 80047ac:	e103      	b.n	80049b6 <__kernel_rem_pio2+0x4b2>
 80047ae:	00e3      	lsls	r3, r4, #3
 80047b0:	aa76      	add	r2, sp, #472	@ 0x1d8
 80047b2:	189f      	adds	r7, r3, r2
 80047b4:	2300      	movs	r3, #0
 80047b6:	2200      	movs	r2, #0
 80047b8:	9202      	str	r2, [sp, #8]
 80047ba:	9303      	str	r3, [sp, #12]
 80047bc:	9b00      	ldr	r3, [sp, #0]
 80047be:	2500      	movs	r5, #0
 80047c0:	1b1e      	subs	r6, r3, r4
 80047c2:	e0ea      	b.n	800499a <__kernel_rem_pio2+0x496>
 80047c4:	2302      	movs	r3, #2
 80047c6:	9306      	str	r3, [sp, #24]
 80047c8:	e759      	b.n	800467e <__kernel_rem_pio2+0x17a>
 80047ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2c00      	cmp	r4, #0
 80047d0:	d10b      	bne.n	80047ea <__kernel_rem_pio2+0x2e6>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <__kernel_rem_pio2+0x2da>
 80047d6:	1aeb      	subs	r3, r5, r3
 80047d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80047da:	6023      	str	r3, [r4, #0]
 80047dc:	000b      	movs	r3, r1
 80047de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80047e0:	3201      	adds	r2, #1
 80047e2:	3404      	adds	r4, #4
 80047e4:	940a      	str	r4, [sp, #40]	@ 0x28
 80047e6:	001c      	movs	r4, r3
 80047e8:	e752      	b.n	8004690 <__kernel_rem_pio2+0x18c>
 80047ea:	1ac3      	subs	r3, r0, r3
 80047ec:	e7f4      	b.n	80047d8 <__kernel_rem_pio2+0x2d4>
 80047ee:	9b00      	ldr	r3, [sp, #0]
 80047f0:	aa12      	add	r2, sp, #72	@ 0x48
 80047f2:	3b01      	subs	r3, #1
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	589a      	ldr	r2, [r3, r2]
 80047f8:	0252      	lsls	r2, r2, #9
 80047fa:	0a52      	lsrs	r2, r2, #9
 80047fc:	a912      	add	r1, sp, #72	@ 0x48
 80047fe:	505a      	str	r2, [r3, r1]
 8004800:	e753      	b.n	80046aa <__kernel_rem_pio2+0x1a6>
 8004802:	9b00      	ldr	r3, [sp, #0]
 8004804:	aa12      	add	r2, sp, #72	@ 0x48
 8004806:	3b01      	subs	r3, #1
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	589a      	ldr	r2, [r3, r2]
 800480c:	0292      	lsls	r2, r2, #10
 800480e:	0a92      	lsrs	r2, r2, #10
 8004810:	e7f4      	b.n	80047fc <__kernel_rem_pio2+0x2f8>
 8004812:	0099      	lsls	r1, r3, #2
 8004814:	a812      	add	r0, sp, #72	@ 0x48
 8004816:	5809      	ldr	r1, [r1, r0]
 8004818:	3b01      	subs	r3, #1
 800481a:	430a      	orrs	r2, r1
 800481c:	e7a4      	b.n	8004768 <__kernel_rem_pio2+0x264>
 800481e:	46c0      	nop			@ (mov r8, r8)
 8004820:	fffffd84 	.word	0xfffffd84
 8004824:	08004f80 	.word	0x08004f80
 8004828:	40200000 	.word	0x40200000
 800482c:	00ffffff 	.word	0x00ffffff
 8004830:	3ff00000 	.word	0x3ff00000
 8004834:	3e700000 	.word	0x3e700000
 8004838:	41700000 	.word	0x41700000
 800483c:	3fe00000 	.word	0x3fe00000
 8004840:	08004f40 	.word	0x08004f40
 8004844:	3301      	adds	r3, #1
 8004846:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8004848:	009a      	lsls	r2, r3, #2
 800484a:	4252      	negs	r2, r2
 800484c:	588a      	ldr	r2, [r1, r2]
 800484e:	2a00      	cmp	r2, #0
 8004850:	d0f8      	beq.n	8004844 <__kernel_rem_pio2+0x340>
 8004852:	9a00      	ldr	r2, [sp, #0]
 8004854:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004856:	1c55      	adds	r5, r2, #1
 8004858:	1852      	adds	r2, r2, r1
 800485a:	00d2      	lsls	r2, r2, #3
 800485c:	a926      	add	r1, sp, #152	@ 0x98
 800485e:	188c      	adds	r4, r1, r2
 8004860:	9a00      	ldr	r2, [sp, #0]
 8004862:	18d3      	adds	r3, r2, r3
 8004864:	9306      	str	r3, [sp, #24]
 8004866:	9b06      	ldr	r3, [sp, #24]
 8004868:	42ab      	cmp	r3, r5
 800486a:	da00      	bge.n	800486e <__kernel_rem_pio2+0x36a>
 800486c:	e6b7      	b.n	80045de <__kernel_rem_pio2+0xda>
 800486e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8004870:	00ab      	lsls	r3, r5, #2
 8004872:	58d0      	ldr	r0, [r2, r3]
 8004874:	f7fd fa2e 	bl	8001cd4 <__aeabi_i2d>
 8004878:	2200      	movs	r2, #0
 800487a:	2300      	movs	r3, #0
 800487c:	0027      	movs	r7, r4
 800487e:	2600      	movs	r6, #0
 8004880:	6020      	str	r0, [r4, #0]
 8004882:	6061      	str	r1, [r4, #4]
 8004884:	9200      	str	r2, [sp, #0]
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800488a:	429e      	cmp	r6, r3
 800488c:	dd0b      	ble.n	80048a6 <__kernel_rem_pio2+0x3a2>
 800488e:	00eb      	lsls	r3, r5, #3
 8004890:	aa76      	add	r2, sp, #472	@ 0x1d8
 8004892:	18d3      	adds	r3, r2, r3
 8004894:	3501      	adds	r5, #1
 8004896:	9900      	ldr	r1, [sp, #0]
 8004898:	9a01      	ldr	r2, [sp, #4]
 800489a:	3408      	adds	r4, #8
 800489c:	6019      	str	r1, [r3, #0]
 800489e:	605a      	str	r2, [r3, #4]
 80048a0:	e7e1      	b.n	8004866 <__kernel_rem_pio2+0x362>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e7cf      	b.n	8004846 <__kernel_rem_pio2+0x342>
 80048a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80048a8:	00f1      	lsls	r1, r6, #3
 80048aa:	1859      	adds	r1, r3, r1
 80048ac:	6808      	ldr	r0, [r1, #0]
 80048ae:	6849      	ldr	r1, [r1, #4]
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f7fc fae2 	bl	8000e7c <__aeabi_dmul>
 80048b8:	0002      	movs	r2, r0
 80048ba:	000b      	movs	r3, r1
 80048bc:	9800      	ldr	r0, [sp, #0]
 80048be:	9901      	ldr	r1, [sp, #4]
 80048c0:	f7fb fdf4 	bl	80004ac <__aeabi_dadd>
 80048c4:	3601      	adds	r6, #1
 80048c6:	9000      	str	r0, [sp, #0]
 80048c8:	9101      	str	r1, [sp, #4]
 80048ca:	3f08      	subs	r7, #8
 80048cc:	e7dc      	b.n	8004888 <__kernel_rem_pio2+0x384>
 80048ce:	9b02      	ldr	r3, [sp, #8]
 80048d0:	0030      	movs	r0, r6
 80048d2:	425a      	negs	r2, r3
 80048d4:	0039      	movs	r1, r7
 80048d6:	f000 f969 	bl	8004bac <scalbn>
 80048da:	2200      	movs	r2, #0
 80048dc:	4bb1      	ldr	r3, [pc, #708]	@ (8004ba4 <__kernel_rem_pio2+0x6a0>)
 80048de:	0006      	movs	r6, r0
 80048e0:	000f      	movs	r7, r1
 80048e2:	f7fb fdbb 	bl	800045c <__aeabi_dcmpge>
 80048e6:	2800      	cmp	r0, #0
 80048e8:	d025      	beq.n	8004936 <__kernel_rem_pio2+0x432>
 80048ea:	2200      	movs	r2, #0
 80048ec:	4bae      	ldr	r3, [pc, #696]	@ (8004ba8 <__kernel_rem_pio2+0x6a4>)
 80048ee:	0030      	movs	r0, r6
 80048f0:	0039      	movs	r1, r7
 80048f2:	f7fc fac3 	bl	8000e7c <__aeabi_dmul>
 80048f6:	f7fd f9b1 	bl	8001c5c <__aeabi_d2iz>
 80048fa:	9b00      	ldr	r3, [sp, #0]
 80048fc:	0004      	movs	r4, r0
 80048fe:	009d      	lsls	r5, r3, #2
 8004900:	f7fd f9e8 	bl	8001cd4 <__aeabi_i2d>
 8004904:	2200      	movs	r2, #0
 8004906:	4ba7      	ldr	r3, [pc, #668]	@ (8004ba4 <__kernel_rem_pio2+0x6a0>)
 8004908:	f7fc fab8 	bl	8000e7c <__aeabi_dmul>
 800490c:	0002      	movs	r2, r0
 800490e:	000b      	movs	r3, r1
 8004910:	0030      	movs	r0, r6
 8004912:	0039      	movs	r1, r7
 8004914:	f7fc fd98 	bl	8001448 <__aeabi_dsub>
 8004918:	f7fd f9a0 	bl	8001c5c <__aeabi_d2iz>
 800491c:	ab12      	add	r3, sp, #72	@ 0x48
 800491e:	5158      	str	r0, [r3, r5]
 8004920:	9b00      	ldr	r3, [sp, #0]
 8004922:	aa12      	add	r2, sp, #72	@ 0x48
 8004924:	3301      	adds	r3, #1
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	9b02      	ldr	r3, [sp, #8]
 800492a:	3318      	adds	r3, #24
 800492c:	9302      	str	r3, [sp, #8]
 800492e:	9b00      	ldr	r3, [sp, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	509c      	str	r4, [r3, r2]
 8004934:	e72a      	b.n	800478c <__kernel_rem_pio2+0x288>
 8004936:	9b00      	ldr	r3, [sp, #0]
 8004938:	0030      	movs	r0, r6
 800493a:	0039      	movs	r1, r7
 800493c:	009c      	lsls	r4, r3, #2
 800493e:	f7fd f98d 	bl	8001c5c <__aeabi_d2iz>
 8004942:	ab12      	add	r3, sp, #72	@ 0x48
 8004944:	5118      	str	r0, [r3, r4]
 8004946:	e721      	b.n	800478c <__kernel_rem_pio2+0x288>
 8004948:	00f3      	lsls	r3, r6, #3
 800494a:	aa76      	add	r2, sp, #472	@ 0x1d8
 800494c:	18d7      	adds	r7, r2, r3
 800494e:	00b3      	lsls	r3, r6, #2
 8004950:	aa12      	add	r2, sp, #72	@ 0x48
 8004952:	5898      	ldr	r0, [r3, r2]
 8004954:	f7fd f9be 	bl	8001cd4 <__aeabi_i2d>
 8004958:	0022      	movs	r2, r4
 800495a:	002b      	movs	r3, r5
 800495c:	f7fc fa8e 	bl	8000e7c <__aeabi_dmul>
 8004960:	2200      	movs	r2, #0
 8004962:	6038      	str	r0, [r7, #0]
 8004964:	6079      	str	r1, [r7, #4]
 8004966:	4b90      	ldr	r3, [pc, #576]	@ (8004ba8 <__kernel_rem_pio2+0x6a4>)
 8004968:	0020      	movs	r0, r4
 800496a:	0029      	movs	r1, r5
 800496c:	f7fc fa86 	bl	8000e7c <__aeabi_dmul>
 8004970:	3e01      	subs	r6, #1
 8004972:	0004      	movs	r4, r0
 8004974:	000d      	movs	r5, r1
 8004976:	e711      	b.n	800479c <__kernel_rem_pio2+0x298>
 8004978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800497a:	00e9      	lsls	r1, r5, #3
 800497c:	18c9      	adds	r1, r1, r3
 800497e:	6808      	ldr	r0, [r1, #0]
 8004980:	6849      	ldr	r1, [r1, #4]
 8004982:	cf0c      	ldmia	r7!, {r2, r3}
 8004984:	f7fc fa7a 	bl	8000e7c <__aeabi_dmul>
 8004988:	0002      	movs	r2, r0
 800498a:	000b      	movs	r3, r1
 800498c:	9802      	ldr	r0, [sp, #8]
 800498e:	9903      	ldr	r1, [sp, #12]
 8004990:	f7fb fd8c 	bl	80004ac <__aeabi_dadd>
 8004994:	9002      	str	r0, [sp, #8]
 8004996:	9103      	str	r1, [sp, #12]
 8004998:	3501      	adds	r5, #1
 800499a:	9b08      	ldr	r3, [sp, #32]
 800499c:	429d      	cmp	r5, r3
 800499e:	dc01      	bgt.n	80049a4 <__kernel_rem_pio2+0x4a0>
 80049a0:	42b5      	cmp	r5, r6
 80049a2:	dde9      	ble.n	8004978 <__kernel_rem_pio2+0x474>
 80049a4:	00f6      	lsls	r6, r6, #3
 80049a6:	ab4e      	add	r3, sp, #312	@ 0x138
 80049a8:	199b      	adds	r3, r3, r6
 80049aa:	9902      	ldr	r1, [sp, #8]
 80049ac:	9a03      	ldr	r2, [sp, #12]
 80049ae:	3c01      	subs	r4, #1
 80049b0:	6019      	str	r1, [r3, #0]
 80049b2:	605a      	str	r2, [r3, #4]
 80049b4:	e6f8      	b.n	80047a8 <__kernel_rem_pio2+0x2a4>
 80049b6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	dc0b      	bgt.n	80049d4 <__kernel_rem_pio2+0x4d0>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dd00      	ble.n	80049c2 <__kernel_rem_pio2+0x4be>
 80049c0:	e084      	b.n	8004acc <__kernel_rem_pio2+0x5c8>
 80049c2:	d052      	beq.n	8004a6a <__kernel_rem_pio2+0x566>
 80049c4:	2007      	movs	r0, #7
 80049c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80049c8:	4003      	ands	r3, r0
 80049ca:	0018      	movs	r0, r3
 80049cc:	239f      	movs	r3, #159	@ 0x9f
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	449d      	add	sp, r3
 80049d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d1f4      	bne.n	80049c4 <__kernel_rem_pio2+0x4c0>
 80049da:	9b00      	ldr	r3, [sp, #0]
 80049dc:	aa4e      	add	r2, sp, #312	@ 0x138
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	18d4      	adds	r4, r2, r3
 80049e2:	0025      	movs	r5, r4
 80049e4:	9b00      	ldr	r3, [sp, #0]
 80049e6:	9302      	str	r3, [sp, #8]
 80049e8:	9b02      	ldr	r3, [sp, #8]
 80049ea:	3d08      	subs	r5, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	dd00      	ble.n	80049f2 <__kernel_rem_pio2+0x4ee>
 80049f0:	e07a      	b.n	8004ae8 <__kernel_rem_pio2+0x5e4>
 80049f2:	9d00      	ldr	r5, [sp, #0]
 80049f4:	3c08      	subs	r4, #8
 80049f6:	2d01      	cmp	r5, #1
 80049f8:	dd00      	ble.n	80049fc <__kernel_rem_pio2+0x4f8>
 80049fa:	e095      	b.n	8004b28 <__kernel_rem_pio2+0x624>
 80049fc:	2000      	movs	r0, #0
 80049fe:	2100      	movs	r1, #0
 8004a00:	9b00      	ldr	r3, [sp, #0]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	dd00      	ble.n	8004a08 <__kernel_rem_pio2+0x504>
 8004a06:	e0ad      	b.n	8004b64 <__kernel_rem_pio2+0x660>
 8004a08:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 8004a0a:	9c51      	ldr	r4, [sp, #324]	@ 0x144
 8004a0c:	9d4e      	ldr	r5, [sp, #312]	@ 0x138
 8004a0e:	9e4f      	ldr	r6, [sp, #316]	@ 0x13c
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	9401      	str	r4, [sp, #4]
 8004a14:	9b06      	ldr	r3, [sp, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d000      	beq.n	8004a1c <__kernel_rem_pio2+0x518>
 8004a1a:	e0af      	b.n	8004b7c <__kernel_rem_pio2+0x678>
 8004a1c:	9b05      	ldr	r3, [sp, #20]
 8004a1e:	601d      	str	r5, [r3, #0]
 8004a20:	605e      	str	r6, [r3, #4]
 8004a22:	9c00      	ldr	r4, [sp, #0]
 8004a24:	9d01      	ldr	r5, [sp, #4]
 8004a26:	6118      	str	r0, [r3, #16]
 8004a28:	6159      	str	r1, [r3, #20]
 8004a2a:	609c      	str	r4, [r3, #8]
 8004a2c:	60dd      	str	r5, [r3, #12]
 8004a2e:	e7c9      	b.n	80049c4 <__kernel_rem_pio2+0x4c0>
 8004a30:	9b00      	ldr	r3, [sp, #0]
 8004a32:	aa4e      	add	r2, sp, #312	@ 0x138
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	18d3      	adds	r3, r2, r3
 8004a38:	0020      	movs	r0, r4
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	0029      	movs	r1, r5
 8004a40:	f7fb fd34 	bl	80004ac <__aeabi_dadd>
 8004a44:	0004      	movs	r4, r0
 8004a46:	000d      	movs	r5, r1
 8004a48:	9b00      	ldr	r3, [sp, #0]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	9b00      	ldr	r3, [sp, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	daed      	bge.n	8004a30 <__kernel_rem_pio2+0x52c>
 8004a54:	9b06      	ldr	r3, [sp, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <__kernel_rem_pio2+0x55e>
 8004a5a:	2180      	movs	r1, #128	@ 0x80
 8004a5c:	0609      	lsls	r1, r1, #24
 8004a5e:	186b      	adds	r3, r5, r1
 8004a60:	001d      	movs	r5, r3
 8004a62:	9b05      	ldr	r3, [sp, #20]
 8004a64:	601c      	str	r4, [r3, #0]
 8004a66:	605d      	str	r5, [r3, #4]
 8004a68:	e7ac      	b.n	80049c4 <__kernel_rem_pio2+0x4c0>
 8004a6a:	2400      	movs	r4, #0
 8004a6c:	2500      	movs	r5, #0
 8004a6e:	e7ee      	b.n	8004a4e <__kernel_rem_pio2+0x54a>
 8004a70:	00e3      	lsls	r3, r4, #3
 8004a72:	aa4e      	add	r2, sp, #312	@ 0x138
 8004a74:	18d3      	adds	r3, r2, r3
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f7fb fd17 	bl	80004ac <__aeabi_dadd>
 8004a7e:	3c01      	subs	r4, #1
 8004a80:	2c00      	cmp	r4, #0
 8004a82:	daf5      	bge.n	8004a70 <__kernel_rem_pio2+0x56c>
 8004a84:	9c06      	ldr	r4, [sp, #24]
 8004a86:	0002      	movs	r2, r0
 8004a88:	000b      	movs	r3, r1
 8004a8a:	2c00      	cmp	r4, #0
 8004a8c:	d002      	beq.n	8004a94 <__kernel_rem_pio2+0x590>
 8004a8e:	2480      	movs	r4, #128	@ 0x80
 8004a90:	0624      	lsls	r4, r4, #24
 8004a92:	190b      	adds	r3, r1, r4
 8004a94:	9c05      	ldr	r4, [sp, #20]
 8004a96:	2501      	movs	r5, #1
 8004a98:	6022      	str	r2, [r4, #0]
 8004a9a:	6063      	str	r3, [r4, #4]
 8004a9c:	0002      	movs	r2, r0
 8004a9e:	000b      	movs	r3, r1
 8004aa0:	984e      	ldr	r0, [sp, #312]	@ 0x138
 8004aa2:	994f      	ldr	r1, [sp, #316]	@ 0x13c
 8004aa4:	f7fc fcd0 	bl	8001448 <__aeabi_dsub>
 8004aa8:	0006      	movs	r6, r0
 8004aaa:	000f      	movs	r7, r1
 8004aac:	ac4e      	add	r4, sp, #312	@ 0x138
 8004aae:	9b00      	ldr	r3, [sp, #0]
 8004ab0:	3408      	adds	r4, #8
 8004ab2:	42ab      	cmp	r3, r5
 8004ab4:	da0e      	bge.n	8004ad4 <__kernel_rem_pio2+0x5d0>
 8004ab6:	9b06      	ldr	r3, [sp, #24]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <__kernel_rem_pio2+0x5c0>
 8004abc:	2180      	movs	r1, #128	@ 0x80
 8004abe:	0609      	lsls	r1, r1, #24
 8004ac0:	187b      	adds	r3, r7, r1
 8004ac2:	001f      	movs	r7, r3
 8004ac4:	9b05      	ldr	r3, [sp, #20]
 8004ac6:	609e      	str	r6, [r3, #8]
 8004ac8:	60df      	str	r7, [r3, #12]
 8004aca:	e77b      	b.n	80049c4 <__kernel_rem_pio2+0x4c0>
 8004acc:	2000      	movs	r0, #0
 8004ace:	2100      	movs	r1, #0
 8004ad0:	9c00      	ldr	r4, [sp, #0]
 8004ad2:	e7d5      	b.n	8004a80 <__kernel_rem_pio2+0x57c>
 8004ad4:	0030      	movs	r0, r6
 8004ad6:	6822      	ldr	r2, [r4, #0]
 8004ad8:	6863      	ldr	r3, [r4, #4]
 8004ada:	0039      	movs	r1, r7
 8004adc:	f7fb fce6 	bl	80004ac <__aeabi_dadd>
 8004ae0:	3501      	adds	r5, #1
 8004ae2:	0006      	movs	r6, r0
 8004ae4:	000f      	movs	r7, r1
 8004ae6:	e7e2      	b.n	8004aae <__kernel_rem_pio2+0x5aa>
 8004ae8:	9b02      	ldr	r3, [sp, #8]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	9302      	str	r3, [sp, #8]
 8004aee:	682a      	ldr	r2, [r5, #0]
 8004af0:	686b      	ldr	r3, [r5, #4]
 8004af2:	9208      	str	r2, [sp, #32]
 8004af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004af6:	9808      	ldr	r0, [sp, #32]
 8004af8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004afa:	68aa      	ldr	r2, [r5, #8]
 8004afc:	68eb      	ldr	r3, [r5, #12]
 8004afe:	920a      	str	r2, [sp, #40]	@ 0x28
 8004b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b02:	f7fb fcd3 	bl	80004ac <__aeabi_dadd>
 8004b06:	0002      	movs	r2, r0
 8004b08:	000b      	movs	r3, r1
 8004b0a:	0006      	movs	r6, r0
 8004b0c:	000f      	movs	r7, r1
 8004b0e:	9808      	ldr	r0, [sp, #32]
 8004b10:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004b12:	f7fc fc99 	bl	8001448 <__aeabi_dsub>
 8004b16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004b18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b1a:	f7fb fcc7 	bl	80004ac <__aeabi_dadd>
 8004b1e:	602e      	str	r6, [r5, #0]
 8004b20:	606f      	str	r7, [r5, #4]
 8004b22:	60a8      	str	r0, [r5, #8]
 8004b24:	60e9      	str	r1, [r5, #12]
 8004b26:	e75f      	b.n	80049e8 <__kernel_rem_pio2+0x4e4>
 8004b28:	6822      	ldr	r2, [r4, #0]
 8004b2a:	6863      	ldr	r3, [r4, #4]
 8004b2c:	9202      	str	r2, [sp, #8]
 8004b2e:	9303      	str	r3, [sp, #12]
 8004b30:	9802      	ldr	r0, [sp, #8]
 8004b32:	9903      	ldr	r1, [sp, #12]
 8004b34:	68a2      	ldr	r2, [r4, #8]
 8004b36:	68e3      	ldr	r3, [r4, #12]
 8004b38:	9208      	str	r2, [sp, #32]
 8004b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b3c:	f7fb fcb6 	bl	80004ac <__aeabi_dadd>
 8004b40:	0002      	movs	r2, r0
 8004b42:	000b      	movs	r3, r1
 8004b44:	0006      	movs	r6, r0
 8004b46:	000f      	movs	r7, r1
 8004b48:	9802      	ldr	r0, [sp, #8]
 8004b4a:	9903      	ldr	r1, [sp, #12]
 8004b4c:	f7fc fc7c 	bl	8001448 <__aeabi_dsub>
 8004b50:	9a08      	ldr	r2, [sp, #32]
 8004b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b54:	f7fb fcaa 	bl	80004ac <__aeabi_dadd>
 8004b58:	3d01      	subs	r5, #1
 8004b5a:	60a0      	str	r0, [r4, #8]
 8004b5c:	60e1      	str	r1, [r4, #12]
 8004b5e:	6026      	str	r6, [r4, #0]
 8004b60:	6067      	str	r7, [r4, #4]
 8004b62:	e747      	b.n	80049f4 <__kernel_rem_pio2+0x4f0>
 8004b64:	9b00      	ldr	r3, [sp, #0]
 8004b66:	aa4e      	add	r2, sp, #312	@ 0x138
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	18d3      	adds	r3, r2, r3
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f7fb fc9c 	bl	80004ac <__aeabi_dadd>
 8004b74:	9b00      	ldr	r3, [sp, #0]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	e741      	b.n	8004a00 <__kernel_rem_pio2+0x4fc>
 8004b7c:	9b05      	ldr	r3, [sp, #20]
 8004b7e:	9a05      	ldr	r2, [sp, #20]
 8004b80:	601d      	str	r5, [r3, #0]
 8004b82:	2380      	movs	r3, #128	@ 0x80
 8004b84:	061b      	lsls	r3, r3, #24
 8004b86:	18f4      	adds	r4, r6, r3
 8004b88:	6054      	str	r4, [r2, #4]
 8004b8a:	9a00      	ldr	r2, [sp, #0]
 8004b8c:	9c05      	ldr	r4, [sp, #20]
 8004b8e:	60a2      	str	r2, [r4, #8]
 8004b90:	001a      	movs	r2, r3
 8004b92:	9c01      	ldr	r4, [sp, #4]
 8004b94:	18e3      	adds	r3, r4, r3
 8004b96:	9c05      	ldr	r4, [sp, #20]
 8004b98:	60e3      	str	r3, [r4, #12]
 8004b9a:	188b      	adds	r3, r1, r2
 8004b9c:	6120      	str	r0, [r4, #16]
 8004b9e:	6163      	str	r3, [r4, #20]
 8004ba0:	e710      	b.n	80049c4 <__kernel_rem_pio2+0x4c0>
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	41700000 	.word	0x41700000
 8004ba8:	3e700000 	.word	0x3e700000

08004bac <scalbn>:
 8004bac:	004b      	lsls	r3, r1, #1
 8004bae:	b570      	push	{r4, r5, r6, lr}
 8004bb0:	0d5b      	lsrs	r3, r3, #21
 8004bb2:	0014      	movs	r4, r2
 8004bb4:	000d      	movs	r5, r1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10f      	bne.n	8004bda <scalbn+0x2e>
 8004bba:	004b      	lsls	r3, r1, #1
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	4303      	orrs	r3, r0
 8004bc0:	d012      	beq.n	8004be8 <scalbn+0x3c>
 8004bc2:	4b23      	ldr	r3, [pc, #140]	@ (8004c50 <scalbn+0xa4>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f7fc f959 	bl	8000e7c <__aeabi_dmul>
 8004bca:	4b22      	ldr	r3, [pc, #136]	@ (8004c54 <scalbn+0xa8>)
 8004bcc:	429c      	cmp	r4, r3
 8004bce:	da0c      	bge.n	8004bea <scalbn+0x3e>
 8004bd0:	4a21      	ldr	r2, [pc, #132]	@ (8004c58 <scalbn+0xac>)
 8004bd2:	4b22      	ldr	r3, [pc, #136]	@ (8004c5c <scalbn+0xb0>)
 8004bd4:	f7fc f952 	bl	8000e7c <__aeabi_dmul>
 8004bd8:	e006      	b.n	8004be8 <scalbn+0x3c>
 8004bda:	4a21      	ldr	r2, [pc, #132]	@ (8004c60 <scalbn+0xb4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d108      	bne.n	8004bf2 <scalbn+0x46>
 8004be0:	0002      	movs	r2, r0
 8004be2:	000b      	movs	r3, r1
 8004be4:	f7fb fc62 	bl	80004ac <__aeabi_dadd>
 8004be8:	bd70      	pop	{r4, r5, r6, pc}
 8004bea:	000d      	movs	r5, r1
 8004bec:	004b      	lsls	r3, r1, #1
 8004bee:	0d5b      	lsrs	r3, r3, #21
 8004bf0:	3b36      	subs	r3, #54	@ 0x36
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c64 <scalbn+0xb8>)
 8004bf4:	4294      	cmp	r4, r2
 8004bf6:	dd0a      	ble.n	8004c0e <scalbn+0x62>
 8004bf8:	4c1b      	ldr	r4, [pc, #108]	@ (8004c68 <scalbn+0xbc>)
 8004bfa:	4d1c      	ldr	r5, [pc, #112]	@ (8004c6c <scalbn+0xc0>)
 8004bfc:	2900      	cmp	r1, #0
 8004bfe:	da01      	bge.n	8004c04 <scalbn+0x58>
 8004c00:	4c19      	ldr	r4, [pc, #100]	@ (8004c68 <scalbn+0xbc>)
 8004c02:	4d1b      	ldr	r5, [pc, #108]	@ (8004c70 <scalbn+0xc4>)
 8004c04:	4a18      	ldr	r2, [pc, #96]	@ (8004c68 <scalbn+0xbc>)
 8004c06:	4b19      	ldr	r3, [pc, #100]	@ (8004c6c <scalbn+0xc0>)
 8004c08:	0020      	movs	r0, r4
 8004c0a:	0029      	movs	r1, r5
 8004c0c:	e7e2      	b.n	8004bd4 <scalbn+0x28>
 8004c0e:	18e2      	adds	r2, r4, r3
 8004c10:	4b18      	ldr	r3, [pc, #96]	@ (8004c74 <scalbn+0xc8>)
 8004c12:	429a      	cmp	r2, r3
 8004c14:	dcf0      	bgt.n	8004bf8 <scalbn+0x4c>
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	dd05      	ble.n	8004c26 <scalbn+0x7a>
 8004c1a:	4b17      	ldr	r3, [pc, #92]	@ (8004c78 <scalbn+0xcc>)
 8004c1c:	0512      	lsls	r2, r2, #20
 8004c1e:	402b      	ands	r3, r5
 8004c20:	4313      	orrs	r3, r2
 8004c22:	0019      	movs	r1, r3
 8004c24:	e7e0      	b.n	8004be8 <scalbn+0x3c>
 8004c26:	0013      	movs	r3, r2
 8004c28:	3335      	adds	r3, #53	@ 0x35
 8004c2a:	da08      	bge.n	8004c3e <scalbn+0x92>
 8004c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8004c58 <scalbn+0xac>)
 8004c2e:	4d0b      	ldr	r5, [pc, #44]	@ (8004c5c <scalbn+0xb0>)
 8004c30:	2900      	cmp	r1, #0
 8004c32:	da01      	bge.n	8004c38 <scalbn+0x8c>
 8004c34:	4c08      	ldr	r4, [pc, #32]	@ (8004c58 <scalbn+0xac>)
 8004c36:	4d11      	ldr	r5, [pc, #68]	@ (8004c7c <scalbn+0xd0>)
 8004c38:	4a07      	ldr	r2, [pc, #28]	@ (8004c58 <scalbn+0xac>)
 8004c3a:	4b08      	ldr	r3, [pc, #32]	@ (8004c5c <scalbn+0xb0>)
 8004c3c:	e7e4      	b.n	8004c08 <scalbn+0x5c>
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c78 <scalbn+0xcc>)
 8004c40:	3236      	adds	r2, #54	@ 0x36
 8004c42:	401d      	ands	r5, r3
 8004c44:	0512      	lsls	r2, r2, #20
 8004c46:	432a      	orrs	r2, r5
 8004c48:	0011      	movs	r1, r2
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c80 <scalbn+0xd4>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	e7c1      	b.n	8004bd4 <scalbn+0x28>
 8004c50:	43500000 	.word	0x43500000
 8004c54:	ffff3cb0 	.word	0xffff3cb0
 8004c58:	c2f8f359 	.word	0xc2f8f359
 8004c5c:	01a56e1f 	.word	0x01a56e1f
 8004c60:	000007ff 	.word	0x000007ff
 8004c64:	0000c350 	.word	0x0000c350
 8004c68:	8800759c 	.word	0x8800759c
 8004c6c:	7e37e43c 	.word	0x7e37e43c
 8004c70:	fe37e43c 	.word	0xfe37e43c
 8004c74:	000007fe 	.word	0x000007fe
 8004c78:	800fffff 	.word	0x800fffff
 8004c7c:	81a56e1f 	.word	0x81a56e1f
 8004c80:	3c900000 	.word	0x3c900000

08004c84 <floor>:
 8004c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c86:	004b      	lsls	r3, r1, #1
 8004c88:	4a36      	ldr	r2, [pc, #216]	@ (8004d64 <floor+0xe0>)
 8004c8a:	0d5b      	lsrs	r3, r3, #21
 8004c8c:	189e      	adds	r6, r3, r2
 8004c8e:	000c      	movs	r4, r1
 8004c90:	0005      	movs	r5, r0
 8004c92:	9001      	str	r0, [sp, #4]
 8004c94:	2e13      	cmp	r6, #19
 8004c96:	dc2f      	bgt.n	8004cf8 <floor+0x74>
 8004c98:	2e00      	cmp	r6, #0
 8004c9a:	da14      	bge.n	8004cc6 <floor+0x42>
 8004c9c:	4a32      	ldr	r2, [pc, #200]	@ (8004d68 <floor+0xe4>)
 8004c9e:	4b33      	ldr	r3, [pc, #204]	@ (8004d6c <floor+0xe8>)
 8004ca0:	f7fb fc04 	bl	80004ac <__aeabi_dadd>
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f7fb fbce 	bl	8000448 <__aeabi_dcmpgt>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d007      	beq.n	8004cc0 <floor+0x3c>
 8004cb0:	2c00      	cmp	r4, #0
 8004cb2:	da50      	bge.n	8004d56 <floor+0xd2>
 8004cb4:	0064      	lsls	r4, r4, #1
 8004cb6:	0864      	lsrs	r4, r4, #1
 8004cb8:	4325      	orrs	r5, r4
 8004cba:	d14f      	bne.n	8004d5c <floor+0xd8>
 8004cbc:	2480      	movs	r4, #128	@ 0x80
 8004cbe:	0624      	lsls	r4, r4, #24
 8004cc0:	0021      	movs	r1, r4
 8004cc2:	0028      	movs	r0, r5
 8004cc4:	e022      	b.n	8004d0c <floor+0x88>
 8004cc6:	4f2a      	ldr	r7, [pc, #168]	@ (8004d70 <floor+0xec>)
 8004cc8:	4137      	asrs	r7, r6
 8004cca:	003b      	movs	r3, r7
 8004ccc:	400b      	ands	r3, r1
 8004cce:	4303      	orrs	r3, r0
 8004cd0:	d01c      	beq.n	8004d0c <floor+0x88>
 8004cd2:	4a25      	ldr	r2, [pc, #148]	@ (8004d68 <floor+0xe4>)
 8004cd4:	4b25      	ldr	r3, [pc, #148]	@ (8004d6c <floor+0xe8>)
 8004cd6:	f7fb fbe9 	bl	80004ac <__aeabi_dadd>
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f7fb fbb3 	bl	8000448 <__aeabi_dcmpgt>
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d0ec      	beq.n	8004cc0 <floor+0x3c>
 8004ce6:	2c00      	cmp	r4, #0
 8004ce8:	da03      	bge.n	8004cf2 <floor+0x6e>
 8004cea:	2380      	movs	r3, #128	@ 0x80
 8004cec:	035b      	lsls	r3, r3, #13
 8004cee:	4133      	asrs	r3, r6
 8004cf0:	18e4      	adds	r4, r4, r3
 8004cf2:	2500      	movs	r5, #0
 8004cf4:	43bc      	bics	r4, r7
 8004cf6:	e7e3      	b.n	8004cc0 <floor+0x3c>
 8004cf8:	2e33      	cmp	r6, #51	@ 0x33
 8004cfa:	dd09      	ble.n	8004d10 <floor+0x8c>
 8004cfc:	2380      	movs	r3, #128	@ 0x80
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	429e      	cmp	r6, r3
 8004d02:	d103      	bne.n	8004d0c <floor+0x88>
 8004d04:	0002      	movs	r2, r0
 8004d06:	000b      	movs	r3, r1
 8004d08:	f7fb fbd0 	bl	80004ac <__aeabi_dadd>
 8004d0c:	b003      	add	sp, #12
 8004d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d10:	2701      	movs	r7, #1
 8004d12:	4a18      	ldr	r2, [pc, #96]	@ (8004d74 <floor+0xf0>)
 8004d14:	427f      	negs	r7, r7
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	40df      	lsrs	r7, r3
 8004d1a:	4238      	tst	r0, r7
 8004d1c:	d0f6      	beq.n	8004d0c <floor+0x88>
 8004d1e:	4a12      	ldr	r2, [pc, #72]	@ (8004d68 <floor+0xe4>)
 8004d20:	4b12      	ldr	r3, [pc, #72]	@ (8004d6c <floor+0xe8>)
 8004d22:	f7fb fbc3 	bl	80004ac <__aeabi_dadd>
 8004d26:	2200      	movs	r2, #0
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f7fb fb8d 	bl	8000448 <__aeabi_dcmpgt>
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d0c6      	beq.n	8004cc0 <floor+0x3c>
 8004d32:	2c00      	cmp	r4, #0
 8004d34:	da02      	bge.n	8004d3c <floor+0xb8>
 8004d36:	2e14      	cmp	r6, #20
 8004d38:	d102      	bne.n	8004d40 <floor+0xbc>
 8004d3a:	3401      	adds	r4, #1
 8004d3c:	43bd      	bics	r5, r7
 8004d3e:	e7bf      	b.n	8004cc0 <floor+0x3c>
 8004d40:	2234      	movs	r2, #52	@ 0x34
 8004d42:	2301      	movs	r3, #1
 8004d44:	1b92      	subs	r2, r2, r6
 8004d46:	4093      	lsls	r3, r2
 8004d48:	18ed      	adds	r5, r5, r3
 8004d4a:	9b01      	ldr	r3, [sp, #4]
 8004d4c:	429d      	cmp	r5, r3
 8004d4e:	419b      	sbcs	r3, r3
 8004d50:	425b      	negs	r3, r3
 8004d52:	18e4      	adds	r4, r4, r3
 8004d54:	e7f2      	b.n	8004d3c <floor+0xb8>
 8004d56:	2500      	movs	r5, #0
 8004d58:	002c      	movs	r4, r5
 8004d5a:	e7b1      	b.n	8004cc0 <floor+0x3c>
 8004d5c:	2500      	movs	r5, #0
 8004d5e:	4c06      	ldr	r4, [pc, #24]	@ (8004d78 <floor+0xf4>)
 8004d60:	e7ae      	b.n	8004cc0 <floor+0x3c>
 8004d62:	46c0      	nop			@ (mov r8, r8)
 8004d64:	fffffc01 	.word	0xfffffc01
 8004d68:	8800759c 	.word	0x8800759c
 8004d6c:	7e37e43c 	.word	0x7e37e43c
 8004d70:	000fffff 	.word	0x000fffff
 8004d74:	fffffbed 	.word	0xfffffbed
 8004d78:	bff00000 	.word	0xbff00000

08004d7c <_init>:
 8004d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7e:	46c0      	nop			@ (mov r8, r8)
 8004d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d82:	bc08      	pop	{r3}
 8004d84:	469e      	mov	lr, r3
 8004d86:	4770      	bx	lr

08004d88 <_fini>:
 8004d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8e:	bc08      	pop	{r3}
 8004d90:	469e      	mov	lr, r3
 8004d92:	4770      	bx	lr

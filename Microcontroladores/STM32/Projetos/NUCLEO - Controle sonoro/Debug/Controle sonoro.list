
Controle sonoro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023d4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002494  08002494  00003494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024b0  080024b0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080024b0  080024b0  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080024b0  080024b0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024b0  080024b0  000034b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024b4  080024b4  000034b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080024b8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  080024c4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080024c4  00004070  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b6c  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000146a  00000000  00000000  0000aba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  0000c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000629  00000000  00000000  0000c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012738  00000000  00000000  0000ce59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008929  00000000  00000000  0001f591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073cc8  00000000  00000000  00027eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009bb82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c7c  00000000  00000000  0009bbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0009d844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800247c 	.word	0x0800247c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800247c 	.word	0x0800247c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb54 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f816 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8e4 	bl	80003f8 <MX_GPIO_Init>
  MX_TIM22_Init();
 8000230:	f000 f862 	bl	80002f8 <MX_TIM22_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_1);
 8000234:	4b06      	ldr	r3, [pc, #24]	@ (8000250 <main+0x30>)
 8000236:	2100      	movs	r1, #0
 8000238:	0018      	movs	r0, r3
 800023a:	f001 fc59 	bl	8001af0 <HAL_TIM_PWM_Start>
  STARTUP_LCD();
 800023e:	f000 f93b 	bl	80004b8 <STARTUP_LCD>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TIM22->ARR+= 10;
 8000242:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <main+0x34>)
 8000244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000246:	4b03      	ldr	r3, [pc, #12]	@ (8000254 <main+0x34>)
 8000248:	320a      	adds	r2, #10
 800024a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800024c:	e7f9      	b.n	8000242 <main+0x22>
 800024e:	46c0      	nop			@ (mov r8, r8)
 8000250:	20000028 	.word	0x20000028
 8000254:	40011400 	.word	0x40011400

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b095      	sub	sp, #84	@ 0x54
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	2418      	movs	r4, #24
 8000260:	193b      	adds	r3, r7, r4
 8000262:	0018      	movs	r0, r3
 8000264:	2338      	movs	r3, #56	@ 0x38
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f002 f8db 	bl	8002424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	0018      	movs	r0, r3
 8000272:	2314      	movs	r3, #20
 8000274:	001a      	movs	r2, r3
 8000276:	2100      	movs	r1, #0
 8000278:	f002 f8d4 	bl	8002424 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800027c:	4b1c      	ldr	r3, [pc, #112]	@ (80002f0 <SystemClock_Config+0x98>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a1c      	ldr	r2, [pc, #112]	@ (80002f4 <SystemClock_Config+0x9c>)
 8000282:	401a      	ands	r2, r3
 8000284:	4b1a      	ldr	r3, [pc, #104]	@ (80002f0 <SystemClock_Config+0x98>)
 8000286:	2180      	movs	r1, #128	@ 0x80
 8000288:	0109      	lsls	r1, r1, #4
 800028a:	430a      	orrs	r2, r1
 800028c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028e:	0021      	movs	r1, r4
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2202      	movs	r2, #2
 8000294:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2201      	movs	r2, #1
 800029a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2210      	movs	r2, #16
 80002a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2200      	movs	r2, #0
 80002a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	0018      	movs	r0, r3
 80002ac:	f000 fe06 	bl	8000ebc <HAL_RCC_OscConfig>
 80002b0:	1e03      	subs	r3, r0, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80002b4:	f000 fa54 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	220f      	movs	r2, #15
 80002bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2201      	movs	r2, #1
 80002c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2280      	movs	r2, #128	@ 0x80
 80002c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2100      	movs	r1, #0
 80002da:	0018      	movs	r0, r3
 80002dc:	f001 f9b2 	bl	8001644 <HAL_RCC_ClockConfig>
 80002e0:	1e03      	subs	r3, r0, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002e4:	f000 fa3c 	bl	8000760 <Error_Handler>
  }
}
 80002e8:	46c0      	nop			@ (mov r8, r8)
 80002ea:	46bd      	mov	sp, r7
 80002ec:	b015      	add	sp, #84	@ 0x54
 80002ee:	bd90      	pop	{r4, r7, pc}
 80002f0:	40007000 	.word	0x40007000
 80002f4:	ffffe7ff 	.word	0xffffe7ff

080002f8 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b08a      	sub	sp, #40	@ 0x28
 80002fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002fe:	2318      	movs	r3, #24
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	0018      	movs	r0, r3
 8000304:	2310      	movs	r3, #16
 8000306:	001a      	movs	r2, r3
 8000308:	2100      	movs	r1, #0
 800030a:	f002 f88b 	bl	8002424 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800030e:	2310      	movs	r3, #16
 8000310:	18fb      	adds	r3, r7, r3
 8000312:	0018      	movs	r0, r3
 8000314:	2308      	movs	r3, #8
 8000316:	001a      	movs	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f002 f883 	bl	8002424 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800031e:	003b      	movs	r3, r7
 8000320:	0018      	movs	r0, r3
 8000322:	2310      	movs	r3, #16
 8000324:	001a      	movs	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	f002 f87c 	bl	8002424 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 800032c:	4b30      	ldr	r3, [pc, #192]	@ (80003f0 <MX_TIM22_Init+0xf8>)
 800032e:	4a31      	ldr	r2, [pc, #196]	@ (80003f4 <MX_TIM22_Init+0xfc>)
 8000330:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 8-1;
 8000332:	4b2f      	ldr	r3, [pc, #188]	@ (80003f0 <MX_TIM22_Init+0xf8>)
 8000334:	2207      	movs	r2, #7
 8000336:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000338:	4b2d      	ldr	r3, [pc, #180]	@ (80003f0 <MX_TIM22_Init+0xf8>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 500-1;
 800033e:	4b2c      	ldr	r3, [pc, #176]	@ (80003f0 <MX_TIM22_Init+0xf8>)
 8000340:	22f4      	movs	r2, #244	@ 0xf4
 8000342:	32ff      	adds	r2, #255	@ 0xff
 8000344:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000346:	4b2a      	ldr	r3, [pc, #168]	@ (80003f0 <MX_TIM22_Init+0xf8>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034c:	4b28      	ldr	r3, [pc, #160]	@ (80003f0 <MX_TIM22_Init+0xf8>)
 800034e:	2200      	movs	r2, #0
 8000350:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8000352:	4b27      	ldr	r3, [pc, #156]	@ (80003f0 <MX_TIM22_Init+0xf8>)
 8000354:	0018      	movs	r0, r3
 8000356:	f001 fb43 	bl	80019e0 <HAL_TIM_Base_Init>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 800035e:	f000 f9ff 	bl	8000760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000362:	2118      	movs	r1, #24
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2280      	movs	r2, #128	@ 0x80
 8000368:	0152      	lsls	r2, r2, #5
 800036a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 800036c:	187a      	adds	r2, r7, r1
 800036e:	4b20      	ldr	r3, [pc, #128]	@ (80003f0 <MX_TIM22_Init+0xf8>)
 8000370:	0011      	movs	r1, r2
 8000372:	0018      	movs	r0, r3
 8000374:	f001 fd0e 	bl	8001d94 <HAL_TIM_ConfigClockSource>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM22_Init+0x88>
  {
    Error_Handler();
 800037c:	f000 f9f0 	bl	8000760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8000380:	4b1b      	ldr	r3, [pc, #108]	@ (80003f0 <MX_TIM22_Init+0xf8>)
 8000382:	0018      	movs	r0, r3
 8000384:	f001 fb6c 	bl	8001a60 <HAL_TIM_PWM_Init>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM22_Init+0x98>
  {
    Error_Handler();
 800038c:	f000 f9e8 	bl	8000760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000390:	2110      	movs	r1, #16
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2200      	movs	r2, #0
 800039c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 800039e:	187a      	adds	r2, r7, r1
 80003a0:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <MX_TIM22_Init+0xf8>)
 80003a2:	0011      	movs	r1, r2
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 ffe5 	bl	8002374 <HAL_TIMEx_MasterConfigSynchronization>
 80003aa:	1e03      	subs	r3, r0, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM22_Init+0xba>
  {
    Error_Handler();
 80003ae:	f000 f9d7 	bl	8000760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003b2:	003b      	movs	r3, r7
 80003b4:	2260      	movs	r2, #96	@ 0x60
 80003b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 500;
 80003b8:	003b      	movs	r3, r7
 80003ba:	22fa      	movs	r2, #250	@ 0xfa
 80003bc:	0052      	lsls	r2, r2, #1
 80003be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003c0:	003b      	movs	r3, r7
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003c6:	003b      	movs	r3, r7
 80003c8:	2200      	movs	r2, #0
 80003ca:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003cc:	0039      	movs	r1, r7
 80003ce:	4b08      	ldr	r3, [pc, #32]	@ (80003f0 <MX_TIM22_Init+0xf8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 fc18 	bl	8001c08 <HAL_TIM_PWM_ConfigChannel>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM22_Init+0xe8>
  {
    Error_Handler();
 80003dc:	f000 f9c0 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 80003e0:	4b03      	ldr	r3, [pc, #12]	@ (80003f0 <MX_TIM22_Init+0xf8>)
 80003e2:	0018      	movs	r0, r3
 80003e4:	f000 f9ee 	bl	80007c4 <HAL_TIM_MspPostInit>

}
 80003e8:	46c0      	nop			@ (mov r8, r8)
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b00a      	add	sp, #40	@ 0x28
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000028 	.word	0x20000028
 80003f4:	40011400 	.word	0x40011400

080003f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f8:	b590      	push	{r4, r7, lr}
 80003fa:	b089      	sub	sp, #36	@ 0x24
 80003fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	240c      	movs	r4, #12
 8000400:	193b      	adds	r3, r7, r4
 8000402:	0018      	movs	r0, r3
 8000404:	2314      	movs	r3, #20
 8000406:	001a      	movs	r2, r3
 8000408:	2100      	movs	r1, #0
 800040a:	f002 f80b 	bl	8002424 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800040e:	4b28      	ldr	r3, [pc, #160]	@ (80004b0 <MX_GPIO_Init+0xb8>)
 8000410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000412:	4b27      	ldr	r3, [pc, #156]	@ (80004b0 <MX_GPIO_Init+0xb8>)
 8000414:	2102      	movs	r1, #2
 8000416:	430a      	orrs	r2, r1
 8000418:	62da      	str	r2, [r3, #44]	@ 0x2c
 800041a:	4b25      	ldr	r3, [pc, #148]	@ (80004b0 <MX_GPIO_Init+0xb8>)
 800041c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800041e:	2202      	movs	r2, #2
 8000420:	4013      	ands	r3, r2
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b22      	ldr	r3, [pc, #136]	@ (80004b0 <MX_GPIO_Init+0xb8>)
 8000428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800042a:	4b21      	ldr	r3, [pc, #132]	@ (80004b0 <MX_GPIO_Init+0xb8>)
 800042c:	2101      	movs	r1, #1
 800042e:	430a      	orrs	r2, r1
 8000430:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000432:	4b1f      	ldr	r3, [pc, #124]	@ (80004b0 <MX_GPIO_Init+0xb8>)
 8000434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000436:	2201      	movs	r2, #1
 8000438:	4013      	ands	r3, r2
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D7_Pin|RS_Pin, GPIO_PIN_RESET);
 800043e:	4b1d      	ldr	r3, [pc, #116]	@ (80004b4 <MX_GPIO_Init+0xbc>)
 8000440:	2200      	movs	r2, #0
 8000442:	210a      	movs	r1, #10
 8000444:	0018      	movs	r0, r3
 8000446:	f000 fd01 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D6_Pin|D5_Pin|D4_Pin|EN_Pin, GPIO_PIN_RESET);
 800044a:	2387      	movs	r3, #135	@ 0x87
 800044c:	0219      	lsls	r1, r3, #8
 800044e:	23a0      	movs	r3, #160	@ 0xa0
 8000450:	05db      	lsls	r3, r3, #23
 8000452:	2200      	movs	r2, #0
 8000454:	0018      	movs	r0, r3
 8000456:	f000 fcf9 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D7_Pin RS_Pin */
  GPIO_InitStruct.Pin = D7_Pin|RS_Pin;
 800045a:	193b      	adds	r3, r7, r4
 800045c:	220a      	movs	r2, #10
 800045e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000460:	193b      	adds	r3, r7, r4
 8000462:	2201      	movs	r2, #1
 8000464:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	193b      	adds	r3, r7, r4
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000472:	193b      	adds	r3, r7, r4
 8000474:	4a0f      	ldr	r2, [pc, #60]	@ (80004b4 <MX_GPIO_Init+0xbc>)
 8000476:	0019      	movs	r1, r3
 8000478:	0010      	movs	r0, r2
 800047a:	f000 fb71 	bl	8000b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin EN_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin|EN_Pin;
 800047e:	0021      	movs	r1, r4
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2287      	movs	r2, #135	@ 0x87
 8000484:	0212      	lsls	r2, r2, #8
 8000486:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2201      	movs	r2, #1
 800048c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049a:	187a      	adds	r2, r7, r1
 800049c:	23a0      	movs	r3, #160	@ 0xa0
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	0011      	movs	r1, r2
 80004a2:	0018      	movs	r0, r3
 80004a4:	f000 fb5c 	bl	8000b60 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004a8:	46c0      	nop			@ (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b009      	add	sp, #36	@ 0x24
 80004ae:	bd90      	pop	{r4, r7, pc}
 80004b0:	40021000 	.word	0x40021000
 80004b4:	50000400 	.word	0x50000400

080004b8 <STARTUP_LCD>:

/* USER CODE BEGIN 4 */
void STARTUP_LCD(void){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	MANAGER_LCD(0x33, INSTRUCTION);
 80004bc:	2100      	movs	r1, #0
 80004be:	2033      	movs	r0, #51	@ 0x33
 80004c0:	f000 f81a 	bl	80004f8 <MANAGER_LCD>
	MANAGER_LCD(0x32, INSTRUCTION);
 80004c4:	2100      	movs	r1, #0
 80004c6:	2032      	movs	r0, #50	@ 0x32
 80004c8:	f000 f816 	bl	80004f8 <MANAGER_LCD>
	MANAGER_LCD(0x28, INSTRUCTION);
 80004cc:	2100      	movs	r1, #0
 80004ce:	2028      	movs	r0, #40	@ 0x28
 80004d0:	f000 f812 	bl	80004f8 <MANAGER_LCD>
	MANAGER_LCD(0x0C, INSTRUCTION);
 80004d4:	2100      	movs	r1, #0
 80004d6:	200c      	movs	r0, #12
 80004d8:	f000 f80e 	bl	80004f8 <MANAGER_LCD>
	MANAGER_LCD(0x06, INSTRUCTION);
 80004dc:	2100      	movs	r1, #0
 80004de:	2006      	movs	r0, #6
 80004e0:	f000 f80a 	bl	80004f8 <MANAGER_LCD>
	MANAGER_LCD(0x01, INSTRUCTION);
 80004e4:	2100      	movs	r1, #0
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 f806 	bl	80004f8 <MANAGER_LCD>
	HAL_Delay(2);
 80004ec:	2002      	movs	r0, #2
 80004ee:	f000 fa5f 	bl	80009b0 <HAL_Delay>
}
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <MANAGER_LCD>:

	for(int i = 0; message[i] != '\0'; ++i){
		MANAGER_LCD(message[i], DATA);
	}
}
void MANAGER_LCD(uint8_t data, uint8_t state){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	0002      	movs	r2, r0
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	1c0a      	adds	r2, r1, #0
 8000508:	701a      	strb	r2, [r3, #0]
	BIT.P0 = (data >> 0) & 1;
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2201      	movs	r2, #1
 8000510:	4013      	ands	r3, r2
 8000512:	b2da      	uxtb	r2, r3
 8000514:	4b90      	ldr	r3, [pc, #576]	@ (8000758 <MANAGER_LCD+0x260>)
 8000516:	2101      	movs	r1, #1
 8000518:	400a      	ands	r2, r1
 800051a:	0010      	movs	r0, r2
 800051c:	781a      	ldrb	r2, [r3, #0]
 800051e:	2101      	movs	r1, #1
 8000520:	438a      	bics	r2, r1
 8000522:	1c11      	adds	r1, r2, #0
 8000524:	1c02      	adds	r2, r0, #0
 8000526:	430a      	orrs	r2, r1
 8000528:	701a      	strb	r2, [r3, #0]
	BIT.P1 = (data >> 1) & 1;
 800052a:	1dfb      	adds	r3, r7, #7
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	085b      	lsrs	r3, r3, #1
 8000530:	b2db      	uxtb	r3, r3
 8000532:	1c1a      	adds	r2, r3, #0
 8000534:	2301      	movs	r3, #1
 8000536:	4013      	ands	r3, r2
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b87      	ldr	r3, [pc, #540]	@ (8000758 <MANAGER_LCD+0x260>)
 800053c:	2101      	movs	r1, #1
 800053e:	400a      	ands	r2, r1
 8000540:	1890      	adds	r0, r2, r2
 8000542:	781a      	ldrb	r2, [r3, #0]
 8000544:	2102      	movs	r1, #2
 8000546:	438a      	bics	r2, r1
 8000548:	1c11      	adds	r1, r2, #0
 800054a:	1c02      	adds	r2, r0, #0
 800054c:	430a      	orrs	r2, r1
 800054e:	701a      	strb	r2, [r3, #0]
	BIT.P2 = (data >> 2) & 1;
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	089b      	lsrs	r3, r3, #2
 8000556:	b2db      	uxtb	r3, r3
 8000558:	1c1a      	adds	r2, r3, #0
 800055a:	2301      	movs	r3, #1
 800055c:	4013      	ands	r3, r2
 800055e:	b2da      	uxtb	r2, r3
 8000560:	4b7d      	ldr	r3, [pc, #500]	@ (8000758 <MANAGER_LCD+0x260>)
 8000562:	2101      	movs	r1, #1
 8000564:	400a      	ands	r2, r1
 8000566:	0090      	lsls	r0, r2, #2
 8000568:	781a      	ldrb	r2, [r3, #0]
 800056a:	2104      	movs	r1, #4
 800056c:	438a      	bics	r2, r1
 800056e:	1c11      	adds	r1, r2, #0
 8000570:	1c02      	adds	r2, r0, #0
 8000572:	430a      	orrs	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
	BIT.P3 = (data >> 3) & 1;
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	08db      	lsrs	r3, r3, #3
 800057c:	b2db      	uxtb	r3, r3
 800057e:	1c1a      	adds	r2, r3, #0
 8000580:	2301      	movs	r3, #1
 8000582:	4013      	ands	r3, r2
 8000584:	b2da      	uxtb	r2, r3
 8000586:	4b74      	ldr	r3, [pc, #464]	@ (8000758 <MANAGER_LCD+0x260>)
 8000588:	2101      	movs	r1, #1
 800058a:	400a      	ands	r2, r1
 800058c:	00d0      	lsls	r0, r2, #3
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	2108      	movs	r1, #8
 8000592:	438a      	bics	r2, r1
 8000594:	1c11      	adds	r1, r2, #0
 8000596:	1c02      	adds	r2, r0, #0
 8000598:	430a      	orrs	r2, r1
 800059a:	701a      	strb	r2, [r3, #0]
	BIT.P4 = (data >> 4) & 1;
 800059c:	1dfb      	adds	r3, r7, #7
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	091b      	lsrs	r3, r3, #4
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	1c1a      	adds	r2, r3, #0
 80005a6:	2301      	movs	r3, #1
 80005a8:	4013      	ands	r3, r2
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4b6a      	ldr	r3, [pc, #424]	@ (8000758 <MANAGER_LCD+0x260>)
 80005ae:	2101      	movs	r1, #1
 80005b0:	400a      	ands	r2, r1
 80005b2:	0110      	lsls	r0, r2, #4
 80005b4:	781a      	ldrb	r2, [r3, #0]
 80005b6:	2110      	movs	r1, #16
 80005b8:	438a      	bics	r2, r1
 80005ba:	1c11      	adds	r1, r2, #0
 80005bc:	1c02      	adds	r2, r0, #0
 80005be:	430a      	orrs	r2, r1
 80005c0:	701a      	strb	r2, [r3, #0]
	BIT.P5 = (data >> 5) & 1;
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	095b      	lsrs	r3, r3, #5
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	1c1a      	adds	r2, r3, #0
 80005cc:	2301      	movs	r3, #1
 80005ce:	4013      	ands	r3, r2
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b61      	ldr	r3, [pc, #388]	@ (8000758 <MANAGER_LCD+0x260>)
 80005d4:	2101      	movs	r1, #1
 80005d6:	400a      	ands	r2, r1
 80005d8:	0150      	lsls	r0, r2, #5
 80005da:	781a      	ldrb	r2, [r3, #0]
 80005dc:	2120      	movs	r1, #32
 80005de:	438a      	bics	r2, r1
 80005e0:	1c11      	adds	r1, r2, #0
 80005e2:	1c02      	adds	r2, r0, #0
 80005e4:	430a      	orrs	r2, r1
 80005e6:	701a      	strb	r2, [r3, #0]
	BIT.P6 = (data >> 6) & 1;
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	099b      	lsrs	r3, r3, #6
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	1c1a      	adds	r2, r3, #0
 80005f2:	2301      	movs	r3, #1
 80005f4:	4013      	ands	r3, r2
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b57      	ldr	r3, [pc, #348]	@ (8000758 <MANAGER_LCD+0x260>)
 80005fa:	2101      	movs	r1, #1
 80005fc:	400a      	ands	r2, r1
 80005fe:	0190      	lsls	r0, r2, #6
 8000600:	781a      	ldrb	r2, [r3, #0]
 8000602:	2140      	movs	r1, #64	@ 0x40
 8000604:	438a      	bics	r2, r1
 8000606:	1c11      	adds	r1, r2, #0
 8000608:	1c02      	adds	r2, r0, #0
 800060a:	430a      	orrs	r2, r1
 800060c:	701a      	strb	r2, [r3, #0]
	BIT.P7 = (data >> 7) & 1;
 800060e:	1dfb      	adds	r3, r7, #7
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	09db      	lsrs	r3, r3, #7
 8000614:	b2db      	uxtb	r3, r3
 8000616:	1c1a      	adds	r2, r3, #0
 8000618:	2301      	movs	r3, #1
 800061a:	4013      	ands	r3, r2
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b4e      	ldr	r3, [pc, #312]	@ (8000758 <MANAGER_LCD+0x260>)
 8000620:	01d0      	lsls	r0, r2, #7
 8000622:	781a      	ldrb	r2, [r3, #0]
 8000624:	217f      	movs	r1, #127	@ 0x7f
 8000626:	400a      	ands	r2, r1
 8000628:	1c11      	adds	r1, r2, #0
 800062a:	1c02      	adds	r2, r0, #0
 800062c:	430a      	orrs	r2, r1
 800062e:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, BIT.P4);
 8000630:	4b49      	ldr	r3, [pc, #292]	@ (8000758 <MANAGER_LCD+0x260>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	06db      	lsls	r3, r3, #27
 8000636:	0fdb      	lsrs	r3, r3, #31
 8000638:	b2db      	uxtb	r3, r3
 800063a:	001a      	movs	r2, r3
 800063c:	2380      	movs	r3, #128	@ 0x80
 800063e:	00d9      	lsls	r1, r3, #3
 8000640:	23a0      	movs	r3, #160	@ 0xa0
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	0018      	movs	r0, r3
 8000646:	f000 fc01 	bl	8000e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, BIT.P5);
 800064a:	4b43      	ldr	r3, [pc, #268]	@ (8000758 <MANAGER_LCD+0x260>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	069b      	lsls	r3, r3, #26
 8000650:	0fdb      	lsrs	r3, r3, #31
 8000652:	b2db      	uxtb	r3, r3
 8000654:	001a      	movs	r2, r3
 8000656:	2380      	movs	r3, #128	@ 0x80
 8000658:	0099      	lsls	r1, r3, #2
 800065a:	23a0      	movs	r3, #160	@ 0xa0
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fbf4 	bl	8000e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, BIT.P6);
 8000664:	4b3c      	ldr	r3, [pc, #240]	@ (8000758 <MANAGER_LCD+0x260>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	065b      	lsls	r3, r3, #25
 800066a:	0fdb      	lsrs	r3, r3, #31
 800066c:	b2db      	uxtb	r3, r3
 800066e:	001a      	movs	r2, r3
 8000670:	2380      	movs	r3, #128	@ 0x80
 8000672:	0059      	lsls	r1, r3, #1
 8000674:	23a0      	movs	r3, #160	@ 0xa0
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fbe7 	bl	8000e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, BIT.P7);
 800067e:	4b36      	ldr	r3, [pc, #216]	@ (8000758 <MANAGER_LCD+0x260>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	061b      	lsls	r3, r3, #24
 8000684:	0fdb      	lsrs	r3, r3, #31
 8000686:	b2db      	uxtb	r3, r3
 8000688:	001a      	movs	r2, r3
 800068a:	4b34      	ldr	r3, [pc, #208]	@ (800075c <MANAGER_LCD+0x264>)
 800068c:	2102      	movs	r1, #2
 800068e:	0018      	movs	r0, r3
 8000690:	f000 fbdc 	bl	8000e4c <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	021a      	lsls	r2, r3, #8
 8000698:	23a0      	movs	r3, #160	@ 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fbf1 	bl	8000e86 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 f983 	bl	80009b0 <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 80006aa:	2380      	movs	r3, #128	@ 0x80
 80006ac:	021a      	lsls	r2, r3, #8
 80006ae:	23a0      	movs	r3, #160	@ 0xa0
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	0011      	movs	r1, r2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fbe6 	bl	8000e86 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f000 f978 	bl	80009b0 <HAL_Delay>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, BIT.P0);
 80006c0:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <MANAGER_LCD+0x260>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	07db      	lsls	r3, r3, #31
 80006c6:	0fdb      	lsrs	r3, r3, #31
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	001a      	movs	r2, r3
 80006cc:	2380      	movs	r3, #128	@ 0x80
 80006ce:	00d9      	lsls	r1, r3, #3
 80006d0:	23a0      	movs	r3, #160	@ 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fbb9 	bl	8000e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, BIT.P1);
 80006da:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MANAGER_LCD+0x260>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	079b      	lsls	r3, r3, #30
 80006e0:	0fdb      	lsrs	r3, r3, #31
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	001a      	movs	r2, r3
 80006e6:	2380      	movs	r3, #128	@ 0x80
 80006e8:	0099      	lsls	r1, r3, #2
 80006ea:	23a0      	movs	r3, #160	@ 0xa0
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 fbac 	bl	8000e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, BIT.P2);
 80006f4:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MANAGER_LCD+0x260>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	075b      	lsls	r3, r3, #29
 80006fa:	0fdb      	lsrs	r3, r3, #31
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	001a      	movs	r2, r3
 8000700:	2380      	movs	r3, #128	@ 0x80
 8000702:	0059      	lsls	r1, r3, #1
 8000704:	23a0      	movs	r3, #160	@ 0xa0
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	0018      	movs	r0, r3
 800070a:	f000 fb9f 	bl	8000e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, BIT.P3);
 800070e:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MANAGER_LCD+0x260>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	071b      	lsls	r3, r3, #28
 8000714:	0fdb      	lsrs	r3, r3, #31
 8000716:	b2db      	uxtb	r3, r3
 8000718:	001a      	movs	r2, r3
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MANAGER_LCD+0x264>)
 800071c:	2102      	movs	r1, #2
 800071e:	0018      	movs	r0, r3
 8000720:	f000 fb94 	bl	8000e4c <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8000724:	2380      	movs	r3, #128	@ 0x80
 8000726:	021a      	lsls	r2, r3, #8
 8000728:	23a0      	movs	r3, #160	@ 0xa0
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	0011      	movs	r1, r2
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fba9 	bl	8000e86 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 8000734:	2001      	movs	r0, #1
 8000736:	f000 f93b 	bl	80009b0 <HAL_Delay>
	HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 800073a:	2380      	movs	r3, #128	@ 0x80
 800073c:	021a      	lsls	r2, r3, #8
 800073e:	23a0      	movs	r3, #160	@ 0xa0
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	0011      	movs	r1, r2
 8000744:	0018      	movs	r0, r3
 8000746:	f000 fb9e 	bl	8000e86 <HAL_GPIO_TogglePin>
	HAL_Delay(1);
 800074a:	2001      	movs	r0, #1
 800074c:	f000 f930 	bl	80009b0 <HAL_Delay>
}
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000068 	.word	0x20000068
 800075c:	50000400 	.word	0x50000400

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	46c0      	nop			@ (mov r8, r8)
 800076a:	e7fd      	b.n	8000768 <Error_Handler+0x8>

0800076c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <HAL_MspInit+0x24>)
 8000772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_MspInit+0x24>)
 8000776:	2101      	movs	r1, #1
 8000778:	430a      	orrs	r2, r1
 800077a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <HAL_MspInit+0x24>)
 800077e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000780:	4b03      	ldr	r3, [pc, #12]	@ (8000790 <HAL_MspInit+0x24>)
 8000782:	2180      	movs	r1, #128	@ 0x80
 8000784:	0549      	lsls	r1, r1, #21
 8000786:	430a      	orrs	r2, r1
 8000788:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM22)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a06      	ldr	r2, [pc, #24]	@ (80007bc <HAL_TIM_Base_MspInit+0x28>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d105      	bne.n	80007b2 <HAL_TIM_Base_MspInit+0x1e>
  {
    /* USER CODE BEGIN TIM22_MspInit 0 */

    /* USER CODE END TIM22_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM22_CLK_ENABLE();
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_TIM_Base_MspInit+0x2c>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007aa:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <HAL_TIM_Base_MspInit+0x2c>)
 80007ac:	2120      	movs	r1, #32
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* USER CODE END TIM22_MspInit 1 */

  }

}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b002      	add	sp, #8
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	40011400 	.word	0x40011400
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b089      	sub	sp, #36	@ 0x24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	240c      	movs	r4, #12
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	0018      	movs	r0, r3
 80007d2:	2314      	movs	r3, #20
 80007d4:	001a      	movs	r2, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	f001 fe24 	bl	8002424 <memset>
  if(htim->Instance==TIM22)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a14      	ldr	r2, [pc, #80]	@ (8000834 <HAL_TIM_MspPostInit+0x70>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d121      	bne.n	800082a <HAL_TIM_MspPostInit+0x66>
  {
    /* USER CODE BEGIN TIM22_MspPostInit 0 */

    /* USER CODE END TIM22_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <HAL_TIM_MspPostInit+0x74>)
 80007e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <HAL_TIM_MspPostInit+0x74>)
 80007ec:	2102      	movs	r1, #2
 80007ee:	430a      	orrs	r2, r1
 80007f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <HAL_TIM_MspPostInit+0x74>)
 80007f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007f6:	2202      	movs	r2, #2
 80007f8:	4013      	ands	r3, r2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM22 GPIO Configuration
    PB4     ------> TIM22_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007fe:	0021      	movs	r1, r4
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2210      	movs	r2, #16
 8000804:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2202      	movs	r2, #2
 800080a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2204      	movs	r2, #4
 800081c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	187b      	adds	r3, r7, r1
 8000820:	4a06      	ldr	r2, [pc, #24]	@ (800083c <HAL_TIM_MspPostInit+0x78>)
 8000822:	0019      	movs	r1, r3
 8000824:	0010      	movs	r0, r2
 8000826:	f000 f99b 	bl	8000b60 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM22_MspPostInit 1 */

    /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b009      	add	sp, #36	@ 0x24
 8000830:	bd90      	pop	{r4, r7, pc}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	40011400 	.word	0x40011400
 8000838:	40021000 	.word	0x40021000
 800083c:	50000400 	.word	0x50000400

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	e7fd      	b.n	8000844 <NMI_Handler+0x4>

08000848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	e7fd      	b.n	800084c <HardFault_Handler+0x4>

08000850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000854:	46c0      	nop			@ (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f886 	bl	8000978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	46c0      	nop			@ (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800087c:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800087e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000880:	f7ff fff7 	bl	8000872 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	@ (80008b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	@ (80008bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <LoopForever+0xe>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	@ (80008c8 <LoopForever+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008aa:	f001 fdc3 	bl	8002434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ae:	f7ff fcb7 	bl	8000220 <main>

080008b2 <LoopForever>:

LoopForever:
    b LoopForever
 80008b2:	e7fe      	b.n	80008b2 <LoopForever>
   ldr   r0, =_estack
 80008b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008c0:	080024b8 	.word	0x080024b8
  ldr r2, =_sbss
 80008c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c8:	20000070 	.word	0x20000070

080008cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_COMP_IRQHandler>
	...

080008d0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80008dc:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <HAL_Init+0x3c>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_Init+0x3c>)
 80008e2:	2140      	movs	r1, #64	@ 0x40
 80008e4:	430a      	orrs	r2, r1
 80008e6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e8:	2003      	movs	r0, #3
 80008ea:	f000 f811 	bl	8000910 <HAL_InitTick>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d003      	beq.n	80008fa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	e001      	b.n	80008fe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008fa:	f7ff ff37 	bl	800076c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
}
 8000902:	0018      	movs	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	b002      	add	sp, #8
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	40022000 	.word	0x40022000

08000910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <HAL_InitTick+0x5c>)
 800091a:	681c      	ldr	r4, [r3, #0]
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_InitTick+0x60>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	0019      	movs	r1, r3
 8000922:	23fa      	movs	r3, #250	@ 0xfa
 8000924:	0098      	lsls	r0, r3, #2
 8000926:	f7ff fbef 	bl	8000108 <__udivsi3>
 800092a:	0003      	movs	r3, r0
 800092c:	0019      	movs	r1, r3
 800092e:	0020      	movs	r0, r4
 8000930:	f7ff fbea 	bl	8000108 <__udivsi3>
 8000934:	0003      	movs	r3, r0
 8000936:	0018      	movs	r0, r3
 8000938:	f000 f905 	bl	8000b46 <HAL_SYSTICK_Config>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	e00f      	b.n	8000964 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b03      	cmp	r3, #3
 8000948:	d80b      	bhi.n	8000962 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	2301      	movs	r3, #1
 800094e:	425b      	negs	r3, r3
 8000950:	2200      	movs	r2, #0
 8000952:	0018      	movs	r0, r3
 8000954:	f000 f8e2 	bl	8000b1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_InitTick+0x64>)
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	e000      	b.n	8000964 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b003      	add	sp, #12
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000008 	.word	0x20000008
 8000974:	20000004 	.word	0x20000004

08000978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_IncTick+0x1c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	001a      	movs	r2, r3
 8000982:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <HAL_IncTick+0x20>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	18d2      	adds	r2, r2, r3
 8000988:	4b03      	ldr	r3, [pc, #12]	@ (8000998 <HAL_IncTick+0x20>)
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	20000008 	.word	0x20000008
 8000998:	2000006c 	.word	0x2000006c

0800099c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  return uwTick;
 80009a0:	4b02      	ldr	r3, [pc, #8]	@ (80009ac <HAL_GetTick+0x10>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	2000006c 	.word	0x2000006c

080009b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f7ff fff0 	bl	800099c <HAL_GetTick>
 80009bc:	0003      	movs	r3, r0
 80009be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3301      	adds	r3, #1
 80009c8:	d005      	beq.n	80009d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <HAL_Delay+0x44>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	001a      	movs	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	189b      	adds	r3, r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	f7ff ffe0 	bl	800099c <HAL_GetTick>
 80009dc:	0002      	movs	r2, r0
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d8f7      	bhi.n	80009d8 <HAL_Delay+0x28>
  {
  }
}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b004      	add	sp, #16
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	20000008 	.word	0x20000008

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	0002      	movs	r2, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a0c:	d828      	bhi.n	8000a60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a0e:	4a2f      	ldr	r2, [pc, #188]	@ (8000acc <__NVIC_SetPriority+0xd4>)
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b25b      	sxtb	r3, r3
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	33c0      	adds	r3, #192	@ 0xc0
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	589b      	ldr	r3, [r3, r2]
 8000a1e:	1dfa      	adds	r2, r7, #7
 8000a20:	7812      	ldrb	r2, [r2, #0]
 8000a22:	0011      	movs	r1, r2
 8000a24:	2203      	movs	r2, #3
 8000a26:	400a      	ands	r2, r1
 8000a28:	00d2      	lsls	r2, r2, #3
 8000a2a:	21ff      	movs	r1, #255	@ 0xff
 8000a2c:	4091      	lsls	r1, r2
 8000a2e:	000a      	movs	r2, r1
 8000a30:	43d2      	mvns	r2, r2
 8000a32:	401a      	ands	r2, r3
 8000a34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	019b      	lsls	r3, r3, #6
 8000a3a:	22ff      	movs	r2, #255	@ 0xff
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	0018      	movs	r0, r3
 8000a44:	2303      	movs	r3, #3
 8000a46:	4003      	ands	r3, r0
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4c:	481f      	ldr	r0, [pc, #124]	@ (8000acc <__NVIC_SetPriority+0xd4>)
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	089b      	lsrs	r3, r3, #2
 8000a56:	430a      	orrs	r2, r1
 8000a58:	33c0      	adds	r3, #192	@ 0xc0
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a5e:	e031      	b.n	8000ac4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad0 <__NVIC_SetPriority+0xd8>)
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	0019      	movs	r1, r3
 8000a68:	230f      	movs	r3, #15
 8000a6a:	400b      	ands	r3, r1
 8000a6c:	3b08      	subs	r3, #8
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	3306      	adds	r3, #6
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	18d3      	adds	r3, r2, r3
 8000a76:	3304      	adds	r3, #4
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	1dfa      	adds	r2, r7, #7
 8000a7c:	7812      	ldrb	r2, [r2, #0]
 8000a7e:	0011      	movs	r1, r2
 8000a80:	2203      	movs	r2, #3
 8000a82:	400a      	ands	r2, r1
 8000a84:	00d2      	lsls	r2, r2, #3
 8000a86:	21ff      	movs	r1, #255	@ 0xff
 8000a88:	4091      	lsls	r1, r2
 8000a8a:	000a      	movs	r2, r1
 8000a8c:	43d2      	mvns	r2, r2
 8000a8e:	401a      	ands	r2, r3
 8000a90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	019b      	lsls	r3, r3, #6
 8000a96:	22ff      	movs	r2, #255	@ 0xff
 8000a98:	401a      	ands	r2, r3
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	4003      	ands	r3, r0
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa8:	4809      	ldr	r0, [pc, #36]	@ (8000ad0 <__NVIC_SetPriority+0xd8>)
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	001c      	movs	r4, r3
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	4023      	ands	r3, r4
 8000ab4:	3b08      	subs	r3, #8
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	3306      	adds	r3, #6
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	18c3      	adds	r3, r0, r3
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	601a      	str	r2, [r3, #0]
}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b003      	add	sp, #12
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	1e5a      	subs	r2, r3, #1
 8000ae0:	2380      	movs	r3, #128	@ 0x80
 8000ae2:	045b      	lsls	r3, r3, #17
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d301      	bcc.n	8000aec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e010      	b.n	8000b0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <SysTick_Config+0x44>)
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	3a01      	subs	r2, #1
 8000af2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af4:	2301      	movs	r3, #1
 8000af6:	425b      	negs	r3, r3
 8000af8:	2103      	movs	r1, #3
 8000afa:	0018      	movs	r0, r3
 8000afc:	f7ff ff7c 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <SysTick_Config+0x44>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	@ (8000b18 <SysTick_Config+0x44>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	0018      	movs	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	210f      	movs	r1, #15
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	1c02      	adds	r2, r0, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	0011      	movs	r1, r2
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff ffbf 	bl	8000ad4 <SysTick_Config>
 8000b56:	0003      	movs	r3, r0
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b76:	e14f      	b.n	8000e18 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d100      	bne.n	8000b90 <HAL_GPIO_Init+0x30>
 8000b8e:	e140      	b.n	8000e12 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2203      	movs	r2, #3
 8000b96:	4013      	ands	r3, r2
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d005      	beq.n	8000ba8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d130      	bne.n	8000c0a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	43da      	mvns	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	0013      	movs	r3, r2
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bde:	2201      	movs	r2, #1
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	43da      	mvns	r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	091b      	lsrs	r3, r3, #4
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2203      	movs	r2, #3
 8000c10:	4013      	ands	r3, r2
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d017      	beq.n	8000c46 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2203      	movs	r2, #3
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	43da      	mvns	r2, r3
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d123      	bne.n	8000c9a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	08da      	lsrs	r2, r3, #3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3208      	adds	r2, #8
 8000c5a:	0092      	lsls	r2, r2, #2
 8000c5c:	58d3      	ldr	r3, [r2, r3]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	2207      	movs	r2, #7
 8000c64:	4013      	ands	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	220f      	movs	r2, #15
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	0013      	movs	r3, r2
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	691a      	ldr	r2, [r3, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2107      	movs	r1, #7
 8000c7e:	400b      	ands	r3, r1
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	409a      	lsls	r2, r3
 8000c84:	0013      	movs	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	6939      	ldr	r1, [r7, #16]
 8000c98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	409a      	lsls	r2, r3
 8000ca8:	0013      	movs	r3, r2
 8000caa:	43da      	mvns	r2, r3
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	23c0      	movs	r3, #192	@ 0xc0
 8000cd4:	029b      	lsls	r3, r3, #10
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	d100      	bne.n	8000cdc <HAL_GPIO_Init+0x17c>
 8000cda:	e09a      	b.n	8000e12 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cdc:	4b54      	ldr	r3, [pc, #336]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ce0:	4b53      	ldr	r3, [pc, #332]	@ (8000e30 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ce8:	4a52      	ldr	r2, [pc, #328]	@ (8000e34 <HAL_GPIO_Init+0x2d4>)
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	3302      	adds	r3, #2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	589b      	ldr	r3, [r3, r2]
 8000cf4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	220f      	movs	r2, #15
 8000d00:	409a      	lsls	r2, r3
 8000d02:	0013      	movs	r3, r2
 8000d04:	43da      	mvns	r2, r3
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	23a0      	movs	r3, #160	@ 0xa0
 8000d10:	05db      	lsls	r3, r3, #23
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d019      	beq.n	8000d4a <HAL_GPIO_Init+0x1ea>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a47      	ldr	r2, [pc, #284]	@ (8000e38 <HAL_GPIO_Init+0x2d8>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d013      	beq.n	8000d46 <HAL_GPIO_Init+0x1e6>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a46      	ldr	r2, [pc, #280]	@ (8000e3c <HAL_GPIO_Init+0x2dc>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d00d      	beq.n	8000d42 <HAL_GPIO_Init+0x1e2>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a45      	ldr	r2, [pc, #276]	@ (8000e40 <HAL_GPIO_Init+0x2e0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d007      	beq.n	8000d3e <HAL_GPIO_Init+0x1de>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a44      	ldr	r2, [pc, #272]	@ (8000e44 <HAL_GPIO_Init+0x2e4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d101      	bne.n	8000d3a <HAL_GPIO_Init+0x1da>
 8000d36:	2305      	movs	r3, #5
 8000d38:	e008      	b.n	8000d4c <HAL_GPIO_Init+0x1ec>
 8000d3a:	2306      	movs	r3, #6
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x1ec>
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e004      	b.n	8000d4c <HAL_GPIO_Init+0x1ec>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e002      	b.n	8000d4c <HAL_GPIO_Init+0x1ec>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <HAL_GPIO_Init+0x1ec>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	2103      	movs	r1, #3
 8000d50:	400a      	ands	r2, r1
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4093      	lsls	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d5c:	4935      	ldr	r1, [pc, #212]	@ (8000e34 <HAL_GPIO_Init+0x2d4>)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	3302      	adds	r3, #2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d6a:	4b37      	ldr	r3, [pc, #220]	@ (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	43da      	mvns	r2, r3
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	2380      	movs	r3, #128	@ 0x80
 8000d80:	035b      	lsls	r3, r3, #13
 8000d82:	4013      	ands	r3, r2
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d94:	4b2c      	ldr	r3, [pc, #176]	@ (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43da      	mvns	r2, r3
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	039b      	lsls	r3, r3, #14
 8000dac:	4013      	ands	r3, r2
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000db8:	4b23      	ldr	r3, [pc, #140]	@ (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000dbe:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	2380      	movs	r3, #128	@ 0x80
 8000dd4:	029b      	lsls	r3, r3, #10
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000de2:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de8:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43da      	mvns	r2, r3
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	2380      	movs	r3, #128	@ 0x80
 8000dfe:	025b      	lsls	r3, r3, #9
 8000e00:	4013      	ands	r3, r2
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <HAL_GPIO_Init+0x2e8>)
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	40da      	lsrs	r2, r3
 8000e20:	1e13      	subs	r3, r2, #0
 8000e22:	d000      	beq.n	8000e26 <HAL_GPIO_Init+0x2c6>
 8000e24:	e6a8      	b.n	8000b78 <HAL_GPIO_Init+0x18>
  }
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b006      	add	sp, #24
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010000 	.word	0x40010000
 8000e38:	50000400 	.word	0x50000400
 8000e3c:	50000800 	.word	0x50000800
 8000e40:	50000c00 	.word	0x50000c00
 8000e44:	50001c00 	.word	0x50001c00
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	0008      	movs	r0, r1
 8000e56:	0011      	movs	r1, r2
 8000e58:	1cbb      	adds	r3, r7, #2
 8000e5a:	1c02      	adds	r2, r0, #0
 8000e5c:	801a      	strh	r2, [r3, #0]
 8000e5e:	1c7b      	adds	r3, r7, #1
 8000e60:	1c0a      	adds	r2, r1, #0
 8000e62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e64:	1c7b      	adds	r3, r7, #1
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d004      	beq.n	8000e76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e6c:	1cbb      	adds	r3, r7, #2
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000e74:	e003      	b.n	8000e7e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000e76:	1cbb      	adds	r3, r7, #2
 8000e78:	881a      	ldrh	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b084      	sub	sp, #16
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	000a      	movs	r2, r1
 8000e90:	1cbb      	adds	r3, r7, #2
 8000e92:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e9a:	1cbb      	adds	r3, r7, #2
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	041a      	lsls	r2, r3, #16
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	1cb9      	adds	r1, r7, #2
 8000eaa:	8809      	ldrh	r1, [r1, #0]
 8000eac:	400b      	ands	r3, r1
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	619a      	str	r2, [r3, #24]
}
 8000eb4:	46c0      	nop			@ (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b004      	add	sp, #16
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b08a      	sub	sp, #40	@ 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d102      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f000 fbaf 	bl	800162e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ed0:	4bcf      	ldr	r3, [pc, #828]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	220c      	movs	r2, #12
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000eda:	4bcd      	ldr	r3, [pc, #820]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	2380      	movs	r3, #128	@ 0x80
 8000ee0:	025b      	lsls	r3, r3, #9
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2201      	movs	r2, #1
 8000eec:	4013      	ands	r3, r2
 8000eee:	d100      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x36>
 8000ef0:	e07e      	b.n	8000ff0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d007      	beq.n	8000f08 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ef8:	6a3b      	ldr	r3, [r7, #32]
 8000efa:	2b0c      	cmp	r3, #12
 8000efc:	d112      	bne.n	8000f24 <HAL_RCC_OscConfig+0x68>
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	025b      	lsls	r3, r3, #9
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d10d      	bne.n	8000f24 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	4bc1      	ldr	r3, [pc, #772]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	2380      	movs	r3, #128	@ 0x80
 8000f0e:	029b      	lsls	r3, r3, #10
 8000f10:	4013      	ands	r3, r2
 8000f12:	d100      	bne.n	8000f16 <HAL_RCC_OscConfig+0x5a>
 8000f14:	e06b      	b.n	8000fee <HAL_RCC_OscConfig+0x132>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d167      	bne.n	8000fee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f000 fb85 	bl	800162e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	2380      	movs	r3, #128	@ 0x80
 8000f2a:	025b      	lsls	r3, r3, #9
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d107      	bne.n	8000f40 <HAL_RCC_OscConfig+0x84>
 8000f30:	4bb7      	ldr	r3, [pc, #732]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4bb6      	ldr	r3, [pc, #728]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000f36:	2180      	movs	r1, #128	@ 0x80
 8000f38:	0249      	lsls	r1, r1, #9
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e027      	b.n	8000f90 <HAL_RCC_OscConfig+0xd4>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	23a0      	movs	r3, #160	@ 0xa0
 8000f46:	02db      	lsls	r3, r3, #11
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d10e      	bne.n	8000f6a <HAL_RCC_OscConfig+0xae>
 8000f4c:	4bb0      	ldr	r3, [pc, #704]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4baf      	ldr	r3, [pc, #700]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000f52:	2180      	movs	r1, #128	@ 0x80
 8000f54:	02c9      	lsls	r1, r1, #11
 8000f56:	430a      	orrs	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	4bad      	ldr	r3, [pc, #692]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4bac      	ldr	r3, [pc, #688]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000f60:	2180      	movs	r1, #128	@ 0x80
 8000f62:	0249      	lsls	r1, r1, #9
 8000f64:	430a      	orrs	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	e012      	b.n	8000f90 <HAL_RCC_OscConfig+0xd4>
 8000f6a:	4ba9      	ldr	r3, [pc, #676]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4ba8      	ldr	r3, [pc, #672]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000f70:	49a8      	ldr	r1, [pc, #672]	@ (8001214 <HAL_RCC_OscConfig+0x358>)
 8000f72:	400a      	ands	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	4ba6      	ldr	r3, [pc, #664]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	2380      	movs	r3, #128	@ 0x80
 8000f7c:	025b      	lsls	r3, r3, #9
 8000f7e:	4013      	ands	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4ba2      	ldr	r3, [pc, #648]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4ba1      	ldr	r3, [pc, #644]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000f8a:	49a3      	ldr	r1, [pc, #652]	@ (8001218 <HAL_RCC_OscConfig+0x35c>)
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d015      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fd00 	bl	800099c <HAL_GetTick>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fa0:	e009      	b.n	8000fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa2:	f7ff fcfb 	bl	800099c <HAL_GetTick>
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b64      	cmp	r3, #100	@ 0x64
 8000fae:	d902      	bls.n	8000fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	f000 fb3c 	bl	800162e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fb6:	4b96      	ldr	r3, [pc, #600]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	2380      	movs	r3, #128	@ 0x80
 8000fbc:	029b      	lsls	r3, r3, #10
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d0ef      	beq.n	8000fa2 <HAL_RCC_OscConfig+0xe6>
 8000fc2:	e015      	b.n	8000ff0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fcea 	bl	800099c <HAL_GetTick>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fce:	f7ff fce5 	bl	800099c <HAL_GetTick>
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b64      	cmp	r3, #100	@ 0x64
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e326      	b.n	800162e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fe0:	4b8b      	ldr	r3, [pc, #556]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2380      	movs	r3, #128	@ 0x80
 8000fe6:	029b      	lsls	r3, r3, #10
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0x112>
 8000fec:	e000      	b.n	8000ff0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d100      	bne.n	8000ffc <HAL_RCC_OscConfig+0x140>
 8000ffa:	e08b      	b.n	8001114 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	2b04      	cmp	r3, #4
 8001006:	d005      	beq.n	8001014 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001008:	6a3b      	ldr	r3, [r7, #32]
 800100a:	2b0c      	cmp	r3, #12
 800100c:	d13e      	bne.n	800108c <HAL_RCC_OscConfig+0x1d0>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d13b      	bne.n	800108c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001014:	4b7e      	ldr	r3, [pc, #504]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2204      	movs	r2, #4
 800101a:	4013      	ands	r3, r2
 800101c:	d004      	beq.n	8001028 <HAL_RCC_OscConfig+0x16c>
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e302      	b.n	800162e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001028:	4b79      	ldr	r3, [pc, #484]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	4a7b      	ldr	r2, [pc, #492]	@ (800121c <HAL_RCC_OscConfig+0x360>)
 800102e:	4013      	ands	r3, r2
 8001030:	0019      	movs	r1, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	691b      	ldr	r3, [r3, #16]
 8001036:	021a      	lsls	r2, r3, #8
 8001038:	4b75      	ldr	r3, [pc, #468]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 800103a:	430a      	orrs	r2, r1
 800103c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800103e:	4b74      	ldr	r3, [pc, #464]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2209      	movs	r2, #9
 8001044:	4393      	bics	r3, r2
 8001046:	0019      	movs	r1, r3
 8001048:	4b71      	ldr	r3, [pc, #452]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	430a      	orrs	r2, r1
 800104e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001050:	f000 fc40 	bl	80018d4 <HAL_RCC_GetSysClockFreq>
 8001054:	0001      	movs	r1, r0
 8001056:	4b6e      	ldr	r3, [pc, #440]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	220f      	movs	r2, #15
 800105e:	4013      	ands	r3, r2
 8001060:	4a6f      	ldr	r2, [pc, #444]	@ (8001220 <HAL_RCC_OscConfig+0x364>)
 8001062:	5cd3      	ldrb	r3, [r2, r3]
 8001064:	000a      	movs	r2, r1
 8001066:	40da      	lsrs	r2, r3
 8001068:	4b6e      	ldr	r3, [pc, #440]	@ (8001224 <HAL_RCC_OscConfig+0x368>)
 800106a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800106c:	4b6e      	ldr	r3, [pc, #440]	@ (8001228 <HAL_RCC_OscConfig+0x36c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2513      	movs	r5, #19
 8001072:	197c      	adds	r4, r7, r5
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff fc4b 	bl	8000910 <HAL_InitTick>
 800107a:	0003      	movs	r3, r0
 800107c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800107e:	197b      	adds	r3, r7, r5
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d046      	beq.n	8001114 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001086:	197b      	adds	r3, r7, r5
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	e2d0      	b.n	800162e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d027      	beq.n	80010e2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001092:	4b5f      	ldr	r3, [pc, #380]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2209      	movs	r2, #9
 8001098:	4393      	bics	r3, r2
 800109a:	0019      	movs	r1, r3
 800109c:	4b5c      	ldr	r3, [pc, #368]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a4:	f7ff fc7a 	bl	800099c <HAL_GetTick>
 80010a8:	0003      	movs	r3, r0
 80010aa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ae:	f7ff fc75 	bl	800099c <HAL_GetTick>
 80010b2:	0002      	movs	r2, r0
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e2b6      	b.n	800162e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010c0:	4b53      	ldr	r3, [pc, #332]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2204      	movs	r2, #4
 80010c6:	4013      	ands	r3, r2
 80010c8:	d0f1      	beq.n	80010ae <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ca:	4b51      	ldr	r3, [pc, #324]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	4a53      	ldr	r2, [pc, #332]	@ (800121c <HAL_RCC_OscConfig+0x360>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	0019      	movs	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	021a      	lsls	r2, r3, #8
 80010da:	4b4d      	ldr	r3, [pc, #308]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 80010dc:	430a      	orrs	r2, r1
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	e018      	b.n	8001114 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	438a      	bics	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ee:	f7ff fc55 	bl	800099c <HAL_GetTick>
 80010f2:	0003      	movs	r3, r0
 80010f4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f8:	f7ff fc50 	bl	800099c <HAL_GetTick>
 80010fc:	0002      	movs	r2, r0
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e291      	b.n	800162e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800110a:	4b41      	ldr	r3, [pc, #260]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2204      	movs	r2, #4
 8001110:	4013      	ands	r3, r2
 8001112:	d1f1      	bne.n	80010f8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2210      	movs	r2, #16
 800111a:	4013      	ands	r3, r2
 800111c:	d100      	bne.n	8001120 <HAL_RCC_OscConfig+0x264>
 800111e:	e0a1      	b.n	8001264 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d140      	bne.n	80011a8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001126:	4b3a      	ldr	r3, [pc, #232]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	2380      	movs	r3, #128	@ 0x80
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4013      	ands	r3, r2
 8001130:	d005      	beq.n	800113e <HAL_RCC_OscConfig+0x282>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e277      	b.n	800162e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800113e:	4b34      	ldr	r3, [pc, #208]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4a3a      	ldr	r2, [pc, #232]	@ (800122c <HAL_RCC_OscConfig+0x370>)
 8001144:	4013      	ands	r3, r2
 8001146:	0019      	movs	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800114c:	4b30      	ldr	r3, [pc, #192]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 800114e:	430a      	orrs	r2, r1
 8001150:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001152:	4b2f      	ldr	r3, [pc, #188]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	0a19      	lsrs	r1, r3, #8
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	061a      	lsls	r2, r3, #24
 8001160:	4b2b      	ldr	r3, [pc, #172]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8001162:	430a      	orrs	r2, r1
 8001164:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116a:	0b5b      	lsrs	r3, r3, #13
 800116c:	3301      	adds	r3, #1
 800116e:	2280      	movs	r2, #128	@ 0x80
 8001170:	0212      	lsls	r2, r2, #8
 8001172:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001174:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	091b      	lsrs	r3, r3, #4
 800117a:	210f      	movs	r1, #15
 800117c:	400b      	ands	r3, r1
 800117e:	4928      	ldr	r1, [pc, #160]	@ (8001220 <HAL_RCC_OscConfig+0x364>)
 8001180:	5ccb      	ldrb	r3, [r1, r3]
 8001182:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001184:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <HAL_RCC_OscConfig+0x368>)
 8001186:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001188:	4b27      	ldr	r3, [pc, #156]	@ (8001228 <HAL_RCC_OscConfig+0x36c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2513      	movs	r5, #19
 800118e:	197c      	adds	r4, r7, r5
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff fbbd 	bl	8000910 <HAL_InitTick>
 8001196:	0003      	movs	r3, r0
 8001198:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800119a:	197b      	adds	r3, r7, r5
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d060      	beq.n	8001264 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80011a2:	197b      	adds	r3, r7, r5
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	e242      	b.n	800162e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d03f      	beq.n	8001230 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011b0:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 80011b6:	2180      	movs	r1, #128	@ 0x80
 80011b8:	0049      	lsls	r1, r1, #1
 80011ba:	430a      	orrs	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff fbed 	bl	800099c <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011c8:	f7ff fbe8 	bl	800099c <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e229      	b.n	800162e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011da:	4b0d      	ldr	r3, [pc, #52]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	2380      	movs	r3, #128	@ 0x80
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4013      	ands	r3, r2
 80011e4:	d0f0      	beq.n	80011c8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4a10      	ldr	r2, [pc, #64]	@ (800122c <HAL_RCC_OscConfig+0x370>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	0019      	movs	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 80011f6:	430a      	orrs	r2, r1
 80011f8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011fa:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	0a19      	lsrs	r1, r3, #8
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	061a      	lsls	r2, r3, #24
 8001208:	4b01      	ldr	r3, [pc, #4]	@ (8001210 <HAL_RCC_OscConfig+0x354>)
 800120a:	430a      	orrs	r2, r1
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	e029      	b.n	8001264 <HAL_RCC_OscConfig+0x3a8>
 8001210:	40021000 	.word	0x40021000
 8001214:	fffeffff 	.word	0xfffeffff
 8001218:	fffbffff 	.word	0xfffbffff
 800121c:	ffffe0ff 	.word	0xffffe0ff
 8001220:	08002494 	.word	0x08002494
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004
 800122c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001230:	4bbd      	ldr	r3, [pc, #756]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4bbc      	ldr	r3, [pc, #752]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001236:	49bd      	ldr	r1, [pc, #756]	@ (800152c <HAL_RCC_OscConfig+0x670>)
 8001238:	400a      	ands	r2, r1
 800123a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123c:	f7ff fbae 	bl	800099c <HAL_GetTick>
 8001240:	0003      	movs	r3, r0
 8001242:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001246:	f7ff fba9 	bl	800099c <HAL_GetTick>
 800124a:	0002      	movs	r2, r0
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e1ea      	b.n	800162e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001258:	4bb3      	ldr	r3, [pc, #716]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4013      	ands	r3, r2
 8001262:	d1f0      	bne.n	8001246 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2208      	movs	r2, #8
 800126a:	4013      	ands	r3, r2
 800126c:	d036      	beq.n	80012dc <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d019      	beq.n	80012aa <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001276:	4bac      	ldr	r3, [pc, #688]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001278:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800127a:	4bab      	ldr	r3, [pc, #684]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 800127c:	2101      	movs	r1, #1
 800127e:	430a      	orrs	r2, r1
 8001280:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001282:	f7ff fb8b 	bl	800099c <HAL_GetTick>
 8001286:	0003      	movs	r3, r0
 8001288:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128c:	f7ff fb86 	bl	800099c <HAL_GetTick>
 8001290:	0002      	movs	r2, r0
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e1c7      	b.n	800162e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800129e:	4ba2      	ldr	r3, [pc, #648]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80012a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012a2:	2202      	movs	r2, #2
 80012a4:	4013      	ands	r3, r2
 80012a6:	d0f1      	beq.n	800128c <HAL_RCC_OscConfig+0x3d0>
 80012a8:	e018      	b.n	80012dc <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012aa:	4b9f      	ldr	r3, [pc, #636]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80012ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012ae:	4b9e      	ldr	r3, [pc, #632]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80012b0:	2101      	movs	r1, #1
 80012b2:	438a      	bics	r2, r1
 80012b4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fb71 	bl	800099c <HAL_GetTick>
 80012ba:	0003      	movs	r3, r0
 80012bc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff fb6c 	bl	800099c <HAL_GetTick>
 80012c4:	0002      	movs	r2, r0
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1ad      	b.n	800162e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012d2:	4b95      	ldr	r3, [pc, #596]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80012d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	d1f1      	bne.n	80012c0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2204      	movs	r2, #4
 80012e2:	4013      	ands	r3, r2
 80012e4:	d100      	bne.n	80012e8 <HAL_RCC_OscConfig+0x42c>
 80012e6:	e0ae      	b.n	8001446 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e8:	2027      	movs	r0, #39	@ 0x27
 80012ea:	183b      	adds	r3, r7, r0
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f0:	4b8d      	ldr	r3, [pc, #564]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80012f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	055b      	lsls	r3, r3, #21
 80012f8:	4013      	ands	r3, r2
 80012fa:	d109      	bne.n	8001310 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80012fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001300:	4b89      	ldr	r3, [pc, #548]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001302:	2180      	movs	r1, #128	@ 0x80
 8001304:	0549      	lsls	r1, r1, #21
 8001306:	430a      	orrs	r2, r1
 8001308:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800130a:	183b      	adds	r3, r7, r0
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001310:	4b87      	ldr	r3, [pc, #540]	@ (8001530 <HAL_RCC_OscConfig+0x674>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4013      	ands	r3, r2
 800131a:	d11a      	bne.n	8001352 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131c:	4b84      	ldr	r3, [pc, #528]	@ (8001530 <HAL_RCC_OscConfig+0x674>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b83      	ldr	r3, [pc, #524]	@ (8001530 <HAL_RCC_OscConfig+0x674>)
 8001322:	2180      	movs	r1, #128	@ 0x80
 8001324:	0049      	lsls	r1, r1, #1
 8001326:	430a      	orrs	r2, r1
 8001328:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800132a:	f7ff fb37 	bl	800099c <HAL_GetTick>
 800132e:	0003      	movs	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001334:	f7ff fb32 	bl	800099c <HAL_GetTick>
 8001338:	0002      	movs	r2, r0
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	@ 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e173      	b.n	800162e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001346:	4b7a      	ldr	r3, [pc, #488]	@ (8001530 <HAL_RCC_OscConfig+0x674>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2380      	movs	r3, #128	@ 0x80
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4013      	ands	r3, r2
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	2380      	movs	r3, #128	@ 0x80
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	429a      	cmp	r2, r3
 800135c:	d107      	bne.n	800136e <HAL_RCC_OscConfig+0x4b2>
 800135e:	4b72      	ldr	r3, [pc, #456]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001360:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001362:	4b71      	ldr	r3, [pc, #452]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001364:	2180      	movs	r1, #128	@ 0x80
 8001366:	0049      	lsls	r1, r1, #1
 8001368:	430a      	orrs	r2, r1
 800136a:	651a      	str	r2, [r3, #80]	@ 0x50
 800136c:	e031      	b.n	80013d2 <HAL_RCC_OscConfig+0x516>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x4d4>
 8001376:	4b6c      	ldr	r3, [pc, #432]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001378:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800137a:	4b6b      	ldr	r3, [pc, #428]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 800137c:	496b      	ldr	r1, [pc, #428]	@ (800152c <HAL_RCC_OscConfig+0x670>)
 800137e:	400a      	ands	r2, r1
 8001380:	651a      	str	r2, [r3, #80]	@ 0x50
 8001382:	4b69      	ldr	r3, [pc, #420]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001384:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001386:	4b68      	ldr	r3, [pc, #416]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001388:	496a      	ldr	r1, [pc, #424]	@ (8001534 <HAL_RCC_OscConfig+0x678>)
 800138a:	400a      	ands	r2, r1
 800138c:	651a      	str	r2, [r3, #80]	@ 0x50
 800138e:	e020      	b.n	80013d2 <HAL_RCC_OscConfig+0x516>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	23a0      	movs	r3, #160	@ 0xa0
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	429a      	cmp	r2, r3
 800139a:	d10e      	bne.n	80013ba <HAL_RCC_OscConfig+0x4fe>
 800139c:	4b62      	ldr	r3, [pc, #392]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 800139e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013a0:	4b61      	ldr	r3, [pc, #388]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80013a2:	2180      	movs	r1, #128	@ 0x80
 80013a4:	00c9      	lsls	r1, r1, #3
 80013a6:	430a      	orrs	r2, r1
 80013a8:	651a      	str	r2, [r3, #80]	@ 0x50
 80013aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80013ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013ae:	4b5e      	ldr	r3, [pc, #376]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80013b0:	2180      	movs	r1, #128	@ 0x80
 80013b2:	0049      	lsls	r1, r1, #1
 80013b4:	430a      	orrs	r2, r1
 80013b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80013b8:	e00b      	b.n	80013d2 <HAL_RCC_OscConfig+0x516>
 80013ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80013bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013be:	4b5a      	ldr	r3, [pc, #360]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80013c0:	495a      	ldr	r1, [pc, #360]	@ (800152c <HAL_RCC_OscConfig+0x670>)
 80013c2:	400a      	ands	r2, r1
 80013c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80013c6:	4b58      	ldr	r3, [pc, #352]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80013c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013ca:	4b57      	ldr	r3, [pc, #348]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80013cc:	4959      	ldr	r1, [pc, #356]	@ (8001534 <HAL_RCC_OscConfig+0x678>)
 80013ce:	400a      	ands	r2, r1
 80013d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d015      	beq.n	8001406 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff fadf 	bl	800099c <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013e2:	e009      	b.n	80013f8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e4:	f7ff fada 	bl	800099c <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	4a52      	ldr	r2, [pc, #328]	@ (8001538 <HAL_RCC_OscConfig+0x67c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e11a      	b.n	800162e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013f8:	4b4b      	ldr	r3, [pc, #300]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80013fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013fc:	2380      	movs	r3, #128	@ 0x80
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4013      	ands	r3, r2
 8001402:	d0ef      	beq.n	80013e4 <HAL_RCC_OscConfig+0x528>
 8001404:	e014      	b.n	8001430 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff fac9 	bl	800099c <HAL_GetTick>
 800140a:	0003      	movs	r3, r0
 800140c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800140e:	e009      	b.n	8001424 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001410:	f7ff fac4 	bl	800099c <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	4a47      	ldr	r2, [pc, #284]	@ (8001538 <HAL_RCC_OscConfig+0x67c>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e104      	b.n	800162e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001424:	4b40      	ldr	r3, [pc, #256]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001426:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4013      	ands	r3, r2
 800142e:	d1ef      	bne.n	8001410 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001430:	2327      	movs	r3, #39	@ 0x27
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d105      	bne.n	8001446 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800143a:	4b3b      	ldr	r3, [pc, #236]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 800143c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800143e:	4b3a      	ldr	r3, [pc, #232]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001440:	493e      	ldr	r1, [pc, #248]	@ (800153c <HAL_RCC_OscConfig+0x680>)
 8001442:	400a      	ands	r2, r1
 8001444:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2220      	movs	r2, #32
 800144c:	4013      	ands	r3, r2
 800144e:	d049      	beq.n	80014e4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d026      	beq.n	80014a6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001458:	4b33      	ldr	r3, [pc, #204]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	4b32      	ldr	r3, [pc, #200]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 800145e:	2101      	movs	r1, #1
 8001460:	430a      	orrs	r2, r1
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	4b30      	ldr	r3, [pc, #192]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001466:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001468:	4b2f      	ldr	r3, [pc, #188]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 800146a:	2101      	movs	r1, #1
 800146c:	430a      	orrs	r2, r1
 800146e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001470:	4b33      	ldr	r3, [pc, #204]	@ (8001540 <HAL_RCC_OscConfig+0x684>)
 8001472:	6a1a      	ldr	r2, [r3, #32]
 8001474:	4b32      	ldr	r3, [pc, #200]	@ (8001540 <HAL_RCC_OscConfig+0x684>)
 8001476:	2180      	movs	r1, #128	@ 0x80
 8001478:	0189      	lsls	r1, r1, #6
 800147a:	430a      	orrs	r2, r1
 800147c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fa8d 	bl	800099c <HAL_GetTick>
 8001482:	0003      	movs	r3, r0
 8001484:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001488:	f7ff fa88 	bl	800099c <HAL_GetTick>
 800148c:	0002      	movs	r2, r0
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e0c9      	b.n	800162e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800149a:	4b23      	ldr	r3, [pc, #140]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2202      	movs	r2, #2
 80014a0:	4013      	ands	r3, r2
 80014a2:	d0f1      	beq.n	8001488 <HAL_RCC_OscConfig+0x5cc>
 80014a4:	e01e      	b.n	80014e4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80014a6:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80014ac:	2101      	movs	r1, #1
 80014ae:	438a      	bics	r2, r1
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <HAL_RCC_OscConfig+0x684>)
 80014b4:	6a1a      	ldr	r2, [r3, #32]
 80014b6:	4b22      	ldr	r3, [pc, #136]	@ (8001540 <HAL_RCC_OscConfig+0x684>)
 80014b8:	4922      	ldr	r1, [pc, #136]	@ (8001544 <HAL_RCC_OscConfig+0x688>)
 80014ba:	400a      	ands	r2, r1
 80014bc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff fa6d 	bl	800099c <HAL_GetTick>
 80014c2:	0003      	movs	r3, r0
 80014c4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014c8:	f7ff fa68 	bl	800099c <HAL_GetTick>
 80014cc:	0002      	movs	r2, r0
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e0a9      	b.n	800162e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014da:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2202      	movs	r2, #2
 80014e0:	4013      	ands	r3, r2
 80014e2:	d1f1      	bne.n	80014c8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d100      	bne.n	80014ee <HAL_RCC_OscConfig+0x632>
 80014ec:	e09e      	b.n	800162c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ee:	6a3b      	ldr	r3, [r7, #32]
 80014f0:	2b0c      	cmp	r3, #12
 80014f2:	d100      	bne.n	80014f6 <HAL_RCC_OscConfig+0x63a>
 80014f4:	e077      	b.n	80015e6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d158      	bne.n	80015b0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_RCC_OscConfig+0x66c>)
 8001504:	4910      	ldr	r1, [pc, #64]	@ (8001548 <HAL_RCC_OscConfig+0x68c>)
 8001506:	400a      	ands	r2, r1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fa47 	bl	800099c <HAL_GetTick>
 800150e:	0003      	movs	r3, r0
 8001510:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001512:	e01b      	b.n	800154c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001514:	f7ff fa42 	bl	800099c <HAL_GetTick>
 8001518:	0002      	movs	r2, r0
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d914      	bls.n	800154c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e083      	b.n	800162e <HAL_RCC_OscConfig+0x772>
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	40021000 	.word	0x40021000
 800152c:	fffffeff 	.word	0xfffffeff
 8001530:	40007000 	.word	0x40007000
 8001534:	fffffbff 	.word	0xfffffbff
 8001538:	00001388 	.word	0x00001388
 800153c:	efffffff 	.word	0xefffffff
 8001540:	40010000 	.word	0x40010000
 8001544:	ffffdfff 	.word	0xffffdfff
 8001548:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800154c:	4b3a      	ldr	r3, [pc, #232]	@ (8001638 <HAL_RCC_OscConfig+0x77c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	049b      	lsls	r3, r3, #18
 8001554:	4013      	ands	r3, r2
 8001556:	d1dd      	bne.n	8001514 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001558:	4b37      	ldr	r3, [pc, #220]	@ (8001638 <HAL_RCC_OscConfig+0x77c>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4a37      	ldr	r2, [pc, #220]	@ (800163c <HAL_RCC_OscConfig+0x780>)
 800155e:	4013      	ands	r3, r2
 8001560:	0019      	movs	r1, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	431a      	orrs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001570:	431a      	orrs	r2, r3
 8001572:	4b31      	ldr	r3, [pc, #196]	@ (8001638 <HAL_RCC_OscConfig+0x77c>)
 8001574:	430a      	orrs	r2, r1
 8001576:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001578:	4b2f      	ldr	r3, [pc, #188]	@ (8001638 <HAL_RCC_OscConfig+0x77c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b2e      	ldr	r3, [pc, #184]	@ (8001638 <HAL_RCC_OscConfig+0x77c>)
 800157e:	2180      	movs	r1, #128	@ 0x80
 8001580:	0449      	lsls	r1, r1, #17
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fa09 	bl	800099c <HAL_GetTick>
 800158a:	0003      	movs	r3, r0
 800158c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001590:	f7ff fa04 	bl	800099c <HAL_GetTick>
 8001594:	0002      	movs	r2, r0
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e045      	b.n	800162e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80015a2:	4b25      	ldr	r3, [pc, #148]	@ (8001638 <HAL_RCC_OscConfig+0x77c>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	049b      	lsls	r3, r3, #18
 80015aa:	4013      	ands	r3, r2
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x6d4>
 80015ae:	e03d      	b.n	800162c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b0:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <HAL_RCC_OscConfig+0x77c>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <HAL_RCC_OscConfig+0x77c>)
 80015b6:	4922      	ldr	r1, [pc, #136]	@ (8001640 <HAL_RCC_OscConfig+0x784>)
 80015b8:	400a      	ands	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff f9ee 	bl	800099c <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff f9e9 	bl	800099c <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e02a      	b.n	800162e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <HAL_RCC_OscConfig+0x77c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	049b      	lsls	r3, r3, #18
 80015e0:	4013      	ands	r3, r2
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x70a>
 80015e4:	e022      	b.n	800162c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e01d      	b.n	800162e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_RCC_OscConfig+0x77c>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f8:	69fa      	ldr	r2, [r7, #28]
 80015fa:	2380      	movs	r3, #128	@ 0x80
 80015fc:	025b      	lsls	r3, r3, #9
 80015fe:	401a      	ands	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001604:	429a      	cmp	r2, r3
 8001606:	d10f      	bne.n	8001628 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001608:	69fa      	ldr	r2, [r7, #28]
 800160a:	23f0      	movs	r3, #240	@ 0xf0
 800160c:	039b      	lsls	r3, r3, #14
 800160e:	401a      	ands	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001614:	429a      	cmp	r2, r3
 8001616:	d107      	bne.n	8001628 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	23c0      	movs	r3, #192	@ 0xc0
 800161c:	041b      	lsls	r3, r3, #16
 800161e:	401a      	ands	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001624:	429a      	cmp	r2, r3
 8001626:	d001      	beq.n	800162c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b00a      	add	sp, #40	@ 0x28
 8001634:	bdb0      	pop	{r4, r5, r7, pc}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	40021000 	.word	0x40021000
 800163c:	ff02ffff 	.word	0xff02ffff
 8001640:	feffffff 	.word	0xfeffffff

08001644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001644:	b5b0      	push	{r4, r5, r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e128      	b.n	80018aa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001658:	4b96      	ldr	r3, [pc, #600]	@ (80018b4 <HAL_RCC_ClockConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2201      	movs	r2, #1
 800165e:	4013      	ands	r3, r2
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d91e      	bls.n	80016a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b93      	ldr	r3, [pc, #588]	@ (80018b4 <HAL_RCC_ClockConfig+0x270>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2201      	movs	r2, #1
 800166c:	4393      	bics	r3, r2
 800166e:	0019      	movs	r1, r3
 8001670:	4b90      	ldr	r3, [pc, #576]	@ (80018b4 <HAL_RCC_ClockConfig+0x270>)
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001678:	f7ff f990 	bl	800099c <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001680:	e009      	b.n	8001696 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001682:	f7ff f98b 	bl	800099c <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	4a8a      	ldr	r2, [pc, #552]	@ (80018b8 <HAL_RCC_ClockConfig+0x274>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e109      	b.n	80018aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b87      	ldr	r3, [pc, #540]	@ (80018b4 <HAL_RCC_ClockConfig+0x270>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2201      	movs	r2, #1
 800169c:	4013      	ands	r3, r2
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d1ee      	bne.n	8001682 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2202      	movs	r2, #2
 80016aa:	4013      	ands	r3, r2
 80016ac:	d009      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ae:	4b83      	ldr	r3, [pc, #524]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	22f0      	movs	r2, #240	@ 0xf0
 80016b4:	4393      	bics	r3, r2
 80016b6:	0019      	movs	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	4b7f      	ldr	r3, [pc, #508]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 80016be:	430a      	orrs	r2, r1
 80016c0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	d100      	bne.n	80016ce <HAL_RCC_ClockConfig+0x8a>
 80016cc:	e089      	b.n	80017e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016d6:	4b79      	ldr	r3, [pc, #484]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	@ 0x80
 80016dc:	029b      	lsls	r3, r3, #10
 80016de:	4013      	ands	r3, r2
 80016e0:	d120      	bne.n	8001724 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0e1      	b.n	80018aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016ee:	4b73      	ldr	r3, [pc, #460]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	049b      	lsls	r3, r3, #18
 80016f6:	4013      	ands	r3, r2
 80016f8:	d114      	bne.n	8001724 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0d5      	b.n	80018aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d106      	bne.n	8001714 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001706:	4b6d      	ldr	r3, [pc, #436]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2204      	movs	r2, #4
 800170c:	4013      	ands	r3, r2
 800170e:	d109      	bne.n	8001724 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0ca      	b.n	80018aa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001714:	4b69      	ldr	r3, [pc, #420]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2380      	movs	r3, #128	@ 0x80
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4013      	ands	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0c2      	b.n	80018aa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001724:	4b65      	ldr	r3, [pc, #404]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2203      	movs	r2, #3
 800172a:	4393      	bics	r3, r2
 800172c:	0019      	movs	r1, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4b62      	ldr	r3, [pc, #392]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 8001734:	430a      	orrs	r2, r1
 8001736:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001738:	f7ff f930 	bl	800099c <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d111      	bne.n	800176c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001748:	e009      	b.n	800175e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174a:	f7ff f927 	bl	800099c <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	4a58      	ldr	r2, [pc, #352]	@ (80018b8 <HAL_RCC_ClockConfig+0x274>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e0a5      	b.n	80018aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800175e:	4b57      	ldr	r3, [pc, #348]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	220c      	movs	r2, #12
 8001764:	4013      	ands	r3, r2
 8001766:	2b08      	cmp	r3, #8
 8001768:	d1ef      	bne.n	800174a <HAL_RCC_ClockConfig+0x106>
 800176a:	e03a      	b.n	80017e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b03      	cmp	r3, #3
 8001772:	d111      	bne.n	8001798 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001774:	e009      	b.n	800178a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001776:	f7ff f911 	bl	800099c <HAL_GetTick>
 800177a:	0002      	movs	r2, r0
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	4a4d      	ldr	r2, [pc, #308]	@ (80018b8 <HAL_RCC_ClockConfig+0x274>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e08f      	b.n	80018aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178a:	4b4c      	ldr	r3, [pc, #304]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	220c      	movs	r2, #12
 8001790:	4013      	ands	r3, r2
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d1ef      	bne.n	8001776 <HAL_RCC_ClockConfig+0x132>
 8001796:	e024      	b.n	80017e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d11b      	bne.n	80017d8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017a0:	e009      	b.n	80017b6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a2:	f7ff f8fb 	bl	800099c <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	4a42      	ldr	r2, [pc, #264]	@ (80018b8 <HAL_RCC_ClockConfig+0x274>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e079      	b.n	80018aa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017b6:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	220c      	movs	r2, #12
 80017bc:	4013      	ands	r3, r2
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d1ef      	bne.n	80017a2 <HAL_RCC_ClockConfig+0x15e>
 80017c2:	e00e      	b.n	80017e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c4:	f7ff f8ea 	bl	800099c <HAL_GetTick>
 80017c8:	0002      	movs	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	4a3a      	ldr	r2, [pc, #232]	@ (80018b8 <HAL_RCC_ClockConfig+0x274>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e068      	b.n	80018aa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017d8:	4b38      	ldr	r3, [pc, #224]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	220c      	movs	r2, #12
 80017de:	4013      	ands	r3, r2
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e2:	4b34      	ldr	r3, [pc, #208]	@ (80018b4 <HAL_RCC_ClockConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2201      	movs	r2, #1
 80017e8:	4013      	ands	r3, r2
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d21e      	bcs.n	800182e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f0:	4b30      	ldr	r3, [pc, #192]	@ (80018b4 <HAL_RCC_ClockConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2201      	movs	r2, #1
 80017f6:	4393      	bics	r3, r2
 80017f8:	0019      	movs	r1, r3
 80017fa:	4b2e      	ldr	r3, [pc, #184]	@ (80018b4 <HAL_RCC_ClockConfig+0x270>)
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001802:	f7ff f8cb 	bl	800099c <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	e009      	b.n	8001820 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7ff f8c6 	bl	800099c <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	4a28      	ldr	r2, [pc, #160]	@ (80018b8 <HAL_RCC_ClockConfig+0x274>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e044      	b.n	80018aa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001820:	4b24      	ldr	r3, [pc, #144]	@ (80018b4 <HAL_RCC_ClockConfig+0x270>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	4013      	ands	r3, r2
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d1ee      	bne.n	800180c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2204      	movs	r2, #4
 8001834:	4013      	ands	r3, r2
 8001836:	d009      	beq.n	800184c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001838:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	4a20      	ldr	r2, [pc, #128]	@ (80018c0 <HAL_RCC_ClockConfig+0x27c>)
 800183e:	4013      	ands	r3, r2
 8001840:	0019      	movs	r1, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 8001848:	430a      	orrs	r2, r1
 800184a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2208      	movs	r2, #8
 8001852:	4013      	ands	r3, r2
 8001854:	d00a      	beq.n	800186c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001856:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	4a1a      	ldr	r2, [pc, #104]	@ (80018c4 <HAL_RCC_ClockConfig+0x280>)
 800185c:	4013      	ands	r3, r2
 800185e:	0019      	movs	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	00da      	lsls	r2, r3, #3
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 8001868:	430a      	orrs	r2, r1
 800186a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800186c:	f000 f832 	bl	80018d4 <HAL_RCC_GetSysClockFreq>
 8001870:	0001      	movs	r1, r0
 8001872:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_RCC_ClockConfig+0x278>)
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	220f      	movs	r2, #15
 800187a:	4013      	ands	r3, r2
 800187c:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <HAL_RCC_ClockConfig+0x284>)
 800187e:	5cd3      	ldrb	r3, [r2, r3]
 8001880:	000a      	movs	r2, r1
 8001882:	40da      	lsrs	r2, r3
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <HAL_RCC_ClockConfig+0x288>)
 8001886:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001888:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <HAL_RCC_ClockConfig+0x28c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	250b      	movs	r5, #11
 800188e:	197c      	adds	r4, r7, r5
 8001890:	0018      	movs	r0, r3
 8001892:	f7ff f83d 	bl	8000910 <HAL_InitTick>
 8001896:	0003      	movs	r3, r0
 8001898:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800189a:	197b      	adds	r3, r7, r5
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80018a2:	197b      	adds	r3, r7, r5
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	e000      	b.n	80018aa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b004      	add	sp, #16
 80018b0:	bdb0      	pop	{r4, r5, r7, pc}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	40022000 	.word	0x40022000
 80018b8:	00001388 	.word	0x00001388
 80018bc:	40021000 	.word	0x40021000
 80018c0:	fffff8ff 	.word	0xfffff8ff
 80018c4:	ffffc7ff 	.word	0xffffc7ff
 80018c8:	08002494 	.word	0x08002494
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000004 	.word	0x20000004

080018d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80018da:	4b3c      	ldr	r3, [pc, #240]	@ (80019cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	220c      	movs	r2, #12
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d013      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x3e>
 80018ea:	d85c      	bhi.n	80019a6 <HAL_RCC_GetSysClockFreq+0xd2>
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d002      	beq.n	80018f6 <HAL_RCC_GetSysClockFreq+0x22>
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d00b      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x38>
 80018f4:	e057      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018f6:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2210      	movs	r2, #16
 80018fc:	4013      	ands	r3, r2
 80018fe:	d002      	beq.n	8001906 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001900:	4b33      	ldr	r3, [pc, #204]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001902:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001904:	e05d      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001906:	4b33      	ldr	r3, [pc, #204]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001908:	613b      	str	r3, [r7, #16]
      break;
 800190a:	e05a      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800190c:	4b32      	ldr	r3, [pc, #200]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x104>)
 800190e:	613b      	str	r3, [r7, #16]
      break;
 8001910:	e057      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	0c9b      	lsrs	r3, r3, #18
 8001916:	220f      	movs	r2, #15
 8001918:	4013      	ands	r3, r2
 800191a:	4a30      	ldr	r2, [pc, #192]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x108>)
 800191c:	5cd3      	ldrb	r3, [r2, r3]
 800191e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	0d9b      	lsrs	r3, r3, #22
 8001924:	2203      	movs	r2, #3
 8001926:	4013      	ands	r3, r2
 8001928:	3301      	adds	r3, #1
 800192a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800192c:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	025b      	lsls	r3, r3, #9
 8001934:	4013      	ands	r3, r2
 8001936:	d00f      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	000a      	movs	r2, r1
 800193c:	0152      	lsls	r2, r2, #5
 800193e:	1a52      	subs	r2, r2, r1
 8001940:	0193      	lsls	r3, r2, #6
 8001942:	1a9b      	subs	r3, r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	185b      	adds	r3, r3, r1
 8001948:	025b      	lsls	r3, r3, #9
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	0018      	movs	r0, r3
 800194e:	f7fe fbdb 	bl	8000108 <__udivsi3>
 8001952:	0003      	movs	r3, r0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e023      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001958:	4b1c      	ldr	r3, [pc, #112]	@ (80019cc <HAL_RCC_GetSysClockFreq+0xf8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2210      	movs	r2, #16
 800195e:	4013      	ands	r3, r2
 8001960:	d00f      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001962:	68b9      	ldr	r1, [r7, #8]
 8001964:	000a      	movs	r2, r1
 8001966:	0152      	lsls	r2, r2, #5
 8001968:	1a52      	subs	r2, r2, r1
 800196a:	0193      	lsls	r3, r2, #6
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	185b      	adds	r3, r3, r1
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	0018      	movs	r0, r3
 8001978:	f7fe fbc6 	bl	8000108 <__udivsi3>
 800197c:	0003      	movs	r3, r0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e00e      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001982:	68b9      	ldr	r1, [r7, #8]
 8001984:	000a      	movs	r2, r1
 8001986:	0152      	lsls	r2, r2, #5
 8001988:	1a52      	subs	r2, r2, r1
 800198a:	0193      	lsls	r3, r2, #6
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	185b      	adds	r3, r3, r1
 8001992:	029b      	lsls	r3, r3, #10
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	0018      	movs	r0, r3
 8001998:	f7fe fbb6 	bl	8000108 <__udivsi3>
 800199c:	0003      	movs	r3, r0
 800199e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	613b      	str	r3, [r7, #16]
      break;
 80019a4:	e00d      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	0b5b      	lsrs	r3, r3, #13
 80019ac:	2207      	movs	r2, #7
 80019ae:	4013      	ands	r3, r2
 80019b0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	3301      	adds	r3, #1
 80019b6:	2280      	movs	r2, #128	@ 0x80
 80019b8:	0212      	lsls	r2, r2, #8
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
      break;
 80019c0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019c2:	693b      	ldr	r3, [r7, #16]
}
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b006      	add	sp, #24
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	003d0900 	.word	0x003d0900
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	007a1200 	.word	0x007a1200
 80019dc:	080024a4 	.word	0x080024a4

080019e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e032      	b.n	8001a58 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2239      	movs	r2, #57	@ 0x39
 80019f6:	5c9b      	ldrb	r3, [r3, r2]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d107      	bne.n	8001a0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2238      	movs	r2, #56	@ 0x38
 8001a02:	2100      	movs	r1, #0
 8001a04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7fe fec3 	bl	8000794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2239      	movs	r2, #57	@ 0x39
 8001a12:	2102      	movs	r1, #2
 8001a14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	0019      	movs	r1, r3
 8001a20:	0010      	movs	r0, r2
 8001a22:	f000 fa8b 	bl	8001f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	223e      	movs	r2, #62	@ 0x3e
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	223a      	movs	r2, #58	@ 0x3a
 8001a32:	2101      	movs	r1, #1
 8001a34:	5499      	strb	r1, [r3, r2]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	223b      	movs	r2, #59	@ 0x3b
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	5499      	strb	r1, [r3, r2]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	223c      	movs	r2, #60	@ 0x3c
 8001a42:	2101      	movs	r1, #1
 8001a44:	5499      	strb	r1, [r3, r2]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	223d      	movs	r2, #61	@ 0x3d
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2239      	movs	r2, #57	@ 0x39
 8001a52:	2101      	movs	r1, #1
 8001a54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	0018      	movs	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e032      	b.n	8001ad8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2239      	movs	r2, #57	@ 0x39
 8001a76:	5c9b      	ldrb	r3, [r3, r2]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d107      	bne.n	8001a8e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2238      	movs	r2, #56	@ 0x38
 8001a82:	2100      	movs	r1, #0
 8001a84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f000 f829 	bl	8001ae0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2239      	movs	r2, #57	@ 0x39
 8001a92:	2102      	movs	r1, #2
 8001a94:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	0010      	movs	r0, r2
 8001aa2:	f000 fa4b 	bl	8001f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	223e      	movs	r2, #62	@ 0x3e
 8001aaa:	2101      	movs	r1, #1
 8001aac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	223a      	movs	r2, #58	@ 0x3a
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	5499      	strb	r1, [r3, r2]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	223b      	movs	r2, #59	@ 0x3b
 8001aba:	2101      	movs	r1, #1
 8001abc:	5499      	strb	r1, [r3, r2]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	223c      	movs	r2, #60	@ 0x3c
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	5499      	strb	r1, [r3, r2]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	223d      	movs	r2, #61	@ 0x3d
 8001aca:	2101      	movs	r1, #1
 8001acc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2239      	movs	r2, #57	@ 0x39
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b002      	add	sp, #8
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ae8:	46c0      	nop			@ (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b002      	add	sp, #8
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d108      	bne.n	8001b12 <HAL_TIM_PWM_Start+0x22>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	223a      	movs	r2, #58	@ 0x3a
 8001b04:	5c9b      	ldrb	r3, [r3, r2]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	1e5a      	subs	r2, r3, #1
 8001b0c:	4193      	sbcs	r3, r2
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	e01f      	b.n	8001b52 <HAL_TIM_PWM_Start+0x62>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d108      	bne.n	8001b2a <HAL_TIM_PWM_Start+0x3a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	223b      	movs	r2, #59	@ 0x3b
 8001b1c:	5c9b      	ldrb	r3, [r3, r2]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	1e5a      	subs	r2, r3, #1
 8001b24:	4193      	sbcs	r3, r2
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	e013      	b.n	8001b52 <HAL_TIM_PWM_Start+0x62>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d108      	bne.n	8001b42 <HAL_TIM_PWM_Start+0x52>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	223c      	movs	r2, #60	@ 0x3c
 8001b34:	5c9b      	ldrb	r3, [r3, r2]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	1e5a      	subs	r2, r3, #1
 8001b3c:	4193      	sbcs	r3, r2
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	e007      	b.n	8001b52 <HAL_TIM_PWM_Start+0x62>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	223d      	movs	r2, #61	@ 0x3d
 8001b46:	5c9b      	ldrb	r3, [r3, r2]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	1e5a      	subs	r2, r3, #1
 8001b4e:	4193      	sbcs	r3, r2
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e04d      	b.n	8001bf6 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d104      	bne.n	8001b6a <HAL_TIM_PWM_Start+0x7a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	223a      	movs	r2, #58	@ 0x3a
 8001b64:	2102      	movs	r1, #2
 8001b66:	5499      	strb	r1, [r3, r2]
 8001b68:	e013      	b.n	8001b92 <HAL_TIM_PWM_Start+0xa2>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d104      	bne.n	8001b7a <HAL_TIM_PWM_Start+0x8a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	223b      	movs	r2, #59	@ 0x3b
 8001b74:	2102      	movs	r1, #2
 8001b76:	5499      	strb	r1, [r3, r2]
 8001b78:	e00b      	b.n	8001b92 <HAL_TIM_PWM_Start+0xa2>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d104      	bne.n	8001b8a <HAL_TIM_PWM_Start+0x9a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	223c      	movs	r2, #60	@ 0x3c
 8001b84:	2102      	movs	r1, #2
 8001b86:	5499      	strb	r1, [r3, r2]
 8001b88:	e003      	b.n	8001b92 <HAL_TIM_PWM_Start+0xa2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	223d      	movs	r2, #61	@ 0x3d
 8001b8e:	2102      	movs	r1, #2
 8001b90:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6839      	ldr	r1, [r7, #0]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	f000 fbc6 	bl	800232c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	05db      	lsls	r3, r3, #23
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d009      	beq.n	8001bc0 <HAL_TIM_PWM_Start+0xd0>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a13      	ldr	r2, [pc, #76]	@ (8001c00 <HAL_TIM_PWM_Start+0x110>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d004      	beq.n	8001bc0 <HAL_TIM_PWM_Start+0xd0>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a12      	ldr	r2, [pc, #72]	@ (8001c04 <HAL_TIM_PWM_Start+0x114>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d111      	bne.n	8001be4 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d010      	beq.n	8001bf4 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2101      	movs	r1, #1
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be2:	e007      	b.n	8001bf4 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2101      	movs	r1, #1
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b004      	add	sp, #16
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	40010800 	.word	0x40010800
 8001c04:	40011400 	.word	0x40011400

08001c08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c14:	2317      	movs	r3, #23
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2238      	movs	r2, #56	@ 0x38
 8001c20:	5c9b      	ldrb	r3, [r3, r2]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_TIM_PWM_ConfigChannel+0x22>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e0ad      	b.n	8001d86 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2238      	movs	r2, #56	@ 0x38
 8001c2e:	2101      	movs	r1, #1
 8001c30:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0c      	cmp	r3, #12
 8001c36:	d100      	bne.n	8001c3a <HAL_TIM_PWM_ConfigChannel+0x32>
 8001c38:	e076      	b.n	8001d28 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	d900      	bls.n	8001c42 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001c40:	e095      	b.n	8001d6e <HAL_TIM_PWM_ConfigChannel+0x166>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d04e      	beq.n	8001ce6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d900      	bls.n	8001c50 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001c4e:	e08e      	b.n	8001d6e <HAL_TIM_PWM_ConfigChannel+0x166>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_TIM_PWM_ConfigChannel+0x56>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d021      	beq.n	8001ca0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001c5c:	e087      	b.n	8001d6e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	0011      	movs	r1, r2
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 f9c2 	bl	8001ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699a      	ldr	r2, [r3, #24]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2108      	movs	r1, #8
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2104      	movs	r1, #4
 8001c88:	438a      	bics	r2, r1
 8001c8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6999      	ldr	r1, [r3, #24]
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	619a      	str	r2, [r3, #24]
      break;
 8001c9e:	e06b      	b.n	8001d78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 f9dd 	bl	8002068 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699a      	ldr	r2, [r3, #24]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2180      	movs	r1, #128	@ 0x80
 8001cba:	0109      	lsls	r1, r1, #4
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4931      	ldr	r1, [pc, #196]	@ (8001d90 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6999      	ldr	r1, [r3, #24]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	021a      	lsls	r2, r3, #8
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	619a      	str	r2, [r3, #24]
      break;
 8001ce4:	e048      	b.n	8001d78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	0011      	movs	r1, r2
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f000 f9fc 	bl	80020ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2108      	movs	r1, #8
 8001d00:	430a      	orrs	r2, r1
 8001d02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2104      	movs	r1, #4
 8001d10:	438a      	bics	r2, r1
 8001d12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69d9      	ldr	r1, [r3, #28]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	61da      	str	r2, [r3, #28]
      break;
 8001d26:	e027      	b.n	8001d78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	0011      	movs	r1, r2
 8001d30:	0018      	movs	r0, r3
 8001d32:	f000 fa1b 	bl	800216c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69da      	ldr	r2, [r3, #28]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2180      	movs	r1, #128	@ 0x80
 8001d42:	0109      	lsls	r1, r1, #4
 8001d44:	430a      	orrs	r2, r1
 8001d46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	490f      	ldr	r1, [pc, #60]	@ (8001d90 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001d54:	400a      	ands	r2, r1
 8001d56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69d9      	ldr	r1, [r3, #28]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	021a      	lsls	r2, r3, #8
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	61da      	str	r2, [r3, #28]
      break;
 8001d6c:	e004      	b.n	8001d78 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001d6e:	2317      	movs	r3, #23
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
      break;
 8001d76:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2238      	movs	r2, #56	@ 0x38
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	5499      	strb	r1, [r3, r2]

  return status;
 8001d80:	2317      	movs	r3, #23
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b006      	add	sp, #24
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	fffffbff 	.word	0xfffffbff

08001d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d9e:	230f      	movs	r3, #15
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2238      	movs	r2, #56	@ 0x38
 8001daa:	5c9b      	ldrb	r3, [r3, r2]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_TIM_ConfigClockSource+0x20>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e0bc      	b.n	8001f2e <HAL_TIM_ConfigClockSource+0x19a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2238      	movs	r2, #56	@ 0x38
 8001db8:	2101      	movs	r1, #1
 8001dba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2239      	movs	r2, #57	@ 0x39
 8001dc0:	2102      	movs	r1, #2
 8001dc2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2277      	movs	r2, #119	@ 0x77
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4a58      	ldr	r2, [pc, #352]	@ (8001f38 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2280      	movs	r2, #128	@ 0x80
 8001dea:	0192      	lsls	r2, r2, #6
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d040      	beq.n	8001e72 <HAL_TIM_ConfigClockSource+0xde>
 8001df0:	2280      	movs	r2, #128	@ 0x80
 8001df2:	0192      	lsls	r2, r2, #6
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d900      	bls.n	8001dfa <HAL_TIM_ConfigClockSource+0x66>
 8001df8:	e088      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001dfa:	2280      	movs	r2, #128	@ 0x80
 8001dfc:	0152      	lsls	r2, r2, #5
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d100      	bne.n	8001e04 <HAL_TIM_ConfigClockSource+0x70>
 8001e02:	e088      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0x182>
 8001e04:	2280      	movs	r2, #128	@ 0x80
 8001e06:	0152      	lsls	r2, r2, #5
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d900      	bls.n	8001e0e <HAL_TIM_ConfigClockSource+0x7a>
 8001e0c:	e07e      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e0e:	2b70      	cmp	r3, #112	@ 0x70
 8001e10:	d018      	beq.n	8001e44 <HAL_TIM_ConfigClockSource+0xb0>
 8001e12:	d900      	bls.n	8001e16 <HAL_TIM_ConfigClockSource+0x82>
 8001e14:	e07a      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e16:	2b60      	cmp	r3, #96	@ 0x60
 8001e18:	d04f      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0x126>
 8001e1a:	d900      	bls.n	8001e1e <HAL_TIM_ConfigClockSource+0x8a>
 8001e1c:	e076      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e1e:	2b50      	cmp	r3, #80	@ 0x50
 8001e20:	d03b      	beq.n	8001e9a <HAL_TIM_ConfigClockSource+0x106>
 8001e22:	d900      	bls.n	8001e26 <HAL_TIM_ConfigClockSource+0x92>
 8001e24:	e072      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e26:	2b40      	cmp	r3, #64	@ 0x40
 8001e28:	d057      	beq.n	8001eda <HAL_TIM_ConfigClockSource+0x146>
 8001e2a:	d900      	bls.n	8001e2e <HAL_TIM_ConfigClockSource+0x9a>
 8001e2c:	e06e      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e2e:	2b30      	cmp	r3, #48	@ 0x30
 8001e30:	d063      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x166>
 8001e32:	d86b      	bhi.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d060      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x166>
 8001e38:	d868      	bhi.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d05d      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x166>
 8001e3e:	2b10      	cmp	r3, #16
 8001e40:	d05b      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0x166>
 8001e42:	e063      	b.n	8001f0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e54:	f000 fa4a 	bl	80022ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2277      	movs	r2, #119	@ 0x77
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	609a      	str	r2, [r3, #8]
      break;
 8001e70:	e052      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e82:	f000 fa33 	bl	80022ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2180      	movs	r1, #128	@ 0x80
 8001e92:	01c9      	lsls	r1, r1, #7
 8001e94:	430a      	orrs	r2, r1
 8001e96:	609a      	str	r2, [r3, #8]
      break;
 8001e98:	e03e      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ea6:	001a      	movs	r2, r3
 8001ea8:	f000 f9a6 	bl	80021f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2150      	movs	r1, #80	@ 0x50
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f000 fa00 	bl	80022b8 <TIM_ITRx_SetConfig>
      break;
 8001eb8:	e02e      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ec6:	001a      	movs	r2, r3
 8001ec8:	f000 f9c4 	bl	8002254 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2160      	movs	r1, #96	@ 0x60
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f000 f9f0 	bl	80022b8 <TIM_ITRx_SetConfig>
      break;
 8001ed8:	e01e      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ee6:	001a      	movs	r2, r3
 8001ee8:	f000 f986 	bl	80021f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2140      	movs	r1, #64	@ 0x40
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f000 f9e0 	bl	80022b8 <TIM_ITRx_SetConfig>
      break;
 8001ef8:	e00e      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0019      	movs	r1, r3
 8001f04:	0010      	movs	r0, r2
 8001f06:	f000 f9d7 	bl	80022b8 <TIM_ITRx_SetConfig>
      break;
 8001f0a:	e005      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	2201      	movs	r2, #1
 8001f12:	701a      	strb	r2, [r3, #0]
      break;
 8001f14:	e000      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001f16:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2239      	movs	r2, #57	@ 0x39
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2238      	movs	r2, #56	@ 0x38
 8001f24:	2100      	movs	r1, #0
 8001f26:	5499      	strb	r1, [r3, r2]

  return status;
 8001f28:	230f      	movs	r3, #15
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	781b      	ldrb	r3, [r3, #0]
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b004      	add	sp, #16
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	ffff00ff 	.word	0xffff00ff

08001f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	2380      	movs	r3, #128	@ 0x80
 8001f50:	05db      	lsls	r3, r3, #23
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d007      	beq.n	8001f66 <TIM_Base_SetConfig+0x2a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a22      	ldr	r2, [pc, #136]	@ (8001fe4 <TIM_Base_SetConfig+0xa8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d003      	beq.n	8001f66 <TIM_Base_SetConfig+0x2a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a21      	ldr	r2, [pc, #132]	@ (8001fe8 <TIM_Base_SetConfig+0xac>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d108      	bne.n	8001f78 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2270      	movs	r2, #112	@ 0x70
 8001f6a:	4393      	bics	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	05db      	lsls	r3, r3, #23
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d007      	beq.n	8001f92 <TIM_Base_SetConfig+0x56>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <TIM_Base_SetConfig+0xa8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d003      	beq.n	8001f92 <TIM_Base_SetConfig+0x56>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a16      	ldr	r2, [pc, #88]	@ (8001fe8 <TIM_Base_SetConfig+0xac>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d108      	bne.n	8001fa4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4a15      	ldr	r2, [pc, #84]	@ (8001fec <TIM_Base_SetConfig+0xb0>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2280      	movs	r2, #128	@ 0x80
 8001fa8:	4393      	bics	r3, r2
 8001faa:	001a      	movs	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]
}
 8001fdc:	46c0      	nop			@ (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b004      	add	sp, #16
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40010800 	.word	0x40010800
 8001fe8:	40011400 	.word	0x40011400
 8001fec:	fffffcff 	.word	0xfffffcff

08001ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	2201      	movs	r2, #1
 8002006:	4393      	bics	r3, r2
 8002008:	001a      	movs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2270      	movs	r2, #112	@ 0x70
 800201e:	4393      	bics	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2203      	movs	r2, #3
 8002026:	4393      	bics	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4313      	orrs	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2202      	movs	r2, #2
 8002038:	4393      	bics	r3, r2
 800203a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	4313      	orrs	r3, r2
 8002044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	621a      	str	r2, [r3, #32]
}
 8002060:	46c0      	nop			@ (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b006      	add	sp, #24
 8002066:	bd80      	pop	{r7, pc}

08002068 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	2210      	movs	r2, #16
 800207e:	4393      	bics	r3, r2
 8002080:	001a      	movs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4a13      	ldr	r2, [pc, #76]	@ (80020e4 <TIM_OC2_SetConfig+0x7c>)
 8002096:	4013      	ands	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <TIM_OC2_SetConfig+0x80>)
 800209e:	4013      	ands	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	2220      	movs	r2, #32
 80020b2:	4393      	bics	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	4313      	orrs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	621a      	str	r2, [r3, #32]
}
 80020dc:	46c0      	nop			@ (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b006      	add	sp, #24
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	ffff8fff 	.word	0xffff8fff
 80020e8:	fffffcff 	.word	0xfffffcff

080020ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a18      	ldr	r2, [pc, #96]	@ (8002164 <TIM_OC3_SetConfig+0x78>)
 8002102:	401a      	ands	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2270      	movs	r2, #112	@ 0x70
 8002118:	4393      	bics	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2203      	movs	r2, #3
 8002120:	4393      	bics	r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	4a0d      	ldr	r2, [pc, #52]	@ (8002168 <TIM_OC3_SetConfig+0x7c>)
 8002132:	4013      	ands	r3, r2
 8002134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	621a      	str	r2, [r3, #32]
}
 800215c:	46c0      	nop			@ (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b006      	add	sp, #24
 8002162:	bd80      	pop	{r7, pc}
 8002164:	fffffeff 	.word	0xfffffeff
 8002168:	fffffdff 	.word	0xfffffdff

0800216c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a19      	ldr	r2, [pc, #100]	@ (80021e8 <TIM_OC4_SetConfig+0x7c>)
 8002182:	401a      	ands	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a15      	ldr	r2, [pc, #84]	@ (80021ec <TIM_OC4_SetConfig+0x80>)
 8002198:	4013      	ands	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4a14      	ldr	r2, [pc, #80]	@ (80021f0 <TIM_OC4_SetConfig+0x84>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	4a10      	ldr	r2, [pc, #64]	@ (80021f4 <TIM_OC4_SetConfig+0x88>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	031b      	lsls	r3, r3, #12
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	621a      	str	r2, [r3, #32]
}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b006      	add	sp, #24
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	ffffefff 	.word	0xffffefff
 80021ec:	ffff8fff 	.word	0xffff8fff
 80021f0:	fffffcff 	.word	0xfffffcff
 80021f4:	ffffdfff 	.word	0xffffdfff

080021f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	2201      	movs	r2, #1
 8002210:	4393      	bics	r3, r2
 8002212:	001a      	movs	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	22f0      	movs	r2, #240	@ 0xf0
 8002222:	4393      	bics	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	220a      	movs	r2, #10
 8002234:	4393      	bics	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	621a      	str	r2, [r3, #32]
}
 800224c:	46c0      	nop			@ (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b006      	add	sp, #24
 8002252:	bd80      	pop	{r7, pc}

08002254 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	2210      	movs	r2, #16
 800226c:	4393      	bics	r3, r2
 800226e:	001a      	movs	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4a0d      	ldr	r2, [pc, #52]	@ (80022b4 <TIM_TI2_ConfigInputStage+0x60>)
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	031b      	lsls	r3, r3, #12
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	22a0      	movs	r2, #160	@ 0xa0
 8002290:	4393      	bics	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	621a      	str	r2, [r3, #32]
}
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b006      	add	sp, #24
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	ffff0fff 	.word	0xffff0fff

080022b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2270      	movs	r2, #112	@ 0x70
 80022cc:	4393      	bics	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	2207      	movs	r2, #7
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	609a      	str	r2, [r3, #8]
}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b004      	add	sp, #16
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	4a09      	ldr	r2, [pc, #36]	@ (8002328 <TIM_ETR_SetConfig+0x3c>)
 8002304:	4013      	ands	r3, r2
 8002306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	021a      	lsls	r2, r3, #8
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	431a      	orrs	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	4313      	orrs	r3, r2
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	4313      	orrs	r3, r2
 8002318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	609a      	str	r2, [r3, #8]
}
 8002320:	46c0      	nop			@ (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	b006      	add	sp, #24
 8002326:	bd80      	pop	{r7, pc}
 8002328:	ffff00ff 	.word	0xffff00ff

0800232c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	221f      	movs	r2, #31
 800233c:	4013      	ands	r3, r2
 800233e:	2201      	movs	r2, #1
 8002340:	409a      	lsls	r2, r3
 8002342:	0013      	movs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	43d2      	mvns	r2, r2
 800234e:	401a      	ands	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a1a      	ldr	r2, [r3, #32]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	211f      	movs	r1, #31
 800235c:	400b      	ands	r3, r1
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4099      	lsls	r1, r3
 8002362:	000b      	movs	r3, r1
 8002364:	431a      	orrs	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	621a      	str	r2, [r3, #32]
}
 800236a:	46c0      	nop			@ (mov r8, r8)
 800236c:	46bd      	mov	sp, r7
 800236e:	b006      	add	sp, #24
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2238      	movs	r2, #56	@ 0x38
 8002382:	5c9b      	ldrb	r3, [r3, r2]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002388:	2302      	movs	r3, #2
 800238a:	e042      	b.n	8002412 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2238      	movs	r2, #56	@ 0x38
 8002390:	2101      	movs	r1, #1
 8002392:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2239      	movs	r2, #57	@ 0x39
 8002398:	2102      	movs	r1, #2
 800239a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2270      	movs	r2, #112	@ 0x70
 80023b0:	4393      	bics	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	2380      	movs	r3, #128	@ 0x80
 80023cc:	05db      	lsls	r3, r3, #23
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d009      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a11      	ldr	r2, [pc, #68]	@ (800241c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d004      	beq.n	80023e6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002420 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10c      	bne.n	8002400 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2280      	movs	r2, #128	@ 0x80
 80023ea:	4393      	bics	r3, r2
 80023ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2239      	movs	r2, #57	@ 0x39
 8002404:	2101      	movs	r1, #1
 8002406:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2238      	movs	r2, #56	@ 0x38
 800240c:	2100      	movs	r1, #0
 800240e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b004      	add	sp, #16
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	40010800 	.word	0x40010800
 8002420:	40011400 	.word	0x40011400

08002424 <memset>:
 8002424:	0003      	movs	r3, r0
 8002426:	1882      	adds	r2, r0, r2
 8002428:	4293      	cmp	r3, r2
 800242a:	d100      	bne.n	800242e <memset+0xa>
 800242c:	4770      	bx	lr
 800242e:	7019      	strb	r1, [r3, #0]
 8002430:	3301      	adds	r3, #1
 8002432:	e7f9      	b.n	8002428 <memset+0x4>

08002434 <__libc_init_array>:
 8002434:	b570      	push	{r4, r5, r6, lr}
 8002436:	2600      	movs	r6, #0
 8002438:	4c0c      	ldr	r4, [pc, #48]	@ (800246c <__libc_init_array+0x38>)
 800243a:	4d0d      	ldr	r5, [pc, #52]	@ (8002470 <__libc_init_array+0x3c>)
 800243c:	1b64      	subs	r4, r4, r5
 800243e:	10a4      	asrs	r4, r4, #2
 8002440:	42a6      	cmp	r6, r4
 8002442:	d109      	bne.n	8002458 <__libc_init_array+0x24>
 8002444:	2600      	movs	r6, #0
 8002446:	f000 f819 	bl	800247c <_init>
 800244a:	4c0a      	ldr	r4, [pc, #40]	@ (8002474 <__libc_init_array+0x40>)
 800244c:	4d0a      	ldr	r5, [pc, #40]	@ (8002478 <__libc_init_array+0x44>)
 800244e:	1b64      	subs	r4, r4, r5
 8002450:	10a4      	asrs	r4, r4, #2
 8002452:	42a6      	cmp	r6, r4
 8002454:	d105      	bne.n	8002462 <__libc_init_array+0x2e>
 8002456:	bd70      	pop	{r4, r5, r6, pc}
 8002458:	00b3      	lsls	r3, r6, #2
 800245a:	58eb      	ldr	r3, [r5, r3]
 800245c:	4798      	blx	r3
 800245e:	3601      	adds	r6, #1
 8002460:	e7ee      	b.n	8002440 <__libc_init_array+0xc>
 8002462:	00b3      	lsls	r3, r6, #2
 8002464:	58eb      	ldr	r3, [r5, r3]
 8002466:	4798      	blx	r3
 8002468:	3601      	adds	r6, #1
 800246a:	e7f2      	b.n	8002452 <__libc_init_array+0x1e>
 800246c:	080024b0 	.word	0x080024b0
 8002470:	080024b0 	.word	0x080024b0
 8002474:	080024b4 	.word	0x080024b4
 8002478:	080024b0 	.word	0x080024b0

0800247c <_init>:
 800247c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002482:	bc08      	pop	{r3}
 8002484:	469e      	mov	lr, r3
 8002486:	4770      	bx	lr

08002488 <_fini>:
 8002488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800248a:	46c0      	nop			@ (mov r8, r8)
 800248c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248e:	bc08      	pop	{r3}
 8002490:	469e      	mov	lr, r3
 8002492:	4770      	bx	lr

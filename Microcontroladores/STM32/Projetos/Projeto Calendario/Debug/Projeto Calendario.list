
Projeto Calendario.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003260  08003260  00004260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032cc  080032cc  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080032cc  080032cc  000042cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032d4  080032d4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032d4  080032d4  000042d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032d8  080032d8  000042d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080032dc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000005c  08003338  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08003338  0000523c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005156  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015be  00000000  00000000  0000a1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  0000b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000496  00000000  00000000  0000bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013bd5  00000000  00000000  0000c26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008203  00000000  00000000  0001fe43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078b90  00000000  00000000  00028046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0bd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000197c  00000000  00000000  000a0c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  000a2598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003248 	.word	0x08003248

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003248 	.word	0x08003248

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fc9c 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f844 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f920 	bl	800070c <MX_GPIO_Init>
  MX_RTC_Init();
 80004cc:	f000 f8ba 	bl	8000644 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  date.Date    = 31;
 80004d0:	4b1a      	ldr	r3, [pc, #104]	@ (800053c <main+0x80>)
 80004d2:	221f      	movs	r2, #31
 80004d4:	709a      	strb	r2, [r3, #2]
  date.Month   = RTC_MONTH_DECEMBER;
 80004d6:	4b19      	ldr	r3, [pc, #100]	@ (800053c <main+0x80>)
 80004d8:	2212      	movs	r2, #18
 80004da:	705a      	strb	r2, [r3, #1]
  milenium     = 1;
 80004dc:	4b18      	ldr	r3, [pc, #96]	@ (8000540 <main+0x84>)
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
  century      = 9;
 80004e2:	4b18      	ldr	r3, [pc, #96]	@ (8000544 <main+0x88>)
 80004e4:	2209      	movs	r2, #9
 80004e6:	601a      	str	r2, [r3, #0]
  date.Year    = 99;
 80004e8:	4b14      	ldr	r3, [pc, #80]	@ (800053c <main+0x80>)
 80004ea:	2263      	movs	r2, #99	@ 0x63
 80004ec:	70da      	strb	r2, [r3, #3]

  // Hora atual
  time.Hours   = 23;
 80004ee:	4b16      	ldr	r3, [pc, #88]	@ (8000548 <main+0x8c>)
 80004f0:	2217      	movs	r2, #23
 80004f2:	701a      	strb	r2, [r3, #0]
  time.Minutes = 59;
 80004f4:	4b14      	ldr	r3, [pc, #80]	@ (8000548 <main+0x8c>)
 80004f6:	223b      	movs	r2, #59	@ 0x3b
 80004f8:	705a      	strb	r2, [r3, #1]
  time.Seconds = 50;
 80004fa:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <main+0x8c>)
 80004fc:	2232      	movs	r2, #50	@ 0x32
 80004fe:	709a      	strb	r2, [r3, #2]

  if (HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 8000500:	490e      	ldr	r1, [pc, #56]	@ (800053c <main+0x80>)
 8000502:	4b12      	ldr	r3, [pc, #72]	@ (800054c <main+0x90>)
 8000504:	2200      	movs	r2, #0
 8000506:	0018      	movs	r0, r3
 8000508:	f002 f846 	bl	8002598 <HAL_RTC_SetDate>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d001      	beq.n	8000514 <main+0x58>
 8000510:	f000 fbc2 	bl	8000c98 <Error_Handler>
  if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN) != HAL_OK) Error_Handler();
 8000514:	490c      	ldr	r1, [pc, #48]	@ (8000548 <main+0x8c>)
 8000516:	4b0d      	ldr	r3, [pc, #52]	@ (800054c <main+0x90>)
 8000518:	2200      	movs	r2, #0
 800051a:	0018      	movs	r0, r3
 800051c:	f001 ff34 	bl	8002388 <HAL_RTC_SetTime>
 8000520:	1e03      	subs	r3, r0, #0
 8000522:	d001      	beq.n	8000528 <main+0x6c>
 8000524:	f000 fbb8 	bl	8000c98 <Error_Handler>

  Start_lcd();
 8000528:	f000 fac5 	bl	8000ab6 <Start_lcd>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Show_date();
 800052c:	f000 fae6 	bl	8000afc <Show_date>
	  Info_manager(0x80, 0);
 8000530:	2100      	movs	r1, #0
 8000532:	2080      	movs	r0, #128	@ 0x80
 8000534:	f000 f970 	bl	8000818 <Info_manager>
	  Show_date();
 8000538:	46c0      	nop			@ (mov r8, r8)
 800053a:	e7f7      	b.n	800052c <main+0x70>
 800053c:	200000d0 	.word	0x200000d0
 8000540:	200000ac 	.word	0x200000ac
 8000544:	200000a8 	.word	0x200000a8
 8000548:	200000d4 	.word	0x200000d4
 800054c:	20000078 	.word	0x20000078

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b09d      	sub	sp, #116	@ 0x74
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	2438      	movs	r4, #56	@ 0x38
 8000558:	193b      	adds	r3, r7, r4
 800055a:	0018      	movs	r0, r3
 800055c:	2338      	movs	r3, #56	@ 0x38
 800055e:	001a      	movs	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f002 f9f3 	bl	800294c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000566:	2324      	movs	r3, #36	@ 0x24
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	0018      	movs	r0, r3
 800056c:	2314      	movs	r3, #20
 800056e:	001a      	movs	r2, r3
 8000570:	2100      	movs	r1, #0
 8000572:	f002 f9eb 	bl	800294c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000576:	003b      	movs	r3, r7
 8000578:	0018      	movs	r0, r3
 800057a:	2324      	movs	r3, #36	@ 0x24
 800057c:	001a      	movs	r2, r3
 800057e:	2100      	movs	r1, #0
 8000580:	f002 f9e4 	bl	800294c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	4b2c      	ldr	r3, [pc, #176]	@ (8000638 <SystemClock_Config+0xe8>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a2c      	ldr	r2, [pc, #176]	@ (800063c <SystemClock_Config+0xec>)
 800058a:	401a      	ands	r2, r3
 800058c:	4b2a      	ldr	r3, [pc, #168]	@ (8000638 <SystemClock_Config+0xe8>)
 800058e:	2180      	movs	r1, #128	@ 0x80
 8000590:	0109      	lsls	r1, r1, #4
 8000592:	430a      	orrs	r2, r1
 8000594:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000596:	f000 ff0d 	bl	80013b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800059a:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <SystemClock_Config+0xf0>)
 800059c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800059e:	4b28      	ldr	r3, [pc, #160]	@ (8000640 <SystemClock_Config+0xf0>)
 80005a0:	4926      	ldr	r1, [pc, #152]	@ (800063c <SystemClock_Config+0xec>)
 80005a2:	400a      	ands	r2, r1
 80005a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2214      	movs	r2, #20
 80005aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2280      	movs	r2, #128	@ 0x80
 80005b0:	0052      	lsls	r2, r2, #1
 80005b2:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b4:	0021      	movs	r1, r4
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2201      	movs	r2, #1
 80005ba:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	22a0      	movs	r2, #160	@ 0xa0
 80005c6:	0212      	lsls	r2, r2, #8
 80005c8:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2200      	movs	r2, #0
 80005ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fefc 	bl	80013d0 <HAL_RCC_OscConfig>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005dc:	f000 fb5c 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e0:	2124      	movs	r1, #36	@ 0x24
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	220f      	movs	r2, #15
 80005e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2100      	movs	r1, #0
 8000604:	0018      	movs	r0, r3
 8000606:	f001 faa7 	bl	8001b58 <HAL_RCC_ClockConfig>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800060e:	f000 fb43 	bl	8000c98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000612:	003b      	movs	r3, r7
 8000614:	2220      	movs	r2, #32
 8000616:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000618:	003b      	movs	r3, r7
 800061a:	2280      	movs	r2, #128	@ 0x80
 800061c:	0252      	lsls	r2, r2, #9
 800061e:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000620:	003b      	movs	r3, r7
 8000622:	0018      	movs	r0, r3
 8000624:	f001 fc86 	bl	8001f34 <HAL_RCCEx_PeriphCLKConfig>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800062c:	f000 fb34 	bl	8000c98 <Error_Handler>
  }
}
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b01d      	add	sp, #116	@ 0x74
 8000636:	bd90      	pop	{r4, r7, pc}
 8000638:	40007000 	.word	0x40007000
 800063c:	ffffe7ff 	.word	0xffffe7ff
 8000640:	40021000 	.word	0x40021000

08000644 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	0018      	movs	r0, r3
 800064e:	2314      	movs	r3, #20
 8000650:	001a      	movs	r2, r3
 8000652:	2100      	movs	r1, #0
 8000654:	f002 f97a 	bl	800294c <memset>
  RTC_DateTypeDef sDate = {0};
 8000658:	003b      	movs	r3, r7
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800065e:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <MX_RTC_Init+0xc0>)
 8000660:	4a29      	ldr	r2, [pc, #164]	@ (8000708 <MX_RTC_Init+0xc4>)
 8000662:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <MX_RTC_Init+0xc0>)
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800066a:	4b26      	ldr	r3, [pc, #152]	@ (8000704 <MX_RTC_Init+0xc0>)
 800066c:	227f      	movs	r2, #127	@ 0x7f
 800066e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000670:	4b24      	ldr	r3, [pc, #144]	@ (8000704 <MX_RTC_Init+0xc0>)
 8000672:	22ff      	movs	r2, #255	@ 0xff
 8000674:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000676:	4b23      	ldr	r3, [pc, #140]	@ (8000704 <MX_RTC_Init+0xc0>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800067c:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <MX_RTC_Init+0xc0>)
 800067e:	2200      	movs	r2, #0
 8000680:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000682:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <MX_RTC_Init+0xc0>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000688:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <MX_RTC_Init+0xc0>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800068e:	4b1d      	ldr	r3, [pc, #116]	@ (8000704 <MX_RTC_Init+0xc0>)
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fddd 	bl	8002250 <HAL_RTC_Init>
 8000696:	1e03      	subs	r3, r0, #0
 8000698:	d001      	beq.n	800069e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800069a:	f000 fafd 	bl	8000c98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2200      	movs	r2, #0
 80006a8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006bc:	1d39      	adds	r1, r7, #4
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_RTC_Init+0xc0>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fe60 	bl	8002388 <HAL_RTC_SetTime>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80006cc:	f000 fae4 	bl	8000c98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006d0:	003b      	movs	r3, r7
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006d6:	003b      	movs	r3, r7
 80006d8:	2201      	movs	r2, #1
 80006da:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80006dc:	003b      	movs	r3, r7
 80006de:	2201      	movs	r2, #1
 80006e0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006e8:	0039      	movs	r1, r7
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_RTC_Init+0xc0>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 ff52 	bl	8002598 <HAL_RTC_SetDate>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80006f8:	f000 face 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006fc:	46c0      	nop			@ (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b006      	add	sp, #24
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000078 	.word	0x20000078
 8000708:	40002800 	.word	0x40002800

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	b089      	sub	sp, #36	@ 0x24
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	240c      	movs	r4, #12
 8000714:	193b      	adds	r3, r7, r4
 8000716:	0018      	movs	r0, r3
 8000718:	2314      	movs	r3, #20
 800071a:	001a      	movs	r2, r3
 800071c:	2100      	movs	r1, #0
 800071e:	f002 f915 	bl	800294c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b3a      	ldr	r3, [pc, #232]	@ (800080c <MX_GPIO_Init+0x100>)
 8000724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000726:	4b39      	ldr	r3, [pc, #228]	@ (800080c <MX_GPIO_Init+0x100>)
 8000728:	2104      	movs	r1, #4
 800072a:	430a      	orrs	r2, r1
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800072e:	4b37      	ldr	r3, [pc, #220]	@ (800080c <MX_GPIO_Init+0x100>)
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	2204      	movs	r2, #4
 8000734:	4013      	ands	r3, r2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b34      	ldr	r3, [pc, #208]	@ (800080c <MX_GPIO_Init+0x100>)
 800073c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800073e:	4b33      	ldr	r3, [pc, #204]	@ (800080c <MX_GPIO_Init+0x100>)
 8000740:	2101      	movs	r1, #1
 8000742:	430a      	orrs	r2, r1
 8000744:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000746:	4b31      	ldr	r3, [pc, #196]	@ (800080c <MX_GPIO_Init+0x100>)
 8000748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800074a:	2201      	movs	r2, #1
 800074c:	4013      	ands	r3, r2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b2e      	ldr	r3, [pc, #184]	@ (800080c <MX_GPIO_Init+0x100>)
 8000754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000756:	4b2d      	ldr	r3, [pc, #180]	@ (800080c <MX_GPIO_Init+0x100>)
 8000758:	2102      	movs	r1, #2
 800075a:	430a      	orrs	r2, r1
 800075c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800075e:	4b2b      	ldr	r3, [pc, #172]	@ (800080c <MX_GPIO_Init+0x100>)
 8000760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000762:	2202      	movs	r2, #2
 8000764:	4013      	ands	r3, r2
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_Pin|D4_Pin|D5_Pin, GPIO_PIN_RESET);
 800076a:	23a0      	movs	r3, #160	@ 0xa0
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	2200      	movs	r2, #0
 8000770:	21e0      	movs	r1, #224	@ 0xe0
 8000772:	0018      	movs	r0, r3
 8000774:	f000 fe00 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000778:	4b25      	ldr	r3, [pc, #148]	@ (8000810 <MX_GPIO_Init+0x104>)
 800077a:	2200      	movs	r2, #0
 800077c:	2180      	movs	r1, #128	@ 0x80
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fdfa 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|RS_Pin|RW_Pin, GPIO_PIN_RESET);
 8000784:	23d0      	movs	r3, #208	@ 0xd0
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4822      	ldr	r0, [pc, #136]	@ (8000814 <MX_GPIO_Init+0x108>)
 800078a:	2200      	movs	r2, #0
 800078c:	0019      	movs	r1, r3
 800078e:	f000 fdf3 	bl	8001378 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN_Pin D4_Pin D5_Pin */
  GPIO_InitStruct.Pin = EN_Pin|D4_Pin|D5_Pin;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	22e0      	movs	r2, #224	@ 0xe0
 8000796:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2201      	movs	r2, #1
 800079c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	193a      	adds	r2, r7, r4
 80007ac:	23a0      	movs	r3, #160	@ 0xa0
 80007ae:	05db      	lsls	r3, r3, #23
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 fc6a 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : D7_Pin */
  GPIO_InitStruct.Pin = D7_Pin;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2280      	movs	r2, #128	@ 0x80
 80007bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	2201      	movs	r2, #1
 80007c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000810 <MX_GPIO_Init+0x104>)
 80007d4:	0019      	movs	r1, r3
 80007d6:	0010      	movs	r0, r2
 80007d8:	f000 fc58 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin RS_Pin RW_Pin */
  GPIO_InitStruct.Pin = D6_Pin|RS_Pin|RW_Pin;
 80007dc:	0021      	movs	r1, r4
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	22d0      	movs	r2, #208	@ 0xd0
 80007e2:	0092      	lsls	r2, r2, #2
 80007e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2201      	movs	r2, #1
 80007ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	4a06      	ldr	r2, [pc, #24]	@ (8000814 <MX_GPIO_Init+0x108>)
 80007fc:	0019      	movs	r1, r3
 80007fe:	0010      	movs	r0, r2
 8000800:	f000 fc44 	bl	800108c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b009      	add	sp, #36	@ 0x24
 800080a:	bd90      	pop	{r4, r7, pc}
 800080c:	40021000 	.word	0x40021000
 8000810:	50000800 	.word	0x50000800
 8000814:	50000400 	.word	0x50000400

08000818 <Info_manager>:

/* USER CODE BEGIN 4 */
void Info_manager(unsigned data, unsigned rs){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
	PORT.P0 = (data >> 0) & 1;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1c1a      	adds	r2, r3, #0
 8000826:	2301      	movs	r3, #1
 8000828:	4013      	ands	r3, r2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b90      	ldr	r3, [pc, #576]	@ (8000a70 <Info_manager+0x258>)
 800082e:	2101      	movs	r1, #1
 8000830:	400a      	ands	r2, r1
 8000832:	0010      	movs	r0, r2
 8000834:	781a      	ldrb	r2, [r3, #0]
 8000836:	2101      	movs	r1, #1
 8000838:	438a      	bics	r2, r1
 800083a:	1c11      	adds	r1, r2, #0
 800083c:	1c02      	adds	r2, r0, #0
 800083e:	430a      	orrs	r2, r1
 8000840:	701a      	strb	r2, [r3, #0]
	PORT.P1 = (data >> 1) & 1;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	1c1a      	adds	r2, r3, #0
 8000848:	2301      	movs	r3, #1
 800084a:	4013      	ands	r3, r2
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b88      	ldr	r3, [pc, #544]	@ (8000a70 <Info_manager+0x258>)
 8000850:	2101      	movs	r1, #1
 8000852:	400a      	ands	r2, r1
 8000854:	1890      	adds	r0, r2, r2
 8000856:	781a      	ldrb	r2, [r3, #0]
 8000858:	2102      	movs	r1, #2
 800085a:	438a      	bics	r2, r1
 800085c:	1c11      	adds	r1, r2, #0
 800085e:	1c02      	adds	r2, r0, #0
 8000860:	430a      	orrs	r2, r1
 8000862:	701a      	strb	r2, [r3, #0]
	PORT.P2 = (data >> 2) & 1;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	089b      	lsrs	r3, r3, #2
 8000868:	1c1a      	adds	r2, r3, #0
 800086a:	2301      	movs	r3, #1
 800086c:	4013      	ands	r3, r2
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b7f      	ldr	r3, [pc, #508]	@ (8000a70 <Info_manager+0x258>)
 8000872:	2101      	movs	r1, #1
 8000874:	400a      	ands	r2, r1
 8000876:	0090      	lsls	r0, r2, #2
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	2104      	movs	r1, #4
 800087c:	438a      	bics	r2, r1
 800087e:	1c11      	adds	r1, r2, #0
 8000880:	1c02      	adds	r2, r0, #0
 8000882:	430a      	orrs	r2, r1
 8000884:	701a      	strb	r2, [r3, #0]
	PORT.P3 = (data >> 3) & 1;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	08db      	lsrs	r3, r3, #3
 800088a:	1c1a      	adds	r2, r3, #0
 800088c:	2301      	movs	r3, #1
 800088e:	4013      	ands	r3, r2
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b77      	ldr	r3, [pc, #476]	@ (8000a70 <Info_manager+0x258>)
 8000894:	2101      	movs	r1, #1
 8000896:	400a      	ands	r2, r1
 8000898:	00d0      	lsls	r0, r2, #3
 800089a:	781a      	ldrb	r2, [r3, #0]
 800089c:	2108      	movs	r1, #8
 800089e:	438a      	bics	r2, r1
 80008a0:	1c11      	adds	r1, r2, #0
 80008a2:	1c02      	adds	r2, r0, #0
 80008a4:	430a      	orrs	r2, r1
 80008a6:	701a      	strb	r2, [r3, #0]
	PORT.P4 = (data >> 4) & 1;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	091b      	lsrs	r3, r3, #4
 80008ac:	1c1a      	adds	r2, r3, #0
 80008ae:	2301      	movs	r3, #1
 80008b0:	4013      	ands	r3, r2
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b6e      	ldr	r3, [pc, #440]	@ (8000a70 <Info_manager+0x258>)
 80008b6:	2101      	movs	r1, #1
 80008b8:	400a      	ands	r2, r1
 80008ba:	0110      	lsls	r0, r2, #4
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	2110      	movs	r1, #16
 80008c0:	438a      	bics	r2, r1
 80008c2:	1c11      	adds	r1, r2, #0
 80008c4:	1c02      	adds	r2, r0, #0
 80008c6:	430a      	orrs	r2, r1
 80008c8:	701a      	strb	r2, [r3, #0]
	PORT.P5 = (data >> 5) & 1;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	095b      	lsrs	r3, r3, #5
 80008ce:	1c1a      	adds	r2, r3, #0
 80008d0:	2301      	movs	r3, #1
 80008d2:	4013      	ands	r3, r2
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4b66      	ldr	r3, [pc, #408]	@ (8000a70 <Info_manager+0x258>)
 80008d8:	2101      	movs	r1, #1
 80008da:	400a      	ands	r2, r1
 80008dc:	0150      	lsls	r0, r2, #5
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	2120      	movs	r1, #32
 80008e2:	438a      	bics	r2, r1
 80008e4:	1c11      	adds	r1, r2, #0
 80008e6:	1c02      	adds	r2, r0, #0
 80008e8:	430a      	orrs	r2, r1
 80008ea:	701a      	strb	r2, [r3, #0]
	PORT.P6 = (data >> 6) & 1;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	099b      	lsrs	r3, r3, #6
 80008f0:	1c1a      	adds	r2, r3, #0
 80008f2:	2301      	movs	r3, #1
 80008f4:	4013      	ands	r3, r2
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b5d      	ldr	r3, [pc, #372]	@ (8000a70 <Info_manager+0x258>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	400a      	ands	r2, r1
 80008fe:	0190      	lsls	r0, r2, #6
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	2140      	movs	r1, #64	@ 0x40
 8000904:	438a      	bics	r2, r1
 8000906:	1c11      	adds	r1, r2, #0
 8000908:	1c02      	adds	r2, r0, #0
 800090a:	430a      	orrs	r2, r1
 800090c:	701a      	strb	r2, [r3, #0]
	PORT.P7 = (data >> 7) & 1;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	09db      	lsrs	r3, r3, #7
 8000912:	1c1a      	adds	r2, r3, #0
 8000914:	2301      	movs	r3, #1
 8000916:	4013      	ands	r3, r2
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b55      	ldr	r3, [pc, #340]	@ (8000a70 <Info_manager+0x258>)
 800091c:	01d0      	lsls	r0, r2, #7
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	217f      	movs	r1, #127	@ 0x7f
 8000922:	400a      	ands	r2, r1
 8000924:	1c11      	adds	r1, r2, #0
 8000926:	1c02      	adds	r2, r0, #0
 8000928:	430a      	orrs	r2, r1
 800092a:	701a      	strb	r2, [r3, #0]

	if (rs) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d007      	beq.n	8000942 <Info_manager+0x12a>
 8000932:	2380      	movs	r3, #128	@ 0x80
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	484f      	ldr	r0, [pc, #316]	@ (8000a74 <Info_manager+0x25c>)
 8000938:	2201      	movs	r2, #1
 800093a:	0019      	movs	r1, r3
 800093c:	f000 fd1c 	bl	8001378 <HAL_GPIO_WritePin>
 8000940:	e006      	b.n	8000950 <Info_manager+0x138>
	else HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8000942:	2380      	movs	r3, #128	@ 0x80
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	484b      	ldr	r0, [pc, #300]	@ (8000a74 <Info_manager+0x25c>)
 8000948:	2200      	movs	r2, #0
 800094a:	0019      	movs	r1, r3
 800094c:	f000 fd14 	bl	8001378 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RW_GPIO_Port, RW_Pin, GPIO_PIN_RESET);
 8000950:	2380      	movs	r3, #128	@ 0x80
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	4847      	ldr	r0, [pc, #284]	@ (8000a74 <Info_manager+0x25c>)
 8000956:	2200      	movs	r2, #0
 8000958:	0019      	movs	r1, r3
 800095a:	f000 fd0d 	bl	8001378 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P4);
 800095e:	4b44      	ldr	r3, [pc, #272]	@ (8000a70 <Info_manager+0x258>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	06db      	lsls	r3, r3, #27
 8000964:	0fdb      	lsrs	r3, r3, #31
 8000966:	b2db      	uxtb	r3, r3
 8000968:	001a      	movs	r2, r3
 800096a:	23a0      	movs	r3, #160	@ 0xa0
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2140      	movs	r1, #64	@ 0x40
 8000970:	0018      	movs	r0, r3
 8000972:	f000 fd01 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P5);
 8000976:	4b3e      	ldr	r3, [pc, #248]	@ (8000a70 <Info_manager+0x258>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	069b      	lsls	r3, r3, #26
 800097c:	0fdb      	lsrs	r3, r3, #31
 800097e:	b2db      	uxtb	r3, r3
 8000980:	001a      	movs	r2, r3
 8000982:	23a0      	movs	r3, #160	@ 0xa0
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	2180      	movs	r1, #128	@ 0x80
 8000988:	0018      	movs	r0, r3
 800098a:	f000 fcf5 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P6);
 800098e:	4b38      	ldr	r3, [pc, #224]	@ (8000a70 <Info_manager+0x258>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	065b      	lsls	r3, r3, #25
 8000994:	0fdb      	lsrs	r3, r3, #31
 8000996:	b2db      	uxtb	r3, r3
 8000998:	001a      	movs	r2, r3
 800099a:	4b36      	ldr	r3, [pc, #216]	@ (8000a74 <Info_manager+0x25c>)
 800099c:	2140      	movs	r1, #64	@ 0x40
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 fcea 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P7);
 80009a4:	4b32      	ldr	r3, [pc, #200]	@ (8000a70 <Info_manager+0x258>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	061b      	lsls	r3, r3, #24
 80009aa:	0fdb      	lsrs	r3, r3, #31
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	001a      	movs	r2, r3
 80009b0:	4b31      	ldr	r3, [pc, #196]	@ (8000a78 <Info_manager+0x260>)
 80009b2:	2180      	movs	r1, #128	@ 0x80
 80009b4:	0018      	movs	r0, r3
 80009b6:	f000 fcdf 	bl	8001378 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 fa8e 	bl	8000edc <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80009c0:	23a0      	movs	r3, #160	@ 0xa0
 80009c2:	05db      	lsls	r3, r3, #23
 80009c4:	2201      	movs	r2, #1
 80009c6:	2120      	movs	r1, #32
 80009c8:	0018      	movs	r0, r3
 80009ca:	f000 fcd5 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 fa84 	bl	8000edc <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80009d4:	23a0      	movs	r3, #160	@ 0xa0
 80009d6:	05db      	lsls	r3, r3, #23
 80009d8:	2200      	movs	r2, #0
 80009da:	2120      	movs	r1, #32
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fccb 	bl	8001378 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, PORT.P0);
 80009e2:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <Info_manager+0x258>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	07db      	lsls	r3, r3, #31
 80009e8:	0fdb      	lsrs	r3, r3, #31
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	001a      	movs	r2, r3
 80009ee:	23a0      	movs	r3, #160	@ 0xa0
 80009f0:	05db      	lsls	r3, r3, #23
 80009f2:	2140      	movs	r1, #64	@ 0x40
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fcbf 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, PORT.P1);
 80009fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <Info_manager+0x258>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	079b      	lsls	r3, r3, #30
 8000a00:	0fdb      	lsrs	r3, r3, #31
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	001a      	movs	r2, r3
 8000a06:	23a0      	movs	r3, #160	@ 0xa0
 8000a08:	05db      	lsls	r3, r3, #23
 8000a0a:	2180      	movs	r1, #128	@ 0x80
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f000 fcb3 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, PORT.P2);
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <Info_manager+0x258>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	075b      	lsls	r3, r3, #29
 8000a18:	0fdb      	lsrs	r3, r3, #31
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <Info_manager+0x25c>)
 8000a20:	2140      	movs	r1, #64	@ 0x40
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 fca8 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, PORT.P3);
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <Info_manager+0x258>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	071b      	lsls	r3, r3, #28
 8000a2e:	0fdb      	lsrs	r3, r3, #31
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	001a      	movs	r2, r3
 8000a34:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <Info_manager+0x260>)
 8000a36:	2180      	movs	r1, #128	@ 0x80
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f000 fc9d 	bl	8001378 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f000 fa4c 	bl	8000edc <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000a44:	23a0      	movs	r3, #160	@ 0xa0
 8000a46:	05db      	lsls	r3, r3, #23
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 fc93 	bl	8001378 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000a52:	2001      	movs	r0, #1
 8000a54:	f000 fa42 	bl	8000edc <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000a58:	23a0      	movs	r3, #160	@ 0xa0
 8000a5a:	05db      	lsls	r3, r3, #23
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2120      	movs	r1, #32
 8000a60:	0018      	movs	r0, r3
 8000a62:	f000 fc89 	bl	8001378 <HAL_GPIO_WritePin>
}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b002      	add	sp, #8
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	200000e8 	.word	0x200000e8
 8000a74:	50000400 	.word	0x50000400
 8000a78:	50000800 	.word	0x50000800

08000a7c <Message>:

void Message(char *message){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	for (int i = 0; message[i] != '\0'; ++i){
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	e00a      	b.n	8000aa0 <Message+0x24>
		Info_manager(message[i], 1);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	18d3      	adds	r3, r2, r3
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2101      	movs	r1, #1
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff febf 	bl	8000818 <Info_manager>
	for (int i = 0; message[i] != '\0'; ++i){
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1ee      	bne.n	8000a8a <Message+0xe>
	}
}
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b004      	add	sp, #16
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <Start_lcd>:

void Start_lcd(void){
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
    HAL_Delay(20);
 8000aba:	2014      	movs	r0, #20
 8000abc:	f000 fa0e 	bl	8000edc <HAL_Delay>
    Info_manager(0x33, 0);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2033      	movs	r0, #51	@ 0x33
 8000ac4:	f7ff fea8 	bl	8000818 <Info_manager>
    Info_manager(0x32, 0);
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2032      	movs	r0, #50	@ 0x32
 8000acc:	f7ff fea4 	bl	8000818 <Info_manager>

    Info_manager(0x28, 0);
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2028      	movs	r0, #40	@ 0x28
 8000ad4:	f7ff fea0 	bl	8000818 <Info_manager>

    Info_manager(0x0C, 0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	200c      	movs	r0, #12
 8000adc:	f7ff fe9c 	bl	8000818 <Info_manager>
    Info_manager(0x06, 0);
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2006      	movs	r0, #6
 8000ae4:	f7ff fe98 	bl	8000818 <Info_manager>
    Info_manager(0x01, 0);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2001      	movs	r0, #1
 8000aec:	f7ff fe94 	bl	8000818 <Info_manager>

    HAL_Delay(2);
 8000af0:	2002      	movs	r0, #2
 8000af2:	f000 f9f3 	bl	8000edc <HAL_Delay>
}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <Show_date>:

void Show_date(void){
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af02      	add	r7, sp, #8
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000b02:	4931      	ldr	r1, [pc, #196]	@ (8000bc8 <Show_date+0xcc>)
 8000b04:	4b31      	ldr	r3, [pc, #196]	@ (8000bcc <Show_date+0xd0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f001 fdd9 	bl	80026c0 <HAL_RTC_GetDate>
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000b0e:	4930      	ldr	r1, [pc, #192]	@ (8000bd0 <Show_date+0xd4>)
 8000b10:	4b2e      	ldr	r3, [pc, #184]	@ (8000bcc <Show_date+0xd0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	0018      	movs	r0, r3
 8000b16:	f001 fce1 	bl	80024dc <HAL_RTC_GetTime>

  seconds = time.Seconds;
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd0 <Show_date+0xd4>)
 8000b1c:	789a      	ldrb	r2, [r3, #2]
 8000b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd4 <Show_date+0xd8>)
 8000b20:	701a      	strb	r2, [r3, #0]
  minutes = time.Minutes;
 8000b22:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd0 <Show_date+0xd4>)
 8000b24:	785a      	ldrb	r2, [r3, #1]
 8000b26:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd8 <Show_date+0xdc>)
 8000b28:	701a      	strb	r2, [r3, #0]
  hours   = time.Hours;
 8000b2a:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <Show_date+0xd4>)
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <Show_date+0xe0>)
 8000b30:	701a      	strb	r2, [r3, #0]

  day     = date.Date;
 8000b32:	4b25      	ldr	r3, [pc, #148]	@ (8000bc8 <Show_date+0xcc>)
 8000b34:	789a      	ldrb	r2, [r3, #2]
 8000b36:	4b2a      	ldr	r3, [pc, #168]	@ (8000be0 <Show_date+0xe4>)
 8000b38:	701a      	strb	r2, [r3, #0]
  month   = date.Month;
 8000b3a:	4b23      	ldr	r3, [pc, #140]	@ (8000bc8 <Show_date+0xcc>)
 8000b3c:	785a      	ldrb	r2, [r3, #1]
 8000b3e:	4b29      	ldr	r3, [pc, #164]	@ (8000be4 <Show_date+0xe8>)
 8000b40:	701a      	strb	r2, [r3, #0]
  year    = date.Year + (century * 100) + (milenium * 1000);
 8000b42:	4b21      	ldr	r3, [pc, #132]	@ (8000bc8 <Show_date+0xcc>)
 8000b44:	78db      	ldrb	r3, [r3, #3]
 8000b46:	0019      	movs	r1, r3
 8000b48:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <Show_date+0xec>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	015b      	lsls	r3, r3, #5
 8000b50:	1a9b      	subs	r3, r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	189b      	adds	r3, r3, r2
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	0018      	movs	r0, r3
 8000b5a:	4b24      	ldr	r3, [pc, #144]	@ (8000bec <Show_date+0xf0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2264      	movs	r2, #100	@ 0x64
 8000b60:	4353      	muls	r3, r2
 8000b62:	18c3      	adds	r3, r0, r3
 8000b64:	18ca      	adds	r2, r1, r3
 8000b66:	4b22      	ldr	r3, [pc, #136]	@ (8000bf0 <Show_date+0xf4>)
 8000b68:	601a      	str	r2, [r3, #0]

  sprintf(atualDate, "%02d/%02d/%lu", day, month, year);
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <Show_date+0xe4>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	001a      	movs	r2, r3
 8000b70:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <Show_date+0xe8>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	001c      	movs	r4, r3
 8000b76:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf0 <Show_date+0xf4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	491e      	ldr	r1, [pc, #120]	@ (8000bf4 <Show_date+0xf8>)
 8000b7c:	481e      	ldr	r0, [pc, #120]	@ (8000bf8 <Show_date+0xfc>)
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	0023      	movs	r3, r4
 8000b82:	f001 fec3 	bl	800290c <siprintf>
  Message(atualDate);
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <Show_date+0xfc>)
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ff77 	bl	8000a7c <Message>

  Info_manager(0xC0, 0);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	20c0      	movs	r0, #192	@ 0xc0
 8000b92:	f7ff fe41 	bl	8000818 <Info_manager>
  sprintf(atualHour, "%02d:%02d:%02d", hours, minutes, seconds);
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <Show_date+0xe0>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <Show_date+0xdc>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	001c      	movs	r4, r3
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <Show_date+0xd8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4915      	ldr	r1, [pc, #84]	@ (8000bfc <Show_date+0x100>)
 8000ba8:	4815      	ldr	r0, [pc, #84]	@ (8000c00 <Show_date+0x104>)
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	0023      	movs	r3, r4
 8000bae:	f001 fead 	bl	800290c <siprintf>
  Message(atualHour);
 8000bb2:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <Show_date+0x104>)
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff ff61 	bl	8000a7c <Message>

  Verify_date();
 8000bba:	f000 f823 	bl	8000c04 <Verify_date>
}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b001      	add	sp, #4
 8000bc4:	bd90      	pop	{r4, r7, pc}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	200000d0 	.word	0x200000d0
 8000bcc:	20000078 	.word	0x20000078
 8000bd0:	200000d4 	.word	0x200000d4
 8000bd4:	2000009c 	.word	0x2000009c
 8000bd8:	2000009d 	.word	0x2000009d
 8000bdc:	2000009e 	.word	0x2000009e
 8000be0:	2000009f 	.word	0x2000009f
 8000be4:	200000a0 	.word	0x200000a0
 8000be8:	200000ac 	.word	0x200000ac
 8000bec:	200000a8 	.word	0x200000a8
 8000bf0:	200000a4 	.word	0x200000a4
 8000bf4:	08003260 	.word	0x08003260
 8000bf8:	200000b0 	.word	0x200000b0
 8000bfc:	08003270 	.word	0x08003270
 8000c00:	200000c0 	.word	0x200000c0

08000c04 <Verify_date>:

void Verify_date(void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	if (day == 31 && month == 12){
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <Verify_date+0x74>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b1f      	cmp	r3, #31
 8000c0e:	d130      	bne.n	8000c72 <Verify_date+0x6e>
 8000c10:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <Verify_date+0x78>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b0c      	cmp	r3, #12
 8000c16:	d12c      	bne.n	8000c72 <Verify_date+0x6e>
		if ((hours == 23 && minutes == 59) && seconds == 59){
 8000c18:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <Verify_date+0x7c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b17      	cmp	r3, #23
 8000c1e:	d115      	bne.n	8000c4c <Verify_date+0x48>
 8000c20:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <Verify_date+0x80>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c26:	d111      	bne.n	8000c4c <Verify_date+0x48>
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <Verify_date+0x84>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000c2e:	d10d      	bne.n	8000c4c <Verify_date+0x48>
			HAL_Delay(1000);
 8000c30:	23fa      	movs	r3, #250	@ 0xfa
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 f951 	bl	8000edc <HAL_Delay>
			if (date.Year == 99){
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <Verify_date+0x88>)
 8000c3c:	78db      	ldrb	r3, [r3, #3]
 8000c3e:	2b63      	cmp	r3, #99	@ 0x63
 8000c40:	d104      	bne.n	8000c4c <Verify_date+0x48>
				century++;
 8000c42:	4b13      	ldr	r3, [pc, #76]	@ (8000c90 <Verify_date+0x8c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <Verify_date+0x8c>)
 8000c4a:	601a      	str	r2, [r3, #0]
			}
		}

		if (century > 9){
 8000c4c:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <Verify_date+0x8c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b09      	cmp	r3, #9
 8000c52:	d907      	bls.n	8000c64 <Verify_date+0x60>
			milenium++;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <Verify_date+0x90>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <Verify_date+0x90>)
 8000c5c:	601a      	str	r2, [r3, #0]
			century = 0;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <Verify_date+0x8c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
		}

		if (milenium > 9) milenium = 0;
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <Verify_date+0x90>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b09      	cmp	r3, #9
 8000c6a:	d902      	bls.n	8000c72 <Verify_date+0x6e>
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <Verify_date+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
	}
}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000009f 	.word	0x2000009f
 8000c7c:	200000a0 	.word	0x200000a0
 8000c80:	2000009e 	.word	0x2000009e
 8000c84:	2000009d 	.word	0x2000009d
 8000c88:	2000009c 	.word	0x2000009c
 8000c8c:	200000d0 	.word	0x200000d0
 8000c90:	200000a8 	.word	0x200000a8
 8000c94:	200000ac 	.word	0x200000ac

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	46c0      	nop			@ (mov r8, r8)
 8000ca2:	e7fd      	b.n	8000ca0 <Error_Handler+0x8>

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca8:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <HAL_MspInit+0x24>)
 8000caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_MspInit+0x24>)
 8000cae:	2101      	movs	r1, #1
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <HAL_MspInit+0x24>)
 8000cb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cb8:	4b03      	ldr	r3, [pc, #12]	@ (8000cc8 <HAL_MspInit+0x24>)
 8000cba:	2180      	movs	r1, #128	@ 0x80
 8000cbc:	0549      	lsls	r1, r1, #21
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	46c0      	nop			@ (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000

08000ccc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a06      	ldr	r2, [pc, #24]	@ (8000cf4 <HAL_RTC_MspInit+0x28>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d106      	bne.n	8000cec <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_RTC_MspInit+0x2c>)
 8000ce0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000ce2:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_RTC_MspInit+0x2c>)
 8000ce4:	2180      	movs	r1, #128	@ 0x80
 8000ce6:	02c9      	lsls	r1, r1, #11
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40002800 	.word	0x40002800
 8000cf8:	40021000 	.word	0x40021000

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	e7fd      	b.n	8000d00 <NMI_Handler+0x4>

08000d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	e7fd      	b.n	8000d08 <HardFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d10:	46c0      	nop			@ (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f8be 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	46c0      	nop			@ (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d38:	4a14      	ldr	r2, [pc, #80]	@ (8000d8c <_sbrk+0x5c>)
 8000d3a:	4b15      	ldr	r3, [pc, #84]	@ (8000d90 <_sbrk+0x60>)
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d102      	bne.n	8000d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <_sbrk+0x64>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	@ (8000d98 <_sbrk+0x68>)
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	18d3      	adds	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d207      	bcs.n	8000d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d60:	f001 fdfc 	bl	800295c <__errno>
 8000d64:	0003      	movs	r3, r0
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	425b      	negs	r3, r3
 8000d6e:	e009      	b.n	8000d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	18d2      	adds	r2, r2, r3
 8000d7e:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <_sbrk+0x64>)
 8000d80:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b006      	add	sp, #24
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20002000 	.word	0x20002000
 8000d90:	00000400 	.word	0x00000400
 8000d94:	200000ec 	.word	0x200000ec
 8000d98:	20000240 	.word	0x20000240

08000d9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	46c0      	nop			@ (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000da8:	480d      	ldr	r0, [pc, #52]	@ (8000de0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000daa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dac:	f7ff fff6 	bl	8000d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	@ (8000de8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <LoopForever+0xe>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000df4 <LoopForever+0x16>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f001 fdc7 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fb6f 	bl	80004bc <main>

08000dde <LoopForever>:

LoopForever:
    b LoopForever
 8000dde:	e7fe      	b.n	8000dde <LoopForever>
  ldr   r0, =_estack
 8000de0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dec:	080032dc 	.word	0x080032dc
  ldr r2, =_sbss
 8000df0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000df4:	2000023c 	.word	0x2000023c

08000df8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_COMP_IRQHandler>
	...

08000dfc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e02:	1dfb      	adds	r3, r7, #7
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <HAL_Init+0x3c>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e38 <HAL_Init+0x3c>)
 8000e0e:	2140      	movs	r1, #64	@ 0x40
 8000e10:	430a      	orrs	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e14:	2000      	movs	r0, #0
 8000e16:	f000 f811 	bl	8000e3c <HAL_InitTick>
 8000e1a:	1e03      	subs	r3, r0, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	e001      	b.n	8000e2a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e26:	f7ff ff3d 	bl	8000ca4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
}
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	40022000 	.word	0x40022000

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <HAL_InitTick+0x5c>)
 8000e46:	681c      	ldr	r4, [r3, #0]
 8000e48:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <HAL_InitTick+0x60>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	0019      	movs	r1, r3
 8000e4e:	23fa      	movs	r3, #250	@ 0xfa
 8000e50:	0098      	lsls	r0, r3, #2
 8000e52:	f7ff f963 	bl	800011c <__udivsi3>
 8000e56:	0003      	movs	r3, r0
 8000e58:	0019      	movs	r1, r3
 8000e5a:	0020      	movs	r0, r4
 8000e5c:	f7ff f95e 	bl	800011c <__udivsi3>
 8000e60:	0003      	movs	r3, r0
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 f905 	bl	8001072 <HAL_SYSTICK_Config>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e00f      	b.n	8000e90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b03      	cmp	r3, #3
 8000e74:	d80b      	bhi.n	8000e8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	425b      	negs	r3, r3
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 f8e2 	bl	8001048 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_InitTick+0x64>)
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b003      	add	sp, #12
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000004 	.word	0x20000004

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <HAL_IncTick+0x1c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	001a      	movs	r2, r3
 8000eae:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	18d2      	adds	r2, r2, r3
 8000eb4:	4b03      	ldr	r3, [pc, #12]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eb6:	601a      	str	r2, [r3, #0]
}
 8000eb8:	46c0      	nop			@ (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	200000f0 	.word	0x200000f0

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b02      	ldr	r3, [pc, #8]	@ (8000ed8 <HAL_GetTick+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	200000f0 	.word	0x200000f0

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff fff0 	bl	8000ec8 <HAL_GetTick>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <HAL_Delay+0x44>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	001a      	movs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	189b      	adds	r3, r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	f7ff ffe0 	bl	8000ec8 <HAL_GetTick>
 8000f08:	0002      	movs	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	46c0      	nop			@ (mov r8, r8)
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b004      	add	sp, #16
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	20000008 	.word	0x20000008

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f38:	d828      	bhi.n	8000f8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ff8 <__NVIC_SetPriority+0xd4>)
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	33c0      	adds	r3, #192	@ 0xc0
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	589b      	ldr	r3, [r3, r2]
 8000f4a:	1dfa      	adds	r2, r7, #7
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	0011      	movs	r1, r2
 8000f50:	2203      	movs	r2, #3
 8000f52:	400a      	ands	r2, r1
 8000f54:	00d2      	lsls	r2, r2, #3
 8000f56:	21ff      	movs	r1, #255	@ 0xff
 8000f58:	4091      	lsls	r1, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	43d2      	mvns	r2, r2
 8000f5e:	401a      	ands	r2, r3
 8000f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	22ff      	movs	r2, #255	@ 0xff
 8000f68:	401a      	ands	r2, r3
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	0018      	movs	r0, r3
 8000f70:	2303      	movs	r3, #3
 8000f72:	4003      	ands	r3, r0
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f78:	481f      	ldr	r0, [pc, #124]	@ (8000ff8 <__NVIC_SetPriority+0xd4>)
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	430a      	orrs	r2, r1
 8000f84:	33c0      	adds	r3, #192	@ 0xc0
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f8a:	e031      	b.n	8000ff0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ffc <__NVIC_SetPriority+0xd8>)
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0019      	movs	r1, r3
 8000f94:	230f      	movs	r3, #15
 8000f96:	400b      	ands	r3, r1
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3306      	adds	r3, #6
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	18d3      	adds	r3, r2, r3
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1dfa      	adds	r2, r7, #7
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	0011      	movs	r1, r2
 8000fac:	2203      	movs	r2, #3
 8000fae:	400a      	ands	r2, r1
 8000fb0:	00d2      	lsls	r2, r2, #3
 8000fb2:	21ff      	movs	r1, #255	@ 0xff
 8000fb4:	4091      	lsls	r1, r2
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	43d2      	mvns	r2, r2
 8000fba:	401a      	ands	r2, r3
 8000fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	019b      	lsls	r3, r3, #6
 8000fc2:	22ff      	movs	r2, #255	@ 0xff
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2303      	movs	r3, #3
 8000fce:	4003      	ands	r3, r0
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd4:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <__NVIC_SetPriority+0xd8>)
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	001c      	movs	r4, r3
 8000fdc:	230f      	movs	r3, #15
 8000fde:	4023      	ands	r3, r4
 8000fe0:	3b08      	subs	r3, #8
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	3306      	adds	r3, #6
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	18c3      	adds	r3, r0, r3
 8000fec:	3304      	adds	r3, #4
 8000fee:	601a      	str	r2, [r3, #0]
}
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b003      	add	sp, #12
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	045b      	lsls	r3, r3, #17
 8001010:	429a      	cmp	r2, r3
 8001012:	d301      	bcc.n	8001018 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001014:	2301      	movs	r3, #1
 8001016:	e010      	b.n	800103a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <SysTick_Config+0x44>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	3a01      	subs	r2, #1
 800101e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001020:	2301      	movs	r3, #1
 8001022:	425b      	negs	r3, r3
 8001024:	2103      	movs	r1, #3
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff ff7c 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <SysTick_Config+0x44>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <SysTick_Config+0x44>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	210f      	movs	r1, #15
 8001054:	187b      	adds	r3, r7, r1
 8001056:	1c02      	adds	r2, r0, #0
 8001058:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	187b      	adds	r3, r7, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff ffbf 	bl	8001000 <SysTick_Config>
 8001082:	0003      	movs	r3, r0
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010a2:	e14f      	b.n	8001344 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2101      	movs	r1, #1
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4091      	lsls	r1, r2
 80010ae:	000a      	movs	r2, r1
 80010b0:	4013      	ands	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d100      	bne.n	80010bc <HAL_GPIO_Init+0x30>
 80010ba:	e140      	b.n	800133e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2203      	movs	r2, #3
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d005      	beq.n	80010d4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2203      	movs	r2, #3
 80010ce:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d130      	bne.n	8001136 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	409a      	lsls	r2, r3
 80010e2:	0013      	movs	r3, r2
 80010e4:	43da      	mvns	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	409a      	lsls	r2, r3
 80010f6:	0013      	movs	r3, r2
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800110a:	2201      	movs	r2, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	2201      	movs	r2, #1
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2203      	movs	r2, #3
 800113c:	4013      	ands	r3, r2
 800113e:	2b03      	cmp	r3, #3
 8001140:	d017      	beq.n	8001172 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	409a      	lsls	r2, r3
 8001150:	0013      	movs	r3, r2
 8001152:	43da      	mvns	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2203      	movs	r2, #3
 8001178:	4013      	ands	r3, r2
 800117a:	2b02      	cmp	r3, #2
 800117c:	d123      	bne.n	80011c6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	58d3      	ldr	r3, [r2, r3]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	2207      	movs	r2, #7
 8001190:	4013      	ands	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	409a      	lsls	r2, r3
 8001198:	0013      	movs	r3, r2
 800119a:	43da      	mvns	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	691a      	ldr	r2, [r3, #16]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2107      	movs	r1, #7
 80011aa:	400b      	ands	r3, r1
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	08da      	lsrs	r2, r3, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3208      	adds	r2, #8
 80011c0:	0092      	lsls	r2, r2, #2
 80011c2:	6939      	ldr	r1, [r7, #16]
 80011c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	43da      	mvns	r2, r3
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	401a      	ands	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	23c0      	movs	r3, #192	@ 0xc0
 8001200:	029b      	lsls	r3, r3, #10
 8001202:	4013      	ands	r3, r2
 8001204:	d100      	bne.n	8001208 <HAL_GPIO_Init+0x17c>
 8001206:	e09a      	b.n	800133e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001208:	4b54      	ldr	r3, [pc, #336]	@ (800135c <HAL_GPIO_Init+0x2d0>)
 800120a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800120c:	4b53      	ldr	r3, [pc, #332]	@ (800135c <HAL_GPIO_Init+0x2d0>)
 800120e:	2101      	movs	r1, #1
 8001210:	430a      	orrs	r2, r1
 8001212:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001214:	4a52      	ldr	r2, [pc, #328]	@ (8001360 <HAL_GPIO_Init+0x2d4>)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	589b      	ldr	r3, [r3, r2]
 8001220:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2203      	movs	r2, #3
 8001226:	4013      	ands	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	409a      	lsls	r2, r3
 800122e:	0013      	movs	r3, r2
 8001230:	43da      	mvns	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	23a0      	movs	r3, #160	@ 0xa0
 800123c:	05db      	lsls	r3, r3, #23
 800123e:	429a      	cmp	r2, r3
 8001240:	d019      	beq.n	8001276 <HAL_GPIO_Init+0x1ea>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a47      	ldr	r2, [pc, #284]	@ (8001364 <HAL_GPIO_Init+0x2d8>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x1e6>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a46      	ldr	r2, [pc, #280]	@ (8001368 <HAL_GPIO_Init+0x2dc>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x1e2>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a45      	ldr	r2, [pc, #276]	@ (800136c <HAL_GPIO_Init+0x2e0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x1de>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a44      	ldr	r2, [pc, #272]	@ (8001370 <HAL_GPIO_Init+0x2e4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x1da>
 8001262:	2305      	movs	r3, #5
 8001264:	e008      	b.n	8001278 <HAL_GPIO_Init+0x1ec>
 8001266:	2306      	movs	r3, #6
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x1ec>
 800126a:	2303      	movs	r3, #3
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x1ec>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x1ec>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x1ec>
 8001276:	2300      	movs	r3, #0
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	2103      	movs	r1, #3
 800127c:	400a      	ands	r2, r1
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001288:	4935      	ldr	r1, [pc, #212]	@ (8001360 <HAL_GPIO_Init+0x2d4>)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001296:	4b37      	ldr	r3, [pc, #220]	@ (8001374 <HAL_GPIO_Init+0x2e8>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43da      	mvns	r2, r3
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	2380      	movs	r3, #128	@ 0x80
 80012ac:	035b      	lsls	r3, r3, #13
 80012ae:	4013      	ands	r3, r2
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001374 <HAL_GPIO_Init+0x2e8>)
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001374 <HAL_GPIO_Init+0x2e8>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43da      	mvns	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	2380      	movs	r3, #128	@ 0x80
 80012d6:	039b      	lsls	r3, r3, #14
 80012d8:	4013      	ands	r3, r2
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012e4:	4b23      	ldr	r3, [pc, #140]	@ (8001374 <HAL_GPIO_Init+0x2e8>)
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80012ea:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <HAL_GPIO_Init+0x2e8>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43da      	mvns	r2, r3
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	2380      	movs	r3, #128	@ 0x80
 8001300:	029b      	lsls	r3, r3, #10
 8001302:	4013      	ands	r3, r2
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <HAL_GPIO_Init+0x2e8>)
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001314:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <HAL_GPIO_Init+0x2e8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43da      	mvns	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	2380      	movs	r3, #128	@ 0x80
 800132a:	025b      	lsls	r3, r3, #9
 800132c:	4013      	ands	r3, r2
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <HAL_GPIO_Init+0x2e8>)
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	40da      	lsrs	r2, r3
 800134c:	1e13      	subs	r3, r2, #0
 800134e:	d000      	beq.n	8001352 <HAL_GPIO_Init+0x2c6>
 8001350:	e6a8      	b.n	80010a4 <HAL_GPIO_Init+0x18>
  }
}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	46c0      	nop			@ (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b006      	add	sp, #24
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000
 8001364:	50000400 	.word	0x50000400
 8001368:	50000800 	.word	0x50000800
 800136c:	50000c00 	.word	0x50000c00
 8001370:	50001c00 	.word	0x50001c00
 8001374:	40010400 	.word	0x40010400

08001378 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	0008      	movs	r0, r1
 8001382:	0011      	movs	r1, r2
 8001384:	1cbb      	adds	r3, r7, #2
 8001386:	1c02      	adds	r2, r0, #0
 8001388:	801a      	strh	r2, [r3, #0]
 800138a:	1c7b      	adds	r3, r7, #1
 800138c:	1c0a      	adds	r2, r1, #0
 800138e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001390:	1c7b      	adds	r3, r7, #1
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001398:	1cbb      	adds	r3, r7, #2
 800139a:	881a      	ldrh	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80013a2:	1cbb      	adds	r3, r7, #2
 80013a4:	881a      	ldrh	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b002      	add	sp, #8
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80013be:	2180      	movs	r1, #128	@ 0x80
 80013c0:	0049      	lsls	r1, r1, #1
 80013c2:	430a      	orrs	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]
}
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40007000 	.word	0x40007000

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	f000 fbaf 	bl	8001b42 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e4:	4bcf      	ldr	r3, [pc, #828]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	220c      	movs	r2, #12
 80013ea:	4013      	ands	r3, r2
 80013ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ee:	4bcd      	ldr	r3, [pc, #820]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	2380      	movs	r3, #128	@ 0x80
 80013f4:	025b      	lsls	r3, r3, #9
 80013f6:	4013      	ands	r3, r2
 80013f8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	4013      	ands	r3, r2
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x36>
 8001404:	e07e      	b.n	8001504 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	2b08      	cmp	r3, #8
 800140a:	d007      	beq.n	800141c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800140c:	6a3b      	ldr	r3, [r7, #32]
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d112      	bne.n	8001438 <HAL_RCC_OscConfig+0x68>
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	429a      	cmp	r2, r3
 800141a:	d10d      	bne.n	8001438 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	4bc1      	ldr	r3, [pc, #772]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	@ 0x80
 8001422:	029b      	lsls	r3, r3, #10
 8001424:	4013      	ands	r3, r2
 8001426:	d100      	bne.n	800142a <HAL_RCC_OscConfig+0x5a>
 8001428:	e06b      	b.n	8001502 <HAL_RCC_OscConfig+0x132>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d167      	bne.n	8001502 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	f000 fb85 	bl	8001b42 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	2380      	movs	r3, #128	@ 0x80
 800143e:	025b      	lsls	r3, r3, #9
 8001440:	429a      	cmp	r2, r3
 8001442:	d107      	bne.n	8001454 <HAL_RCC_OscConfig+0x84>
 8001444:	4bb7      	ldr	r3, [pc, #732]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4bb6      	ldr	r3, [pc, #728]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800144a:	2180      	movs	r1, #128	@ 0x80
 800144c:	0249      	lsls	r1, r1, #9
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e027      	b.n	80014a4 <HAL_RCC_OscConfig+0xd4>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	23a0      	movs	r3, #160	@ 0xa0
 800145a:	02db      	lsls	r3, r3, #11
 800145c:	429a      	cmp	r2, r3
 800145e:	d10e      	bne.n	800147e <HAL_RCC_OscConfig+0xae>
 8001460:	4bb0      	ldr	r3, [pc, #704]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4baf      	ldr	r3, [pc, #700]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001466:	2180      	movs	r1, #128	@ 0x80
 8001468:	02c9      	lsls	r1, r1, #11
 800146a:	430a      	orrs	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	4bad      	ldr	r3, [pc, #692]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4bac      	ldr	r3, [pc, #688]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001474:	2180      	movs	r1, #128	@ 0x80
 8001476:	0249      	lsls	r1, r1, #9
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e012      	b.n	80014a4 <HAL_RCC_OscConfig+0xd4>
 800147e:	4ba9      	ldr	r3, [pc, #676]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4ba8      	ldr	r3, [pc, #672]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001484:	49a8      	ldr	r1, [pc, #672]	@ (8001728 <HAL_RCC_OscConfig+0x358>)
 8001486:	400a      	ands	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	4ba6      	ldr	r3, [pc, #664]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	@ 0x80
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	4013      	ands	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4ba2      	ldr	r3, [pc, #648]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4ba1      	ldr	r3, [pc, #644]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800149e:	49a3      	ldr	r1, [pc, #652]	@ (800172c <HAL_RCC_OscConfig+0x35c>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d015      	beq.n	80014d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fd0c 	bl	8000ec8 <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014b4:	e009      	b.n	80014ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b6:	f7ff fd07 	bl	8000ec8 <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b64      	cmp	r3, #100	@ 0x64
 80014c2:	d902      	bls.n	80014ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	f000 fb3c 	bl	8001b42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014ca:	4b96      	ldr	r3, [pc, #600]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	029b      	lsls	r3, r3, #10
 80014d2:	4013      	ands	r3, r2
 80014d4:	d0ef      	beq.n	80014b6 <HAL_RCC_OscConfig+0xe6>
 80014d6:	e015      	b.n	8001504 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcf6 	bl	8000ec8 <HAL_GetTick>
 80014dc:	0003      	movs	r3, r0
 80014de:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e2:	f7ff fcf1 	bl	8000ec8 <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b64      	cmp	r3, #100	@ 0x64
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e326      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014f4:	4b8b      	ldr	r3, [pc, #556]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	029b      	lsls	r3, r3, #10
 80014fc:	4013      	ands	r3, r2
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x112>
 8001500:	e000      	b.n	8001504 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001502:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2202      	movs	r2, #2
 800150a:	4013      	ands	r3, r2
 800150c:	d100      	bne.n	8001510 <HAL_RCC_OscConfig+0x140>
 800150e:	e08b      	b.n	8001628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	2b04      	cmp	r3, #4
 800151a:	d005      	beq.n	8001528 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	2b0c      	cmp	r3, #12
 8001520:	d13e      	bne.n	80015a0 <HAL_RCC_OscConfig+0x1d0>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d13b      	bne.n	80015a0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001528:	4b7e      	ldr	r3, [pc, #504]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2204      	movs	r2, #4
 800152e:	4013      	ands	r3, r2
 8001530:	d004      	beq.n	800153c <HAL_RCC_OscConfig+0x16c>
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e302      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153c:	4b79      	ldr	r3, [pc, #484]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a7b      	ldr	r2, [pc, #492]	@ (8001730 <HAL_RCC_OscConfig+0x360>)
 8001542:	4013      	ands	r3, r2
 8001544:	0019      	movs	r1, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	021a      	lsls	r2, r3, #8
 800154c:	4b75      	ldr	r3, [pc, #468]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800154e:	430a      	orrs	r2, r1
 8001550:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001552:	4b74      	ldr	r3, [pc, #464]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2209      	movs	r2, #9
 8001558:	4393      	bics	r3, r2
 800155a:	0019      	movs	r1, r3
 800155c:	4b71      	ldr	r3, [pc, #452]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	430a      	orrs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001564:	f000 fc40 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8001568:	0001      	movs	r1, r0
 800156a:	4b6e      	ldr	r3, [pc, #440]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	091b      	lsrs	r3, r3, #4
 8001570:	220f      	movs	r2, #15
 8001572:	4013      	ands	r3, r2
 8001574:	4a6f      	ldr	r2, [pc, #444]	@ (8001734 <HAL_RCC_OscConfig+0x364>)
 8001576:	5cd3      	ldrb	r3, [r2, r3]
 8001578:	000a      	movs	r2, r1
 800157a:	40da      	lsrs	r2, r3
 800157c:	4b6e      	ldr	r3, [pc, #440]	@ (8001738 <HAL_RCC_OscConfig+0x368>)
 800157e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001580:	4b6e      	ldr	r3, [pc, #440]	@ (800173c <HAL_RCC_OscConfig+0x36c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2513      	movs	r5, #19
 8001586:	197c      	adds	r4, r7, r5
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff fc57 	bl	8000e3c <HAL_InitTick>
 800158e:	0003      	movs	r3, r0
 8001590:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001592:	197b      	adds	r3, r7, r5
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d046      	beq.n	8001628 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800159a:	197b      	adds	r3, r7, r5
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	e2d0      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d027      	beq.n	80015f6 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2209      	movs	r2, #9
 80015ac:	4393      	bics	r3, r2
 80015ae:	0019      	movs	r1, r3
 80015b0:	4b5c      	ldr	r3, [pc, #368]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fc86 	bl	8000ec8 <HAL_GetTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c2:	f7ff fc81 	bl	8000ec8 <HAL_GetTick>
 80015c6:	0002      	movs	r2, r0
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e2b6      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015d4:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2204      	movs	r2, #4
 80015da:	4013      	ands	r3, r2
 80015dc:	d0f1      	beq.n	80015c2 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	4b51      	ldr	r3, [pc, #324]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4a53      	ldr	r2, [pc, #332]	@ (8001730 <HAL_RCC_OscConfig+0x360>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	0019      	movs	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	021a      	lsls	r2, r3, #8
 80015ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	e018      	b.n	8001628 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80015fc:	2101      	movs	r1, #1
 80015fe:	438a      	bics	r2, r1
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fc61 	bl	8000ec8 <HAL_GetTick>
 8001606:	0003      	movs	r3, r0
 8001608:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800160c:	f7ff fc5c 	bl	8000ec8 <HAL_GetTick>
 8001610:	0002      	movs	r2, r0
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e291      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800161e:	4b41      	ldr	r3, [pc, #260]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2204      	movs	r2, #4
 8001624:	4013      	ands	r3, r2
 8001626:	d1f1      	bne.n	800160c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2210      	movs	r2, #16
 800162e:	4013      	ands	r3, r2
 8001630:	d100      	bne.n	8001634 <HAL_RCC_OscConfig+0x264>
 8001632:	e0a1      	b.n	8001778 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d140      	bne.n	80016bc <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800163a:	4b3a      	ldr	r3, [pc, #232]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	2380      	movs	r3, #128	@ 0x80
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4013      	ands	r3, r2
 8001644:	d005      	beq.n	8001652 <HAL_RCC_OscConfig+0x282>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e277      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001652:	4b34      	ldr	r3, [pc, #208]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	4a3a      	ldr	r2, [pc, #232]	@ (8001740 <HAL_RCC_OscConfig+0x370>)
 8001658:	4013      	ands	r3, r2
 800165a:	0019      	movs	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001660:	4b30      	ldr	r3, [pc, #192]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001662:	430a      	orrs	r2, r1
 8001664:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001666:	4b2f      	ldr	r3, [pc, #188]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	0a19      	lsrs	r1, r3, #8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	061a      	lsls	r2, r3, #24
 8001674:	4b2b      	ldr	r3, [pc, #172]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001676:	430a      	orrs	r2, r1
 8001678:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	0b5b      	lsrs	r3, r3, #13
 8001680:	3301      	adds	r3, #1
 8001682:	2280      	movs	r2, #128	@ 0x80
 8001684:	0212      	lsls	r2, r2, #8
 8001686:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001688:	4b26      	ldr	r3, [pc, #152]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	210f      	movs	r1, #15
 8001690:	400b      	ands	r3, r1
 8001692:	4928      	ldr	r1, [pc, #160]	@ (8001734 <HAL_RCC_OscConfig+0x364>)
 8001694:	5ccb      	ldrb	r3, [r1, r3]
 8001696:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001698:	4b27      	ldr	r3, [pc, #156]	@ (8001738 <HAL_RCC_OscConfig+0x368>)
 800169a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800169c:	4b27      	ldr	r3, [pc, #156]	@ (800173c <HAL_RCC_OscConfig+0x36c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2513      	movs	r5, #19
 80016a2:	197c      	adds	r4, r7, r5
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7ff fbc9 	bl	8000e3c <HAL_InitTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80016ae:	197b      	adds	r3, r7, r5
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d060      	beq.n	8001778 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80016b6:	197b      	adds	r3, r7, r5
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	e242      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d03f      	beq.n	8001744 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80016ca:	2180      	movs	r1, #128	@ 0x80
 80016cc:	0049      	lsls	r1, r1, #1
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fbf9 	bl	8000ec8 <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016dc:	f7ff fbf4 	bl	8000ec8 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e229      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4013      	ands	r3, r2
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4a10      	ldr	r2, [pc, #64]	@ (8001740 <HAL_RCC_OscConfig+0x370>)
 8001700:	4013      	ands	r3, r2
 8001702:	0019      	movs	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800170a:	430a      	orrs	r2, r1
 800170c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800170e:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	0a19      	lsrs	r1, r3, #8
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	061a      	lsls	r2, r3, #24
 800171c:	4b01      	ldr	r3, [pc, #4]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800171e:	430a      	orrs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	e029      	b.n	8001778 <HAL_RCC_OscConfig+0x3a8>
 8001724:	40021000 	.word	0x40021000
 8001728:	fffeffff 	.word	0xfffeffff
 800172c:	fffbffff 	.word	0xfffbffff
 8001730:	ffffe0ff 	.word	0xffffe0ff
 8001734:	08003280 	.word	0x08003280
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004
 8001740:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001744:	4bbd      	ldr	r3, [pc, #756]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4bbc      	ldr	r3, [pc, #752]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 800174a:	49bd      	ldr	r1, [pc, #756]	@ (8001a40 <HAL_RCC_OscConfig+0x670>)
 800174c:	400a      	ands	r2, r1
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fbba 	bl	8000ec8 <HAL_GetTick>
 8001754:	0003      	movs	r3, r0
 8001756:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800175a:	f7ff fbb5 	bl	8000ec8 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e1ea      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800176c:	4bb3      	ldr	r3, [pc, #716]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2208      	movs	r2, #8
 800177e:	4013      	ands	r3, r2
 8001780:	d036      	beq.n	80017f0 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d019      	beq.n	80017be <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178a:	4bac      	ldr	r3, [pc, #688]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 800178c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800178e:	4bab      	ldr	r3, [pc, #684]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001790:	2101      	movs	r1, #1
 8001792:	430a      	orrs	r2, r1
 8001794:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff fb97 	bl	8000ec8 <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff fb92 	bl	8000ec8 <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e1c7      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017b2:	4ba2      	ldr	r3, [pc, #648]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80017b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017b6:	2202      	movs	r2, #2
 80017b8:	4013      	ands	r3, r2
 80017ba:	d0f1      	beq.n	80017a0 <HAL_RCC_OscConfig+0x3d0>
 80017bc:	e018      	b.n	80017f0 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017be:	4b9f      	ldr	r3, [pc, #636]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80017c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017c2:	4b9e      	ldr	r3, [pc, #632]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80017c4:	2101      	movs	r1, #1
 80017c6:	438a      	bics	r2, r1
 80017c8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fb7d 	bl	8000ec8 <HAL_GetTick>
 80017ce:	0003      	movs	r3, r0
 80017d0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fb78 	bl	8000ec8 <HAL_GetTick>
 80017d8:	0002      	movs	r2, r0
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e1ad      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017e6:	4b95      	ldr	r3, [pc, #596]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80017e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d1f1      	bne.n	80017d4 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2204      	movs	r2, #4
 80017f6:	4013      	ands	r3, r2
 80017f8:	d100      	bne.n	80017fc <HAL_RCC_OscConfig+0x42c>
 80017fa:	e0ae      	b.n	800195a <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fc:	2027      	movs	r0, #39	@ 0x27
 80017fe:	183b      	adds	r3, r7, r0
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001804:	4b8d      	ldr	r3, [pc, #564]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001806:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	055b      	lsls	r3, r3, #21
 800180c:	4013      	ands	r3, r2
 800180e:	d109      	bne.n	8001824 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001810:	4b8a      	ldr	r3, [pc, #552]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001812:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001814:	4b89      	ldr	r3, [pc, #548]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001816:	2180      	movs	r1, #128	@ 0x80
 8001818:	0549      	lsls	r1, r1, #21
 800181a:	430a      	orrs	r2, r1
 800181c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800181e:	183b      	adds	r3, r7, r0
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	4b87      	ldr	r3, [pc, #540]	@ (8001a44 <HAL_RCC_OscConfig+0x674>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	@ 0x80
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4013      	ands	r3, r2
 800182e:	d11a      	bne.n	8001866 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001830:	4b84      	ldr	r3, [pc, #528]	@ (8001a44 <HAL_RCC_OscConfig+0x674>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b83      	ldr	r3, [pc, #524]	@ (8001a44 <HAL_RCC_OscConfig+0x674>)
 8001836:	2180      	movs	r1, #128	@ 0x80
 8001838:	0049      	lsls	r1, r1, #1
 800183a:	430a      	orrs	r2, r1
 800183c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183e:	f7ff fb43 	bl	8000ec8 <HAL_GetTick>
 8001842:	0003      	movs	r3, r0
 8001844:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001848:	f7ff fb3e 	bl	8000ec8 <HAL_GetTick>
 800184c:	0002      	movs	r2, r0
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	@ 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e173      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a44 <HAL_RCC_OscConfig+0x674>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	2380      	movs	r3, #128	@ 0x80
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4013      	ands	r3, r2
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	2380      	movs	r3, #128	@ 0x80
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	429a      	cmp	r2, r3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_OscConfig+0x4b2>
 8001872:	4b72      	ldr	r3, [pc, #456]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001874:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001876:	4b71      	ldr	r3, [pc, #452]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001878:	2180      	movs	r1, #128	@ 0x80
 800187a:	0049      	lsls	r1, r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001880:	e031      	b.n	80018e6 <HAL_RCC_OscConfig+0x516>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x4d4>
 800188a:	4b6c      	ldr	r3, [pc, #432]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 800188c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800188e:	4b6b      	ldr	r3, [pc, #428]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001890:	496b      	ldr	r1, [pc, #428]	@ (8001a40 <HAL_RCC_OscConfig+0x670>)
 8001892:	400a      	ands	r2, r1
 8001894:	651a      	str	r2, [r3, #80]	@ 0x50
 8001896:	4b69      	ldr	r3, [pc, #420]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001898:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800189a:	4b68      	ldr	r3, [pc, #416]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 800189c:	496a      	ldr	r1, [pc, #424]	@ (8001a48 <HAL_RCC_OscConfig+0x678>)
 800189e:	400a      	ands	r2, r1
 80018a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80018a2:	e020      	b.n	80018e6 <HAL_RCC_OscConfig+0x516>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	23a0      	movs	r3, #160	@ 0xa0
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d10e      	bne.n	80018ce <HAL_RCC_OscConfig+0x4fe>
 80018b0:	4b62      	ldr	r3, [pc, #392]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80018b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018b4:	4b61      	ldr	r3, [pc, #388]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80018b6:	2180      	movs	r1, #128	@ 0x80
 80018b8:	00c9      	lsls	r1, r1, #3
 80018ba:	430a      	orrs	r2, r1
 80018bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80018be:	4b5f      	ldr	r3, [pc, #380]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80018c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018c2:	4b5e      	ldr	r3, [pc, #376]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80018c4:	2180      	movs	r1, #128	@ 0x80
 80018c6:	0049      	lsls	r1, r1, #1
 80018c8:	430a      	orrs	r2, r1
 80018ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80018cc:	e00b      	b.n	80018e6 <HAL_RCC_OscConfig+0x516>
 80018ce:	4b5b      	ldr	r3, [pc, #364]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80018d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018d2:	4b5a      	ldr	r3, [pc, #360]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80018d4:	495a      	ldr	r1, [pc, #360]	@ (8001a40 <HAL_RCC_OscConfig+0x670>)
 80018d6:	400a      	ands	r2, r1
 80018d8:	651a      	str	r2, [r3, #80]	@ 0x50
 80018da:	4b58      	ldr	r3, [pc, #352]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80018dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018de:	4b57      	ldr	r3, [pc, #348]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80018e0:	4959      	ldr	r1, [pc, #356]	@ (8001a48 <HAL_RCC_OscConfig+0x678>)
 80018e2:	400a      	ands	r2, r1
 80018e4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d015      	beq.n	800191a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ee:	f7ff faeb 	bl	8000ec8 <HAL_GetTick>
 80018f2:	0003      	movs	r3, r0
 80018f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018f6:	e009      	b.n	800190c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f8:	f7ff fae6 	bl	8000ec8 <HAL_GetTick>
 80018fc:	0002      	movs	r2, r0
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	4a52      	ldr	r2, [pc, #328]	@ (8001a4c <HAL_RCC_OscConfig+0x67c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e11a      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800190c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 800190e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4013      	ands	r3, r2
 8001916:	d0ef      	beq.n	80018f8 <HAL_RCC_OscConfig+0x528>
 8001918:	e014      	b.n	8001944 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff fad5 	bl	8000ec8 <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001922:	e009      	b.n	8001938 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001924:	f7ff fad0 	bl	8000ec8 <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	4a47      	ldr	r2, [pc, #284]	@ (8001a4c <HAL_RCC_OscConfig+0x67c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e104      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001938:	4b40      	ldr	r3, [pc, #256]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 800193a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800193c:	2380      	movs	r3, #128	@ 0x80
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4013      	ands	r3, r2
 8001942:	d1ef      	bne.n	8001924 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001944:	2327      	movs	r3, #39	@ 0x27
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d105      	bne.n	800195a <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001952:	4b3a      	ldr	r3, [pc, #232]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001954:	493e      	ldr	r1, [pc, #248]	@ (8001a50 <HAL_RCC_OscConfig+0x680>)
 8001956:	400a      	ands	r2, r1
 8001958:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2220      	movs	r2, #32
 8001960:	4013      	ands	r3, r2
 8001962:	d049      	beq.n	80019f8 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d026      	beq.n	80019ba <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800196c:	4b33      	ldr	r3, [pc, #204]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	4b32      	ldr	r3, [pc, #200]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001972:	2101      	movs	r1, #1
 8001974:	430a      	orrs	r2, r1
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	4b30      	ldr	r3, [pc, #192]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 800197a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800197c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 800197e:	2101      	movs	r1, #1
 8001980:	430a      	orrs	r2, r1
 8001982:	635a      	str	r2, [r3, #52]	@ 0x34
 8001984:	4b33      	ldr	r3, [pc, #204]	@ (8001a54 <HAL_RCC_OscConfig+0x684>)
 8001986:	6a1a      	ldr	r2, [r3, #32]
 8001988:	4b32      	ldr	r3, [pc, #200]	@ (8001a54 <HAL_RCC_OscConfig+0x684>)
 800198a:	2180      	movs	r1, #128	@ 0x80
 800198c:	0189      	lsls	r1, r1, #6
 800198e:	430a      	orrs	r2, r1
 8001990:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fa99 	bl	8000ec8 <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800199c:	f7ff fa94 	bl	8000ec8 <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e0c9      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019ae:	4b23      	ldr	r3, [pc, #140]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2202      	movs	r2, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	d0f1      	beq.n	800199c <HAL_RCC_OscConfig+0x5cc>
 80019b8:	e01e      	b.n	80019f8 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80019ba:	4b20      	ldr	r3, [pc, #128]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80019c0:	2101      	movs	r1, #1
 80019c2:	438a      	bics	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	4b23      	ldr	r3, [pc, #140]	@ (8001a54 <HAL_RCC_OscConfig+0x684>)
 80019c8:	6a1a      	ldr	r2, [r3, #32]
 80019ca:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <HAL_RCC_OscConfig+0x684>)
 80019cc:	4922      	ldr	r1, [pc, #136]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80019ce:	400a      	ands	r2, r1
 80019d0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff fa79 	bl	8000ec8 <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019dc:	f7ff fa74 	bl	8000ec8 <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e0a9      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019ee:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d1f1      	bne.n	80019dc <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d100      	bne.n	8001a02 <HAL_RCC_OscConfig+0x632>
 8001a00:	e09e      	b.n	8001b40 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	2b0c      	cmp	r3, #12
 8001a06:	d100      	bne.n	8001a0a <HAL_RCC_OscConfig+0x63a>
 8001a08:	e077      	b.n	8001afa <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d158      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_RCC_OscConfig+0x66c>)
 8001a18:	4910      	ldr	r1, [pc, #64]	@ (8001a5c <HAL_RCC_OscConfig+0x68c>)
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fa53 	bl	8000ec8 <HAL_GetTick>
 8001a22:	0003      	movs	r3, r0
 8001a24:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a26:	e01b      	b.n	8001a60 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff fa4e 	bl	8000ec8 <HAL_GetTick>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d914      	bls.n	8001a60 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e083      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	fffffeff 	.word	0xfffffeff
 8001a44:	40007000 	.word	0x40007000
 8001a48:	fffffbff 	.word	0xfffffbff
 8001a4c:	00001388 	.word	0x00001388
 8001a50:	efffffff 	.word	0xefffffff
 8001a54:	40010000 	.word	0x40010000
 8001a58:	ffffdfff 	.word	0xffffdfff
 8001a5c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a60:	4b3a      	ldr	r3, [pc, #232]	@ (8001b4c <HAL_RCC_OscConfig+0x77c>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	049b      	lsls	r3, r3, #18
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d1dd      	bne.n	8001a28 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a6c:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <HAL_RCC_OscConfig+0x77c>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	4a37      	ldr	r2, [pc, #220]	@ (8001b50 <HAL_RCC_OscConfig+0x780>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a84:	431a      	orrs	r2, r3
 8001a86:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <HAL_RCC_OscConfig+0x77c>)
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b4c <HAL_RCC_OscConfig+0x77c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b2e      	ldr	r3, [pc, #184]	@ (8001b4c <HAL_RCC_OscConfig+0x77c>)
 8001a92:	2180      	movs	r1, #128	@ 0x80
 8001a94:	0449      	lsls	r1, r1, #17
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fa15 	bl	8000ec8 <HAL_GetTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff fa10 	bl	8000ec8 <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e045      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ab6:	4b25      	ldr	r3, [pc, #148]	@ (8001b4c <HAL_RCC_OscConfig+0x77c>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	2380      	movs	r3, #128	@ 0x80
 8001abc:	049b      	lsls	r3, r3, #18
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x6d4>
 8001ac2:	e03d      	b.n	8001b40 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b21      	ldr	r3, [pc, #132]	@ (8001b4c <HAL_RCC_OscConfig+0x77c>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b20      	ldr	r3, [pc, #128]	@ (8001b4c <HAL_RCC_OscConfig+0x77c>)
 8001aca:	4922      	ldr	r1, [pc, #136]	@ (8001b54 <HAL_RCC_OscConfig+0x784>)
 8001acc:	400a      	ands	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f9fa 	bl	8000ec8 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff f9f5 	bl	8000ec8 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e02a      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aec:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <HAL_RCC_OscConfig+0x77c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	049b      	lsls	r3, r3, #18
 8001af4:	4013      	ands	r3, r2
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x70a>
 8001af8:	e022      	b.n	8001b40 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e01d      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_RCC_OscConfig+0x77c>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	025b      	lsls	r3, r3, #9
 8001b12:	401a      	ands	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d10f      	bne.n	8001b3c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	23f0      	movs	r3, #240	@ 0xf0
 8001b20:	039b      	lsls	r3, r3, #14
 8001b22:	401a      	ands	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d107      	bne.n	8001b3c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	23c0      	movs	r3, #192	@ 0xc0
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	401a      	ands	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	0018      	movs	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b00a      	add	sp, #40	@ 0x28
 8001b48:	bdb0      	pop	{r4, r5, r7, pc}
 8001b4a:	46c0      	nop			@ (mov r8, r8)
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	ff02ffff 	.word	0xff02ffff
 8001b54:	feffffff 	.word	0xfeffffff

08001b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e128      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b96      	ldr	r3, [pc, #600]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2201      	movs	r2, #1
 8001b72:	4013      	ands	r3, r2
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d91e      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b93      	ldr	r3, [pc, #588]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4393      	bics	r3, r2
 8001b82:	0019      	movs	r1, r3
 8001b84:	4b90      	ldr	r3, [pc, #576]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b8c:	f7ff f99c 	bl	8000ec8 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b94:	e009      	b.n	8001baa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b96:	f7ff f997 	bl	8000ec8 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4a8a      	ldr	r2, [pc, #552]	@ (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e109      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b87      	ldr	r3, [pc, #540]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d1ee      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d009      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc2:	4b83      	ldr	r3, [pc, #524]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	22f0      	movs	r2, #240	@ 0xf0
 8001bc8:	4393      	bics	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d100      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x8a>
 8001be0:	e089      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bea:	4b79      	ldr	r3, [pc, #484]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	2380      	movs	r3, #128	@ 0x80
 8001bf0:	029b      	lsls	r3, r3, #10
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d120      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0e1      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c02:	4b73      	ldr	r3, [pc, #460]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	2380      	movs	r3, #128	@ 0x80
 8001c08:	049b      	lsls	r3, r3, #18
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d114      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0d5      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d106      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c1a:	4b6d      	ldr	r3, [pc, #436]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2204      	movs	r2, #4
 8001c20:	4013      	ands	r3, r2
 8001c22:	d109      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0ca      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c28:	4b69      	ldr	r3, [pc, #420]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0c2      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c38:	4b65      	ldr	r3, [pc, #404]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	4393      	bics	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4b62      	ldr	r3, [pc, #392]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f93c 	bl	8000ec8 <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d111      	bne.n	8001c80 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c5c:	e009      	b.n	8001c72 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5e:	f7ff f933 	bl	8000ec8 <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	4a58      	ldr	r2, [pc, #352]	@ (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e0a5      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c72:	4b57      	ldr	r3, [pc, #348]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	220c      	movs	r2, #12
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d1ef      	bne.n	8001c5e <HAL_RCC_ClockConfig+0x106>
 8001c7e:	e03a      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d111      	bne.n	8001cac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c88:	e009      	b.n	8001c9e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8a:	f7ff f91d 	bl	8000ec8 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	4a4d      	ldr	r2, [pc, #308]	@ (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e08f      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d1ef      	bne.n	8001c8a <HAL_RCC_ClockConfig+0x132>
 8001caa:	e024      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d11b      	bne.n	8001cec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb4:	e009      	b.n	8001cca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb6:	f7ff f907 	bl	8000ec8 <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	4a42      	ldr	r2, [pc, #264]	@ (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e079      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cca:	4b41      	ldr	r3, [pc, #260]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	220c      	movs	r2, #12
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d1ef      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0x15e>
 8001cd6:	e00e      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd8:	f7ff f8f6 	bl	8000ec8 <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	4a3a      	ldr	r2, [pc, #232]	@ (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e068      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cec:	4b38      	ldr	r3, [pc, #224]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	220c      	movs	r2, #12
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf6:	4b34      	ldr	r3, [pc, #208]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d21e      	bcs.n	8001d42 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d04:	4b30      	ldr	r3, [pc, #192]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4393      	bics	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d16:	f7ff f8d7 	bl	8000ec8 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	e009      	b.n	8001d34 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d20:	f7ff f8d2 	bl	8000ec8 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	4a28      	ldr	r2, [pc, #160]	@ (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e044      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d34:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d1ee      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2204      	movs	r2, #4
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d009      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4a20      	ldr	r2, [pc, #128]	@ (8001dd4 <HAL_RCC_ClockConfig+0x27c>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2208      	movs	r2, #8
 8001d66:	4013      	ands	r3, r2
 8001d68:	d00a      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d6a:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd8 <HAL_RCC_ClockConfig+0x280>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	00da      	lsls	r2, r3, #3
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d80:	f000 f832 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8001d84:	0001      	movs	r1, r0
 8001d86:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <HAL_RCC_ClockConfig+0x278>)
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	4013      	ands	r3, r2
 8001d90:	4a12      	ldr	r2, [pc, #72]	@ (8001ddc <HAL_RCC_ClockConfig+0x284>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	000a      	movs	r2, r1
 8001d96:	40da      	lsrs	r2, r3
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <HAL_RCC_ClockConfig+0x288>)
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d9c:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <HAL_RCC_ClockConfig+0x28c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	250b      	movs	r5, #11
 8001da2:	197c      	adds	r4, r7, r5
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7ff f849 	bl	8000e3c <HAL_InitTick>
 8001daa:	0003      	movs	r3, r0
 8001dac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001dae:	197b      	adds	r3, r7, r5
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001db6:	197b      	adds	r3, r7, r5
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b004      	add	sp, #16
 8001dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	00001388 	.word	0x00001388
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	fffff8ff 	.word	0xfffff8ff
 8001dd8:	ffffc7ff 	.word	0xffffc7ff
 8001ddc:	08003280 	.word	0x08003280
 8001de0:	20000000 	.word	0x20000000
 8001de4:	20000004 	.word	0x20000004

08001de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b08e      	sub	sp, #56	@ 0x38
 8001dec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001dee:	4b4c      	ldr	r3, [pc, #304]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x138>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001df6:	230c      	movs	r3, #12
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d014      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x40>
 8001dfe:	d900      	bls.n	8001e02 <HAL_RCC_GetSysClockFreq+0x1a>
 8001e00:	e07b      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x112>
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x24>
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d00b      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e0a:	e076      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e0c:	4b44      	ldr	r3, [pc, #272]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2210      	movs	r2, #16
 8001e12:	4013      	ands	r3, r2
 8001e14:	d002      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e16:	4b43      	ldr	r3, [pc, #268]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e18:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e1a:	e07c      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001e1c:	4b42      	ldr	r3, [pc, #264]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e1e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001e20:	e079      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e22:	4b42      	ldr	r3, [pc, #264]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x144>)
 8001e24:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001e26:	e076      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e2a:	0c9a      	lsrs	r2, r3, #18
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	401a      	ands	r2, r3
 8001e30:	4b3f      	ldr	r3, [pc, #252]	@ (8001f30 <HAL_RCC_GetSysClockFreq+0x148>)
 8001e32:	5c9b      	ldrb	r3, [r3, r2]
 8001e34:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e38:	0d9a      	lsrs	r2, r3, #22
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	3301      	adds	r3, #1
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e42:	4b37      	ldr	r3, [pc, #220]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	2380      	movs	r3, #128	@ 0x80
 8001e48:	025b      	lsls	r3, r3, #9
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d01a      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	4a35      	ldr	r2, [pc, #212]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x144>)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	69b8      	ldr	r0, [r7, #24]
 8001e5c:	69f9      	ldr	r1, [r7, #28]
 8001e5e:	f7fe fa09 	bl	8000274 <__aeabi_lmul>
 8001e62:	0002      	movs	r2, r0
 8001e64:	000b      	movs	r3, r1
 8001e66:	0010      	movs	r0, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f7fe f9dd 	bl	8000234 <__aeabi_uldivmod>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	000b      	movs	r3, r1
 8001e7e:	0013      	movs	r3, r2
 8001e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e82:	e037      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e84:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2210      	movs	r2, #16
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d01a      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4a23      	ldr	r2, [pc, #140]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	68b8      	ldr	r0, [r7, #8]
 8001e9c:	68f9      	ldr	r1, [r7, #12]
 8001e9e:	f7fe f9e9 	bl	8000274 <__aeabi_lmul>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	000b      	movs	r3, r1
 8001ea6:	0010      	movs	r0, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f7fe f9bd 	bl	8000234 <__aeabi_uldivmod>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	000b      	movs	r3, r1
 8001ebe:	0013      	movs	r3, r2
 8001ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ec2:	e017      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	2300      	movs	r3, #0
 8001eca:	0019      	movs	r1, r3
 8001ecc:	4a16      	ldr	r2, [pc, #88]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x140>)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f7fe f9d0 	bl	8000274 <__aeabi_lmul>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	000b      	movs	r3, r1
 8001ed8:	0010      	movs	r0, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	001c      	movs	r4, r3
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	001d      	movs	r5, r3
 8001ee4:	0022      	movs	r2, r4
 8001ee6:	002b      	movs	r3, r5
 8001ee8:	f7fe f9a4 	bl	8000234 <__aeabi_uldivmod>
 8001eec:	0002      	movs	r2, r0
 8001eee:	000b      	movs	r3, r1
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ef6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ef8:	e00d      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x138>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	0b5b      	lsrs	r3, r3, #13
 8001f00:	2207      	movs	r2, #7
 8001f02:	4013      	ands	r3, r2
 8001f04:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	2280      	movs	r2, #128	@ 0x80
 8001f0c:	0212      	lsls	r2, r2, #8
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	0013      	movs	r3, r2
 8001f12:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f14:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001f18:	0018      	movs	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b00e      	add	sp, #56	@ 0x38
 8001f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f20:	40021000 	.word	0x40021000
 8001f24:	003d0900 	.word	0x003d0900
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	007a1200 	.word	0x007a1200
 8001f30:	08003290 	.word	0x08003290

08001f34 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f3c:	2317      	movs	r3, #23
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d106      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	2380      	movs	r3, #128	@ 0x80
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	4013      	ands	r3, r2
 8001f58:	d100      	bne.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001f5a:	e104      	b.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5c:	4bb1      	ldr	r3, [pc, #708]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f60:	2380      	movs	r3, #128	@ 0x80
 8001f62:	055b      	lsls	r3, r3, #21
 8001f64:	4013      	ands	r3, r2
 8001f66:	d10a      	bne.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f68:	4bae      	ldr	r3, [pc, #696]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f6c:	4bad      	ldr	r3, [pc, #692]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f6e:	2180      	movs	r1, #128	@ 0x80
 8001f70:	0549      	lsls	r1, r1, #21
 8001f72:	430a      	orrs	r2, r1
 8001f74:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001f76:	2317      	movs	r3, #23
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7e:	4baa      	ldr	r3, [pc, #680]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	2380      	movs	r3, #128	@ 0x80
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4013      	ands	r3, r2
 8001f88:	d11a      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8a:	4ba7      	ldr	r3, [pc, #668]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4ba6      	ldr	r3, [pc, #664]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001f90:	2180      	movs	r1, #128	@ 0x80
 8001f92:	0049      	lsls	r1, r1, #1
 8001f94:	430a      	orrs	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f98:	f7fe ff96 	bl	8000ec8 <HAL_GetTick>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa2:	f7fe ff91 	bl	8000ec8 <HAL_GetTick>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b64      	cmp	r3, #100	@ 0x64
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e133      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb4:	4b9c      	ldr	r3, [pc, #624]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	2380      	movs	r3, #128	@ 0x80
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001fc0:	4b98      	ldr	r3, [pc, #608]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	23c0      	movs	r3, #192	@ 0xc0
 8001fc6:	039b      	lsls	r3, r3, #14
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	23c0      	movs	r3, #192	@ 0xc0
 8001fd2:	039b      	lsls	r3, r3, #14
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d107      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	23c0      	movs	r3, #192	@ 0xc0
 8001fe2:	039b      	lsls	r3, r3, #14
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d013      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	23c0      	movs	r3, #192	@ 0xc0
 8001ff2:	029b      	lsls	r3, r3, #10
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	23c0      	movs	r3, #192	@ 0xc0
 8001ff8:	029b      	lsls	r3, r3, #10
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d10a      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001ffe:	4b89      	ldr	r3, [pc, #548]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	@ 0x80
 8002004:	029b      	lsls	r3, r3, #10
 8002006:	401a      	ands	r2, r3
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	029b      	lsls	r3, r3, #10
 800200c:	429a      	cmp	r2, r3
 800200e:	d101      	bne.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e103      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002014:	4b83      	ldr	r3, [pc, #524]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002016:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002018:	23c0      	movs	r3, #192	@ 0xc0
 800201a:	029b      	lsls	r3, r3, #10
 800201c:	4013      	ands	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d049      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	23c0      	movs	r3, #192	@ 0xc0
 800202c:	029b      	lsls	r3, r3, #10
 800202e:	4013      	ands	r3, r2
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	429a      	cmp	r2, r3
 8002034:	d004      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2220      	movs	r2, #32
 800203c:	4013      	ands	r3, r2
 800203e:	d10d      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	23c0      	movs	r3, #192	@ 0xc0
 8002046:	029b      	lsls	r3, r3, #10
 8002048:	4013      	ands	r3, r2
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d034      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2380      	movs	r3, #128	@ 0x80
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	4013      	ands	r3, r2
 800205a:	d02e      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800205c:	4b71      	ldr	r3, [pc, #452]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800205e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002060:	4a72      	ldr	r2, [pc, #456]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002062:	4013      	ands	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002066:	4b6f      	ldr	r3, [pc, #444]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002068:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800206a:	4b6e      	ldr	r3, [pc, #440]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800206c:	2180      	movs	r1, #128	@ 0x80
 800206e:	0309      	lsls	r1, r1, #12
 8002070:	430a      	orrs	r2, r1
 8002072:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002074:	4b6b      	ldr	r3, [pc, #428]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002076:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002078:	4b6a      	ldr	r3, [pc, #424]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800207a:	496d      	ldr	r1, [pc, #436]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800207c:	400a      	ands	r2, r1
 800207e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002080:	4b68      	ldr	r3, [pc, #416]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4013      	ands	r3, r2
 800208e:	d014      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7fe ff1a 	bl	8000ec8 <HAL_GetTick>
 8002094:	0003      	movs	r3, r0
 8002096:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002098:	e009      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7fe ff15 	bl	8000ec8 <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	4a63      	ldr	r2, [pc, #396]	@ (8002234 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e0b6      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4013      	ands	r3, r2
 80020b8:	d0ef      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	2380      	movs	r3, #128	@ 0x80
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4013      	ands	r3, r2
 80020c4:	d01f      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	23c0      	movs	r3, #192	@ 0xc0
 80020cc:	029b      	lsls	r3, r3, #10
 80020ce:	401a      	ands	r2, r3
 80020d0:	23c0      	movs	r3, #192	@ 0xc0
 80020d2:	029b      	lsls	r3, r3, #10
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d10c      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80020d8:	4b52      	ldr	r3, [pc, #328]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a56      	ldr	r2, [pc, #344]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020de:	4013      	ands	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	23c0      	movs	r3, #192	@ 0xc0
 80020e8:	039b      	lsls	r3, r3, #14
 80020ea:	401a      	ands	r2, r3
 80020ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80020f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	23c0      	movs	r3, #192	@ 0xc0
 80020fc:	029b      	lsls	r3, r3, #10
 80020fe:	401a      	ands	r2, r3
 8002100:	4b48      	ldr	r3, [pc, #288]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002102:	430a      	orrs	r2, r1
 8002104:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2220      	movs	r2, #32
 800210c:	4013      	ands	r3, r2
 800210e:	d01f      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	23c0      	movs	r3, #192	@ 0xc0
 8002116:	029b      	lsls	r3, r3, #10
 8002118:	401a      	ands	r2, r3
 800211a:	23c0      	movs	r3, #192	@ 0xc0
 800211c:	029b      	lsls	r3, r3, #10
 800211e:	429a      	cmp	r2, r3
 8002120:	d10c      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002122:	4b40      	ldr	r3, [pc, #256]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a44      	ldr	r2, [pc, #272]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002128:	4013      	ands	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	23c0      	movs	r3, #192	@ 0xc0
 8002132:	039b      	lsls	r3, r3, #14
 8002134:	401a      	ands	r2, r3
 8002136:	4b3b      	ldr	r3, [pc, #236]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	4b39      	ldr	r3, [pc, #228]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800213e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	23c0      	movs	r3, #192	@ 0xc0
 8002146:	029b      	lsls	r3, r3, #10
 8002148:	401a      	ands	r2, r3
 800214a:	4b36      	ldr	r3, [pc, #216]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800214c:	430a      	orrs	r2, r1
 800214e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002150:	2317      	movs	r3, #23
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d105      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215a:	4b32      	ldr	r3, [pc, #200]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800215c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800215e:	4b31      	ldr	r3, [pc, #196]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002160:	4936      	ldr	r1, [pc, #216]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002162:	400a      	ands	r2, r1
 8002164:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2201      	movs	r2, #1
 800216c:	4013      	ands	r3, r2
 800216e:	d009      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002170:	4b2c      	ldr	r3, [pc, #176]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002174:	2203      	movs	r2, #3
 8002176:	4393      	bics	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	4b29      	ldr	r3, [pc, #164]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002180:	430a      	orrs	r2, r1
 8002182:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2202      	movs	r2, #2
 800218a:	4013      	ands	r3, r2
 800218c:	d009      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800218e:	4b25      	ldr	r3, [pc, #148]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002192:	220c      	movs	r2, #12
 8002194:	4393      	bics	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	4b21      	ldr	r3, [pc, #132]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800219e:	430a      	orrs	r2, r1
 80021a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2204      	movs	r2, #4
 80021a8:	4013      	ands	r3, r2
 80021aa:	d009      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b0:	4a23      	ldr	r2, [pc, #140]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	0019      	movs	r1, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021bc:	430a      	orrs	r2, r1
 80021be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2208      	movs	r2, #8
 80021c6:	4013      	ands	r3, r2
 80021c8:	d009      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ca:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	0019      	movs	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699a      	ldr	r2, [r3, #24]
 80021d8:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2240      	movs	r2, #64	@ 0x40
 80021e4:	4013      	ands	r3, r2
 80021e6:	d009      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ec:	4a16      	ldr	r2, [pc, #88]	@ (8002248 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	0019      	movs	r1, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1a      	ldr	r2, [r3, #32]
 80021f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021f8:	430a      	orrs	r2, r1
 80021fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2280      	movs	r2, #128	@ 0x80
 8002202:	4013      	ands	r3, r2
 8002204:	d009      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002206:	4b07      	ldr	r3, [pc, #28]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220a:	4a10      	ldr	r2, [pc, #64]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800220c:	4013      	ands	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69da      	ldr	r2, [r3, #28]
 8002214:	4b03      	ldr	r3, [pc, #12]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002216:	430a      	orrs	r2, r1
 8002218:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	b006      	add	sp, #24
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	40007000 	.word	0x40007000
 800222c:	fffcffff 	.word	0xfffcffff
 8002230:	fff7ffff 	.word	0xfff7ffff
 8002234:	00001388 	.word	0x00001388
 8002238:	ffcfffff 	.word	0xffcfffff
 800223c:	efffffff 	.word	0xefffffff
 8002240:	fffff3ff 	.word	0xfffff3ff
 8002244:	ffffcfff 	.word	0xffffcfff
 8002248:	fbffffff 	.word	0xfbffffff
 800224c:	fff3ffff 	.word	0xfff3ffff

08002250 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002258:	230f      	movs	r3, #15
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e088      	b.n	800237c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2221      	movs	r2, #33	@ 0x21
 800226e:	5c9b      	ldrb	r3, [r3, r2]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d107      	bne.n	8002286 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2220      	movs	r2, #32
 800227a:	2100      	movs	r1, #0
 800227c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0018      	movs	r0, r3
 8002282:	f7fe fd23 	bl	8000ccc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2221      	movs	r2, #33	@ 0x21
 800228a:	2102      	movs	r1, #2
 800228c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2210      	movs	r2, #16
 8002296:	4013      	ands	r3, r2
 8002298:	2b10      	cmp	r3, #16
 800229a:	d05f      	beq.n	800235c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	22ca      	movs	r2, #202	@ 0xca
 80022a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2253      	movs	r2, #83	@ 0x53
 80022aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80022ac:	250f      	movs	r5, #15
 80022ae:	197c      	adds	r4, r7, r5
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 fa7c 	bl	80027b0 <RTC_EnterInitMode>
 80022b8:	0003      	movs	r3, r0
 80022ba:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80022bc:	0028      	movs	r0, r5
 80022be:	183b      	adds	r3, r7, r0
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d12c      	bne.n	8002320 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	492c      	ldr	r1, [pc, #176]	@ (8002384 <HAL_RTC_Init+0x134>)
 80022d2:	400a      	ands	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6899      	ldr	r1, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	68d2      	ldr	r2, [r2, #12]
 80022fc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6919      	ldr	r1, [r3, #16]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	041a      	lsls	r2, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002312:	183c      	adds	r4, r7, r0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	0018      	movs	r0, r3
 8002318:	f000 fa8e 	bl	8002838 <RTC_ExitInitMode>
 800231c:	0003      	movs	r3, r0
 800231e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002320:	230f      	movs	r3, #15
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d113      	bne.n	8002352 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2103      	movs	r1, #3
 8002336:	438a      	bics	r2, r1
 8002338:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	22ff      	movs	r2, #255	@ 0xff
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24
 800235a:	e003      	b.n	8002364 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800235c:	230f      	movs	r3, #15
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002364:	230f      	movs	r3, #15
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d103      	bne.n	8002376 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2221      	movs	r2, #33	@ 0x21
 8002372:	2101      	movs	r1, #1
 8002374:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002376:	230f      	movs	r3, #15
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	781b      	ldrb	r3, [r3, #0]
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	b004      	add	sp, #16
 8002382:	bdb0      	pop	{r4, r5, r7, pc}
 8002384:	ff8fffbf 	.word	0xff8fffbf

08002388 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002388:	b5b0      	push	{r4, r5, r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2220      	movs	r2, #32
 800239c:	5c9b      	ldrb	r3, [r3, r2]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_RTC_SetTime+0x1e>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e092      	b.n	80024cc <HAL_RTC_SetTime+0x144>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2220      	movs	r2, #32
 80023aa:	2101      	movs	r1, #1
 80023ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2221      	movs	r2, #33	@ 0x21
 80023b2:	2102      	movs	r1, #2
 80023b4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d125      	bne.n	8002408 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2240      	movs	r2, #64	@ 0x40
 80023c4:	4013      	ands	r3, r2
 80023c6:	d102      	bne.n	80023ce <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2200      	movs	r2, #0
 80023cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	0018      	movs	r0, r3
 80023d4:	f000 fa5a 	bl	800288c <RTC_ByteToBcd2>
 80023d8:	0003      	movs	r3, r0
 80023da:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	785b      	ldrb	r3, [r3, #1]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 fa53 	bl	800288c <RTC_ByteToBcd2>
 80023e6:	0003      	movs	r3, r0
 80023e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80023ea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	789b      	ldrb	r3, [r3, #2]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 fa4b 	bl	800288c <RTC_ByteToBcd2>
 80023f6:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80023f8:	0022      	movs	r2, r4
 80023fa:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	78db      	ldrb	r3, [r3, #3]
 8002400:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002402:	4313      	orrs	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e017      	b.n	8002438 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2240      	movs	r2, #64	@ 0x40
 8002410:	4013      	ands	r3, r2
 8002412:	d102      	bne.n	800241a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2200      	movs	r2, #0
 8002418:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002426:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800242c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	78db      	ldrb	r3, [r3, #3]
 8002432:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	22ca      	movs	r2, #202	@ 0xca
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2253      	movs	r2, #83	@ 0x53
 8002446:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002448:	2513      	movs	r5, #19
 800244a:	197c      	adds	r4, r7, r5
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	0018      	movs	r0, r3
 8002450:	f000 f9ae 	bl	80027b0 <RTC_EnterInitMode>
 8002454:	0003      	movs	r3, r0
 8002456:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002458:	0028      	movs	r0, r5
 800245a:	183b      	adds	r3, r7, r0
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d120      	bne.n	80024a4 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	491a      	ldr	r1, [pc, #104]	@ (80024d4 <HAL_RTC_SetTime+0x14c>)
 800246a:	400a      	ands	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4917      	ldr	r1, [pc, #92]	@ (80024d8 <HAL_RTC_SetTime+0x150>)
 800247a:	400a      	ands	r2, r1
 800247c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6899      	ldr	r1, [r3, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	431a      	orrs	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002496:	183c      	adds	r4, r7, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	0018      	movs	r0, r3
 800249c:	f000 f9cc 	bl	8002838 <RTC_ExitInitMode>
 80024a0:	0003      	movs	r3, r0
 80024a2:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80024a4:	2313      	movs	r3, #19
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2221      	movs	r2, #33	@ 0x21
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	22ff      	movs	r2, #255	@ 0xff
 80024bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	2100      	movs	r1, #0
 80024c4:	5499      	strb	r1, [r3, r2]

  return status;
 80024c6:	2313      	movs	r3, #19
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	781b      	ldrb	r3, [r3, #0]
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b006      	add	sp, #24
 80024d2:	bdb0      	pop	{r4, r5, r7, pc}
 80024d4:	007f7f7f 	.word	0x007f7f7f
 80024d8:	fffbffff 	.word	0xfffbffff

080024dc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	045b      	lsls	r3, r3, #17
 80024fe:	0c5a      	lsrs	r2, r3, #17
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a22      	ldr	r2, [pc, #136]	@ (8002594 <HAL_RTC_GetTime+0xb8>)
 800250c:	4013      	ands	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	0c1b      	lsrs	r3, r3, #16
 8002514:	b2db      	uxtb	r3, r3
 8002516:	223f      	movs	r2, #63	@ 0x3f
 8002518:	4013      	ands	r3, r2
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	b2db      	uxtb	r3, r3
 8002526:	227f      	movs	r2, #127	@ 0x7f
 8002528:	4013      	ands	r3, r2
 800252a:	b2da      	uxtb	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	227f      	movs	r2, #127	@ 0x7f
 8002536:	4013      	ands	r3, r2
 8002538:	b2da      	uxtb	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	0d9b      	lsrs	r3, r3, #22
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2201      	movs	r2, #1
 8002546:	4013      	ands	r3, r2
 8002548:	b2da      	uxtb	r2, r3
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d11a      	bne.n	800258a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f9b8 	bl	80028ce <RTC_Bcd2ToByte>
 800255e:	0003      	movs	r3, r0
 8002560:	001a      	movs	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	785b      	ldrb	r3, [r3, #1]
 800256a:	0018      	movs	r0, r3
 800256c:	f000 f9af 	bl	80028ce <RTC_Bcd2ToByte>
 8002570:	0003      	movs	r3, r0
 8002572:	001a      	movs	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	789b      	ldrb	r3, [r3, #2]
 800257c:	0018      	movs	r0, r3
 800257e:	f000 f9a6 	bl	80028ce <RTC_Bcd2ToByte>
 8002582:	0003      	movs	r3, r0
 8002584:	001a      	movs	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	0018      	movs	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	b006      	add	sp, #24
 8002592:	bd80      	pop	{r7, pc}
 8002594:	007f7f7f 	.word	0x007f7f7f

08002598 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002598:	b5b0      	push	{r4, r5, r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2220      	movs	r2, #32
 80025ac:	5c9b      	ldrb	r3, [r3, r2]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_RTC_SetDate+0x1e>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e07e      	b.n	80026b4 <HAL_RTC_SetDate+0x11c>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	2101      	movs	r1, #1
 80025bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2221      	movs	r2, #33	@ 0x21
 80025c2:	2102      	movs	r1, #2
 80025c4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10e      	bne.n	80025ea <HAL_RTC_SetDate+0x52>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	785b      	ldrb	r3, [r3, #1]
 80025d0:	001a      	movs	r2, r3
 80025d2:	2310      	movs	r3, #16
 80025d4:	4013      	ands	r3, r2
 80025d6:	d008      	beq.n	80025ea <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	785b      	ldrb	r3, [r3, #1]
 80025dc:	2210      	movs	r2, #16
 80025de:	4393      	bics	r3, r2
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	330a      	adds	r3, #10
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d11c      	bne.n	800262a <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	78db      	ldrb	r3, [r3, #3]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f000 f949 	bl	800288c <RTC_ByteToBcd2>
 80025fa:	0003      	movs	r3, r0
 80025fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	785b      	ldrb	r3, [r3, #1]
 8002602:	0018      	movs	r0, r3
 8002604:	f000 f942 	bl	800288c <RTC_ByteToBcd2>
 8002608:	0003      	movs	r3, r0
 800260a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800260c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	789b      	ldrb	r3, [r3, #2]
 8002612:	0018      	movs	r0, r3
 8002614:	f000 f93a 	bl	800288c <RTC_ByteToBcd2>
 8002618:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800261a:	0022      	movs	r2, r4
 800261c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	e00e      	b.n	8002648 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	78db      	ldrb	r3, [r3, #3]
 800262e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002636:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800263c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	22ca      	movs	r2, #202	@ 0xca
 800264e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2253      	movs	r2, #83	@ 0x53
 8002656:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002658:	2513      	movs	r5, #19
 800265a:	197c      	adds	r4, r7, r5
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	0018      	movs	r0, r3
 8002660:	f000 f8a6 	bl	80027b0 <RTC_EnterInitMode>
 8002664:	0003      	movs	r3, r0
 8002666:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002668:	0028      	movs	r0, r5
 800266a:	183b      	adds	r3, r7, r0
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10c      	bne.n	800268c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	4910      	ldr	r1, [pc, #64]	@ (80026bc <HAL_RTC_SetDate+0x124>)
 800267a:	400a      	ands	r2, r1
 800267c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800267e:	183c      	adds	r4, r7, r0
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	0018      	movs	r0, r3
 8002684:	f000 f8d8 	bl	8002838 <RTC_ExitInitMode>
 8002688:	0003      	movs	r3, r0
 800268a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800268c:	2313      	movs	r3, #19
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d103      	bne.n	800269e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2221      	movs	r2, #33	@ 0x21
 800269a:	2101      	movs	r1, #1
 800269c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	22ff      	movs	r2, #255	@ 0xff
 80026a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2220      	movs	r2, #32
 80026aa:	2100      	movs	r1, #0
 80026ac:	5499      	strb	r1, [r3, r2]

  return status;
 80026ae:	2313      	movs	r3, #19
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	781b      	ldrb	r3, [r3, #0]
}
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b006      	add	sp, #24
 80026ba:	bdb0      	pop	{r4, r5, r7, pc}
 80026bc:	00ffff3f 	.word	0x00ffff3f

080026c0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4a21      	ldr	r2, [pc, #132]	@ (800275c <HAL_RTC_GetDate+0x9c>)
 80026d8:	4013      	ands	r3, r2
 80026da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	0c1b      	lsrs	r3, r3, #16
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	221f      	movs	r2, #31
 80026ee:	4013      	ands	r3, r2
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	223f      	movs	r2, #63	@ 0x3f
 80026fc:	4013      	ands	r3, r2
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	0b5b      	lsrs	r3, r3, #13
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2207      	movs	r2, #7
 800270c:	4013      	ands	r3, r2
 800270e:	b2da      	uxtb	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d11a      	bne.n	8002750 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	78db      	ldrb	r3, [r3, #3]
 800271e:	0018      	movs	r0, r3
 8002720:	f000 f8d5 	bl	80028ce <RTC_Bcd2ToByte>
 8002724:	0003      	movs	r3, r0
 8002726:	001a      	movs	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	785b      	ldrb	r3, [r3, #1]
 8002730:	0018      	movs	r0, r3
 8002732:	f000 f8cc 	bl	80028ce <RTC_Bcd2ToByte>
 8002736:	0003      	movs	r3, r0
 8002738:	001a      	movs	r2, r3
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	789b      	ldrb	r3, [r3, #2]
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f8c3 	bl	80028ce <RTC_Bcd2ToByte>
 8002748:	0003      	movs	r3, r0
 800274a:	001a      	movs	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b006      	add	sp, #24
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	00ffff3f 	.word	0x00ffff3f

08002760 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0e      	ldr	r2, [pc, #56]	@ (80027ac <HAL_RTC_WaitForSynchro+0x4c>)
 8002772:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002774:	f7fe fba8 	bl	8000ec8 <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800277c:	e00a      	b.n	8002794 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800277e:	f7fe fba3 	bl	8000ec8 <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad2      	subs	r2, r2, r3
 8002788:	23fa      	movs	r3, #250	@ 0xfa
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d901      	bls.n	8002794 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e006      	b.n	80027a2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2220      	movs	r2, #32
 800279c:	4013      	ands	r3, r2
 800279e:	d0ee      	beq.n	800277e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	0018      	movs	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b004      	add	sp, #16
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	00017f5f 	.word	0x00017f5f

080027b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	230f      	movs	r3, #15
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2240      	movs	r2, #64	@ 0x40
 80027cc:	4013      	ands	r3, r2
 80027ce:	d12c      	bne.n	800282a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2180      	movs	r1, #128	@ 0x80
 80027dc:	430a      	orrs	r2, r1
 80027de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fb72 	bl	8000ec8 <HAL_GetTick>
 80027e4:	0003      	movs	r3, r0
 80027e6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80027e8:	e014      	b.n	8002814 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80027ea:	f7fe fb6d 	bl	8000ec8 <HAL_GetTick>
 80027ee:	0002      	movs	r2, r0
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	200f      	movs	r0, #15
 80027f6:	183b      	adds	r3, r7, r0
 80027f8:	1839      	adds	r1, r7, r0
 80027fa:	7809      	ldrb	r1, [r1, #0]
 80027fc:	7019      	strb	r1, [r3, #0]
 80027fe:	23fa      	movs	r3, #250	@ 0xfa
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	429a      	cmp	r2, r3
 8002804:	d906      	bls.n	8002814 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2221      	movs	r2, #33	@ 0x21
 800280a:	2104      	movs	r1, #4
 800280c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800280e:	183b      	adds	r3, r7, r0
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2240      	movs	r2, #64	@ 0x40
 800281c:	4013      	ands	r3, r2
 800281e:	d104      	bne.n	800282a <RTC_EnterInitMode+0x7a>
 8002820:	230f      	movs	r3, #15
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d1df      	bne.n	80027ea <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800282a:	230f      	movs	r3, #15
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	781b      	ldrb	r3, [r3, #0]
}
 8002830:	0018      	movs	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	b004      	add	sp, #16
 8002836:	bd80      	pop	{r7, pc}

08002838 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002840:	240f      	movs	r4, #15
 8002842:	193b      	adds	r3, r7, r4
 8002844:	2200      	movs	r2, #0
 8002846:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2180      	movs	r1, #128	@ 0x80
 8002854:	438a      	bics	r2, r1
 8002856:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2220      	movs	r2, #32
 8002860:	4013      	ands	r3, r2
 8002862:	d10c      	bne.n	800287e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0018      	movs	r0, r3
 8002868:	f7ff ff7a 	bl	8002760 <HAL_RTC_WaitForSynchro>
 800286c:	1e03      	subs	r3, r0, #0
 800286e:	d006      	beq.n	800287e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2221      	movs	r2, #33	@ 0x21
 8002874:	2104      	movs	r1, #4
 8002876:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002878:	193b      	adds	r3, r7, r4
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800287e:	230f      	movs	r3, #15
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	781b      	ldrb	r3, [r3, #0]
}
 8002884:	0018      	movs	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	b005      	add	sp, #20
 800288a:	bd90      	pop	{r4, r7, pc}

0800288c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	0002      	movs	r2, r0
 8002894:	1dfb      	adds	r3, r7, #7
 8002896:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800289c:	e007      	b.n	80028ae <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3301      	adds	r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80028a4:	1dfb      	adds	r3, r7, #7
 80028a6:	1dfa      	adds	r2, r7, #7
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	3a0a      	subs	r2, #10
 80028ac:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80028ae:	1dfb      	adds	r3, r7, #7
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b09      	cmp	r3, #9
 80028b4:	d8f3      	bhi.n	800289e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	b2db      	uxtb	r3, r3
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b004      	add	sp, #16
 80028cc:	bd80      	pop	{r7, pc}

080028ce <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	0002      	movs	r2, r0
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80028de:	1dfb      	adds	r3, r7, #7
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	001a      	movs	r2, r3
 80028e8:	0013      	movs	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	189b      	adds	r3, r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	1dfb      	adds	r3, r7, #7
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	210f      	movs	r1, #15
 80028fc:	400b      	ands	r3, r1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	18d3      	adds	r3, r2, r3
 8002902:	b2db      	uxtb	r3, r3
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b004      	add	sp, #16
 800290a:	bd80      	pop	{r7, pc}

0800290c <siprintf>:
 800290c:	b40e      	push	{r1, r2, r3}
 800290e:	b500      	push	{lr}
 8002910:	490b      	ldr	r1, [pc, #44]	@ (8002940 <siprintf+0x34>)
 8002912:	b09c      	sub	sp, #112	@ 0x70
 8002914:	ab1d      	add	r3, sp, #116	@ 0x74
 8002916:	9002      	str	r0, [sp, #8]
 8002918:	9006      	str	r0, [sp, #24]
 800291a:	9107      	str	r1, [sp, #28]
 800291c:	9104      	str	r1, [sp, #16]
 800291e:	4809      	ldr	r0, [pc, #36]	@ (8002944 <siprintf+0x38>)
 8002920:	4909      	ldr	r1, [pc, #36]	@ (8002948 <siprintf+0x3c>)
 8002922:	cb04      	ldmia	r3!, {r2}
 8002924:	9105      	str	r1, [sp, #20]
 8002926:	6800      	ldr	r0, [r0, #0]
 8002928:	a902      	add	r1, sp, #8
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	f000 f99e 	bl	8002c6c <_svfiprintf_r>
 8002930:	2200      	movs	r2, #0
 8002932:	9b02      	ldr	r3, [sp, #8]
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	b01c      	add	sp, #112	@ 0x70
 8002938:	bc08      	pop	{r3}
 800293a:	b003      	add	sp, #12
 800293c:	4718      	bx	r3
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	7fffffff 	.word	0x7fffffff
 8002944:	2000000c 	.word	0x2000000c
 8002948:	ffff0208 	.word	0xffff0208

0800294c <memset>:
 800294c:	0003      	movs	r3, r0
 800294e:	1882      	adds	r2, r0, r2
 8002950:	4293      	cmp	r3, r2
 8002952:	d100      	bne.n	8002956 <memset+0xa>
 8002954:	4770      	bx	lr
 8002956:	7019      	strb	r1, [r3, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	e7f9      	b.n	8002950 <memset+0x4>

0800295c <__errno>:
 800295c:	4b01      	ldr	r3, [pc, #4]	@ (8002964 <__errno+0x8>)
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	4770      	bx	lr
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	2000000c 	.word	0x2000000c

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	2600      	movs	r6, #0
 800296c:	4c0c      	ldr	r4, [pc, #48]	@ (80029a0 <__libc_init_array+0x38>)
 800296e:	4d0d      	ldr	r5, [pc, #52]	@ (80029a4 <__libc_init_array+0x3c>)
 8002970:	1b64      	subs	r4, r4, r5
 8002972:	10a4      	asrs	r4, r4, #2
 8002974:	42a6      	cmp	r6, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	2600      	movs	r6, #0
 800297a:	f000 fc65 	bl	8003248 <_init>
 800297e:	4c0a      	ldr	r4, [pc, #40]	@ (80029a8 <__libc_init_array+0x40>)
 8002980:	4d0a      	ldr	r5, [pc, #40]	@ (80029ac <__libc_init_array+0x44>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	42a6      	cmp	r6, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	00b3      	lsls	r3, r6, #2
 800298e:	58eb      	ldr	r3, [r5, r3]
 8002990:	4798      	blx	r3
 8002992:	3601      	adds	r6, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	00b3      	lsls	r3, r6, #2
 8002998:	58eb      	ldr	r3, [r5, r3]
 800299a:	4798      	blx	r3
 800299c:	3601      	adds	r6, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	080032d4 	.word	0x080032d4
 80029a4:	080032d4 	.word	0x080032d4
 80029a8:	080032d8 	.word	0x080032d8
 80029ac:	080032d4 	.word	0x080032d4

080029b0 <__retarget_lock_acquire_recursive>:
 80029b0:	4770      	bx	lr

080029b2 <__retarget_lock_release_recursive>:
 80029b2:	4770      	bx	lr

080029b4 <_free_r>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	0005      	movs	r5, r0
 80029b8:	1e0c      	subs	r4, r1, #0
 80029ba:	d010      	beq.n	80029de <_free_r+0x2a>
 80029bc:	3c04      	subs	r4, #4
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	da00      	bge.n	80029c6 <_free_r+0x12>
 80029c4:	18e4      	adds	r4, r4, r3
 80029c6:	0028      	movs	r0, r5
 80029c8:	f000 f8e0 	bl	8002b8c <__malloc_lock>
 80029cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002a44 <_free_r+0x90>)
 80029ce:	6813      	ldr	r3, [r2, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <_free_r+0x2c>
 80029d4:	6063      	str	r3, [r4, #4]
 80029d6:	6014      	str	r4, [r2, #0]
 80029d8:	0028      	movs	r0, r5
 80029da:	f000 f8df 	bl	8002b9c <__malloc_unlock>
 80029de:	bd70      	pop	{r4, r5, r6, pc}
 80029e0:	42a3      	cmp	r3, r4
 80029e2:	d908      	bls.n	80029f6 <_free_r+0x42>
 80029e4:	6820      	ldr	r0, [r4, #0]
 80029e6:	1821      	adds	r1, r4, r0
 80029e8:	428b      	cmp	r3, r1
 80029ea:	d1f3      	bne.n	80029d4 <_free_r+0x20>
 80029ec:	6819      	ldr	r1, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	1809      	adds	r1, r1, r0
 80029f2:	6021      	str	r1, [r4, #0]
 80029f4:	e7ee      	b.n	80029d4 <_free_r+0x20>
 80029f6:	001a      	movs	r2, r3
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <_free_r+0x4e>
 80029fe:	42a3      	cmp	r3, r4
 8002a00:	d9f9      	bls.n	80029f6 <_free_r+0x42>
 8002a02:	6811      	ldr	r1, [r2, #0]
 8002a04:	1850      	adds	r0, r2, r1
 8002a06:	42a0      	cmp	r0, r4
 8002a08:	d10b      	bne.n	8002a22 <_free_r+0x6e>
 8002a0a:	6820      	ldr	r0, [r4, #0]
 8002a0c:	1809      	adds	r1, r1, r0
 8002a0e:	1850      	adds	r0, r2, r1
 8002a10:	6011      	str	r1, [r2, #0]
 8002a12:	4283      	cmp	r3, r0
 8002a14:	d1e0      	bne.n	80029d8 <_free_r+0x24>
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	1841      	adds	r1, r0, r1
 8002a1c:	6011      	str	r1, [r2, #0]
 8002a1e:	6053      	str	r3, [r2, #4]
 8002a20:	e7da      	b.n	80029d8 <_free_r+0x24>
 8002a22:	42a0      	cmp	r0, r4
 8002a24:	d902      	bls.n	8002a2c <_free_r+0x78>
 8002a26:	230c      	movs	r3, #12
 8002a28:	602b      	str	r3, [r5, #0]
 8002a2a:	e7d5      	b.n	80029d8 <_free_r+0x24>
 8002a2c:	6820      	ldr	r0, [r4, #0]
 8002a2e:	1821      	adds	r1, r4, r0
 8002a30:	428b      	cmp	r3, r1
 8002a32:	d103      	bne.n	8002a3c <_free_r+0x88>
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	1809      	adds	r1, r1, r0
 8002a3a:	6021      	str	r1, [r4, #0]
 8002a3c:	6063      	str	r3, [r4, #4]
 8002a3e:	6054      	str	r4, [r2, #4]
 8002a40:	e7ca      	b.n	80029d8 <_free_r+0x24>
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	20000238 	.word	0x20000238

08002a48 <sbrk_aligned>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	4e0f      	ldr	r6, [pc, #60]	@ (8002a88 <sbrk_aligned+0x40>)
 8002a4c:	000d      	movs	r5, r1
 8002a4e:	6831      	ldr	r1, [r6, #0]
 8002a50:	0004      	movs	r4, r0
 8002a52:	2900      	cmp	r1, #0
 8002a54:	d102      	bne.n	8002a5c <sbrk_aligned+0x14>
 8002a56:	f000 fb99 	bl	800318c <_sbrk_r>
 8002a5a:	6030      	str	r0, [r6, #0]
 8002a5c:	0029      	movs	r1, r5
 8002a5e:	0020      	movs	r0, r4
 8002a60:	f000 fb94 	bl	800318c <_sbrk_r>
 8002a64:	1c43      	adds	r3, r0, #1
 8002a66:	d103      	bne.n	8002a70 <sbrk_aligned+0x28>
 8002a68:	2501      	movs	r5, #1
 8002a6a:	426d      	negs	r5, r5
 8002a6c:	0028      	movs	r0, r5
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
 8002a70:	2303      	movs	r3, #3
 8002a72:	1cc5      	adds	r5, r0, #3
 8002a74:	439d      	bics	r5, r3
 8002a76:	42a8      	cmp	r0, r5
 8002a78:	d0f8      	beq.n	8002a6c <sbrk_aligned+0x24>
 8002a7a:	1a29      	subs	r1, r5, r0
 8002a7c:	0020      	movs	r0, r4
 8002a7e:	f000 fb85 	bl	800318c <_sbrk_r>
 8002a82:	3001      	adds	r0, #1
 8002a84:	d1f2      	bne.n	8002a6c <sbrk_aligned+0x24>
 8002a86:	e7ef      	b.n	8002a68 <sbrk_aligned+0x20>
 8002a88:	20000234 	.word	0x20000234

08002a8c <_malloc_r>:
 8002a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a8e:	2203      	movs	r2, #3
 8002a90:	1ccb      	adds	r3, r1, #3
 8002a92:	4393      	bics	r3, r2
 8002a94:	3308      	adds	r3, #8
 8002a96:	0005      	movs	r5, r0
 8002a98:	001f      	movs	r7, r3
 8002a9a:	2b0c      	cmp	r3, #12
 8002a9c:	d234      	bcs.n	8002b08 <_malloc_r+0x7c>
 8002a9e:	270c      	movs	r7, #12
 8002aa0:	42b9      	cmp	r1, r7
 8002aa2:	d833      	bhi.n	8002b0c <_malloc_r+0x80>
 8002aa4:	0028      	movs	r0, r5
 8002aa6:	f000 f871 	bl	8002b8c <__malloc_lock>
 8002aaa:	4e37      	ldr	r6, [pc, #220]	@ (8002b88 <_malloc_r+0xfc>)
 8002aac:	6833      	ldr	r3, [r6, #0]
 8002aae:	001c      	movs	r4, r3
 8002ab0:	2c00      	cmp	r4, #0
 8002ab2:	d12f      	bne.n	8002b14 <_malloc_r+0x88>
 8002ab4:	0039      	movs	r1, r7
 8002ab6:	0028      	movs	r0, r5
 8002ab8:	f7ff ffc6 	bl	8002a48 <sbrk_aligned>
 8002abc:	0004      	movs	r4, r0
 8002abe:	1c43      	adds	r3, r0, #1
 8002ac0:	d15f      	bne.n	8002b82 <_malloc_r+0xf6>
 8002ac2:	6834      	ldr	r4, [r6, #0]
 8002ac4:	9400      	str	r4, [sp, #0]
 8002ac6:	9b00      	ldr	r3, [sp, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d14a      	bne.n	8002b62 <_malloc_r+0xd6>
 8002acc:	2c00      	cmp	r4, #0
 8002ace:	d052      	beq.n	8002b76 <_malloc_r+0xea>
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	0028      	movs	r0, r5
 8002ad4:	18e3      	adds	r3, r4, r3
 8002ad6:	9900      	ldr	r1, [sp, #0]
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	f000 fb57 	bl	800318c <_sbrk_r>
 8002ade:	9b01      	ldr	r3, [sp, #4]
 8002ae0:	4283      	cmp	r3, r0
 8002ae2:	d148      	bne.n	8002b76 <_malloc_r+0xea>
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	0028      	movs	r0, r5
 8002ae8:	1aff      	subs	r7, r7, r3
 8002aea:	0039      	movs	r1, r7
 8002aec:	f7ff ffac 	bl	8002a48 <sbrk_aligned>
 8002af0:	3001      	adds	r0, #1
 8002af2:	d040      	beq.n	8002b76 <_malloc_r+0xea>
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	19db      	adds	r3, r3, r7
 8002af8:	6023      	str	r3, [r4, #0]
 8002afa:	6833      	ldr	r3, [r6, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	d133      	bne.n	8002b6a <_malloc_r+0xde>
 8002b02:	9b00      	ldr	r3, [sp, #0]
 8002b04:	6033      	str	r3, [r6, #0]
 8002b06:	e019      	b.n	8002b3c <_malloc_r+0xb0>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	dac9      	bge.n	8002aa0 <_malloc_r+0x14>
 8002b0c:	230c      	movs	r3, #12
 8002b0e:	602b      	str	r3, [r5, #0]
 8002b10:	2000      	movs	r0, #0
 8002b12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b14:	6821      	ldr	r1, [r4, #0]
 8002b16:	1bc9      	subs	r1, r1, r7
 8002b18:	d420      	bmi.n	8002b5c <_malloc_r+0xd0>
 8002b1a:	290b      	cmp	r1, #11
 8002b1c:	d90a      	bls.n	8002b34 <_malloc_r+0xa8>
 8002b1e:	19e2      	adds	r2, r4, r7
 8002b20:	6027      	str	r7, [r4, #0]
 8002b22:	42a3      	cmp	r3, r4
 8002b24:	d104      	bne.n	8002b30 <_malloc_r+0xa4>
 8002b26:	6032      	str	r2, [r6, #0]
 8002b28:	6863      	ldr	r3, [r4, #4]
 8002b2a:	6011      	str	r1, [r2, #0]
 8002b2c:	6053      	str	r3, [r2, #4]
 8002b2e:	e005      	b.n	8002b3c <_malloc_r+0xb0>
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	e7f9      	b.n	8002b28 <_malloc_r+0x9c>
 8002b34:	6862      	ldr	r2, [r4, #4]
 8002b36:	42a3      	cmp	r3, r4
 8002b38:	d10e      	bne.n	8002b58 <_malloc_r+0xcc>
 8002b3a:	6032      	str	r2, [r6, #0]
 8002b3c:	0028      	movs	r0, r5
 8002b3e:	f000 f82d 	bl	8002b9c <__malloc_unlock>
 8002b42:	0020      	movs	r0, r4
 8002b44:	2207      	movs	r2, #7
 8002b46:	300b      	adds	r0, #11
 8002b48:	1d23      	adds	r3, r4, #4
 8002b4a:	4390      	bics	r0, r2
 8002b4c:	1ac2      	subs	r2, r0, r3
 8002b4e:	4298      	cmp	r0, r3
 8002b50:	d0df      	beq.n	8002b12 <_malloc_r+0x86>
 8002b52:	1a1b      	subs	r3, r3, r0
 8002b54:	50a3      	str	r3, [r4, r2]
 8002b56:	e7dc      	b.n	8002b12 <_malloc_r+0x86>
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	e7ef      	b.n	8002b3c <_malloc_r+0xb0>
 8002b5c:	0023      	movs	r3, r4
 8002b5e:	6864      	ldr	r4, [r4, #4]
 8002b60:	e7a6      	b.n	8002ab0 <_malloc_r+0x24>
 8002b62:	9c00      	ldr	r4, [sp, #0]
 8002b64:	6863      	ldr	r3, [r4, #4]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	e7ad      	b.n	8002ac6 <_malloc_r+0x3a>
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	42a3      	cmp	r3, r4
 8002b70:	d1fb      	bne.n	8002b6a <_malloc_r+0xde>
 8002b72:	2300      	movs	r3, #0
 8002b74:	e7da      	b.n	8002b2c <_malloc_r+0xa0>
 8002b76:	230c      	movs	r3, #12
 8002b78:	0028      	movs	r0, r5
 8002b7a:	602b      	str	r3, [r5, #0]
 8002b7c:	f000 f80e 	bl	8002b9c <__malloc_unlock>
 8002b80:	e7c6      	b.n	8002b10 <_malloc_r+0x84>
 8002b82:	6007      	str	r7, [r0, #0]
 8002b84:	e7da      	b.n	8002b3c <_malloc_r+0xb0>
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	20000238 	.word	0x20000238

08002b8c <__malloc_lock>:
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	4802      	ldr	r0, [pc, #8]	@ (8002b98 <__malloc_lock+0xc>)
 8002b90:	f7ff ff0e 	bl	80029b0 <__retarget_lock_acquire_recursive>
 8002b94:	bd10      	pop	{r4, pc}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	20000230 	.word	0x20000230

08002b9c <__malloc_unlock>:
 8002b9c:	b510      	push	{r4, lr}
 8002b9e:	4802      	ldr	r0, [pc, #8]	@ (8002ba8 <__malloc_unlock+0xc>)
 8002ba0:	f7ff ff07 	bl	80029b2 <__retarget_lock_release_recursive>
 8002ba4:	bd10      	pop	{r4, pc}
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	20000230 	.word	0x20000230

08002bac <__ssputs_r>:
 8002bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bae:	688e      	ldr	r6, [r1, #8]
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	001f      	movs	r7, r3
 8002bb4:	000c      	movs	r4, r1
 8002bb6:	680b      	ldr	r3, [r1, #0]
 8002bb8:	9002      	str	r0, [sp, #8]
 8002bba:	9203      	str	r2, [sp, #12]
 8002bbc:	42be      	cmp	r6, r7
 8002bbe:	d830      	bhi.n	8002c22 <__ssputs_r+0x76>
 8002bc0:	210c      	movs	r1, #12
 8002bc2:	5e62      	ldrsh	r2, [r4, r1]
 8002bc4:	2190      	movs	r1, #144	@ 0x90
 8002bc6:	00c9      	lsls	r1, r1, #3
 8002bc8:	420a      	tst	r2, r1
 8002bca:	d028      	beq.n	8002c1e <__ssputs_r+0x72>
 8002bcc:	2003      	movs	r0, #3
 8002bce:	6921      	ldr	r1, [r4, #16]
 8002bd0:	1a5b      	subs	r3, r3, r1
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	6963      	ldr	r3, [r4, #20]
 8002bd6:	4343      	muls	r3, r0
 8002bd8:	9801      	ldr	r0, [sp, #4]
 8002bda:	0fdd      	lsrs	r5, r3, #31
 8002bdc:	18ed      	adds	r5, r5, r3
 8002bde:	1c7b      	adds	r3, r7, #1
 8002be0:	181b      	adds	r3, r3, r0
 8002be2:	106d      	asrs	r5, r5, #1
 8002be4:	42ab      	cmp	r3, r5
 8002be6:	d900      	bls.n	8002bea <__ssputs_r+0x3e>
 8002be8:	001d      	movs	r5, r3
 8002bea:	0552      	lsls	r2, r2, #21
 8002bec:	d528      	bpl.n	8002c40 <__ssputs_r+0x94>
 8002bee:	0029      	movs	r1, r5
 8002bf0:	9802      	ldr	r0, [sp, #8]
 8002bf2:	f7ff ff4b 	bl	8002a8c <_malloc_r>
 8002bf6:	1e06      	subs	r6, r0, #0
 8002bf8:	d02c      	beq.n	8002c54 <__ssputs_r+0xa8>
 8002bfa:	9a01      	ldr	r2, [sp, #4]
 8002bfc:	6921      	ldr	r1, [r4, #16]
 8002bfe:	f000 fae2 	bl	80031c6 <memcpy>
 8002c02:	89a2      	ldrh	r2, [r4, #12]
 8002c04:	4b18      	ldr	r3, [pc, #96]	@ (8002c68 <__ssputs_r+0xbc>)
 8002c06:	401a      	ands	r2, r3
 8002c08:	2380      	movs	r3, #128	@ 0x80
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	81a3      	strh	r3, [r4, #12]
 8002c0e:	9b01      	ldr	r3, [sp, #4]
 8002c10:	6126      	str	r6, [r4, #16]
 8002c12:	18f6      	adds	r6, r6, r3
 8002c14:	6026      	str	r6, [r4, #0]
 8002c16:	003e      	movs	r6, r7
 8002c18:	6165      	str	r5, [r4, #20]
 8002c1a:	1aed      	subs	r5, r5, r3
 8002c1c:	60a5      	str	r5, [r4, #8]
 8002c1e:	42be      	cmp	r6, r7
 8002c20:	d900      	bls.n	8002c24 <__ssputs_r+0x78>
 8002c22:	003e      	movs	r6, r7
 8002c24:	0032      	movs	r2, r6
 8002c26:	9903      	ldr	r1, [sp, #12]
 8002c28:	6820      	ldr	r0, [r4, #0]
 8002c2a:	f000 fa9b 	bl	8003164 <memmove>
 8002c2e:	2000      	movs	r0, #0
 8002c30:	68a3      	ldr	r3, [r4, #8]
 8002c32:	1b9b      	subs	r3, r3, r6
 8002c34:	60a3      	str	r3, [r4, #8]
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	199b      	adds	r3, r3, r6
 8002c3a:	6023      	str	r3, [r4, #0]
 8002c3c:	b005      	add	sp, #20
 8002c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c40:	002a      	movs	r2, r5
 8002c42:	9802      	ldr	r0, [sp, #8]
 8002c44:	f000 fac8 	bl	80031d8 <_realloc_r>
 8002c48:	1e06      	subs	r6, r0, #0
 8002c4a:	d1e0      	bne.n	8002c0e <__ssputs_r+0x62>
 8002c4c:	6921      	ldr	r1, [r4, #16]
 8002c4e:	9802      	ldr	r0, [sp, #8]
 8002c50:	f7ff feb0 	bl	80029b4 <_free_r>
 8002c54:	230c      	movs	r3, #12
 8002c56:	2001      	movs	r0, #1
 8002c58:	9a02      	ldr	r2, [sp, #8]
 8002c5a:	4240      	negs	r0, r0
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	89a2      	ldrh	r2, [r4, #12]
 8002c60:	3334      	adds	r3, #52	@ 0x34
 8002c62:	4313      	orrs	r3, r2
 8002c64:	81a3      	strh	r3, [r4, #12]
 8002c66:	e7e9      	b.n	8002c3c <__ssputs_r+0x90>
 8002c68:	fffffb7f 	.word	0xfffffb7f

08002c6c <_svfiprintf_r>:
 8002c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c6e:	b0a1      	sub	sp, #132	@ 0x84
 8002c70:	9003      	str	r0, [sp, #12]
 8002c72:	001d      	movs	r5, r3
 8002c74:	898b      	ldrh	r3, [r1, #12]
 8002c76:	000f      	movs	r7, r1
 8002c78:	0016      	movs	r6, r2
 8002c7a:	061b      	lsls	r3, r3, #24
 8002c7c:	d511      	bpl.n	8002ca2 <_svfiprintf_r+0x36>
 8002c7e:	690b      	ldr	r3, [r1, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10e      	bne.n	8002ca2 <_svfiprintf_r+0x36>
 8002c84:	2140      	movs	r1, #64	@ 0x40
 8002c86:	f7ff ff01 	bl	8002a8c <_malloc_r>
 8002c8a:	6038      	str	r0, [r7, #0]
 8002c8c:	6138      	str	r0, [r7, #16]
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d105      	bne.n	8002c9e <_svfiprintf_r+0x32>
 8002c92:	230c      	movs	r3, #12
 8002c94:	9a03      	ldr	r2, [sp, #12]
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	2001      	movs	r0, #1
 8002c9a:	4240      	negs	r0, r0
 8002c9c:	e0cf      	b.n	8002e3e <_svfiprintf_r+0x1d2>
 8002c9e:	2340      	movs	r3, #64	@ 0x40
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	ac08      	add	r4, sp, #32
 8002ca6:	6163      	str	r3, [r4, #20]
 8002ca8:	3320      	adds	r3, #32
 8002caa:	7663      	strb	r3, [r4, #25]
 8002cac:	3310      	adds	r3, #16
 8002cae:	76a3      	strb	r3, [r4, #26]
 8002cb0:	9507      	str	r5, [sp, #28]
 8002cb2:	0035      	movs	r5, r6
 8002cb4:	782b      	ldrb	r3, [r5, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <_svfiprintf_r+0x52>
 8002cba:	2b25      	cmp	r3, #37	@ 0x25
 8002cbc:	d148      	bne.n	8002d50 <_svfiprintf_r+0xe4>
 8002cbe:	1bab      	subs	r3, r5, r6
 8002cc0:	9305      	str	r3, [sp, #20]
 8002cc2:	42b5      	cmp	r5, r6
 8002cc4:	d00b      	beq.n	8002cde <_svfiprintf_r+0x72>
 8002cc6:	0032      	movs	r2, r6
 8002cc8:	0039      	movs	r1, r7
 8002cca:	9803      	ldr	r0, [sp, #12]
 8002ccc:	f7ff ff6e 	bl	8002bac <__ssputs_r>
 8002cd0:	3001      	adds	r0, #1
 8002cd2:	d100      	bne.n	8002cd6 <_svfiprintf_r+0x6a>
 8002cd4:	e0ae      	b.n	8002e34 <_svfiprintf_r+0x1c8>
 8002cd6:	6963      	ldr	r3, [r4, #20]
 8002cd8:	9a05      	ldr	r2, [sp, #20]
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	6163      	str	r3, [r4, #20]
 8002cde:	782b      	ldrb	r3, [r5, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d100      	bne.n	8002ce6 <_svfiprintf_r+0x7a>
 8002ce4:	e0a6      	b.n	8002e34 <_svfiprintf_r+0x1c8>
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	2300      	movs	r3, #0
 8002cea:	4252      	negs	r2, r2
 8002cec:	6062      	str	r2, [r4, #4]
 8002cee:	a904      	add	r1, sp, #16
 8002cf0:	3254      	adds	r2, #84	@ 0x54
 8002cf2:	1852      	adds	r2, r2, r1
 8002cf4:	1c6e      	adds	r6, r5, #1
 8002cf6:	6023      	str	r3, [r4, #0]
 8002cf8:	60e3      	str	r3, [r4, #12]
 8002cfa:	60a3      	str	r3, [r4, #8]
 8002cfc:	7013      	strb	r3, [r2, #0]
 8002cfe:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002d00:	4b54      	ldr	r3, [pc, #336]	@ (8002e54 <_svfiprintf_r+0x1e8>)
 8002d02:	2205      	movs	r2, #5
 8002d04:	0018      	movs	r0, r3
 8002d06:	7831      	ldrb	r1, [r6, #0]
 8002d08:	9305      	str	r3, [sp, #20]
 8002d0a:	f000 fa51 	bl	80031b0 <memchr>
 8002d0e:	1c75      	adds	r5, r6, #1
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d11f      	bne.n	8002d54 <_svfiprintf_r+0xe8>
 8002d14:	6822      	ldr	r2, [r4, #0]
 8002d16:	06d3      	lsls	r3, r2, #27
 8002d18:	d504      	bpl.n	8002d24 <_svfiprintf_r+0xb8>
 8002d1a:	2353      	movs	r3, #83	@ 0x53
 8002d1c:	a904      	add	r1, sp, #16
 8002d1e:	185b      	adds	r3, r3, r1
 8002d20:	2120      	movs	r1, #32
 8002d22:	7019      	strb	r1, [r3, #0]
 8002d24:	0713      	lsls	r3, r2, #28
 8002d26:	d504      	bpl.n	8002d32 <_svfiprintf_r+0xc6>
 8002d28:	2353      	movs	r3, #83	@ 0x53
 8002d2a:	a904      	add	r1, sp, #16
 8002d2c:	185b      	adds	r3, r3, r1
 8002d2e:	212b      	movs	r1, #43	@ 0x2b
 8002d30:	7019      	strb	r1, [r3, #0]
 8002d32:	7833      	ldrb	r3, [r6, #0]
 8002d34:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d36:	d016      	beq.n	8002d66 <_svfiprintf_r+0xfa>
 8002d38:	0035      	movs	r5, r6
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	200a      	movs	r0, #10
 8002d3e:	68e3      	ldr	r3, [r4, #12]
 8002d40:	782a      	ldrb	r2, [r5, #0]
 8002d42:	1c6e      	adds	r6, r5, #1
 8002d44:	3a30      	subs	r2, #48	@ 0x30
 8002d46:	2a09      	cmp	r2, #9
 8002d48:	d950      	bls.n	8002dec <_svfiprintf_r+0x180>
 8002d4a:	2900      	cmp	r1, #0
 8002d4c:	d111      	bne.n	8002d72 <_svfiprintf_r+0x106>
 8002d4e:	e017      	b.n	8002d80 <_svfiprintf_r+0x114>
 8002d50:	3501      	adds	r5, #1
 8002d52:	e7af      	b.n	8002cb4 <_svfiprintf_r+0x48>
 8002d54:	9b05      	ldr	r3, [sp, #20]
 8002d56:	6822      	ldr	r2, [r4, #0]
 8002d58:	1ac0      	subs	r0, r0, r3
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	4083      	lsls	r3, r0
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	002e      	movs	r6, r5
 8002d62:	6023      	str	r3, [r4, #0]
 8002d64:	e7cc      	b.n	8002d00 <_svfiprintf_r+0x94>
 8002d66:	9b07      	ldr	r3, [sp, #28]
 8002d68:	1d19      	adds	r1, r3, #4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	9107      	str	r1, [sp, #28]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db01      	blt.n	8002d76 <_svfiprintf_r+0x10a>
 8002d72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002d74:	e004      	b.n	8002d80 <_svfiprintf_r+0x114>
 8002d76:	425b      	negs	r3, r3
 8002d78:	60e3      	str	r3, [r4, #12]
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	6023      	str	r3, [r4, #0]
 8002d80:	782b      	ldrb	r3, [r5, #0]
 8002d82:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d84:	d10c      	bne.n	8002da0 <_svfiprintf_r+0x134>
 8002d86:	786b      	ldrb	r3, [r5, #1]
 8002d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d8a:	d134      	bne.n	8002df6 <_svfiprintf_r+0x18a>
 8002d8c:	9b07      	ldr	r3, [sp, #28]
 8002d8e:	3502      	adds	r5, #2
 8002d90:	1d1a      	adds	r2, r3, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	9207      	str	r2, [sp, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da01      	bge.n	8002d9e <_svfiprintf_r+0x132>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	425b      	negs	r3, r3
 8002d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002da0:	4e2d      	ldr	r6, [pc, #180]	@ (8002e58 <_svfiprintf_r+0x1ec>)
 8002da2:	2203      	movs	r2, #3
 8002da4:	0030      	movs	r0, r6
 8002da6:	7829      	ldrb	r1, [r5, #0]
 8002da8:	f000 fa02 	bl	80031b0 <memchr>
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d006      	beq.n	8002dbe <_svfiprintf_r+0x152>
 8002db0:	2340      	movs	r3, #64	@ 0x40
 8002db2:	1b80      	subs	r0, r0, r6
 8002db4:	4083      	lsls	r3, r0
 8002db6:	6822      	ldr	r2, [r4, #0]
 8002db8:	3501      	adds	r5, #1
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	6023      	str	r3, [r4, #0]
 8002dbe:	7829      	ldrb	r1, [r5, #0]
 8002dc0:	2206      	movs	r2, #6
 8002dc2:	4826      	ldr	r0, [pc, #152]	@ (8002e5c <_svfiprintf_r+0x1f0>)
 8002dc4:	1c6e      	adds	r6, r5, #1
 8002dc6:	7621      	strb	r1, [r4, #24]
 8002dc8:	f000 f9f2 	bl	80031b0 <memchr>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d038      	beq.n	8002e42 <_svfiprintf_r+0x1d6>
 8002dd0:	4b23      	ldr	r3, [pc, #140]	@ (8002e60 <_svfiprintf_r+0x1f4>)
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d122      	bne.n	8002e1c <_svfiprintf_r+0x1b0>
 8002dd6:	2207      	movs	r2, #7
 8002dd8:	9b07      	ldr	r3, [sp, #28]
 8002dda:	3307      	adds	r3, #7
 8002ddc:	4393      	bics	r3, r2
 8002dde:	3308      	adds	r3, #8
 8002de0:	9307      	str	r3, [sp, #28]
 8002de2:	6963      	ldr	r3, [r4, #20]
 8002de4:	9a04      	ldr	r2, [sp, #16]
 8002de6:	189b      	adds	r3, r3, r2
 8002de8:	6163      	str	r3, [r4, #20]
 8002dea:	e762      	b.n	8002cb2 <_svfiprintf_r+0x46>
 8002dec:	4343      	muls	r3, r0
 8002dee:	0035      	movs	r5, r6
 8002df0:	2101      	movs	r1, #1
 8002df2:	189b      	adds	r3, r3, r2
 8002df4:	e7a4      	b.n	8002d40 <_svfiprintf_r+0xd4>
 8002df6:	2300      	movs	r3, #0
 8002df8:	200a      	movs	r0, #10
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	3501      	adds	r5, #1
 8002dfe:	6063      	str	r3, [r4, #4]
 8002e00:	782a      	ldrb	r2, [r5, #0]
 8002e02:	1c6e      	adds	r6, r5, #1
 8002e04:	3a30      	subs	r2, #48	@ 0x30
 8002e06:	2a09      	cmp	r2, #9
 8002e08:	d903      	bls.n	8002e12 <_svfiprintf_r+0x1a6>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0c8      	beq.n	8002da0 <_svfiprintf_r+0x134>
 8002e0e:	9109      	str	r1, [sp, #36]	@ 0x24
 8002e10:	e7c6      	b.n	8002da0 <_svfiprintf_r+0x134>
 8002e12:	4341      	muls	r1, r0
 8002e14:	0035      	movs	r5, r6
 8002e16:	2301      	movs	r3, #1
 8002e18:	1889      	adds	r1, r1, r2
 8002e1a:	e7f1      	b.n	8002e00 <_svfiprintf_r+0x194>
 8002e1c:	aa07      	add	r2, sp, #28
 8002e1e:	9200      	str	r2, [sp, #0]
 8002e20:	0021      	movs	r1, r4
 8002e22:	003a      	movs	r2, r7
 8002e24:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <_svfiprintf_r+0x1f8>)
 8002e26:	9803      	ldr	r0, [sp, #12]
 8002e28:	e000      	b.n	8002e2c <_svfiprintf_r+0x1c0>
 8002e2a:	bf00      	nop
 8002e2c:	9004      	str	r0, [sp, #16]
 8002e2e:	9b04      	ldr	r3, [sp, #16]
 8002e30:	3301      	adds	r3, #1
 8002e32:	d1d6      	bne.n	8002de2 <_svfiprintf_r+0x176>
 8002e34:	89bb      	ldrh	r3, [r7, #12]
 8002e36:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002e38:	065b      	lsls	r3, r3, #25
 8002e3a:	d500      	bpl.n	8002e3e <_svfiprintf_r+0x1d2>
 8002e3c:	e72c      	b.n	8002c98 <_svfiprintf_r+0x2c>
 8002e3e:	b021      	add	sp, #132	@ 0x84
 8002e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e42:	aa07      	add	r2, sp, #28
 8002e44:	9200      	str	r2, [sp, #0]
 8002e46:	0021      	movs	r1, r4
 8002e48:	003a      	movs	r2, r7
 8002e4a:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <_svfiprintf_r+0x1f8>)
 8002e4c:	9803      	ldr	r0, [sp, #12]
 8002e4e:	f000 f87b 	bl	8002f48 <_printf_i>
 8002e52:	e7eb      	b.n	8002e2c <_svfiprintf_r+0x1c0>
 8002e54:	08003299 	.word	0x08003299
 8002e58:	0800329f 	.word	0x0800329f
 8002e5c:	080032a3 	.word	0x080032a3
 8002e60:	00000000 	.word	0x00000000
 8002e64:	08002bad 	.word	0x08002bad

08002e68 <_printf_common>:
 8002e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e6a:	0016      	movs	r6, r2
 8002e6c:	9301      	str	r3, [sp, #4]
 8002e6e:	688a      	ldr	r2, [r1, #8]
 8002e70:	690b      	ldr	r3, [r1, #16]
 8002e72:	000c      	movs	r4, r1
 8002e74:	9000      	str	r0, [sp, #0]
 8002e76:	4293      	cmp	r3, r2
 8002e78:	da00      	bge.n	8002e7c <_printf_common+0x14>
 8002e7a:	0013      	movs	r3, r2
 8002e7c:	0022      	movs	r2, r4
 8002e7e:	6033      	str	r3, [r6, #0]
 8002e80:	3243      	adds	r2, #67	@ 0x43
 8002e82:	7812      	ldrb	r2, [r2, #0]
 8002e84:	2a00      	cmp	r2, #0
 8002e86:	d001      	beq.n	8002e8c <_printf_common+0x24>
 8002e88:	3301      	adds	r3, #1
 8002e8a:	6033      	str	r3, [r6, #0]
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	069b      	lsls	r3, r3, #26
 8002e90:	d502      	bpl.n	8002e98 <_printf_common+0x30>
 8002e92:	6833      	ldr	r3, [r6, #0]
 8002e94:	3302      	adds	r3, #2
 8002e96:	6033      	str	r3, [r6, #0]
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	2306      	movs	r3, #6
 8002e9c:	0015      	movs	r5, r2
 8002e9e:	401d      	ands	r5, r3
 8002ea0:	421a      	tst	r2, r3
 8002ea2:	d027      	beq.n	8002ef4 <_printf_common+0x8c>
 8002ea4:	0023      	movs	r3, r4
 8002ea6:	3343      	adds	r3, #67	@ 0x43
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	1e5a      	subs	r2, r3, #1
 8002eac:	4193      	sbcs	r3, r2
 8002eae:	6822      	ldr	r2, [r4, #0]
 8002eb0:	0692      	lsls	r2, r2, #26
 8002eb2:	d430      	bmi.n	8002f16 <_printf_common+0xae>
 8002eb4:	0022      	movs	r2, r4
 8002eb6:	9901      	ldr	r1, [sp, #4]
 8002eb8:	9800      	ldr	r0, [sp, #0]
 8002eba:	9d08      	ldr	r5, [sp, #32]
 8002ebc:	3243      	adds	r2, #67	@ 0x43
 8002ebe:	47a8      	blx	r5
 8002ec0:	3001      	adds	r0, #1
 8002ec2:	d025      	beq.n	8002f10 <_printf_common+0xa8>
 8002ec4:	2206      	movs	r2, #6
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	2500      	movs	r5, #0
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d105      	bne.n	8002edc <_printf_common+0x74>
 8002ed0:	6833      	ldr	r3, [r6, #0]
 8002ed2:	68e5      	ldr	r5, [r4, #12]
 8002ed4:	1aed      	subs	r5, r5, r3
 8002ed6:	43eb      	mvns	r3, r5
 8002ed8:	17db      	asrs	r3, r3, #31
 8002eda:	401d      	ands	r5, r3
 8002edc:	68a3      	ldr	r3, [r4, #8]
 8002ede:	6922      	ldr	r2, [r4, #16]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	dd01      	ble.n	8002ee8 <_printf_common+0x80>
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	18ed      	adds	r5, r5, r3
 8002ee8:	2600      	movs	r6, #0
 8002eea:	42b5      	cmp	r5, r6
 8002eec:	d120      	bne.n	8002f30 <_printf_common+0xc8>
 8002eee:	2000      	movs	r0, #0
 8002ef0:	e010      	b.n	8002f14 <_printf_common+0xac>
 8002ef2:	3501      	adds	r5, #1
 8002ef4:	68e3      	ldr	r3, [r4, #12]
 8002ef6:	6832      	ldr	r2, [r6, #0]
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	42ab      	cmp	r3, r5
 8002efc:	ddd2      	ble.n	8002ea4 <_printf_common+0x3c>
 8002efe:	0022      	movs	r2, r4
 8002f00:	2301      	movs	r3, #1
 8002f02:	9901      	ldr	r1, [sp, #4]
 8002f04:	9800      	ldr	r0, [sp, #0]
 8002f06:	9f08      	ldr	r7, [sp, #32]
 8002f08:	3219      	adds	r2, #25
 8002f0a:	47b8      	blx	r7
 8002f0c:	3001      	adds	r0, #1
 8002f0e:	d1f0      	bne.n	8002ef2 <_printf_common+0x8a>
 8002f10:	2001      	movs	r0, #1
 8002f12:	4240      	negs	r0, r0
 8002f14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002f16:	2030      	movs	r0, #48	@ 0x30
 8002f18:	18e1      	adds	r1, r4, r3
 8002f1a:	3143      	adds	r1, #67	@ 0x43
 8002f1c:	7008      	strb	r0, [r1, #0]
 8002f1e:	0021      	movs	r1, r4
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	3145      	adds	r1, #69	@ 0x45
 8002f24:	7809      	ldrb	r1, [r1, #0]
 8002f26:	18a2      	adds	r2, r4, r2
 8002f28:	3243      	adds	r2, #67	@ 0x43
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	7011      	strb	r1, [r2, #0]
 8002f2e:	e7c1      	b.n	8002eb4 <_printf_common+0x4c>
 8002f30:	0022      	movs	r2, r4
 8002f32:	2301      	movs	r3, #1
 8002f34:	9901      	ldr	r1, [sp, #4]
 8002f36:	9800      	ldr	r0, [sp, #0]
 8002f38:	9f08      	ldr	r7, [sp, #32]
 8002f3a:	321a      	adds	r2, #26
 8002f3c:	47b8      	blx	r7
 8002f3e:	3001      	adds	r0, #1
 8002f40:	d0e6      	beq.n	8002f10 <_printf_common+0xa8>
 8002f42:	3601      	adds	r6, #1
 8002f44:	e7d1      	b.n	8002eea <_printf_common+0x82>
	...

08002f48 <_printf_i>:
 8002f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4a:	b08b      	sub	sp, #44	@ 0x2c
 8002f4c:	9206      	str	r2, [sp, #24]
 8002f4e:	000a      	movs	r2, r1
 8002f50:	3243      	adds	r2, #67	@ 0x43
 8002f52:	9307      	str	r3, [sp, #28]
 8002f54:	9005      	str	r0, [sp, #20]
 8002f56:	9203      	str	r2, [sp, #12]
 8002f58:	7e0a      	ldrb	r2, [r1, #24]
 8002f5a:	000c      	movs	r4, r1
 8002f5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002f5e:	2a78      	cmp	r2, #120	@ 0x78
 8002f60:	d809      	bhi.n	8002f76 <_printf_i+0x2e>
 8002f62:	2a62      	cmp	r2, #98	@ 0x62
 8002f64:	d80b      	bhi.n	8002f7e <_printf_i+0x36>
 8002f66:	2a00      	cmp	r2, #0
 8002f68:	d100      	bne.n	8002f6c <_printf_i+0x24>
 8002f6a:	e0bc      	b.n	80030e6 <_printf_i+0x19e>
 8002f6c:	497b      	ldr	r1, [pc, #492]	@ (800315c <_printf_i+0x214>)
 8002f6e:	9104      	str	r1, [sp, #16]
 8002f70:	2a58      	cmp	r2, #88	@ 0x58
 8002f72:	d100      	bne.n	8002f76 <_printf_i+0x2e>
 8002f74:	e090      	b.n	8003098 <_printf_i+0x150>
 8002f76:	0025      	movs	r5, r4
 8002f78:	3542      	adds	r5, #66	@ 0x42
 8002f7a:	702a      	strb	r2, [r5, #0]
 8002f7c:	e022      	b.n	8002fc4 <_printf_i+0x7c>
 8002f7e:	0010      	movs	r0, r2
 8002f80:	3863      	subs	r0, #99	@ 0x63
 8002f82:	2815      	cmp	r0, #21
 8002f84:	d8f7      	bhi.n	8002f76 <_printf_i+0x2e>
 8002f86:	f7fd f8bf 	bl	8000108 <__gnu_thumb1_case_shi>
 8002f8a:	0016      	.short	0x0016
 8002f8c:	fff6001f 	.word	0xfff6001f
 8002f90:	fff6fff6 	.word	0xfff6fff6
 8002f94:	001ffff6 	.word	0x001ffff6
 8002f98:	fff6fff6 	.word	0xfff6fff6
 8002f9c:	fff6fff6 	.word	0xfff6fff6
 8002fa0:	003600a1 	.word	0x003600a1
 8002fa4:	fff60080 	.word	0xfff60080
 8002fa8:	00b2fff6 	.word	0x00b2fff6
 8002fac:	0036fff6 	.word	0x0036fff6
 8002fb0:	fff6fff6 	.word	0xfff6fff6
 8002fb4:	0084      	.short	0x0084
 8002fb6:	0025      	movs	r5, r4
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	3542      	adds	r5, #66	@ 0x42
 8002fbc:	1d11      	adds	r1, r2, #4
 8002fbe:	6019      	str	r1, [r3, #0]
 8002fc0:	6813      	ldr	r3, [r2, #0]
 8002fc2:	702b      	strb	r3, [r5, #0]
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0a0      	b.n	800310a <_printf_i+0x1c2>
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	6809      	ldr	r1, [r1, #0]
 8002fcc:	1d02      	adds	r2, r0, #4
 8002fce:	060d      	lsls	r5, r1, #24
 8002fd0:	d50b      	bpl.n	8002fea <_printf_i+0xa2>
 8002fd2:	6806      	ldr	r6, [r0, #0]
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	2e00      	cmp	r6, #0
 8002fd8:	da03      	bge.n	8002fe2 <_printf_i+0x9a>
 8002fda:	232d      	movs	r3, #45	@ 0x2d
 8002fdc:	9a03      	ldr	r2, [sp, #12]
 8002fde:	4276      	negs	r6, r6
 8002fe0:	7013      	strb	r3, [r2, #0]
 8002fe2:	4b5e      	ldr	r3, [pc, #376]	@ (800315c <_printf_i+0x214>)
 8002fe4:	270a      	movs	r7, #10
 8002fe6:	9304      	str	r3, [sp, #16]
 8002fe8:	e018      	b.n	800301c <_printf_i+0xd4>
 8002fea:	6806      	ldr	r6, [r0, #0]
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	0649      	lsls	r1, r1, #25
 8002ff0:	d5f1      	bpl.n	8002fd6 <_printf_i+0x8e>
 8002ff2:	b236      	sxth	r6, r6
 8002ff4:	e7ef      	b.n	8002fd6 <_printf_i+0x8e>
 8002ff6:	6808      	ldr	r0, [r1, #0]
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	c940      	ldmia	r1!, {r6}
 8002ffc:	0605      	lsls	r5, r0, #24
 8002ffe:	d402      	bmi.n	8003006 <_printf_i+0xbe>
 8003000:	0640      	lsls	r0, r0, #25
 8003002:	d500      	bpl.n	8003006 <_printf_i+0xbe>
 8003004:	b2b6      	uxth	r6, r6
 8003006:	6019      	str	r1, [r3, #0]
 8003008:	4b54      	ldr	r3, [pc, #336]	@ (800315c <_printf_i+0x214>)
 800300a:	270a      	movs	r7, #10
 800300c:	9304      	str	r3, [sp, #16]
 800300e:	2a6f      	cmp	r2, #111	@ 0x6f
 8003010:	d100      	bne.n	8003014 <_printf_i+0xcc>
 8003012:	3f02      	subs	r7, #2
 8003014:	0023      	movs	r3, r4
 8003016:	2200      	movs	r2, #0
 8003018:	3343      	adds	r3, #67	@ 0x43
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	6863      	ldr	r3, [r4, #4]
 800301e:	60a3      	str	r3, [r4, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db03      	blt.n	800302c <_printf_i+0xe4>
 8003024:	2104      	movs	r1, #4
 8003026:	6822      	ldr	r2, [r4, #0]
 8003028:	438a      	bics	r2, r1
 800302a:	6022      	str	r2, [r4, #0]
 800302c:	2e00      	cmp	r6, #0
 800302e:	d102      	bne.n	8003036 <_printf_i+0xee>
 8003030:	9d03      	ldr	r5, [sp, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00c      	beq.n	8003050 <_printf_i+0x108>
 8003036:	9d03      	ldr	r5, [sp, #12]
 8003038:	0030      	movs	r0, r6
 800303a:	0039      	movs	r1, r7
 800303c:	f7fd f8f4 	bl	8000228 <__aeabi_uidivmod>
 8003040:	9b04      	ldr	r3, [sp, #16]
 8003042:	3d01      	subs	r5, #1
 8003044:	5c5b      	ldrb	r3, [r3, r1]
 8003046:	702b      	strb	r3, [r5, #0]
 8003048:	0033      	movs	r3, r6
 800304a:	0006      	movs	r6, r0
 800304c:	429f      	cmp	r7, r3
 800304e:	d9f3      	bls.n	8003038 <_printf_i+0xf0>
 8003050:	2f08      	cmp	r7, #8
 8003052:	d109      	bne.n	8003068 <_printf_i+0x120>
 8003054:	6823      	ldr	r3, [r4, #0]
 8003056:	07db      	lsls	r3, r3, #31
 8003058:	d506      	bpl.n	8003068 <_printf_i+0x120>
 800305a:	6862      	ldr	r2, [r4, #4]
 800305c:	6923      	ldr	r3, [r4, #16]
 800305e:	429a      	cmp	r2, r3
 8003060:	dc02      	bgt.n	8003068 <_printf_i+0x120>
 8003062:	2330      	movs	r3, #48	@ 0x30
 8003064:	3d01      	subs	r5, #1
 8003066:	702b      	strb	r3, [r5, #0]
 8003068:	9b03      	ldr	r3, [sp, #12]
 800306a:	1b5b      	subs	r3, r3, r5
 800306c:	6123      	str	r3, [r4, #16]
 800306e:	9b07      	ldr	r3, [sp, #28]
 8003070:	0021      	movs	r1, r4
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	9805      	ldr	r0, [sp, #20]
 8003076:	9b06      	ldr	r3, [sp, #24]
 8003078:	aa09      	add	r2, sp, #36	@ 0x24
 800307a:	f7ff fef5 	bl	8002e68 <_printf_common>
 800307e:	3001      	adds	r0, #1
 8003080:	d148      	bne.n	8003114 <_printf_i+0x1cc>
 8003082:	2001      	movs	r0, #1
 8003084:	4240      	negs	r0, r0
 8003086:	b00b      	add	sp, #44	@ 0x2c
 8003088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800308a:	2220      	movs	r2, #32
 800308c:	6809      	ldr	r1, [r1, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	6022      	str	r2, [r4, #0]
 8003092:	2278      	movs	r2, #120	@ 0x78
 8003094:	4932      	ldr	r1, [pc, #200]	@ (8003160 <_printf_i+0x218>)
 8003096:	9104      	str	r1, [sp, #16]
 8003098:	0021      	movs	r1, r4
 800309a:	3145      	adds	r1, #69	@ 0x45
 800309c:	700a      	strb	r2, [r1, #0]
 800309e:	6819      	ldr	r1, [r3, #0]
 80030a0:	6822      	ldr	r2, [r4, #0]
 80030a2:	c940      	ldmia	r1!, {r6}
 80030a4:	0610      	lsls	r0, r2, #24
 80030a6:	d402      	bmi.n	80030ae <_printf_i+0x166>
 80030a8:	0650      	lsls	r0, r2, #25
 80030aa:	d500      	bpl.n	80030ae <_printf_i+0x166>
 80030ac:	b2b6      	uxth	r6, r6
 80030ae:	6019      	str	r1, [r3, #0]
 80030b0:	07d3      	lsls	r3, r2, #31
 80030b2:	d502      	bpl.n	80030ba <_printf_i+0x172>
 80030b4:	2320      	movs	r3, #32
 80030b6:	4313      	orrs	r3, r2
 80030b8:	6023      	str	r3, [r4, #0]
 80030ba:	2e00      	cmp	r6, #0
 80030bc:	d001      	beq.n	80030c2 <_printf_i+0x17a>
 80030be:	2710      	movs	r7, #16
 80030c0:	e7a8      	b.n	8003014 <_printf_i+0xcc>
 80030c2:	2220      	movs	r2, #32
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	4393      	bics	r3, r2
 80030c8:	6023      	str	r3, [r4, #0]
 80030ca:	e7f8      	b.n	80030be <_printf_i+0x176>
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	680d      	ldr	r5, [r1, #0]
 80030d0:	1d10      	adds	r0, r2, #4
 80030d2:	6949      	ldr	r1, [r1, #20]
 80030d4:	6018      	str	r0, [r3, #0]
 80030d6:	6813      	ldr	r3, [r2, #0]
 80030d8:	062e      	lsls	r6, r5, #24
 80030da:	d501      	bpl.n	80030e0 <_printf_i+0x198>
 80030dc:	6019      	str	r1, [r3, #0]
 80030de:	e002      	b.n	80030e6 <_printf_i+0x19e>
 80030e0:	066d      	lsls	r5, r5, #25
 80030e2:	d5fb      	bpl.n	80030dc <_printf_i+0x194>
 80030e4:	8019      	strh	r1, [r3, #0]
 80030e6:	2300      	movs	r3, #0
 80030e8:	9d03      	ldr	r5, [sp, #12]
 80030ea:	6123      	str	r3, [r4, #16]
 80030ec:	e7bf      	b.n	800306e <_printf_i+0x126>
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	1d11      	adds	r1, r2, #4
 80030f2:	6019      	str	r1, [r3, #0]
 80030f4:	6815      	ldr	r5, [r2, #0]
 80030f6:	2100      	movs	r1, #0
 80030f8:	0028      	movs	r0, r5
 80030fa:	6862      	ldr	r2, [r4, #4]
 80030fc:	f000 f858 	bl	80031b0 <memchr>
 8003100:	2800      	cmp	r0, #0
 8003102:	d001      	beq.n	8003108 <_printf_i+0x1c0>
 8003104:	1b40      	subs	r0, r0, r5
 8003106:	6060      	str	r0, [r4, #4]
 8003108:	6863      	ldr	r3, [r4, #4]
 800310a:	6123      	str	r3, [r4, #16]
 800310c:	2300      	movs	r3, #0
 800310e:	9a03      	ldr	r2, [sp, #12]
 8003110:	7013      	strb	r3, [r2, #0]
 8003112:	e7ac      	b.n	800306e <_printf_i+0x126>
 8003114:	002a      	movs	r2, r5
 8003116:	6923      	ldr	r3, [r4, #16]
 8003118:	9906      	ldr	r1, [sp, #24]
 800311a:	9805      	ldr	r0, [sp, #20]
 800311c:	9d07      	ldr	r5, [sp, #28]
 800311e:	47a8      	blx	r5
 8003120:	3001      	adds	r0, #1
 8003122:	d0ae      	beq.n	8003082 <_printf_i+0x13a>
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	079b      	lsls	r3, r3, #30
 8003128:	d415      	bmi.n	8003156 <_printf_i+0x20e>
 800312a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800312c:	68e0      	ldr	r0, [r4, #12]
 800312e:	4298      	cmp	r0, r3
 8003130:	daa9      	bge.n	8003086 <_printf_i+0x13e>
 8003132:	0018      	movs	r0, r3
 8003134:	e7a7      	b.n	8003086 <_printf_i+0x13e>
 8003136:	0022      	movs	r2, r4
 8003138:	2301      	movs	r3, #1
 800313a:	9906      	ldr	r1, [sp, #24]
 800313c:	9805      	ldr	r0, [sp, #20]
 800313e:	9e07      	ldr	r6, [sp, #28]
 8003140:	3219      	adds	r2, #25
 8003142:	47b0      	blx	r6
 8003144:	3001      	adds	r0, #1
 8003146:	d09c      	beq.n	8003082 <_printf_i+0x13a>
 8003148:	3501      	adds	r5, #1
 800314a:	68e3      	ldr	r3, [r4, #12]
 800314c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	42ab      	cmp	r3, r5
 8003152:	dcf0      	bgt.n	8003136 <_printf_i+0x1ee>
 8003154:	e7e9      	b.n	800312a <_printf_i+0x1e2>
 8003156:	2500      	movs	r5, #0
 8003158:	e7f7      	b.n	800314a <_printf_i+0x202>
 800315a:	46c0      	nop			@ (mov r8, r8)
 800315c:	080032aa 	.word	0x080032aa
 8003160:	080032bb 	.word	0x080032bb

08003164 <memmove>:
 8003164:	b510      	push	{r4, lr}
 8003166:	4288      	cmp	r0, r1
 8003168:	d806      	bhi.n	8003178 <memmove+0x14>
 800316a:	2300      	movs	r3, #0
 800316c:	429a      	cmp	r2, r3
 800316e:	d008      	beq.n	8003182 <memmove+0x1e>
 8003170:	5ccc      	ldrb	r4, [r1, r3]
 8003172:	54c4      	strb	r4, [r0, r3]
 8003174:	3301      	adds	r3, #1
 8003176:	e7f9      	b.n	800316c <memmove+0x8>
 8003178:	188b      	adds	r3, r1, r2
 800317a:	4298      	cmp	r0, r3
 800317c:	d2f5      	bcs.n	800316a <memmove+0x6>
 800317e:	3a01      	subs	r2, #1
 8003180:	d200      	bcs.n	8003184 <memmove+0x20>
 8003182:	bd10      	pop	{r4, pc}
 8003184:	5c8b      	ldrb	r3, [r1, r2]
 8003186:	5483      	strb	r3, [r0, r2]
 8003188:	e7f9      	b.n	800317e <memmove+0x1a>
	...

0800318c <_sbrk_r>:
 800318c:	2300      	movs	r3, #0
 800318e:	b570      	push	{r4, r5, r6, lr}
 8003190:	4d06      	ldr	r5, [pc, #24]	@ (80031ac <_sbrk_r+0x20>)
 8003192:	0004      	movs	r4, r0
 8003194:	0008      	movs	r0, r1
 8003196:	602b      	str	r3, [r5, #0]
 8003198:	f7fd fdca 	bl	8000d30 <_sbrk>
 800319c:	1c43      	adds	r3, r0, #1
 800319e:	d103      	bne.n	80031a8 <_sbrk_r+0x1c>
 80031a0:	682b      	ldr	r3, [r5, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d000      	beq.n	80031a8 <_sbrk_r+0x1c>
 80031a6:	6023      	str	r3, [r4, #0]
 80031a8:	bd70      	pop	{r4, r5, r6, pc}
 80031aa:	46c0      	nop			@ (mov r8, r8)
 80031ac:	2000022c 	.word	0x2000022c

080031b0 <memchr>:
 80031b0:	b2c9      	uxtb	r1, r1
 80031b2:	1882      	adds	r2, r0, r2
 80031b4:	4290      	cmp	r0, r2
 80031b6:	d101      	bne.n	80031bc <memchr+0xc>
 80031b8:	2000      	movs	r0, #0
 80031ba:	4770      	bx	lr
 80031bc:	7803      	ldrb	r3, [r0, #0]
 80031be:	428b      	cmp	r3, r1
 80031c0:	d0fb      	beq.n	80031ba <memchr+0xa>
 80031c2:	3001      	adds	r0, #1
 80031c4:	e7f6      	b.n	80031b4 <memchr+0x4>

080031c6 <memcpy>:
 80031c6:	2300      	movs	r3, #0
 80031c8:	b510      	push	{r4, lr}
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d100      	bne.n	80031d0 <memcpy+0xa>
 80031ce:	bd10      	pop	{r4, pc}
 80031d0:	5ccc      	ldrb	r4, [r1, r3]
 80031d2:	54c4      	strb	r4, [r0, r3]
 80031d4:	3301      	adds	r3, #1
 80031d6:	e7f8      	b.n	80031ca <memcpy+0x4>

080031d8 <_realloc_r>:
 80031d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031da:	0006      	movs	r6, r0
 80031dc:	000c      	movs	r4, r1
 80031de:	0015      	movs	r5, r2
 80031e0:	2900      	cmp	r1, #0
 80031e2:	d105      	bne.n	80031f0 <_realloc_r+0x18>
 80031e4:	0011      	movs	r1, r2
 80031e6:	f7ff fc51 	bl	8002a8c <_malloc_r>
 80031ea:	0004      	movs	r4, r0
 80031ec:	0020      	movs	r0, r4
 80031ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	d103      	bne.n	80031fc <_realloc_r+0x24>
 80031f4:	f7ff fbde 	bl	80029b4 <_free_r>
 80031f8:	2400      	movs	r4, #0
 80031fa:	e7f7      	b.n	80031ec <_realloc_r+0x14>
 80031fc:	f000 f81b 	bl	8003236 <_malloc_usable_size_r>
 8003200:	0007      	movs	r7, r0
 8003202:	4285      	cmp	r5, r0
 8003204:	d802      	bhi.n	800320c <_realloc_r+0x34>
 8003206:	0843      	lsrs	r3, r0, #1
 8003208:	42ab      	cmp	r3, r5
 800320a:	d3ef      	bcc.n	80031ec <_realloc_r+0x14>
 800320c:	0029      	movs	r1, r5
 800320e:	0030      	movs	r0, r6
 8003210:	f7ff fc3c 	bl	8002a8c <_malloc_r>
 8003214:	9001      	str	r0, [sp, #4]
 8003216:	2800      	cmp	r0, #0
 8003218:	d0ee      	beq.n	80031f8 <_realloc_r+0x20>
 800321a:	002a      	movs	r2, r5
 800321c:	42bd      	cmp	r5, r7
 800321e:	d900      	bls.n	8003222 <_realloc_r+0x4a>
 8003220:	003a      	movs	r2, r7
 8003222:	0021      	movs	r1, r4
 8003224:	9801      	ldr	r0, [sp, #4]
 8003226:	f7ff ffce 	bl	80031c6 <memcpy>
 800322a:	0021      	movs	r1, r4
 800322c:	0030      	movs	r0, r6
 800322e:	f7ff fbc1 	bl	80029b4 <_free_r>
 8003232:	9c01      	ldr	r4, [sp, #4]
 8003234:	e7da      	b.n	80031ec <_realloc_r+0x14>

08003236 <_malloc_usable_size_r>:
 8003236:	1f0b      	subs	r3, r1, #4
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	1f18      	subs	r0, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	da01      	bge.n	8003244 <_malloc_usable_size_r+0xe>
 8003240:	580b      	ldr	r3, [r1, r0]
 8003242:	18c0      	adds	r0, r0, r3
 8003244:	4770      	bx	lr
	...

08003248 <_init>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	46c0      	nop			@ (mov r8, r8)
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr

08003254 <_fini>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr


Projeto leitor joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001f68  08001f68  00002f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f84  08001f84  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001f84  08001f84  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001f84  08001f84  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f84  08001f84  00002f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f88  08001f88  00002f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001f8c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08001f98  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001f98  00003090  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044cc  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000117b  00000000  00000000  00007500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004d0  00000000  00000000  00008680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000387  00000000  00000000  00008b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a18  00000000  00000000  00008ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000632b  00000000  00000000  0001b8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073a09  00000000  00000000  00021c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00095623  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fb0  00000000  00000000  00095668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  00096618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001f50 	.word	0x08001f50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001f50 	.word	0x08001f50

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 f9af 	bl	8000588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f833 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8f7 	bl	8000420 <MX_GPIO_Init>
  MX_ADC_Init();
 8000232:	f000 f883 	bl	800033c <MX_ADC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc);
 8000236:	4b14      	ldr	r3, [pc, #80]	@ (8000288 <main+0x68>)
 8000238:	0018      	movs	r0, r3
 800023a:	f000 fb89 	bl	8000950 <HAL_ADC_Start>
	  for (int i = 0; i < 2; i++) {
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e019      	b.n	8000278 <main+0x58>
	      HAL_ADC_PollForConversion(&hadc, 100);
 8000244:	4b10      	ldr	r3, [pc, #64]	@ (8000288 <main+0x68>)
 8000246:	2164      	movs	r1, #100	@ 0x64
 8000248:	0018      	movs	r0, r3
 800024a:	f000 fc15 	bl	8000a78 <HAL_ADC_PollForConversion>
	      if (i == 0) {
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d107      	bne.n	8000264 <main+0x44>
	          axisY = HAL_ADC_GetValue(&hadc);
 8000254:	4b0c      	ldr	r3, [pc, #48]	@ (8000288 <main+0x68>)
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fcaa 	bl	8000bb0 <HAL_ADC_GetValue>
 800025c:	0002      	movs	r2, r0
 800025e:	4b0b      	ldr	r3, [pc, #44]	@ (800028c <main+0x6c>)
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	e006      	b.n	8000272 <main+0x52>
	      } else {
	          axisX = HAL_ADC_GetValue(&hadc);
 8000264:	4b08      	ldr	r3, [pc, #32]	@ (8000288 <main+0x68>)
 8000266:	0018      	movs	r0, r3
 8000268:	f000 fca2 	bl	8000bb0 <HAL_ADC_GetValue>
 800026c:	0002      	movs	r2, r0
 800026e:	4b08      	ldr	r3, [pc, #32]	@ (8000290 <main+0x70>)
 8000270:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < 2; i++) {
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	3301      	adds	r3, #1
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2b01      	cmp	r3, #1
 800027c:	dde2      	ble.n	8000244 <main+0x24>
	      }
	  }
	  HAL_ADC_Stop(&hadc);
 800027e:	4b02      	ldr	r3, [pc, #8]	@ (8000288 <main+0x68>)
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fbb9 	bl	80009f8 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc);
 8000286:	e7d6      	b.n	8000236 <main+0x16>
 8000288:	20000028 	.word	0x20000028
 800028c:	20000088 	.word	0x20000088
 8000290:	20000084 	.word	0x20000084

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b095      	sub	sp, #84	@ 0x54
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	2418      	movs	r4, #24
 800029c:	193b      	adds	r3, r7, r4
 800029e:	0018      	movs	r0, r3
 80002a0:	2338      	movs	r3, #56	@ 0x38
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f001 fe27 	bl	8001ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	0018      	movs	r0, r3
 80002ae:	2314      	movs	r3, #20
 80002b0:	001a      	movs	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	f001 fe20 	bl	8001ef8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000334 <SystemClock_Config+0xa0>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000338 <SystemClock_Config+0xa4>)
 80002be:	401a      	ands	r2, r3
 80002c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000334 <SystemClock_Config+0xa0>)
 80002c2:	2180      	movs	r1, #128	@ 0x80
 80002c4:	0109      	lsls	r1, r1, #4
 80002c6:	430a      	orrs	r2, r1
 80002c8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002ca:	0021      	movs	r1, r4
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2210      	movs	r2, #16
 80002d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2201      	movs	r2, #1
 80002d6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	22a0      	movs	r2, #160	@ 0xa0
 80002e2:	0212      	lsls	r2, r2, #8
 80002e4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2200      	movs	r2, #0
 80002ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	0018      	movs	r0, r3
 80002f0:	f001 f870 	bl	80013d4 <HAL_RCC_OscConfig>
 80002f4:	1e03      	subs	r3, r0, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002f8:	f000 f8a8 	bl	800044c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	220f      	movs	r2, #15
 8000300:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2200      	movs	r2, #0
 8000306:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2100      	movs	r1, #0
 800031e:	0018      	movs	r0, r3
 8000320:	f001 fc1c 	bl	8001b5c <HAL_RCC_ClockConfig>
 8000324:	1e03      	subs	r3, r0, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000328:	f000 f890 	bl	800044c <Error_Handler>
  }
}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b015      	add	sp, #84	@ 0x54
 8000332:	bd90      	pop	{r4, r7, pc}
 8000334:	40007000 	.word	0x40007000
 8000338:	ffffe7ff 	.word	0xffffe7ff

0800033c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000342:	003b      	movs	r3, r7
 8000344:	0018      	movs	r0, r3
 8000346:	2308      	movs	r3, #8
 8000348:	001a      	movs	r2, r3
 800034a:	2100      	movs	r1, #0
 800034c:	f001 fdd4 	bl	8001ef8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000350:	4b30      	ldr	r3, [pc, #192]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000352:	4a31      	ldr	r2, [pc, #196]	@ (8000418 <MX_ADC_Init+0xdc>)
 8000354:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000356:	4b2f      	ldr	r3, [pc, #188]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000358:	2200      	movs	r2, #0
 800035a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800035c:	4b2d      	ldr	r3, [pc, #180]	@ (8000414 <MX_ADC_Init+0xd8>)
 800035e:	22c0      	movs	r2, #192	@ 0xc0
 8000360:	0612      	lsls	r2, r2, #24
 8000362:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000364:	4b2b      	ldr	r3, [pc, #172]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800036a:	4b2a      	ldr	r3, [pc, #168]	@ (8000414 <MX_ADC_Init+0xd8>)
 800036c:	2207      	movs	r2, #7
 800036e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000370:	4b28      	ldr	r3, [pc, #160]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000372:	2201      	movs	r2, #1
 8000374:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000376:	4b27      	ldr	r3, [pc, #156]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800037c:	4b25      	ldr	r3, [pc, #148]	@ (8000414 <MX_ADC_Init+0xd8>)
 800037e:	2220      	movs	r2, #32
 8000380:	2100      	movs	r1, #0
 8000382:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000384:	4b23      	ldr	r3, [pc, #140]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000386:	2221      	movs	r2, #33	@ 0x21
 8000388:	2100      	movs	r1, #0
 800038a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800038c:	4b21      	ldr	r3, [pc, #132]	@ (8000414 <MX_ADC_Init+0xd8>)
 800038e:	2200      	movs	r2, #0
 8000390:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000392:	4b20      	ldr	r3, [pc, #128]	@ (8000414 <MX_ADC_Init+0xd8>)
 8000394:	22c2      	movs	r2, #194	@ 0xc2
 8000396:	32ff      	adds	r2, #255	@ 0xff
 8000398:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800039a:	4b1e      	ldr	r3, [pc, #120]	@ (8000414 <MX_ADC_Init+0xd8>)
 800039c:	222c      	movs	r2, #44	@ 0x2c
 800039e:	2100      	movs	r1, #0
 80003a0:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003a4:	2204      	movs	r2, #4
 80003a6:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003ae:	4b19      	ldr	r3, [pc, #100]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80003b4:	4b17      	ldr	r3, [pc, #92]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003ba:	4b16      	ldr	r3, [pc, #88]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003bc:	2200      	movs	r2, #0
 80003be:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003c0:	4b14      	ldr	r3, [pc, #80]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 f950 	bl	8000668 <HAL_ADC_Init>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80003cc:	f000 f83e 	bl	800044c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003d0:	003b      	movs	r3, r7
 80003d2:	2201      	movs	r2, #1
 80003d4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003d6:	003b      	movs	r3, r7
 80003d8:	2280      	movs	r2, #128	@ 0x80
 80003da:	0152      	lsls	r2, r2, #5
 80003dc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003de:	003a      	movs	r2, r7
 80003e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003e2:	0011      	movs	r1, r2
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 fbef 	bl	8000bc8 <HAL_ADC_ConfigChannel>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80003ee:	f000 f82d 	bl	800044c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003f2:	003b      	movs	r3, r7
 80003f4:	4a09      	ldr	r2, [pc, #36]	@ (800041c <MX_ADC_Init+0xe0>)
 80003f6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003f8:	003a      	movs	r2, r7
 80003fa:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <MX_ADC_Init+0xd8>)
 80003fc:	0011      	movs	r1, r2
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 fbe2 	bl	8000bc8 <HAL_ADC_ConfigChannel>
 8000404:	1e03      	subs	r3, r0, #0
 8000406:	d001      	beq.n	800040c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000408:	f000 f820 	bl	800044c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800040c:	46c0      	nop			@ (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b002      	add	sp, #8
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000028 	.word	0x20000028
 8000418:	40012400 	.word	0x40012400
 800041c:	04000002 	.word	0x04000002

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <MX_GPIO_Init+0x28>)
 8000428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800042a:	4b07      	ldr	r3, [pc, #28]	@ (8000448 <MX_GPIO_Init+0x28>)
 800042c:	2101      	movs	r1, #1
 800042e:	430a      	orrs	r2, r1
 8000430:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000432:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <MX_GPIO_Init+0x28>)
 8000434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000436:	2201      	movs	r2, #1
 8000438:	4013      	ands	r3, r2
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)
 8000448:	40021000 	.word	0x40021000

0800044c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000450:	b672      	cpsid	i
}
 8000452:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000454:	46c0      	nop			@ (mov r8, r8)
 8000456:	e7fd      	b.n	8000454 <Error_Handler+0x8>

08000458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045c:	4b07      	ldr	r3, [pc, #28]	@ (800047c <HAL_MspInit+0x24>)
 800045e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000460:	4b06      	ldr	r3, [pc, #24]	@ (800047c <HAL_MspInit+0x24>)
 8000462:	2101      	movs	r1, #1
 8000464:	430a      	orrs	r2, r1
 8000466:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000468:	4b04      	ldr	r3, [pc, #16]	@ (800047c <HAL_MspInit+0x24>)
 800046a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800046c:	4b03      	ldr	r3, [pc, #12]	@ (800047c <HAL_MspInit+0x24>)
 800046e:	2180      	movs	r1, #128	@ 0x80
 8000470:	0549      	lsls	r1, r1, #21
 8000472:	430a      	orrs	r2, r1
 8000474:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	40021000 	.word	0x40021000

08000480 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b089      	sub	sp, #36	@ 0x24
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	240c      	movs	r4, #12
 800048a:	193b      	adds	r3, r7, r4
 800048c:	0018      	movs	r0, r3
 800048e:	2314      	movs	r3, #20
 8000490:	001a      	movs	r2, r3
 8000492:	2100      	movs	r1, #0
 8000494:	f001 fd30 	bl	8001ef8 <memset>
  if(hadc->Instance==ADC1)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a14      	ldr	r2, [pc, #80]	@ (80004f0 <HAL_ADC_MspInit+0x70>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d122      	bne.n	80004e8 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004a2:	4b14      	ldr	r3, [pc, #80]	@ (80004f4 <HAL_ADC_MspInit+0x74>)
 80004a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004a6:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <HAL_ADC_MspInit+0x74>)
 80004a8:	2180      	movs	r1, #128	@ 0x80
 80004aa:	0089      	lsls	r1, r1, #2
 80004ac:	430a      	orrs	r2, r1
 80004ae:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <HAL_ADC_MspInit+0x74>)
 80004b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004b4:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <HAL_ADC_MspInit+0x74>)
 80004b6:	2101      	movs	r1, #1
 80004b8:	430a      	orrs	r2, r1
 80004ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004bc:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <HAL_ADC_MspInit+0x74>)
 80004be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004c0:	2201      	movs	r2, #1
 80004c2:	4013      	ands	r3, r2
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004c8:	193b      	adds	r3, r7, r4
 80004ca:	2203      	movs	r2, #3
 80004cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2203      	movs	r2, #3
 80004d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	193a      	adds	r2, r7, r4
 80004dc:	23a0      	movs	r3, #160	@ 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	0011      	movs	r1, r2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fe00 	bl	80010e8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b009      	add	sp, #36	@ 0x24
 80004ee:	bd90      	pop	{r4, r7, pc}
 80004f0:	40012400 	.word	0x40012400
 80004f4:	40021000 	.word	0x40021000

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	e7fd      	b.n	80004fc <NMI_Handler+0x4>

08000500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000504:	46c0      	nop			@ (mov r8, r8)
 8000506:	e7fd      	b.n	8000504 <HardFault_Handler+0x4>

08000508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000520:	f000 f886 	bl	8000630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000534:	480d      	ldr	r0, [pc, #52]	@ (800056c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000536:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000538:	f7ff fff7 	bl	800052a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800053c:	480c      	ldr	r0, [pc, #48]	@ (8000570 <LoopForever+0x6>)
  ldr r1, =_edata
 800053e:	490d      	ldr	r1, [pc, #52]	@ (8000574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000540:	4a0d      	ldr	r2, [pc, #52]	@ (8000578 <LoopForever+0xe>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000544:	e002      	b.n	800054c <LoopCopyDataInit>

08000546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800054a:	3304      	adds	r3, #4

0800054c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000550:	d3f9      	bcc.n	8000546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000552:	4a0a      	ldr	r2, [pc, #40]	@ (800057c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000554:	4c0a      	ldr	r4, [pc, #40]	@ (8000580 <LoopForever+0x16>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000558:	e001      	b.n	800055e <LoopFillZerobss>

0800055a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800055a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800055c:	3204      	adds	r2, #4

0800055e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000560:	d3fb      	bcc.n	800055a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000562:	f001 fcd1 	bl	8001f08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000566:	f7ff fe5b 	bl	8000220 <main>

0800056a <LoopForever>:

LoopForever:
    b LoopForever
 800056a:	e7fe      	b.n	800056a <LoopForever>
  ldr   r0, =_estack
 800056c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000574:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000578:	08001f8c 	.word	0x08001f8c
  ldr r2, =_sbss
 800057c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000580:	20000090 	.word	0x20000090

08000584 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000584:	e7fe      	b.n	8000584 <ADC1_COMP_IRQHandler>
	...

08000588 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800058e:	1dfb      	adds	r3, r7, #7
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <HAL_Init+0x3c>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b0a      	ldr	r3, [pc, #40]	@ (80005c4 <HAL_Init+0x3c>)
 800059a:	2140      	movs	r1, #64	@ 0x40
 800059c:	430a      	orrs	r2, r1
 800059e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 f811 	bl	80005c8 <HAL_InitTick>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d003      	beq.n	80005b2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]
 80005b0:	e001      	b.n	80005b6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005b2:	f7ff ff51 	bl	8000458 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005b6:	1dfb      	adds	r3, r7, #7
 80005b8:	781b      	ldrb	r3, [r3, #0]
}
 80005ba:	0018      	movs	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	b002      	add	sp, #8
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			@ (mov r8, r8)
 80005c4:	40022000 	.word	0x40022000

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d0:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <HAL_InitTick+0x5c>)
 80005d2:	681c      	ldr	r4, [r3, #0]
 80005d4:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <HAL_InitTick+0x60>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	0019      	movs	r1, r3
 80005da:	23fa      	movs	r3, #250	@ 0xfa
 80005dc:	0098      	lsls	r0, r3, #2
 80005de:	f7ff fd93 	bl	8000108 <__udivsi3>
 80005e2:	0003      	movs	r3, r0
 80005e4:	0019      	movs	r1, r3
 80005e6:	0020      	movs	r0, r4
 80005e8:	f7ff fd8e 	bl	8000108 <__udivsi3>
 80005ec:	0003      	movs	r3, r0
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fd6d 	bl	80010ce <HAL_SYSTICK_Config>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d001      	beq.n	80005fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80005f8:	2301      	movs	r3, #1
 80005fa:	e00f      	b.n	800061c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d80b      	bhi.n	800061a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	2301      	movs	r3, #1
 8000606:	425b      	negs	r3, r3
 8000608:	2200      	movs	r2, #0
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fd4a 	bl	80010a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <HAL_InitTick+0x64>)
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	e000      	b.n	800061c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
}
 800061c:	0018      	movs	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	b003      	add	sp, #12
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004

08000630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <HAL_IncTick+0x1c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	001a      	movs	r2, r3
 800063a:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <HAL_IncTick+0x20>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	18d2      	adds	r2, r2, r3
 8000640:	4b03      	ldr	r3, [pc, #12]	@ (8000650 <HAL_IncTick+0x20>)
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	20000008 	.word	0x20000008
 8000650:	2000008c 	.word	0x2000008c

08000654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  return uwTick;
 8000658:	4b02      	ldr	r3, [pc, #8]	@ (8000664 <HAL_GetTick+0x10>)
 800065a:	681b      	ldr	r3, [r3, #0]
}
 800065c:	0018      	movs	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)
 8000664:	2000008c 	.word	0x2000008c

08000668 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	e159      	b.n	800092e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800067e:	2b00      	cmp	r3, #0
 8000680:	d10a      	bne.n	8000698 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2250      	movs	r2, #80	@ 0x50
 800068c:	2100      	movs	r1, #0
 800068e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff fef4 	bl	8000480 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800069c:	2210      	movs	r2, #16
 800069e:	4013      	ands	r3, r2
 80006a0:	2b10      	cmp	r3, #16
 80006a2:	d005      	beq.n	80006b0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	2204      	movs	r2, #4
 80006ac:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80006ae:	d00b      	beq.n	80006c8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80006b4:	2210      	movs	r2, #16
 80006b6:	431a      	orrs	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2250      	movs	r2, #80	@ 0x50
 80006c0:	2100      	movs	r1, #0
 80006c2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	e132      	b.n	800092e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80006cc:	4a9a      	ldr	r2, [pc, #616]	@ (8000938 <HAL_ADC_Init+0x2d0>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	2202      	movs	r2, #2
 80006d2:	431a      	orrs	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	2203      	movs	r2, #3
 80006e0:	4013      	ands	r3, r2
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d108      	bne.n	80006f8 <HAL_ADC_Init+0x90>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2201      	movs	r2, #1
 80006ee:	4013      	ands	r3, r2
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d101      	bne.n	80006f8 <HAL_ADC_Init+0x90>
 80006f4:	2301      	movs	r3, #1
 80006f6:	e000      	b.n	80006fa <HAL_ADC_Init+0x92>
 80006f8:	2300      	movs	r3, #0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d149      	bne.n	8000792 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	685a      	ldr	r2, [r3, #4]
 8000702:	23c0      	movs	r3, #192	@ 0xc0
 8000704:	061b      	lsls	r3, r3, #24
 8000706:	429a      	cmp	r2, r3
 8000708:	d00b      	beq.n	8000722 <HAL_ADC_Init+0xba>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	2380      	movs	r3, #128	@ 0x80
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	429a      	cmp	r2, r3
 8000714:	d005      	beq.n	8000722 <HAL_ADC_Init+0xba>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	2380      	movs	r3, #128	@ 0x80
 800071c:	061b      	lsls	r3, r3, #24
 800071e:	429a      	cmp	r2, r3
 8000720:	d111      	bne.n	8000746 <HAL_ADC_Init+0xde>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	691a      	ldr	r2, [r3, #16]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	0092      	lsls	r2, r2, #2
 800072e:	0892      	lsrs	r2, r2, #2
 8000730:	611a      	str	r2, [r3, #16]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6919      	ldr	r1, [r3, #16]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	685a      	ldr	r2, [r3, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	430a      	orrs	r2, r1
 8000742:	611a      	str	r2, [r3, #16]
 8000744:	e014      	b.n	8000770 <HAL_ADC_Init+0x108>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	691a      	ldr	r2, [r3, #16]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	0092      	lsls	r2, r2, #2
 8000752:	0892      	lsrs	r2, r2, #2
 8000754:	611a      	str	r2, [r3, #16]
 8000756:	4b79      	ldr	r3, [pc, #484]	@ (800093c <HAL_ADC_Init+0x2d4>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b78      	ldr	r3, [pc, #480]	@ (800093c <HAL_ADC_Init+0x2d4>)
 800075c:	4978      	ldr	r1, [pc, #480]	@ (8000940 <HAL_ADC_Init+0x2d8>)
 800075e:	400a      	ands	r2, r1
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	4b76      	ldr	r3, [pc, #472]	@ (800093c <HAL_ADC_Init+0x2d4>)
 8000764:	6819      	ldr	r1, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	4b74      	ldr	r3, [pc, #464]	@ (800093c <HAL_ADC_Init+0x2d4>)
 800076c:	430a      	orrs	r2, r1
 800076e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	68da      	ldr	r2, [r3, #12]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2118      	movs	r1, #24
 800077c:	438a      	bics	r2, r1
 800077e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	68d9      	ldr	r1, [r3, #12]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	430a      	orrs	r2, r1
 8000790:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000792:	4b6a      	ldr	r3, [pc, #424]	@ (800093c <HAL_ADC_Init+0x2d4>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b69      	ldr	r3, [pc, #420]	@ (800093c <HAL_ADC_Init+0x2d4>)
 8000798:	496a      	ldr	r1, [pc, #424]	@ (8000944 <HAL_ADC_Init+0x2dc>)
 800079a:	400a      	ands	r2, r1
 800079c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800079e:	4b67      	ldr	r3, [pc, #412]	@ (800093c <HAL_ADC_Init+0x2d4>)
 80007a0:	6819      	ldr	r1, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007a6:	065a      	lsls	r2, r3, #25
 80007a8:	4b64      	ldr	r3, [pc, #400]	@ (800093c <HAL_ADC_Init+0x2d4>)
 80007aa:	430a      	orrs	r2, r1
 80007ac:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	689a      	ldr	r2, [r3, #8]
 80007b4:	2380      	movs	r3, #128	@ 0x80
 80007b6:	055b      	lsls	r3, r3, #21
 80007b8:	4013      	ands	r3, r2
 80007ba:	d108      	bne.n	80007ce <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	689a      	ldr	r2, [r3, #8]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2180      	movs	r1, #128	@ 0x80
 80007c8:	0549      	lsls	r1, r1, #21
 80007ca:	430a      	orrs	r2, r1
 80007cc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	68da      	ldr	r2, [r3, #12]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	495b      	ldr	r1, [pc, #364]	@ (8000948 <HAL_ADC_Init+0x2e0>)
 80007da:	400a      	ands	r2, r1
 80007dc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	68d9      	ldr	r1, [r3, #12]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	2b02      	cmp	r3, #2
 80007ee:	d101      	bne.n	80007f4 <HAL_ADC_Init+0x18c>
 80007f0:	2304      	movs	r3, #4
 80007f2:	e000      	b.n	80007f6 <HAL_ADC_Init+0x18e>
 80007f4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80007f6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2020      	movs	r0, #32
 80007fc:	5c1b      	ldrb	r3, [r3, r0]
 80007fe:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000800:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	202c      	movs	r0, #44	@ 0x2c
 8000806:	5c1b      	ldrb	r3, [r3, r0]
 8000808:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800080a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000810:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000818:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000820:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	430a      	orrs	r2, r1
 8000828:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800082e:	23c2      	movs	r3, #194	@ 0xc2
 8000830:	33ff      	adds	r3, #255	@ 0xff
 8000832:	429a      	cmp	r2, r3
 8000834:	d00b      	beq.n	800084e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68d9      	ldr	r1, [r3, #12]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000844:	431a      	orrs	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	430a      	orrs	r2, r1
 800084c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2221      	movs	r2, #33	@ 0x21
 8000852:	5c9b      	ldrb	r3, [r3, r2]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d11a      	bne.n	800088e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2220      	movs	r2, #32
 800085c:	5c9b      	ldrb	r3, [r3, r2]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d109      	bne.n	8000876 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68da      	ldr	r2, [r3, #12]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2180      	movs	r1, #128	@ 0x80
 800086e:	0249      	lsls	r1, r1, #9
 8000870:	430a      	orrs	r2, r1
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	e00b      	b.n	800088e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800087a:	2220      	movs	r2, #32
 800087c:	431a      	orrs	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000886:	2201      	movs	r2, #1
 8000888:	431a      	orrs	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000892:	2b01      	cmp	r3, #1
 8000894:	d11f      	bne.n	80008d6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	691a      	ldr	r2, [r3, #16]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	492a      	ldr	r1, [pc, #168]	@ (800094c <HAL_ADC_Init+0x2e4>)
 80008a2:	400a      	ands	r2, r1
 80008a4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6919      	ldr	r1, [r3, #16]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80008b4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80008ba:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	430a      	orrs	r2, r1
 80008c2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	691a      	ldr	r2, [r3, #16]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2101      	movs	r1, #1
 80008d0:	430a      	orrs	r2, r1
 80008d2:	611a      	str	r2, [r3, #16]
 80008d4:	e00e      	b.n	80008f4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	691b      	ldr	r3, [r3, #16]
 80008dc:	2201      	movs	r2, #1
 80008de:	4013      	ands	r3, r2
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d107      	bne.n	80008f4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	691a      	ldr	r2, [r3, #16]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2101      	movs	r1, #1
 80008f0:	438a      	bics	r2, r1
 80008f2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	695a      	ldr	r2, [r3, #20]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2107      	movs	r1, #7
 8000900:	438a      	bics	r2, r1
 8000902:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6959      	ldr	r1, [r3, #20]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	430a      	orrs	r2, r1
 8000914:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000920:	2203      	movs	r2, #3
 8000922:	4393      	bics	r3, r2
 8000924:	2201      	movs	r2, #1
 8000926:	431a      	orrs	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800092c:	2300      	movs	r3, #0
}
 800092e:	0018      	movs	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	b002      	add	sp, #8
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	fffffefd 	.word	0xfffffefd
 800093c:	40012708 	.word	0x40012708
 8000940:	ffc3ffff 	.word	0xffc3ffff
 8000944:	fdffffff 	.word	0xfdffffff
 8000948:	fffe0219 	.word	0xfffe0219
 800094c:	fffffc03 	.word	0xfffffc03

08000950 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000958:	230f      	movs	r3, #15
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	2204      	movs	r2, #4
 8000968:	4013      	ands	r3, r2
 800096a:	d138      	bne.n	80009de <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2250      	movs	r2, #80	@ 0x50
 8000970:	5c9b      	ldrb	r3, [r3, r2]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d101      	bne.n	800097a <HAL_ADC_Start+0x2a>
 8000976:	2302      	movs	r3, #2
 8000978:	e038      	b.n	80009ec <HAL_ADC_Start+0x9c>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2250      	movs	r2, #80	@ 0x50
 800097e:	2101      	movs	r1, #1
 8000980:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	69db      	ldr	r3, [r3, #28]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d007      	beq.n	800099a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800098a:	230f      	movs	r3, #15
 800098c:	18fc      	adds	r4, r7, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	0018      	movs	r0, r3
 8000992:	f000 f9b9 	bl	8000d08 <ADC_Enable>
 8000996:	0003      	movs	r3, r0
 8000998:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800099a:	230f      	movs	r3, #15
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d120      	bne.n	80009e6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009a8:	4a12      	ldr	r2, [pc, #72]	@ (80009f4 <HAL_ADC_Start+0xa4>)
 80009aa:	4013      	ands	r3, r2
 80009ac:	2280      	movs	r2, #128	@ 0x80
 80009ae:	0052      	lsls	r2, r2, #1
 80009b0:	431a      	orrs	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2250      	movs	r2, #80	@ 0x50
 80009c0:	2100      	movs	r1, #0
 80009c2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	221c      	movs	r2, #28
 80009ca:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689a      	ldr	r2, [r3, #8]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2104      	movs	r1, #4
 80009d8:	430a      	orrs	r2, r1
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	e003      	b.n	80009e6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80009de:	230f      	movs	r3, #15
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	2202      	movs	r2, #2
 80009e4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80009e6:	230f      	movs	r3, #15
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	781b      	ldrb	r3, [r3, #0]
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b005      	add	sp, #20
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	fffff0fe 	.word	0xfffff0fe

080009f8 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80009f8:	b5b0      	push	{r4, r5, r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a00:	230f      	movs	r3, #15
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2250      	movs	r2, #80	@ 0x50
 8000a0c:	5c9b      	ldrb	r3, [r3, r2]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d101      	bne.n	8000a16 <HAL_ADC_Stop+0x1e>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e029      	b.n	8000a6a <HAL_ADC_Stop+0x72>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2250      	movs	r2, #80	@ 0x50
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000a1e:	250f      	movs	r5, #15
 8000a20:	197c      	adds	r4, r7, r5
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 fa3e 	bl	8000ea6 <ADC_ConversionStop>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000a2e:	197b      	adds	r3, r7, r5
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d112      	bne.n	8000a5c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000a36:	197c      	adds	r4, r7, r5
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 f9cc 	bl	8000dd8 <ADC_Disable>
 8000a40:	0003      	movs	r3, r0
 8000a42:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000a44:	197b      	adds	r3, r7, r5
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d107      	bne.n	8000a5c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a50:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <HAL_ADC_Stop+0x7c>)
 8000a52:	4013      	ands	r3, r2
 8000a54:	2201      	movs	r2, #1
 8000a56:	431a      	orrs	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2250      	movs	r2, #80	@ 0x50
 8000a60:	2100      	movs	r1, #0
 8000a62:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8000a64:	230f      	movs	r3, #15
 8000a66:	18fb      	adds	r3, r7, r3
 8000a68:	781b      	ldrb	r3, [r3, #0]
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b004      	add	sp, #16
 8000a70:	bdb0      	pop	{r4, r5, r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	fffffefe 	.word	0xfffffefe

08000a78 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	2b08      	cmp	r3, #8
 8000a90:	d102      	bne.n	8000a98 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000a92:	2308      	movs	r3, #8
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	e014      	b.n	8000ac2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d10b      	bne.n	8000abe <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000aaa:	2220      	movs	r2, #32
 8000aac:	431a      	orrs	r2, r3
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2250      	movs	r2, #80	@ 0x50
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e072      	b.n	8000ba4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000abe:	230c      	movs	r3, #12
 8000ac0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ac2:	f7ff fdc7 	bl	8000654 <HAL_GetTick>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000aca:	e01f      	b.n	8000b0c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	d01c      	beq.n	8000b0c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d007      	beq.n	8000ae8 <HAL_ADC_PollForConversion+0x70>
 8000ad8:	f7ff fdbc 	bl	8000654 <HAL_GetTick>
 8000adc:	0002      	movs	r2, r0
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d211      	bcs.n	8000b0c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	4013      	ands	r3, r2
 8000af2:	d10b      	bne.n	8000b0c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000af8:	2204      	movs	r2, #4
 8000afa:	431a      	orrs	r2, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2250      	movs	r2, #80	@ 0x50
 8000b04:	2100      	movs	r1, #0
 8000b06:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e04b      	b.n	8000ba4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	4013      	ands	r3, r2
 8000b16:	d0d9      	beq.n	8000acc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b1c:	2280      	movs	r2, #128	@ 0x80
 8000b1e:	0092      	lsls	r2, r2, #2
 8000b20:	431a      	orrs	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	23c0      	movs	r3, #192	@ 0xc0
 8000b2e:	011b      	lsls	r3, r3, #4
 8000b30:	4013      	ands	r3, r2
 8000b32:	d12e      	bne.n	8000b92 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2220      	movs	r2, #32
 8000b38:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d129      	bne.n	8000b92 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2208      	movs	r2, #8
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d122      	bne.n	8000b92 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	2204      	movs	r2, #4
 8000b54:	4013      	ands	r3, r2
 8000b56:	d110      	bne.n	8000b7a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	210c      	movs	r1, #12
 8000b64:	438a      	bics	r2, r1
 8000b66:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bac <HAL_ADC_PollForConversion+0x134>)
 8000b6e:	4013      	ands	r3, r2
 8000b70:	2201      	movs	r2, #1
 8000b72:	431a      	orrs	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b78:	e00b      	b.n	8000b92 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b7e:	2220      	movs	r2, #32
 8000b80:	431a      	orrs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d103      	bne.n	8000ba2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b004      	add	sp, #16
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	fffffefe 	.word	0xfffffefe

08000bb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2250      	movs	r2, #80	@ 0x50
 8000bd6:	5c9b      	ldrb	r3, [r3, r2]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d101      	bne.n	8000be0 <HAL_ADC_ConfigChannel+0x18>
 8000bdc:	2302      	movs	r3, #2
 8000bde:	e085      	b.n	8000cec <HAL_ADC_ConfigChannel+0x124>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2250      	movs	r2, #80	@ 0x50
 8000be4:	2101      	movs	r1, #1
 8000be6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2204      	movs	r2, #4
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	d00b      	beq.n	8000c0c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bf8:	2220      	movs	r2, #32
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2250      	movs	r2, #80	@ 0x50
 8000c04:	2100      	movs	r1, #0
 8000c06:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	e06f      	b.n	8000cec <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	4a38      	ldr	r2, [pc, #224]	@ (8000cf4 <HAL_ADC_ConfigChannel+0x12c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d035      	beq.n	8000c82 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	035b      	lsls	r3, r3, #13
 8000c22:	0b5a      	lsrs	r2, r3, #13
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	02db      	lsls	r3, r3, #11
 8000c34:	4013      	ands	r3, r2
 8000c36:	d009      	beq.n	8000c4c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8000c38:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf8 <HAL_ADC_ConfigChannel+0x130>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf8 <HAL_ADC_ConfigChannel+0x130>)
 8000c3e:	2180      	movs	r1, #128	@ 0x80
 8000c40:	0409      	lsls	r1, r1, #16
 8000c42:	430a      	orrs	r2, r1
 8000c44:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000c46:	200a      	movs	r0, #10
 8000c48:	f000 f97a 	bl	8000f40 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	2380      	movs	r3, #128	@ 0x80
 8000c52:	029b      	lsls	r3, r3, #10
 8000c54:	4013      	ands	r3, r2
 8000c56:	d006      	beq.n	8000c66 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8000c58:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <HAL_ADC_ConfigChannel+0x130>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b26      	ldr	r3, [pc, #152]	@ (8000cf8 <HAL_ADC_ConfigChannel+0x130>)
 8000c5e:	2180      	movs	r1, #128	@ 0x80
 8000c60:	03c9      	lsls	r1, r1, #15
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	2380      	movs	r3, #128	@ 0x80
 8000c6c:	025b      	lsls	r3, r3, #9
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d037      	beq.n	8000ce2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8000c72:	4b21      	ldr	r3, [pc, #132]	@ (8000cf8 <HAL_ADC_ConfigChannel+0x130>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <HAL_ADC_ConfigChannel+0x130>)
 8000c78:	2180      	movs	r1, #128	@ 0x80
 8000c7a:	0449      	lsls	r1, r1, #17
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	e02f      	b.n	8000ce2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	035b      	lsls	r3, r3, #13
 8000c8e:	0b5b      	lsrs	r3, r3, #13
 8000c90:	43d9      	mvns	r1, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	400a      	ands	r2, r1
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	2380      	movs	r3, #128	@ 0x80
 8000ca0:	02db      	lsls	r3, r3, #11
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	d005      	beq.n	8000cb2 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_ADC_ConfigChannel+0x130>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <HAL_ADC_ConfigChannel+0x130>)
 8000cac:	4913      	ldr	r1, [pc, #76]	@ (8000cfc <HAL_ADC_ConfigChannel+0x134>)
 8000cae:	400a      	ands	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	2380      	movs	r3, #128	@ 0x80
 8000cb8:	029b      	lsls	r3, r3, #10
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d005      	beq.n	8000cca <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HAL_ADC_ConfigChannel+0x130>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <HAL_ADC_ConfigChannel+0x130>)
 8000cc4:	490e      	ldr	r1, [pc, #56]	@ (8000d00 <HAL_ADC_ConfigChannel+0x138>)
 8000cc6:	400a      	ands	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	2380      	movs	r3, #128	@ 0x80
 8000cd0:	025b      	lsls	r3, r3, #9
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d005      	beq.n	8000ce2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <HAL_ADC_ConfigChannel+0x130>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <HAL_ADC_ConfigChannel+0x130>)
 8000cdc:	4909      	ldr	r1, [pc, #36]	@ (8000d04 <HAL_ADC_ConfigChannel+0x13c>)
 8000cde:	400a      	ands	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2250      	movs	r2, #80	@ 0x50
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	00001001 	.word	0x00001001
 8000cf8:	40012708 	.word	0x40012708
 8000cfc:	ff7fffff 	.word	0xff7fffff
 8000d00:	ffbfffff 	.word	0xffbfffff
 8000d04:	feffffff 	.word	0xfeffffff

08000d08 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d108      	bne.n	8000d34 <ADC_Enable+0x2c>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d101      	bne.n	8000d34 <ADC_Enable+0x2c>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <ADC_Enable+0x2e>
 8000d34:	2300      	movs	r3, #0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d146      	bne.n	8000dc8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	4a24      	ldr	r2, [pc, #144]	@ (8000dd4 <ADC_Enable+0xcc>)
 8000d42:	4013      	ands	r3, r2
 8000d44:	d00d      	beq.n	8000d62 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d4a:	2210      	movs	r2, #16
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d56:	2201      	movs	r2, #1
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e033      	b.n	8000dca <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f000 f8e4 	bl	8000f40 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d78:	f7ff fc6c 	bl	8000654 <HAL_GetTick>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000d80:	e01b      	b.n	8000dba <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000d82:	f7ff fc67 	bl	8000654 <HAL_GetTick>
 8000d86:	0002      	movs	r2, r0
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b0a      	cmp	r3, #10
 8000d8e:	d914      	bls.n	8000dba <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2201      	movs	r2, #1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d00d      	beq.n	8000dba <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000da2:	2210      	movs	r2, #16
 8000da4:	431a      	orrs	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dae:	2201      	movs	r2, #1
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e007      	b.n	8000dca <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d1dc      	bne.n	8000d82 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b004      	add	sp, #16
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	80000017 	.word	0x80000017

08000dd8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	2203      	movs	r2, #3
 8000dec:	4013      	ands	r3, r2
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d108      	bne.n	8000e04 <ADC_Disable+0x2c>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d101      	bne.n	8000e04 <ADC_Disable+0x2c>
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <ADC_Disable+0x2e>
 8000e04:	2300      	movs	r3, #0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d048      	beq.n	8000e9c <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2205      	movs	r2, #5
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d110      	bne.n	8000e3a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2102      	movs	r1, #2
 8000e24:	430a      	orrs	r2, r1
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e30:	f7ff fc10 	bl	8000654 <HAL_GetTick>
 8000e34:	0003      	movs	r3, r0
 8000e36:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000e38:	e029      	b.n	8000e8e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e3e:	2210      	movs	r2, #16
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e023      	b.n	8000e9e <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e56:	f7ff fbfd 	bl	8000654 <HAL_GetTick>
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b0a      	cmp	r3, #10
 8000e62:	d914      	bls.n	8000e8e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d10d      	bne.n	8000e8e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e76:	2210      	movs	r2, #16
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e82:	2201      	movs	r2, #1
 8000e84:	431a      	orrs	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e007      	b.n	8000e9e <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	2201      	movs	r2, #1
 8000e96:	4013      	ands	r3, r2
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d0dc      	beq.n	8000e56 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b004      	add	sp, #16
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	2204      	movs	r2, #4
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d03a      	beq.n	8000f34 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d10d      	bne.n	8000ee8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8000ed6:	d107      	bne.n	8000ee8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ee8:	f7ff fbb4 	bl	8000654 <HAL_GetTick>
 8000eec:	0003      	movs	r3, r0
 8000eee:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000ef0:	e01a      	b.n	8000f28 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000ef2:	f7ff fbaf 	bl	8000654 <HAL_GetTick>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b0a      	cmp	r3, #10
 8000efe:	d913      	bls.n	8000f28 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	2204      	movs	r2, #4
 8000f08:	4013      	ands	r3, r2
 8000f0a:	d00d      	beq.n	8000f28 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f10:	2210      	movs	r2, #16
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e006      	b.n	8000f36 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	2204      	movs	r2, #4
 8000f30:	4013      	ands	r3, r2
 8000f32:	d1de      	bne.n	8000ef2 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	0018      	movs	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b004      	add	sp, #16
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000f48:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <ADC_DelayMicroSecond+0x38>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	490b      	ldr	r1, [pc, #44]	@ (8000f7c <ADC_DelayMicroSecond+0x3c>)
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f7ff f8da 	bl	8000108 <__udivsi3>
 8000f54:	0003      	movs	r3, r0
 8000f56:	001a      	movs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4353      	muls	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8000f5e:	e002      	b.n	8000f66 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f9      	bne.n	8000f60 <ADC_DelayMicroSecond+0x20>
  }
}
 8000f6c:	46c0      	nop			@ (mov r8, r8)
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b004      	add	sp, #16
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	000f4240 	.word	0x000f4240

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	0002      	movs	r2, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f94:	d828      	bhi.n	8000fe8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f96:	4a2f      	ldr	r2, [pc, #188]	@ (8001054 <__NVIC_SetPriority+0xd4>)
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	33c0      	adds	r3, #192	@ 0xc0
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	589b      	ldr	r3, [r3, r2]
 8000fa6:	1dfa      	adds	r2, r7, #7
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	0011      	movs	r1, r2
 8000fac:	2203      	movs	r2, #3
 8000fae:	400a      	ands	r2, r1
 8000fb0:	00d2      	lsls	r2, r2, #3
 8000fb2:	21ff      	movs	r1, #255	@ 0xff
 8000fb4:	4091      	lsls	r1, r2
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	43d2      	mvns	r2, r2
 8000fba:	401a      	ands	r2, r3
 8000fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	019b      	lsls	r3, r3, #6
 8000fc2:	22ff      	movs	r2, #255	@ 0xff
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2303      	movs	r3, #3
 8000fce:	4003      	ands	r3, r0
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd4:	481f      	ldr	r0, [pc, #124]	@ (8001054 <__NVIC_SetPriority+0xd4>)
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	33c0      	adds	r3, #192	@ 0xc0
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fe6:	e031      	b.n	800104c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8001058 <__NVIC_SetPriority+0xd8>)
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	0019      	movs	r1, r3
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	3b08      	subs	r3, #8
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3306      	adds	r3, #6
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	18d3      	adds	r3, r2, r3
 8000ffe:	3304      	adds	r3, #4
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1dfa      	adds	r2, r7, #7
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	0011      	movs	r1, r2
 8001008:	2203      	movs	r2, #3
 800100a:	400a      	ands	r2, r1
 800100c:	00d2      	lsls	r2, r2, #3
 800100e:	21ff      	movs	r1, #255	@ 0xff
 8001010:	4091      	lsls	r1, r2
 8001012:	000a      	movs	r2, r1
 8001014:	43d2      	mvns	r2, r2
 8001016:	401a      	ands	r2, r3
 8001018:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	22ff      	movs	r2, #255	@ 0xff
 8001020:	401a      	ands	r2, r3
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	0018      	movs	r0, r3
 8001028:	2303      	movs	r3, #3
 800102a:	4003      	ands	r3, r0
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001030:	4809      	ldr	r0, [pc, #36]	@ (8001058 <__NVIC_SetPriority+0xd8>)
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	001c      	movs	r4, r3
 8001038:	230f      	movs	r3, #15
 800103a:	4023      	ands	r3, r4
 800103c:	3b08      	subs	r3, #8
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	430a      	orrs	r2, r1
 8001042:	3306      	adds	r3, #6
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	18c3      	adds	r3, r0, r3
 8001048:	3304      	adds	r3, #4
 800104a:	601a      	str	r2, [r3, #0]
}
 800104c:	46c0      	nop			@ (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b003      	add	sp, #12
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	1e5a      	subs	r2, r3, #1
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	045b      	lsls	r3, r3, #17
 800106c:	429a      	cmp	r2, r3
 800106e:	d301      	bcc.n	8001074 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001070:	2301      	movs	r3, #1
 8001072:	e010      	b.n	8001096 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001074:	4b0a      	ldr	r3, [pc, #40]	@ (80010a0 <SysTick_Config+0x44>)
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	3a01      	subs	r2, #1
 800107a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107c:	2301      	movs	r3, #1
 800107e:	425b      	negs	r3, r3
 8001080:	2103      	movs	r1, #3
 8001082:	0018      	movs	r0, r3
 8001084:	f7ff ff7c 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <SysTick_Config+0x44>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <SysTick_Config+0x44>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	210f      	movs	r1, #15
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	1c02      	adds	r2, r0, #0
 80010b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	0011      	movs	r1, r2
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b004      	add	sp, #16
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	0018      	movs	r0, r3
 80010da:	f7ff ffbf 	bl	800105c <SysTick_Config>
 80010de:	0003      	movs	r3, r0
}
 80010e0:	0018      	movs	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010fe:	e14f      	b.n	80013a0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2101      	movs	r1, #1
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4091      	lsls	r1, r2
 800110a:	000a      	movs	r2, r1
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d100      	bne.n	8001118 <HAL_GPIO_Init+0x30>
 8001116:	e140      	b.n	800139a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2203      	movs	r2, #3
 800111e:	4013      	ands	r3, r2
 8001120:	2b01      	cmp	r3, #1
 8001122:	d005      	beq.n	8001130 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2203      	movs	r2, #3
 800112a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800112c:	2b02      	cmp	r3, #2
 800112e:	d130      	bne.n	8001192 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	409a      	lsls	r2, r3
 800113e:	0013      	movs	r3, r2
 8001140:	43da      	mvns	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	409a      	lsls	r2, r3
 8001152:	0013      	movs	r3, r2
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001166:	2201      	movs	r2, #1
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	43da      	mvns	r2, r3
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	091b      	lsrs	r3, r3, #4
 800117c:	2201      	movs	r2, #1
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2203      	movs	r2, #3
 8001198:	4013      	ands	r3, r2
 800119a:	2b03      	cmp	r3, #3
 800119c:	d017      	beq.n	80011ce <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	43da      	mvns	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2203      	movs	r2, #3
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d123      	bne.n	8001222 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	0092      	lsls	r2, r2, #2
 80011e4:	58d3      	ldr	r3, [r2, r3]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2207      	movs	r2, #7
 80011ec:	4013      	ands	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	220f      	movs	r2, #15
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	43da      	mvns	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	691a      	ldr	r2, [r3, #16]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2107      	movs	r1, #7
 8001206:	400b      	ands	r3, r1
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	6939      	ldr	r1, [r7, #16]
 8001220:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	409a      	lsls	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	43da      	mvns	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2203      	movs	r2, #3
 8001240:	401a      	ands	r2, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	409a      	lsls	r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	23c0      	movs	r3, #192	@ 0xc0
 800125c:	029b      	lsls	r3, r3, #10
 800125e:	4013      	ands	r3, r2
 8001260:	d100      	bne.n	8001264 <HAL_GPIO_Init+0x17c>
 8001262:	e09a      	b.n	800139a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001264:	4b54      	ldr	r3, [pc, #336]	@ (80013b8 <HAL_GPIO_Init+0x2d0>)
 8001266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001268:	4b53      	ldr	r3, [pc, #332]	@ (80013b8 <HAL_GPIO_Init+0x2d0>)
 800126a:	2101      	movs	r1, #1
 800126c:	430a      	orrs	r2, r1
 800126e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001270:	4a52      	ldr	r2, [pc, #328]	@ (80013bc <HAL_GPIO_Init+0x2d4>)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	589b      	ldr	r3, [r3, r2]
 800127c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2203      	movs	r2, #3
 8001282:	4013      	ands	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	409a      	lsls	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	43da      	mvns	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	23a0      	movs	r3, #160	@ 0xa0
 8001298:	05db      	lsls	r3, r3, #23
 800129a:	429a      	cmp	r2, r3
 800129c:	d019      	beq.n	80012d2 <HAL_GPIO_Init+0x1ea>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a47      	ldr	r2, [pc, #284]	@ (80013c0 <HAL_GPIO_Init+0x2d8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d013      	beq.n	80012ce <HAL_GPIO_Init+0x1e6>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a46      	ldr	r2, [pc, #280]	@ (80013c4 <HAL_GPIO_Init+0x2dc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d00d      	beq.n	80012ca <HAL_GPIO_Init+0x1e2>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a45      	ldr	r2, [pc, #276]	@ (80013c8 <HAL_GPIO_Init+0x2e0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x1de>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a44      	ldr	r2, [pc, #272]	@ (80013cc <HAL_GPIO_Init+0x2e4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d101      	bne.n	80012c2 <HAL_GPIO_Init+0x1da>
 80012be:	2305      	movs	r3, #5
 80012c0:	e008      	b.n	80012d4 <HAL_GPIO_Init+0x1ec>
 80012c2:	2306      	movs	r3, #6
 80012c4:	e006      	b.n	80012d4 <HAL_GPIO_Init+0x1ec>
 80012c6:	2303      	movs	r3, #3
 80012c8:	e004      	b.n	80012d4 <HAL_GPIO_Init+0x1ec>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_Init+0x1ec>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_GPIO_Init+0x1ec>
 80012d2:	2300      	movs	r3, #0
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	2103      	movs	r1, #3
 80012d8:	400a      	ands	r2, r1
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	4093      	lsls	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e4:	4935      	ldr	r1, [pc, #212]	@ (80013bc <HAL_GPIO_Init+0x2d4>)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	3302      	adds	r3, #2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b37      	ldr	r3, [pc, #220]	@ (80013d0 <HAL_GPIO_Init+0x2e8>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	2380      	movs	r3, #128	@ 0x80
 8001308:	035b      	lsls	r3, r3, #13
 800130a:	4013      	ands	r3, r2
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001316:	4b2e      	ldr	r3, [pc, #184]	@ (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800131c:	4b2c      	ldr	r3, [pc, #176]	@ (80013d0 <HAL_GPIO_Init+0x2e8>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	43da      	mvns	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	039b      	lsls	r3, r3, #14
 8001334:	4013      	ands	r3, r2
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001340:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001346:	4b22      	ldr	r3, [pc, #136]	@ (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43da      	mvns	r2, r3
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	029b      	lsls	r3, r3, #10
 800135e:	4013      	ands	r3, r2
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <HAL_GPIO_Init+0x2e8>)
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001370:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43da      	mvns	r2, r3
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	2380      	movs	r3, #128	@ 0x80
 8001386:	025b      	lsls	r3, r3, #9
 8001388:	4013      	ands	r3, r2
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <HAL_GPIO_Init+0x2e8>)
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	40da      	lsrs	r2, r3
 80013a8:	1e13      	subs	r3, r2, #0
 80013aa:	d000      	beq.n	80013ae <HAL_GPIO_Init+0x2c6>
 80013ac:	e6a8      	b.n	8001100 <HAL_GPIO_Init+0x18>
  }
}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	46c0      	nop			@ (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b006      	add	sp, #24
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010000 	.word	0x40010000
 80013c0:	50000400 	.word	0x50000400
 80013c4:	50000800 	.word	0x50000800
 80013c8:	50000c00 	.word	0x50000c00
 80013cc:	50001c00 	.word	0x50001c00
 80013d0:	40010400 	.word	0x40010400

080013d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f000 fbaf 	bl	8001b46 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e8:	4bcf      	ldr	r3, [pc, #828]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	220c      	movs	r2, #12
 80013ee:	4013      	ands	r3, r2
 80013f0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013f2:	4bcd      	ldr	r3, [pc, #820]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	2380      	movs	r3, #128	@ 0x80
 80013f8:	025b      	lsls	r3, r3, #9
 80013fa:	4013      	ands	r3, r2
 80013fc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2201      	movs	r2, #1
 8001404:	4013      	ands	r3, r2
 8001406:	d100      	bne.n	800140a <HAL_RCC_OscConfig+0x36>
 8001408:	e07e      	b.n	8001508 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	2b08      	cmp	r3, #8
 800140e:	d007      	beq.n	8001420 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	2b0c      	cmp	r3, #12
 8001414:	d112      	bne.n	800143c <HAL_RCC_OscConfig+0x68>
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	2380      	movs	r3, #128	@ 0x80
 800141a:	025b      	lsls	r3, r3, #9
 800141c:	429a      	cmp	r2, r3
 800141e:	d10d      	bne.n	800143c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	4bc1      	ldr	r3, [pc, #772]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2380      	movs	r3, #128	@ 0x80
 8001426:	029b      	lsls	r3, r3, #10
 8001428:	4013      	ands	r3, r2
 800142a:	d100      	bne.n	800142e <HAL_RCC_OscConfig+0x5a>
 800142c:	e06b      	b.n	8001506 <HAL_RCC_OscConfig+0x132>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d167      	bne.n	8001506 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	f000 fb85 	bl	8001b46 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	025b      	lsls	r3, r3, #9
 8001444:	429a      	cmp	r2, r3
 8001446:	d107      	bne.n	8001458 <HAL_RCC_OscConfig+0x84>
 8001448:	4bb7      	ldr	r3, [pc, #732]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4bb6      	ldr	r3, [pc, #728]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 800144e:	2180      	movs	r1, #128	@ 0x80
 8001450:	0249      	lsls	r1, r1, #9
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e027      	b.n	80014a8 <HAL_RCC_OscConfig+0xd4>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	23a0      	movs	r3, #160	@ 0xa0
 800145e:	02db      	lsls	r3, r3, #11
 8001460:	429a      	cmp	r2, r3
 8001462:	d10e      	bne.n	8001482 <HAL_RCC_OscConfig+0xae>
 8001464:	4bb0      	ldr	r3, [pc, #704]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4baf      	ldr	r3, [pc, #700]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 800146a:	2180      	movs	r1, #128	@ 0x80
 800146c:	02c9      	lsls	r1, r1, #11
 800146e:	430a      	orrs	r2, r1
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	4bad      	ldr	r3, [pc, #692]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4bac      	ldr	r3, [pc, #688]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001478:	2180      	movs	r1, #128	@ 0x80
 800147a:	0249      	lsls	r1, r1, #9
 800147c:	430a      	orrs	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e012      	b.n	80014a8 <HAL_RCC_OscConfig+0xd4>
 8001482:	4ba9      	ldr	r3, [pc, #676]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4ba8      	ldr	r3, [pc, #672]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001488:	49a8      	ldr	r1, [pc, #672]	@ (800172c <HAL_RCC_OscConfig+0x358>)
 800148a:	400a      	ands	r2, r1
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	4ba6      	ldr	r3, [pc, #664]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	2380      	movs	r3, #128	@ 0x80
 8001494:	025b      	lsls	r3, r3, #9
 8001496:	4013      	ands	r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4ba2      	ldr	r3, [pc, #648]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4ba1      	ldr	r3, [pc, #644]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80014a2:	49a3      	ldr	r1, [pc, #652]	@ (8001730 <HAL_RCC_OscConfig+0x35c>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d015      	beq.n	80014dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff f8d0 	bl	8000654 <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014b8:	e009      	b.n	80014ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014ba:	f7ff f8cb 	bl	8000654 <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b64      	cmp	r3, #100	@ 0x64
 80014c6:	d902      	bls.n	80014ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	f000 fb3c 	bl	8001b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014ce:	4b96      	ldr	r3, [pc, #600]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	029b      	lsls	r3, r3, #10
 80014d6:	4013      	ands	r3, r2
 80014d8:	d0ef      	beq.n	80014ba <HAL_RCC_OscConfig+0xe6>
 80014da:	e015      	b.n	8001508 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff f8ba 	bl	8000654 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e6:	f7ff f8b5 	bl	8000654 <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b64      	cmp	r3, #100	@ 0x64
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e326      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014f8:	4b8b      	ldr	r3, [pc, #556]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	2380      	movs	r3, #128	@ 0x80
 80014fe:	029b      	lsls	r3, r3, #10
 8001500:	4013      	ands	r3, r2
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x112>
 8001504:	e000      	b.n	8001508 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001506:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2202      	movs	r2, #2
 800150e:	4013      	ands	r3, r2
 8001510:	d100      	bne.n	8001514 <HAL_RCC_OscConfig+0x140>
 8001512:	e08b      	b.n	800162c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d005      	beq.n	800152c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	2b0c      	cmp	r3, #12
 8001524:	d13e      	bne.n	80015a4 <HAL_RCC_OscConfig+0x1d0>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d13b      	bne.n	80015a4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800152c:	4b7e      	ldr	r3, [pc, #504]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2204      	movs	r2, #4
 8001532:	4013      	ands	r3, r2
 8001534:	d004      	beq.n	8001540 <HAL_RCC_OscConfig+0x16c>
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e302      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b79      	ldr	r3, [pc, #484]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a7b      	ldr	r2, [pc, #492]	@ (8001734 <HAL_RCC_OscConfig+0x360>)
 8001546:	4013      	ands	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	021a      	lsls	r2, r3, #8
 8001550:	4b75      	ldr	r3, [pc, #468]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001552:	430a      	orrs	r2, r1
 8001554:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001556:	4b74      	ldr	r3, [pc, #464]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2209      	movs	r2, #9
 800155c:	4393      	bics	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	4b71      	ldr	r3, [pc, #452]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	430a      	orrs	r2, r1
 8001566:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001568:	f000 fc40 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 800156c:	0001      	movs	r1, r0
 800156e:	4b6e      	ldr	r3, [pc, #440]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	220f      	movs	r2, #15
 8001576:	4013      	ands	r3, r2
 8001578:	4a6f      	ldr	r2, [pc, #444]	@ (8001738 <HAL_RCC_OscConfig+0x364>)
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	000a      	movs	r2, r1
 800157e:	40da      	lsrs	r2, r3
 8001580:	4b6e      	ldr	r3, [pc, #440]	@ (800173c <HAL_RCC_OscConfig+0x368>)
 8001582:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001584:	4b6e      	ldr	r3, [pc, #440]	@ (8001740 <HAL_RCC_OscConfig+0x36c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2513      	movs	r5, #19
 800158a:	197c      	adds	r4, r7, r5
 800158c:	0018      	movs	r0, r3
 800158e:	f7ff f81b 	bl	80005c8 <HAL_InitTick>
 8001592:	0003      	movs	r3, r0
 8001594:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001596:	197b      	adds	r3, r7, r5
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d046      	beq.n	800162c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800159e:	197b      	adds	r3, r7, r5
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	e2d0      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d027      	beq.n	80015fa <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2209      	movs	r2, #9
 80015b0:	4393      	bics	r3, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	4b5c      	ldr	r3, [pc, #368]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff f84a 	bl	8000654 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c6:	f7ff f845 	bl	8000654 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e2b6      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015d8:	4b53      	ldr	r3, [pc, #332]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2204      	movs	r2, #4
 80015de:	4013      	ands	r3, r2
 80015e0:	d0f1      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	4b51      	ldr	r3, [pc, #324]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a53      	ldr	r2, [pc, #332]	@ (8001734 <HAL_RCC_OscConfig+0x360>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	0019      	movs	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	021a      	lsls	r2, r3, #8
 80015f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80015f4:	430a      	orrs	r2, r1
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	e018      	b.n	800162c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001600:	2101      	movs	r1, #1
 8001602:	438a      	bics	r2, r1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff f825 	bl	8000654 <HAL_GetTick>
 800160a:	0003      	movs	r3, r0
 800160c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001610:	f7ff f820 	bl	8000654 <HAL_GetTick>
 8001614:	0002      	movs	r2, r0
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e291      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001622:	4b41      	ldr	r3, [pc, #260]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2204      	movs	r2, #4
 8001628:	4013      	ands	r3, r2
 800162a:	d1f1      	bne.n	8001610 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2210      	movs	r2, #16
 8001632:	4013      	ands	r3, r2
 8001634:	d100      	bne.n	8001638 <HAL_RCC_OscConfig+0x264>
 8001636:	e0a1      	b.n	800177c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d140      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800163e:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4013      	ands	r3, r2
 8001648:	d005      	beq.n	8001656 <HAL_RCC_OscConfig+0x282>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e277      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001656:	4b34      	ldr	r3, [pc, #208]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4a3a      	ldr	r2, [pc, #232]	@ (8001744 <HAL_RCC_OscConfig+0x370>)
 800165c:	4013      	ands	r3, r2
 800165e:	0019      	movs	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001664:	4b30      	ldr	r3, [pc, #192]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001666:	430a      	orrs	r2, r1
 8001668:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800166a:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	0a19      	lsrs	r1, r3, #8
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	061a      	lsls	r2, r3, #24
 8001678:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 800167a:	430a      	orrs	r2, r1
 800167c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001682:	0b5b      	lsrs	r3, r3, #13
 8001684:	3301      	adds	r3, #1
 8001686:	2280      	movs	r2, #128	@ 0x80
 8001688:	0212      	lsls	r2, r2, #8
 800168a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800168c:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	210f      	movs	r1, #15
 8001694:	400b      	ands	r3, r1
 8001696:	4928      	ldr	r1, [pc, #160]	@ (8001738 <HAL_RCC_OscConfig+0x364>)
 8001698:	5ccb      	ldrb	r3, [r1, r3]
 800169a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800169c:	4b27      	ldr	r3, [pc, #156]	@ (800173c <HAL_RCC_OscConfig+0x368>)
 800169e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80016a0:	4b27      	ldr	r3, [pc, #156]	@ (8001740 <HAL_RCC_OscConfig+0x36c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2513      	movs	r5, #19
 80016a6:	197c      	adds	r4, r7, r5
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7fe ff8d 	bl	80005c8 <HAL_InitTick>
 80016ae:	0003      	movs	r3, r0
 80016b0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80016b2:	197b      	adds	r3, r7, r5
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d060      	beq.n	800177c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80016ba:	197b      	adds	r3, r7, r5
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	e242      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d03f      	beq.n	8001748 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016c8:	4b17      	ldr	r3, [pc, #92]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80016ce:	2180      	movs	r1, #128	@ 0x80
 80016d0:	0049      	lsls	r1, r1, #1
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7fe ffbd 	bl	8000654 <HAL_GetTick>
 80016da:	0003      	movs	r3, r0
 80016dc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e0:	f7fe ffb8 	bl	8000654 <HAL_GetTick>
 80016e4:	0002      	movs	r2, r0
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e229      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	2380      	movs	r3, #128	@ 0x80
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4013      	ands	r3, r2
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_RCC_OscConfig+0x370>)
 8001704:	4013      	ands	r3, r2
 8001706:	0019      	movs	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 800170e:	430a      	orrs	r2, r1
 8001710:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001712:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	0a19      	lsrs	r1, r3, #8
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	061a      	lsls	r2, r3, #24
 8001720:	4b01      	ldr	r3, [pc, #4]	@ (8001728 <HAL_RCC_OscConfig+0x354>)
 8001722:	430a      	orrs	r2, r1
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	e029      	b.n	800177c <HAL_RCC_OscConfig+0x3a8>
 8001728:	40021000 	.word	0x40021000
 800172c:	fffeffff 	.word	0xfffeffff
 8001730:	fffbffff 	.word	0xfffbffff
 8001734:	ffffe0ff 	.word	0xffffe0ff
 8001738:	08001f68 	.word	0x08001f68
 800173c:	20000000 	.word	0x20000000
 8001740:	20000004 	.word	0x20000004
 8001744:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001748:	4bbd      	ldr	r3, [pc, #756]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4bbc      	ldr	r3, [pc, #752]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 800174e:	49bd      	ldr	r1, [pc, #756]	@ (8001a44 <HAL_RCC_OscConfig+0x670>)
 8001750:	400a      	ands	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7fe ff7e 	bl	8000654 <HAL_GetTick>
 8001758:	0003      	movs	r3, r0
 800175a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800175e:	f7fe ff79 	bl	8000654 <HAL_GetTick>
 8001762:	0002      	movs	r2, r0
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1ea      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001770:	4bb3      	ldr	r3, [pc, #716]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	@ 0x80
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4013      	ands	r3, r2
 800177a:	d1f0      	bne.n	800175e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2208      	movs	r2, #8
 8001782:	4013      	ands	r3, r2
 8001784:	d036      	beq.n	80017f4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d019      	beq.n	80017c2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178e:	4bac      	ldr	r3, [pc, #688]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001790:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001792:	4bab      	ldr	r3, [pc, #684]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001794:	2101      	movs	r1, #1
 8001796:	430a      	orrs	r2, r1
 8001798:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7fe ff5b 	bl	8000654 <HAL_GetTick>
 800179e:	0003      	movs	r3, r0
 80017a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a4:	f7fe ff56 	bl	8000654 <HAL_GetTick>
 80017a8:	0002      	movs	r2, r0
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e1c7      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017b6:	4ba2      	ldr	r3, [pc, #648]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80017b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ba:	2202      	movs	r2, #2
 80017bc:	4013      	ands	r3, r2
 80017be:	d0f1      	beq.n	80017a4 <HAL_RCC_OscConfig+0x3d0>
 80017c0:	e018      	b.n	80017f4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c2:	4b9f      	ldr	r3, [pc, #636]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80017c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017c6:	4b9e      	ldr	r3, [pc, #632]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80017c8:	2101      	movs	r1, #1
 80017ca:	438a      	bics	r2, r1
 80017cc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ce:	f7fe ff41 	bl	8000654 <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d8:	f7fe ff3c 	bl	8000654 <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1ad      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017ea:	4b95      	ldr	r3, [pc, #596]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80017ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ee:	2202      	movs	r2, #2
 80017f0:	4013      	ands	r3, r2
 80017f2:	d1f1      	bne.n	80017d8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2204      	movs	r2, #4
 80017fa:	4013      	ands	r3, r2
 80017fc:	d100      	bne.n	8001800 <HAL_RCC_OscConfig+0x42c>
 80017fe:	e0ae      	b.n	800195e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001800:	2027      	movs	r0, #39	@ 0x27
 8001802:	183b      	adds	r3, r7, r0
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001808:	4b8d      	ldr	r3, [pc, #564]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 800180a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800180c:	2380      	movs	r3, #128	@ 0x80
 800180e:	055b      	lsls	r3, r3, #21
 8001810:	4013      	ands	r3, r2
 8001812:	d109      	bne.n	8001828 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001814:	4b8a      	ldr	r3, [pc, #552]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001818:	4b89      	ldr	r3, [pc, #548]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 800181a:	2180      	movs	r1, #128	@ 0x80
 800181c:	0549      	lsls	r1, r1, #21
 800181e:	430a      	orrs	r2, r1
 8001820:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001822:	183b      	adds	r3, r7, r0
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001828:	4b87      	ldr	r3, [pc, #540]	@ (8001a48 <HAL_RCC_OscConfig+0x674>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2380      	movs	r3, #128	@ 0x80
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4013      	ands	r3, r2
 8001832:	d11a      	bne.n	800186a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001834:	4b84      	ldr	r3, [pc, #528]	@ (8001a48 <HAL_RCC_OscConfig+0x674>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b83      	ldr	r3, [pc, #524]	@ (8001a48 <HAL_RCC_OscConfig+0x674>)
 800183a:	2180      	movs	r1, #128	@ 0x80
 800183c:	0049      	lsls	r1, r1, #1
 800183e:	430a      	orrs	r2, r1
 8001840:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001842:	f7fe ff07 	bl	8000654 <HAL_GetTick>
 8001846:	0003      	movs	r3, r0
 8001848:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800184c:	f7fe ff02 	bl	8000654 <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	@ 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e173      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800185e:	4b7a      	ldr	r3, [pc, #488]	@ (8001a48 <HAL_RCC_OscConfig+0x674>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2380      	movs	r3, #128	@ 0x80
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4013      	ands	r3, r2
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	2380      	movs	r3, #128	@ 0x80
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	429a      	cmp	r2, r3
 8001874:	d107      	bne.n	8001886 <HAL_RCC_OscConfig+0x4b2>
 8001876:	4b72      	ldr	r3, [pc, #456]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001878:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800187a:	4b71      	ldr	r3, [pc, #452]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 800187c:	2180      	movs	r1, #128	@ 0x80
 800187e:	0049      	lsls	r1, r1, #1
 8001880:	430a      	orrs	r2, r1
 8001882:	651a      	str	r2, [r3, #80]	@ 0x50
 8001884:	e031      	b.n	80018ea <HAL_RCC_OscConfig+0x516>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x4d4>
 800188e:	4b6c      	ldr	r3, [pc, #432]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001890:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001892:	4b6b      	ldr	r3, [pc, #428]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001894:	496b      	ldr	r1, [pc, #428]	@ (8001a44 <HAL_RCC_OscConfig+0x670>)
 8001896:	400a      	ands	r2, r1
 8001898:	651a      	str	r2, [r3, #80]	@ 0x50
 800189a:	4b69      	ldr	r3, [pc, #420]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 800189c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800189e:	4b68      	ldr	r3, [pc, #416]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80018a0:	496a      	ldr	r1, [pc, #424]	@ (8001a4c <HAL_RCC_OscConfig+0x678>)
 80018a2:	400a      	ands	r2, r1
 80018a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80018a6:	e020      	b.n	80018ea <HAL_RCC_OscConfig+0x516>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	23a0      	movs	r3, #160	@ 0xa0
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d10e      	bne.n	80018d2 <HAL_RCC_OscConfig+0x4fe>
 80018b4:	4b62      	ldr	r3, [pc, #392]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80018b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018b8:	4b61      	ldr	r3, [pc, #388]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80018ba:	2180      	movs	r1, #128	@ 0x80
 80018bc:	00c9      	lsls	r1, r1, #3
 80018be:	430a      	orrs	r2, r1
 80018c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80018c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80018c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018c6:	4b5e      	ldr	r3, [pc, #376]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80018c8:	2180      	movs	r1, #128	@ 0x80
 80018ca:	0049      	lsls	r1, r1, #1
 80018cc:	430a      	orrs	r2, r1
 80018ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80018d0:	e00b      	b.n	80018ea <HAL_RCC_OscConfig+0x516>
 80018d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80018d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80018d8:	495a      	ldr	r1, [pc, #360]	@ (8001a44 <HAL_RCC_OscConfig+0x670>)
 80018da:	400a      	ands	r2, r1
 80018dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80018de:	4b58      	ldr	r3, [pc, #352]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80018e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018e2:	4b57      	ldr	r3, [pc, #348]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80018e4:	4959      	ldr	r1, [pc, #356]	@ (8001a4c <HAL_RCC_OscConfig+0x678>)
 80018e6:	400a      	ands	r2, r1
 80018e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d015      	beq.n	800191e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7fe feaf 	bl	8000654 <HAL_GetTick>
 80018f6:	0003      	movs	r3, r0
 80018f8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018fa:	e009      	b.n	8001910 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7fe feaa 	bl	8000654 <HAL_GetTick>
 8001900:	0002      	movs	r2, r0
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	4a52      	ldr	r2, [pc, #328]	@ (8001a50 <HAL_RCC_OscConfig+0x67c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e11a      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001910:	4b4b      	ldr	r3, [pc, #300]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001912:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4013      	ands	r3, r2
 800191a:	d0ef      	beq.n	80018fc <HAL_RCC_OscConfig+0x528>
 800191c:	e014      	b.n	8001948 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191e:	f7fe fe99 	bl	8000654 <HAL_GetTick>
 8001922:	0003      	movs	r3, r0
 8001924:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001926:	e009      	b.n	800193c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7fe fe94 	bl	8000654 <HAL_GetTick>
 800192c:	0002      	movs	r2, r0
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	4a47      	ldr	r2, [pc, #284]	@ (8001a50 <HAL_RCC_OscConfig+0x67c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e104      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800193c:	4b40      	ldr	r3, [pc, #256]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 800193e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001940:	2380      	movs	r3, #128	@ 0x80
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d1ef      	bne.n	8001928 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001948:	2327      	movs	r3, #39	@ 0x27
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d105      	bne.n	800195e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001952:	4b3b      	ldr	r3, [pc, #236]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001956:	4b3a      	ldr	r3, [pc, #232]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001958:	493e      	ldr	r1, [pc, #248]	@ (8001a54 <HAL_RCC_OscConfig+0x680>)
 800195a:	400a      	ands	r2, r1
 800195c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2220      	movs	r2, #32
 8001964:	4013      	ands	r3, r2
 8001966:	d049      	beq.n	80019fc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d026      	beq.n	80019be <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001970:	4b33      	ldr	r3, [pc, #204]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	4b32      	ldr	r3, [pc, #200]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001976:	2101      	movs	r1, #1
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	4b30      	ldr	r3, [pc, #192]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 800197e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001980:	4b2f      	ldr	r3, [pc, #188]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001982:	2101      	movs	r1, #1
 8001984:	430a      	orrs	r2, r1
 8001986:	635a      	str	r2, [r3, #52]	@ 0x34
 8001988:	4b33      	ldr	r3, [pc, #204]	@ (8001a58 <HAL_RCC_OscConfig+0x684>)
 800198a:	6a1a      	ldr	r2, [r3, #32]
 800198c:	4b32      	ldr	r3, [pc, #200]	@ (8001a58 <HAL_RCC_OscConfig+0x684>)
 800198e:	2180      	movs	r1, #128	@ 0x80
 8001990:	0189      	lsls	r1, r1, #6
 8001992:	430a      	orrs	r2, r1
 8001994:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7fe fe5d 	bl	8000654 <HAL_GetTick>
 800199a:	0003      	movs	r3, r0
 800199c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019a0:	f7fe fe58 	bl	8000654 <HAL_GetTick>
 80019a4:	0002      	movs	r2, r0
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e0c9      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019b2:	4b23      	ldr	r3, [pc, #140]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	d0f1      	beq.n	80019a0 <HAL_RCC_OscConfig+0x5cc>
 80019bc:	e01e      	b.n	80019fc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80019be:	4b20      	ldr	r3, [pc, #128]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80019c4:	2101      	movs	r1, #1
 80019c6:	438a      	bics	r2, r1
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	4b23      	ldr	r3, [pc, #140]	@ (8001a58 <HAL_RCC_OscConfig+0x684>)
 80019cc:	6a1a      	ldr	r2, [r3, #32]
 80019ce:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <HAL_RCC_OscConfig+0x684>)
 80019d0:	4922      	ldr	r1, [pc, #136]	@ (8001a5c <HAL_RCC_OscConfig+0x688>)
 80019d2:	400a      	ands	r2, r1
 80019d4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7fe fe3d 	bl	8000654 <HAL_GetTick>
 80019da:	0003      	movs	r3, r0
 80019dc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e0:	f7fe fe38 	bl	8000654 <HAL_GetTick>
 80019e4:	0002      	movs	r2, r0
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e0a9      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019f2:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d1f1      	bne.n	80019e0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d100      	bne.n	8001a06 <HAL_RCC_OscConfig+0x632>
 8001a04:	e09e      	b.n	8001b44 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	2b0c      	cmp	r3, #12
 8001a0a:	d100      	bne.n	8001a0e <HAL_RCC_OscConfig+0x63a>
 8001a0c:	e077      	b.n	8001afe <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d158      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <HAL_RCC_OscConfig+0x66c>)
 8001a1c:	4910      	ldr	r1, [pc, #64]	@ (8001a60 <HAL_RCC_OscConfig+0x68c>)
 8001a1e:	400a      	ands	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7fe fe17 	bl	8000654 <HAL_GetTick>
 8001a26:	0003      	movs	r3, r0
 8001a28:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a2a:	e01b      	b.n	8001a64 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7fe fe12 	bl	8000654 <HAL_GetTick>
 8001a30:	0002      	movs	r2, r0
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d914      	bls.n	8001a64 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e083      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
 8001a3e:	46c0      	nop			@ (mov r8, r8)
 8001a40:	40021000 	.word	0x40021000
 8001a44:	fffffeff 	.word	0xfffffeff
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	fffffbff 	.word	0xfffffbff
 8001a50:	00001388 	.word	0x00001388
 8001a54:	efffffff 	.word	0xefffffff
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	ffffdfff 	.word	0xffffdfff
 8001a60:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a64:	4b3a      	ldr	r3, [pc, #232]	@ (8001b50 <HAL_RCC_OscConfig+0x77c>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	2380      	movs	r3, #128	@ 0x80
 8001a6a:	049b      	lsls	r3, r3, #18
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d1dd      	bne.n	8001a2c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a70:	4b37      	ldr	r3, [pc, #220]	@ (8001b50 <HAL_RCC_OscConfig+0x77c>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4a37      	ldr	r2, [pc, #220]	@ (8001b54 <HAL_RCC_OscConfig+0x780>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	0019      	movs	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	4b31      	ldr	r3, [pc, #196]	@ (8001b50 <HAL_RCC_OscConfig+0x77c>)
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a90:	4b2f      	ldr	r3, [pc, #188]	@ (8001b50 <HAL_RCC_OscConfig+0x77c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b2e      	ldr	r3, [pc, #184]	@ (8001b50 <HAL_RCC_OscConfig+0x77c>)
 8001a96:	2180      	movs	r1, #128	@ 0x80
 8001a98:	0449      	lsls	r1, r1, #17
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7fe fdd9 	bl	8000654 <HAL_GetTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7fe fdd4 	bl	8000654 <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e045      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001aba:	4b25      	ldr	r3, [pc, #148]	@ (8001b50 <HAL_RCC_OscConfig+0x77c>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	@ 0x80
 8001ac0:	049b      	lsls	r3, r3, #18
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x6d4>
 8001ac6:	e03d      	b.n	8001b44 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac8:	4b21      	ldr	r3, [pc, #132]	@ (8001b50 <HAL_RCC_OscConfig+0x77c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <HAL_RCC_OscConfig+0x77c>)
 8001ace:	4922      	ldr	r1, [pc, #136]	@ (8001b58 <HAL_RCC_OscConfig+0x784>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7fe fdbe 	bl	8000654 <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ade:	f7fe fdb9 	bl	8000654 <HAL_GetTick>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e02a      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001af0:	4b17      	ldr	r3, [pc, #92]	@ (8001b50 <HAL_RCC_OscConfig+0x77c>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	@ 0x80
 8001af6:	049b      	lsls	r3, r3, #18
 8001af8:	4013      	ands	r3, r2
 8001afa:	d1f0      	bne.n	8001ade <HAL_RCC_OscConfig+0x70a>
 8001afc:	e022      	b.n	8001b44 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e01d      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <HAL_RCC_OscConfig+0x77c>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	025b      	lsls	r3, r3, #9
 8001b16:	401a      	ands	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d10f      	bne.n	8001b40 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	23f0      	movs	r3, #240	@ 0xf0
 8001b24:	039b      	lsls	r3, r3, #14
 8001b26:	401a      	ands	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b30:	69fa      	ldr	r2, [r7, #28]
 8001b32:	23c0      	movs	r3, #192	@ 0xc0
 8001b34:	041b      	lsls	r3, r3, #16
 8001b36:	401a      	ands	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	0018      	movs	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b00a      	add	sp, #40	@ 0x28
 8001b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	40021000 	.word	0x40021000
 8001b54:	ff02ffff 	.word	0xff02ffff
 8001b58:	feffffff 	.word	0xfeffffff

08001b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b5c:	b5b0      	push	{r4, r5, r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e128      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b96      	ldr	r3, [pc, #600]	@ (8001dcc <HAL_RCC_ClockConfig+0x270>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2201      	movs	r2, #1
 8001b76:	4013      	ands	r3, r2
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d91e      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b93      	ldr	r3, [pc, #588]	@ (8001dcc <HAL_RCC_ClockConfig+0x270>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2201      	movs	r2, #1
 8001b84:	4393      	bics	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	4b90      	ldr	r3, [pc, #576]	@ (8001dcc <HAL_RCC_ClockConfig+0x270>)
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b90:	f7fe fd60 	bl	8000654 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b98:	e009      	b.n	8001bae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9a:	f7fe fd5b 	bl	8000654 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	4a8a      	ldr	r2, [pc, #552]	@ (8001dd0 <HAL_RCC_ClockConfig+0x274>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e109      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b87      	ldr	r3, [pc, #540]	@ (8001dcc <HAL_RCC_ClockConfig+0x270>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1ee      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d009      	beq.n	8001bda <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc6:	4b83      	ldr	r3, [pc, #524]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	22f0      	movs	r2, #240	@ 0xf0
 8001bcc:	4393      	bics	r3, r2
 8001bce:	0019      	movs	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	4b7f      	ldr	r3, [pc, #508]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	d100      	bne.n	8001be6 <HAL_RCC_ClockConfig+0x8a>
 8001be4:	e089      	b.n	8001cfa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bee:	4b79      	ldr	r3, [pc, #484]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	029b      	lsls	r3, r3, #10
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d120      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0e1      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c06:	4b73      	ldr	r3, [pc, #460]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	2380      	movs	r3, #128	@ 0x80
 8001c0c:	049b      	lsls	r3, r3, #18
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d114      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e0d5      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d106      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2204      	movs	r2, #4
 8001c24:	4013      	ands	r3, r2
 8001c26:	d109      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0ca      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c2c:	4b69      	ldr	r3, [pc, #420]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4013      	ands	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0c2      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3c:	4b65      	ldr	r3, [pc, #404]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2203      	movs	r2, #3
 8001c42:	4393      	bics	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4b62      	ldr	r3, [pc, #392]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c50:	f7fe fd00 	bl	8000654 <HAL_GetTick>
 8001c54:	0003      	movs	r3, r0
 8001c56:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d111      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c60:	e009      	b.n	8001c76 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c62:	f7fe fcf7 	bl	8000654 <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	4a58      	ldr	r2, [pc, #352]	@ (8001dd0 <HAL_RCC_ClockConfig+0x274>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e0a5      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c76:	4b57      	ldr	r3, [pc, #348]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d1ef      	bne.n	8001c62 <HAL_RCC_ClockConfig+0x106>
 8001c82:	e03a      	b.n	8001cfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d111      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c8c:	e009      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8e:	f7fe fce1 	bl	8000654 <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	4a4d      	ldr	r2, [pc, #308]	@ (8001dd0 <HAL_RCC_ClockConfig+0x274>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e08f      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d1ef      	bne.n	8001c8e <HAL_RCC_ClockConfig+0x132>
 8001cae:	e024      	b.n	8001cfa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d11b      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb8:	e009      	b.n	8001cce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cba:	f7fe fccb 	bl	8000654 <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	4a42      	ldr	r2, [pc, #264]	@ (8001dd0 <HAL_RCC_ClockConfig+0x274>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e079      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cce:	4b41      	ldr	r3, [pc, #260]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d1ef      	bne.n	8001cba <HAL_RCC_ClockConfig+0x15e>
 8001cda:	e00e      	b.n	8001cfa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7fe fcba 	bl	8000654 <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	4a3a      	ldr	r2, [pc, #232]	@ (8001dd0 <HAL_RCC_ClockConfig+0x274>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e068      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cf0:	4b38      	ldr	r3, [pc, #224]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	220c      	movs	r2, #12
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cfa:	4b34      	ldr	r3, [pc, #208]	@ (8001dcc <HAL_RCC_ClockConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	4013      	ands	r3, r2
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d21e      	bcs.n	8001d46 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d08:	4b30      	ldr	r3, [pc, #192]	@ (8001dcc <HAL_RCC_ClockConfig+0x270>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4393      	bics	r3, r2
 8001d10:	0019      	movs	r1, r3
 8001d12:	4b2e      	ldr	r3, [pc, #184]	@ (8001dcc <HAL_RCC_ClockConfig+0x270>)
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d1a:	f7fe fc9b 	bl	8000654 <HAL_GetTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	e009      	b.n	8001d38 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d24:	f7fe fc96 	bl	8000654 <HAL_GetTick>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	4a28      	ldr	r2, [pc, #160]	@ (8001dd0 <HAL_RCC_ClockConfig+0x274>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e044      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d38:	4b24      	ldr	r3, [pc, #144]	@ (8001dcc <HAL_RCC_ClockConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4013      	ands	r3, r2
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d1ee      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d009      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4a20      	ldr	r2, [pc, #128]	@ (8001dd8 <HAL_RCC_ClockConfig+0x27c>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	0019      	movs	r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2208      	movs	r2, #8
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d00a      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d6e:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	4a1a      	ldr	r2, [pc, #104]	@ (8001ddc <HAL_RCC_ClockConfig+0x280>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	00da      	lsls	r2, r3, #3
 8001d7e:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001d80:	430a      	orrs	r2, r1
 8001d82:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d84:	f000 f832 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001d88:	0001      	movs	r1, r0
 8001d8a:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	220f      	movs	r2, #15
 8001d92:	4013      	ands	r3, r2
 8001d94:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <HAL_RCC_ClockConfig+0x284>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	000a      	movs	r2, r1
 8001d9a:	40da      	lsrs	r2, r3
 8001d9c:	4b11      	ldr	r3, [pc, #68]	@ (8001de4 <HAL_RCC_ClockConfig+0x288>)
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <HAL_RCC_ClockConfig+0x28c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	250b      	movs	r5, #11
 8001da6:	197c      	adds	r4, r7, r5
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7fe fc0d 	bl	80005c8 <HAL_InitTick>
 8001dae:	0003      	movs	r3, r0
 8001db0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001db2:	197b      	adds	r3, r7, r5
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001dba:	197b      	adds	r3, r7, r5
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	e000      	b.n	8001dc2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b004      	add	sp, #16
 8001dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	40022000 	.word	0x40022000
 8001dd0:	00001388 	.word	0x00001388
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	fffff8ff 	.word	0xfffff8ff
 8001ddc:	ffffc7ff 	.word	0xffffc7ff
 8001de0:	08001f68 	.word	0x08001f68
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001df2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d013      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0x3e>
 8001e02:	d85c      	bhi.n	8001ebe <HAL_RCC_GetSysClockFreq+0xd2>
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d002      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0x22>
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d00b      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x38>
 8001e0c:	e057      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e0e:	4b35      	ldr	r3, [pc, #212]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2210      	movs	r2, #16
 8001e14:	4013      	ands	r3, r2
 8001e16:	d002      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e18:	4b33      	ldr	r3, [pc, #204]	@ (8001ee8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e1a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e1c:	e05d      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001e1e:	4b33      	ldr	r3, [pc, #204]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x100>)
 8001e20:	613b      	str	r3, [r7, #16]
      break;
 8001e22:	e05a      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e24:	4b32      	ldr	r3, [pc, #200]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e26:	613b      	str	r3, [r7, #16]
      break;
 8001e28:	e057      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	0c9b      	lsrs	r3, r3, #18
 8001e2e:	220f      	movs	r2, #15
 8001e30:	4013      	ands	r3, r2
 8001e32:	4a30      	ldr	r2, [pc, #192]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e34:	5cd3      	ldrb	r3, [r2, r3]
 8001e36:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	0d9b      	lsrs	r3, r3, #22
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	4013      	ands	r3, r2
 8001e40:	3301      	adds	r3, #1
 8001e42:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e44:	4b27      	ldr	r3, [pc, #156]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	025b      	lsls	r3, r3, #9
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d00f      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	000a      	movs	r2, r1
 8001e54:	0152      	lsls	r2, r2, #5
 8001e56:	1a52      	subs	r2, r2, r1
 8001e58:	0193      	lsls	r3, r2, #6
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	185b      	adds	r3, r3, r1
 8001e60:	025b      	lsls	r3, r3, #9
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	0018      	movs	r0, r3
 8001e66:	f7fe f94f 	bl	8000108 <__udivsi3>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	e023      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2210      	movs	r2, #16
 8001e76:	4013      	ands	r3, r2
 8001e78:	d00f      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	000a      	movs	r2, r1
 8001e7e:	0152      	lsls	r2, r2, #5
 8001e80:	1a52      	subs	r2, r2, r1
 8001e82:	0193      	lsls	r3, r2, #6
 8001e84:	1a9b      	subs	r3, r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	185b      	adds	r3, r3, r1
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f7fe f93a 	bl	8000108 <__udivsi3>
 8001e94:	0003      	movs	r3, r0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e00e      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	000a      	movs	r2, r1
 8001e9e:	0152      	lsls	r2, r2, #5
 8001ea0:	1a52      	subs	r2, r2, r1
 8001ea2:	0193      	lsls	r3, r2, #6
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	185b      	adds	r3, r3, r1
 8001eaa:	029b      	lsls	r3, r3, #10
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7fe f92a 	bl	8000108 <__udivsi3>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	613b      	str	r3, [r7, #16]
      break;
 8001ebc:	e00d      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	0b5b      	lsrs	r3, r3, #13
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	2280      	movs	r2, #128	@ 0x80
 8001ed0:	0212      	lsls	r2, r2, #8
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
      break;
 8001ed8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001eda:	693b      	ldr	r3, [r7, #16]
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b006      	add	sp, #24
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	003d0900 	.word	0x003d0900
 8001eec:	00f42400 	.word	0x00f42400
 8001ef0:	007a1200 	.word	0x007a1200
 8001ef4:	08001f78 	.word	0x08001f78

08001ef8 <memset>:
 8001ef8:	0003      	movs	r3, r0
 8001efa:	1882      	adds	r2, r0, r2
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d100      	bne.n	8001f02 <memset+0xa>
 8001f00:	4770      	bx	lr
 8001f02:	7019      	strb	r1, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	e7f9      	b.n	8001efc <memset+0x4>

08001f08 <__libc_init_array>:
 8001f08:	b570      	push	{r4, r5, r6, lr}
 8001f0a:	2600      	movs	r6, #0
 8001f0c:	4c0c      	ldr	r4, [pc, #48]	@ (8001f40 <__libc_init_array+0x38>)
 8001f0e:	4d0d      	ldr	r5, [pc, #52]	@ (8001f44 <__libc_init_array+0x3c>)
 8001f10:	1b64      	subs	r4, r4, r5
 8001f12:	10a4      	asrs	r4, r4, #2
 8001f14:	42a6      	cmp	r6, r4
 8001f16:	d109      	bne.n	8001f2c <__libc_init_array+0x24>
 8001f18:	2600      	movs	r6, #0
 8001f1a:	f000 f819 	bl	8001f50 <_init>
 8001f1e:	4c0a      	ldr	r4, [pc, #40]	@ (8001f48 <__libc_init_array+0x40>)
 8001f20:	4d0a      	ldr	r5, [pc, #40]	@ (8001f4c <__libc_init_array+0x44>)
 8001f22:	1b64      	subs	r4, r4, r5
 8001f24:	10a4      	asrs	r4, r4, #2
 8001f26:	42a6      	cmp	r6, r4
 8001f28:	d105      	bne.n	8001f36 <__libc_init_array+0x2e>
 8001f2a:	bd70      	pop	{r4, r5, r6, pc}
 8001f2c:	00b3      	lsls	r3, r6, #2
 8001f2e:	58eb      	ldr	r3, [r5, r3]
 8001f30:	4798      	blx	r3
 8001f32:	3601      	adds	r6, #1
 8001f34:	e7ee      	b.n	8001f14 <__libc_init_array+0xc>
 8001f36:	00b3      	lsls	r3, r6, #2
 8001f38:	58eb      	ldr	r3, [r5, r3]
 8001f3a:	4798      	blx	r3
 8001f3c:	3601      	adds	r6, #1
 8001f3e:	e7f2      	b.n	8001f26 <__libc_init_array+0x1e>
 8001f40:	08001f84 	.word	0x08001f84
 8001f44:	08001f84 	.word	0x08001f84
 8001f48:	08001f88 	.word	0x08001f88
 8001f4c:	08001f84 	.word	0x08001f84

08001f50 <_init>:
 8001f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f56:	bc08      	pop	{r3}
 8001f58:	469e      	mov	lr, r3
 8001f5a:	4770      	bx	lr

08001f5c <_fini>:
 8001f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f62:	bc08      	pop	{r3}
 8001f64:	469e      	mov	lr, r3
 8001f66:	4770      	bx	lr

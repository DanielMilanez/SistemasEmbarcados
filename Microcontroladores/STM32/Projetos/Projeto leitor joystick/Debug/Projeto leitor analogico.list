
Projeto leitor analogico.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002a68  08002a68  00003a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aa0  08002aa0  0000401c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002aa0  08002aa0  0000401c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002aa0  08002aa0  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aa0  08002aa0  00003aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002aa4  08002aa4  00003aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08002aa8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000001c  08002ac4  0000401c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002ac4  000040a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ff6  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000135e  00000000  00000000  0000903a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000508  00000000  00000000  0000a398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003b6  00000000  00000000  0000a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000133ce  00000000  00000000  0000ac56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000066f2  00000000  00000000  0001e024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076f52  00000000  00000000  00024716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b668  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010a0  00000000  00000000  0009b6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0009c74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a50 	.word	0x08002a50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08002a50 	.word	0x08002a50

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fddc 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f816 	bl	800026c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f8d6 	bl	80003f0 <MX_GPIO_Init>
  MX_ADC_Init();
 8000244:	f000 f862 	bl	800030c <MX_ADC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  Verify_move();
 8000248:	f000 fc72 	bl	8000b30 <Verify_move>

	  if (mode == 0) Arrow(state);
 800024c:	4b05      	ldr	r3, [pc, #20]	@ (8000264 <main+0x30>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d104      	bne.n	800025e <main+0x2a>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <main+0x34>)
 8000256:	0018      	movs	r0, r3
 8000258:	f000 fada 	bl	8000810 <Arrow>
 800025c:	e7f4      	b.n	8000248 <main+0x14>
	  else Snake();
 800025e:	f000 fcdf 	bl	8000c20 <Snake>
	  Verify_move();
 8000262:	e7f1      	b.n	8000248 <main+0x14>
 8000264:	2000009c 	.word	0x2000009c
 8000268:	20000004 	.word	0x20000004

0800026c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b095      	sub	sp, #84	@ 0x54
 8000270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000272:	2418      	movs	r4, #24
 8000274:	193b      	adds	r3, r7, r4
 8000276:	0018      	movs	r0, r3
 8000278:	2338      	movs	r3, #56	@ 0x38
 800027a:	001a      	movs	r2, r3
 800027c:	2100      	movs	r1, #0
 800027e:	f002 fbbb 	bl	80029f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	0018      	movs	r0, r3
 8000286:	2314      	movs	r3, #20
 8000288:	001a      	movs	r2, r3
 800028a:	2100      	movs	r1, #0
 800028c:	f002 fbb4 	bl	80029f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000290:	4b1c      	ldr	r3, [pc, #112]	@ (8000304 <SystemClock_Config+0x98>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a1c      	ldr	r2, [pc, #112]	@ (8000308 <SystemClock_Config+0x9c>)
 8000296:	401a      	ands	r2, r3
 8000298:	4b1a      	ldr	r3, [pc, #104]	@ (8000304 <SystemClock_Config+0x98>)
 800029a:	2180      	movs	r1, #128	@ 0x80
 800029c:	0109      	lsls	r1, r1, #4
 800029e:	430a      	orrs	r2, r1
 80002a0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a2:	0021      	movs	r1, r4
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2202      	movs	r2, #2
 80002a8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2201      	movs	r2, #1
 80002ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2210      	movs	r2, #16
 80002b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 fe08 	bl	8001ed4 <HAL_RCC_OscConfig>
 80002c4:	1e03      	subs	r3, r0, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x60>
  {
    Error_Handler();
 80002c8:	f000 fcd6 	bl	8000c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	220f      	movs	r2, #15
 80002d0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2201      	movs	r2, #1
 80002d6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	2280      	movs	r2, #128	@ 0x80
 80002dc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2100      	movs	r1, #0
 80002ee:	0018      	movs	r0, r3
 80002f0:	f002 f9b4 	bl	800265c <HAL_RCC_ClockConfig>
 80002f4:	1e03      	subs	r3, r0, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002f8:	f000 fcbe 	bl	8000c78 <Error_Handler>
  }
}
 80002fc:	46c0      	nop			@ (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	b015      	add	sp, #84	@ 0x54
 8000302:	bd90      	pop	{r4, r7, pc}
 8000304:	40007000 	.word	0x40007000
 8000308:	ffffe7ff 	.word	0xffffe7ff

0800030c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000312:	003b      	movs	r3, r7
 8000314:	0018      	movs	r0, r3
 8000316:	2308      	movs	r3, #8
 8000318:	001a      	movs	r2, r3
 800031a:	2100      	movs	r1, #0
 800031c:	f002 fb6c 	bl	80029f8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000320:	4b30      	ldr	r3, [pc, #192]	@ (80003e4 <MX_ADC_Init+0xd8>)
 8000322:	4a31      	ldr	r2, [pc, #196]	@ (80003e8 <MX_ADC_Init+0xdc>)
 8000324:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000326:	4b2f      	ldr	r3, [pc, #188]	@ (80003e4 <MX_ADC_Init+0xd8>)
 8000328:	2200      	movs	r2, #0
 800032a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800032c:	4b2d      	ldr	r3, [pc, #180]	@ (80003e4 <MX_ADC_Init+0xd8>)
 800032e:	2280      	movs	r2, #128	@ 0x80
 8000330:	05d2      	lsls	r2, r2, #23
 8000332:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000334:	4b2b      	ldr	r3, [pc, #172]	@ (80003e4 <MX_ADC_Init+0xd8>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 800033a:	4b2a      	ldr	r3, [pc, #168]	@ (80003e4 <MX_ADC_Init+0xd8>)
 800033c:	2207      	movs	r2, #7
 800033e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000340:	4b28      	ldr	r3, [pc, #160]	@ (80003e4 <MX_ADC_Init+0xd8>)
 8000342:	2201      	movs	r2, #1
 8000344:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000346:	4b27      	ldr	r3, [pc, #156]	@ (80003e4 <MX_ADC_Init+0xd8>)
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800034c:	4b25      	ldr	r3, [pc, #148]	@ (80003e4 <MX_ADC_Init+0xd8>)
 800034e:	2220      	movs	r2, #32
 8000350:	2101      	movs	r1, #1
 8000352:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000354:	4b23      	ldr	r3, [pc, #140]	@ (80003e4 <MX_ADC_Init+0xd8>)
 8000356:	2221      	movs	r2, #33	@ 0x21
 8000358:	2100      	movs	r1, #0
 800035a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800035c:	4b21      	ldr	r3, [pc, #132]	@ (80003e4 <MX_ADC_Init+0xd8>)
 800035e:	2200      	movs	r2, #0
 8000360:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000362:	4b20      	ldr	r3, [pc, #128]	@ (80003e4 <MX_ADC_Init+0xd8>)
 8000364:	22c2      	movs	r2, #194	@ 0xc2
 8000366:	32ff      	adds	r2, #255	@ 0xff
 8000368:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800036a:	4b1e      	ldr	r3, [pc, #120]	@ (80003e4 <MX_ADC_Init+0xd8>)
 800036c:	222c      	movs	r2, #44	@ 0x2c
 800036e:	2100      	movs	r1, #0
 8000370:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000372:	4b1c      	ldr	r3, [pc, #112]	@ (80003e4 <MX_ADC_Init+0xd8>)
 8000374:	2204      	movs	r2, #4
 8000376:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000378:	4b1a      	ldr	r3, [pc, #104]	@ (80003e4 <MX_ADC_Init+0xd8>)
 800037a:	2200      	movs	r2, #0
 800037c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800037e:	4b19      	ldr	r3, [pc, #100]	@ (80003e4 <MX_ADC_Init+0xd8>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000384:	4b17      	ldr	r3, [pc, #92]	@ (80003e4 <MX_ADC_Init+0xd8>)
 8000386:	2200      	movs	r2, #0
 8000388:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800038a:	4b16      	ldr	r3, [pc, #88]	@ (80003e4 <MX_ADC_Init+0xd8>)
 800038c:	2200      	movs	r2, #0
 800038e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000390:	4b14      	ldr	r3, [pc, #80]	@ (80003e4 <MX_ADC_Init+0xd8>)
 8000392:	0018      	movs	r0, r3
 8000394:	f000 fdc2 	bl	8000f1c <HAL_ADC_Init>
 8000398:	1e03      	subs	r3, r0, #0
 800039a:	d001      	beq.n	80003a0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800039c:	f000 fc6c 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003a0:	003b      	movs	r3, r7
 80003a2:	2201      	movs	r2, #1
 80003a4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003a6:	003b      	movs	r3, r7
 80003a8:	2280      	movs	r2, #128	@ 0x80
 80003aa:	0152      	lsls	r2, r2, #5
 80003ac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003ae:	003a      	movs	r2, r7
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <MX_ADC_Init+0xd8>)
 80003b2:	0011      	movs	r1, r2
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 f923 	bl	8001600 <HAL_ADC_ConfigChannel>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80003be:	f000 fc5b 	bl	8000c78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003c2:	003b      	movs	r3, r7
 80003c4:	4a09      	ldr	r2, [pc, #36]	@ (80003ec <MX_ADC_Init+0xe0>)
 80003c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003c8:	003a      	movs	r2, r7
 80003ca:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <MX_ADC_Init+0xd8>)
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 f916 	bl	8001600 <HAL_ADC_ConfigChannel>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80003d8:	f000 fc4e 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80003dc:	46c0      	nop			@ (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b002      	add	sp, #8
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	20000038 	.word	0x20000038
 80003e8:	40012400 	.word	0x40012400
 80003ec:	04000002 	.word	0x04000002

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b089      	sub	sp, #36	@ 0x24
 80003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	240c      	movs	r4, #12
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	0018      	movs	r0, r3
 80003fc:	2314      	movs	r3, #20
 80003fe:	001a      	movs	r2, r3
 8000400:	2100      	movs	r1, #0
 8000402:	f002 faf9 	bl	80029f8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000406:	4b49      	ldr	r3, [pc, #292]	@ (800052c <MX_GPIO_Init+0x13c>)
 8000408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800040a:	4b48      	ldr	r3, [pc, #288]	@ (800052c <MX_GPIO_Init+0x13c>)
 800040c:	2101      	movs	r1, #1
 800040e:	430a      	orrs	r2, r1
 8000410:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000412:	4b46      	ldr	r3, [pc, #280]	@ (800052c <MX_GPIO_Init+0x13c>)
 8000414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000416:	2201      	movs	r2, #1
 8000418:	4013      	ands	r3, r2
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041e:	4b43      	ldr	r3, [pc, #268]	@ (800052c <MX_GPIO_Init+0x13c>)
 8000420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000422:	4b42      	ldr	r3, [pc, #264]	@ (800052c <MX_GPIO_Init+0x13c>)
 8000424:	2104      	movs	r1, #4
 8000426:	430a      	orrs	r2, r1
 8000428:	62da      	str	r2, [r3, #44]	@ 0x2c
 800042a:	4b40      	ldr	r3, [pc, #256]	@ (800052c <MX_GPIO_Init+0x13c>)
 800042c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800042e:	2204      	movs	r2, #4
 8000430:	4013      	ands	r3, r2
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b3d      	ldr	r3, [pc, #244]	@ (800052c <MX_GPIO_Init+0x13c>)
 8000438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800043a:	4b3c      	ldr	r3, [pc, #240]	@ (800052c <MX_GPIO_Init+0x13c>)
 800043c:	2102      	movs	r1, #2
 800043e:	430a      	orrs	r2, r1
 8000440:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000442:	4b3a      	ldr	r3, [pc, #232]	@ (800052c <MX_GPIO_Init+0x13c>)
 8000444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000446:	2202      	movs	r2, #2
 8000448:	4013      	ands	r3, r2
 800044a:	603b      	str	r3, [r7, #0]
 800044c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SLCT_03_Pin|SLCT_04_Pin|SLCT_05_Pin|SLCT_08_Pin
 800044e:	23d7      	movs	r3, #215	@ 0xd7
 8000450:	0159      	lsls	r1, r3, #5
 8000452:	23a0      	movs	r3, #160	@ 0xa0
 8000454:	05db      	lsls	r3, r3, #23
 8000456:	2200      	movs	r2, #0
 8000458:	0018      	movs	r0, r3
 800045a:	f001 fd01 	bl	8001e60 <HAL_GPIO_WritePin>
                          |SLCRD_05_Pin|SLCRD_04_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SLCRD_03_Pin|SLCRD_02_Pin|SLCT_07_Pin|SLCRD_01_Pin, GPIO_PIN_RESET);
 800045e:	23f0      	movs	r3, #240	@ 0xf0
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	4833      	ldr	r0, [pc, #204]	@ (8000530 <MX_GPIO_Init+0x140>)
 8000464:	2200      	movs	r2, #0
 8000466:	0019      	movs	r1, r3
 8000468:	f001 fcfa 	bl	8001e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SLCRD_08_Pin|SLCRD_07_Pin|SLCRD_06_Pin|SLCT_06_Pin
 800046c:	4931      	ldr	r1, [pc, #196]	@ (8000534 <MX_GPIO_Init+0x144>)
 800046e:	4b32      	ldr	r3, [pc, #200]	@ (8000538 <MX_GPIO_Init+0x148>)
 8000470:	2200      	movs	r2, #0
 8000472:	0018      	movs	r0, r3
 8000474:	f001 fcf4 	bl	8001e60 <HAL_GPIO_WritePin>
                          |SLCT_01_Pin|SLCT_02_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SLCT_03_Pin SLCT_04_Pin SLCT_05_Pin SLCT_08_Pin
                           SLCRD_05_Pin SLCRD_04_Pin */
  GPIO_InitStruct.Pin = SLCT_03_Pin|SLCT_04_Pin|SLCT_05_Pin|SLCT_08_Pin
 8000478:	193b      	adds	r3, r7, r4
 800047a:	22d7      	movs	r2, #215	@ 0xd7
 800047c:	0152      	lsls	r2, r2, #5
 800047e:	601a      	str	r2, [r3, #0]
                          |SLCRD_05_Pin|SLCRD_04_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000480:	193b      	adds	r3, r7, r4
 8000482:	2201      	movs	r2, #1
 8000484:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000492:	193a      	adds	r2, r7, r4
 8000494:	23a0      	movs	r3, #160	@ 0xa0
 8000496:	05db      	lsls	r3, r3, #23
 8000498:	0011      	movs	r1, r2
 800049a:	0018      	movs	r0, r3
 800049c:	f001 fb6a 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SLCRD_03_Pin SLCRD_02_Pin SLCT_07_Pin SLCRD_01_Pin */
  GPIO_InitStruct.Pin = SLCRD_03_Pin|SLCRD_02_Pin|SLCT_07_Pin|SLCRD_01_Pin;
 80004a0:	0021      	movs	r1, r4
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	22f0      	movs	r2, #240	@ 0xf0
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	000c      	movs	r4, r1
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2201      	movs	r2, #1
 80004b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000530 <MX_GPIO_Init+0x140>)
 80004c2:	0019      	movs	r1, r3
 80004c4:	0010      	movs	r0, r2
 80004c6:	f001 fb55 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : SLCRD_08_Pin SLCRD_07_Pin SLCRD_06_Pin SLCT_06_Pin
                           SLCT_01_Pin SLCT_02_Pin */
  GPIO_InitStruct.Pin = SLCRD_08_Pin|SLCRD_07_Pin|SLCRD_06_Pin|SLCT_06_Pin
 80004ca:	193b      	adds	r3, r7, r4
 80004cc:	4a19      	ldr	r2, [pc, #100]	@ (8000534 <MX_GPIO_Init+0x144>)
 80004ce:	601a      	str	r2, [r3, #0]
                          |SLCT_01_Pin|SLCT_02_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2201      	movs	r2, #1
 80004d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	4a14      	ldr	r2, [pc, #80]	@ (8000538 <MX_GPIO_Init+0x148>)
 80004e6:	0019      	movs	r1, r3
 80004e8:	0010      	movs	r0, r2
 80004ea:	f001 fb43 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_BTN_Pin */
  GPIO_InitStruct.Pin = SW_BTN_Pin;
 80004ee:	0021      	movs	r1, r4
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2280      	movs	r2, #128	@ 0x80
 80004f4:	0052      	lsls	r2, r2, #1
 80004f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2288      	movs	r2, #136	@ 0x88
 80004fc:	0352      	lsls	r2, r2, #13
 80004fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2202      	movs	r2, #2
 8000504:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_BTN_GPIO_Port, &GPIO_InitStruct);
 8000506:	187a      	adds	r2, r7, r1
 8000508:	23a0      	movs	r3, #160	@ 0xa0
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fb30 	bl	8001b74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000514:	2200      	movs	r2, #0
 8000516:	2100      	movs	r1, #0
 8000518:	2007      	movs	r0, #7
 800051a:	f001 faf9 	bl	8001b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800051e:	2007      	movs	r0, #7
 8000520:	f001 fb0b 	bl	8001b3a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b009      	add	sp, #36	@ 0x24
 800052a:	bd90      	pop	{r4, r7, pc}
 800052c:	40021000 	.word	0x40021000
 8000530:	50000800 	.word	0x50000800
 8000534:	00001b44 	.word	0x00001b44
 8000538:	50000400 	.word	0x50000400

0800053c <Interpreter>:

/* USER CODE BEGIN 4 */
void Interpreter(uint8_t data, uint8_t select){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	0002      	movs	r2, r0
 8000544:	1dfb      	adds	r3, r7, #7
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	1dbb      	adds	r3, r7, #6
 800054a:	1c0a      	adds	r2, r1, #0
 800054c:	701a      	strb	r2, [r3, #0]
	PORT.P0 = (data >> 0) & 1;
 800054e:	1dfb      	adds	r3, r7, #7
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2201      	movs	r2, #1
 8000554:	4013      	ands	r3, r2
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4baa      	ldr	r3, [pc, #680]	@ (8000804 <Interpreter+0x2c8>)
 800055a:	2101      	movs	r1, #1
 800055c:	400a      	ands	r2, r1
 800055e:	0010      	movs	r0, r2
 8000560:	781a      	ldrb	r2, [r3, #0]
 8000562:	2101      	movs	r1, #1
 8000564:	438a      	bics	r2, r1
 8000566:	1c11      	adds	r1, r2, #0
 8000568:	1c02      	adds	r2, r0, #0
 800056a:	430a      	orrs	r2, r1
 800056c:	701a      	strb	r2, [r3, #0]
	PORT.P1 = (data >> 1) & 1;
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	085b      	lsrs	r3, r3, #1
 8000574:	b2db      	uxtb	r3, r3
 8000576:	1c1a      	adds	r2, r3, #0
 8000578:	2301      	movs	r3, #1
 800057a:	4013      	ands	r3, r2
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4ba1      	ldr	r3, [pc, #644]	@ (8000804 <Interpreter+0x2c8>)
 8000580:	2101      	movs	r1, #1
 8000582:	400a      	ands	r2, r1
 8000584:	1890      	adds	r0, r2, r2
 8000586:	781a      	ldrb	r2, [r3, #0]
 8000588:	2102      	movs	r1, #2
 800058a:	438a      	bics	r2, r1
 800058c:	1c11      	adds	r1, r2, #0
 800058e:	1c02      	adds	r2, r0, #0
 8000590:	430a      	orrs	r2, r1
 8000592:	701a      	strb	r2, [r3, #0]
	PORT.P2 = (data >> 2) & 1;
 8000594:	1dfb      	adds	r3, r7, #7
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	089b      	lsrs	r3, r3, #2
 800059a:	b2db      	uxtb	r3, r3
 800059c:	1c1a      	adds	r2, r3, #0
 800059e:	2301      	movs	r3, #1
 80005a0:	4013      	ands	r3, r2
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b97      	ldr	r3, [pc, #604]	@ (8000804 <Interpreter+0x2c8>)
 80005a6:	2101      	movs	r1, #1
 80005a8:	400a      	ands	r2, r1
 80005aa:	0090      	lsls	r0, r2, #2
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	2104      	movs	r1, #4
 80005b0:	438a      	bics	r2, r1
 80005b2:	1c11      	adds	r1, r2, #0
 80005b4:	1c02      	adds	r2, r0, #0
 80005b6:	430a      	orrs	r2, r1
 80005b8:	701a      	strb	r2, [r3, #0]
	PORT.P3 = (data >> 3) & 1;
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	08db      	lsrs	r3, r3, #3
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	1c1a      	adds	r2, r3, #0
 80005c4:	2301      	movs	r3, #1
 80005c6:	4013      	ands	r3, r2
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b8e      	ldr	r3, [pc, #568]	@ (8000804 <Interpreter+0x2c8>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	400a      	ands	r2, r1
 80005d0:	00d0      	lsls	r0, r2, #3
 80005d2:	781a      	ldrb	r2, [r3, #0]
 80005d4:	2108      	movs	r1, #8
 80005d6:	438a      	bics	r2, r1
 80005d8:	1c11      	adds	r1, r2, #0
 80005da:	1c02      	adds	r2, r0, #0
 80005dc:	430a      	orrs	r2, r1
 80005de:	701a      	strb	r2, [r3, #0]
	PORT.P4 = (data >> 4) & 1;
 80005e0:	1dfb      	adds	r3, r7, #7
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	091b      	lsrs	r3, r3, #4
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	1c1a      	adds	r2, r3, #0
 80005ea:	2301      	movs	r3, #1
 80005ec:	4013      	ands	r3, r2
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b84      	ldr	r3, [pc, #528]	@ (8000804 <Interpreter+0x2c8>)
 80005f2:	2101      	movs	r1, #1
 80005f4:	400a      	ands	r2, r1
 80005f6:	0110      	lsls	r0, r2, #4
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	2110      	movs	r1, #16
 80005fc:	438a      	bics	r2, r1
 80005fe:	1c11      	adds	r1, r2, #0
 8000600:	1c02      	adds	r2, r0, #0
 8000602:	430a      	orrs	r2, r1
 8000604:	701a      	strb	r2, [r3, #0]
	PORT.P5 = (data >> 5) & 1;
 8000606:	1dfb      	adds	r3, r7, #7
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	095b      	lsrs	r3, r3, #5
 800060c:	b2db      	uxtb	r3, r3
 800060e:	1c1a      	adds	r2, r3, #0
 8000610:	2301      	movs	r3, #1
 8000612:	4013      	ands	r3, r2
 8000614:	b2da      	uxtb	r2, r3
 8000616:	4b7b      	ldr	r3, [pc, #492]	@ (8000804 <Interpreter+0x2c8>)
 8000618:	2101      	movs	r1, #1
 800061a:	400a      	ands	r2, r1
 800061c:	0150      	lsls	r0, r2, #5
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	2120      	movs	r1, #32
 8000622:	438a      	bics	r2, r1
 8000624:	1c11      	adds	r1, r2, #0
 8000626:	1c02      	adds	r2, r0, #0
 8000628:	430a      	orrs	r2, r1
 800062a:	701a      	strb	r2, [r3, #0]
	PORT.P6 = (data >> 6) & 1;
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	099b      	lsrs	r3, r3, #6
 8000632:	b2db      	uxtb	r3, r3
 8000634:	1c1a      	adds	r2, r3, #0
 8000636:	2301      	movs	r3, #1
 8000638:	4013      	ands	r3, r2
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b71      	ldr	r3, [pc, #452]	@ (8000804 <Interpreter+0x2c8>)
 800063e:	2101      	movs	r1, #1
 8000640:	400a      	ands	r2, r1
 8000642:	0190      	lsls	r0, r2, #6
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	2140      	movs	r1, #64	@ 0x40
 8000648:	438a      	bics	r2, r1
 800064a:	1c11      	adds	r1, r2, #0
 800064c:	1c02      	adds	r2, r0, #0
 800064e:	430a      	orrs	r2, r1
 8000650:	701a      	strb	r2, [r3, #0]
	PORT.P7 = (data >> 7) & 1;
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	09db      	lsrs	r3, r3, #7
 8000658:	b2db      	uxtb	r3, r3
 800065a:	1c1a      	adds	r2, r3, #0
 800065c:	2301      	movs	r3, #1
 800065e:	4013      	ands	r3, r2
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b68      	ldr	r3, [pc, #416]	@ (8000804 <Interpreter+0x2c8>)
 8000664:	01d0      	lsls	r0, r2, #7
 8000666:	781a      	ldrb	r2, [r3, #0]
 8000668:	217f      	movs	r1, #127	@ 0x7f
 800066a:	400a      	ands	r2, r1
 800066c:	1c11      	adds	r1, r2, #0
 800066e:	1c02      	adds	r2, r0, #0
 8000670:	430a      	orrs	r2, r1
 8000672:	701a      	strb	r2, [r3, #0]

	if (select){
 8000674:	1dbb      	adds	r3, r7, #6
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d05f      	beq.n	800073c <Interpreter+0x200>
		HAL_GPIO_WritePin(SLCT_01_GPIO_Port, SLCT_01_Pin, PORT.P0);
 800067c:	4b61      	ldr	r3, [pc, #388]	@ (8000804 <Interpreter+0x2c8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	07db      	lsls	r3, r3, #31
 8000682:	0fdb      	lsrs	r3, r3, #31
 8000684:	b2db      	uxtb	r3, r3
 8000686:	001a      	movs	r2, r3
 8000688:	2380      	movs	r3, #128	@ 0x80
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	485e      	ldr	r0, [pc, #376]	@ (8000808 <Interpreter+0x2cc>)
 800068e:	0019      	movs	r1, r3
 8000690:	f001 fbe6 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCT_02_GPIO_Port, SLCT_02_Pin, PORT.P1);
 8000694:	4b5b      	ldr	r3, [pc, #364]	@ (8000804 <Interpreter+0x2c8>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	079b      	lsls	r3, r3, #30
 800069a:	0fdb      	lsrs	r3, r3, #31
 800069c:	b2db      	uxtb	r3, r3
 800069e:	001a      	movs	r2, r3
 80006a0:	2380      	movs	r3, #128	@ 0x80
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	4858      	ldr	r0, [pc, #352]	@ (8000808 <Interpreter+0x2cc>)
 80006a6:	0019      	movs	r1, r3
 80006a8:	f001 fbda 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCT_03_GPIO_Port, SLCT_03_Pin, PORT.P2);
 80006ac:	4b55      	ldr	r3, [pc, #340]	@ (8000804 <Interpreter+0x2c8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	075b      	lsls	r3, r3, #29
 80006b2:	0fdb      	lsrs	r3, r3, #31
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	001a      	movs	r2, r3
 80006b8:	23a0      	movs	r3, #160	@ 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	2120      	movs	r1, #32
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 fbce 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCT_04_GPIO_Port, SLCT_04_Pin, PORT.P3);
 80006c4:	4b4f      	ldr	r3, [pc, #316]	@ (8000804 <Interpreter+0x2c8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	071b      	lsls	r3, r3, #28
 80006ca:	0fdb      	lsrs	r3, r3, #31
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	001a      	movs	r2, r3
 80006d0:	23a0      	movs	r3, #160	@ 0xa0
 80006d2:	05db      	lsls	r3, r3, #23
 80006d4:	2140      	movs	r1, #64	@ 0x40
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 fbc2 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCT_05_GPIO_Port, SLCT_05_Pin, PORT.P4);
 80006dc:	4b49      	ldr	r3, [pc, #292]	@ (8000804 <Interpreter+0x2c8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	06db      	lsls	r3, r3, #27
 80006e2:	0fdb      	lsrs	r3, r3, #31
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	001a      	movs	r2, r3
 80006e8:	23a0      	movs	r3, #160	@ 0xa0
 80006ea:	05db      	lsls	r3, r3, #23
 80006ec:	2180      	movs	r1, #128	@ 0x80
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 fbb6 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCT_06_GPIO_Port, SLCT_06_Pin, PORT.P5);
 80006f4:	4b43      	ldr	r3, [pc, #268]	@ (8000804 <Interpreter+0x2c8>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	069b      	lsls	r3, r3, #26
 80006fa:	0fdb      	lsrs	r3, r3, #31
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	001a      	movs	r2, r3
 8000700:	4b41      	ldr	r3, [pc, #260]	@ (8000808 <Interpreter+0x2cc>)
 8000702:	2140      	movs	r1, #64	@ 0x40
 8000704:	0018      	movs	r0, r3
 8000706:	f001 fbab 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCT_07_GPIO_Port, SLCT_07_Pin, PORT.P6);
 800070a:	4b3e      	ldr	r3, [pc, #248]	@ (8000804 <Interpreter+0x2c8>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	065b      	lsls	r3, r3, #25
 8000710:	0fdb      	lsrs	r3, r3, #31
 8000712:	b2db      	uxtb	r3, r3
 8000714:	001a      	movs	r2, r3
 8000716:	4b3d      	ldr	r3, [pc, #244]	@ (800080c <Interpreter+0x2d0>)
 8000718:	2180      	movs	r1, #128	@ 0x80
 800071a:	0018      	movs	r0, r3
 800071c:	f001 fba0 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCT_08_GPIO_Port, SLCT_08_Pin, PORT.P7);
 8000720:	4b38      	ldr	r3, [pc, #224]	@ (8000804 <Interpreter+0x2c8>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	061b      	lsls	r3, r3, #24
 8000726:	0fdb      	lsrs	r3, r3, #31
 8000728:	b2db      	uxtb	r3, r3
 800072a:	001a      	movs	r2, r3
 800072c:	2380      	movs	r3, #128	@ 0x80
 800072e:	0099      	lsls	r1, r3, #2
 8000730:	23a0      	movs	r3, #160	@ 0xa0
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	0018      	movs	r0, r3
 8000736:	f001 fb93 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCRD_06_GPIO_Port, SLCRD_06_Pin, PORT.P5);
		HAL_GPIO_WritePin(SLCRD_07_GPIO_Port, SLCRD_07_Pin, PORT.P6);
		HAL_GPIO_WritePin(SLCRD_08_GPIO_Port, SLCRD_08_Pin, PORT.P7);
	}

}
 800073a:	e05e      	b.n	80007fa <Interpreter+0x2be>
		HAL_GPIO_WritePin(SLCRD_01_GPIO_Port, SLCRD_01_Pin, PORT.P0);
 800073c:	4b31      	ldr	r3, [pc, #196]	@ (8000804 <Interpreter+0x2c8>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	07db      	lsls	r3, r3, #31
 8000742:	0fdb      	lsrs	r3, r3, #31
 8000744:	b2db      	uxtb	r3, r3
 8000746:	001a      	movs	r2, r3
 8000748:	2380      	movs	r3, #128	@ 0x80
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	482f      	ldr	r0, [pc, #188]	@ (800080c <Interpreter+0x2d0>)
 800074e:	0019      	movs	r1, r3
 8000750:	f001 fb86 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCRD_02_GPIO_Port, SLCRD_02_Pin, PORT.P1);
 8000754:	4b2b      	ldr	r3, [pc, #172]	@ (8000804 <Interpreter+0x2c8>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	079b      	lsls	r3, r3, #30
 800075a:	0fdb      	lsrs	r3, r3, #31
 800075c:	b2db      	uxtb	r3, r3
 800075e:	001a      	movs	r2, r3
 8000760:	4b2a      	ldr	r3, [pc, #168]	@ (800080c <Interpreter+0x2d0>)
 8000762:	2140      	movs	r1, #64	@ 0x40
 8000764:	0018      	movs	r0, r3
 8000766:	f001 fb7b 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCRD_03_GPIO_Port, SLCRD_03_Pin, PORT.P2);
 800076a:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <Interpreter+0x2c8>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	075b      	lsls	r3, r3, #29
 8000770:	0fdb      	lsrs	r3, r3, #31
 8000772:	b2db      	uxtb	r3, r3
 8000774:	001a      	movs	r2, r3
 8000776:	4b25      	ldr	r3, [pc, #148]	@ (800080c <Interpreter+0x2d0>)
 8000778:	2120      	movs	r1, #32
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fb70 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCRD_04_GPIO_Port, SLCRD_04_Pin, PORT.P3);
 8000780:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <Interpreter+0x2c8>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	071b      	lsls	r3, r3, #28
 8000786:	0fdb      	lsrs	r3, r3, #31
 8000788:	b2db      	uxtb	r3, r3
 800078a:	001a      	movs	r2, r3
 800078c:	2380      	movs	r3, #128	@ 0x80
 800078e:	0159      	lsls	r1, r3, #5
 8000790:	23a0      	movs	r3, #160	@ 0xa0
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	0018      	movs	r0, r3
 8000796:	f001 fb63 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCRD_05_GPIO_Port, SLCRD_05_Pin, PORT.P4);
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <Interpreter+0x2c8>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	06db      	lsls	r3, r3, #27
 80007a0:	0fdb      	lsrs	r3, r3, #31
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	001a      	movs	r2, r3
 80007a6:	2380      	movs	r3, #128	@ 0x80
 80007a8:	0119      	lsls	r1, r3, #4
 80007aa:	23a0      	movs	r3, #160	@ 0xa0
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fb56 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCRD_06_GPIO_Port, SLCRD_06_Pin, PORT.P5);
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <Interpreter+0x2c8>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	069b      	lsls	r3, r3, #26
 80007ba:	0fdb      	lsrs	r3, r3, #31
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	001a      	movs	r2, r3
 80007c0:	2380      	movs	r3, #128	@ 0x80
 80007c2:	015b      	lsls	r3, r3, #5
 80007c4:	4810      	ldr	r0, [pc, #64]	@ (8000808 <Interpreter+0x2cc>)
 80007c6:	0019      	movs	r1, r3
 80007c8:	f001 fb4a 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCRD_07_GPIO_Port, SLCRD_07_Pin, PORT.P6);
 80007cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <Interpreter+0x2c8>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	065b      	lsls	r3, r3, #25
 80007d2:	0fdb      	lsrs	r3, r3, #31
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	001a      	movs	r2, r3
 80007d8:	2380      	movs	r3, #128	@ 0x80
 80007da:	011b      	lsls	r3, r3, #4
 80007dc:	480a      	ldr	r0, [pc, #40]	@ (8000808 <Interpreter+0x2cc>)
 80007de:	0019      	movs	r1, r3
 80007e0:	f001 fb3e 	bl	8001e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SLCRD_08_GPIO_Port, SLCRD_08_Pin, PORT.P7);
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <Interpreter+0x2c8>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	061b      	lsls	r3, r3, #24
 80007ea:	0fdb      	lsrs	r3, r3, #31
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	001a      	movs	r2, r3
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <Interpreter+0x2cc>)
 80007f2:	2104      	movs	r1, #4
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 fb33 	bl	8001e60 <HAL_GPIO_WritePin>
}
 80007fa:	46c0      	nop			@ (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	200000a0 	.word	0x200000a0
 8000808:	50000400 	.word	0x50000400
 800080c:	50000800 	.word	0x50000800

08000810 <Arrow>:

void Arrow(char *sign){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	if (!(strcmp(sign, "UP"))){
 8000818:	4ac1      	ldr	r2, [pc, #772]	@ (8000b20 <Arrow+0x310>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	0011      	movs	r1, r2
 800081e:	0018      	movs	r0, r3
 8000820:	f7ff fc72 	bl	8000108 <strcmp>
 8000824:	1e03      	subs	r3, r0, #0
 8000826:	d157      	bne.n	80008d8 <Arrow+0xc8>
	  Interpreter(0xFF, 0); // SETA NEGATIVAMENTE
 8000828:	2100      	movs	r1, #0
 800082a:	20ff      	movs	r0, #255	@ 0xff
 800082c:	f7ff fe86 	bl	800053c <Interpreter>
	  Interpreter(0x01, 1); // SETA POSITIVAMENTE
 8000830:	2101      	movs	r1, #1
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff fe82 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000838:	2001      	movs	r0, #1
 800083a:	f000 fb4b 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xE7, 0); // SETA NEGATIVAMENTE
 800083e:	2100      	movs	r1, #0
 8000840:	20e7      	movs	r0, #231	@ 0xe7
 8000842:	f7ff fe7b 	bl	800053c <Interpreter>
	  Interpreter(0x02, 1); // SETA POSITIVAMENTE
 8000846:	2101      	movs	r1, #1
 8000848:	2002      	movs	r0, #2
 800084a:	f7ff fe77 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 800084e:	2001      	movs	r0, #1
 8000850:	f000 fb40 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xC3, 0); // SETA NEGATIVAMENTE
 8000854:	2100      	movs	r1, #0
 8000856:	20c3      	movs	r0, #195	@ 0xc3
 8000858:	f7ff fe70 	bl	800053c <Interpreter>
	  Interpreter(0x04, 1); // SETA POSITIVAMENTE
 800085c:	2101      	movs	r1, #1
 800085e:	2004      	movs	r0, #4
 8000860:	f7ff fe6c 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f000 fb35 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0x81, 0); // SETA NEGATIVAMENTE
 800086a:	2100      	movs	r1, #0
 800086c:	2081      	movs	r0, #129	@ 0x81
 800086e:	f7ff fe65 	bl	800053c <Interpreter>
	  Interpreter(0x08, 1); // SETA POSITIVAMENTE
 8000872:	2101      	movs	r1, #1
 8000874:	2008      	movs	r0, #8
 8000876:	f7ff fe61 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 800087a:	2001      	movs	r0, #1
 800087c:	f000 fb2a 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xE7, 0); // SETA NEGATIVAMENTE
 8000880:	2100      	movs	r1, #0
 8000882:	20e7      	movs	r0, #231	@ 0xe7
 8000884:	f7ff fe5a 	bl	800053c <Interpreter>
	  Interpreter(0x10, 1); // SETA POSITIVAMENTE
 8000888:	2101      	movs	r1, #1
 800088a:	2010      	movs	r0, #16
 800088c:	f7ff fe56 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000890:	2001      	movs	r0, #1
 8000892:	f000 fb1f 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xE7, 0); // SETA NEGATIVAMENTE
 8000896:	2100      	movs	r1, #0
 8000898:	20e7      	movs	r0, #231	@ 0xe7
 800089a:	f7ff fe4f 	bl	800053c <Interpreter>
	  Interpreter(0x20, 1); // SETA POSITIVAMENTE
 800089e:	2101      	movs	r1, #1
 80008a0:	2020      	movs	r0, #32
 80008a2:	f7ff fe4b 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 80008a6:	2001      	movs	r0, #1
 80008a8:	f000 fb14 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xE7, 0); // SETA NEGATIVAMENTE
 80008ac:	2100      	movs	r1, #0
 80008ae:	20e7      	movs	r0, #231	@ 0xe7
 80008b0:	f7ff fe44 	bl	800053c <Interpreter>
	  Interpreter(0x40, 1); // SETA POSITIVAMENTE
 80008b4:	2101      	movs	r1, #1
 80008b6:	2040      	movs	r0, #64	@ 0x40
 80008b8:	f7ff fe40 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 80008bc:	2001      	movs	r0, #1
 80008be:	f000 fb09 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xFF, 0); // SETA NEGATIVAMENTE
 80008c2:	2100      	movs	r1, #0
 80008c4:	20ff      	movs	r0, #255	@ 0xff
 80008c6:	f7ff fe39 	bl	800053c <Interpreter>
	  Interpreter(0x80, 1); // SETA POSITIVAMENTE
 80008ca:	2101      	movs	r1, #1
 80008cc:	2080      	movs	r0, #128	@ 0x80
 80008ce:	f7ff fe35 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 80008d2:	2001      	movs	r0, #1
 80008d4:	f000 fafe 	bl	8000ed4 <HAL_Delay>
	}

	if (!(strcmp(sign, "DOWN"))){
 80008d8:	4a92      	ldr	r2, [pc, #584]	@ (8000b24 <Arrow+0x314>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	0011      	movs	r1, r2
 80008de:	0018      	movs	r0, r3
 80008e0:	f7ff fc12 	bl	8000108 <strcmp>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d157      	bne.n	8000998 <Arrow+0x188>
	  Interpreter(0xFF, 0); // SETA NEGATIVAMENTE
 80008e8:	2100      	movs	r1, #0
 80008ea:	20ff      	movs	r0, #255	@ 0xff
 80008ec:	f7ff fe26 	bl	800053c <Interpreter>
	  Interpreter(0x80, 1); // SETA POSITIVAMENTE
 80008f0:	2101      	movs	r1, #1
 80008f2:	2080      	movs	r0, #128	@ 0x80
 80008f4:	f7ff fe22 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 faeb 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xE7, 0); // SETA NEGATIVAMENTE
 80008fe:	2100      	movs	r1, #0
 8000900:	20e7      	movs	r0, #231	@ 0xe7
 8000902:	f7ff fe1b 	bl	800053c <Interpreter>
	  Interpreter(0x40, 1); // SETA POSITIVAMENTE
 8000906:	2101      	movs	r1, #1
 8000908:	2040      	movs	r0, #64	@ 0x40
 800090a:	f7ff fe17 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 800090e:	2001      	movs	r0, #1
 8000910:	f000 fae0 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xC3, 0); // SETA NEGATIVAMENTE
 8000914:	2100      	movs	r1, #0
 8000916:	20c3      	movs	r0, #195	@ 0xc3
 8000918:	f7ff fe10 	bl	800053c <Interpreter>
	  Interpreter(0x20, 1); // SETA POSITIVAMENTE
 800091c:	2101      	movs	r1, #1
 800091e:	2020      	movs	r0, #32
 8000920:	f7ff fe0c 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f000 fad5 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0x81, 0); // SETA NEGATIVAMENTE
 800092a:	2100      	movs	r1, #0
 800092c:	2081      	movs	r0, #129	@ 0x81
 800092e:	f7ff fe05 	bl	800053c <Interpreter>
	  Interpreter(0x10, 1); // SETA POSITIVAMENTE
 8000932:	2101      	movs	r1, #1
 8000934:	2010      	movs	r0, #16
 8000936:	f7ff fe01 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f000 faca 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xE7, 0); // SETA NEGATIVAMENTE
 8000940:	2100      	movs	r1, #0
 8000942:	20e7      	movs	r0, #231	@ 0xe7
 8000944:	f7ff fdfa 	bl	800053c <Interpreter>
	  Interpreter(0x08, 1); // SETA POSITIVAMENTE
 8000948:	2101      	movs	r1, #1
 800094a:	2008      	movs	r0, #8
 800094c:	f7ff fdf6 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000950:	2001      	movs	r0, #1
 8000952:	f000 fabf 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xE7, 0); // SETA NEGATIVAMENTE
 8000956:	2100      	movs	r1, #0
 8000958:	20e7      	movs	r0, #231	@ 0xe7
 800095a:	f7ff fdef 	bl	800053c <Interpreter>
	  Interpreter(0x04, 1); // SETA POSITIVAMENTE
 800095e:	2101      	movs	r1, #1
 8000960:	2004      	movs	r0, #4
 8000962:	f7ff fdeb 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000966:	2001      	movs	r0, #1
 8000968:	f000 fab4 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xE7, 0); // SETA NEGATIVAMENTE
 800096c:	2100      	movs	r1, #0
 800096e:	20e7      	movs	r0, #231	@ 0xe7
 8000970:	f7ff fde4 	bl	800053c <Interpreter>
	  Interpreter(0x02, 1); // SETA POSITIVAMENTE
 8000974:	2101      	movs	r1, #1
 8000976:	2002      	movs	r0, #2
 8000978:	f7ff fde0 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 800097c:	2001      	movs	r0, #1
 800097e:	f000 faa9 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xFF, 0); // SETA NEGATIVAMENTE
 8000982:	2100      	movs	r1, #0
 8000984:	20ff      	movs	r0, #255	@ 0xff
 8000986:	f7ff fdd9 	bl	800053c <Interpreter>
	  Interpreter(0x01, 1); // SETA POSITIVAMENTE
 800098a:	2101      	movs	r1, #1
 800098c:	2001      	movs	r0, #1
 800098e:	f7ff fdd5 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000992:	2001      	movs	r0, #1
 8000994:	f000 fa9e 	bl	8000ed4 <HAL_Delay>
	}

	if (!(strcmp(sign, "LEFT"))){
 8000998:	4a63      	ldr	r2, [pc, #396]	@ (8000b28 <Arrow+0x318>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	0011      	movs	r1, r2
 800099e:	0018      	movs	r0, r3
 80009a0:	f7ff fbb2 	bl	8000108 <strcmp>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d157      	bne.n	8000a58 <Arrow+0x248>
	  Interpreter(0xFF, 0); // SETA NEGATIVAMENTE
 80009a8:	2100      	movs	r1, #0
 80009aa:	20ff      	movs	r0, #255	@ 0xff
 80009ac:	f7ff fdc6 	bl	800053c <Interpreter>
	  Interpreter(0x01, 1); // SETA POSITIVAMENTE
 80009b0:	2101      	movs	r1, #1
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff fdc2 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f000 fa8b 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xEF, 0); // SETA NEGATIVAMENTE
 80009be:	2100      	movs	r1, #0
 80009c0:	20ef      	movs	r0, #239	@ 0xef
 80009c2:	f7ff fdbb 	bl	800053c <Interpreter>
	  Interpreter(0x02, 1); // SETA POSITIVAMENTE
 80009c6:	2101      	movs	r1, #1
 80009c8:	2002      	movs	r0, #2
 80009ca:	f7ff fdb7 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 fa80 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xCF, 0); // SETA NEGATIVAMENTE
 80009d4:	2100      	movs	r1, #0
 80009d6:	20cf      	movs	r0, #207	@ 0xcf
 80009d8:	f7ff fdb0 	bl	800053c <Interpreter>
	  Interpreter(0x04, 1); // SETA POSITIVAMENTE
 80009dc:	2101      	movs	r1, #1
 80009de:	2004      	movs	r0, #4
 80009e0:	f7ff fdac 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f000 fa75 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0x81, 0); // SETA NEGATIVAMENTE
 80009ea:	2100      	movs	r1, #0
 80009ec:	2081      	movs	r0, #129	@ 0x81
 80009ee:	f7ff fda5 	bl	800053c <Interpreter>
	  Interpreter(0x08, 1); // SETA POSITIVAMENTE
 80009f2:	2101      	movs	r1, #1
 80009f4:	2008      	movs	r0, #8
 80009f6:	f7ff fda1 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 80009fa:	2001      	movs	r0, #1
 80009fc:	f000 fa6a 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0x81, 0); // SETA NEGATIVAMENTE
 8000a00:	2100      	movs	r1, #0
 8000a02:	2081      	movs	r0, #129	@ 0x81
 8000a04:	f7ff fd9a 	bl	800053c <Interpreter>
	  Interpreter(0x10, 1); // SETA POSITIVAMENTE
 8000a08:	2101      	movs	r1, #1
 8000a0a:	2010      	movs	r0, #16
 8000a0c:	f7ff fd96 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f000 fa5f 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xCF, 0); // SETA NEGATIVAMENTE
 8000a16:	2100      	movs	r1, #0
 8000a18:	20cf      	movs	r0, #207	@ 0xcf
 8000a1a:	f7ff fd8f 	bl	800053c <Interpreter>
	  Interpreter(0x20, 1); // SETA POSITIVAMENTE
 8000a1e:	2101      	movs	r1, #1
 8000a20:	2020      	movs	r0, #32
 8000a22:	f7ff fd8b 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000a26:	2001      	movs	r0, #1
 8000a28:	f000 fa54 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xEF, 0); // SETA NEGATIVAMENTE
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	20ef      	movs	r0, #239	@ 0xef
 8000a30:	f7ff fd84 	bl	800053c <Interpreter>
	  Interpreter(0x40, 1); // SETA POSITIVAMENTE
 8000a34:	2101      	movs	r1, #1
 8000a36:	2040      	movs	r0, #64	@ 0x40
 8000a38:	f7ff fd80 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f000 fa49 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xFF, 0); // SETA NEGATIVAMENTE
 8000a42:	2100      	movs	r1, #0
 8000a44:	20ff      	movs	r0, #255	@ 0xff
 8000a46:	f7ff fd79 	bl	800053c <Interpreter>
	  Interpreter(0x80, 1); // SETA POSITIVAMENTE
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	2080      	movs	r0, #128	@ 0x80
 8000a4e:	f7ff fd75 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000a52:	2001      	movs	r0, #1
 8000a54:	f000 fa3e 	bl	8000ed4 <HAL_Delay>
	}

	if (!(strcmp(sign, "RIGHT"))){
 8000a58:	4a34      	ldr	r2, [pc, #208]	@ (8000b2c <Arrow+0x31c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	0011      	movs	r1, r2
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff fb52 	bl	8000108 <strcmp>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d157      	bne.n	8000b18 <Arrow+0x308>
	  Interpreter(0xFF, 0); // SETA NEGATIVAMENTE
 8000a68:	2100      	movs	r1, #0
 8000a6a:	20ff      	movs	r0, #255	@ 0xff
 8000a6c:	f7ff fd66 	bl	800053c <Interpreter>
	  Interpreter(0x01, 1); // SETA POSITIVAMENTE
 8000a70:	2101      	movs	r1, #1
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff fd62 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f000 fa2b 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xF7, 0); // SETA NEGATIVAMENTE
 8000a7e:	2100      	movs	r1, #0
 8000a80:	20f7      	movs	r0, #247	@ 0xf7
 8000a82:	f7ff fd5b 	bl	800053c <Interpreter>
	  Interpreter(0x02, 1); // SETA POSITIVAMENTE
 8000a86:	2101      	movs	r1, #1
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f7ff fd57 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f000 fa20 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xF3, 0); // SETA NEGATIVAMENTE
 8000a94:	2100      	movs	r1, #0
 8000a96:	20f3      	movs	r0, #243	@ 0xf3
 8000a98:	f7ff fd50 	bl	800053c <Interpreter>
	  Interpreter(0x04, 1); // SETA POSITIVAMENTE
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	2004      	movs	r0, #4
 8000aa0:	f7ff fd4c 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f000 fa15 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0x81, 0); // SETA NEGATIVAMENTE
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2081      	movs	r0, #129	@ 0x81
 8000aae:	f7ff fd45 	bl	800053c <Interpreter>
	  Interpreter(0x08, 1); // SETA POSITIVAMENTE
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	2008      	movs	r0, #8
 8000ab6:	f7ff fd41 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f000 fa0a 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0x81, 0); // SETA NEGATIVAMENTE
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2081      	movs	r0, #129	@ 0x81
 8000ac4:	f7ff fd3a 	bl	800053c <Interpreter>
	  Interpreter(0x10, 1); // SETA POSITIVAMENTE
 8000ac8:	2101      	movs	r1, #1
 8000aca:	2010      	movs	r0, #16
 8000acc:	f7ff fd36 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f000 f9ff 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xF3, 0); // SETA NEGATIVAMENTE
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	20f3      	movs	r0, #243	@ 0xf3
 8000ada:	f7ff fd2f 	bl	800053c <Interpreter>
	  Interpreter(0x20, 1); // SETA POSITIVAMENTE
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2020      	movs	r0, #32
 8000ae2:	f7ff fd2b 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f000 f9f4 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xF7, 0); // SETA NEGATIVAMENTE
 8000aec:	2100      	movs	r1, #0
 8000aee:	20f7      	movs	r0, #247	@ 0xf7
 8000af0:	f7ff fd24 	bl	800053c <Interpreter>
	  Interpreter(0x40, 1); // SETA POSITIVAMENTE
 8000af4:	2101      	movs	r1, #1
 8000af6:	2040      	movs	r0, #64	@ 0x40
 8000af8:	f7ff fd20 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f000 f9e9 	bl	8000ed4 <HAL_Delay>

	  Interpreter(0xFF, 0); // SETA NEGATIVAMENTE
 8000b02:	2100      	movs	r1, #0
 8000b04:	20ff      	movs	r0, #255	@ 0xff
 8000b06:	f7ff fd19 	bl	800053c <Interpreter>
	  Interpreter(0x80, 1); // SETA POSITIVAMENTE
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2080      	movs	r0, #128	@ 0x80
 8000b0e:	f7ff fd15 	bl	800053c <Interpreter>
	  HAL_Delay(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f000 f9de 	bl	8000ed4 <HAL_Delay>
	}
}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	08002a68 	.word	0x08002a68
 8000b24:	08002a6c 	.word	0x08002a6c
 8000b28:	08002a74 	.word	0x08002a74
 8000b2c:	08002a7c 	.word	0x08002a7c

08000b30 <Verify_move>:

void Verify_move(void){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc);
 8000b36:	4b30      	ldr	r3, [pc, #192]	@ (8000bf8 <Verify_move+0xc8>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f000 fb63 	bl	8001204 <HAL_ADC_Start>
	for (int i = 0; i < 2; i++){
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	e019      	b.n	8000b78 <Verify_move+0x48>
		HAL_ADC_PollForConversion(&hadc, 100);
 8000b44:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf8 <Verify_move+0xc8>)
 8000b46:	2164      	movs	r1, #100	@ 0x64
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fbef 	bl	800132c <HAL_ADC_PollForConversion>
		if (i == 0) Yaxis = HAL_ADC_GetValue(&hadc);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d107      	bne.n	8000b64 <Verify_move+0x34>
 8000b54:	4b28      	ldr	r3, [pc, #160]	@ (8000bf8 <Verify_move+0xc8>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 fc84 	bl	8001464 <HAL_ADC_GetValue>
 8000b5c:	0002      	movs	r2, r0
 8000b5e:	4b27      	ldr	r3, [pc, #156]	@ (8000bfc <Verify_move+0xcc>)
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	e006      	b.n	8000b72 <Verify_move+0x42>
		else Xaxis = HAL_ADC_GetValue(&hadc);
 8000b64:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <Verify_move+0xc8>)
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 fc7c 	bl	8001464 <HAL_ADC_GetValue>
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	4b24      	ldr	r3, [pc, #144]	@ (8000c00 <Verify_move+0xd0>)
 8000b70:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 2; i++){
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3301      	adds	r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	dde2      	ble.n	8000b44 <Verify_move+0x14>
	}

	HAL_Delay(1);
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f000 f9a8 	bl	8000ed4 <HAL_Delay>

	if (Xaxis < 70) strcpy(state, "RIGHT");
 8000b84:	4b1e      	ldr	r3, [pc, #120]	@ (8000c00 <Verify_move+0xd0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b45      	cmp	r3, #69	@ 0x45
 8000b8a:	d806      	bhi.n	8000b9a <Verify_move+0x6a>
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <Verify_move+0xd4>)
 8000b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c08 <Verify_move+0xd8>)
 8000b90:	6811      	ldr	r1, [r2, #0]
 8000b92:	6019      	str	r1, [r3, #0]
 8000b94:	8892      	ldrh	r2, [r2, #4]
 8000b96:	809a      	strh	r2, [r3, #4]
 8000b98:	e00f      	b.n	8000bba <Verify_move+0x8a>
	else if (Xaxis > 2940 && Xaxis < 3000) strcpy(state, "LEFT");
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <Verify_move+0xd0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c0c <Verify_move+0xdc>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d90a      	bls.n	8000bba <Verify_move+0x8a>
 8000ba4:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <Verify_move+0xd0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a19      	ldr	r2, [pc, #100]	@ (8000c10 <Verify_move+0xe0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d805      	bhi.n	8000bba <Verify_move+0x8a>
 8000bae:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <Verify_move+0xd4>)
 8000bb0:	4a18      	ldr	r2, [pc, #96]	@ (8000c14 <Verify_move+0xe4>)
 8000bb2:	6811      	ldr	r1, [r2, #0]
 8000bb4:	6019      	str	r1, [r3, #0]
 8000bb6:	7912      	ldrb	r2, [r2, #4]
 8000bb8:	711a      	strb	r2, [r3, #4]

	if (Yaxis < 70) strcpy(state, "DOWN");
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <Verify_move+0xcc>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b45      	cmp	r3, #69	@ 0x45
 8000bc0:	d806      	bhi.n	8000bd0 <Verify_move+0xa0>
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <Verify_move+0xd4>)
 8000bc4:	4a14      	ldr	r2, [pc, #80]	@ (8000c18 <Verify_move+0xe8>)
 8000bc6:	6811      	ldr	r1, [r2, #0]
 8000bc8:	6019      	str	r1, [r3, #0]
 8000bca:	7912      	ldrb	r2, [r2, #4]
 8000bcc:	711a      	strb	r2, [r3, #4]
 8000bce:	e00b      	b.n	8000be8 <Verify_move+0xb8>
	else if (Yaxis > 4000) strcpy(state, "UP");
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <Verify_move+0xcc>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	23fa      	movs	r3, #250	@ 0xfa
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d905      	bls.n	8000be8 <Verify_move+0xb8>
 8000bdc:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <Verify_move+0xd4>)
 8000bde:	4a0f      	ldr	r2, [pc, #60]	@ (8000c1c <Verify_move+0xec>)
 8000be0:	8811      	ldrh	r1, [r2, #0]
 8000be2:	8019      	strh	r1, [r3, #0]
 8000be4:	7892      	ldrb	r2, [r2, #2]
 8000be6:	709a      	strb	r2, [r3, #2]

	HAL_ADC_Stop(&hadc);
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <Verify_move+0xc8>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 fb5e 	bl	80012ac <HAL_ADC_Stop>
}
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000038 	.word	0x20000038
 8000bfc:	20000098 	.word	0x20000098
 8000c00:	20000094 	.word	0x20000094
 8000c04:	20000004 	.word	0x20000004
 8000c08:	08002a7c 	.word	0x08002a7c
 8000c0c:	00000b7c 	.word	0x00000b7c
 8000c10:	00000bb7 	.word	0x00000bb7
 8000c14:	08002a74 	.word	0x08002a74
 8000c18:	08002a6c 	.word	0x08002a6c
 8000c1c:	08002a68 	.word	0x08002a68

08000c20 <Snake>:

void Snake(void){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  Interpreter(0xE7, 0); // SETA NEGATIVAMENTE
 8000c24:	2100      	movs	r1, #0
 8000c26:	20e7      	movs	r0, #231	@ 0xe7
 8000c28:	f7ff fc88 	bl	800053c <Interpreter>
  Interpreter(0x22, 1); // SETA POSITIVAMENTE
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	2022      	movs	r0, #34	@ 0x22
 8000c30:	f7ff fc84 	bl	800053c <Interpreter>
  HAL_Delay(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 f94d 	bl	8000ed4 <HAL_Delay>
}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	0002      	movs	r2, r0
 8000c48:	1dbb      	adds	r3, r7, #6
 8000c4a:	801a      	strh	r2, [r3, #0]
	aux = new_mode;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c52:	701a      	strb	r2, [r3, #0]
	new_mode = mode;
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <HAL_GPIO_EXTI_Callback+0x34>)
 8000c56:	781a      	ldrb	r2, [r3, #0]
 8000c58:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000c5a:	701a      	strb	r2, [r3, #0]
	mode = aux;
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <HAL_GPIO_EXTI_Callback+0x30>)
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <HAL_GPIO_EXTI_Callback+0x34>)
 8000c62:	701a      	strb	r2, [r3, #0]
}
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b002      	add	sp, #8
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	2000009d 	.word	0x2000009d
 8000c74:	2000009c 	.word	0x2000009c

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c80:	46c0      	nop			@ (mov r8, r8)
 8000c82:	e7fd      	b.n	8000c80 <Error_Handler+0x8>

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <HAL_MspInit+0x24>)
 8000c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_MspInit+0x24>)
 8000c8e:	2101      	movs	r1, #1
 8000c90:	430a      	orrs	r2, r1
 8000c92:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c94:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <HAL_MspInit+0x24>)
 8000c96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c98:	4b03      	ldr	r3, [pc, #12]	@ (8000ca8 <HAL_MspInit+0x24>)
 8000c9a:	2180      	movs	r1, #128	@ 0x80
 8000c9c:	0549      	lsls	r1, r1, #21
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	46c0      	nop			@ (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000

08000cac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	240c      	movs	r4, #12
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	0018      	movs	r0, r3
 8000cba:	2314      	movs	r3, #20
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	f001 fe9a 	bl	80029f8 <memset>
  if(hadc->Instance==ADC1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a18      	ldr	r2, [pc, #96]	@ (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12a      	bne.n	8000d24 <HAL_ADC_MspInit+0x78>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cce:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <HAL_ADC_MspInit+0x84>)
 8000cd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cd2:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <HAL_ADC_MspInit+0x84>)
 8000cd4:	2180      	movs	r1, #128	@ 0x80
 8000cd6:	0089      	lsls	r1, r1, #2
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <HAL_ADC_MspInit+0x84>)
 8000cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <HAL_ADC_MspInit+0x84>)
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <HAL_ADC_MspInit+0x84>)
 8000cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cec:	2201      	movs	r2, #1
 8000cee:	4013      	ands	r3, r2
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	193a      	adds	r2, r7, r4
 8000d08:	23a0      	movs	r3, #160	@ 0xa0
 8000d0a:	05db      	lsls	r3, r3, #23
 8000d0c:	0011      	movs	r1, r2
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 ff30 	bl	8001b74 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2100      	movs	r1, #0
 8000d18:	200c      	movs	r0, #12
 8000d1a:	f000 fef9 	bl	8001b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000d1e:	200c      	movs	r0, #12
 8000d20:	f000 ff0b 	bl	8001b3a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b009      	add	sp, #36	@ 0x24
 8000d2a:	bd90      	pop	{r4, r7, pc}
 8000d2c:	40012400 	.word	0x40012400
 8000d30:	40021000 	.word	0x40021000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	e7fd      	b.n	8000d38 <NMI_Handler+0x4>

08000d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	e7fd      	b.n	8000d40 <HardFault_Handler+0x4>

08000d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d48:	46c0      	nop			@ (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 f89e 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_BTN_Pin);
 8000d6a:	2380      	movs	r3, #128	@ 0x80
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f001 f894 	bl	8001e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d74:	46c0      	nop			@ (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <ADC1_COMP_IRQHandler+0x14>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 fb7a 	bl	800147c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000d88:	46c0      	nop			@ (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	20000038 	.word	0x20000038

08000d94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	46c0      	nop			@ (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000da0:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000da4:	f7ff fff6 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	@ (8000de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dec <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f001 fe1b 	bl	8002a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fa2f 	bl	8000234 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   r0, =_estack
 8000dd8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000de4:	08002aa8 	.word	0x08002aa8
  ldr r2, =_sbss
 8000de8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000dec:	200000a8 	.word	0x200000a8

08000df0 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <DMA1_Channel1_IRQHandler>
	...

08000df4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e00:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <HAL_Init+0x3c>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <HAL_Init+0x3c>)
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 f811 	bl	8000e34 <HAL_InitTick>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
 8000e1c:	e001      	b.n	8000e22 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e1e:	f7ff ff31 	bl	8000c84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	40022000 	.word	0x40022000

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e3c:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <HAL_InitTick+0x5c>)
 8000e3e:	681c      	ldr	r4, [r3, #0]
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <HAL_InitTick+0x60>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	0019      	movs	r1, r3
 8000e46:	23fa      	movs	r3, #250	@ 0xfa
 8000e48:	0098      	lsls	r0, r3, #2
 8000e4a:	f7ff f967 	bl	800011c <__udivsi3>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	0019      	movs	r1, r3
 8000e52:	0020      	movs	r0, r4
 8000e54:	f7ff f962 	bl	800011c <__udivsi3>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f000 fe7d 	bl	8001b5a <HAL_SYSTICK_Config>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e00f      	b.n	8000e88 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d80b      	bhi.n	8000e86 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	2301      	movs	r3, #1
 8000e72:	425b      	negs	r3, r3
 8000e74:	2200      	movs	r2, #0
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 fe4a 	bl	8001b10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_InitTick+0x64>)
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b003      	add	sp, #12
 8000e8e:	bd90      	pop	{r4, r7, pc}
 8000e90:	20000010 	.word	0x20000010
 8000e94:	20000018 	.word	0x20000018
 8000e98:	20000014 	.word	0x20000014

08000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <HAL_IncTick+0x1c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <HAL_IncTick+0x20>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	18d2      	adds	r2, r2, r3
 8000eac:	4b03      	ldr	r3, [pc, #12]	@ (8000ebc <HAL_IncTick+0x20>)
 8000eae:	601a      	str	r2, [r3, #0]
}
 8000eb0:	46c0      	nop			@ (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	20000018 	.word	0x20000018
 8000ebc:	200000a4 	.word	0x200000a4

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	@ (8000ed0 <HAL_GetTick+0x10>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	200000a4 	.word	0x200000a4

08000ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000edc:	f7ff fff0 	bl	8000ec0 <HAL_GetTick>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	d005      	beq.n	8000efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eee:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <HAL_Delay+0x44>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	189b      	adds	r3, r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	f7ff ffe0 	bl	8000ec0 <HAL_GetTick>
 8000f00:	0002      	movs	r2, r0
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d8f7      	bhi.n	8000efc <HAL_Delay+0x28>
  {
  }
}
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b004      	add	sp, #16
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	20000018 	.word	0x20000018

08000f1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e159      	b.n	80011e2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10a      	bne.n	8000f4c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2250      	movs	r2, #80	@ 0x50
 8000f40:	2100      	movs	r1, #0
 8000f42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff feb0 	bl	8000cac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f50:	2210      	movs	r2, #16
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b10      	cmp	r3, #16
 8000f56:	d005      	beq.n	8000f64 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2204      	movs	r2, #4
 8000f60:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000f62:	d00b      	beq.n	8000f7c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f68:	2210      	movs	r2, #16
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2250      	movs	r2, #80	@ 0x50
 8000f74:	2100      	movs	r1, #0
 8000f76:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e132      	b.n	80011e2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f80:	4a9a      	ldr	r2, [pc, #616]	@ (80011ec <HAL_ADC_Init+0x2d0>)
 8000f82:	4013      	ands	r3, r2
 8000f84:	2202      	movs	r2, #2
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2203      	movs	r2, #3
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d108      	bne.n	8000fac <HAL_ADC_Init+0x90>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d101      	bne.n	8000fac <HAL_ADC_Init+0x90>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e000      	b.n	8000fae <HAL_ADC_Init+0x92>
 8000fac:	2300      	movs	r3, #0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d149      	bne.n	8001046 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	23c0      	movs	r3, #192	@ 0xc0
 8000fb8:	061b      	lsls	r3, r3, #24
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d00b      	beq.n	8000fd6 <HAL_ADC_Init+0xba>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	05db      	lsls	r3, r3, #23
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d005      	beq.n	8000fd6 <HAL_ADC_Init+0xba>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	2380      	movs	r3, #128	@ 0x80
 8000fd0:	061b      	lsls	r3, r3, #24
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d111      	bne.n	8000ffa <HAL_ADC_Init+0xde>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	0892      	lsrs	r2, r2, #2
 8000fe4:	611a      	str	r2, [r3, #16]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6919      	ldr	r1, [r3, #16]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	611a      	str	r2, [r3, #16]
 8000ff8:	e014      	b.n	8001024 <HAL_ADC_Init+0x108>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	691a      	ldr	r2, [r3, #16]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	0092      	lsls	r2, r2, #2
 8001006:	0892      	lsrs	r2, r2, #2
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	4b79      	ldr	r3, [pc, #484]	@ (80011f0 <HAL_ADC_Init+0x2d4>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b78      	ldr	r3, [pc, #480]	@ (80011f0 <HAL_ADC_Init+0x2d4>)
 8001010:	4978      	ldr	r1, [pc, #480]	@ (80011f4 <HAL_ADC_Init+0x2d8>)
 8001012:	400a      	ands	r2, r1
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	4b76      	ldr	r3, [pc, #472]	@ (80011f0 <HAL_ADC_Init+0x2d4>)
 8001018:	6819      	ldr	r1, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	4b74      	ldr	r3, [pc, #464]	@ (80011f0 <HAL_ADC_Init+0x2d4>)
 8001020:	430a      	orrs	r2, r1
 8001022:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2118      	movs	r1, #24
 8001030:	438a      	bics	r2, r1
 8001032:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	68d9      	ldr	r1, [r3, #12]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001046:	4b6a      	ldr	r3, [pc, #424]	@ (80011f0 <HAL_ADC_Init+0x2d4>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	4b69      	ldr	r3, [pc, #420]	@ (80011f0 <HAL_ADC_Init+0x2d4>)
 800104c:	496a      	ldr	r1, [pc, #424]	@ (80011f8 <HAL_ADC_Init+0x2dc>)
 800104e:	400a      	ands	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001052:	4b67      	ldr	r3, [pc, #412]	@ (80011f0 <HAL_ADC_Init+0x2d4>)
 8001054:	6819      	ldr	r1, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800105a:	065a      	lsls	r2, r3, #25
 800105c:	4b64      	ldr	r3, [pc, #400]	@ (80011f0 <HAL_ADC_Init+0x2d4>)
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	055b      	lsls	r3, r3, #21
 800106c:	4013      	ands	r3, r2
 800106e:	d108      	bne.n	8001082 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2180      	movs	r1, #128	@ 0x80
 800107c:	0549      	lsls	r1, r1, #21
 800107e:	430a      	orrs	r2, r1
 8001080:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68da      	ldr	r2, [r3, #12]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	495b      	ldr	r1, [pc, #364]	@ (80011fc <HAL_ADC_Init+0x2e0>)
 800108e:	400a      	ands	r2, r1
 8001090:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68d9      	ldr	r1, [r3, #12]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d101      	bne.n	80010a8 <HAL_ADC_Init+0x18c>
 80010a4:	2304      	movs	r3, #4
 80010a6:	e000      	b.n	80010aa <HAL_ADC_Init+0x18e>
 80010a8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80010aa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2020      	movs	r0, #32
 80010b0:	5c1b      	ldrb	r3, [r3, r0]
 80010b2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80010b4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	202c      	movs	r0, #44	@ 0x2c
 80010ba:	5c1b      	ldrb	r3, [r3, r0]
 80010bc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80010be:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010c4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80010cc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80010d4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010e2:	23c2      	movs	r3, #194	@ 0xc2
 80010e4:	33ff      	adds	r3, #255	@ 0xff
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d00b      	beq.n	8001102 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68d9      	ldr	r1, [r3, #12]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80010f8:	431a      	orrs	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2221      	movs	r2, #33	@ 0x21
 8001106:	5c9b      	ldrb	r3, [r3, r2]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d11a      	bne.n	8001142 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2220      	movs	r2, #32
 8001110:	5c9b      	ldrb	r3, [r3, r2]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d109      	bne.n	800112a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2180      	movs	r1, #128	@ 0x80
 8001122:	0249      	lsls	r1, r1, #9
 8001124:	430a      	orrs	r2, r1
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	e00b      	b.n	8001142 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800112e:	2220      	movs	r2, #32
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113a:	2201      	movs	r2, #1
 800113c:	431a      	orrs	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001146:	2b01      	cmp	r3, #1
 8001148:	d11f      	bne.n	800118a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	691a      	ldr	r2, [r3, #16]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	492a      	ldr	r1, [pc, #168]	@ (8001200 <HAL_ADC_Init+0x2e4>)
 8001156:	400a      	ands	r2, r1
 8001158:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6919      	ldr	r1, [r3, #16]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001168:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800116e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	691a      	ldr	r2, [r3, #16]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2101      	movs	r1, #1
 8001184:	430a      	orrs	r2, r1
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	e00e      	b.n	80011a8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	2201      	movs	r2, #1
 8001192:	4013      	ands	r3, r2
 8001194:	2b01      	cmp	r3, #1
 8001196:	d107      	bne.n	80011a8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2101      	movs	r1, #1
 80011a4:	438a      	bics	r2, r1
 80011a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2107      	movs	r1, #7
 80011b4:	438a      	bics	r2, r1
 80011b6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6959      	ldr	r1, [r3, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011d4:	2203      	movs	r2, #3
 80011d6:	4393      	bics	r3, r2
 80011d8:	2201      	movs	r2, #1
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	0018      	movs	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	fffffefd 	.word	0xfffffefd
 80011f0:	40012708 	.word	0x40012708
 80011f4:	ffc3ffff 	.word	0xffc3ffff
 80011f8:	fdffffff 	.word	0xfdffffff
 80011fc:	fffe0219 	.word	0xfffe0219
 8001200:	fffffc03 	.word	0xfffffc03

08001204 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800120c:	230f      	movs	r3, #15
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2204      	movs	r2, #4
 800121c:	4013      	ands	r3, r2
 800121e:	d138      	bne.n	8001292 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2250      	movs	r2, #80	@ 0x50
 8001224:	5c9b      	ldrb	r3, [r3, r2]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_ADC_Start+0x2a>
 800122a:	2302      	movs	r3, #2
 800122c:	e038      	b.n	80012a0 <HAL_ADC_Start+0x9c>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2250      	movs	r2, #80	@ 0x50
 8001232:	2101      	movs	r1, #1
 8001234:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d007      	beq.n	800124e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800123e:	230f      	movs	r3, #15
 8001240:	18fc      	adds	r4, r7, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	0018      	movs	r0, r3
 8001246:	f000 fa7b 	bl	8001740 <ADC_Enable>
 800124a:	0003      	movs	r3, r0
 800124c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800124e:	230f      	movs	r3, #15
 8001250:	18fb      	adds	r3, r7, r3
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d120      	bne.n	800129a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800125c:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <HAL_ADC_Start+0xa4>)
 800125e:	4013      	ands	r3, r2
 8001260:	2280      	movs	r2, #128	@ 0x80
 8001262:	0052      	lsls	r2, r2, #1
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2250      	movs	r2, #80	@ 0x50
 8001274:	2100      	movs	r1, #0
 8001276:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	221c      	movs	r2, #28
 800127e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2104      	movs	r1, #4
 800128c:	430a      	orrs	r2, r1
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	e003      	b.n	800129a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001292:	230f      	movs	r3, #15
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	2202      	movs	r2, #2
 8001298:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800129a:	230f      	movs	r3, #15
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	781b      	ldrb	r3, [r3, #0]
}
 80012a0:	0018      	movs	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b005      	add	sp, #20
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	fffff0fe 	.word	0xfffff0fe

080012ac <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80012ac:	b5b0      	push	{r4, r5, r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b4:	230f      	movs	r3, #15
 80012b6:	18fb      	adds	r3, r7, r3
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2250      	movs	r2, #80	@ 0x50
 80012c0:	5c9b      	ldrb	r3, [r3, r2]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Stop+0x1e>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e029      	b.n	800131e <HAL_ADC_Stop+0x72>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2250      	movs	r2, #80	@ 0x50
 80012ce:	2101      	movs	r1, #1
 80012d0:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80012d2:	250f      	movs	r5, #15
 80012d4:	197c      	adds	r4, r7, r5
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	0018      	movs	r0, r3
 80012da:	f000 fb00 	bl	80018de <ADC_ConversionStop>
 80012de:	0003      	movs	r3, r0
 80012e0:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80012e2:	197b      	adds	r3, r7, r5
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d112      	bne.n	8001310 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80012ea:	197c      	adds	r4, r7, r5
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	0018      	movs	r0, r3
 80012f0:	f000 fa8e 	bl	8001810 <ADC_Disable>
 80012f4:	0003      	movs	r3, r0
 80012f6:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80012f8:	197b      	adds	r3, r7, r5
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d107      	bne.n	8001310 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001304:	4a08      	ldr	r2, [pc, #32]	@ (8001328 <HAL_ADC_Stop+0x7c>)
 8001306:	4013      	ands	r3, r2
 8001308:	2201      	movs	r2, #1
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2250      	movs	r2, #80	@ 0x50
 8001314:	2100      	movs	r1, #0
 8001316:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001318:	230f      	movs	r3, #15
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	781b      	ldrb	r3, [r3, #0]
}
 800131e:	0018      	movs	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	b004      	add	sp, #16
 8001324:	bdb0      	pop	{r4, r5, r7, pc}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	fffffefe 	.word	0xfffffefe

0800132c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	2b08      	cmp	r3, #8
 8001344:	d102      	bne.n	800134c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001346:	2308      	movs	r3, #8
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e014      	b.n	8001376 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2201      	movs	r2, #1
 8001354:	4013      	ands	r3, r2
 8001356:	2b01      	cmp	r3, #1
 8001358:	d10b      	bne.n	8001372 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800135e:	2220      	movs	r2, #32
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2250      	movs	r2, #80	@ 0x50
 800136a:	2100      	movs	r1, #0
 800136c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e072      	b.n	8001458 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001372:	230c      	movs	r3, #12
 8001374:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001376:	f7ff fda3 	bl	8000ec0 <HAL_GetTick>
 800137a:	0003      	movs	r3, r0
 800137c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800137e:	e01f      	b.n	80013c0 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	d01c      	beq.n	80013c0 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d007      	beq.n	800139c <HAL_ADC_PollForConversion+0x70>
 800138c:	f7ff fd98 	bl	8000ec0 <HAL_GetTick>
 8001390:	0002      	movs	r2, r0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d211      	bcs.n	80013c0 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	4013      	ands	r3, r2
 80013a6:	d10b      	bne.n	80013c0 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ac:	2204      	movs	r2, #4
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2250      	movs	r2, #80	@ 0x50
 80013b8:	2100      	movs	r1, #0
 80013ba:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e04b      	b.n	8001458 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4013      	ands	r3, r2
 80013ca:	d0d9      	beq.n	8001380 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d0:	2280      	movs	r2, #128	@ 0x80
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	431a      	orrs	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	23c0      	movs	r3, #192	@ 0xc0
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	4013      	ands	r3, r2
 80013e6:	d12e      	bne.n	8001446 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2220      	movs	r2, #32
 80013ec:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d129      	bne.n	8001446 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2208      	movs	r2, #8
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d122      	bne.n	8001446 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2204      	movs	r2, #4
 8001408:	4013      	ands	r3, r2
 800140a:	d110      	bne.n	800142e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	210c      	movs	r1, #12
 8001418:	438a      	bics	r2, r1
 800141a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001420:	4a0f      	ldr	r2, [pc, #60]	@ (8001460 <HAL_ADC_PollForConversion+0x134>)
 8001422:	4013      	ands	r3, r2
 8001424:	2201      	movs	r2, #1
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	655a      	str	r2, [r3, #84]	@ 0x54
 800142c:	e00b      	b.n	8001446 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001432:	2220      	movs	r2, #32
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143e:	2201      	movs	r2, #1
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d103      	bne.n	8001456 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	220c      	movs	r2, #12
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b004      	add	sp, #16
 800145e:	bd80      	pop	{r7, pc}
 8001460:	fffffefe 	.word	0xfffffefe

08001464 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001472:	0018      	movs	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	b002      	add	sp, #8
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2204      	movs	r2, #4
 8001498:	4013      	ands	r3, r2
 800149a:	d003      	beq.n	80014a4 <HAL_ADC_IRQHandler+0x28>
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2204      	movs	r2, #4
 80014a0:	4013      	ands	r3, r2
 80014a2:	d107      	bne.n	80014b4 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2208      	movs	r2, #8
 80014a8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80014aa:	d04e      	beq.n	800154a <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2208      	movs	r2, #8
 80014b0:	4013      	ands	r3, r2
 80014b2:	d04a      	beq.n	800154a <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b8:	2210      	movs	r2, #16
 80014ba:	4013      	ands	r3, r2
 80014bc:	d106      	bne.n	80014cc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014c2:	2280      	movs	r2, #128	@ 0x80
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	23c0      	movs	r3, #192	@ 0xc0
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	4013      	ands	r3, r2
 80014d8:	d12b      	bne.n	8001532 <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2220      	movs	r2, #32
 80014de:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d126      	bne.n	8001532 <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2208      	movs	r2, #8
 80014e8:	4013      	ands	r3, r2
 80014ea:	d022      	beq.n	8001532 <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2204      	movs	r2, #4
 80014f4:	4013      	ands	r3, r2
 80014f6:	d110      	bne.n	800151a <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	210c      	movs	r1, #12
 8001504:	438a      	bics	r2, r1
 8001506:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800150c:	4a2f      	ldr	r2, [pc, #188]	@ (80015cc <HAL_ADC_IRQHandler+0x150>)
 800150e:	4013      	ands	r3, r2
 8001510:	2201      	movs	r2, #1
 8001512:	431a      	orrs	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	655a      	str	r2, [r3, #84]	@ 0x54
 8001518:	e00b      	b.n	8001532 <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800151e:	2220      	movs	r2, #32
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152a:	2201      	movs	r2, #1
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	0018      	movs	r0, r3
 8001536:	f000 f84b 	bl	80015d0 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d003      	beq.n	800154a <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2280      	movs	r2, #128	@ 0x80
 800154e:	4013      	ands	r3, r2
 8001550:	d012      	beq.n	8001578 <HAL_ADC_IRQHandler+0xfc>
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2280      	movs	r2, #128	@ 0x80
 8001556:	4013      	ands	r3, r2
 8001558:	d00e      	beq.n	8001578 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155e:	2280      	movs	r2, #128	@ 0x80
 8001560:	0252      	lsls	r2, r2, #9
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	655a      	str	r2, [r3, #84]	@ 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	0018      	movs	r0, r3
 800156c:	f000 f838 	bl	80015e0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2280      	movs	r2, #128	@ 0x80
 8001576:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2210      	movs	r2, #16
 800157c:	4013      	ands	r3, r2
 800157e:	d020      	beq.n	80015c2 <HAL_ADC_IRQHandler+0x146>
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2210      	movs	r2, #16
 8001584:	4013      	ands	r3, r2
 8001586:	d01c      	beq.n	80015c2 <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800159a:	2b01      	cmp	r3, #1
 800159c:	d10d      	bne.n	80015ba <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a2:	2202      	movs	r2, #2
 80015a4:	431a      	orrs	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2210      	movs	r2, #16
 80015b0:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f000 f81b 	bl	80015f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2210      	movs	r2, #16
 80015c0:	601a      	str	r2, [r3, #0]
  }

}
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	fffffefe 	.word	0xfffffefe

080015d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80015d8:	46c0      	nop			@ (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80015e8:	46c0      	nop			@ (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b002      	add	sp, #8
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80015f8:	46c0      	nop			@ (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b002      	add	sp, #8
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2250      	movs	r2, #80	@ 0x50
 800160e:	5c9b      	ldrb	r3, [r3, r2]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x18>
 8001614:	2302      	movs	r3, #2
 8001616:	e085      	b.n	8001724 <HAL_ADC_ConfigChannel+0x124>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2250      	movs	r2, #80	@ 0x50
 800161c:	2101      	movs	r1, #1
 800161e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2204      	movs	r2, #4
 8001628:	4013      	ands	r3, r2
 800162a:	d00b      	beq.n	8001644 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001630:	2220      	movs	r2, #32
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2250      	movs	r2, #80	@ 0x50
 800163c:	2100      	movs	r1, #0
 800163e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e06f      	b.n	8001724 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4a38      	ldr	r2, [pc, #224]	@ (800172c <HAL_ADC_ConfigChannel+0x12c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d035      	beq.n	80016ba <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	035b      	lsls	r3, r3, #13
 800165a:	0b5a      	lsrs	r2, r3, #13
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	02db      	lsls	r3, r3, #11
 800166c:	4013      	ands	r3, r2
 800166e:	d009      	beq.n	8001684 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001670:	4b2f      	ldr	r3, [pc, #188]	@ (8001730 <HAL_ADC_ConfigChannel+0x130>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b2e      	ldr	r3, [pc, #184]	@ (8001730 <HAL_ADC_ConfigChannel+0x130>)
 8001676:	2180      	movs	r1, #128	@ 0x80
 8001678:	0409      	lsls	r1, r1, #16
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800167e:	200a      	movs	r0, #10
 8001680:	f000 f97a 	bl	8001978 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	@ 0x80
 800168a:	029b      	lsls	r3, r3, #10
 800168c:	4013      	ands	r3, r2
 800168e:	d006      	beq.n	800169e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001690:	4b27      	ldr	r3, [pc, #156]	@ (8001730 <HAL_ADC_ConfigChannel+0x130>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b26      	ldr	r3, [pc, #152]	@ (8001730 <HAL_ADC_ConfigChannel+0x130>)
 8001696:	2180      	movs	r1, #128	@ 0x80
 8001698:	03c9      	lsls	r1, r1, #15
 800169a:	430a      	orrs	r2, r1
 800169c:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	025b      	lsls	r3, r3, #9
 80016a6:	4013      	ands	r3, r2
 80016a8:	d037      	beq.n	800171a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80016aa:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <HAL_ADC_ConfigChannel+0x130>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <HAL_ADC_ConfigChannel+0x130>)
 80016b0:	2180      	movs	r1, #128	@ 0x80
 80016b2:	0449      	lsls	r1, r1, #17
 80016b4:	430a      	orrs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e02f      	b.n	800171a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	035b      	lsls	r3, r3, #13
 80016c6:	0b5b      	lsrs	r3, r3, #13
 80016c8:	43d9      	mvns	r1, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	400a      	ands	r2, r1
 80016d0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2380      	movs	r3, #128	@ 0x80
 80016d8:	02db      	lsls	r3, r3, #11
 80016da:	4013      	ands	r3, r2
 80016dc:	d005      	beq.n	80016ea <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80016de:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <HAL_ADC_ConfigChannel+0x130>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <HAL_ADC_ConfigChannel+0x130>)
 80016e4:	4913      	ldr	r1, [pc, #76]	@ (8001734 <HAL_ADC_ConfigChannel+0x134>)
 80016e6:	400a      	ands	r2, r1
 80016e8:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	@ 0x80
 80016f0:	029b      	lsls	r3, r3, #10
 80016f2:	4013      	ands	r3, r2
 80016f4:	d005      	beq.n	8001702 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <HAL_ADC_ConfigChannel+0x130>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001730 <HAL_ADC_ConfigChannel+0x130>)
 80016fc:	490e      	ldr	r1, [pc, #56]	@ (8001738 <HAL_ADC_ConfigChannel+0x138>)
 80016fe:	400a      	ands	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	2380      	movs	r3, #128	@ 0x80
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	4013      	ands	r3, r2
 800170c:	d005      	beq.n	800171a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 800170e:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <HAL_ADC_ConfigChannel+0x130>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <HAL_ADC_ConfigChannel+0x130>)
 8001714:	4909      	ldr	r1, [pc, #36]	@ (800173c <HAL_ADC_ConfigChannel+0x13c>)
 8001716:	400a      	ands	r2, r1
 8001718:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2250      	movs	r2, #80	@ 0x50
 800171e:	2100      	movs	r1, #0
 8001720:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b002      	add	sp, #8
 800172a:	bd80      	pop	{r7, pc}
 800172c:	00001001 	.word	0x00001001
 8001730:	40012708 	.word	0x40012708
 8001734:	ff7fffff 	.word	0xff7fffff
 8001738:	ffbfffff 	.word	0xffbfffff
 800173c:	feffffff 	.word	0xfeffffff

08001740 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2203      	movs	r2, #3
 8001754:	4013      	ands	r3, r2
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <ADC_Enable+0x2c>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <ADC_Enable+0x2c>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <ADC_Enable+0x2e>
 800176c:	2300      	movs	r3, #0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d146      	bne.n	8001800 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4a24      	ldr	r2, [pc, #144]	@ (800180c <ADC_Enable+0xcc>)
 800177a:	4013      	ands	r3, r2
 800177c:	d00d      	beq.n	800179a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001782:	2210      	movs	r2, #16
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	2201      	movs	r2, #1
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e033      	b.n	8001802 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2101      	movs	r1, #1
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f000 f8e4 	bl	8001978 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80017b0:	f7ff fb86 	bl	8000ec0 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017b8:	e01b      	b.n	80017f2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017ba:	f7ff fb81 	bl	8000ec0 <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b0a      	cmp	r3, #10
 80017c6:	d914      	bls.n	80017f2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d00d      	beq.n	80017f2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017da:	2210      	movs	r2, #16
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e6:	2201      	movs	r2, #1
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e007      	b.n	8001802 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d1dc      	bne.n	80017ba <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	0018      	movs	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	b004      	add	sp, #16
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			@ (mov r8, r8)
 800180c:	80000017 	.word	0x80000017

08001810 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2203      	movs	r2, #3
 8001824:	4013      	ands	r3, r2
 8001826:	2b01      	cmp	r3, #1
 8001828:	d108      	bne.n	800183c <ADC_Disable+0x2c>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2201      	movs	r2, #1
 8001832:	4013      	ands	r3, r2
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <ADC_Disable+0x2c>
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <ADC_Disable+0x2e>
 800183c:	2300      	movs	r3, #0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d048      	beq.n	80018d4 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2205      	movs	r2, #5
 800184a:	4013      	ands	r3, r2
 800184c:	2b01      	cmp	r3, #1
 800184e:	d110      	bne.n	8001872 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2102      	movs	r1, #2
 800185c:	430a      	orrs	r2, r1
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2203      	movs	r2, #3
 8001866:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001868:	f7ff fb2a 	bl	8000ec0 <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001870:	e029      	b.n	80018c6 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001876:	2210      	movs	r2, #16
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001882:	2201      	movs	r2, #1
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e023      	b.n	80018d6 <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800188e:	f7ff fb17 	bl	8000ec0 <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b0a      	cmp	r3, #10
 800189a:	d914      	bls.n	80018c6 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2201      	movs	r2, #1
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d10d      	bne.n	80018c6 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ae:	2210      	movs	r2, #16
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ba:	2201      	movs	r2, #1
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e007      	b.n	80018d6 <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2201      	movs	r2, #1
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d0dc      	beq.n	800188e <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	0018      	movs	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	b004      	add	sp, #16
 80018dc:	bd80      	pop	{r7, pc}

080018de <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2204      	movs	r2, #4
 80018f2:	4013      	ands	r3, r2
 80018f4:	d03a      	beq.n	800196c <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2204      	movs	r2, #4
 80018fe:	4013      	ands	r3, r2
 8001900:	2b04      	cmp	r3, #4
 8001902:	d10d      	bne.n	8001920 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2202      	movs	r2, #2
 800190c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800190e:	d107      	bne.n	8001920 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2110      	movs	r1, #16
 800191c:	430a      	orrs	r2, r1
 800191e:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001920:	f7ff face 	bl	8000ec0 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001928:	e01a      	b.n	8001960 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800192a:	f7ff fac9 	bl	8000ec0 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b0a      	cmp	r3, #10
 8001936:	d913      	bls.n	8001960 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2204      	movs	r2, #4
 8001940:	4013      	ands	r3, r2
 8001942:	d00d      	beq.n	8001960 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001948:	2210      	movs	r2, #16
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	2201      	movs	r2, #1
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e006      	b.n	800196e <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2204      	movs	r2, #4
 8001968:	4013      	ands	r3, r2
 800196a:	d1de      	bne.n	800192a <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b004      	add	sp, #16
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <ADC_DelayMicroSecond+0x38>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	490b      	ldr	r1, [pc, #44]	@ (80019b4 <ADC_DelayMicroSecond+0x3c>)
 8001986:	0018      	movs	r0, r3
 8001988:	f7fe fbc8 	bl	800011c <__udivsi3>
 800198c:	0003      	movs	r3, r0
 800198e:	001a      	movs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4353      	muls	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001996:	e002      	b.n	800199e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3b01      	subs	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f9      	bne.n	8001998 <ADC_DelayMicroSecond+0x20>
  }
}
 80019a4:	46c0      	nop			@ (mov r8, r8)
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b004      	add	sp, #16
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	20000010 	.word	0x20000010
 80019b4:	000f4240 	.word	0x000f4240

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	0002      	movs	r2, r0
 80019c0:	1dfb      	adds	r3, r7, #7
 80019c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019c4:	1dfb      	adds	r3, r7, #7
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80019ca:	d809      	bhi.n	80019e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019cc:	1dfb      	adds	r3, r7, #7
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	001a      	movs	r2, r3
 80019d2:	231f      	movs	r3, #31
 80019d4:	401a      	ands	r2, r3
 80019d6:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_EnableIRQ+0x30>)
 80019d8:	2101      	movs	r1, #1
 80019da:	4091      	lsls	r1, r2
 80019dc:	000a      	movs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
  }
}
 80019e0:	46c0      	nop			@ (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b002      	add	sp, #8
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	0002      	movs	r2, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	1dfb      	adds	r3, r7, #7
 80019f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a00:	d828      	bhi.n	8001a54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a02:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac0 <__NVIC_SetPriority+0xd4>)
 8001a04:	1dfb      	adds	r3, r7, #7
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	33c0      	adds	r3, #192	@ 0xc0
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	589b      	ldr	r3, [r3, r2]
 8001a12:	1dfa      	adds	r2, r7, #7
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	0011      	movs	r1, r2
 8001a18:	2203      	movs	r2, #3
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	00d2      	lsls	r2, r2, #3
 8001a1e:	21ff      	movs	r1, #255	@ 0xff
 8001a20:	4091      	lsls	r1, r2
 8001a22:	000a      	movs	r2, r1
 8001a24:	43d2      	mvns	r2, r2
 8001a26:	401a      	ands	r2, r3
 8001a28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	019b      	lsls	r3, r3, #6
 8001a2e:	22ff      	movs	r2, #255	@ 0xff
 8001a30:	401a      	ands	r2, r3
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	0018      	movs	r0, r3
 8001a38:	2303      	movs	r3, #3
 8001a3a:	4003      	ands	r3, r0
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a40:	481f      	ldr	r0, [pc, #124]	@ (8001ac0 <__NVIC_SetPriority+0xd4>)
 8001a42:	1dfb      	adds	r3, r7, #7
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	33c0      	adds	r3, #192	@ 0xc0
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a52:	e031      	b.n	8001ab8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a54:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac4 <__NVIC_SetPriority+0xd8>)
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	400b      	ands	r3, r1
 8001a60:	3b08      	subs	r3, #8
 8001a62:	089b      	lsrs	r3, r3, #2
 8001a64:	3306      	adds	r3, #6
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	18d3      	adds	r3, r2, r3
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	1dfa      	adds	r2, r7, #7
 8001a70:	7812      	ldrb	r2, [r2, #0]
 8001a72:	0011      	movs	r1, r2
 8001a74:	2203      	movs	r2, #3
 8001a76:	400a      	ands	r2, r1
 8001a78:	00d2      	lsls	r2, r2, #3
 8001a7a:	21ff      	movs	r1, #255	@ 0xff
 8001a7c:	4091      	lsls	r1, r2
 8001a7e:	000a      	movs	r2, r1
 8001a80:	43d2      	mvns	r2, r2
 8001a82:	401a      	ands	r2, r3
 8001a84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	019b      	lsls	r3, r3, #6
 8001a8a:	22ff      	movs	r2, #255	@ 0xff
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	1dfb      	adds	r3, r7, #7
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	0018      	movs	r0, r3
 8001a94:	2303      	movs	r3, #3
 8001a96:	4003      	ands	r3, r0
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a9c:	4809      	ldr	r0, [pc, #36]	@ (8001ac4 <__NVIC_SetPriority+0xd8>)
 8001a9e:	1dfb      	adds	r3, r7, #7
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	001c      	movs	r4, r3
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	4023      	ands	r3, r4
 8001aa8:	3b08      	subs	r3, #8
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	430a      	orrs	r2, r1
 8001aae:	3306      	adds	r3, #6
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	18c3      	adds	r3, r0, r3
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	601a      	str	r2, [r3, #0]
}
 8001ab8:	46c0      	nop			@ (mov r8, r8)
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b003      	add	sp, #12
 8001abe:	bd90      	pop	{r4, r7, pc}
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	1e5a      	subs	r2, r3, #1
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	045b      	lsls	r3, r3, #17
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d301      	bcc.n	8001ae0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001adc:	2301      	movs	r3, #1
 8001ade:	e010      	b.n	8001b02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <SysTick_Config+0x44>)
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae8:	2301      	movs	r3, #1
 8001aea:	425b      	negs	r3, r3
 8001aec:	2103      	movs	r1, #3
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7ff ff7c 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <SysTick_Config+0x44>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <SysTick_Config+0x44>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	0018      	movs	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b002      	add	sp, #8
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	1c02      	adds	r2, r0, #0
 8001b20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	187b      	adds	r3, r7, r1
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b25b      	sxtb	r3, r3
 8001b2a:	0011      	movs	r1, r2
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff ff5d 	bl	80019ec <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b004      	add	sp, #16
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	0002      	movs	r2, r0
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b46:	1dfb      	adds	r3, r7, #7
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff ff33 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	b002      	add	sp, #8
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f7ff ffaf 	bl	8001ac8 <SysTick_Config>
 8001b6a:	0003      	movs	r3, r0
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b002      	add	sp, #8
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b8a:	e14f      	b.n	8001e2c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2101      	movs	r1, #1
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4091      	lsls	r1, r2
 8001b96:	000a      	movs	r2, r1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d100      	bne.n	8001ba4 <HAL_GPIO_Init+0x30>
 8001ba2:	e140      	b.n	8001e26 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d005      	beq.n	8001bbc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d130      	bne.n	8001c1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	0013      	movs	r3, r2
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	0013      	movs	r3, r2
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	2201      	movs	r2, #1
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	0013      	movs	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2203      	movs	r2, #3
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d017      	beq.n	8001c5a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	409a      	lsls	r2, r3
 8001c38:	0013      	movs	r3, r2
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2203      	movs	r2, #3
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d123      	bne.n	8001cae <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	08da      	lsrs	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3208      	adds	r2, #8
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	58d3      	ldr	r3, [r2, r3]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	2207      	movs	r2, #7
 8001c78:	4013      	ands	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	43da      	mvns	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2107      	movs	r1, #7
 8001c92:	400b      	ands	r3, r1
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	409a      	lsls	r2, r3
 8001c98:	0013      	movs	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	08da      	lsrs	r2, r3, #3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3208      	adds	r2, #8
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	6939      	ldr	r1, [r7, #16]
 8001cac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	43da      	mvns	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2203      	movs	r2, #3
 8001ccc:	401a      	ands	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	0013      	movs	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	23c0      	movs	r3, #192	@ 0xc0
 8001ce8:	029b      	lsls	r3, r3, #10
 8001cea:	4013      	ands	r3, r2
 8001cec:	d100      	bne.n	8001cf0 <HAL_GPIO_Init+0x17c>
 8001cee:	e09a      	b.n	8001e26 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf0:	4b54      	ldr	r3, [pc, #336]	@ (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cf4:	4b53      	ldr	r3, [pc, #332]	@ (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cfc:	4a52      	ldr	r2, [pc, #328]	@ (8001e48 <HAL_GPIO_Init+0x2d4>)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	3302      	adds	r3, #2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	589b      	ldr	r3, [r3, r2]
 8001d08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	4013      	ands	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	409a      	lsls	r2, r3
 8001d16:	0013      	movs	r3, r2
 8001d18:	43da      	mvns	r2, r3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	23a0      	movs	r3, #160	@ 0xa0
 8001d24:	05db      	lsls	r3, r3, #23
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x1ea>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a47      	ldr	r2, [pc, #284]	@ (8001e4c <HAL_GPIO_Init+0x2d8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x1e6>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a46      	ldr	r2, [pc, #280]	@ (8001e50 <HAL_GPIO_Init+0x2dc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x1e2>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a45      	ldr	r2, [pc, #276]	@ (8001e54 <HAL_GPIO_Init+0x2e0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x1de>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a44      	ldr	r2, [pc, #272]	@ (8001e58 <HAL_GPIO_Init+0x2e4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x1da>
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	e008      	b.n	8001d60 <HAL_GPIO_Init+0x1ec>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x1ec>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e004      	b.n	8001d60 <HAL_GPIO_Init+0x1ec>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_Init+0x1ec>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_GPIO_Init+0x1ec>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	2103      	movs	r1, #3
 8001d64:	400a      	ands	r2, r1
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d70:	4935      	ldr	r1, [pc, #212]	@ (8001e48 <HAL_GPIO_Init+0x2d4>)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b37      	ldr	r3, [pc, #220]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	43da      	mvns	r2, r3
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	2380      	movs	r3, #128	@ 0x80
 8001d94:	035b      	lsls	r3, r3, #13
 8001d96:	4013      	ands	r3, r2
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001da2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001da8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	43da      	mvns	r2, r3
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4013      	ands	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	039b      	lsls	r3, r3, #14
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dcc:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001dd2:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	2380      	movs	r3, #128	@ 0x80
 8001de8:	029b      	lsls	r3, r3, #10
 8001dea:	4013      	ands	r3, r2
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001df6:	4b19      	ldr	r3, [pc, #100]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	43da      	mvns	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	2380      	movs	r3, #128	@ 0x80
 8001e12:	025b      	lsls	r3, r3, #9
 8001e14:	4013      	ands	r3, r2
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e20:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <HAL_GPIO_Init+0x2e8>)
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	40da      	lsrs	r2, r3
 8001e34:	1e13      	subs	r3, r2, #0
 8001e36:	d000      	beq.n	8001e3a <HAL_GPIO_Init+0x2c6>
 8001e38:	e6a8      	b.n	8001b8c <HAL_GPIO_Init+0x18>
  }
}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	46c0      	nop			@ (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b006      	add	sp, #24
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	50000400 	.word	0x50000400
 8001e50:	50000800 	.word	0x50000800
 8001e54:	50000c00 	.word	0x50000c00
 8001e58:	50001c00 	.word	0x50001c00
 8001e5c:	40010400 	.word	0x40010400

08001e60 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	0008      	movs	r0, r1
 8001e6a:	0011      	movs	r1, r2
 8001e6c:	1cbb      	adds	r3, r7, #2
 8001e6e:	1c02      	adds	r2, r0, #0
 8001e70:	801a      	strh	r2, [r3, #0]
 8001e72:	1c7b      	adds	r3, r7, #1
 8001e74:	1c0a      	adds	r2, r1, #0
 8001e76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e78:	1c7b      	adds	r3, r7, #1
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e80:	1cbb      	adds	r3, r7, #2
 8001e82:	881a      	ldrh	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e88:	e003      	b.n	8001e92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e8a:	1cbb      	adds	r3, r7, #2
 8001e8c:	881a      	ldrh	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b002      	add	sp, #8
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	1dbb      	adds	r3, r7, #6
 8001ea6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ea8:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	1dba      	adds	r2, r7, #6
 8001eae:	8812      	ldrh	r2, [r2, #0]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d008      	beq.n	8001ec6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001eb6:	1dba      	adds	r2, r7, #6
 8001eb8:	8812      	ldrh	r2, [r2, #0]
 8001eba:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ebc:	1dbb      	adds	r3, r7, #6
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7fe febd 	bl	8000c40 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b002      	add	sp, #8
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b08a      	sub	sp, #40	@ 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d102      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f000 fbaf 	bl	8002646 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee8:	4bcf      	ldr	r3, [pc, #828]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	220c      	movs	r2, #12
 8001eee:	4013      	ands	r3, r2
 8001ef0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef2:	4bcd      	ldr	r3, [pc, #820]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	2380      	movs	r3, #128	@ 0x80
 8001ef8:	025b      	lsls	r3, r3, #9
 8001efa:	4013      	ands	r3, r2
 8001efc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2201      	movs	r2, #1
 8001f04:	4013      	ands	r3, r2
 8001f06:	d100      	bne.n	8001f0a <HAL_RCC_OscConfig+0x36>
 8001f08:	e07e      	b.n	8002008 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d007      	beq.n	8001f20 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	2b0c      	cmp	r3, #12
 8001f14:	d112      	bne.n	8001f3c <HAL_RCC_OscConfig+0x68>
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	2380      	movs	r3, #128	@ 0x80
 8001f1a:	025b      	lsls	r3, r3, #9
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d10d      	bne.n	8001f3c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	4bc1      	ldr	r3, [pc, #772]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	@ 0x80
 8001f26:	029b      	lsls	r3, r3, #10
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d100      	bne.n	8001f2e <HAL_RCC_OscConfig+0x5a>
 8001f2c:	e06b      	b.n	8002006 <HAL_RCC_OscConfig+0x132>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d167      	bne.n	8002006 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f000 fb85 	bl	8002646 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	025b      	lsls	r3, r3, #9
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_OscConfig+0x84>
 8001f48:	4bb7      	ldr	r3, [pc, #732]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4bb6      	ldr	r3, [pc, #728]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001f4e:	2180      	movs	r1, #128	@ 0x80
 8001f50:	0249      	lsls	r1, r1, #9
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e027      	b.n	8001fa8 <HAL_RCC_OscConfig+0xd4>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	23a0      	movs	r3, #160	@ 0xa0
 8001f5e:	02db      	lsls	r3, r3, #11
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d10e      	bne.n	8001f82 <HAL_RCC_OscConfig+0xae>
 8001f64:	4bb0      	ldr	r3, [pc, #704]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4baf      	ldr	r3, [pc, #700]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001f6a:	2180      	movs	r1, #128	@ 0x80
 8001f6c:	02c9      	lsls	r1, r1, #11
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	4bad      	ldr	r3, [pc, #692]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4bac      	ldr	r3, [pc, #688]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001f78:	2180      	movs	r1, #128	@ 0x80
 8001f7a:	0249      	lsls	r1, r1, #9
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	e012      	b.n	8001fa8 <HAL_RCC_OscConfig+0xd4>
 8001f82:	4ba9      	ldr	r3, [pc, #676]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4ba8      	ldr	r3, [pc, #672]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001f88:	49a8      	ldr	r1, [pc, #672]	@ (800222c <HAL_RCC_OscConfig+0x358>)
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	4ba6      	ldr	r3, [pc, #664]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	2380      	movs	r3, #128	@ 0x80
 8001f94:	025b      	lsls	r3, r3, #9
 8001f96:	4013      	ands	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4ba2      	ldr	r3, [pc, #648]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4ba1      	ldr	r3, [pc, #644]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001fa2:	49a3      	ldr	r1, [pc, #652]	@ (8002230 <HAL_RCC_OscConfig+0x35c>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d015      	beq.n	8001fdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ff86 	bl	8000ec0 <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fb8:	e009      	b.n	8001fce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fba:	f7fe ff81 	bl	8000ec0 <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b64      	cmp	r3, #100	@ 0x64
 8001fc6:	d902      	bls.n	8001fce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	f000 fb3c 	bl	8002646 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fce:	4b96      	ldr	r3, [pc, #600]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	029b      	lsls	r3, r3, #10
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d0ef      	beq.n	8001fba <HAL_RCC_OscConfig+0xe6>
 8001fda:	e015      	b.n	8002008 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe ff70 	bl	8000ec0 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe6:	f7fe ff6b 	bl	8000ec0 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	@ 0x64
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e326      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ff8:	4b8b      	ldr	r3, [pc, #556]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	@ 0x80
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	4013      	ands	r3, r2
 8002002:	d1f0      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x112>
 8002004:	e000      	b.n	8002008 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002006:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2202      	movs	r2, #2
 800200e:	4013      	ands	r3, r2
 8002010:	d100      	bne.n	8002014 <HAL_RCC_OscConfig+0x140>
 8002012:	e08b      	b.n	800212c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	2b04      	cmp	r3, #4
 800201e:	d005      	beq.n	800202c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d13e      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1d0>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d13b      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800202c:	4b7e      	ldr	r3, [pc, #504]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2204      	movs	r2, #4
 8002032:	4013      	ands	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_RCC_OscConfig+0x16c>
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e302      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b79      	ldr	r3, [pc, #484]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a7b      	ldr	r2, [pc, #492]	@ (8002234 <HAL_RCC_OscConfig+0x360>)
 8002046:	4013      	ands	r3, r2
 8002048:	0019      	movs	r1, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	021a      	lsls	r2, r3, #8
 8002050:	4b75      	ldr	r3, [pc, #468]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8002052:	430a      	orrs	r2, r1
 8002054:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002056:	4b74      	ldr	r3, [pc, #464]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2209      	movs	r2, #9
 800205c:	4393      	bics	r3, r2
 800205e:	0019      	movs	r1, r3
 8002060:	4b71      	ldr	r3, [pc, #452]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	430a      	orrs	r2, r1
 8002066:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002068:	f000 fc40 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 800206c:	0001      	movs	r1, r0
 800206e:	4b6e      	ldr	r3, [pc, #440]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	091b      	lsrs	r3, r3, #4
 8002074:	220f      	movs	r2, #15
 8002076:	4013      	ands	r3, r2
 8002078:	4a6f      	ldr	r2, [pc, #444]	@ (8002238 <HAL_RCC_OscConfig+0x364>)
 800207a:	5cd3      	ldrb	r3, [r2, r3]
 800207c:	000a      	movs	r2, r1
 800207e:	40da      	lsrs	r2, r3
 8002080:	4b6e      	ldr	r3, [pc, #440]	@ (800223c <HAL_RCC_OscConfig+0x368>)
 8002082:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002084:	4b6e      	ldr	r3, [pc, #440]	@ (8002240 <HAL_RCC_OscConfig+0x36c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2513      	movs	r5, #19
 800208a:	197c      	adds	r4, r7, r5
 800208c:	0018      	movs	r0, r3
 800208e:	f7fe fed1 	bl	8000e34 <HAL_InitTick>
 8002092:	0003      	movs	r3, r0
 8002094:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002096:	197b      	adds	r3, r7, r5
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d046      	beq.n	800212c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800209e:	197b      	adds	r3, r7, r5
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	e2d0      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d027      	beq.n	80020fa <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80020aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2209      	movs	r2, #9
 80020b0:	4393      	bics	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	4b5c      	ldr	r3, [pc, #368]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7fe ff00 	bl	8000ec0 <HAL_GetTick>
 80020c0:	0003      	movs	r3, r0
 80020c2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c6:	f7fe fefb 	bl	8000ec0 <HAL_GetTick>
 80020ca:	0002      	movs	r2, r0
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e2b6      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020d8:	4b53      	ldr	r3, [pc, #332]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2204      	movs	r2, #4
 80020de:	4013      	ands	r3, r2
 80020e0:	d0f1      	beq.n	80020c6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b51      	ldr	r3, [pc, #324]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a53      	ldr	r2, [pc, #332]	@ (8002234 <HAL_RCC_OscConfig+0x360>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	021a      	lsls	r2, r3, #8
 80020f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	e018      	b.n	800212c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8002100:	2101      	movs	r1, #1
 8002102:	438a      	bics	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7fe fedb 	bl	8000ec0 <HAL_GetTick>
 800210a:	0003      	movs	r3, r0
 800210c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002110:	f7fe fed6 	bl	8000ec0 <HAL_GetTick>
 8002114:	0002      	movs	r2, r0
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e291      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002122:	4b41      	ldr	r3, [pc, #260]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2204      	movs	r2, #4
 8002128:	4013      	ands	r3, r2
 800212a:	d1f1      	bne.n	8002110 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2210      	movs	r2, #16
 8002132:	4013      	ands	r3, r2
 8002134:	d100      	bne.n	8002138 <HAL_RCC_OscConfig+0x264>
 8002136:	e0a1      	b.n	800227c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d140      	bne.n	80021c0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800213e:	4b3a      	ldr	r3, [pc, #232]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d005      	beq.n	8002156 <HAL_RCC_OscConfig+0x282>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e277      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002156:	4b34      	ldr	r3, [pc, #208]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4a3a      	ldr	r2, [pc, #232]	@ (8002244 <HAL_RCC_OscConfig+0x370>)
 800215c:	4013      	ands	r3, r2
 800215e:	0019      	movs	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002164:	4b30      	ldr	r3, [pc, #192]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800216a:	4b2f      	ldr	r3, [pc, #188]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	0a19      	lsrs	r1, r3, #8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	061a      	lsls	r2, r3, #24
 8002178:	4b2b      	ldr	r3, [pc, #172]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	0b5b      	lsrs	r3, r3, #13
 8002184:	3301      	adds	r3, #1
 8002186:	2280      	movs	r2, #128	@ 0x80
 8002188:	0212      	lsls	r2, r2, #8
 800218a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800218c:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	210f      	movs	r1, #15
 8002194:	400b      	ands	r3, r1
 8002196:	4928      	ldr	r1, [pc, #160]	@ (8002238 <HAL_RCC_OscConfig+0x364>)
 8002198:	5ccb      	ldrb	r3, [r1, r3]
 800219a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800219c:	4b27      	ldr	r3, [pc, #156]	@ (800223c <HAL_RCC_OscConfig+0x368>)
 800219e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80021a0:	4b27      	ldr	r3, [pc, #156]	@ (8002240 <HAL_RCC_OscConfig+0x36c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2513      	movs	r5, #19
 80021a6:	197c      	adds	r4, r7, r5
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7fe fe43 	bl	8000e34 <HAL_InitTick>
 80021ae:	0003      	movs	r3, r0
 80021b0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80021b2:	197b      	adds	r3, r7, r5
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d060      	beq.n	800227c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80021ba:	197b      	adds	r3, r7, r5
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	e242      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d03f      	beq.n	8002248 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021c8:	4b17      	ldr	r3, [pc, #92]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b16      	ldr	r3, [pc, #88]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 80021ce:	2180      	movs	r1, #128	@ 0x80
 80021d0:	0049      	lsls	r1, r1, #1
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7fe fe73 	bl	8000ec0 <HAL_GetTick>
 80021da:	0003      	movs	r3, r0
 80021dc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021e0:	f7fe fe6e 	bl	8000ec0 <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e229      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	2380      	movs	r3, #128	@ 0x80
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4013      	ands	r3, r2
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4a10      	ldr	r2, [pc, #64]	@ (8002244 <HAL_RCC_OscConfig+0x370>)
 8002204:	4013      	ands	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002212:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	0a19      	lsrs	r1, r3, #8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	061a      	lsls	r2, r3, #24
 8002220:	4b01      	ldr	r3, [pc, #4]	@ (8002228 <HAL_RCC_OscConfig+0x354>)
 8002222:	430a      	orrs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	e029      	b.n	800227c <HAL_RCC_OscConfig+0x3a8>
 8002228:	40021000 	.word	0x40021000
 800222c:	fffeffff 	.word	0xfffeffff
 8002230:	fffbffff 	.word	0xfffbffff
 8002234:	ffffe0ff 	.word	0xffffe0ff
 8002238:	08002a84 	.word	0x08002a84
 800223c:	20000010 	.word	0x20000010
 8002240:	20000014 	.word	0x20000014
 8002244:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002248:	4bbd      	ldr	r3, [pc, #756]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4bbc      	ldr	r3, [pc, #752]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 800224e:	49bd      	ldr	r1, [pc, #756]	@ (8002544 <HAL_RCC_OscConfig+0x670>)
 8002250:	400a      	ands	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe fe34 	bl	8000ec0 <HAL_GetTick>
 8002258:	0003      	movs	r3, r0
 800225a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800225e:	f7fe fe2f 	bl	8000ec0 <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e1ea      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002270:	4bb3      	ldr	r3, [pc, #716]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2380      	movs	r3, #128	@ 0x80
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4013      	ands	r3, r2
 800227a:	d1f0      	bne.n	800225e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2208      	movs	r2, #8
 8002282:	4013      	ands	r3, r2
 8002284:	d036      	beq.n	80022f4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d019      	beq.n	80022c2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800228e:	4bac      	ldr	r3, [pc, #688]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002290:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002292:	4bab      	ldr	r3, [pc, #684]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002294:	2101      	movs	r1, #1
 8002296:	430a      	orrs	r2, r1
 8002298:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800229a:	f7fe fe11 	bl	8000ec0 <HAL_GetTick>
 800229e:	0003      	movs	r3, r0
 80022a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a4:	f7fe fe0c 	bl	8000ec0 <HAL_GetTick>
 80022a8:	0002      	movs	r2, r0
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1c7      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022b6:	4ba2      	ldr	r3, [pc, #648]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80022b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ba:	2202      	movs	r2, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	d0f1      	beq.n	80022a4 <HAL_RCC_OscConfig+0x3d0>
 80022c0:	e018      	b.n	80022f4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c2:	4b9f      	ldr	r3, [pc, #636]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80022c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022c6:	4b9e      	ldr	r3, [pc, #632]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80022c8:	2101      	movs	r1, #1
 80022ca:	438a      	bics	r2, r1
 80022cc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ce:	f7fe fdf7 	bl	8000ec0 <HAL_GetTick>
 80022d2:	0003      	movs	r3, r0
 80022d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d8:	f7fe fdf2 	bl	8000ec0 <HAL_GetTick>
 80022dc:	0002      	movs	r2, r0
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1ad      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ea:	4b95      	ldr	r3, [pc, #596]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80022ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022ee:	2202      	movs	r2, #2
 80022f0:	4013      	ands	r3, r2
 80022f2:	d1f1      	bne.n	80022d8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2204      	movs	r2, #4
 80022fa:	4013      	ands	r3, r2
 80022fc:	d100      	bne.n	8002300 <HAL_RCC_OscConfig+0x42c>
 80022fe:	e0ae      	b.n	800245e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002300:	2027      	movs	r0, #39	@ 0x27
 8002302:	183b      	adds	r3, r7, r0
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002308:	4b8d      	ldr	r3, [pc, #564]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 800230a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800230c:	2380      	movs	r3, #128	@ 0x80
 800230e:	055b      	lsls	r3, r3, #21
 8002310:	4013      	ands	r3, r2
 8002312:	d109      	bne.n	8002328 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002314:	4b8a      	ldr	r3, [pc, #552]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002318:	4b89      	ldr	r3, [pc, #548]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 800231a:	2180      	movs	r1, #128	@ 0x80
 800231c:	0549      	lsls	r1, r1, #21
 800231e:	430a      	orrs	r2, r1
 8002320:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002322:	183b      	adds	r3, r7, r0
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002328:	4b87      	ldr	r3, [pc, #540]	@ (8002548 <HAL_RCC_OscConfig+0x674>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	2380      	movs	r3, #128	@ 0x80
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4013      	ands	r3, r2
 8002332:	d11a      	bne.n	800236a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002334:	4b84      	ldr	r3, [pc, #528]	@ (8002548 <HAL_RCC_OscConfig+0x674>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b83      	ldr	r3, [pc, #524]	@ (8002548 <HAL_RCC_OscConfig+0x674>)
 800233a:	2180      	movs	r1, #128	@ 0x80
 800233c:	0049      	lsls	r1, r1, #1
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002342:	f7fe fdbd 	bl	8000ec0 <HAL_GetTick>
 8002346:	0003      	movs	r3, r0
 8002348:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234c:	f7fe fdb8 	bl	8000ec0 <HAL_GetTick>
 8002350:	0002      	movs	r2, r0
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	@ 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e173      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235e:	4b7a      	ldr	r3, [pc, #488]	@ (8002548 <HAL_RCC_OscConfig+0x674>)
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	2380      	movs	r3, #128	@ 0x80
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4013      	ands	r3, r2
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	2380      	movs	r3, #128	@ 0x80
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	429a      	cmp	r2, r3
 8002374:	d107      	bne.n	8002386 <HAL_RCC_OscConfig+0x4b2>
 8002376:	4b72      	ldr	r3, [pc, #456]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002378:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800237a:	4b71      	ldr	r3, [pc, #452]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 800237c:	2180      	movs	r1, #128	@ 0x80
 800237e:	0049      	lsls	r1, r1, #1
 8002380:	430a      	orrs	r2, r1
 8002382:	651a      	str	r2, [r3, #80]	@ 0x50
 8002384:	e031      	b.n	80023ea <HAL_RCC_OscConfig+0x516>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4d4>
 800238e:	4b6c      	ldr	r3, [pc, #432]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002390:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002392:	4b6b      	ldr	r3, [pc, #428]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002394:	496b      	ldr	r1, [pc, #428]	@ (8002544 <HAL_RCC_OscConfig+0x670>)
 8002396:	400a      	ands	r2, r1
 8002398:	651a      	str	r2, [r3, #80]	@ 0x50
 800239a:	4b69      	ldr	r3, [pc, #420]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 800239c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800239e:	4b68      	ldr	r3, [pc, #416]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80023a0:	496a      	ldr	r1, [pc, #424]	@ (800254c <HAL_RCC_OscConfig+0x678>)
 80023a2:	400a      	ands	r2, r1
 80023a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80023a6:	e020      	b.n	80023ea <HAL_RCC_OscConfig+0x516>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	23a0      	movs	r3, #160	@ 0xa0
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d10e      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4fe>
 80023b4:	4b62      	ldr	r3, [pc, #392]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80023b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023b8:	4b61      	ldr	r3, [pc, #388]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80023ba:	2180      	movs	r1, #128	@ 0x80
 80023bc:	00c9      	lsls	r1, r1, #3
 80023be:	430a      	orrs	r2, r1
 80023c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80023c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80023c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80023c8:	2180      	movs	r1, #128	@ 0x80
 80023ca:	0049      	lsls	r1, r1, #1
 80023cc:	430a      	orrs	r2, r1
 80023ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0x516>
 80023d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80023d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80023d8:	495a      	ldr	r1, [pc, #360]	@ (8002544 <HAL_RCC_OscConfig+0x670>)
 80023da:	400a      	ands	r2, r1
 80023dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80023de:	4b58      	ldr	r3, [pc, #352]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80023e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023e2:	4b57      	ldr	r3, [pc, #348]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80023e4:	4959      	ldr	r1, [pc, #356]	@ (800254c <HAL_RCC_OscConfig+0x678>)
 80023e6:	400a      	ands	r2, r1
 80023e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d015      	beq.n	800241e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fd65 	bl	8000ec0 <HAL_GetTick>
 80023f6:	0003      	movs	r3, r0
 80023f8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023fa:	e009      	b.n	8002410 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023fc:	f7fe fd60 	bl	8000ec0 <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	4a52      	ldr	r2, [pc, #328]	@ (8002550 <HAL_RCC_OscConfig+0x67c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e11a      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002410:	4b4b      	ldr	r3, [pc, #300]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002412:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002414:	2380      	movs	r3, #128	@ 0x80
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4013      	ands	r3, r2
 800241a:	d0ef      	beq.n	80023fc <HAL_RCC_OscConfig+0x528>
 800241c:	e014      	b.n	8002448 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7fe fd4f 	bl	8000ec0 <HAL_GetTick>
 8002422:	0003      	movs	r3, r0
 8002424:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002426:	e009      	b.n	800243c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002428:	f7fe fd4a 	bl	8000ec0 <HAL_GetTick>
 800242c:	0002      	movs	r2, r0
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	4a47      	ldr	r2, [pc, #284]	@ (8002550 <HAL_RCC_OscConfig+0x67c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e104      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800243c:	4b40      	ldr	r3, [pc, #256]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 800243e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002440:	2380      	movs	r3, #128	@ 0x80
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4013      	ands	r3, r2
 8002446:	d1ef      	bne.n	8002428 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002448:	2327      	movs	r3, #39	@ 0x27
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d105      	bne.n	800245e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002452:	4b3b      	ldr	r3, [pc, #236]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002454:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002456:	4b3a      	ldr	r3, [pc, #232]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002458:	493e      	ldr	r1, [pc, #248]	@ (8002554 <HAL_RCC_OscConfig+0x680>)
 800245a:	400a      	ands	r2, r1
 800245c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2220      	movs	r2, #32
 8002464:	4013      	ands	r3, r2
 8002466:	d049      	beq.n	80024fc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d026      	beq.n	80024be <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002470:	4b33      	ldr	r3, [pc, #204]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	4b32      	ldr	r3, [pc, #200]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002476:	2101      	movs	r1, #1
 8002478:	430a      	orrs	r2, r1
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	4b30      	ldr	r3, [pc, #192]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 800247e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002480:	4b2f      	ldr	r3, [pc, #188]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002482:	2101      	movs	r1, #1
 8002484:	430a      	orrs	r2, r1
 8002486:	635a      	str	r2, [r3, #52]	@ 0x34
 8002488:	4b33      	ldr	r3, [pc, #204]	@ (8002558 <HAL_RCC_OscConfig+0x684>)
 800248a:	6a1a      	ldr	r2, [r3, #32]
 800248c:	4b32      	ldr	r3, [pc, #200]	@ (8002558 <HAL_RCC_OscConfig+0x684>)
 800248e:	2180      	movs	r1, #128	@ 0x80
 8002490:	0189      	lsls	r1, r1, #6
 8002492:	430a      	orrs	r2, r1
 8002494:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7fe fd13 	bl	8000ec0 <HAL_GetTick>
 800249a:	0003      	movs	r3, r0
 800249c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a0:	f7fe fd0e 	bl	8000ec0 <HAL_GetTick>
 80024a4:	0002      	movs	r2, r0
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e0c9      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024b2:	4b23      	ldr	r3, [pc, #140]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	d0f1      	beq.n	80024a0 <HAL_RCC_OscConfig+0x5cc>
 80024bc:	e01e      	b.n	80024fc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80024be:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80024c4:	2101      	movs	r1, #1
 80024c6:	438a      	bics	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]
 80024ca:	4b23      	ldr	r3, [pc, #140]	@ (8002558 <HAL_RCC_OscConfig+0x684>)
 80024cc:	6a1a      	ldr	r2, [r3, #32]
 80024ce:	4b22      	ldr	r3, [pc, #136]	@ (8002558 <HAL_RCC_OscConfig+0x684>)
 80024d0:	4922      	ldr	r1, [pc, #136]	@ (800255c <HAL_RCC_OscConfig+0x688>)
 80024d2:	400a      	ands	r2, r1
 80024d4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d6:	f7fe fcf3 	bl	8000ec0 <HAL_GetTick>
 80024da:	0003      	movs	r3, r0
 80024dc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024e0:	f7fe fcee 	bl	8000ec0 <HAL_GetTick>
 80024e4:	0002      	movs	r2, r0
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0a9      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024f2:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2202      	movs	r2, #2
 80024f8:	4013      	ands	r3, r2
 80024fa:	d1f1      	bne.n	80024e0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002500:	2b00      	cmp	r3, #0
 8002502:	d100      	bne.n	8002506 <HAL_RCC_OscConfig+0x632>
 8002504:	e09e      	b.n	8002644 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	2b0c      	cmp	r3, #12
 800250a:	d100      	bne.n	800250e <HAL_RCC_OscConfig+0x63a>
 800250c:	e077      	b.n	80025fe <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002512:	2b02      	cmp	r3, #2
 8002514:	d158      	bne.n	80025c8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <HAL_RCC_OscConfig+0x66c>)
 800251c:	4910      	ldr	r1, [pc, #64]	@ (8002560 <HAL_RCC_OscConfig+0x68c>)
 800251e:	400a      	ands	r2, r1
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fe fccd 	bl	8000ec0 <HAL_GetTick>
 8002526:	0003      	movs	r3, r0
 8002528:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800252a:	e01b      	b.n	8002564 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fcc8 	bl	8000ec0 <HAL_GetTick>
 8002530:	0002      	movs	r2, r0
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d914      	bls.n	8002564 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e083      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	40021000 	.word	0x40021000
 8002544:	fffffeff 	.word	0xfffffeff
 8002548:	40007000 	.word	0x40007000
 800254c:	fffffbff 	.word	0xfffffbff
 8002550:	00001388 	.word	0x00001388
 8002554:	efffffff 	.word	0xefffffff
 8002558:	40010000 	.word	0x40010000
 800255c:	ffffdfff 	.word	0xffffdfff
 8002560:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002564:	4b3a      	ldr	r3, [pc, #232]	@ (8002650 <HAL_RCC_OscConfig+0x77c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	049b      	lsls	r3, r3, #18
 800256c:	4013      	ands	r3, r2
 800256e:	d1dd      	bne.n	800252c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002570:	4b37      	ldr	r3, [pc, #220]	@ (8002650 <HAL_RCC_OscConfig+0x77c>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a37      	ldr	r2, [pc, #220]	@ (8002654 <HAL_RCC_OscConfig+0x780>)
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002588:	431a      	orrs	r2, r3
 800258a:	4b31      	ldr	r3, [pc, #196]	@ (8002650 <HAL_RCC_OscConfig+0x77c>)
 800258c:	430a      	orrs	r2, r1
 800258e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002590:	4b2f      	ldr	r3, [pc, #188]	@ (8002650 <HAL_RCC_OscConfig+0x77c>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b2e      	ldr	r3, [pc, #184]	@ (8002650 <HAL_RCC_OscConfig+0x77c>)
 8002596:	2180      	movs	r1, #128	@ 0x80
 8002598:	0449      	lsls	r1, r1, #17
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7fe fc8f 	bl	8000ec0 <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe fc8a 	bl	8000ec0 <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e045      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025ba:	4b25      	ldr	r3, [pc, #148]	@ (8002650 <HAL_RCC_OscConfig+0x77c>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	049b      	lsls	r3, r3, #18
 80025c2:	4013      	ands	r3, r2
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x6d4>
 80025c6:	e03d      	b.n	8002644 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c8:	4b21      	ldr	r3, [pc, #132]	@ (8002650 <HAL_RCC_OscConfig+0x77c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b20      	ldr	r3, [pc, #128]	@ (8002650 <HAL_RCC_OscConfig+0x77c>)
 80025ce:	4922      	ldr	r1, [pc, #136]	@ (8002658 <HAL_RCC_OscConfig+0x784>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fc74 	bl	8000ec0 <HAL_GetTick>
 80025d8:	0003      	movs	r3, r0
 80025da:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025de:	f7fe fc6f 	bl	8000ec0 <HAL_GetTick>
 80025e2:	0002      	movs	r2, r0
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e02a      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025f0:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <HAL_RCC_OscConfig+0x77c>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	2380      	movs	r3, #128	@ 0x80
 80025f6:	049b      	lsls	r3, r3, #18
 80025f8:	4013      	ands	r3, r2
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x70a>
 80025fc:	e022      	b.n	8002644 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e01d      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800260a:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <HAL_RCC_OscConfig+0x77c>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	2380      	movs	r3, #128	@ 0x80
 8002614:	025b      	lsls	r3, r3, #9
 8002616:	401a      	ands	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	429a      	cmp	r2, r3
 800261e:	d10f      	bne.n	8002640 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002620:	69fa      	ldr	r2, [r7, #28]
 8002622:	23f0      	movs	r3, #240	@ 0xf0
 8002624:	039b      	lsls	r3, r3, #14
 8002626:	401a      	ands	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262c:	429a      	cmp	r2, r3
 800262e:	d107      	bne.n	8002640 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002630:	69fa      	ldr	r2, [r7, #28]
 8002632:	23c0      	movs	r3, #192	@ 0xc0
 8002634:	041b      	lsls	r3, r3, #16
 8002636:	401a      	ands	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d001      	beq.n	8002644 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	0018      	movs	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	b00a      	add	sp, #40	@ 0x28
 800264c:	bdb0      	pop	{r4, r5, r7, pc}
 800264e:	46c0      	nop			@ (mov r8, r8)
 8002650:	40021000 	.word	0x40021000
 8002654:	ff02ffff 	.word	0xff02ffff
 8002658:	feffffff 	.word	0xfeffffff

0800265c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b5b0      	push	{r4, r5, r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e128      	b.n	80028c2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002670:	4b96      	ldr	r3, [pc, #600]	@ (80028cc <HAL_RCC_ClockConfig+0x270>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	4013      	ands	r3, r2
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d91e      	bls.n	80026bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b93      	ldr	r3, [pc, #588]	@ (80028cc <HAL_RCC_ClockConfig+0x270>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2201      	movs	r2, #1
 8002684:	4393      	bics	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	4b90      	ldr	r3, [pc, #576]	@ (80028cc <HAL_RCC_ClockConfig+0x270>)
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002690:	f7fe fc16 	bl	8000ec0 <HAL_GetTick>
 8002694:	0003      	movs	r3, r0
 8002696:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002698:	e009      	b.n	80026ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269a:	f7fe fc11 	bl	8000ec0 <HAL_GetTick>
 800269e:	0002      	movs	r2, r0
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	4a8a      	ldr	r2, [pc, #552]	@ (80028d0 <HAL_RCC_ClockConfig+0x274>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e109      	b.n	80028c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b87      	ldr	r3, [pc, #540]	@ (80028cc <HAL_RCC_ClockConfig+0x270>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	4013      	ands	r3, r2
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1ee      	bne.n	800269a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2202      	movs	r2, #2
 80026c2:	4013      	ands	r3, r2
 80026c4:	d009      	beq.n	80026da <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c6:	4b83      	ldr	r3, [pc, #524]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	22f0      	movs	r2, #240	@ 0xf0
 80026cc:	4393      	bics	r3, r2
 80026ce:	0019      	movs	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	4b7f      	ldr	r3, [pc, #508]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 80026d6:	430a      	orrs	r2, r1
 80026d8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	4013      	ands	r3, r2
 80026e2:	d100      	bne.n	80026e6 <HAL_RCC_ClockConfig+0x8a>
 80026e4:	e089      	b.n	80027fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026ee:	4b79      	ldr	r3, [pc, #484]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	@ 0x80
 80026f4:	029b      	lsls	r3, r3, #10
 80026f6:	4013      	ands	r3, r2
 80026f8:	d120      	bne.n	800273c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e0e1      	b.n	80028c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002706:	4b73      	ldr	r3, [pc, #460]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	2380      	movs	r3, #128	@ 0x80
 800270c:	049b      	lsls	r3, r3, #18
 800270e:	4013      	ands	r3, r2
 8002710:	d114      	bne.n	800273c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0d5      	b.n	80028c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d106      	bne.n	800272c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800271e:	4b6d      	ldr	r3, [pc, #436]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2204      	movs	r2, #4
 8002724:	4013      	ands	r3, r2
 8002726:	d109      	bne.n	800273c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0ca      	b.n	80028c2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800272c:	4b69      	ldr	r3, [pc, #420]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4013      	ands	r3, r2
 8002736:	d101      	bne.n	800273c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0c2      	b.n	80028c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273c:	4b65      	ldr	r3, [pc, #404]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2203      	movs	r2, #3
 8002742:	4393      	bics	r3, r2
 8002744:	0019      	movs	r1, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	4b62      	ldr	r3, [pc, #392]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 800274c:	430a      	orrs	r2, r1
 800274e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002750:	f7fe fbb6 	bl	8000ec0 <HAL_GetTick>
 8002754:	0003      	movs	r3, r0
 8002756:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d111      	bne.n	8002784 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002760:	e009      	b.n	8002776 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002762:	f7fe fbad 	bl	8000ec0 <HAL_GetTick>
 8002766:	0002      	movs	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	4a58      	ldr	r2, [pc, #352]	@ (80028d0 <HAL_RCC_ClockConfig+0x274>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0a5      	b.n	80028c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002776:	4b57      	ldr	r3, [pc, #348]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	220c      	movs	r2, #12
 800277c:	4013      	ands	r3, r2
 800277e:	2b08      	cmp	r3, #8
 8002780:	d1ef      	bne.n	8002762 <HAL_RCC_ClockConfig+0x106>
 8002782:	e03a      	b.n	80027fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d111      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800278c:	e009      	b.n	80027a2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278e:	f7fe fb97 	bl	8000ec0 <HAL_GetTick>
 8002792:	0002      	movs	r2, r0
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	4a4d      	ldr	r2, [pc, #308]	@ (80028d0 <HAL_RCC_ClockConfig+0x274>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e08f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a2:	4b4c      	ldr	r3, [pc, #304]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	220c      	movs	r2, #12
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b0c      	cmp	r3, #12
 80027ac:	d1ef      	bne.n	800278e <HAL_RCC_ClockConfig+0x132>
 80027ae:	e024      	b.n	80027fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d11b      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027b8:	e009      	b.n	80027ce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ba:	f7fe fb81 	bl	8000ec0 <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	4a42      	ldr	r2, [pc, #264]	@ (80028d0 <HAL_RCC_ClockConfig+0x274>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e079      	b.n	80028c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ce:	4b41      	ldr	r3, [pc, #260]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	220c      	movs	r2, #12
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d1ef      	bne.n	80027ba <HAL_RCC_ClockConfig+0x15e>
 80027da:	e00e      	b.n	80027fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027dc:	f7fe fb70 	bl	8000ec0 <HAL_GetTick>
 80027e0:	0002      	movs	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	4a3a      	ldr	r2, [pc, #232]	@ (80028d0 <HAL_RCC_ClockConfig+0x274>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e068      	b.n	80028c2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027f0:	4b38      	ldr	r3, [pc, #224]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	220c      	movs	r2, #12
 80027f6:	4013      	ands	r3, r2
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027fa:	4b34      	ldr	r3, [pc, #208]	@ (80028cc <HAL_RCC_ClockConfig+0x270>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	4013      	ands	r3, r2
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d21e      	bcs.n	8002846 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002808:	4b30      	ldr	r3, [pc, #192]	@ (80028cc <HAL_RCC_ClockConfig+0x270>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2201      	movs	r2, #1
 800280e:	4393      	bics	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	4b2e      	ldr	r3, [pc, #184]	@ (80028cc <HAL_RCC_ClockConfig+0x270>)
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800281a:	f7fe fb51 	bl	8000ec0 <HAL_GetTick>
 800281e:	0003      	movs	r3, r0
 8002820:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	e009      	b.n	8002838 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7fe fb4c 	bl	8000ec0 <HAL_GetTick>
 8002828:	0002      	movs	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	4a28      	ldr	r2, [pc, #160]	@ (80028d0 <HAL_RCC_ClockConfig+0x274>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e044      	b.n	80028c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002838:	4b24      	ldr	r3, [pc, #144]	@ (80028cc <HAL_RCC_ClockConfig+0x270>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	4013      	ands	r3, r2
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d1ee      	bne.n	8002824 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2204      	movs	r2, #4
 800284c:	4013      	ands	r3, r2
 800284e:	d009      	beq.n	8002864 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002850:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a20      	ldr	r2, [pc, #128]	@ (80028d8 <HAL_RCC_ClockConfig+0x27c>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 8002860:	430a      	orrs	r2, r1
 8002862:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2208      	movs	r2, #8
 800286a:	4013      	ands	r3, r2
 800286c:	d00a      	beq.n	8002884 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800286e:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	4a1a      	ldr	r2, [pc, #104]	@ (80028dc <HAL_RCC_ClockConfig+0x280>)
 8002874:	4013      	ands	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	00da      	lsls	r2, r3, #3
 800287e:	4b15      	ldr	r3, [pc, #84]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 8002880:	430a      	orrs	r2, r1
 8002882:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002884:	f000 f832 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 8002888:	0001      	movs	r1, r0
 800288a:	4b12      	ldr	r3, [pc, #72]	@ (80028d4 <HAL_RCC_ClockConfig+0x278>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	220f      	movs	r2, #15
 8002892:	4013      	ands	r3, r2
 8002894:	4a12      	ldr	r2, [pc, #72]	@ (80028e0 <HAL_RCC_ClockConfig+0x284>)
 8002896:	5cd3      	ldrb	r3, [r2, r3]
 8002898:	000a      	movs	r2, r1
 800289a:	40da      	lsrs	r2, r3
 800289c:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <HAL_RCC_ClockConfig+0x288>)
 800289e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028a0:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <HAL_RCC_ClockConfig+0x28c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	250b      	movs	r5, #11
 80028a6:	197c      	adds	r4, r7, r5
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7fe fac3 	bl	8000e34 <HAL_InitTick>
 80028ae:	0003      	movs	r3, r0
 80028b0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80028b2:	197b      	adds	r3, r7, r5
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80028ba:	197b      	adds	r3, r7, r5
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	e000      	b.n	80028c2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	0018      	movs	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b004      	add	sp, #16
 80028c8:	bdb0      	pop	{r4, r5, r7, pc}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	40022000 	.word	0x40022000
 80028d0:	00001388 	.word	0x00001388
 80028d4:	40021000 	.word	0x40021000
 80028d8:	fffff8ff 	.word	0xfffff8ff
 80028dc:	ffffc7ff 	.word	0xffffc7ff
 80028e0:	08002a84 	.word	0x08002a84
 80028e4:	20000010 	.word	0x20000010
 80028e8:	20000014 	.word	0x20000014

080028ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80028f2:	4b3c      	ldr	r3, [pc, #240]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	220c      	movs	r2, #12
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	d013      	beq.n	800292a <HAL_RCC_GetSysClockFreq+0x3e>
 8002902:	d85c      	bhi.n	80029be <HAL_RCC_GetSysClockFreq+0xd2>
 8002904:	2b04      	cmp	r3, #4
 8002906:	d002      	beq.n	800290e <HAL_RCC_GetSysClockFreq+0x22>
 8002908:	2b08      	cmp	r3, #8
 800290a:	d00b      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x38>
 800290c:	e057      	b.n	80029be <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800290e:	4b35      	ldr	r3, [pc, #212]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2210      	movs	r2, #16
 8002914:	4013      	ands	r3, r2
 8002916:	d002      	beq.n	800291e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002918:	4b33      	ldr	r3, [pc, #204]	@ (80029e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800291a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800291c:	e05d      	b.n	80029da <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800291e:	4b33      	ldr	r3, [pc, #204]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x100>)
 8002920:	613b      	str	r3, [r7, #16]
      break;
 8002922:	e05a      	b.n	80029da <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002924:	4b32      	ldr	r3, [pc, #200]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002926:	613b      	str	r3, [r7, #16]
      break;
 8002928:	e057      	b.n	80029da <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	0c9b      	lsrs	r3, r3, #18
 800292e:	220f      	movs	r2, #15
 8002930:	4013      	ands	r3, r2
 8002932:	4a30      	ldr	r2, [pc, #192]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002934:	5cd3      	ldrb	r3, [r2, r3]
 8002936:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	0d9b      	lsrs	r3, r3, #22
 800293c:	2203      	movs	r2, #3
 800293e:	4013      	ands	r3, r2
 8002940:	3301      	adds	r3, #1
 8002942:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002944:	4b27      	ldr	r3, [pc, #156]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	025b      	lsls	r3, r3, #9
 800294c:	4013      	ands	r3, r2
 800294e:	d00f      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	000a      	movs	r2, r1
 8002954:	0152      	lsls	r2, r2, #5
 8002956:	1a52      	subs	r2, r2, r1
 8002958:	0193      	lsls	r3, r2, #6
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	185b      	adds	r3, r3, r1
 8002960:	025b      	lsls	r3, r3, #9
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	0018      	movs	r0, r3
 8002966:	f7fd fbd9 	bl	800011c <__udivsi3>
 800296a:	0003      	movs	r3, r0
 800296c:	617b      	str	r3, [r7, #20]
 800296e:	e023      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002970:	4b1c      	ldr	r3, [pc, #112]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2210      	movs	r2, #16
 8002976:	4013      	ands	r3, r2
 8002978:	d00f      	beq.n	800299a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800297a:	68b9      	ldr	r1, [r7, #8]
 800297c:	000a      	movs	r2, r1
 800297e:	0152      	lsls	r2, r2, #5
 8002980:	1a52      	subs	r2, r2, r1
 8002982:	0193      	lsls	r3, r2, #6
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	185b      	adds	r3, r3, r1
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	0018      	movs	r0, r3
 8002990:	f7fd fbc4 	bl	800011c <__udivsi3>
 8002994:	0003      	movs	r3, r0
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	e00e      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	000a      	movs	r2, r1
 800299e:	0152      	lsls	r2, r2, #5
 80029a0:	1a52      	subs	r2, r2, r1
 80029a2:	0193      	lsls	r3, r2, #6
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	185b      	adds	r3, r3, r1
 80029aa:	029b      	lsls	r3, r3, #10
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f7fd fbb4 	bl	800011c <__udivsi3>
 80029b4:	0003      	movs	r3, r0
 80029b6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	613b      	str	r3, [r7, #16]
      break;
 80029bc:	e00d      	b.n	80029da <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80029be:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	0b5b      	lsrs	r3, r3, #13
 80029c4:	2207      	movs	r2, #7
 80029c6:	4013      	ands	r3, r2
 80029c8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	3301      	adds	r3, #1
 80029ce:	2280      	movs	r2, #128	@ 0x80
 80029d0:	0212      	lsls	r2, r2, #8
 80029d2:	409a      	lsls	r2, r3
 80029d4:	0013      	movs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
      break;
 80029d8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029da:	693b      	ldr	r3, [r7, #16]
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b006      	add	sp, #24
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	003d0900 	.word	0x003d0900
 80029ec:	00f42400 	.word	0x00f42400
 80029f0:	007a1200 	.word	0x007a1200
 80029f4:	08002a94 	.word	0x08002a94

080029f8 <memset>:
 80029f8:	0003      	movs	r3, r0
 80029fa:	1882      	adds	r2, r0, r2
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d100      	bne.n	8002a02 <memset+0xa>
 8002a00:	4770      	bx	lr
 8002a02:	7019      	strb	r1, [r3, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	e7f9      	b.n	80029fc <memset+0x4>

08002a08 <__libc_init_array>:
 8002a08:	b570      	push	{r4, r5, r6, lr}
 8002a0a:	2600      	movs	r6, #0
 8002a0c:	4c0c      	ldr	r4, [pc, #48]	@ (8002a40 <__libc_init_array+0x38>)
 8002a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8002a44 <__libc_init_array+0x3c>)
 8002a10:	1b64      	subs	r4, r4, r5
 8002a12:	10a4      	asrs	r4, r4, #2
 8002a14:	42a6      	cmp	r6, r4
 8002a16:	d109      	bne.n	8002a2c <__libc_init_array+0x24>
 8002a18:	2600      	movs	r6, #0
 8002a1a:	f000 f819 	bl	8002a50 <_init>
 8002a1e:	4c0a      	ldr	r4, [pc, #40]	@ (8002a48 <__libc_init_array+0x40>)
 8002a20:	4d0a      	ldr	r5, [pc, #40]	@ (8002a4c <__libc_init_array+0x44>)
 8002a22:	1b64      	subs	r4, r4, r5
 8002a24:	10a4      	asrs	r4, r4, #2
 8002a26:	42a6      	cmp	r6, r4
 8002a28:	d105      	bne.n	8002a36 <__libc_init_array+0x2e>
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
 8002a2c:	00b3      	lsls	r3, r6, #2
 8002a2e:	58eb      	ldr	r3, [r5, r3]
 8002a30:	4798      	blx	r3
 8002a32:	3601      	adds	r6, #1
 8002a34:	e7ee      	b.n	8002a14 <__libc_init_array+0xc>
 8002a36:	00b3      	lsls	r3, r6, #2
 8002a38:	58eb      	ldr	r3, [r5, r3]
 8002a3a:	4798      	blx	r3
 8002a3c:	3601      	adds	r6, #1
 8002a3e:	e7f2      	b.n	8002a26 <__libc_init_array+0x1e>
 8002a40:	08002aa0 	.word	0x08002aa0
 8002a44:	08002aa0 	.word	0x08002aa0
 8002a48:	08002aa4 	.word	0x08002aa4
 8002a4c:	08002aa0 	.word	0x08002aa0

08002a50 <_init>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr

08002a5c <_fini>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a62:	bc08      	pop	{r3}
 8002a64:	469e      	mov	lr, r3
 8002a66:	4770      	bx	lr


RevisaoConteudosBasicos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c0c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003ccc  08003ccc  00004ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d28  08003d28  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003d28  08003d28  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003d28  08003d28  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d28  08003d28  00004d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d2c  08003d2c  00004d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d30  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08003d3c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003d3c  00005118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000075c5  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158f  00000000  00000000  0000c5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0000db88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000061c  00000000  00000000  0000e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012ac9  00000000  00000000  0000e9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c08  00000000  00000000  00021475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007539d  00000000  00000000  0002a07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009f41a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d14  00000000  00000000  0009f460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000a1174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003cb4 	.word	0x08003cb4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003cb4 	.word	0x08003cb4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_i2f>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	2800      	cmp	r0, #0
 80003f8:	d012      	beq.n	8000420 <__aeabi_i2f+0x2c>
 80003fa:	17c3      	asrs	r3, r0, #31
 80003fc:	18c5      	adds	r5, r0, r3
 80003fe:	405d      	eors	r5, r3
 8000400:	0fc4      	lsrs	r4, r0, #31
 8000402:	0028      	movs	r0, r5
 8000404:	f000 fc0e 	bl	8000c24 <__clzsi2>
 8000408:	239e      	movs	r3, #158	@ 0x9e
 800040a:	1a1b      	subs	r3, r3, r0
 800040c:	2b96      	cmp	r3, #150	@ 0x96
 800040e:	dc0f      	bgt.n	8000430 <__aeabi_i2f+0x3c>
 8000410:	2808      	cmp	r0, #8
 8000412:	d038      	beq.n	8000486 <__aeabi_i2f+0x92>
 8000414:	3808      	subs	r0, #8
 8000416:	4085      	lsls	r5, r0
 8000418:	026d      	lsls	r5, r5, #9
 800041a:	0a6d      	lsrs	r5, r5, #9
 800041c:	b2d8      	uxtb	r0, r3
 800041e:	e002      	b.n	8000426 <__aeabi_i2f+0x32>
 8000420:	2400      	movs	r4, #0
 8000422:	2000      	movs	r0, #0
 8000424:	2500      	movs	r5, #0
 8000426:	05c0      	lsls	r0, r0, #23
 8000428:	4328      	orrs	r0, r5
 800042a:	07e4      	lsls	r4, r4, #31
 800042c:	4320      	orrs	r0, r4
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	2b99      	cmp	r3, #153	@ 0x99
 8000432:	dc14      	bgt.n	800045e <__aeabi_i2f+0x6a>
 8000434:	1f42      	subs	r2, r0, #5
 8000436:	4095      	lsls	r5, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4915      	ldr	r1, [pc, #84]	@ (8000490 <__aeabi_i2f+0x9c>)
 800043c:	4011      	ands	r1, r2
 800043e:	0755      	lsls	r5, r2, #29
 8000440:	d01c      	beq.n	800047c <__aeabi_i2f+0x88>
 8000442:	250f      	movs	r5, #15
 8000444:	402a      	ands	r2, r5
 8000446:	2a04      	cmp	r2, #4
 8000448:	d018      	beq.n	800047c <__aeabi_i2f+0x88>
 800044a:	3104      	adds	r1, #4
 800044c:	08ca      	lsrs	r2, r1, #3
 800044e:	0149      	lsls	r1, r1, #5
 8000450:	d515      	bpl.n	800047e <__aeabi_i2f+0x8a>
 8000452:	239f      	movs	r3, #159	@ 0x9f
 8000454:	0252      	lsls	r2, r2, #9
 8000456:	1a18      	subs	r0, r3, r0
 8000458:	0a55      	lsrs	r5, r2, #9
 800045a:	b2c0      	uxtb	r0, r0
 800045c:	e7e3      	b.n	8000426 <__aeabi_i2f+0x32>
 800045e:	2205      	movs	r2, #5
 8000460:	0029      	movs	r1, r5
 8000462:	1a12      	subs	r2, r2, r0
 8000464:	40d1      	lsrs	r1, r2
 8000466:	0002      	movs	r2, r0
 8000468:	321b      	adds	r2, #27
 800046a:	4095      	lsls	r5, r2
 800046c:	002a      	movs	r2, r5
 800046e:	1e55      	subs	r5, r2, #1
 8000470:	41aa      	sbcs	r2, r5
 8000472:	430a      	orrs	r2, r1
 8000474:	4906      	ldr	r1, [pc, #24]	@ (8000490 <__aeabi_i2f+0x9c>)
 8000476:	4011      	ands	r1, r2
 8000478:	0755      	lsls	r5, r2, #29
 800047a:	d1e2      	bne.n	8000442 <__aeabi_i2f+0x4e>
 800047c:	08ca      	lsrs	r2, r1, #3
 800047e:	0252      	lsls	r2, r2, #9
 8000480:	0a55      	lsrs	r5, r2, #9
 8000482:	b2d8      	uxtb	r0, r3
 8000484:	e7cf      	b.n	8000426 <__aeabi_i2f+0x32>
 8000486:	026d      	lsls	r5, r5, #9
 8000488:	0a6d      	lsrs	r5, r5, #9
 800048a:	308e      	adds	r0, #142	@ 0x8e
 800048c:	e7cb      	b.n	8000426 <__aeabi_i2f+0x32>
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	fbffffff 	.word	0xfbffffff

08000494 <__aeabi_ddiv>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	46de      	mov	lr, fp
 8000498:	4645      	mov	r5, r8
 800049a:	4657      	mov	r7, sl
 800049c:	464e      	mov	r6, r9
 800049e:	b5e0      	push	{r5, r6, r7, lr}
 80004a0:	b087      	sub	sp, #28
 80004a2:	9200      	str	r2, [sp, #0]
 80004a4:	9301      	str	r3, [sp, #4]
 80004a6:	030b      	lsls	r3, r1, #12
 80004a8:	0b1b      	lsrs	r3, r3, #12
 80004aa:	469b      	mov	fp, r3
 80004ac:	0fca      	lsrs	r2, r1, #31
 80004ae:	004b      	lsls	r3, r1, #1
 80004b0:	0004      	movs	r4, r0
 80004b2:	4680      	mov	r8, r0
 80004b4:	0d5b      	lsrs	r3, r3, #21
 80004b6:	9202      	str	r2, [sp, #8]
 80004b8:	d100      	bne.n	80004bc <__aeabi_ddiv+0x28>
 80004ba:	e098      	b.n	80005ee <__aeabi_ddiv+0x15a>
 80004bc:	4a7c      	ldr	r2, [pc, #496]	@ (80006b0 <__aeabi_ddiv+0x21c>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d037      	beq.n	8000532 <__aeabi_ddiv+0x9e>
 80004c2:	4659      	mov	r1, fp
 80004c4:	0f42      	lsrs	r2, r0, #29
 80004c6:	00c9      	lsls	r1, r1, #3
 80004c8:	430a      	orrs	r2, r1
 80004ca:	2180      	movs	r1, #128	@ 0x80
 80004cc:	0409      	lsls	r1, r1, #16
 80004ce:	4311      	orrs	r1, r2
 80004d0:	00c2      	lsls	r2, r0, #3
 80004d2:	4690      	mov	r8, r2
 80004d4:	4a77      	ldr	r2, [pc, #476]	@ (80006b4 <__aeabi_ddiv+0x220>)
 80004d6:	4689      	mov	r9, r1
 80004d8:	4692      	mov	sl, r2
 80004da:	449a      	add	sl, r3
 80004dc:	2300      	movs	r3, #0
 80004de:	2400      	movs	r4, #0
 80004e0:	9303      	str	r3, [sp, #12]
 80004e2:	9e00      	ldr	r6, [sp, #0]
 80004e4:	9f01      	ldr	r7, [sp, #4]
 80004e6:	033b      	lsls	r3, r7, #12
 80004e8:	0b1b      	lsrs	r3, r3, #12
 80004ea:	469b      	mov	fp, r3
 80004ec:	007b      	lsls	r3, r7, #1
 80004ee:	0030      	movs	r0, r6
 80004f0:	0d5b      	lsrs	r3, r3, #21
 80004f2:	0ffd      	lsrs	r5, r7, #31
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d059      	beq.n	80005ac <__aeabi_ddiv+0x118>
 80004f8:	4a6d      	ldr	r2, [pc, #436]	@ (80006b0 <__aeabi_ddiv+0x21c>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d048      	beq.n	8000590 <__aeabi_ddiv+0xfc>
 80004fe:	4659      	mov	r1, fp
 8000500:	0f72      	lsrs	r2, r6, #29
 8000502:	00c9      	lsls	r1, r1, #3
 8000504:	430a      	orrs	r2, r1
 8000506:	2180      	movs	r1, #128	@ 0x80
 8000508:	0409      	lsls	r1, r1, #16
 800050a:	4311      	orrs	r1, r2
 800050c:	468b      	mov	fp, r1
 800050e:	4969      	ldr	r1, [pc, #420]	@ (80006b4 <__aeabi_ddiv+0x220>)
 8000510:	00f2      	lsls	r2, r6, #3
 8000512:	468c      	mov	ip, r1
 8000514:	4651      	mov	r1, sl
 8000516:	4463      	add	r3, ip
 8000518:	1acb      	subs	r3, r1, r3
 800051a:	469a      	mov	sl, r3
 800051c:	2100      	movs	r1, #0
 800051e:	9e02      	ldr	r6, [sp, #8]
 8000520:	406e      	eors	r6, r5
 8000522:	b2f6      	uxtb	r6, r6
 8000524:	2c0f      	cmp	r4, #15
 8000526:	d900      	bls.n	800052a <__aeabi_ddiv+0x96>
 8000528:	e0ce      	b.n	80006c8 <__aeabi_ddiv+0x234>
 800052a:	4b63      	ldr	r3, [pc, #396]	@ (80006b8 <__aeabi_ddiv+0x224>)
 800052c:	00a4      	lsls	r4, r4, #2
 800052e:	591b      	ldr	r3, [r3, r4]
 8000530:	469f      	mov	pc, r3
 8000532:	465a      	mov	r2, fp
 8000534:	4302      	orrs	r2, r0
 8000536:	4691      	mov	r9, r2
 8000538:	d000      	beq.n	800053c <__aeabi_ddiv+0xa8>
 800053a:	e090      	b.n	800065e <__aeabi_ddiv+0x1ca>
 800053c:	469a      	mov	sl, r3
 800053e:	2302      	movs	r3, #2
 8000540:	4690      	mov	r8, r2
 8000542:	2408      	movs	r4, #8
 8000544:	9303      	str	r3, [sp, #12]
 8000546:	e7cc      	b.n	80004e2 <__aeabi_ddiv+0x4e>
 8000548:	46cb      	mov	fp, r9
 800054a:	4642      	mov	r2, r8
 800054c:	9d02      	ldr	r5, [sp, #8]
 800054e:	9903      	ldr	r1, [sp, #12]
 8000550:	2902      	cmp	r1, #2
 8000552:	d100      	bne.n	8000556 <__aeabi_ddiv+0xc2>
 8000554:	e1de      	b.n	8000914 <__aeabi_ddiv+0x480>
 8000556:	2903      	cmp	r1, #3
 8000558:	d100      	bne.n	800055c <__aeabi_ddiv+0xc8>
 800055a:	e08d      	b.n	8000678 <__aeabi_ddiv+0x1e4>
 800055c:	2901      	cmp	r1, #1
 800055e:	d000      	beq.n	8000562 <__aeabi_ddiv+0xce>
 8000560:	e179      	b.n	8000856 <__aeabi_ddiv+0x3c2>
 8000562:	002e      	movs	r6, r5
 8000564:	2200      	movs	r2, #0
 8000566:	2300      	movs	r3, #0
 8000568:	2400      	movs	r4, #0
 800056a:	4690      	mov	r8, r2
 800056c:	051b      	lsls	r3, r3, #20
 800056e:	4323      	orrs	r3, r4
 8000570:	07f6      	lsls	r6, r6, #31
 8000572:	4333      	orrs	r3, r6
 8000574:	4640      	mov	r0, r8
 8000576:	0019      	movs	r1, r3
 8000578:	b007      	add	sp, #28
 800057a:	bcf0      	pop	{r4, r5, r6, r7}
 800057c:	46bb      	mov	fp, r7
 800057e:	46b2      	mov	sl, r6
 8000580:	46a9      	mov	r9, r5
 8000582:	46a0      	mov	r8, r4
 8000584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000586:	2200      	movs	r2, #0
 8000588:	2400      	movs	r4, #0
 800058a:	4690      	mov	r8, r2
 800058c:	4b48      	ldr	r3, [pc, #288]	@ (80006b0 <__aeabi_ddiv+0x21c>)
 800058e:	e7ed      	b.n	800056c <__aeabi_ddiv+0xd8>
 8000590:	465a      	mov	r2, fp
 8000592:	9b00      	ldr	r3, [sp, #0]
 8000594:	431a      	orrs	r2, r3
 8000596:	4b49      	ldr	r3, [pc, #292]	@ (80006bc <__aeabi_ddiv+0x228>)
 8000598:	469c      	mov	ip, r3
 800059a:	44e2      	add	sl, ip
 800059c:	2a00      	cmp	r2, #0
 800059e:	d159      	bne.n	8000654 <__aeabi_ddiv+0x1c0>
 80005a0:	2302      	movs	r3, #2
 80005a2:	431c      	orrs	r4, r3
 80005a4:	2300      	movs	r3, #0
 80005a6:	2102      	movs	r1, #2
 80005a8:	469b      	mov	fp, r3
 80005aa:	e7b8      	b.n	800051e <__aeabi_ddiv+0x8a>
 80005ac:	465a      	mov	r2, fp
 80005ae:	9b00      	ldr	r3, [sp, #0]
 80005b0:	431a      	orrs	r2, r3
 80005b2:	d049      	beq.n	8000648 <__aeabi_ddiv+0x1b4>
 80005b4:	465b      	mov	r3, fp
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d100      	bne.n	80005bc <__aeabi_ddiv+0x128>
 80005ba:	e19c      	b.n	80008f6 <__aeabi_ddiv+0x462>
 80005bc:	4658      	mov	r0, fp
 80005be:	f000 fb31 	bl	8000c24 <__clzsi2>
 80005c2:	0002      	movs	r2, r0
 80005c4:	0003      	movs	r3, r0
 80005c6:	3a0b      	subs	r2, #11
 80005c8:	271d      	movs	r7, #29
 80005ca:	9e00      	ldr	r6, [sp, #0]
 80005cc:	1aba      	subs	r2, r7, r2
 80005ce:	0019      	movs	r1, r3
 80005d0:	4658      	mov	r0, fp
 80005d2:	40d6      	lsrs	r6, r2
 80005d4:	3908      	subs	r1, #8
 80005d6:	4088      	lsls	r0, r1
 80005d8:	0032      	movs	r2, r6
 80005da:	4302      	orrs	r2, r0
 80005dc:	4693      	mov	fp, r2
 80005de:	9a00      	ldr	r2, [sp, #0]
 80005e0:	408a      	lsls	r2, r1
 80005e2:	4937      	ldr	r1, [pc, #220]	@ (80006c0 <__aeabi_ddiv+0x22c>)
 80005e4:	4453      	add	r3, sl
 80005e6:	468a      	mov	sl, r1
 80005e8:	2100      	movs	r1, #0
 80005ea:	449a      	add	sl, r3
 80005ec:	e797      	b.n	800051e <__aeabi_ddiv+0x8a>
 80005ee:	465b      	mov	r3, fp
 80005f0:	4303      	orrs	r3, r0
 80005f2:	4699      	mov	r9, r3
 80005f4:	d021      	beq.n	800063a <__aeabi_ddiv+0x1a6>
 80005f6:	465b      	mov	r3, fp
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d100      	bne.n	80005fe <__aeabi_ddiv+0x16a>
 80005fc:	e169      	b.n	80008d2 <__aeabi_ddiv+0x43e>
 80005fe:	4658      	mov	r0, fp
 8000600:	f000 fb10 	bl	8000c24 <__clzsi2>
 8000604:	230b      	movs	r3, #11
 8000606:	425b      	negs	r3, r3
 8000608:	469c      	mov	ip, r3
 800060a:	0002      	movs	r2, r0
 800060c:	4484      	add	ip, r0
 800060e:	4666      	mov	r6, ip
 8000610:	231d      	movs	r3, #29
 8000612:	1b9b      	subs	r3, r3, r6
 8000614:	0026      	movs	r6, r4
 8000616:	0011      	movs	r1, r2
 8000618:	4658      	mov	r0, fp
 800061a:	40de      	lsrs	r6, r3
 800061c:	3908      	subs	r1, #8
 800061e:	4088      	lsls	r0, r1
 8000620:	0033      	movs	r3, r6
 8000622:	4303      	orrs	r3, r0
 8000624:	4699      	mov	r9, r3
 8000626:	0023      	movs	r3, r4
 8000628:	408b      	lsls	r3, r1
 800062a:	4698      	mov	r8, r3
 800062c:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <__aeabi_ddiv+0x230>)
 800062e:	2400      	movs	r4, #0
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	469a      	mov	sl, r3
 8000634:	2300      	movs	r3, #0
 8000636:	9303      	str	r3, [sp, #12]
 8000638:	e753      	b.n	80004e2 <__aeabi_ddiv+0x4e>
 800063a:	2300      	movs	r3, #0
 800063c:	4698      	mov	r8, r3
 800063e:	469a      	mov	sl, r3
 8000640:	3301      	adds	r3, #1
 8000642:	2404      	movs	r4, #4
 8000644:	9303      	str	r3, [sp, #12]
 8000646:	e74c      	b.n	80004e2 <__aeabi_ddiv+0x4e>
 8000648:	2301      	movs	r3, #1
 800064a:	431c      	orrs	r4, r3
 800064c:	2300      	movs	r3, #0
 800064e:	2101      	movs	r1, #1
 8000650:	469b      	mov	fp, r3
 8000652:	e764      	b.n	800051e <__aeabi_ddiv+0x8a>
 8000654:	2303      	movs	r3, #3
 8000656:	0032      	movs	r2, r6
 8000658:	2103      	movs	r1, #3
 800065a:	431c      	orrs	r4, r3
 800065c:	e75f      	b.n	800051e <__aeabi_ddiv+0x8a>
 800065e:	469a      	mov	sl, r3
 8000660:	2303      	movs	r3, #3
 8000662:	46d9      	mov	r9, fp
 8000664:	240c      	movs	r4, #12
 8000666:	9303      	str	r3, [sp, #12]
 8000668:	e73b      	b.n	80004e2 <__aeabi_ddiv+0x4e>
 800066a:	2300      	movs	r3, #0
 800066c:	2480      	movs	r4, #128	@ 0x80
 800066e:	4698      	mov	r8, r3
 8000670:	2600      	movs	r6, #0
 8000672:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <__aeabi_ddiv+0x21c>)
 8000674:	0324      	lsls	r4, r4, #12
 8000676:	e779      	b.n	800056c <__aeabi_ddiv+0xd8>
 8000678:	2480      	movs	r4, #128	@ 0x80
 800067a:	465b      	mov	r3, fp
 800067c:	0324      	lsls	r4, r4, #12
 800067e:	431c      	orrs	r4, r3
 8000680:	0324      	lsls	r4, r4, #12
 8000682:	002e      	movs	r6, r5
 8000684:	4690      	mov	r8, r2
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <__aeabi_ddiv+0x21c>)
 8000688:	0b24      	lsrs	r4, r4, #12
 800068a:	e76f      	b.n	800056c <__aeabi_ddiv+0xd8>
 800068c:	2480      	movs	r4, #128	@ 0x80
 800068e:	464b      	mov	r3, r9
 8000690:	0324      	lsls	r4, r4, #12
 8000692:	4223      	tst	r3, r4
 8000694:	d002      	beq.n	800069c <__aeabi_ddiv+0x208>
 8000696:	465b      	mov	r3, fp
 8000698:	4223      	tst	r3, r4
 800069a:	d0f0      	beq.n	800067e <__aeabi_ddiv+0x1ea>
 800069c:	2480      	movs	r4, #128	@ 0x80
 800069e:	464b      	mov	r3, r9
 80006a0:	0324      	lsls	r4, r4, #12
 80006a2:	431c      	orrs	r4, r3
 80006a4:	0324      	lsls	r4, r4, #12
 80006a6:	9e02      	ldr	r6, [sp, #8]
 80006a8:	4b01      	ldr	r3, [pc, #4]	@ (80006b0 <__aeabi_ddiv+0x21c>)
 80006aa:	0b24      	lsrs	r4, r4, #12
 80006ac:	e75e      	b.n	800056c <__aeabi_ddiv+0xd8>
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	000007ff 	.word	0x000007ff
 80006b4:	fffffc01 	.word	0xfffffc01
 80006b8:	08003ccc 	.word	0x08003ccc
 80006bc:	fffff801 	.word	0xfffff801
 80006c0:	000003f3 	.word	0x000003f3
 80006c4:	fffffc0d 	.word	0xfffffc0d
 80006c8:	45cb      	cmp	fp, r9
 80006ca:	d200      	bcs.n	80006ce <__aeabi_ddiv+0x23a>
 80006cc:	e0f8      	b.n	80008c0 <__aeabi_ddiv+0x42c>
 80006ce:	d100      	bne.n	80006d2 <__aeabi_ddiv+0x23e>
 80006d0:	e0f3      	b.n	80008ba <__aeabi_ddiv+0x426>
 80006d2:	2301      	movs	r3, #1
 80006d4:	425b      	negs	r3, r3
 80006d6:	469c      	mov	ip, r3
 80006d8:	4644      	mov	r4, r8
 80006da:	4648      	mov	r0, r9
 80006dc:	2500      	movs	r5, #0
 80006de:	44e2      	add	sl, ip
 80006e0:	465b      	mov	r3, fp
 80006e2:	0e17      	lsrs	r7, r2, #24
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	431f      	orrs	r7, r3
 80006e8:	0c19      	lsrs	r1, r3, #16
 80006ea:	043b      	lsls	r3, r7, #16
 80006ec:	0212      	lsls	r2, r2, #8
 80006ee:	9700      	str	r7, [sp, #0]
 80006f0:	0c1f      	lsrs	r7, r3, #16
 80006f2:	4691      	mov	r9, r2
 80006f4:	9102      	str	r1, [sp, #8]
 80006f6:	9703      	str	r7, [sp, #12]
 80006f8:	f7ff fd8c 	bl	8000214 <__aeabi_uidivmod>
 80006fc:	0002      	movs	r2, r0
 80006fe:	437a      	muls	r2, r7
 8000700:	040b      	lsls	r3, r1, #16
 8000702:	0c21      	lsrs	r1, r4, #16
 8000704:	4680      	mov	r8, r0
 8000706:	4319      	orrs	r1, r3
 8000708:	428a      	cmp	r2, r1
 800070a:	d909      	bls.n	8000720 <__aeabi_ddiv+0x28c>
 800070c:	9f00      	ldr	r7, [sp, #0]
 800070e:	2301      	movs	r3, #1
 8000710:	46bc      	mov	ip, r7
 8000712:	425b      	negs	r3, r3
 8000714:	4461      	add	r1, ip
 8000716:	469c      	mov	ip, r3
 8000718:	44e0      	add	r8, ip
 800071a:	428f      	cmp	r7, r1
 800071c:	d800      	bhi.n	8000720 <__aeabi_ddiv+0x28c>
 800071e:	e15c      	b.n	80009da <__aeabi_ddiv+0x546>
 8000720:	1a88      	subs	r0, r1, r2
 8000722:	9902      	ldr	r1, [sp, #8]
 8000724:	f7ff fd76 	bl	8000214 <__aeabi_uidivmod>
 8000728:	9a03      	ldr	r2, [sp, #12]
 800072a:	0424      	lsls	r4, r4, #16
 800072c:	4342      	muls	r2, r0
 800072e:	0409      	lsls	r1, r1, #16
 8000730:	0c24      	lsrs	r4, r4, #16
 8000732:	0003      	movs	r3, r0
 8000734:	430c      	orrs	r4, r1
 8000736:	42a2      	cmp	r2, r4
 8000738:	d906      	bls.n	8000748 <__aeabi_ddiv+0x2b4>
 800073a:	9900      	ldr	r1, [sp, #0]
 800073c:	3b01      	subs	r3, #1
 800073e:	468c      	mov	ip, r1
 8000740:	4464      	add	r4, ip
 8000742:	42a1      	cmp	r1, r4
 8000744:	d800      	bhi.n	8000748 <__aeabi_ddiv+0x2b4>
 8000746:	e142      	b.n	80009ce <__aeabi_ddiv+0x53a>
 8000748:	1aa0      	subs	r0, r4, r2
 800074a:	4642      	mov	r2, r8
 800074c:	0412      	lsls	r2, r2, #16
 800074e:	431a      	orrs	r2, r3
 8000750:	4693      	mov	fp, r2
 8000752:	464b      	mov	r3, r9
 8000754:	4659      	mov	r1, fp
 8000756:	0c1b      	lsrs	r3, r3, #16
 8000758:	001f      	movs	r7, r3
 800075a:	9304      	str	r3, [sp, #16]
 800075c:	040b      	lsls	r3, r1, #16
 800075e:	4649      	mov	r1, r9
 8000760:	0409      	lsls	r1, r1, #16
 8000762:	0c09      	lsrs	r1, r1, #16
 8000764:	000c      	movs	r4, r1
 8000766:	0c1b      	lsrs	r3, r3, #16
 8000768:	435c      	muls	r4, r3
 800076a:	0c12      	lsrs	r2, r2, #16
 800076c:	437b      	muls	r3, r7
 800076e:	4688      	mov	r8, r1
 8000770:	4351      	muls	r1, r2
 8000772:	437a      	muls	r2, r7
 8000774:	0c27      	lsrs	r7, r4, #16
 8000776:	46bc      	mov	ip, r7
 8000778:	185b      	adds	r3, r3, r1
 800077a:	4463      	add	r3, ip
 800077c:	4299      	cmp	r1, r3
 800077e:	d903      	bls.n	8000788 <__aeabi_ddiv+0x2f4>
 8000780:	2180      	movs	r1, #128	@ 0x80
 8000782:	0249      	lsls	r1, r1, #9
 8000784:	468c      	mov	ip, r1
 8000786:	4462      	add	r2, ip
 8000788:	0c19      	lsrs	r1, r3, #16
 800078a:	0424      	lsls	r4, r4, #16
 800078c:	041b      	lsls	r3, r3, #16
 800078e:	0c24      	lsrs	r4, r4, #16
 8000790:	188a      	adds	r2, r1, r2
 8000792:	191c      	adds	r4, r3, r4
 8000794:	4290      	cmp	r0, r2
 8000796:	d302      	bcc.n	800079e <__aeabi_ddiv+0x30a>
 8000798:	d116      	bne.n	80007c8 <__aeabi_ddiv+0x334>
 800079a:	42a5      	cmp	r5, r4
 800079c:	d214      	bcs.n	80007c8 <__aeabi_ddiv+0x334>
 800079e:	465b      	mov	r3, fp
 80007a0:	9f00      	ldr	r7, [sp, #0]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	444d      	add	r5, r9
 80007a6:	9305      	str	r3, [sp, #20]
 80007a8:	454d      	cmp	r5, r9
 80007aa:	419b      	sbcs	r3, r3
 80007ac:	46bc      	mov	ip, r7
 80007ae:	425b      	negs	r3, r3
 80007b0:	4463      	add	r3, ip
 80007b2:	18c0      	adds	r0, r0, r3
 80007b4:	4287      	cmp	r7, r0
 80007b6:	d300      	bcc.n	80007ba <__aeabi_ddiv+0x326>
 80007b8:	e102      	b.n	80009c0 <__aeabi_ddiv+0x52c>
 80007ba:	4282      	cmp	r2, r0
 80007bc:	d900      	bls.n	80007c0 <__aeabi_ddiv+0x32c>
 80007be:	e129      	b.n	8000a14 <__aeabi_ddiv+0x580>
 80007c0:	d100      	bne.n	80007c4 <__aeabi_ddiv+0x330>
 80007c2:	e124      	b.n	8000a0e <__aeabi_ddiv+0x57a>
 80007c4:	9b05      	ldr	r3, [sp, #20]
 80007c6:	469b      	mov	fp, r3
 80007c8:	1b2c      	subs	r4, r5, r4
 80007ca:	42a5      	cmp	r5, r4
 80007cc:	41ad      	sbcs	r5, r5
 80007ce:	9b00      	ldr	r3, [sp, #0]
 80007d0:	1a80      	subs	r0, r0, r2
 80007d2:	426d      	negs	r5, r5
 80007d4:	1b40      	subs	r0, r0, r5
 80007d6:	4283      	cmp	r3, r0
 80007d8:	d100      	bne.n	80007dc <__aeabi_ddiv+0x348>
 80007da:	e10f      	b.n	80009fc <__aeabi_ddiv+0x568>
 80007dc:	9902      	ldr	r1, [sp, #8]
 80007de:	f7ff fd19 	bl	8000214 <__aeabi_uidivmod>
 80007e2:	9a03      	ldr	r2, [sp, #12]
 80007e4:	040b      	lsls	r3, r1, #16
 80007e6:	4342      	muls	r2, r0
 80007e8:	0c21      	lsrs	r1, r4, #16
 80007ea:	0005      	movs	r5, r0
 80007ec:	4319      	orrs	r1, r3
 80007ee:	428a      	cmp	r2, r1
 80007f0:	d900      	bls.n	80007f4 <__aeabi_ddiv+0x360>
 80007f2:	e0cb      	b.n	800098c <__aeabi_ddiv+0x4f8>
 80007f4:	1a88      	subs	r0, r1, r2
 80007f6:	9902      	ldr	r1, [sp, #8]
 80007f8:	f7ff fd0c 	bl	8000214 <__aeabi_uidivmod>
 80007fc:	9a03      	ldr	r2, [sp, #12]
 80007fe:	0424      	lsls	r4, r4, #16
 8000800:	4342      	muls	r2, r0
 8000802:	0409      	lsls	r1, r1, #16
 8000804:	0c24      	lsrs	r4, r4, #16
 8000806:	0003      	movs	r3, r0
 8000808:	430c      	orrs	r4, r1
 800080a:	42a2      	cmp	r2, r4
 800080c:	d900      	bls.n	8000810 <__aeabi_ddiv+0x37c>
 800080e:	e0ca      	b.n	80009a6 <__aeabi_ddiv+0x512>
 8000810:	4641      	mov	r1, r8
 8000812:	1aa4      	subs	r4, r4, r2
 8000814:	042a      	lsls	r2, r5, #16
 8000816:	431a      	orrs	r2, r3
 8000818:	9f04      	ldr	r7, [sp, #16]
 800081a:	0413      	lsls	r3, r2, #16
 800081c:	0c1b      	lsrs	r3, r3, #16
 800081e:	4359      	muls	r1, r3
 8000820:	4640      	mov	r0, r8
 8000822:	437b      	muls	r3, r7
 8000824:	469c      	mov	ip, r3
 8000826:	0c15      	lsrs	r5, r2, #16
 8000828:	4368      	muls	r0, r5
 800082a:	0c0b      	lsrs	r3, r1, #16
 800082c:	4484      	add	ip, r0
 800082e:	4463      	add	r3, ip
 8000830:	437d      	muls	r5, r7
 8000832:	4298      	cmp	r0, r3
 8000834:	d903      	bls.n	800083e <__aeabi_ddiv+0x3aa>
 8000836:	2080      	movs	r0, #128	@ 0x80
 8000838:	0240      	lsls	r0, r0, #9
 800083a:	4684      	mov	ip, r0
 800083c:	4465      	add	r5, ip
 800083e:	0c18      	lsrs	r0, r3, #16
 8000840:	0409      	lsls	r1, r1, #16
 8000842:	041b      	lsls	r3, r3, #16
 8000844:	0c09      	lsrs	r1, r1, #16
 8000846:	1940      	adds	r0, r0, r5
 8000848:	185b      	adds	r3, r3, r1
 800084a:	4284      	cmp	r4, r0
 800084c:	d327      	bcc.n	800089e <__aeabi_ddiv+0x40a>
 800084e:	d023      	beq.n	8000898 <__aeabi_ddiv+0x404>
 8000850:	2301      	movs	r3, #1
 8000852:	0035      	movs	r5, r6
 8000854:	431a      	orrs	r2, r3
 8000856:	4b94      	ldr	r3, [pc, #592]	@ (8000aa8 <__aeabi_ddiv+0x614>)
 8000858:	4453      	add	r3, sl
 800085a:	2b00      	cmp	r3, #0
 800085c:	dd60      	ble.n	8000920 <__aeabi_ddiv+0x48c>
 800085e:	0751      	lsls	r1, r2, #29
 8000860:	d000      	beq.n	8000864 <__aeabi_ddiv+0x3d0>
 8000862:	e086      	b.n	8000972 <__aeabi_ddiv+0x4de>
 8000864:	002e      	movs	r6, r5
 8000866:	08d1      	lsrs	r1, r2, #3
 8000868:	465a      	mov	r2, fp
 800086a:	01d2      	lsls	r2, r2, #7
 800086c:	d506      	bpl.n	800087c <__aeabi_ddiv+0x3e8>
 800086e:	465a      	mov	r2, fp
 8000870:	4b8e      	ldr	r3, [pc, #568]	@ (8000aac <__aeabi_ddiv+0x618>)
 8000872:	401a      	ands	r2, r3
 8000874:	2380      	movs	r3, #128	@ 0x80
 8000876:	4693      	mov	fp, r2
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	4453      	add	r3, sl
 800087c:	4a8c      	ldr	r2, [pc, #560]	@ (8000ab0 <__aeabi_ddiv+0x61c>)
 800087e:	4293      	cmp	r3, r2
 8000880:	dd00      	ble.n	8000884 <__aeabi_ddiv+0x3f0>
 8000882:	e680      	b.n	8000586 <__aeabi_ddiv+0xf2>
 8000884:	465a      	mov	r2, fp
 8000886:	0752      	lsls	r2, r2, #29
 8000888:	430a      	orrs	r2, r1
 800088a:	4690      	mov	r8, r2
 800088c:	465a      	mov	r2, fp
 800088e:	055b      	lsls	r3, r3, #21
 8000890:	0254      	lsls	r4, r2, #9
 8000892:	0b24      	lsrs	r4, r4, #12
 8000894:	0d5b      	lsrs	r3, r3, #21
 8000896:	e669      	b.n	800056c <__aeabi_ddiv+0xd8>
 8000898:	0035      	movs	r5, r6
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0db      	beq.n	8000856 <__aeabi_ddiv+0x3c2>
 800089e:	9d00      	ldr	r5, [sp, #0]
 80008a0:	1e51      	subs	r1, r2, #1
 80008a2:	46ac      	mov	ip, r5
 80008a4:	4464      	add	r4, ip
 80008a6:	42ac      	cmp	r4, r5
 80008a8:	d200      	bcs.n	80008ac <__aeabi_ddiv+0x418>
 80008aa:	e09e      	b.n	80009ea <__aeabi_ddiv+0x556>
 80008ac:	4284      	cmp	r4, r0
 80008ae:	d200      	bcs.n	80008b2 <__aeabi_ddiv+0x41e>
 80008b0:	e0e1      	b.n	8000a76 <__aeabi_ddiv+0x5e2>
 80008b2:	d100      	bne.n	80008b6 <__aeabi_ddiv+0x422>
 80008b4:	e0ee      	b.n	8000a94 <__aeabi_ddiv+0x600>
 80008b6:	000a      	movs	r2, r1
 80008b8:	e7ca      	b.n	8000850 <__aeabi_ddiv+0x3bc>
 80008ba:	4542      	cmp	r2, r8
 80008bc:	d900      	bls.n	80008c0 <__aeabi_ddiv+0x42c>
 80008be:	e708      	b.n	80006d2 <__aeabi_ddiv+0x23e>
 80008c0:	464b      	mov	r3, r9
 80008c2:	07dc      	lsls	r4, r3, #31
 80008c4:	0858      	lsrs	r0, r3, #1
 80008c6:	4643      	mov	r3, r8
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	431c      	orrs	r4, r3
 80008cc:	4643      	mov	r3, r8
 80008ce:	07dd      	lsls	r5, r3, #31
 80008d0:	e706      	b.n	80006e0 <__aeabi_ddiv+0x24c>
 80008d2:	f000 f9a7 	bl	8000c24 <__clzsi2>
 80008d6:	2315      	movs	r3, #21
 80008d8:	469c      	mov	ip, r3
 80008da:	4484      	add	ip, r0
 80008dc:	0002      	movs	r2, r0
 80008de:	4663      	mov	r3, ip
 80008e0:	3220      	adds	r2, #32
 80008e2:	2b1c      	cmp	r3, #28
 80008e4:	dc00      	bgt.n	80008e8 <__aeabi_ddiv+0x454>
 80008e6:	e692      	b.n	800060e <__aeabi_ddiv+0x17a>
 80008e8:	0023      	movs	r3, r4
 80008ea:	3808      	subs	r0, #8
 80008ec:	4083      	lsls	r3, r0
 80008ee:	4699      	mov	r9, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	4698      	mov	r8, r3
 80008f4:	e69a      	b.n	800062c <__aeabi_ddiv+0x198>
 80008f6:	f000 f995 	bl	8000c24 <__clzsi2>
 80008fa:	0002      	movs	r2, r0
 80008fc:	0003      	movs	r3, r0
 80008fe:	3215      	adds	r2, #21
 8000900:	3320      	adds	r3, #32
 8000902:	2a1c      	cmp	r2, #28
 8000904:	dc00      	bgt.n	8000908 <__aeabi_ddiv+0x474>
 8000906:	e65f      	b.n	80005c8 <__aeabi_ddiv+0x134>
 8000908:	9900      	ldr	r1, [sp, #0]
 800090a:	3808      	subs	r0, #8
 800090c:	4081      	lsls	r1, r0
 800090e:	2200      	movs	r2, #0
 8000910:	468b      	mov	fp, r1
 8000912:	e666      	b.n	80005e2 <__aeabi_ddiv+0x14e>
 8000914:	2200      	movs	r2, #0
 8000916:	002e      	movs	r6, r5
 8000918:	2400      	movs	r4, #0
 800091a:	4690      	mov	r8, r2
 800091c:	4b65      	ldr	r3, [pc, #404]	@ (8000ab4 <__aeabi_ddiv+0x620>)
 800091e:	e625      	b.n	800056c <__aeabi_ddiv+0xd8>
 8000920:	002e      	movs	r6, r5
 8000922:	2101      	movs	r1, #1
 8000924:	1ac9      	subs	r1, r1, r3
 8000926:	2938      	cmp	r1, #56	@ 0x38
 8000928:	dd00      	ble.n	800092c <__aeabi_ddiv+0x498>
 800092a:	e61b      	b.n	8000564 <__aeabi_ddiv+0xd0>
 800092c:	291f      	cmp	r1, #31
 800092e:	dc7e      	bgt.n	8000a2e <__aeabi_ddiv+0x59a>
 8000930:	4861      	ldr	r0, [pc, #388]	@ (8000ab8 <__aeabi_ddiv+0x624>)
 8000932:	0014      	movs	r4, r2
 8000934:	4450      	add	r0, sl
 8000936:	465b      	mov	r3, fp
 8000938:	4082      	lsls	r2, r0
 800093a:	4083      	lsls	r3, r0
 800093c:	40cc      	lsrs	r4, r1
 800093e:	1e50      	subs	r0, r2, #1
 8000940:	4182      	sbcs	r2, r0
 8000942:	4323      	orrs	r3, r4
 8000944:	431a      	orrs	r2, r3
 8000946:	465b      	mov	r3, fp
 8000948:	40cb      	lsrs	r3, r1
 800094a:	0751      	lsls	r1, r2, #29
 800094c:	d009      	beq.n	8000962 <__aeabi_ddiv+0x4ce>
 800094e:	210f      	movs	r1, #15
 8000950:	4011      	ands	r1, r2
 8000952:	2904      	cmp	r1, #4
 8000954:	d005      	beq.n	8000962 <__aeabi_ddiv+0x4ce>
 8000956:	1d11      	adds	r1, r2, #4
 8000958:	4291      	cmp	r1, r2
 800095a:	4192      	sbcs	r2, r2
 800095c:	4252      	negs	r2, r2
 800095e:	189b      	adds	r3, r3, r2
 8000960:	000a      	movs	r2, r1
 8000962:	0219      	lsls	r1, r3, #8
 8000964:	d400      	bmi.n	8000968 <__aeabi_ddiv+0x4d4>
 8000966:	e09b      	b.n	8000aa0 <__aeabi_ddiv+0x60c>
 8000968:	2200      	movs	r2, #0
 800096a:	2301      	movs	r3, #1
 800096c:	2400      	movs	r4, #0
 800096e:	4690      	mov	r8, r2
 8000970:	e5fc      	b.n	800056c <__aeabi_ddiv+0xd8>
 8000972:	210f      	movs	r1, #15
 8000974:	4011      	ands	r1, r2
 8000976:	2904      	cmp	r1, #4
 8000978:	d100      	bne.n	800097c <__aeabi_ddiv+0x4e8>
 800097a:	e773      	b.n	8000864 <__aeabi_ddiv+0x3d0>
 800097c:	1d11      	adds	r1, r2, #4
 800097e:	4291      	cmp	r1, r2
 8000980:	4192      	sbcs	r2, r2
 8000982:	4252      	negs	r2, r2
 8000984:	002e      	movs	r6, r5
 8000986:	08c9      	lsrs	r1, r1, #3
 8000988:	4493      	add	fp, r2
 800098a:	e76d      	b.n	8000868 <__aeabi_ddiv+0x3d4>
 800098c:	9b00      	ldr	r3, [sp, #0]
 800098e:	3d01      	subs	r5, #1
 8000990:	469c      	mov	ip, r3
 8000992:	4461      	add	r1, ip
 8000994:	428b      	cmp	r3, r1
 8000996:	d900      	bls.n	800099a <__aeabi_ddiv+0x506>
 8000998:	e72c      	b.n	80007f4 <__aeabi_ddiv+0x360>
 800099a:	428a      	cmp	r2, r1
 800099c:	d800      	bhi.n	80009a0 <__aeabi_ddiv+0x50c>
 800099e:	e729      	b.n	80007f4 <__aeabi_ddiv+0x360>
 80009a0:	1e85      	subs	r5, r0, #2
 80009a2:	4461      	add	r1, ip
 80009a4:	e726      	b.n	80007f4 <__aeabi_ddiv+0x360>
 80009a6:	9900      	ldr	r1, [sp, #0]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	468c      	mov	ip, r1
 80009ac:	4464      	add	r4, ip
 80009ae:	42a1      	cmp	r1, r4
 80009b0:	d900      	bls.n	80009b4 <__aeabi_ddiv+0x520>
 80009b2:	e72d      	b.n	8000810 <__aeabi_ddiv+0x37c>
 80009b4:	42a2      	cmp	r2, r4
 80009b6:	d800      	bhi.n	80009ba <__aeabi_ddiv+0x526>
 80009b8:	e72a      	b.n	8000810 <__aeabi_ddiv+0x37c>
 80009ba:	1e83      	subs	r3, r0, #2
 80009bc:	4464      	add	r4, ip
 80009be:	e727      	b.n	8000810 <__aeabi_ddiv+0x37c>
 80009c0:	4287      	cmp	r7, r0
 80009c2:	d000      	beq.n	80009c6 <__aeabi_ddiv+0x532>
 80009c4:	e6fe      	b.n	80007c4 <__aeabi_ddiv+0x330>
 80009c6:	45a9      	cmp	r9, r5
 80009c8:	d900      	bls.n	80009cc <__aeabi_ddiv+0x538>
 80009ca:	e6fb      	b.n	80007c4 <__aeabi_ddiv+0x330>
 80009cc:	e6f5      	b.n	80007ba <__aeabi_ddiv+0x326>
 80009ce:	42a2      	cmp	r2, r4
 80009d0:	d800      	bhi.n	80009d4 <__aeabi_ddiv+0x540>
 80009d2:	e6b9      	b.n	8000748 <__aeabi_ddiv+0x2b4>
 80009d4:	1e83      	subs	r3, r0, #2
 80009d6:	4464      	add	r4, ip
 80009d8:	e6b6      	b.n	8000748 <__aeabi_ddiv+0x2b4>
 80009da:	428a      	cmp	r2, r1
 80009dc:	d800      	bhi.n	80009e0 <__aeabi_ddiv+0x54c>
 80009de:	e69f      	b.n	8000720 <__aeabi_ddiv+0x28c>
 80009e0:	46bc      	mov	ip, r7
 80009e2:	1e83      	subs	r3, r0, #2
 80009e4:	4698      	mov	r8, r3
 80009e6:	4461      	add	r1, ip
 80009e8:	e69a      	b.n	8000720 <__aeabi_ddiv+0x28c>
 80009ea:	000a      	movs	r2, r1
 80009ec:	4284      	cmp	r4, r0
 80009ee:	d000      	beq.n	80009f2 <__aeabi_ddiv+0x55e>
 80009f0:	e72e      	b.n	8000850 <__aeabi_ddiv+0x3bc>
 80009f2:	454b      	cmp	r3, r9
 80009f4:	d000      	beq.n	80009f8 <__aeabi_ddiv+0x564>
 80009f6:	e72b      	b.n	8000850 <__aeabi_ddiv+0x3bc>
 80009f8:	0035      	movs	r5, r6
 80009fa:	e72c      	b.n	8000856 <__aeabi_ddiv+0x3c2>
 80009fc:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa8 <__aeabi_ddiv+0x614>)
 80009fe:	4a2f      	ldr	r2, [pc, #188]	@ (8000abc <__aeabi_ddiv+0x628>)
 8000a00:	4453      	add	r3, sl
 8000a02:	4592      	cmp	sl, r2
 8000a04:	db43      	blt.n	8000a8e <__aeabi_ddiv+0x5fa>
 8000a06:	2201      	movs	r2, #1
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4493      	add	fp, r2
 8000a0c:	e72c      	b.n	8000868 <__aeabi_ddiv+0x3d4>
 8000a0e:	42ac      	cmp	r4, r5
 8000a10:	d800      	bhi.n	8000a14 <__aeabi_ddiv+0x580>
 8000a12:	e6d7      	b.n	80007c4 <__aeabi_ddiv+0x330>
 8000a14:	2302      	movs	r3, #2
 8000a16:	425b      	negs	r3, r3
 8000a18:	469c      	mov	ip, r3
 8000a1a:	9900      	ldr	r1, [sp, #0]
 8000a1c:	444d      	add	r5, r9
 8000a1e:	454d      	cmp	r5, r9
 8000a20:	419b      	sbcs	r3, r3
 8000a22:	44e3      	add	fp, ip
 8000a24:	468c      	mov	ip, r1
 8000a26:	425b      	negs	r3, r3
 8000a28:	4463      	add	r3, ip
 8000a2a:	18c0      	adds	r0, r0, r3
 8000a2c:	e6cc      	b.n	80007c8 <__aeabi_ddiv+0x334>
 8000a2e:	201f      	movs	r0, #31
 8000a30:	4240      	negs	r0, r0
 8000a32:	1ac3      	subs	r3, r0, r3
 8000a34:	4658      	mov	r0, fp
 8000a36:	40d8      	lsrs	r0, r3
 8000a38:	2920      	cmp	r1, #32
 8000a3a:	d004      	beq.n	8000a46 <__aeabi_ddiv+0x5b2>
 8000a3c:	4659      	mov	r1, fp
 8000a3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <__aeabi_ddiv+0x62c>)
 8000a40:	4453      	add	r3, sl
 8000a42:	4099      	lsls	r1, r3
 8000a44:	430a      	orrs	r2, r1
 8000a46:	1e53      	subs	r3, r2, #1
 8000a48:	419a      	sbcs	r2, r3
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	4302      	orrs	r2, r0
 8000a50:	2400      	movs	r4, #0
 8000a52:	4011      	ands	r1, r2
 8000a54:	4213      	tst	r3, r2
 8000a56:	d009      	beq.n	8000a6c <__aeabi_ddiv+0x5d8>
 8000a58:	3308      	adds	r3, #8
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d01d      	beq.n	8000a9c <__aeabi_ddiv+0x608>
 8000a60:	1d13      	adds	r3, r2, #4
 8000a62:	4293      	cmp	r3, r2
 8000a64:	4189      	sbcs	r1, r1
 8000a66:	001a      	movs	r2, r3
 8000a68:	4249      	negs	r1, r1
 8000a6a:	0749      	lsls	r1, r1, #29
 8000a6c:	08d2      	lsrs	r2, r2, #3
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	4690      	mov	r8, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e57a      	b.n	800056c <__aeabi_ddiv+0xd8>
 8000a76:	4649      	mov	r1, r9
 8000a78:	9f00      	ldr	r7, [sp, #0]
 8000a7a:	004d      	lsls	r5, r1, #1
 8000a7c:	454d      	cmp	r5, r9
 8000a7e:	4189      	sbcs	r1, r1
 8000a80:	46bc      	mov	ip, r7
 8000a82:	4249      	negs	r1, r1
 8000a84:	4461      	add	r1, ip
 8000a86:	46a9      	mov	r9, r5
 8000a88:	3a02      	subs	r2, #2
 8000a8a:	1864      	adds	r4, r4, r1
 8000a8c:	e7ae      	b.n	80009ec <__aeabi_ddiv+0x558>
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4252      	negs	r2, r2
 8000a92:	e746      	b.n	8000922 <__aeabi_ddiv+0x48e>
 8000a94:	4599      	cmp	r9, r3
 8000a96:	d3ee      	bcc.n	8000a76 <__aeabi_ddiv+0x5e2>
 8000a98:	000a      	movs	r2, r1
 8000a9a:	e7aa      	b.n	80009f2 <__aeabi_ddiv+0x55e>
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	e7e5      	b.n	8000a6c <__aeabi_ddiv+0x5d8>
 8000aa0:	0759      	lsls	r1, r3, #29
 8000aa2:	025b      	lsls	r3, r3, #9
 8000aa4:	0b1c      	lsrs	r4, r3, #12
 8000aa6:	e7e1      	b.n	8000a6c <__aeabi_ddiv+0x5d8>
 8000aa8:	000003ff 	.word	0x000003ff
 8000aac:	feffffff 	.word	0xfeffffff
 8000ab0:	000007fe 	.word	0x000007fe
 8000ab4:	000007ff 	.word	0x000007ff
 8000ab8:	0000041e 	.word	0x0000041e
 8000abc:	fffffc02 	.word	0xfffffc02
 8000ac0:	0000043e 	.word	0x0000043e

08000ac4 <__aeabi_i2d>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	d016      	beq.n	8000af8 <__aeabi_i2d+0x34>
 8000aca:	17c3      	asrs	r3, r0, #31
 8000acc:	18c5      	adds	r5, r0, r3
 8000ace:	405d      	eors	r5, r3
 8000ad0:	0fc4      	lsrs	r4, r0, #31
 8000ad2:	0028      	movs	r0, r5
 8000ad4:	f000 f8a6 	bl	8000c24 <__clzsi2>
 8000ad8:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <__aeabi_i2d+0x58>)
 8000ada:	1a1b      	subs	r3, r3, r0
 8000adc:	055b      	lsls	r3, r3, #21
 8000ade:	0d5b      	lsrs	r3, r3, #21
 8000ae0:	280a      	cmp	r0, #10
 8000ae2:	dc14      	bgt.n	8000b0e <__aeabi_i2d+0x4a>
 8000ae4:	0002      	movs	r2, r0
 8000ae6:	002e      	movs	r6, r5
 8000ae8:	3215      	adds	r2, #21
 8000aea:	4096      	lsls	r6, r2
 8000aec:	220b      	movs	r2, #11
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	40d5      	lsrs	r5, r2
 8000af2:	032d      	lsls	r5, r5, #12
 8000af4:	0b2d      	lsrs	r5, r5, #12
 8000af6:	e003      	b.n	8000b00 <__aeabi_i2d+0x3c>
 8000af8:	2400      	movs	r4, #0
 8000afa:	2300      	movs	r3, #0
 8000afc:	2500      	movs	r5, #0
 8000afe:	2600      	movs	r6, #0
 8000b00:	051b      	lsls	r3, r3, #20
 8000b02:	432b      	orrs	r3, r5
 8000b04:	07e4      	lsls	r4, r4, #31
 8000b06:	4323      	orrs	r3, r4
 8000b08:	0030      	movs	r0, r6
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	bd70      	pop	{r4, r5, r6, pc}
 8000b0e:	380b      	subs	r0, #11
 8000b10:	4085      	lsls	r5, r0
 8000b12:	032d      	lsls	r5, r5, #12
 8000b14:	2600      	movs	r6, #0
 8000b16:	0b2d      	lsrs	r5, r5, #12
 8000b18:	e7f2      	b.n	8000b00 <__aeabi_i2d+0x3c>
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	0000041e 	.word	0x0000041e

08000b20 <__aeabi_d2f>:
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	004b      	lsls	r3, r1, #1
 8000b24:	030f      	lsls	r7, r1, #12
 8000b26:	0d5b      	lsrs	r3, r3, #21
 8000b28:	4c3a      	ldr	r4, [pc, #232]	@ (8000c14 <__aeabi_d2f+0xf4>)
 8000b2a:	0f45      	lsrs	r5, r0, #29
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	0a7f      	lsrs	r7, r7, #9
 8000b30:	1c5e      	adds	r6, r3, #1
 8000b32:	432f      	orrs	r7, r5
 8000b34:	9000      	str	r0, [sp, #0]
 8000b36:	9101      	str	r1, [sp, #4]
 8000b38:	0fca      	lsrs	r2, r1, #31
 8000b3a:	00c5      	lsls	r5, r0, #3
 8000b3c:	4226      	tst	r6, r4
 8000b3e:	d00b      	beq.n	8000b58 <__aeabi_d2f+0x38>
 8000b40:	4935      	ldr	r1, [pc, #212]	@ (8000c18 <__aeabi_d2f+0xf8>)
 8000b42:	185c      	adds	r4, r3, r1
 8000b44:	2cfe      	cmp	r4, #254	@ 0xfe
 8000b46:	dd13      	ble.n	8000b70 <__aeabi_d2f+0x50>
 8000b48:	20ff      	movs	r0, #255	@ 0xff
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	05c0      	lsls	r0, r0, #23
 8000b4e:	4318      	orrs	r0, r3
 8000b50:	07d2      	lsls	r2, r2, #31
 8000b52:	4310      	orrs	r0, r2
 8000b54:	b003      	add	sp, #12
 8000b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b58:	433d      	orrs	r5, r7
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d101      	bne.n	8000b62 <__aeabi_d2f+0x42>
 8000b5e:	2000      	movs	r0, #0
 8000b60:	e7f4      	b.n	8000b4c <__aeabi_d2f+0x2c>
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d0f0      	beq.n	8000b48 <__aeabi_d2f+0x28>
 8000b66:	2380      	movs	r3, #128	@ 0x80
 8000b68:	03db      	lsls	r3, r3, #15
 8000b6a:	20ff      	movs	r0, #255	@ 0xff
 8000b6c:	433b      	orrs	r3, r7
 8000b6e:	e7ed      	b.n	8000b4c <__aeabi_d2f+0x2c>
 8000b70:	2c00      	cmp	r4, #0
 8000b72:	dd0c      	ble.n	8000b8e <__aeabi_d2f+0x6e>
 8000b74:	9b00      	ldr	r3, [sp, #0]
 8000b76:	00ff      	lsls	r7, r7, #3
 8000b78:	019b      	lsls	r3, r3, #6
 8000b7a:	1e58      	subs	r0, r3, #1
 8000b7c:	4183      	sbcs	r3, r0
 8000b7e:	0f69      	lsrs	r1, r5, #29
 8000b80:	433b      	orrs	r3, r7
 8000b82:	430b      	orrs	r3, r1
 8000b84:	0759      	lsls	r1, r3, #29
 8000b86:	d127      	bne.n	8000bd8 <__aeabi_d2f+0xb8>
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	b2e0      	uxtb	r0, r4
 8000b8c:	e7de      	b.n	8000b4c <__aeabi_d2f+0x2c>
 8000b8e:	0021      	movs	r1, r4
 8000b90:	3117      	adds	r1, #23
 8000b92:	db31      	blt.n	8000bf8 <__aeabi_d2f+0xd8>
 8000b94:	2180      	movs	r1, #128	@ 0x80
 8000b96:	201e      	movs	r0, #30
 8000b98:	0409      	lsls	r1, r1, #16
 8000b9a:	4339      	orrs	r1, r7
 8000b9c:	1b00      	subs	r0, r0, r4
 8000b9e:	281f      	cmp	r0, #31
 8000ba0:	dd2d      	ble.n	8000bfe <__aeabi_d2f+0xde>
 8000ba2:	2602      	movs	r6, #2
 8000ba4:	4276      	negs	r6, r6
 8000ba6:	1b34      	subs	r4, r6, r4
 8000ba8:	000e      	movs	r6, r1
 8000baa:	40e6      	lsrs	r6, r4
 8000bac:	0034      	movs	r4, r6
 8000bae:	2820      	cmp	r0, #32
 8000bb0:	d004      	beq.n	8000bbc <__aeabi_d2f+0x9c>
 8000bb2:	481a      	ldr	r0, [pc, #104]	@ (8000c1c <__aeabi_d2f+0xfc>)
 8000bb4:	4684      	mov	ip, r0
 8000bb6:	4463      	add	r3, ip
 8000bb8:	4099      	lsls	r1, r3
 8000bba:	430d      	orrs	r5, r1
 8000bbc:	002b      	movs	r3, r5
 8000bbe:	1e59      	subs	r1, r3, #1
 8000bc0:	418b      	sbcs	r3, r1
 8000bc2:	4323      	orrs	r3, r4
 8000bc4:	0759      	lsls	r1, r3, #29
 8000bc6:	d003      	beq.n	8000bd0 <__aeabi_d2f+0xb0>
 8000bc8:	210f      	movs	r1, #15
 8000bca:	4019      	ands	r1, r3
 8000bcc:	2904      	cmp	r1, #4
 8000bce:	d10b      	bne.n	8000be8 <__aeabi_d2f+0xc8>
 8000bd0:	019b      	lsls	r3, r3, #6
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	0a5b      	lsrs	r3, r3, #9
 8000bd6:	e7b9      	b.n	8000b4c <__aeabi_d2f+0x2c>
 8000bd8:	210f      	movs	r1, #15
 8000bda:	4019      	ands	r1, r3
 8000bdc:	2904      	cmp	r1, #4
 8000bde:	d104      	bne.n	8000bea <__aeabi_d2f+0xca>
 8000be0:	019b      	lsls	r3, r3, #6
 8000be2:	0a5b      	lsrs	r3, r3, #9
 8000be4:	b2e0      	uxtb	r0, r4
 8000be6:	e7b1      	b.n	8000b4c <__aeabi_d2f+0x2c>
 8000be8:	2400      	movs	r4, #0
 8000bea:	3304      	adds	r3, #4
 8000bec:	0159      	lsls	r1, r3, #5
 8000bee:	d5f7      	bpl.n	8000be0 <__aeabi_d2f+0xc0>
 8000bf0:	3401      	adds	r4, #1
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	b2e0      	uxtb	r0, r4
 8000bf6:	e7a9      	b.n	8000b4c <__aeabi_d2f+0x2c>
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e7a6      	b.n	8000b4c <__aeabi_d2f+0x2c>
 8000bfe:	4c08      	ldr	r4, [pc, #32]	@ (8000c20 <__aeabi_d2f+0x100>)
 8000c00:	191c      	adds	r4, r3, r4
 8000c02:	002b      	movs	r3, r5
 8000c04:	40a5      	lsls	r5, r4
 8000c06:	40c3      	lsrs	r3, r0
 8000c08:	40a1      	lsls	r1, r4
 8000c0a:	1e68      	subs	r0, r5, #1
 8000c0c:	4185      	sbcs	r5, r0
 8000c0e:	4329      	orrs	r1, r5
 8000c10:	430b      	orrs	r3, r1
 8000c12:	e7d7      	b.n	8000bc4 <__aeabi_d2f+0xa4>
 8000c14:	000007fe 	.word	0x000007fe
 8000c18:	fffffc80 	.word	0xfffffc80
 8000c1c:	fffffca2 	.word	0xfffffca2
 8000c20:	fffffc82 	.word	0xfffffc82

08000c24 <__clzsi2>:
 8000c24:	211c      	movs	r1, #28
 8000c26:	2301      	movs	r3, #1
 8000c28:	041b      	lsls	r3, r3, #16
 8000c2a:	4298      	cmp	r0, r3
 8000c2c:	d301      	bcc.n	8000c32 <__clzsi2+0xe>
 8000c2e:	0c00      	lsrs	r0, r0, #16
 8000c30:	3910      	subs	r1, #16
 8000c32:	0a1b      	lsrs	r3, r3, #8
 8000c34:	4298      	cmp	r0, r3
 8000c36:	d301      	bcc.n	8000c3c <__clzsi2+0x18>
 8000c38:	0a00      	lsrs	r0, r0, #8
 8000c3a:	3908      	subs	r1, #8
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	4298      	cmp	r0, r3
 8000c40:	d301      	bcc.n	8000c46 <__clzsi2+0x22>
 8000c42:	0900      	lsrs	r0, r0, #4
 8000c44:	3904      	subs	r1, #4
 8000c46:	a202      	add	r2, pc, #8	@ (adr r2, 8000c50 <__clzsi2+0x2c>)
 8000c48:	5c10      	ldrb	r0, [r2, r0]
 8000c4a:	1840      	adds	r0, r0, r1
 8000c4c:	4770      	bx	lr
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	02020304 	.word	0x02020304
 8000c54:	01010101 	.word	0x01010101
	...

08000c60 <HAL_TIM_IC_CaptureCallback>:
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM21_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	if(&htim21 == htim){
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4b39      	ldr	r3, [pc, #228]	@ (8000d50 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d16a      	bne.n	8000d46 <HAL_TIM_IC_CaptureCallback+0xe6>
		switch(able){
 8000c70:	4b38      	ldr	r3, [pc, #224]	@ (8000d54 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d01f      	beq.n	8000cb8 <HAL_TIM_IC_CaptureCallback+0x58>
 8000c78:	dc65      	bgt.n	8000d46 <HAL_TIM_IC_CaptureCallback+0xe6>
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <HAL_TIM_IC_CaptureCallback+0x24>
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d00d      	beq.n	8000c9e <HAL_TIM_IC_CaptureCallback+0x3e>
				freq = (float)((CLK_VALUE / band_width));
				able = 0;
				break;
		}
	}
}
 8000c82:	e060      	b.n	8000d46 <HAL_TIM_IC_CaptureCallback+0xe6>
			case 0: read[0] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); able = 1; break;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2100      	movs	r1, #0
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f002 fc01 	bl	8003490 <HAL_TIM_ReadCapturedValue>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	001a      	movs	r2, r3
 8000c92:	4b31      	ldr	r3, [pc, #196]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	4b2f      	ldr	r3, [pc, #188]	@ (8000d54 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e053      	b.n	8000d46 <HAL_TIM_IC_CaptureCallback+0xe6>
			case 1: read[1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); able = 2; break;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f002 fbf4 	bl	8003490 <HAL_TIM_ReadCapturedValue>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	001a      	movs	r2, r3
 8000cac:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	e046      	b.n	8000d46 <HAL_TIM_IC_CaptureCallback+0xe6>
				if(read[1] >= read[0]) band_width = read[1] - read[0];
 8000cb8:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4b26      	ldr	r3, [pc, #152]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	db07      	blt.n	8000cd4 <HAL_TIM_IC_CaptureCallback+0x74>
 8000cc4:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	1ad2      	subs	r2, r2, r3
 8000cce:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	e00c      	b.n	8000cee <HAL_TIM_IC_CaptureCallback+0x8e>
				else band_width = (__HAL_TIM_GET_AUTORELOAD(htim) - read[0]) + read[1] + 1;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cda:	4b1f      	ldr	r3, [pc, #124]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	1ad2      	subs	r2, r2, r3
 8000ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	001a      	movs	r2, r3
 8000cea:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000cec:	601a      	str	r2, [r3, #0]
				time_band = ((band_width / 1000.0) / 2);
 8000cee:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fee6 	bl	8000ac4 <__aeabi_i2d>
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000cfc:	f7ff fbca 	bl	8000494 <__aeabi_ddiv>
 8000d00:	0002      	movs	r2, r0
 8000d02:	000b      	movs	r3, r1
 8000d04:	0010      	movs	r0, r2
 8000d06:	0019      	movs	r1, r3
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2380      	movs	r3, #128	@ 0x80
 8000d0c:	05db      	lsls	r3, r3, #23
 8000d0e:	f7ff fbc1 	bl	8000494 <__aeabi_ddiv>
 8000d12:	0002      	movs	r2, r0
 8000d14:	000b      	movs	r3, r1
 8000d16:	0010      	movs	r0, r2
 8000d18:	0019      	movs	r1, r3
 8000d1a:	f7ff ff01 	bl	8000b20 <__aeabi_d2f>
 8000d1e:	1c02      	adds	r2, r0, #0
 8000d20:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000d22:	601a      	str	r2, [r3, #0]
				freq = (float)((CLK_VALUE / band_width));
 8000d24:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	0019      	movs	r1, r3
 8000d2a:	480f      	ldr	r0, [pc, #60]	@ (8000d68 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000d2c:	f7ff fa76 	bl	800021c <__divsi3>
 8000d30:	0003      	movs	r3, r0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f7ff fb5e 	bl	80003f4 <__aeabi_i2f>
 8000d38:	1c02      	adds	r2, r0, #0
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000d3c:	601a      	str	r2, [r3, #0]
				able = 0;
 8000d3e:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
				break;
 8000d44:	46c0      	nop			@ (mov r8, r8)
}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	200000a8 	.word	0x200000a8
 8000d54:	200000f8 	.word	0x200000f8
 8000d58:	200000ec 	.word	0x200000ec
 8000d5c:	200000f4 	.word	0x200000f4
 8000d60:	408f4000 	.word	0x408f4000
 8000d64:	20000100 	.word	0x20000100
 8000d68:	001e8480 	.word	0x001e8480
 8000d6c:	200000fc 	.word	0x200000fc

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f000 fd32 	bl	80017dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f844 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 f9de 	bl	800113c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d80:	f000 f898 	bl	8000eb4 <MX_TIM2_Init>
  MX_TIM21_Init();
 8000d84:	f000 f95e 	bl	8001044 <MX_TIM21_Init>
  MX_TIM6_Init();
 8000d88:	f000 f920 	bl	8000fcc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim21, TIM_CHANNEL_1);
 8000d8c:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <main+0x80>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	0018      	movs	r0, r3
 8000d92:	f002 f819 	bl	8002dc8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000d96:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <main+0x84>)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f001 ff40 	bl	8002c20 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <main+0x84>)
 8000da2:	2104      	movs	r1, #4
 8000da4:	0018      	movs	r0, r3
 8000da6:	f001 ff3b 	bl	8002c20 <HAL_TIM_OC_Start>

  STARTUP_DHT11(&DHT, &htim6, DHT11_GPIO_Port, DHT11_Pin);
 8000daa:	23a0      	movs	r3, #160	@ 0xa0
 8000dac:	05da      	lsls	r2, r3, #23
 8000dae:	4912      	ldr	r1, [pc, #72]	@ (8000df8 <main+0x88>)
 8000db0:	4812      	ldr	r0, [pc, #72]	@ (8000dfc <main+0x8c>)
 8000db2:	2320      	movs	r3, #32
 8000db4:	f000 fa06 	bl	80011c4 <STARTUP_DHT11>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // OUTPUT COMPARE
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, count);
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <main+0x84>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a10      	ldr	r2, [pc, #64]	@ (8000e00 <main+0x90>)
 8000dbe:	6812      	ldr	r2, [r2, #0]
 8000dc0:	635a      	str	r2, [r3, #52]	@ 0x34
	  count++;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <main+0x90>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <main+0x90>)
 8000dca:	601a      	str	r2, [r3, #0]
	  HAL_Delay(10);
 8000dcc:	200a      	movs	r0, #10
 8000dce:	f000 fd75 	bl	80018bc <HAL_Delay>
	  if(count >= 600) count = 0;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <main+0x90>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	2396      	movs	r3, #150	@ 0x96
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d302      	bcc.n	8000de4 <main+0x74>
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <main+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]

	  // LEITURA DHT11
	  READ_DHT11(&DHT);
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <main+0x8c>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 fa4b 	bl	8001282 <READ_DHT11>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, count);
 8000dec:	e7e4      	b.n	8000db8 <main+0x48>
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	200000a8 	.word	0x200000a8
 8000df4:	20000028 	.word	0x20000028
 8000df8:	20000068 	.word	0x20000068
 8000dfc:	20000104 	.word	0x20000104
 8000e00:	200000e8 	.word	0x200000e8

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b095      	sub	sp, #84	@ 0x54
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	2418      	movs	r4, #24
 8000e0c:	193b      	adds	r3, r7, r4
 8000e0e:	0018      	movs	r0, r3
 8000e10:	2338      	movs	r3, #56	@ 0x38
 8000e12:	001a      	movs	r2, r3
 8000e14:	2100      	movs	r1, #0
 8000e16:	f002 ff21 	bl	8003c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	2314      	movs	r3, #20
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f002 ff1a 	bl	8003c5c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e28:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <SystemClock_Config+0xa8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a20      	ldr	r2, [pc, #128]	@ (8000eb0 <SystemClock_Config+0xac>)
 8000e2e:	401a      	ands	r2, r3
 8000e30:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <SystemClock_Config+0xa8>)
 8000e32:	2180      	movs	r1, #128	@ 0x80
 8000e34:	0109      	lsls	r1, r1, #4
 8000e36:	430a      	orrs	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3a:	0021      	movs	r1, r4
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2202      	movs	r2, #2
 8000e40:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2201      	movs	r2, #1
 8000e46:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2210      	movs	r2, #16
 8000e4c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2200      	movs	r2, #0
 8000e52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 ffe2 	bl	8001e20 <HAL_RCC_OscConfig>
 8000e5c:	1e03      	subs	r3, r0, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000e60:	f000 fba7 	bl	80015b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	220f      	movs	r2, #15
 8000e68:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2280      	movs	r2, #128	@ 0x80
 8000e74:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2100      	movs	r1, #0
 8000e86:	0018      	movs	r0, r3
 8000e88:	f001 fb8e 	bl	80025a8 <HAL_RCC_ClockConfig>
 8000e8c:	1e03      	subs	r3, r0, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e90:	f000 fb8f 	bl	80015b2 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000e94:	2380      	movs	r3, #128	@ 0x80
 8000e96:	045b      	lsls	r3, r3, #17
 8000e98:	2200      	movs	r2, #0
 8000e9a:	0019      	movs	r1, r3
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f001 fccb 	bl	8002838 <HAL_RCC_MCOConfig>
}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b015      	add	sp, #84	@ 0x54
 8000ea8:	bd90      	pop	{r4, r7, pc}
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	40007000 	.word	0x40007000
 8000eb0:	ffffe7ff 	.word	0xffffe7ff

08000eb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	@ 0x28
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	2318      	movs	r3, #24
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	2310      	movs	r3, #16
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	f002 fec9 	bl	8003c5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eca:	2310      	movs	r3, #16
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	0018      	movs	r0, r3
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	f002 fec1 	bl	8003c5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eda:	003b      	movs	r3, r7
 8000edc:	0018      	movs	r0, r3
 8000ede:	2310      	movs	r3, #16
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f002 feba 	bl	8003c5c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ee8:	4b35      	ldr	r3, [pc, #212]	@ (8000fc0 <MX_TIM2_Init+0x10c>)
 8000eea:	2280      	movs	r2, #128	@ 0x80
 8000eec:	05d2      	lsls	r2, r2, #23
 8000eee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8000ef0:	4b33      	ldr	r3, [pc, #204]	@ (8000fc0 <MX_TIM2_Init+0x10c>)
 8000ef2:	4a34      	ldr	r2, [pc, #208]	@ (8000fc4 <MX_TIM2_Init+0x110>)
 8000ef4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <MX_TIM2_Init+0x10c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000efc:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <MX_TIM2_Init+0x10c>)
 8000efe:	4a32      	ldr	r2, [pc, #200]	@ (8000fc8 <MX_TIM2_Init+0x114>)
 8000f00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f02:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc0 <MX_TIM2_Init+0x10c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f08:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc0 <MX_TIM2_Init+0x10c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <MX_TIM2_Init+0x10c>)
 8000f10:	0018      	movs	r0, r3
 8000f12:	f001 fd9b 	bl	8002a4c <HAL_TIM_Base_Init>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f1a:	f000 fb4a 	bl	80015b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1e:	2118      	movs	r1, #24
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2280      	movs	r2, #128	@ 0x80
 8000f24:	0152      	lsls	r2, r2, #5
 8000f26:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f28:	187a      	adds	r2, r7, r1
 8000f2a:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <MX_TIM2_Init+0x10c>)
 8000f2c:	0011      	movs	r1, r2
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f002 f9da 	bl	80032e8 <HAL_TIM_ConfigClockSource>
 8000f34:	1e03      	subs	r3, r0, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000f38:	f000 fb3b 	bl	80015b2 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000f3c:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <MX_TIM2_Init+0x10c>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f001 fe26 	bl	8002b90 <HAL_TIM_OC_Init>
 8000f44:	1e03      	subs	r3, r0, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000f48:	f000 fb33 	bl	80015b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4c:	2110      	movs	r1, #16
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f5a:	187a      	adds	r2, r7, r1
 8000f5c:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <MX_TIM2_Init+0x10c>)
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f002 fe23 	bl	8003bac <HAL_TIMEx_MasterConfigSynchronization>
 8000f66:	1e03      	subs	r3, r0, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000f6a:	f000 fb22 	bl	80015b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f6e:	003b      	movs	r3, r7
 8000f70:	2230      	movs	r2, #48	@ 0x30
 8000f72:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f74:	003b      	movs	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f7a:	003b      	movs	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f80:	003b      	movs	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f86:	0039      	movs	r1, r7
 8000f88:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <MX_TIM2_Init+0x10c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f002 f8af 	bl	80030f0 <HAL_TIM_OC_ConfigChannel>
 8000f92:	1e03      	subs	r3, r0, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000f96:	f000 fb0c 	bl	80015b2 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f9a:	0039      	movs	r1, r7
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <MX_TIM2_Init+0x10c>)
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f002 f8a5 	bl	80030f0 <HAL_TIM_OC_ConfigChannel>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000faa:	f000 fb02 	bl	80015b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fae:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <MX_TIM2_Init+0x10c>)
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 fb81 	bl	80016b8 <HAL_TIM_MspPostInit>

}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b00a      	add	sp, #40	@ 0x28
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	20000028 	.word	0x20000028
 8000fc4:	0000031f 	.word	0x0000031f
 8000fc8:	000003e7 	.word	0x000003e7

08000fcc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd2:	003b      	movs	r3, r7
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	001a      	movs	r2, r3
 8000fda:	2100      	movs	r1, #0
 8000fdc:	f002 fe3e 	bl	8003c5c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <MX_TIM6_Init+0x6c>)
 8000fe2:	4a16      	ldr	r2, [pc, #88]	@ (800103c <MX_TIM6_Init+0x70>)
 8000fe4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8-1;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_TIM6_Init+0x6c>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <MX_TIM6_Init+0x6c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_TIM6_Init+0x6c>)
 8000ff4:	4a12      	ldr	r2, [pc, #72]	@ (8001040 <MX_TIM6_Init+0x74>)
 8000ff6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <MX_TIM6_Init+0x6c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_TIM6_Init+0x6c>)
 8001000:	0018      	movs	r0, r3
 8001002:	f001 fd23 	bl	8002a4c <HAL_TIM_Base_Init>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d001      	beq.n	800100e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800100a:	f000 fad2 	bl	80015b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100e:	003b      	movs	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001014:	003b      	movs	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800101a:	003a      	movs	r2, r7
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_TIM6_Init+0x6c>)
 800101e:	0011      	movs	r1, r2
 8001020:	0018      	movs	r0, r3
 8001022:	f002 fdc3 	bl	8003bac <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d001      	beq.n	800102e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800102a:	f000 fac2 	bl	80015b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	20000068 	.word	0x20000068
 800103c:	40001000 	.word	0x40001000
 8001040:	0000ffff 	.word	0x0000ffff

08001044 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	2318      	movs	r3, #24
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	0018      	movs	r0, r3
 8001050:	2310      	movs	r3, #16
 8001052:	001a      	movs	r2, r3
 8001054:	2100      	movs	r1, #0
 8001056:	f002 fe01 	bl	8003c5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105a:	2310      	movs	r3, #16
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	0018      	movs	r0, r3
 8001060:	2308      	movs	r3, #8
 8001062:	001a      	movs	r2, r3
 8001064:	2100      	movs	r1, #0
 8001066:	f002 fdf9 	bl	8003c5c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800106a:	003b      	movs	r3, r7
 800106c:	0018      	movs	r0, r3
 800106e:	2310      	movs	r3, #16
 8001070:	001a      	movs	r2, r3
 8001072:	2100      	movs	r1, #0
 8001074:	f002 fdf2 	bl	8003c5c <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001078:	4b2d      	ldr	r3, [pc, #180]	@ (8001130 <MX_TIM21_Init+0xec>)
 800107a:	4a2e      	ldr	r2, [pc, #184]	@ (8001134 <MX_TIM21_Init+0xf0>)
 800107c:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 8-1;
 800107e:	4b2c      	ldr	r3, [pc, #176]	@ (8001130 <MX_TIM21_Init+0xec>)
 8001080:	2207      	movs	r2, #7
 8001082:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b2a      	ldr	r3, [pc, #168]	@ (8001130 <MX_TIM21_Init+0xec>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 800108a:	4b29      	ldr	r3, [pc, #164]	@ (8001130 <MX_TIM21_Init+0xec>)
 800108c:	4a2a      	ldr	r2, [pc, #168]	@ (8001138 <MX_TIM21_Init+0xf4>)
 800108e:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001090:	4b27      	ldr	r3, [pc, #156]	@ (8001130 <MX_TIM21_Init+0xec>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <MX_TIM21_Init+0xec>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800109c:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <MX_TIM21_Init+0xec>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f001 fcd4 	bl	8002a4c <HAL_TIM_Base_Init>
 80010a4:	1e03      	subs	r3, r0, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 80010a8:	f000 fa83 	bl	80015b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ac:	2118      	movs	r1, #24
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2280      	movs	r2, #128	@ 0x80
 80010b2:	0152      	lsls	r2, r2, #5
 80010b4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80010b6:	187a      	adds	r2, r7, r1
 80010b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <MX_TIM21_Init+0xec>)
 80010ba:	0011      	movs	r1, r2
 80010bc:	0018      	movs	r0, r3
 80010be:	f002 f913 	bl	80032e8 <HAL_TIM_ConfigClockSource>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 80010c6:	f000 fa74 	bl	80015b2 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim21) != HAL_OK)
 80010ca:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <MX_TIM21_Init+0xec>)
 80010cc:	0018      	movs	r0, r3
 80010ce:	f001 fe33 	bl	8002d38 <HAL_TIM_IC_Init>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80010d6:	f000 fa6c 	bl	80015b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010da:	2110      	movs	r1, #16
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80010e8:	187a      	adds	r2, r7, r1
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_TIM21_Init+0xec>)
 80010ec:	0011      	movs	r1, r2
 80010ee:	0018      	movs	r0, r3
 80010f0:	f002 fd5c 	bl	8003bac <HAL_TIMEx_MasterConfigSynchronization>
 80010f4:	1e03      	subs	r3, r0, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 80010f8:	f000 fa5b 	bl	80015b2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010fc:	003b      	movs	r3, r7
 80010fe:	220a      	movs	r2, #10
 8001100:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001102:	003b      	movs	r3, r7
 8001104:	2201      	movs	r2, #1
 8001106:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001108:	003b      	movs	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800110e:	003b      	movs	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim21, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001114:	0039      	movs	r1, r7
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_TIM21_Init+0xec>)
 8001118:	2200      	movs	r2, #0
 800111a:	0018      	movs	r0, r3
 800111c:	f002 f840 	bl	80031a0 <HAL_TIM_IC_ConfigChannel>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 8001124:	f000 fa45 	bl	80015b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b00a      	add	sp, #40	@ 0x28
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200000a8 	.word	0x200000a8
 8001134:	40010800 	.word	0x40010800
 8001138:	0000ffff 	.word	0x0000ffff

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	240c      	movs	r4, #12
 8001144:	193b      	adds	r3, r7, r4
 8001146:	0018      	movs	r0, r3
 8001148:	2314      	movs	r3, #20
 800114a:	001a      	movs	r2, r3
 800114c:	2100      	movs	r1, #0
 800114e:	f002 fd85 	bl	8003c5c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <MX_GPIO_Init+0x84>)
 8001154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001156:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <MX_GPIO_Init+0x84>)
 8001158:	2101      	movs	r1, #1
 800115a:	430a      	orrs	r2, r1
 800115c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800115e:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <MX_GPIO_Init+0x84>)
 8001160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001162:	2201      	movs	r2, #1
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <MX_GPIO_Init+0x84>)
 800116c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800116e:	4b14      	ldr	r3, [pc, #80]	@ (80011c0 <MX_GPIO_Init+0x84>)
 8001170:	2102      	movs	r1, #2
 8001172:	430a      	orrs	r2, r1
 8001174:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <MX_GPIO_Init+0x84>)
 8001178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117a:	2202      	movs	r2, #2
 800117c:	4013      	ands	r3, r2
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001182:	23a0      	movs	r3, #160	@ 0xa0
 8001184:	05db      	lsls	r3, r3, #23
 8001186:	2200      	movs	r2, #0
 8001188:	2120      	movs	r1, #32
 800118a:	0018      	movs	r0, r3
 800118c:	f000 fe2b 	bl	8001de6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001190:	0021      	movs	r1, r4
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2220      	movs	r2, #32
 8001196:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2201      	movs	r2, #1
 800119c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80011aa:	187a      	adds	r2, r7, r1
 80011ac:	23a0      	movs	r3, #160	@ 0xa0
 80011ae:	05db      	lsls	r3, r3, #23
 80011b0:	0011      	movs	r1, r2
 80011b2:	0018      	movs	r0, r3
 80011b4:	f000 fc84 	bl	8001ac0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011b8:	46c0      	nop			@ (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b009      	add	sp, #36	@ 0x24
 80011be:	bd90      	pop	{r4, r7, pc}
 80011c0:	40021000 	.word	0x40021000

080011c4 <STARTUP_DHT11>:

/* USER CODE BEGIN 4 */
void STARTUP_DHT11(DHT11 *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pinout){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	001a      	movs	r2, r3
 80011d2:	1cbb      	adds	r3, r7, #2
 80011d4:	801a      	strh	r2, [r3, #0]
	dht->htim = htim;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	dht->port = port;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	601a      	str	r2, [r3, #0]
	dht->pinout = pinout;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	1cba      	adds	r2, r7, #2
 80011e6:	8812      	ldrh	r2, [r2, #0]
 80011e8:	809a      	strh	r2, [r3, #4]
}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b004      	add	sp, #16
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <SET_MODE_DHT11>:
void SET_MODE_DHT11(DHT11 *dht, uint8_t pin_mode){
 80011f2:	b590      	push	{r4, r7, lr}
 80011f4:	b089      	sub	sp, #36	@ 0x24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	000a      	movs	r2, r1
 80011fc:	1cfb      	adds	r3, r7, #3
 80011fe:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	240c      	movs	r4, #12
 8001202:	193b      	adds	r3, r7, r4
 8001204:	0018      	movs	r0, r3
 8001206:	2314      	movs	r3, #20
 8001208:	001a      	movs	r2, r3
 800120a:	2100      	movs	r1, #0
 800120c:	f002 fd26 	bl	8003c5c <memset>

	if(pin_mode == OUTPUT){
 8001210:	1cfb      	adds	r3, r7, #3
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d116      	bne.n	8001246 <SET_MODE_DHT11+0x54>
	  GPIO_InitStruct.Pin = dht->pinout;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	889b      	ldrh	r3, [r3, #4]
 800121c:	001a      	movs	r2, r3
 800121e:	0021      	movs	r1, r4
 8001220:	187b      	adds	r3, r7, r1
 8001222:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	187b      	adds	r3, r7, r1
 8001226:	2201      	movs	r2, #1
 8001228:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2203      	movs	r2, #3
 8001234:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	187a      	adds	r2, r7, r1
 800123c:	0011      	movs	r1, r2
 800123e:	0018      	movs	r0, r3
 8001240:	f000 fc3e 	bl	8001ac0 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 8001244:	e019      	b.n	800127a <SET_MODE_DHT11+0x88>
	else if(pin_mode == INPUT){
 8001246:	1cfb      	adds	r3, r7, #3
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d115      	bne.n	800127a <SET_MODE_DHT11+0x88>
	  GPIO_InitStruct.Pin = dht->pinout;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	889b      	ldrh	r3, [r3, #4]
 8001252:	001a      	movs	r2, r3
 8001254:	210c      	movs	r1, #12
 8001256:	187b      	adds	r3, r7, r1
 8001258:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	187b      	adds	r3, r7, r1
 8001268:	2203      	movs	r2, #3
 800126a:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	187a      	adds	r2, r7, r1
 8001272:	0011      	movs	r1, r2
 8001274:	0018      	movs	r0, r3
 8001276:	f000 fc23 	bl	8001ac0 <HAL_GPIO_Init>
}
 800127a:	46c0      	nop			@ (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b009      	add	sp, #36	@ 0x24
 8001280:	bd90      	pop	{r4, r7, pc}

08001282 <READ_DHT11>:
uint8_t READ_DHT11(DHT11 *dht){
 8001282:	b590      	push	{r4, r7, lr}
 8001284:	b095      	sub	sp, #84	@ 0x54
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 800128a:	2336      	movs	r3, #54	@ 0x36
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	2200      	movs	r2, #0
 8001290:	801a      	strh	r2, [r3, #0]
 8001292:	2334      	movs	r3, #52	@ 0x34
 8001294:	18fb      	adds	r3, r7, r3
 8001296:	2200      	movs	r2, #0
 8001298:	801a      	strh	r2, [r3, #0]
 800129a:	234e      	movs	r3, #78	@ 0x4e
 800129c:	18fb      	adds	r3, r7, r3
 800129e:	2200      	movs	r2, #0
 80012a0:	801a      	strh	r2, [r3, #0]
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 80012a2:	234d      	movs	r3, #77	@ 0x4d
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	2200      	movs	r2, #0
 80012a8:	701a      	strb	r2, [r3, #0]
 80012aa:	234c      	movs	r3, #76	@ 0x4c
 80012ac:	18fb      	adds	r3, r7, r3
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
 80012b2:	234b      	movs	r3, #75	@ 0x4b
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	2333      	movs	r3, #51	@ 0x33
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
	uint8_t mData[40];

	SET_MODE_DHT11(dht, OUTPUT);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2101      	movs	r1, #1
 80012c6:	0018      	movs	r0, r3
 80012c8:	f7ff ff93 	bl	80011f2 <SET_MODE_DHT11>
	HAL_GPIO_WritePin(dht->port, dht->pinout, GPIO_PIN_RESET);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	889b      	ldrh	r3, [r3, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	0019      	movs	r1, r3
 80012d8:	f000 fd85 	bl	8001de6 <HAL_GPIO_WritePin>
	HAL_Delay(18);
 80012dc:	2012      	movs	r0, #18
 80012de:	f000 faed 	bl	80018bc <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e2:	b672      	cpsid	i
}
 80012e4:	46c0      	nop			@ (mov r8, r8)

	__disable_irq(); // Desabilita todas as interrupções para apenas ler o DHT
	HAL_TIM_Base_Start(dht->htim);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	0018      	movs	r0, r3
 80012ec:	f001 fbee 	bl	8002acc <HAL_TIM_Base_Start>
	SET_MODE_DHT11(dht, INPUT);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2100      	movs	r1, #0
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff ff7c 	bl	80011f2 <SET_MODE_DHT11>

	__HAL_TIM_SET_COUNTER(dht->htim, 0); // Definindo o counter para zero
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2200      	movs	r2, #0
 8001302:	625a      	str	r2, [r3, #36]	@ 0x24

	while(HAL_GPIO_ReadPin(dht->port, dht->pinout) == GPIO_PIN_SET){
 8001304:	e00b      	b.n	800131e <READ_DHT11+0x9c>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130e:	b29a      	uxth	r2, r3
 8001310:	23fa      	movs	r3, #250	@ 0xfa
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	429a      	cmp	r2, r3
 8001316:	d902      	bls.n	800131e <READ_DHT11+0x9c>
  __ASM volatile ("cpsie i" : : : "memory");
 8001318:	b662      	cpsie	i
}
 800131a:	46c0      	nop			@ (mov r8, r8)
			__enable_irq(); // Abilita novamente as interrupções
			break;
 800131c:	e00a      	b.n	8001334 <READ_DHT11+0xb2>
	while(HAL_GPIO_ReadPin(dht->port, dht->pinout) == GPIO_PIN_SET){
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	889b      	ldrh	r3, [r3, #4]
 8001326:	0019      	movs	r1, r3
 8001328:	0010      	movs	r0, r2
 800132a:	f000 fd3f 	bl	8001dac <HAL_GPIO_ReadPin>
 800132e:	0003      	movs	r3, r0
 8001330:	2b01      	cmp	r3, #1
 8001332:	d0e8      	beq.n	8001306 <READ_DHT11+0x84>
		}
	}

	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24

	while(HAL_GPIO_ReadPin(dht->port, dht->pinout) == GPIO_PIN_RESET){
 800133e:	e00b      	b.n	8001358 <READ_DHT11+0xd6>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001348:	b29a      	uxth	r2, r3
 800134a:	23fa      	movs	r3, #250	@ 0xfa
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	429a      	cmp	r2, r3
 8001350:	d902      	bls.n	8001358 <READ_DHT11+0xd6>
  __ASM volatile ("cpsie i" : : : "memory");
 8001352:	b662      	cpsie	i
}
 8001354:	46c0      	nop			@ (mov r8, r8)
			__enable_irq(); // Abilita novamente as interrupções
			break;
 8001356:	e009      	b.n	800136c <READ_DHT11+0xea>
	while(HAL_GPIO_ReadPin(dht->port, dht->pinout) == GPIO_PIN_RESET){
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	889b      	ldrh	r3, [r3, #4]
 8001360:	0019      	movs	r1, r3
 8001362:	0010      	movs	r0, r2
 8001364:	f000 fd22 	bl	8001dac <HAL_GPIO_ReadPin>
 8001368:	1e03      	subs	r3, r0, #0
 800136a:	d0e9      	beq.n	8001340 <READ_DHT11+0xbe>
		}
	}

	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001374:	2336      	movs	r3, #54	@ 0x36
 8001376:	18fb      	adds	r3, r7, r3
 8001378:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2200      	movs	r2, #0
 8001382:	625a      	str	r2, [r3, #36]	@ 0x24

	while(HAL_GPIO_ReadPin(dht->port, dht->pinout) == GPIO_PIN_SET){
 8001384:	e00b      	b.n	800139e <READ_DHT11+0x11c>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138e:	b29a      	uxth	r2, r3
 8001390:	23fa      	movs	r3, #250	@ 0xfa
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	429a      	cmp	r2, r3
 8001396:	d902      	bls.n	800139e <READ_DHT11+0x11c>
  __ASM volatile ("cpsie i" : : : "memory");
 8001398:	b662      	cpsie	i
}
 800139a:	46c0      	nop			@ (mov r8, r8)
			__enable_irq(); // Abilita novamente as interrupções
			break;
 800139c:	e00a      	b.n	80013b4 <READ_DHT11+0x132>
	while(HAL_GPIO_ReadPin(dht->port, dht->pinout) == GPIO_PIN_SET){
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	889b      	ldrh	r3, [r3, #4]
 80013a6:	0019      	movs	r1, r3
 80013a8:	0010      	movs	r0, r2
 80013aa:	f000 fcff 	bl	8001dac <HAL_GPIO_ReadPin>
 80013ae:	0003      	movs	r3, r0
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d0e8      	beq.n	8001386 <READ_DHT11+0x104>
		}
	}

	mTime2 = (uint16_t) __HAL_TIM_GET_COUNTER(dht->htim);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013bc:	2134      	movs	r1, #52	@ 0x34
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	801a      	strh	r2, [r3, #0]

	if((mTime1 < 75 || mTime1 > 85) || (mTime2 < 75 || mTime2 > 85)) {
 80013c2:	2236      	movs	r2, #54	@ 0x36
 80013c4:	18bb      	adds	r3, r7, r2
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	2b4a      	cmp	r3, #74	@ 0x4a
 80013ca:	d90b      	bls.n	80013e4 <READ_DHT11+0x162>
 80013cc:	18bb      	adds	r3, r7, r2
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	2b55      	cmp	r3, #85	@ 0x55
 80013d2:	d807      	bhi.n	80013e4 <READ_DHT11+0x162>
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	2b4a      	cmp	r3, #74	@ 0x4a
 80013da:	d903      	bls.n	80013e4 <READ_DHT11+0x162>
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	2b55      	cmp	r3, #85	@ 0x55
 80013e2:	d903      	bls.n	80013ec <READ_DHT11+0x16a>
  __ASM volatile ("cpsie i" : : : "memory");
 80013e4:	b662      	cpsie	i
}
 80013e6:	46c0      	nop			@ (mov r8, r8)
		__enable_irq();
		return 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e0de      	b.n	80015aa <READ_DHT11+0x328>
	}

	for(int j = 0; j < 40; ++j){
 80013ec:	2300      	movs	r3, #0
 80013ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80013f0:	e062      	b.n	80014b8 <READ_DHT11+0x236>
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	@ 0x24

		while(HAL_GPIO_ReadPin(dht->port, dht->pinout) == GPIO_PIN_RESET){
 80013fc:	e00b      	b.n	8001416 <READ_DHT11+0x194>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001406:	b29a      	uxth	r2, r3
 8001408:	23fa      	movs	r3, #250	@ 0xfa
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	429a      	cmp	r2, r3
 800140e:	d902      	bls.n	8001416 <READ_DHT11+0x194>
  __ASM volatile ("cpsie i" : : : "memory");
 8001410:	b662      	cpsie	i
}
 8001412:	46c0      	nop			@ (mov r8, r8)
				__enable_irq(); // Abilita novamente as interrupções
				break;
 8001414:	e009      	b.n	800142a <READ_DHT11+0x1a8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pinout) == GPIO_PIN_RESET){
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	889b      	ldrh	r3, [r3, #4]
 800141e:	0019      	movs	r1, r3
 8001420:	0010      	movs	r0, r2
 8001422:	f000 fcc3 	bl	8001dac <HAL_GPIO_ReadPin>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d0e9      	beq.n	80013fe <READ_DHT11+0x17c>
			}
		}

		while(HAL_GPIO_ReadPin(dht->port, dht->pinout) == GPIO_PIN_SET){
 800142a:	e00b      	b.n	8001444 <READ_DHT11+0x1c2>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001434:	b29a      	uxth	r2, r3
 8001436:	23fa      	movs	r3, #250	@ 0xfa
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	429a      	cmp	r2, r3
 800143c:	d902      	bls.n	8001444 <READ_DHT11+0x1c2>
  __ASM volatile ("cpsie i" : : : "memory");
 800143e:	b662      	cpsie	i
}
 8001440:	46c0      	nop			@ (mov r8, r8)
				__enable_irq(); // Abilita novamente as interrupções
				break;
 8001442:	e00a      	b.n	800145a <READ_DHT11+0x1d8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pinout) == GPIO_PIN_SET){
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	889b      	ldrh	r3, [r3, #4]
 800144c:	0019      	movs	r1, r3
 800144e:	0010      	movs	r0, r2
 8001450:	f000 fcac 	bl	8001dac <HAL_GPIO_ReadPin>
 8001454:	0003      	movs	r3, r0
 8001456:	2b01      	cmp	r3, #1
 8001458:	d0e8      	beq.n	800142c <READ_DHT11+0x1aa>
			}
		}

		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001462:	2136      	movs	r1, #54	@ 0x36
 8001464:	187b      	adds	r3, r7, r1
 8001466:	801a      	strh	r2, [r3, #0]

		if(mTime1 > 20 && mTime1 < 30) mBit = 0;
 8001468:	000a      	movs	r2, r1
 800146a:	18bb      	adds	r3, r7, r2
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	2b14      	cmp	r3, #20
 8001470:	d908      	bls.n	8001484 <READ_DHT11+0x202>
 8001472:	18bb      	adds	r3, r7, r2
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	2b1d      	cmp	r3, #29
 8001478:	d804      	bhi.n	8001484 <READ_DHT11+0x202>
 800147a:	234e      	movs	r3, #78	@ 0x4e
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	2200      	movs	r2, #0
 8001480:	801a      	strh	r2, [r3, #0]
 8001482:	e00c      	b.n	800149e <READ_DHT11+0x21c>
		else if (mTime1 > 60 && mTime1 < 80) mBit = 1;
 8001484:	2236      	movs	r2, #54	@ 0x36
 8001486:	18bb      	adds	r3, r7, r2
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	2b3c      	cmp	r3, #60	@ 0x3c
 800148c:	d907      	bls.n	800149e <READ_DHT11+0x21c>
 800148e:	18bb      	adds	r3, r7, r2
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	2b4f      	cmp	r3, #79	@ 0x4f
 8001494:	d803      	bhi.n	800149e <READ_DHT11+0x21c>
 8001496:	234e      	movs	r3, #78	@ 0x4e
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	2201      	movs	r2, #1
 800149c:	801a      	strh	r2, [r3, #0]

		mData[j] = mBit;
 800149e:	234e      	movs	r3, #78	@ 0x4e
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	b2d9      	uxtb	r1, r3
 80014a6:	2308      	movs	r3, #8
 80014a8:	18fa      	adds	r2, r7, r3
 80014aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014ac:	18d3      	adds	r3, r2, r3
 80014ae:	1c0a      	adds	r2, r1, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; ++j){
 80014b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014b4:	3301      	adds	r3, #1
 80014b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80014b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014ba:	2b27      	cmp	r3, #39	@ 0x27
 80014bc:	dd99      	ble.n	80013f2 <READ_DHT11+0x170>

	}

	HAL_TIM_Base_Stop(dht->htim);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f001 fb46 	bl	8002b54 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 80014c8:	b662      	cpsie	i
}
 80014ca:	46c0      	nop			@ (mov r8, r8)
	__enable_irq();

	for(int i = 0; i < 8; ++i) humVal = (humVal << 1) | mData[i];
 80014cc:	2300      	movs	r3, #0
 80014ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80014d0:	e012      	b.n	80014f8 <READ_DHT11+0x276>
 80014d2:	204d      	movs	r0, #77	@ 0x4d
 80014d4:	183b      	adds	r3, r7, r0
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	18db      	adds	r3, r3, r3
 80014dc:	b25a      	sxtb	r2, r3
 80014de:	2308      	movs	r3, #8
 80014e0:	18f9      	adds	r1, r7, r3
 80014e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014e4:	18cb      	adds	r3, r1, r3
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	4313      	orrs	r3, r2
 80014ec:	b25a      	sxtb	r2, r3
 80014ee:	183b      	adds	r3, r7, r0
 80014f0:	701a      	strb	r2, [r3, #0]
 80014f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014f4:	3301      	adds	r3, #1
 80014f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80014f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014fa:	2b07      	cmp	r3, #7
 80014fc:	dde9      	ble.n	80014d2 <READ_DHT11+0x250>

	for(int i = 16; i < 24; ++i){
 80014fe:	2310      	movs	r3, #16
 8001500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001502:	e012      	b.n	800152a <READ_DHT11+0x2a8>
		tempVal += mData[i];
 8001504:	2308      	movs	r3, #8
 8001506:	18fa      	adds	r2, r7, r3
 8001508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800150a:	18d3      	adds	r3, r2, r3
 800150c:	7819      	ldrb	r1, [r3, #0]
 800150e:	204c      	movs	r0, #76	@ 0x4c
 8001510:	183b      	adds	r3, r7, r0
 8001512:	183a      	adds	r2, r7, r0
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	188a      	adds	r2, r1, r2
 8001518:	701a      	strb	r2, [r3, #0]
		tempVal = tempVal << 1;
 800151a:	183a      	adds	r2, r7, r0
 800151c:	183b      	adds	r3, r7, r0
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	18db      	adds	r3, r3, r3
 8001522:	7013      	strb	r3, [r2, #0]
	for(int i = 16; i < 24; ++i){
 8001524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001526:	3301      	adds	r3, #1
 8001528:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800152a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800152c:	2b17      	cmp	r3, #23
 800152e:	dde9      	ble.n	8001504 <READ_DHT11+0x282>
	}

	for(int i = 32; i < 40; ++i){
 8001530:	2320      	movs	r3, #32
 8001532:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001534:	e012      	b.n	800155c <READ_DHT11+0x2da>
		parityVal += mData[i];
 8001536:	2308      	movs	r3, #8
 8001538:	18fa      	adds	r2, r7, r3
 800153a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800153c:	18d3      	adds	r3, r2, r3
 800153e:	7819      	ldrb	r1, [r3, #0]
 8001540:	204b      	movs	r0, #75	@ 0x4b
 8001542:	183b      	adds	r3, r7, r0
 8001544:	183a      	adds	r2, r7, r0
 8001546:	7812      	ldrb	r2, [r2, #0]
 8001548:	188a      	adds	r2, r1, r2
 800154a:	701a      	strb	r2, [r3, #0]
		parityVal = parityVal << 1;
 800154c:	183a      	adds	r2, r7, r0
 800154e:	183b      	adds	r3, r7, r0
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	18db      	adds	r3, r3, r3
 8001554:	7013      	strb	r3, [r2, #0]
	for(int i = 32; i < 40; ++i){
 8001556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001558:	3301      	adds	r3, #1
 800155a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800155c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800155e:	2b27      	cmp	r3, #39	@ 0x27
 8001560:	dde9      	ble.n	8001536 <READ_DHT11+0x2b4>
	}

	parityVal = parityVal >> 1;
 8001562:	224b      	movs	r2, #75	@ 0x4b
 8001564:	18bb      	adds	r3, r7, r2
 8001566:	18ba      	adds	r2, r7, r2
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	0852      	lsrs	r2, r2, #1
 800156c:	701a      	strb	r2, [r3, #0]
	humVal = humVal >> 1;
 800156e:	214d      	movs	r1, #77	@ 0x4d
 8001570:	187b      	adds	r3, r7, r1
 8001572:	187a      	adds	r2, r7, r1
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	0852      	lsrs	r2, r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
	tempVal = tempVal >> 1;
 800157a:	244c      	movs	r4, #76	@ 0x4c
 800157c:	193b      	adds	r3, r7, r4
 800157e:	193a      	adds	r2, r7, r4
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	0852      	lsrs	r2, r2, #1
 8001584:	701a      	strb	r2, [r3, #0]

	genParity = humVal + tempVal;
 8001586:	2333      	movs	r3, #51	@ 0x33
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	0008      	movs	r0, r1
 800158c:	1879      	adds	r1, r7, r1
 800158e:	193a      	adds	r2, r7, r4
 8001590:	7809      	ldrb	r1, [r1, #0]
 8001592:	7812      	ldrb	r2, [r2, #0]
 8001594:	188a      	adds	r2, r1, r2
 8001596:	701a      	strb	r2, [r3, #0]


	dht->temperature = tempVal;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	193a      	adds	r2, r7, r4
 800159c:	7812      	ldrb	r2, [r2, #0]
 800159e:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	183a      	adds	r2, r7, r0
 80015a4:	7812      	ldrb	r2, [r2, #0]
 80015a6:	735a      	strb	r2, [r3, #13]

	return 1;
 80015a8:	2301      	movs	r3, #1
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b015      	add	sp, #84	@ 0x54
 80015b0:	bd90      	pop	{r4, r7, pc}

080015b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015b6:	b672      	cpsid	i
}
 80015b8:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	e7fd      	b.n	80015ba <Error_Handler+0x8>
	...

080015c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c4:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <HAL_MspInit+0x24>)
 80015c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_MspInit+0x24>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <HAL_MspInit+0x24>)
 80015d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015d4:	4b03      	ldr	r3, [pc, #12]	@ (80015e4 <HAL_MspInit+0x24>)
 80015d6:	2180      	movs	r1, #128	@ 0x80
 80015d8:	0549      	lsls	r1, r1, #21
 80015da:	430a      	orrs	r2, r1
 80015dc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40021000 	.word	0x40021000

080015e8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	230c      	movs	r3, #12
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	0018      	movs	r0, r3
 80015f6:	2314      	movs	r3, #20
 80015f8:	001a      	movs	r2, r3
 80015fa:	2100      	movs	r1, #0
 80015fc:	f002 fb2e 	bl	8003c5c <memset>
  if(htim_base->Instance==TIM2)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	05db      	lsls	r3, r3, #23
 8001608:	429a      	cmp	r2, r3
 800160a:	d106      	bne.n	800161a <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800160c:	4b26      	ldr	r3, [pc, #152]	@ (80016a8 <HAL_TIM_Base_MspInit+0xc0>)
 800160e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001610:	4b25      	ldr	r3, [pc, #148]	@ (80016a8 <HAL_TIM_Base_MspInit+0xc0>)
 8001612:	2101      	movs	r1, #1
 8001614:	430a      	orrs	r2, r1
 8001616:	639a      	str	r2, [r3, #56]	@ 0x38
    /* USER CODE BEGIN TIM21_MspInit 1 */

    /* USER CODE END TIM21_MspInit 1 */
  }

}
 8001618:	e041      	b.n	800169e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a23      	ldr	r2, [pc, #140]	@ (80016ac <HAL_TIM_Base_MspInit+0xc4>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d106      	bne.n	8001632 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001624:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <HAL_TIM_Base_MspInit+0xc0>)
 8001626:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001628:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <HAL_TIM_Base_MspInit+0xc0>)
 800162a:	2110      	movs	r1, #16
 800162c:	430a      	orrs	r2, r1
 800162e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001630:	e035      	b.n	800169e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM21)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a1e      	ldr	r2, [pc, #120]	@ (80016b0 <HAL_TIM_Base_MspInit+0xc8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d130      	bne.n	800169e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM21_CLK_ENABLE();
 800163c:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <HAL_TIM_Base_MspInit+0xc0>)
 800163e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <HAL_TIM_Base_MspInit+0xc0>)
 8001642:	2104      	movs	r1, #4
 8001644:	430a      	orrs	r2, r1
 8001646:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001648:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <HAL_TIM_Base_MspInit+0xc0>)
 800164a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <HAL_TIM_Base_MspInit+0xc0>)
 800164e:	2102      	movs	r1, #2
 8001650:	430a      	orrs	r2, r1
 8001652:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001654:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <HAL_TIM_Base_MspInit+0xc0>)
 8001656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001658:	2202      	movs	r2, #2
 800165a:	4013      	ands	r3, r2
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001660:	210c      	movs	r1, #12
 8001662:	187b      	adds	r3, r7, r1
 8001664:	2280      	movs	r2, #128	@ 0x80
 8001666:	0192      	lsls	r2, r2, #6
 8001668:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	187b      	adds	r3, r7, r1
 800166c:	2202      	movs	r2, #2
 800166e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	187b      	adds	r3, r7, r1
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	187b      	adds	r3, r7, r1
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM21;
 800167c:	187b      	adds	r3, r7, r1
 800167e:	2206      	movs	r2, #6
 8001680:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001682:	187b      	adds	r3, r7, r1
 8001684:	4a0b      	ldr	r2, [pc, #44]	@ (80016b4 <HAL_TIM_Base_MspInit+0xcc>)
 8001686:	0019      	movs	r1, r3
 8001688:	0010      	movs	r0, r2
 800168a:	f000 fa19 	bl	8001ac0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2014      	movs	r0, #20
 8001694:	f000 f9e2 	bl	8001a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8001698:	2014      	movs	r0, #20
 800169a:	f000 f9f4 	bl	8001a86 <HAL_NVIC_EnableIRQ>
}
 800169e:	46c0      	nop			@ (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b008      	add	sp, #32
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40001000 	.word	0x40001000
 80016b0:	40010800 	.word	0x40010800
 80016b4:	50000400 	.word	0x50000400

080016b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b089      	sub	sp, #36	@ 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	240c      	movs	r4, #12
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	0018      	movs	r0, r3
 80016c6:	2314      	movs	r3, #20
 80016c8:	001a      	movs	r2, r3
 80016ca:	2100      	movs	r1, #0
 80016cc:	f002 fac6 	bl	8003c5c <memset>
  if(htim->Instance==TIM2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	05db      	lsls	r3, r3, #23
 80016d8:	429a      	cmp	r2, r3
 80016da:	d122      	bne.n	8001722 <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b13      	ldr	r3, [pc, #76]	@ (800172c <HAL_TIM_MspPostInit+0x74>)
 80016de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_TIM_MspPostInit+0x74>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	430a      	orrs	r2, r1
 80016e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016e8:	4b10      	ldr	r3, [pc, #64]	@ (800172c <HAL_TIM_MspPostInit+0x74>)
 80016ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ec:	2201      	movs	r2, #1
 80016ee:	4013      	ands	r3, r2
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016f4:	0021      	movs	r1, r4
 80016f6:	187b      	adds	r3, r7, r1
 80016f8:	2203      	movs	r2, #3
 80016fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	2202      	movs	r2, #2
 8001700:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	187b      	adds	r3, r7, r1
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001708:	187b      	adds	r3, r7, r1
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800170e:	187b      	adds	r3, r7, r1
 8001710:	2202      	movs	r2, #2
 8001712:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	187a      	adds	r2, r7, r1
 8001716:	23a0      	movs	r3, #160	@ 0xa0
 8001718:	05db      	lsls	r3, r3, #23
 800171a:	0011      	movs	r1, r2
 800171c:	0018      	movs	r0, r3
 800171e:	f000 f9cf 	bl	8001ac0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b009      	add	sp, #36	@ 0x24
 8001728:	bd90      	pop	{r4, r7, pc}
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	40021000 	.word	0x40021000

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001734:	46c0      	nop			@ (mov r8, r8)
 8001736:	e7fd      	b.n	8001734 <NMI_Handler+0x4>

08001738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173c:	46c0      	nop			@ (mov r8, r8)
 800173e:	e7fd      	b.n	800173c <HardFault_Handler+0x4>

08001740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001744:	46c0      	nop			@ (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001758:	f000 f894 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175c:	46c0      	nop			@ (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001768:	4b03      	ldr	r3, [pc, #12]	@ (8001778 <TIM21_IRQHandler+0x14>)
 800176a:	0018      	movs	r0, r3
 800176c:	f001 fbf4 	bl	8002f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001770:	46c0      	nop			@ (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			@ (mov r8, r8)
 8001778:	200000a8 	.word	0x200000a8

0800177c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	46c0      	nop			@ (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001788:	480d      	ldr	r0, [pc, #52]	@ (80017c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800178a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800178c:	f7ff fff6 	bl	800177c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001790:	480c      	ldr	r0, [pc, #48]	@ (80017c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001792:	490d      	ldr	r1, [pc, #52]	@ (80017c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001794:	4a0d      	ldr	r2, [pc, #52]	@ (80017cc <LoopForever+0xe>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017a8:	4c0a      	ldr	r4, [pc, #40]	@ (80017d4 <LoopForever+0x16>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b6:	f002 fa59 	bl	8003c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ba:	f7ff fad9 	bl	8000d70 <main>

080017be <LoopForever>:

LoopForever:
    b LoopForever
 80017be:	e7fe      	b.n	80017be <LoopForever>
  ldr   r0, =_estack
 80017c0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017cc:	08003d30 	.word	0x08003d30
  ldr r2, =_sbss
 80017d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017d4:	20000118 	.word	0x20000118

080017d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC1_COMP_IRQHandler>
	...

080017dc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e2:	1dfb      	adds	r3, r7, #7
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_Init+0x3c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <HAL_Init+0x3c>)
 80017ee:	2140      	movs	r1, #64	@ 0x40
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f4:	2000      	movs	r0, #0
 80017f6:	f000 f811 	bl	800181c <HAL_InitTick>
 80017fa:	1e03      	subs	r3, r0, #0
 80017fc:	d003      	beq.n	8001806 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
 8001804:	e001      	b.n	800180a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001806:	f7ff fedb 	bl	80015c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	781b      	ldrb	r3, [r3, #0]
}
 800180e:	0018      	movs	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	b002      	add	sp, #8
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	40022000 	.word	0x40022000

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <HAL_InitTick+0x5c>)
 8001826:	681c      	ldr	r4, [r3, #0]
 8001828:	4b14      	ldr	r3, [pc, #80]	@ (800187c <HAL_InitTick+0x60>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	0019      	movs	r1, r3
 800182e:	23fa      	movs	r3, #250	@ 0xfa
 8001830:	0098      	lsls	r0, r3, #2
 8001832:	f7fe fc69 	bl	8000108 <__udivsi3>
 8001836:	0003      	movs	r3, r0
 8001838:	0019      	movs	r1, r3
 800183a:	0020      	movs	r0, r4
 800183c:	f7fe fc64 	bl	8000108 <__udivsi3>
 8001840:	0003      	movs	r3, r0
 8001842:	0018      	movs	r0, r3
 8001844:	f000 f92f 	bl	8001aa6 <HAL_SYSTICK_Config>
 8001848:	1e03      	subs	r3, r0, #0
 800184a:	d001      	beq.n	8001850 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e00f      	b.n	8001870 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b03      	cmp	r3, #3
 8001854:	d80b      	bhi.n	800186e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	2301      	movs	r3, #1
 800185a:	425b      	negs	r3, r3
 800185c:	2200      	movs	r2, #0
 800185e:	0018      	movs	r0, r3
 8001860:	f000 f8fc 	bl	8001a5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_InitTick+0x64>)
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b003      	add	sp, #12
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	20000000 	.word	0x20000000
 800187c:	20000008 	.word	0x20000008
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_IncTick+0x1c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	001a      	movs	r2, r3
 800188e:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <HAL_IncTick+0x20>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	18d2      	adds	r2, r2, r3
 8001894:	4b03      	ldr	r3, [pc, #12]	@ (80018a4 <HAL_IncTick+0x20>)
 8001896:	601a      	str	r2, [r3, #0]
}
 8001898:	46c0      	nop			@ (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000114 	.word	0x20000114

080018a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b02      	ldr	r3, [pc, #8]	@ (80018b8 <HAL_GetTick+0x10>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	20000114 	.word	0x20000114

080018bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff fff0 	bl	80018a8 <HAL_GetTick>
 80018c8:	0003      	movs	r3, r0
 80018ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3301      	adds	r3, #1
 80018d4:	d005      	beq.n	80018e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <HAL_Delay+0x44>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	001a      	movs	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	189b      	adds	r3, r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	f7ff ffe0 	bl	80018a8 <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d8f7      	bhi.n	80018e4 <HAL_Delay+0x28>
  {
  }
}
 80018f4:	46c0      	nop			@ (mov r8, r8)
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b004      	add	sp, #16
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	20000008 	.word	0x20000008

08001904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	0002      	movs	r2, r0
 800190c:	1dfb      	adds	r3, r7, #7
 800190e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001910:	1dfb      	adds	r3, r7, #7
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b7f      	cmp	r3, #127	@ 0x7f
 8001916:	d809      	bhi.n	800192c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001918:	1dfb      	adds	r3, r7, #7
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	001a      	movs	r2, r3
 800191e:	231f      	movs	r3, #31
 8001920:	401a      	ands	r2, r3
 8001922:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <__NVIC_EnableIRQ+0x30>)
 8001924:	2101      	movs	r1, #1
 8001926:	4091      	lsls	r1, r2
 8001928:	000a      	movs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
  }
}
 800192c:	46c0      	nop			@ (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b002      	add	sp, #8
 8001932:	bd80      	pop	{r7, pc}
 8001934:	e000e100 	.word	0xe000e100

08001938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	0002      	movs	r2, r0
 8001940:	6039      	str	r1, [r7, #0]
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001946:	1dfb      	adds	r3, r7, #7
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b7f      	cmp	r3, #127	@ 0x7f
 800194c:	d828      	bhi.n	80019a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800194e:	4a2f      	ldr	r2, [pc, #188]	@ (8001a0c <__NVIC_SetPriority+0xd4>)
 8001950:	1dfb      	adds	r3, r7, #7
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b25b      	sxtb	r3, r3
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	33c0      	adds	r3, #192	@ 0xc0
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	589b      	ldr	r3, [r3, r2]
 800195e:	1dfa      	adds	r2, r7, #7
 8001960:	7812      	ldrb	r2, [r2, #0]
 8001962:	0011      	movs	r1, r2
 8001964:	2203      	movs	r2, #3
 8001966:	400a      	ands	r2, r1
 8001968:	00d2      	lsls	r2, r2, #3
 800196a:	21ff      	movs	r1, #255	@ 0xff
 800196c:	4091      	lsls	r1, r2
 800196e:	000a      	movs	r2, r1
 8001970:	43d2      	mvns	r2, r2
 8001972:	401a      	ands	r2, r3
 8001974:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	019b      	lsls	r3, r3, #6
 800197a:	22ff      	movs	r2, #255	@ 0xff
 800197c:	401a      	ands	r2, r3
 800197e:	1dfb      	adds	r3, r7, #7
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	0018      	movs	r0, r3
 8001984:	2303      	movs	r3, #3
 8001986:	4003      	ands	r3, r0
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800198c:	481f      	ldr	r0, [pc, #124]	@ (8001a0c <__NVIC_SetPriority+0xd4>)
 800198e:	1dfb      	adds	r3, r7, #7
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	b25b      	sxtb	r3, r3
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	430a      	orrs	r2, r1
 8001998:	33c0      	adds	r3, #192	@ 0xc0
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800199e:	e031      	b.n	8001a04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a10 <__NVIC_SetPriority+0xd8>)
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	0019      	movs	r1, r3
 80019a8:	230f      	movs	r3, #15
 80019aa:	400b      	ands	r3, r1
 80019ac:	3b08      	subs	r3, #8
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3306      	adds	r3, #6
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	18d3      	adds	r3, r2, r3
 80019b6:	3304      	adds	r3, #4
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	1dfa      	adds	r2, r7, #7
 80019bc:	7812      	ldrb	r2, [r2, #0]
 80019be:	0011      	movs	r1, r2
 80019c0:	2203      	movs	r2, #3
 80019c2:	400a      	ands	r2, r1
 80019c4:	00d2      	lsls	r2, r2, #3
 80019c6:	21ff      	movs	r1, #255	@ 0xff
 80019c8:	4091      	lsls	r1, r2
 80019ca:	000a      	movs	r2, r1
 80019cc:	43d2      	mvns	r2, r2
 80019ce:	401a      	ands	r2, r3
 80019d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	019b      	lsls	r3, r3, #6
 80019d6:	22ff      	movs	r2, #255	@ 0xff
 80019d8:	401a      	ands	r2, r3
 80019da:	1dfb      	adds	r3, r7, #7
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	0018      	movs	r0, r3
 80019e0:	2303      	movs	r3, #3
 80019e2:	4003      	ands	r3, r0
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019e8:	4809      	ldr	r0, [pc, #36]	@ (8001a10 <__NVIC_SetPriority+0xd8>)
 80019ea:	1dfb      	adds	r3, r7, #7
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	001c      	movs	r4, r3
 80019f0:	230f      	movs	r3, #15
 80019f2:	4023      	ands	r3, r4
 80019f4:	3b08      	subs	r3, #8
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	430a      	orrs	r2, r1
 80019fa:	3306      	adds	r3, #6
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	18c3      	adds	r3, r0, r3
 8001a00:	3304      	adds	r3, #4
 8001a02:	601a      	str	r2, [r3, #0]
}
 8001a04:	46c0      	nop			@ (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b003      	add	sp, #12
 8001a0a:	bd90      	pop	{r4, r7, pc}
 8001a0c:	e000e100 	.word	0xe000e100
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	1e5a      	subs	r2, r3, #1
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	045b      	lsls	r3, r3, #17
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d301      	bcc.n	8001a2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e010      	b.n	8001a4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <SysTick_Config+0x44>)
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	3a01      	subs	r2, #1
 8001a32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a34:	2301      	movs	r3, #1
 8001a36:	425b      	negs	r3, r3
 8001a38:	2103      	movs	r1, #3
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f7ff ff7c 	bl	8001938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <SysTick_Config+0x44>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <SysTick_Config+0x44>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b002      	add	sp, #8
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			@ (mov r8, r8)
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
 8001a66:	210f      	movs	r1, #15
 8001a68:	187b      	adds	r3, r7, r1
 8001a6a:	1c02      	adds	r2, r0, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b25b      	sxtb	r3, r3
 8001a76:	0011      	movs	r1, r2
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f7ff ff5d 	bl	8001938 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b004      	add	sp, #16
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	1dfb      	adds	r3, r7, #7
 8001a90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a92:	1dfb      	adds	r3, r7, #7
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff ff33 	bl	8001904 <__NVIC_EnableIRQ>
}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b002      	add	sp, #8
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff ffaf 	bl	8001a14 <SysTick_Config>
 8001ab6:	0003      	movs	r3, r0
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b002      	add	sp, #8
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ad6:	e14f      	b.n	8001d78 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2101      	movs	r1, #1
 8001ade:	697a      	ldr	r2, [r7, #20]
 8001ae0:	4091      	lsls	r1, r2
 8001ae2:	000a      	movs	r2, r1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d100      	bne.n	8001af0 <HAL_GPIO_Init+0x30>
 8001aee:	e140      	b.n	8001d72 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2203      	movs	r2, #3
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d005      	beq.n	8001b08 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2203      	movs	r2, #3
 8001b02:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d130      	bne.n	8001b6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	409a      	lsls	r2, r3
 8001b16:	0013      	movs	r3, r2
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	0013      	movs	r3, r2
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b3e:	2201      	movs	r2, #1
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	43da      	mvns	r2, r3
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	091b      	lsrs	r3, r3, #4
 8001b54:	2201      	movs	r2, #1
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2203      	movs	r2, #3
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d017      	beq.n	8001ba6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	409a      	lsls	r2, r3
 8001b84:	0013      	movs	r3, r2
 8001b86:	43da      	mvns	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	409a      	lsls	r2, r3
 8001b98:	0013      	movs	r3, r2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2203      	movs	r2, #3
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d123      	bne.n	8001bfa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	58d3      	ldr	r3, [r2, r3]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2107      	movs	r1, #7
 8001bde:	400b      	ands	r3, r1
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	409a      	lsls	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	0092      	lsls	r2, r2, #2
 8001bf6:	6939      	ldr	r1, [r7, #16]
 8001bf8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	409a      	lsls	r2, r3
 8001c08:	0013      	movs	r3, r2
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2203      	movs	r2, #3
 8001c18:	401a      	ands	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	0013      	movs	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	23c0      	movs	r3, #192	@ 0xc0
 8001c34:	029b      	lsls	r3, r3, #10
 8001c36:	4013      	ands	r3, r2
 8001c38:	d100      	bne.n	8001c3c <HAL_GPIO_Init+0x17c>
 8001c3a:	e09a      	b.n	8001d72 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3c:	4b54      	ldr	r3, [pc, #336]	@ (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c40:	4b53      	ldr	r3, [pc, #332]	@ (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001c42:	2101      	movs	r1, #1
 8001c44:	430a      	orrs	r2, r1
 8001c46:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c48:	4a52      	ldr	r2, [pc, #328]	@ (8001d94 <HAL_GPIO_Init+0x2d4>)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	589b      	ldr	r3, [r3, r2]
 8001c54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2203      	movs	r2, #3
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	409a      	lsls	r2, r3
 8001c62:	0013      	movs	r3, r2
 8001c64:	43da      	mvns	r2, r3
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	23a0      	movs	r3, #160	@ 0xa0
 8001c70:	05db      	lsls	r3, r3, #23
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d019      	beq.n	8001caa <HAL_GPIO_Init+0x1ea>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a47      	ldr	r2, [pc, #284]	@ (8001d98 <HAL_GPIO_Init+0x2d8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0x1e6>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a46      	ldr	r2, [pc, #280]	@ (8001d9c <HAL_GPIO_Init+0x2dc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00d      	beq.n	8001ca2 <HAL_GPIO_Init+0x1e2>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a45      	ldr	r2, [pc, #276]	@ (8001da0 <HAL_GPIO_Init+0x2e0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <HAL_GPIO_Init+0x1de>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a44      	ldr	r2, [pc, #272]	@ (8001da4 <HAL_GPIO_Init+0x2e4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_GPIO_Init+0x1da>
 8001c96:	2305      	movs	r3, #5
 8001c98:	e008      	b.n	8001cac <HAL_GPIO_Init+0x1ec>
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	e006      	b.n	8001cac <HAL_GPIO_Init+0x1ec>
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e004      	b.n	8001cac <HAL_GPIO_Init+0x1ec>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_Init+0x1ec>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_GPIO_Init+0x1ec>
 8001caa:	2300      	movs	r3, #0
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	2103      	movs	r1, #3
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	4093      	lsls	r3, r2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cbc:	4935      	ldr	r1, [pc, #212]	@ (8001d94 <HAL_GPIO_Init+0x2d4>)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cca:	4b37      	ldr	r3, [pc, #220]	@ (8001da8 <HAL_GPIO_Init+0x2e8>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	035b      	lsls	r3, r3, #13
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cee:	4b2e      	ldr	r3, [pc, #184]	@ (8001da8 <HAL_GPIO_Init+0x2e8>)
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8001da8 <HAL_GPIO_Init+0x2e8>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	43da      	mvns	r2, r3
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	039b      	lsls	r3, r3, #14
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d18:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <HAL_GPIO_Init+0x2e8>)
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001d1e:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <HAL_GPIO_Init+0x2e8>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43da      	mvns	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	2380      	movs	r3, #128	@ 0x80
 8001d34:	029b      	lsls	r3, r3, #10
 8001d36:	4013      	ands	r3, r2
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d42:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_GPIO_Init+0x2e8>)
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d48:	4b17      	ldr	r3, [pc, #92]	@ (8001da8 <HAL_GPIO_Init+0x2e8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	43da      	mvns	r2, r3
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	025b      	lsls	r3, r3, #9
 8001d60:	4013      	ands	r3, r2
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <HAL_GPIO_Init+0x2e8>)
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	3301      	adds	r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	40da      	lsrs	r2, r3
 8001d80:	1e13      	subs	r3, r2, #0
 8001d82:	d000      	beq.n	8001d86 <HAL_GPIO_Init+0x2c6>
 8001d84:	e6a8      	b.n	8001ad8 <HAL_GPIO_Init+0x18>
  }
}
 8001d86:	46c0      	nop			@ (mov r8, r8)
 8001d88:	46c0      	nop			@ (mov r8, r8)
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	b006      	add	sp, #24
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40010000 	.word	0x40010000
 8001d98:	50000400 	.word	0x50000400
 8001d9c:	50000800 	.word	0x50000800
 8001da0:	50000c00 	.word	0x50000c00
 8001da4:	50001c00 	.word	0x50001c00
 8001da8:	40010400 	.word	0x40010400

08001dac <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	000a      	movs	r2, r1
 8001db6:	1cbb      	adds	r3, r7, #2
 8001db8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	1cba      	adds	r2, r7, #2
 8001dc0:	8812      	ldrh	r2, [r2, #0]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d004      	beq.n	8001dd0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc6:	230f      	movs	r3, #15
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	e003      	b.n	8001dd8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001dd8:	230f      	movs	r3, #15
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b004      	add	sp, #16
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	0008      	movs	r0, r1
 8001df0:	0011      	movs	r1, r2
 8001df2:	1cbb      	adds	r3, r7, #2
 8001df4:	1c02      	adds	r2, r0, #0
 8001df6:	801a      	strh	r2, [r3, #0]
 8001df8:	1c7b      	adds	r3, r7, #1
 8001dfa:	1c0a      	adds	r2, r1, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dfe:	1c7b      	adds	r3, r7, #1
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d004      	beq.n	8001e10 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e06:	1cbb      	adds	r3, r7, #2
 8001e08:	881a      	ldrh	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e0e:	e003      	b.n	8001e18 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e10:	1cbb      	adds	r3, r7, #2
 8001e12:	881a      	ldrh	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e18:	46c0      	nop			@ (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b002      	add	sp, #8
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b08a      	sub	sp, #40	@ 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d102      	bne.n	8001e34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f000 fbaf 	bl	8002592 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e34:	4bcf      	ldr	r3, [pc, #828]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	220c      	movs	r2, #12
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e3e:	4bcd      	ldr	r3, [pc, #820]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	2380      	movs	r3, #128	@ 0x80
 8001e44:	025b      	lsls	r3, r3, #9
 8001e46:	4013      	ands	r3, r2
 8001e48:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	d100      	bne.n	8001e56 <HAL_RCC_OscConfig+0x36>
 8001e54:	e07e      	b.n	8001f54 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d007      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	2b0c      	cmp	r3, #12
 8001e60:	d112      	bne.n	8001e88 <HAL_RCC_OscConfig+0x68>
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	025b      	lsls	r3, r3, #9
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d10d      	bne.n	8001e88 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	4bc1      	ldr	r3, [pc, #772]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2380      	movs	r3, #128	@ 0x80
 8001e72:	029b      	lsls	r3, r3, #10
 8001e74:	4013      	ands	r3, r2
 8001e76:	d100      	bne.n	8001e7a <HAL_RCC_OscConfig+0x5a>
 8001e78:	e06b      	b.n	8001f52 <HAL_RCC_OscConfig+0x132>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d167      	bne.n	8001f52 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f000 fb85 	bl	8002592 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	025b      	lsls	r3, r3, #9
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x84>
 8001e94:	4bb7      	ldr	r3, [pc, #732]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4bb6      	ldr	r3, [pc, #728]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	0249      	lsls	r1, r1, #9
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e027      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	23a0      	movs	r3, #160	@ 0xa0
 8001eaa:	02db      	lsls	r3, r3, #11
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d10e      	bne.n	8001ece <HAL_RCC_OscConfig+0xae>
 8001eb0:	4bb0      	ldr	r3, [pc, #704]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4baf      	ldr	r3, [pc, #700]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001eb6:	2180      	movs	r1, #128	@ 0x80
 8001eb8:	02c9      	lsls	r1, r1, #11
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	4bad      	ldr	r3, [pc, #692]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4bac      	ldr	r3, [pc, #688]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001ec4:	2180      	movs	r1, #128	@ 0x80
 8001ec6:	0249      	lsls	r1, r1, #9
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e012      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001ece:	4ba9      	ldr	r3, [pc, #676]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4ba8      	ldr	r3, [pc, #672]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001ed4:	49a8      	ldr	r1, [pc, #672]	@ (8002178 <HAL_RCC_OscConfig+0x358>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	4ba6      	ldr	r3, [pc, #664]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	2380      	movs	r3, #128	@ 0x80
 8001ee0:	025b      	lsls	r3, r3, #9
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4ba2      	ldr	r3, [pc, #648]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4ba1      	ldr	r3, [pc, #644]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001eee:	49a3      	ldr	r1, [pc, #652]	@ (800217c <HAL_RCC_OscConfig+0x35c>)
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d015      	beq.n	8001f28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fcd4 	bl	80018a8 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f04:	e009      	b.n	8001f1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f06:	f7ff fccf 	bl	80018a8 <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b64      	cmp	r3, #100	@ 0x64
 8001f12:	d902      	bls.n	8001f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	f000 fb3c 	bl	8002592 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f1a:	4b96      	ldr	r3, [pc, #600]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	029b      	lsls	r3, r3, #10
 8001f22:	4013      	ands	r3, r2
 8001f24:	d0ef      	beq.n	8001f06 <HAL_RCC_OscConfig+0xe6>
 8001f26:	e015      	b.n	8001f54 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fcbe 	bl	80018a8 <HAL_GetTick>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f32:	f7ff fcb9 	bl	80018a8 <HAL_GetTick>
 8001f36:	0002      	movs	r2, r0
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b64      	cmp	r3, #100	@ 0x64
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e326      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f44:	4b8b      	ldr	r3, [pc, #556]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	029b      	lsls	r3, r3, #10
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d1f0      	bne.n	8001f32 <HAL_RCC_OscConfig+0x112>
 8001f50:	e000      	b.n	8001f54 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f52:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d100      	bne.n	8001f60 <HAL_RCC_OscConfig+0x140>
 8001f5e:	e08b      	b.n	8002078 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d13e      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x1d0>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d13b      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001f78:	4b7e      	ldr	r3, [pc, #504]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d004      	beq.n	8001f8c <HAL_RCC_OscConfig+0x16c>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e302      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b79      	ldr	r3, [pc, #484]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a7b      	ldr	r2, [pc, #492]	@ (8002180 <HAL_RCC_OscConfig+0x360>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	0019      	movs	r1, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	021a      	lsls	r2, r3, #8
 8001f9c:	4b75      	ldr	r3, [pc, #468]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001fa2:	4b74      	ldr	r3, [pc, #464]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2209      	movs	r2, #9
 8001fa8:	4393      	bics	r3, r2
 8001faa:	0019      	movs	r1, r3
 8001fac:	4b71      	ldr	r3, [pc, #452]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fb4:	f000 fcc4 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 8001fb8:	0001      	movs	r1, r0
 8001fba:	4b6e      	ldr	r3, [pc, #440]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	4a6f      	ldr	r2, [pc, #444]	@ (8002184 <HAL_RCC_OscConfig+0x364>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	000a      	movs	r2, r1
 8001fca:	40da      	lsrs	r2, r3
 8001fcc:	4b6e      	ldr	r3, [pc, #440]	@ (8002188 <HAL_RCC_OscConfig+0x368>)
 8001fce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001fd0:	4b6e      	ldr	r3, [pc, #440]	@ (800218c <HAL_RCC_OscConfig+0x36c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2513      	movs	r5, #19
 8001fd6:	197c      	adds	r4, r7, r5
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff fc1f 	bl	800181c <HAL_InitTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001fe2:	197b      	adds	r3, r7, r5
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d046      	beq.n	8002078 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001fea:	197b      	adds	r3, r7, r5
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	e2d0      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d027      	beq.n	8002046 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ff6:	4b5f      	ldr	r3, [pc, #380]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2209      	movs	r2, #9
 8001ffc:	4393      	bics	r3, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	4b5c      	ldr	r3, [pc, #368]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	430a      	orrs	r2, r1
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fc4e 	bl	80018a8 <HAL_GetTick>
 800200c:	0003      	movs	r3, r0
 800200e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002012:	f7ff fc49 	bl	80018a8 <HAL_GetTick>
 8002016:	0002      	movs	r2, r0
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e2b6      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002024:	4b53      	ldr	r3, [pc, #332]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2204      	movs	r2, #4
 800202a:	4013      	ands	r3, r2
 800202c:	d0f1      	beq.n	8002012 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b51      	ldr	r3, [pc, #324]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4a53      	ldr	r2, [pc, #332]	@ (8002180 <HAL_RCC_OscConfig+0x360>)
 8002034:	4013      	ands	r3, r2
 8002036:	0019      	movs	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	021a      	lsls	r2, r3, #8
 800203e:	4b4d      	ldr	r3, [pc, #308]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8002040:	430a      	orrs	r2, r1
 8002042:	605a      	str	r2, [r3, #4]
 8002044:	e018      	b.n	8002078 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002046:	4b4b      	ldr	r3, [pc, #300]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b4a      	ldr	r3, [pc, #296]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 800204c:	2101      	movs	r1, #1
 800204e:	438a      	bics	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7ff fc29 	bl	80018a8 <HAL_GetTick>
 8002056:	0003      	movs	r3, r0
 8002058:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205c:	f7ff fc24 	bl	80018a8 <HAL_GetTick>
 8002060:	0002      	movs	r2, r0
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e291      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800206e:	4b41      	ldr	r3, [pc, #260]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2204      	movs	r2, #4
 8002074:	4013      	ands	r3, r2
 8002076:	d1f1      	bne.n	800205c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2210      	movs	r2, #16
 800207e:	4013      	ands	r3, r2
 8002080:	d100      	bne.n	8002084 <HAL_RCC_OscConfig+0x264>
 8002082:	e0a1      	b.n	80021c8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d140      	bne.n	800210c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800208a:	4b3a      	ldr	r3, [pc, #232]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	2380      	movs	r3, #128	@ 0x80
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4013      	ands	r3, r2
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_OscConfig+0x282>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e277      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a2:	4b34      	ldr	r3, [pc, #208]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4a3a      	ldr	r2, [pc, #232]	@ (8002190 <HAL_RCC_OscConfig+0x370>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020b0:	4b30      	ldr	r3, [pc, #192]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	0a19      	lsrs	r1, r3, #8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	061a      	lsls	r2, r3, #24
 80020c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 80020c6:	430a      	orrs	r2, r1
 80020c8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	0b5b      	lsrs	r3, r3, #13
 80020d0:	3301      	adds	r3, #1
 80020d2:	2280      	movs	r2, #128	@ 0x80
 80020d4:	0212      	lsls	r2, r2, #8
 80020d6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80020d8:	4b26      	ldr	r3, [pc, #152]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	210f      	movs	r1, #15
 80020e0:	400b      	ands	r3, r1
 80020e2:	4928      	ldr	r1, [pc, #160]	@ (8002184 <HAL_RCC_OscConfig+0x364>)
 80020e4:	5ccb      	ldrb	r3, [r1, r3]
 80020e6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020e8:	4b27      	ldr	r3, [pc, #156]	@ (8002188 <HAL_RCC_OscConfig+0x368>)
 80020ea:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80020ec:	4b27      	ldr	r3, [pc, #156]	@ (800218c <HAL_RCC_OscConfig+0x36c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2513      	movs	r5, #19
 80020f2:	197c      	adds	r4, r7, r5
 80020f4:	0018      	movs	r0, r3
 80020f6:	f7ff fb91 	bl	800181c <HAL_InitTick>
 80020fa:	0003      	movs	r3, r0
 80020fc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80020fe:	197b      	adds	r3, r7, r5
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d060      	beq.n	80021c8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002106:	197b      	adds	r3, r7, r5
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	e242      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d03f      	beq.n	8002194 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002114:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 800211a:	2180      	movs	r1, #128	@ 0x80
 800211c:	0049      	lsls	r1, r1, #1
 800211e:	430a      	orrs	r2, r1
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7ff fbc1 	bl	80018a8 <HAL_GetTick>
 8002126:	0003      	movs	r3, r0
 8002128:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800212c:	f7ff fbbc 	bl	80018a8 <HAL_GetTick>
 8002130:	0002      	movs	r2, r0
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e229      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800213e:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800214a:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4a10      	ldr	r2, [pc, #64]	@ (8002190 <HAL_RCC_OscConfig+0x370>)
 8002150:	4013      	ands	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 800215a:	430a      	orrs	r2, r1
 800215c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800215e:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	0a19      	lsrs	r1, r3, #8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	061a      	lsls	r2, r3, #24
 800216c:	4b01      	ldr	r3, [pc, #4]	@ (8002174 <HAL_RCC_OscConfig+0x354>)
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	e029      	b.n	80021c8 <HAL_RCC_OscConfig+0x3a8>
 8002174:	40021000 	.word	0x40021000
 8002178:	fffeffff 	.word	0xfffeffff
 800217c:	fffbffff 	.word	0xfffbffff
 8002180:	ffffe0ff 	.word	0xffffe0ff
 8002184:	08003d0c 	.word	0x08003d0c
 8002188:	20000000 	.word	0x20000000
 800218c:	20000004 	.word	0x20000004
 8002190:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002194:	4bbd      	ldr	r3, [pc, #756]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4bbc      	ldr	r3, [pc, #752]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 800219a:	49bd      	ldr	r1, [pc, #756]	@ (8002490 <HAL_RCC_OscConfig+0x670>)
 800219c:	400a      	ands	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff fb82 	bl	80018a8 <HAL_GetTick>
 80021a4:	0003      	movs	r3, r0
 80021a6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021aa:	f7ff fb7d 	bl	80018a8 <HAL_GetTick>
 80021ae:	0002      	movs	r2, r0
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1ea      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021bc:	4bb3      	ldr	r3, [pc, #716]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	2380      	movs	r3, #128	@ 0x80
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	d1f0      	bne.n	80021aa <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2208      	movs	r2, #8
 80021ce:	4013      	ands	r3, r2
 80021d0:	d036      	beq.n	8002240 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d019      	beq.n	800220e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021da:	4bac      	ldr	r3, [pc, #688]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80021dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021de:	4bab      	ldr	r3, [pc, #684]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	430a      	orrs	r2, r1
 80021e4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7ff fb5f 	bl	80018a8 <HAL_GetTick>
 80021ea:	0003      	movs	r3, r0
 80021ec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f0:	f7ff fb5a 	bl	80018a8 <HAL_GetTick>
 80021f4:	0002      	movs	r2, r0
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1c7      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002202:	4ba2      	ldr	r3, [pc, #648]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002206:	2202      	movs	r2, #2
 8002208:	4013      	ands	r3, r2
 800220a:	d0f1      	beq.n	80021f0 <HAL_RCC_OscConfig+0x3d0>
 800220c:	e018      	b.n	8002240 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220e:	4b9f      	ldr	r3, [pc, #636]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002210:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002212:	4b9e      	ldr	r3, [pc, #632]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002214:	2101      	movs	r1, #1
 8002216:	438a      	bics	r2, r1
 8002218:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221a:	f7ff fb45 	bl	80018a8 <HAL_GetTick>
 800221e:	0003      	movs	r3, r0
 8002220:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002224:	f7ff fb40 	bl	80018a8 <HAL_GetTick>
 8002228:	0002      	movs	r2, r0
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1ad      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002236:	4b95      	ldr	r3, [pc, #596]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800223a:	2202      	movs	r2, #2
 800223c:	4013      	ands	r3, r2
 800223e:	d1f1      	bne.n	8002224 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2204      	movs	r2, #4
 8002246:	4013      	ands	r3, r2
 8002248:	d100      	bne.n	800224c <HAL_RCC_OscConfig+0x42c>
 800224a:	e0ae      	b.n	80023aa <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224c:	2027      	movs	r0, #39	@ 0x27
 800224e:	183b      	adds	r3, r7, r0
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002254:	4b8d      	ldr	r3, [pc, #564]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	055b      	lsls	r3, r3, #21
 800225c:	4013      	ands	r3, r2
 800225e:	d109      	bne.n	8002274 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002260:	4b8a      	ldr	r3, [pc, #552]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002264:	4b89      	ldr	r3, [pc, #548]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002266:	2180      	movs	r1, #128	@ 0x80
 8002268:	0549      	lsls	r1, r1, #21
 800226a:	430a      	orrs	r2, r1
 800226c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800226e:	183b      	adds	r3, r7, r0
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002274:	4b87      	ldr	r3, [pc, #540]	@ (8002494 <HAL_RCC_OscConfig+0x674>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4013      	ands	r3, r2
 800227e:	d11a      	bne.n	80022b6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002280:	4b84      	ldr	r3, [pc, #528]	@ (8002494 <HAL_RCC_OscConfig+0x674>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b83      	ldr	r3, [pc, #524]	@ (8002494 <HAL_RCC_OscConfig+0x674>)
 8002286:	2180      	movs	r1, #128	@ 0x80
 8002288:	0049      	lsls	r1, r1, #1
 800228a:	430a      	orrs	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800228e:	f7ff fb0b 	bl	80018a8 <HAL_GetTick>
 8002292:	0003      	movs	r3, r0
 8002294:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002298:	f7ff fb06 	bl	80018a8 <HAL_GetTick>
 800229c:	0002      	movs	r2, r0
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	@ 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e173      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002494 <HAL_RCC_OscConfig+0x674>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	2380      	movs	r3, #128	@ 0x80
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4013      	ands	r3, r2
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	2380      	movs	r3, #128	@ 0x80
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	429a      	cmp	r2, r3
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_OscConfig+0x4b2>
 80022c2:	4b72      	ldr	r3, [pc, #456]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80022c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022c6:	4b71      	ldr	r3, [pc, #452]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80022c8:	2180      	movs	r1, #128	@ 0x80
 80022ca:	0049      	lsls	r1, r1, #1
 80022cc:	430a      	orrs	r2, r1
 80022ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80022d0:	e031      	b.n	8002336 <HAL_RCC_OscConfig+0x516>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x4d4>
 80022da:	4b6c      	ldr	r3, [pc, #432]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80022dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022de:	4b6b      	ldr	r3, [pc, #428]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80022e0:	496b      	ldr	r1, [pc, #428]	@ (8002490 <HAL_RCC_OscConfig+0x670>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80022e6:	4b69      	ldr	r3, [pc, #420]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80022e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022ea:	4b68      	ldr	r3, [pc, #416]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80022ec:	496a      	ldr	r1, [pc, #424]	@ (8002498 <HAL_RCC_OscConfig+0x678>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80022f2:	e020      	b.n	8002336 <HAL_RCC_OscConfig+0x516>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	23a0      	movs	r3, #160	@ 0xa0
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d10e      	bne.n	800231e <HAL_RCC_OscConfig+0x4fe>
 8002300:	4b62      	ldr	r3, [pc, #392]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002302:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002304:	4b61      	ldr	r3, [pc, #388]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002306:	2180      	movs	r1, #128	@ 0x80
 8002308:	00c9      	lsls	r1, r1, #3
 800230a:	430a      	orrs	r2, r1
 800230c:	651a      	str	r2, [r3, #80]	@ 0x50
 800230e:	4b5f      	ldr	r3, [pc, #380]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002310:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002312:	4b5e      	ldr	r3, [pc, #376]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002314:	2180      	movs	r1, #128	@ 0x80
 8002316:	0049      	lsls	r1, r1, #1
 8002318:	430a      	orrs	r2, r1
 800231a:	651a      	str	r2, [r3, #80]	@ 0x50
 800231c:	e00b      	b.n	8002336 <HAL_RCC_OscConfig+0x516>
 800231e:	4b5b      	ldr	r3, [pc, #364]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002320:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002322:	4b5a      	ldr	r3, [pc, #360]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002324:	495a      	ldr	r1, [pc, #360]	@ (8002490 <HAL_RCC_OscConfig+0x670>)
 8002326:	400a      	ands	r2, r1
 8002328:	651a      	str	r2, [r3, #80]	@ 0x50
 800232a:	4b58      	ldr	r3, [pc, #352]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 800232c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800232e:	4b57      	ldr	r3, [pc, #348]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002330:	4959      	ldr	r1, [pc, #356]	@ (8002498 <HAL_RCC_OscConfig+0x678>)
 8002332:	400a      	ands	r2, r1
 8002334:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d015      	beq.n	800236a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7ff fab3 	bl	80018a8 <HAL_GetTick>
 8002342:	0003      	movs	r3, r0
 8002344:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002346:	e009      	b.n	800235c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7ff faae 	bl	80018a8 <HAL_GetTick>
 800234c:	0002      	movs	r2, r0
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	4a52      	ldr	r2, [pc, #328]	@ (800249c <HAL_RCC_OscConfig+0x67c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e11a      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800235c:	4b4b      	ldr	r3, [pc, #300]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 800235e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002360:	2380      	movs	r3, #128	@ 0x80
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4013      	ands	r3, r2
 8002366:	d0ef      	beq.n	8002348 <HAL_RCC_OscConfig+0x528>
 8002368:	e014      	b.n	8002394 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7ff fa9d 	bl	80018a8 <HAL_GetTick>
 800236e:	0003      	movs	r3, r0
 8002370:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002372:	e009      	b.n	8002388 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002374:	f7ff fa98 	bl	80018a8 <HAL_GetTick>
 8002378:	0002      	movs	r2, r0
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	4a47      	ldr	r2, [pc, #284]	@ (800249c <HAL_RCC_OscConfig+0x67c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e104      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002388:	4b40      	ldr	r3, [pc, #256]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 800238a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4013      	ands	r3, r2
 8002392:	d1ef      	bne.n	8002374 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002394:	2327      	movs	r3, #39	@ 0x27
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4b3b      	ldr	r3, [pc, #236]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80023a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023a2:	4b3a      	ldr	r3, [pc, #232]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80023a4:	493e      	ldr	r1, [pc, #248]	@ (80024a0 <HAL_RCC_OscConfig+0x680>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2220      	movs	r2, #32
 80023b0:	4013      	ands	r3, r2
 80023b2:	d049      	beq.n	8002448 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d026      	beq.n	800240a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80023bc:	4b33      	ldr	r3, [pc, #204]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	4b32      	ldr	r3, [pc, #200]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80023c2:	2101      	movs	r1, #1
 80023c4:	430a      	orrs	r2, r1
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	4b30      	ldr	r3, [pc, #192]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80023ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023cc:	4b2f      	ldr	r3, [pc, #188]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 80023ce:	2101      	movs	r1, #1
 80023d0:	430a      	orrs	r2, r1
 80023d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80023d4:	4b33      	ldr	r3, [pc, #204]	@ (80024a4 <HAL_RCC_OscConfig+0x684>)
 80023d6:	6a1a      	ldr	r2, [r3, #32]
 80023d8:	4b32      	ldr	r3, [pc, #200]	@ (80024a4 <HAL_RCC_OscConfig+0x684>)
 80023da:	2180      	movs	r1, #128	@ 0x80
 80023dc:	0189      	lsls	r1, r1, #6
 80023de:	430a      	orrs	r2, r1
 80023e0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7ff fa61 	bl	80018a8 <HAL_GetTick>
 80023e6:	0003      	movs	r3, r0
 80023e8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ec:	f7ff fa5c 	bl	80018a8 <HAL_GetTick>
 80023f0:	0002      	movs	r2, r0
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e0c9      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023fe:	4b23      	ldr	r3, [pc, #140]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2202      	movs	r2, #2
 8002404:	4013      	ands	r3, r2
 8002406:	d0f1      	beq.n	80023ec <HAL_RCC_OscConfig+0x5cc>
 8002408:	e01e      	b.n	8002448 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800240a:	4b20      	ldr	r3, [pc, #128]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	4b1f      	ldr	r3, [pc, #124]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002410:	2101      	movs	r1, #1
 8002412:	438a      	bics	r2, r1
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <HAL_RCC_OscConfig+0x684>)
 8002418:	6a1a      	ldr	r2, [r3, #32]
 800241a:	4b22      	ldr	r3, [pc, #136]	@ (80024a4 <HAL_RCC_OscConfig+0x684>)
 800241c:	4922      	ldr	r1, [pc, #136]	@ (80024a8 <HAL_RCC_OscConfig+0x688>)
 800241e:	400a      	ands	r2, r1
 8002420:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7ff fa41 	bl	80018a8 <HAL_GetTick>
 8002426:	0003      	movs	r3, r0
 8002428:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800242c:	f7ff fa3c 	bl	80018a8 <HAL_GetTick>
 8002430:	0002      	movs	r2, r0
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e0a9      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800243e:	4b13      	ldr	r3, [pc, #76]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	2202      	movs	r2, #2
 8002444:	4013      	ands	r3, r2
 8002446:	d1f1      	bne.n	800242c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	2b00      	cmp	r3, #0
 800244e:	d100      	bne.n	8002452 <HAL_RCC_OscConfig+0x632>
 8002450:	e09e      	b.n	8002590 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d100      	bne.n	800245a <HAL_RCC_OscConfig+0x63a>
 8002458:	e077      	b.n	800254a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245e:	2b02      	cmp	r3, #2
 8002460:	d158      	bne.n	8002514 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002462:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b09      	ldr	r3, [pc, #36]	@ (800248c <HAL_RCC_OscConfig+0x66c>)
 8002468:	4910      	ldr	r1, [pc, #64]	@ (80024ac <HAL_RCC_OscConfig+0x68c>)
 800246a:	400a      	ands	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7ff fa1b 	bl	80018a8 <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002476:	e01b      	b.n	80024b0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff fa16 	bl	80018a8 <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d914      	bls.n	80024b0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e083      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
 800248a:	46c0      	nop			@ (mov r8, r8)
 800248c:	40021000 	.word	0x40021000
 8002490:	fffffeff 	.word	0xfffffeff
 8002494:	40007000 	.word	0x40007000
 8002498:	fffffbff 	.word	0xfffffbff
 800249c:	00001388 	.word	0x00001388
 80024a0:	efffffff 	.word	0xefffffff
 80024a4:	40010000 	.word	0x40010000
 80024a8:	ffffdfff 	.word	0xffffdfff
 80024ac:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80024b0:	4b3a      	ldr	r3, [pc, #232]	@ (800259c <HAL_RCC_OscConfig+0x77c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	@ 0x80
 80024b6:	049b      	lsls	r3, r3, #18
 80024b8:	4013      	ands	r3, r2
 80024ba:	d1dd      	bne.n	8002478 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024bc:	4b37      	ldr	r3, [pc, #220]	@ (800259c <HAL_RCC_OscConfig+0x77c>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a37      	ldr	r2, [pc, #220]	@ (80025a0 <HAL_RCC_OscConfig+0x780>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d4:	431a      	orrs	r2, r3
 80024d6:	4b31      	ldr	r3, [pc, #196]	@ (800259c <HAL_RCC_OscConfig+0x77c>)
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024dc:	4b2f      	ldr	r3, [pc, #188]	@ (800259c <HAL_RCC_OscConfig+0x77c>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b2e      	ldr	r3, [pc, #184]	@ (800259c <HAL_RCC_OscConfig+0x77c>)
 80024e2:	2180      	movs	r1, #128	@ 0x80
 80024e4:	0449      	lsls	r1, r1, #17
 80024e6:	430a      	orrs	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7ff f9dd 	bl	80018a8 <HAL_GetTick>
 80024ee:	0003      	movs	r3, r0
 80024f0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f4:	f7ff f9d8 	bl	80018a8 <HAL_GetTick>
 80024f8:	0002      	movs	r2, r0
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e045      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002506:	4b25      	ldr	r3, [pc, #148]	@ (800259c <HAL_RCC_OscConfig+0x77c>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	@ 0x80
 800250c:	049b      	lsls	r3, r3, #18
 800250e:	4013      	ands	r3, r2
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x6d4>
 8002512:	e03d      	b.n	8002590 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002514:	4b21      	ldr	r3, [pc, #132]	@ (800259c <HAL_RCC_OscConfig+0x77c>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b20      	ldr	r3, [pc, #128]	@ (800259c <HAL_RCC_OscConfig+0x77c>)
 800251a:	4922      	ldr	r1, [pc, #136]	@ (80025a4 <HAL_RCC_OscConfig+0x784>)
 800251c:	400a      	ands	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff f9c2 	bl	80018a8 <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252a:	f7ff f9bd 	bl	80018a8 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e02a      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800253c:	4b17      	ldr	r3, [pc, #92]	@ (800259c <HAL_RCC_OscConfig+0x77c>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	049b      	lsls	r3, r3, #18
 8002544:	4013      	ands	r3, r2
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x70a>
 8002548:	e022      	b.n	8002590 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e01d      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002556:	4b11      	ldr	r3, [pc, #68]	@ (800259c <HAL_RCC_OscConfig+0x77c>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	025b      	lsls	r3, r3, #9
 8002562:	401a      	ands	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002568:	429a      	cmp	r2, r3
 800256a:	d10f      	bne.n	800258c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	23f0      	movs	r3, #240	@ 0xf0
 8002570:	039b      	lsls	r3, r3, #14
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d107      	bne.n	800258c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	23c0      	movs	r3, #192	@ 0xc0
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	401a      	ands	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b00a      	add	sp, #40	@ 0x28
 8002598:	bdb0      	pop	{r4, r5, r7, pc}
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	40021000 	.word	0x40021000
 80025a0:	ff02ffff 	.word	0xff02ffff
 80025a4:	feffffff 	.word	0xfeffffff

080025a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e128      	b.n	800280e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025bc:	4b96      	ldr	r3, [pc, #600]	@ (8002818 <HAL_RCC_ClockConfig+0x270>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2201      	movs	r2, #1
 80025c2:	4013      	ands	r3, r2
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d91e      	bls.n	8002608 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ca:	4b93      	ldr	r3, [pc, #588]	@ (8002818 <HAL_RCC_ClockConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2201      	movs	r2, #1
 80025d0:	4393      	bics	r3, r2
 80025d2:	0019      	movs	r1, r3
 80025d4:	4b90      	ldr	r3, [pc, #576]	@ (8002818 <HAL_RCC_ClockConfig+0x270>)
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025dc:	f7ff f964 	bl	80018a8 <HAL_GetTick>
 80025e0:	0003      	movs	r3, r0
 80025e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e4:	e009      	b.n	80025fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e6:	f7ff f95f 	bl	80018a8 <HAL_GetTick>
 80025ea:	0002      	movs	r2, r0
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	4a8a      	ldr	r2, [pc, #552]	@ (800281c <HAL_RCC_ClockConfig+0x274>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e109      	b.n	800280e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b87      	ldr	r3, [pc, #540]	@ (8002818 <HAL_RCC_ClockConfig+0x270>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2201      	movs	r2, #1
 8002600:	4013      	ands	r3, r2
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d1ee      	bne.n	80025e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2202      	movs	r2, #2
 800260e:	4013      	ands	r3, r2
 8002610:	d009      	beq.n	8002626 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002612:	4b83      	ldr	r3, [pc, #524]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	22f0      	movs	r2, #240	@ 0xf0
 8002618:	4393      	bics	r3, r2
 800261a:	0019      	movs	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	4b7f      	ldr	r3, [pc, #508]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 8002622:	430a      	orrs	r2, r1
 8002624:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2201      	movs	r2, #1
 800262c:	4013      	ands	r3, r2
 800262e:	d100      	bne.n	8002632 <HAL_RCC_ClockConfig+0x8a>
 8002630:	e089      	b.n	8002746 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800263a:	4b79      	ldr	r3, [pc, #484]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	2380      	movs	r3, #128	@ 0x80
 8002640:	029b      	lsls	r3, r3, #10
 8002642:	4013      	ands	r3, r2
 8002644:	d120      	bne.n	8002688 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e0e1      	b.n	800280e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b03      	cmp	r3, #3
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002652:	4b73      	ldr	r3, [pc, #460]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	049b      	lsls	r3, r3, #18
 800265a:	4013      	ands	r3, r2
 800265c:	d114      	bne.n	8002688 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0d5      	b.n	800280e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d106      	bne.n	8002678 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800266a:	4b6d      	ldr	r3, [pc, #436]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2204      	movs	r2, #4
 8002670:	4013      	ands	r3, r2
 8002672:	d109      	bne.n	8002688 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e0ca      	b.n	800280e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002678:	4b69      	ldr	r3, [pc, #420]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	@ 0x80
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4013      	ands	r3, r2
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0c2      	b.n	800280e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002688:	4b65      	ldr	r3, [pc, #404]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2203      	movs	r2, #3
 800268e:	4393      	bics	r3, r2
 8002690:	0019      	movs	r1, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	4b62      	ldr	r3, [pc, #392]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 8002698:	430a      	orrs	r2, r1
 800269a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800269c:	f7ff f904 	bl	80018a8 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d111      	bne.n	80026d0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026ac:	e009      	b.n	80026c2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ae:	f7ff f8fb 	bl	80018a8 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	4a58      	ldr	r2, [pc, #352]	@ (800281c <HAL_RCC_ClockConfig+0x274>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0a5      	b.n	800280e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026c2:	4b57      	ldr	r3, [pc, #348]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	220c      	movs	r2, #12
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d1ef      	bne.n	80026ae <HAL_RCC_ClockConfig+0x106>
 80026ce:	e03a      	b.n	8002746 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d111      	bne.n	80026fc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d8:	e009      	b.n	80026ee <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026da:	f7ff f8e5 	bl	80018a8 <HAL_GetTick>
 80026de:	0002      	movs	r2, r0
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	4a4d      	ldr	r2, [pc, #308]	@ (800281c <HAL_RCC_ClockConfig+0x274>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e08f      	b.n	800280e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	220c      	movs	r2, #12
 80026f4:	4013      	ands	r3, r2
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	d1ef      	bne.n	80026da <HAL_RCC_ClockConfig+0x132>
 80026fa:	e024      	b.n	8002746 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d11b      	bne.n	800273c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002704:	e009      	b.n	800271a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002706:	f7ff f8cf 	bl	80018a8 <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	4a42      	ldr	r2, [pc, #264]	@ (800281c <HAL_RCC_ClockConfig+0x274>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e079      	b.n	800280e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800271a:	4b41      	ldr	r3, [pc, #260]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	220c      	movs	r2, #12
 8002720:	4013      	ands	r3, r2
 8002722:	2b04      	cmp	r3, #4
 8002724:	d1ef      	bne.n	8002706 <HAL_RCC_ClockConfig+0x15e>
 8002726:	e00e      	b.n	8002746 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7ff f8be 	bl	80018a8 <HAL_GetTick>
 800272c:	0002      	movs	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	4a3a      	ldr	r2, [pc, #232]	@ (800281c <HAL_RCC_ClockConfig+0x274>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e068      	b.n	800280e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800273c:	4b38      	ldr	r3, [pc, #224]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	220c      	movs	r2, #12
 8002742:	4013      	ands	r3, r2
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002746:	4b34      	ldr	r3, [pc, #208]	@ (8002818 <HAL_RCC_ClockConfig+0x270>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2201      	movs	r2, #1
 800274c:	4013      	ands	r3, r2
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d21e      	bcs.n	8002792 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002754:	4b30      	ldr	r3, [pc, #192]	@ (8002818 <HAL_RCC_ClockConfig+0x270>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2201      	movs	r2, #1
 800275a:	4393      	bics	r3, r2
 800275c:	0019      	movs	r1, r3
 800275e:	4b2e      	ldr	r3, [pc, #184]	@ (8002818 <HAL_RCC_ClockConfig+0x270>)
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002766:	f7ff f89f 	bl	80018a8 <HAL_GetTick>
 800276a:	0003      	movs	r3, r0
 800276c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	e009      	b.n	8002784 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002770:	f7ff f89a 	bl	80018a8 <HAL_GetTick>
 8002774:	0002      	movs	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	4a28      	ldr	r2, [pc, #160]	@ (800281c <HAL_RCC_ClockConfig+0x274>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e044      	b.n	800280e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002784:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <HAL_RCC_ClockConfig+0x270>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2201      	movs	r2, #1
 800278a:	4013      	ands	r3, r2
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d1ee      	bne.n	8002770 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2204      	movs	r2, #4
 8002798:	4013      	ands	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800279c:	4b20      	ldr	r3, [pc, #128]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a20      	ldr	r2, [pc, #128]	@ (8002824 <HAL_RCC_ClockConfig+0x27c>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 80027ac:	430a      	orrs	r2, r1
 80027ae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2208      	movs	r2, #8
 80027b6:	4013      	ands	r3, r2
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027ba:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	4a1a      	ldr	r2, [pc, #104]	@ (8002828 <HAL_RCC_ClockConfig+0x280>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	00da      	lsls	r2, r3, #3
 80027ca:	4b15      	ldr	r3, [pc, #84]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 80027cc:	430a      	orrs	r2, r1
 80027ce:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027d0:	f000 f8b6 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80027d4:	0001      	movs	r1, r0
 80027d6:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <HAL_RCC_ClockConfig+0x278>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	220f      	movs	r2, #15
 80027de:	4013      	ands	r3, r2
 80027e0:	4a12      	ldr	r2, [pc, #72]	@ (800282c <HAL_RCC_ClockConfig+0x284>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	000a      	movs	r2, r1
 80027e6:	40da      	lsrs	r2, r3
 80027e8:	4b11      	ldr	r3, [pc, #68]	@ (8002830 <HAL_RCC_ClockConfig+0x288>)
 80027ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027ec:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <HAL_RCC_ClockConfig+0x28c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	250b      	movs	r5, #11
 80027f2:	197c      	adds	r4, r7, r5
 80027f4:	0018      	movs	r0, r3
 80027f6:	f7ff f811 	bl	800181c <HAL_InitTick>
 80027fa:	0003      	movs	r3, r0
 80027fc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80027fe:	197b      	adds	r3, r7, r5
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002806:	197b      	adds	r3, r7, r5
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	e000      	b.n	800280e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	0018      	movs	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	b004      	add	sp, #16
 8002814:	bdb0      	pop	{r4, r5, r7, pc}
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	40022000 	.word	0x40022000
 800281c:	00001388 	.word	0x00001388
 8002820:	40021000 	.word	0x40021000
 8002824:	fffff8ff 	.word	0xfffff8ff
 8002828:	ffffc7ff 	.word	0xffffc7ff
 800282c:	08003d0c 	.word	0x08003d0c
 8002830:	20000000 	.word	0x20000000
 8002834:	20000004 	.word	0x20000004

08002838 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002838:	b590      	push	{r4, r7, lr}
 800283a:	b08d      	sub	sp, #52	@ 0x34
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0};
 8002844:	241c      	movs	r4, #28
 8002846:	193b      	adds	r3, r7, r4
 8002848:	0018      	movs	r0, r3
 800284a:	2314      	movs	r3, #20
 800284c:	001a      	movs	r2, r3
 800284e:	2100      	movs	r1, #0
 8002850:	f001 fa04 	bl	8003c5c <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002854:	0020      	movs	r0, r4
 8002856:	183b      	adds	r3, r7, r0
 8002858:	2202      	movs	r2, #2
 800285a:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800285c:	183b      	adds	r3, r7, r0
 800285e:	2202      	movs	r2, #2
 8002860:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 8002862:	183b      	adds	r3, r7, r0
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  if(RCC_MCOx == RCC_MCO1)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d11a      	bne.n	80028a4 <HAL_RCC_MCOConfig+0x6c>
  {
    gpio.Pin       = MCO1_PIN;
 800286e:	183b      	adds	r3, r7, r0
 8002870:	2280      	movs	r2, #128	@ 0x80
 8002872:	0052      	lsls	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 8002876:	183b      	adds	r3, r7, r0
 8002878:	2200      	movs	r2, #0
 800287a:	611a      	str	r2, [r3, #16]

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800287c:	4b2d      	ldr	r3, [pc, #180]	@ (8002934 <HAL_RCC_MCOConfig+0xfc>)
 800287e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002880:	4b2c      	ldr	r3, [pc, #176]	@ (8002934 <HAL_RCC_MCOConfig+0xfc>)
 8002882:	2101      	movs	r1, #1
 8002884:	430a      	orrs	r2, r1
 8002886:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002888:	4b2a      	ldr	r3, [pc, #168]	@ (8002934 <HAL_RCC_MCOConfig+0xfc>)
 800288a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288c:	2201      	movs	r2, #1
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	69bb      	ldr	r3, [r7, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002894:	183a      	adds	r2, r7, r0
 8002896:	23a0      	movs	r3, #160	@ 0xa0
 8002898:	05db      	lsls	r3, r3, #23
 800289a:	0011      	movs	r1, r2
 800289c:	0018      	movs	r0, r3
 800289e:	f7ff f90f 	bl	8001ac0 <HAL_GPIO_Init>
 80028a2:	e038      	b.n	8002916 <HAL_RCC_MCOConfig+0xde>
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d11a      	bne.n	80028e0 <HAL_RCC_MCOConfig+0xa8>
  {
    gpio.Pin       = MCO3_PIN;
 80028aa:	201c      	movs	r0, #28
 80028ac:	183b      	adds	r3, r7, r0
 80028ae:	2280      	movs	r2, #128	@ 0x80
 80028b0:	0192      	lsls	r2, r2, #6
 80028b2:	601a      	str	r2, [r3, #0]
    gpio.Alternate = MCO3_GPIO_AF;
 80028b4:	183b      	adds	r3, r7, r0
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]

    /* MCO3 Clock Enable */
    MCO3_CLK_ENABLE();
 80028ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002934 <HAL_RCC_MCOConfig+0xfc>)
 80028bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028be:	4b1d      	ldr	r3, [pc, #116]	@ (8002934 <HAL_RCC_MCOConfig+0xfc>)
 80028c0:	2102      	movs	r1, #2
 80028c2:	430a      	orrs	r2, r1
 80028c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002934 <HAL_RCC_MCOConfig+0xfc>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ca:	2202      	movs	r2, #2
 80028cc:	4013      	ands	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697b      	ldr	r3, [r7, #20]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 80028d2:	183b      	adds	r3, r7, r0
 80028d4:	4a18      	ldr	r2, [pc, #96]	@ (8002938 <HAL_RCC_MCOConfig+0x100>)
 80028d6:	0019      	movs	r1, r3
 80028d8:	0010      	movs	r0, r2
 80028da:	f7ff f8f1 	bl	8001ac0 <HAL_GPIO_Init>
 80028de:	e01a      	b.n	8002916 <HAL_RCC_MCOConfig+0xde>
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 80028e0:	201c      	movs	r0, #28
 80028e2:	183b      	adds	r3, r7, r0
 80028e4:	2280      	movs	r2, #128	@ 0x80
 80028e6:	0092      	lsls	r2, r2, #2
 80028e8:	601a      	str	r2, [r3, #0]
    gpio.Alternate = GPIO_AF0_MCO;
 80028ea:	183b      	adds	r3, r7, r0
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 80028f0:	4b10      	ldr	r3, [pc, #64]	@ (8002934 <HAL_RCC_MCOConfig+0xfc>)
 80028f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <HAL_RCC_MCOConfig+0xfc>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	430a      	orrs	r2, r1
 80028fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002934 <HAL_RCC_MCOConfig+0xfc>)
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	2201      	movs	r2, #1
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	693b      	ldr	r3, [r7, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8002908:	183a      	adds	r2, r7, r0
 800290a:	23a0      	movs	r3, #160	@ 0xa0
 800290c:	05db      	lsls	r3, r3, #23
 800290e:	0011      	movs	r1, r2
 8002910:	0018      	movs	r0, r3
 8002912:	f7ff f8d5 	bl	8001ac0 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002916:	4b07      	ldr	r3, [pc, #28]	@ (8002934 <HAL_RCC_MCOConfig+0xfc>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	4a08      	ldr	r2, [pc, #32]	@ (800293c <HAL_RCC_MCOConfig+0x104>)
 800291c:	4013      	ands	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	431a      	orrs	r2, r3
 8002926:	4b03      	ldr	r3, [pc, #12]	@ (8002934 <HAL_RCC_MCOConfig+0xfc>)
 8002928:	430a      	orrs	r2, r1
 800292a:	60da      	str	r2, [r3, #12]
}
 800292c:	46c0      	nop			@ (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b00d      	add	sp, #52	@ 0x34
 8002932:	bd90      	pop	{r4, r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	50000400 	.word	0x50000400
 800293c:	80ffffff 	.word	0x80ffffff

08002940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002946:	4b3c      	ldr	r3, [pc, #240]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	220c      	movs	r2, #12
 8002950:	4013      	ands	r3, r2
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d013      	beq.n	800297e <HAL_RCC_GetSysClockFreq+0x3e>
 8002956:	d85c      	bhi.n	8002a12 <HAL_RCC_GetSysClockFreq+0xd2>
 8002958:	2b04      	cmp	r3, #4
 800295a:	d002      	beq.n	8002962 <HAL_RCC_GetSysClockFreq+0x22>
 800295c:	2b08      	cmp	r3, #8
 800295e:	d00b      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x38>
 8002960:	e057      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002962:	4b35      	ldr	r3, [pc, #212]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2210      	movs	r2, #16
 8002968:	4013      	ands	r3, r2
 800296a:	d002      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800296c:	4b33      	ldr	r3, [pc, #204]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xfc>)
 800296e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002970:	e05d      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002972:	4b33      	ldr	r3, [pc, #204]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x100>)
 8002974:	613b      	str	r3, [r7, #16]
      break;
 8002976:	e05a      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002978:	4b32      	ldr	r3, [pc, #200]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x104>)
 800297a:	613b      	str	r3, [r7, #16]
      break;
 800297c:	e057      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	0c9b      	lsrs	r3, r3, #18
 8002982:	220f      	movs	r2, #15
 8002984:	4013      	ands	r3, r2
 8002986:	4a30      	ldr	r2, [pc, #192]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002988:	5cd3      	ldrb	r3, [r2, r3]
 800298a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	0d9b      	lsrs	r3, r3, #22
 8002990:	2203      	movs	r2, #3
 8002992:	4013      	ands	r3, r2
 8002994:	3301      	adds	r3, #1
 8002996:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002998:	4b27      	ldr	r3, [pc, #156]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	2380      	movs	r3, #128	@ 0x80
 800299e:	025b      	lsls	r3, r3, #9
 80029a0:	4013      	ands	r3, r2
 80029a2:	d00f      	beq.n	80029c4 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	000a      	movs	r2, r1
 80029a8:	0152      	lsls	r2, r2, #5
 80029aa:	1a52      	subs	r2, r2, r1
 80029ac:	0193      	lsls	r3, r2, #6
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	185b      	adds	r3, r3, r1
 80029b4:	025b      	lsls	r3, r3, #9
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f7fd fba5 	bl	8000108 <__udivsi3>
 80029be:	0003      	movs	r3, r0
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e023      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2210      	movs	r2, #16
 80029ca:	4013      	ands	r3, r2
 80029cc:	d00f      	beq.n	80029ee <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	000a      	movs	r2, r1
 80029d2:	0152      	lsls	r2, r2, #5
 80029d4:	1a52      	subs	r2, r2, r1
 80029d6:	0193      	lsls	r3, r2, #6
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	185b      	adds	r3, r3, r1
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7fd fb90 	bl	8000108 <__udivsi3>
 80029e8:	0003      	movs	r3, r0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e00e      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	000a      	movs	r2, r1
 80029f2:	0152      	lsls	r2, r2, #5
 80029f4:	1a52      	subs	r2, r2, r1
 80029f6:	0193      	lsls	r3, r2, #6
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	185b      	adds	r3, r3, r1
 80029fe:	029b      	lsls	r3, r3, #10
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f7fd fb80 	bl	8000108 <__udivsi3>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	613b      	str	r3, [r7, #16]
      break;
 8002a10:	e00d      	b.n	8002a2e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a12:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	0b5b      	lsrs	r3, r3, #13
 8002a18:	2207      	movs	r2, #7
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	2280      	movs	r2, #128	@ 0x80
 8002a24:	0212      	lsls	r2, r2, #8
 8002a26:	409a      	lsls	r2, r3
 8002a28:	0013      	movs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
      break;
 8002a2c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a2e:	693b      	ldr	r3, [r7, #16]
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b006      	add	sp, #24
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	003d0900 	.word	0x003d0900
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	007a1200 	.word	0x007a1200
 8002a48:	08003d1c 	.word	0x08003d1c

08002a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e032      	b.n	8002ac4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2239      	movs	r2, #57	@ 0x39
 8002a62:	5c9b      	ldrb	r3, [r3, r2]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d107      	bne.n	8002a7a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2238      	movs	r2, #56	@ 0x38
 8002a6e:	2100      	movs	r1, #0
 8002a70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f7fe fdb7 	bl	80015e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2239      	movs	r2, #57	@ 0x39
 8002a7e:	2102      	movs	r1, #2
 8002a80:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	f000 fd53 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	223e      	movs	r2, #62	@ 0x3e
 8002a96:	2101      	movs	r1, #1
 8002a98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	223a      	movs	r2, #58	@ 0x3a
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	5499      	strb	r1, [r3, r2]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	223b      	movs	r2, #59	@ 0x3b
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	5499      	strb	r1, [r3, r2]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	223c      	movs	r2, #60	@ 0x3c
 8002aae:	2101      	movs	r1, #1
 8002ab0:	5499      	strb	r1, [r3, r2]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	223d      	movs	r2, #61	@ 0x3d
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2239      	movs	r2, #57	@ 0x39
 8002abe:	2101      	movs	r1, #1
 8002ac0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2239      	movs	r2, #57	@ 0x39
 8002ad8:	5c9b      	ldrb	r3, [r3, r2]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d001      	beq.n	8002ae4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e02e      	b.n	8002b42 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2239      	movs	r2, #57	@ 0x39
 8002ae8:	2102      	movs	r1, #2
 8002aea:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2380      	movs	r3, #128	@ 0x80
 8002af2:	05db      	lsls	r3, r3, #23
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d009      	beq.n	8002b0c <HAL_TIM_Base_Start+0x40>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a13      	ldr	r2, [pc, #76]	@ (8002b4c <HAL_TIM_Base_Start+0x80>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d004      	beq.n	8002b0c <HAL_TIM_Base_Start+0x40>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a12      	ldr	r2, [pc, #72]	@ (8002b50 <HAL_TIM_Base_Start+0x84>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d111      	bne.n	8002b30 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2207      	movs	r2, #7
 8002b14:	4013      	ands	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d010      	beq.n	8002b40 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2101      	movs	r1, #1
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2e:	e007      	b.n	8002b40 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b004      	add	sp, #16
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			@ (mov r8, r8)
 8002b4c:	40010800 	.word	0x40010800
 8002b50:	40011400 	.word	0x40011400

08002b54 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a0a      	ldr	r2, [pc, #40]	@ (8002b8c <HAL_TIM_Base_Stop+0x38>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	d107      	bne.n	8002b78 <HAL_TIM_Base_Stop+0x24>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2101      	movs	r1, #1
 8002b74:	438a      	bics	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2239      	movs	r2, #57	@ 0x39
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b002      	add	sp, #8
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	46c0      	nop			@ (mov r8, r8)
 8002b8c:	00001111 	.word	0x00001111

08002b90 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e032      	b.n	8002c08 <HAL_TIM_OC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2239      	movs	r2, #57	@ 0x39
 8002ba6:	5c9b      	ldrb	r3, [r3, r2]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d107      	bne.n	8002bbe <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2238      	movs	r2, #56	@ 0x38
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 f829 	bl	8002c10 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2239      	movs	r2, #57	@ 0x39
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	0019      	movs	r1, r3
 8002bd0:	0010      	movs	r0, r2
 8002bd2:	f000 fcb1 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	223e      	movs	r2, #62	@ 0x3e
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	223a      	movs	r2, #58	@ 0x3a
 8002be2:	2101      	movs	r1, #1
 8002be4:	5499      	strb	r1, [r3, r2]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	223b      	movs	r2, #59	@ 0x3b
 8002bea:	2101      	movs	r1, #1
 8002bec:	5499      	strb	r1, [r3, r2]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	223c      	movs	r2, #60	@ 0x3c
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	5499      	strb	r1, [r3, r2]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	223d      	movs	r2, #61	@ 0x3d
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2239      	movs	r2, #57	@ 0x39
 8002c02:	2101      	movs	r1, #1
 8002c04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	0018      	movs	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b002      	add	sp, #8
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002c18:	46c0      	nop			@ (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d108      	bne.n	8002c42 <HAL_TIM_OC_Start+0x22>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	223a      	movs	r2, #58	@ 0x3a
 8002c34:	5c9b      	ldrb	r3, [r3, r2]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	1e5a      	subs	r2, r3, #1
 8002c3c:	4193      	sbcs	r3, r2
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	e01f      	b.n	8002c82 <HAL_TIM_OC_Start+0x62>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d108      	bne.n	8002c5a <HAL_TIM_OC_Start+0x3a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	223b      	movs	r2, #59	@ 0x3b
 8002c4c:	5c9b      	ldrb	r3, [r3, r2]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	1e5a      	subs	r2, r3, #1
 8002c54:	4193      	sbcs	r3, r2
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	e013      	b.n	8002c82 <HAL_TIM_OC_Start+0x62>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d108      	bne.n	8002c72 <HAL_TIM_OC_Start+0x52>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	223c      	movs	r2, #60	@ 0x3c
 8002c64:	5c9b      	ldrb	r3, [r3, r2]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	1e5a      	subs	r2, r3, #1
 8002c6c:	4193      	sbcs	r3, r2
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	e007      	b.n	8002c82 <HAL_TIM_OC_Start+0x62>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	223d      	movs	r2, #61	@ 0x3d
 8002c76:	5c9b      	ldrb	r3, [r3, r2]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	1e5a      	subs	r2, r3, #1
 8002c7e:	4193      	sbcs	r3, r2
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_TIM_OC_Start+0x6a>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e04d      	b.n	8002d26 <HAL_TIM_OC_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_OC_Start+0x7a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	223a      	movs	r2, #58	@ 0x3a
 8002c94:	2102      	movs	r1, #2
 8002c96:	5499      	strb	r1, [r3, r2]
 8002c98:	e013      	b.n	8002cc2 <HAL_TIM_OC_Start+0xa2>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d104      	bne.n	8002caa <HAL_TIM_OC_Start+0x8a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	223b      	movs	r2, #59	@ 0x3b
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	5499      	strb	r1, [r3, r2]
 8002ca8:	e00b      	b.n	8002cc2 <HAL_TIM_OC_Start+0xa2>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d104      	bne.n	8002cba <HAL_TIM_OC_Start+0x9a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	223c      	movs	r2, #60	@ 0x3c
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	5499      	strb	r1, [r3, r2]
 8002cb8:	e003      	b.n	8002cc2 <HAL_TIM_OC_Start+0xa2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	223d      	movs	r2, #61	@ 0x3d
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6839      	ldr	r1, [r7, #0]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 ff4a 	bl	8003b64 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	05db      	lsls	r3, r3, #23
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d009      	beq.n	8002cf0 <HAL_TIM_OC_Start+0xd0>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a13      	ldr	r2, [pc, #76]	@ (8002d30 <HAL_TIM_OC_Start+0x110>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_TIM_OC_Start+0xd0>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a12      	ldr	r2, [pc, #72]	@ (8002d34 <HAL_TIM_OC_Start+0x114>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d111      	bne.n	8002d14 <HAL_TIM_OC_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2207      	movs	r2, #7
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d010      	beq.n	8002d24 <HAL_TIM_OC_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d12:	e007      	b.n	8002d24 <HAL_TIM_OC_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2101      	movs	r1, #1
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b004      	add	sp, #16
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	40010800 	.word	0x40010800
 8002d34:	40011400 	.word	0x40011400

08002d38 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e032      	b.n	8002db0 <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2239      	movs	r2, #57	@ 0x39
 8002d4e:	5c9b      	ldrb	r3, [r3, r2]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d107      	bne.n	8002d66 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2238      	movs	r2, #56	@ 0x38
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	0018      	movs	r0, r3
 8002d62:	f000 f829 	bl	8002db8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2239      	movs	r2, #57	@ 0x39
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3304      	adds	r3, #4
 8002d76:	0019      	movs	r1, r3
 8002d78:	0010      	movs	r0, r2
 8002d7a:	f000 fbdd 	bl	8003538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	223e      	movs	r2, #62	@ 0x3e
 8002d82:	2101      	movs	r1, #1
 8002d84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	223a      	movs	r2, #58	@ 0x3a
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	5499      	strb	r1, [r3, r2]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	223b      	movs	r2, #59	@ 0x3b
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	223c      	movs	r2, #60	@ 0x3c
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	5499      	strb	r1, [r3, r2]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	223d      	movs	r2, #61	@ 0x3d
 8002da2:	2101      	movs	r1, #1
 8002da4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2239      	movs	r2, #57	@ 0x39
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	b002      	add	sp, #8
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002dc0:	46c0      	nop			@ (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd2:	230f      	movs	r3, #15
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_IC_Start_IT+0x22>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	223a      	movs	r2, #58	@ 0x3a
 8002de4:	5c9b      	ldrb	r3, [r3, r2]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	e013      	b.n	8002e12 <HAL_TIM_IC_Start_IT+0x4a>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_IC_Start_IT+0x32>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	223b      	movs	r2, #59	@ 0x3b
 8002df4:	5c9b      	ldrb	r3, [r3, r2]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	e00b      	b.n	8002e12 <HAL_TIM_IC_Start_IT+0x4a>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIM_IC_Start_IT+0x42>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	223c      	movs	r2, #60	@ 0x3c
 8002e04:	5c9b      	ldrb	r3, [r3, r2]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	e003      	b.n	8002e12 <HAL_TIM_IC_Start_IT+0x4a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	223d      	movs	r2, #61	@ 0x3d
 8002e0e:	5c9b      	ldrb	r3, [r3, r2]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	210e      	movs	r1, #14
 8002e14:	187a      	adds	r2, r7, r1
 8002e16:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d001      	beq.n	8002e24 <HAL_TIM_IC_Start_IT+0x5c>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e090      	b.n	8002f46 <HAL_TIM_IC_Start_IT+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <HAL_TIM_IC_Start_IT+0x6c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	223a      	movs	r2, #58	@ 0x3a
 8002e2e:	2102      	movs	r1, #2
 8002e30:	5499      	strb	r1, [r3, r2]
 8002e32:	e013      	b.n	8002e5c <HAL_TIM_IC_Start_IT+0x94>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d104      	bne.n	8002e44 <HAL_TIM_IC_Start_IT+0x7c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	223b      	movs	r2, #59	@ 0x3b
 8002e3e:	2102      	movs	r1, #2
 8002e40:	5499      	strb	r1, [r3, r2]
 8002e42:	e00b      	b.n	8002e5c <HAL_TIM_IC_Start_IT+0x94>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d104      	bne.n	8002e54 <HAL_TIM_IC_Start_IT+0x8c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	223c      	movs	r2, #60	@ 0x3c
 8002e4e:	2102      	movs	r1, #2
 8002e50:	5499      	strb	r1, [r3, r2]
 8002e52:	e003      	b.n	8002e5c <HAL_TIM_IC_Start_IT+0x94>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	223d      	movs	r2, #61	@ 0x3d
 8002e58:	2102      	movs	r1, #2
 8002e5a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	d02a      	beq.n	8002eb8 <HAL_TIM_IC_Start_IT+0xf0>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b0c      	cmp	r3, #12
 8002e66:	d830      	bhi.n	8002eca <HAL_TIM_IC_Start_IT+0x102>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d01b      	beq.n	8002ea6 <HAL_TIM_IC_Start_IT+0xde>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d82a      	bhi.n	8002eca <HAL_TIM_IC_Start_IT+0x102>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_TIM_IC_Start_IT+0xba>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d009      	beq.n	8002e94 <HAL_TIM_IC_Start_IT+0xcc>
 8002e80:	e023      	b.n	8002eca <HAL_TIM_IC_Start_IT+0x102>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	60da      	str	r2, [r3, #12]
      break;
 8002e92:	e01f      	b.n	8002ed4 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2104      	movs	r1, #4
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	60da      	str	r2, [r3, #12]
      break;
 8002ea4:	e016      	b.n	8002ed4 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2108      	movs	r1, #8
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	60da      	str	r2, [r3, #12]
      break;
 8002eb6:	e00d      	b.n	8002ed4 <HAL_TIM_IC_Start_IT+0x10c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2110      	movs	r1, #16
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	60da      	str	r2, [r3, #12]
      break;
 8002ec8:	e004      	b.n	8002ed4 <HAL_TIM_IC_Start_IT+0x10c>
    }

    default:
      status = HAL_ERROR;
 8002eca:	230f      	movs	r3, #15
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
      break;
 8002ed2:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002ed4:	230f      	movs	r3, #15
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d130      	bne.n	8002f40 <HAL_TIM_IC_Start_IT+0x178>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6839      	ldr	r1, [r7, #0]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 fe3c 	bl	8003b64 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	2380      	movs	r3, #128	@ 0x80
 8002ef2:	05db      	lsls	r3, r3, #23
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d009      	beq.n	8002f0c <HAL_TIM_IC_Start_IT+0x144>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a14      	ldr	r2, [pc, #80]	@ (8002f50 <HAL_TIM_IC_Start_IT+0x188>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d004      	beq.n	8002f0c <HAL_TIM_IC_Start_IT+0x144>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a13      	ldr	r2, [pc, #76]	@ (8002f54 <HAL_TIM_IC_Start_IT+0x18c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d111      	bne.n	8002f30 <HAL_TIM_IC_Start_IT+0x168>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2207      	movs	r2, #7
 8002f14:	4013      	ands	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d010      	beq.n	8002f40 <HAL_TIM_IC_Start_IT+0x178>
      {
        __HAL_TIM_ENABLE(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2101      	movs	r1, #1
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2e:	e007      	b.n	8002f40 <HAL_TIM_IC_Start_IT+0x178>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f40:	230f      	movs	r3, #15
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	781b      	ldrb	r3, [r3, #0]
}
 8002f46:	0018      	movs	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b004      	add	sp, #16
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	40010800 	.word	0x40010800
 8002f54:	40011400 	.word	0x40011400

08002f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2202      	movs	r2, #2
 8002f74:	4013      	ands	r3, r2
 8002f76:	d021      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d01d      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2203      	movs	r2, #3
 8002f86:	4252      	negs	r2, r2
 8002f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2203      	movs	r2, #3
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f7fd fe5e 	bl	8000c60 <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e007      	b.n	8002fb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 faad 	bl	8003508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 fab1 	bl	8003518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d022      	beq.n	800300a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2204      	movs	r2, #4
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d01e      	beq.n	800300a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2205      	movs	r2, #5
 8002fd2:	4252      	negs	r2, r2
 8002fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	23c0      	movs	r3, #192	@ 0xc0
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	0018      	movs	r0, r3
 8002fee:	f7fd fe37 	bl	8000c60 <HAL_TIM_IC_CaptureCallback>
 8002ff2:	e007      	b.n	8003004 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 fa86 	bl	8003508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f000 fa8a 	bl	8003518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2208      	movs	r2, #8
 800300e:	4013      	ands	r3, r2
 8003010:	d021      	beq.n	8003056 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2208      	movs	r2, #8
 8003016:	4013      	ands	r3, r2
 8003018:	d01d      	beq.n	8003056 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2209      	movs	r2, #9
 8003020:	4252      	negs	r2, r2
 8003022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2204      	movs	r2, #4
 8003028:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	2203      	movs	r2, #3
 8003032:	4013      	ands	r3, r2
 8003034:	d004      	beq.n	8003040 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f7fd fe11 	bl	8000c60 <HAL_TIM_IC_CaptureCallback>
 800303e:	e007      	b.n	8003050 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 fa60 	bl	8003508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	0018      	movs	r0, r3
 800304c:	f000 fa64 	bl	8003518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2210      	movs	r2, #16
 800305a:	4013      	ands	r3, r2
 800305c:	d022      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2210      	movs	r2, #16
 8003062:	4013      	ands	r3, r2
 8003064:	d01e      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2211      	movs	r2, #17
 800306c:	4252      	negs	r2, r2
 800306e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2208      	movs	r2, #8
 8003074:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	23c0      	movs	r3, #192	@ 0xc0
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4013      	ands	r3, r2
 8003082:	d004      	beq.n	800308e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	0018      	movs	r0, r3
 8003088:	f7fd fdea 	bl	8000c60 <HAL_TIM_IC_CaptureCallback>
 800308c:	e007      	b.n	800309e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0018      	movs	r0, r3
 8003092:	f000 fa39 	bl	8003508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0018      	movs	r0, r3
 800309a:	f000 fa3d 	bl	8003518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2201      	movs	r2, #1
 80030a8:	4013      	ands	r3, r2
 80030aa:	d00c      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2201      	movs	r2, #1
 80030b0:	4013      	ands	r3, r2
 80030b2:	d008      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2202      	movs	r2, #2
 80030ba:	4252      	negs	r2, r2
 80030bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	0018      	movs	r0, r3
 80030c2:	f000 fa19 	bl	80034f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2240      	movs	r2, #64	@ 0x40
 80030ca:	4013      	ands	r3, r2
 80030cc:	d00c      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2240      	movs	r2, #64	@ 0x40
 80030d2:	4013      	ands	r3, r2
 80030d4:	d008      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2241      	movs	r2, #65	@ 0x41
 80030dc:	4252      	negs	r2, r2
 80030de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	0018      	movs	r0, r3
 80030e4:	f000 fa20 	bl	8003528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030e8:	46c0      	nop			@ (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b004      	add	sp, #16
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030fc:	2317      	movs	r3, #23
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2238      	movs	r2, #56	@ 0x38
 8003108:	5c9b      	ldrb	r3, [r3, r2]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_TIM_OC_ConfigChannel+0x22>
 800310e:	2302      	movs	r3, #2
 8003110:	e042      	b.n	8003198 <HAL_TIM_OC_ConfigChannel+0xa8>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2238      	movs	r2, #56	@ 0x38
 8003116:	2101      	movs	r1, #1
 8003118:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b0c      	cmp	r3, #12
 800311e:	d027      	beq.n	8003170 <HAL_TIM_OC_ConfigChannel+0x80>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b0c      	cmp	r3, #12
 8003124:	d82c      	bhi.n	8003180 <HAL_TIM_OC_ConfigChannel+0x90>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d019      	beq.n	8003160 <HAL_TIM_OC_ConfigChannel+0x70>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b08      	cmp	r3, #8
 8003130:	d826      	bhi.n	8003180 <HAL_TIM_OC_ConfigChannel+0x90>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_TIM_OC_ConfigChannel+0x50>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b04      	cmp	r3, #4
 800313c:	d008      	beq.n	8003150 <HAL_TIM_OC_ConfigChannel+0x60>
 800313e:	e01f      	b.n	8003180 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	0011      	movs	r1, r2
 8003148:	0018      	movs	r0, r3
 800314a:	f000 fa4f 	bl	80035ec <TIM_OC1_SetConfig>
      break;
 800314e:	e01c      	b.n	800318a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	0011      	movs	r1, r2
 8003158:	0018      	movs	r0, r3
 800315a:	f000 fa83 	bl	8003664 <TIM_OC2_SetConfig>
      break;
 800315e:	e014      	b.n	800318a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	0011      	movs	r1, r2
 8003168:	0018      	movs	r0, r3
 800316a:	f000 fabd 	bl	80036e8 <TIM_OC3_SetConfig>
      break;
 800316e:	e00c      	b.n	800318a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	0011      	movs	r1, r2
 8003178:	0018      	movs	r0, r3
 800317a:	f000 faf5 	bl	8003768 <TIM_OC4_SetConfig>
      break;
 800317e:	e004      	b.n	800318a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8003180:	2317      	movs	r3, #23
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
      break;
 8003188:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2238      	movs	r2, #56	@ 0x38
 800318e:	2100      	movs	r1, #0
 8003190:	5499      	strb	r1, [r3, r2]

  return status;
 8003192:	2317      	movs	r3, #23
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	781b      	ldrb	r3, [r3, #0]
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b006      	add	sp, #24
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ac:	2317      	movs	r3, #23
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2238      	movs	r2, #56	@ 0x38
 80031b8:	5c9b      	ldrb	r3, [r3, r2]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_TIM_IC_ConfigChannel+0x22>
 80031be:	2302      	movs	r3, #2
 80031c0:	e08c      	b.n	80032dc <HAL_TIM_IC_ConfigChannel+0x13c>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2238      	movs	r2, #56	@ 0x38
 80031c6:	2101      	movs	r1, #1
 80031c8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80031e0:	f000 fb08 	bl	80037f4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	210c      	movs	r1, #12
 80031f0:	438a      	bics	r2, r1
 80031f2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6999      	ldr	r1, [r3, #24]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	619a      	str	r2, [r3, #24]
 8003206:	e062      	b.n	80032ce <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b04      	cmp	r3, #4
 800320c:	d11c      	bne.n	8003248 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800321e:	f000 fb6d 	bl	80038fc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	492d      	ldr	r1, [pc, #180]	@ (80032e4 <HAL_TIM_IC_ConfigChannel+0x144>)
 800322e:	400a      	ands	r2, r1
 8003230:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6999      	ldr	r1, [r3, #24]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	021a      	lsls	r2, r3, #8
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	619a      	str	r2, [r3, #24]
 8003246:	e042      	b.n	80032ce <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b08      	cmp	r3, #8
 800324c:	d11b      	bne.n	8003286 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800325e:	f000 fbc1 	bl	80039e4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69da      	ldr	r2, [r3, #28]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	210c      	movs	r1, #12
 800326e:	438a      	bics	r2, r1
 8003270:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69d9      	ldr	r1, [r3, #28]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	61da      	str	r2, [r3, #28]
 8003284:	e023      	b.n	80032ce <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d11c      	bne.n	80032c6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800329c:	f000 fbe2 	bl	8003a64 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	490e      	ldr	r1, [pc, #56]	@ (80032e4 <HAL_TIM_IC_ConfigChannel+0x144>)
 80032ac:	400a      	ands	r2, r1
 80032ae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69d9      	ldr	r1, [r3, #28]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	021a      	lsls	r2, r3, #8
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	61da      	str	r2, [r3, #28]
 80032c4:	e003      	b.n	80032ce <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 80032c6:	2317      	movs	r3, #23
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2238      	movs	r2, #56	@ 0x38
 80032d2:	2100      	movs	r1, #0
 80032d4:	5499      	strb	r1, [r3, r2]

  return status;
 80032d6:	2317      	movs	r3, #23
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	781b      	ldrb	r3, [r3, #0]
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	b006      	add	sp, #24
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	fffff3ff 	.word	0xfffff3ff

080032e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032f2:	230f      	movs	r3, #15
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2238      	movs	r2, #56	@ 0x38
 80032fe:	5c9b      	ldrb	r3, [r3, r2]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_TIM_ConfigClockSource+0x20>
 8003304:	2302      	movs	r3, #2
 8003306:	e0bc      	b.n	8003482 <HAL_TIM_ConfigClockSource+0x19a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2238      	movs	r2, #56	@ 0x38
 800330c:	2101      	movs	r1, #1
 800330e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2239      	movs	r2, #57	@ 0x39
 8003314:	2102      	movs	r1, #2
 8003316:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2277      	movs	r2, #119	@ 0x77
 8003324:	4393      	bics	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4a58      	ldr	r2, [pc, #352]	@ (800348c <HAL_TIM_ConfigClockSource+0x1a4>)
 800332c:	4013      	ands	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2280      	movs	r2, #128	@ 0x80
 800333e:	0192      	lsls	r2, r2, #6
 8003340:	4293      	cmp	r3, r2
 8003342:	d040      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0xde>
 8003344:	2280      	movs	r2, #128	@ 0x80
 8003346:	0192      	lsls	r2, r2, #6
 8003348:	4293      	cmp	r3, r2
 800334a:	d900      	bls.n	800334e <HAL_TIM_ConfigClockSource+0x66>
 800334c:	e088      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x178>
 800334e:	2280      	movs	r2, #128	@ 0x80
 8003350:	0152      	lsls	r2, r2, #5
 8003352:	4293      	cmp	r3, r2
 8003354:	d100      	bne.n	8003358 <HAL_TIM_ConfigClockSource+0x70>
 8003356:	e088      	b.n	800346a <HAL_TIM_ConfigClockSource+0x182>
 8003358:	2280      	movs	r2, #128	@ 0x80
 800335a:	0152      	lsls	r2, r2, #5
 800335c:	4293      	cmp	r3, r2
 800335e:	d900      	bls.n	8003362 <HAL_TIM_ConfigClockSource+0x7a>
 8003360:	e07e      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x178>
 8003362:	2b70      	cmp	r3, #112	@ 0x70
 8003364:	d018      	beq.n	8003398 <HAL_TIM_ConfigClockSource+0xb0>
 8003366:	d900      	bls.n	800336a <HAL_TIM_ConfigClockSource+0x82>
 8003368:	e07a      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x178>
 800336a:	2b60      	cmp	r3, #96	@ 0x60
 800336c:	d04f      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x126>
 800336e:	d900      	bls.n	8003372 <HAL_TIM_ConfigClockSource+0x8a>
 8003370:	e076      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x178>
 8003372:	2b50      	cmp	r3, #80	@ 0x50
 8003374:	d03b      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x106>
 8003376:	d900      	bls.n	800337a <HAL_TIM_ConfigClockSource+0x92>
 8003378:	e072      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x178>
 800337a:	2b40      	cmp	r3, #64	@ 0x40
 800337c:	d057      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x146>
 800337e:	d900      	bls.n	8003382 <HAL_TIM_ConfigClockSource+0x9a>
 8003380:	e06e      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x178>
 8003382:	2b30      	cmp	r3, #48	@ 0x30
 8003384:	d063      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x166>
 8003386:	d86b      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x178>
 8003388:	2b20      	cmp	r3, #32
 800338a:	d060      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x166>
 800338c:	d868      	bhi.n	8003460 <HAL_TIM_ConfigClockSource+0x178>
 800338e:	2b00      	cmp	r3, #0
 8003390:	d05d      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x166>
 8003392:	2b10      	cmp	r3, #16
 8003394:	d05b      	beq.n	800344e <HAL_TIM_ConfigClockSource+0x166>
 8003396:	e063      	b.n	8003460 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033a8:	f000 fbbc 	bl	8003b24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2277      	movs	r2, #119	@ 0x77
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	609a      	str	r2, [r3, #8]
      break;
 80033c4:	e052      	b.n	800346c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033d6:	f000 fba5 	bl	8003b24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2180      	movs	r1, #128	@ 0x80
 80033e6:	01c9      	lsls	r1, r1, #7
 80033e8:	430a      	orrs	r2, r1
 80033ea:	609a      	str	r2, [r3, #8]
      break;
 80033ec:	e03e      	b.n	800346c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	001a      	movs	r2, r3
 80033fc:	f000 fa50 	bl	80038a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2150      	movs	r1, #80	@ 0x50
 8003406:	0018      	movs	r0, r3
 8003408:	f000 fb72 	bl	8003af0 <TIM_ITRx_SetConfig>
      break;
 800340c:	e02e      	b.n	800346c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800341a:	001a      	movs	r2, r3
 800341c:	f000 fab0 	bl	8003980 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2160      	movs	r1, #96	@ 0x60
 8003426:	0018      	movs	r0, r3
 8003428:	f000 fb62 	bl	8003af0 <TIM_ITRx_SetConfig>
      break;
 800342c:	e01e      	b.n	800346c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800343a:	001a      	movs	r2, r3
 800343c:	f000 fa30 	bl	80038a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2140      	movs	r1, #64	@ 0x40
 8003446:	0018      	movs	r0, r3
 8003448:	f000 fb52 	bl	8003af0 <TIM_ITRx_SetConfig>
      break;
 800344c:	e00e      	b.n	800346c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	0019      	movs	r1, r3
 8003458:	0010      	movs	r0, r2
 800345a:	f000 fb49 	bl	8003af0 <TIM_ITRx_SetConfig>
      break;
 800345e:	e005      	b.n	800346c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003460:	230f      	movs	r3, #15
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	2201      	movs	r2, #1
 8003466:	701a      	strb	r2, [r3, #0]
      break;
 8003468:	e000      	b.n	800346c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800346a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2239      	movs	r2, #57	@ 0x39
 8003470:	2101      	movs	r1, #1
 8003472:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2238      	movs	r2, #56	@ 0x38
 8003478:	2100      	movs	r1, #0
 800347a:	5499      	strb	r1, [r3, r2]

  return status;
 800347c:	230f      	movs	r3, #15
 800347e:	18fb      	adds	r3, r7, r3
 8003480:	781b      	ldrb	r3, [r3, #0]
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	b004      	add	sp, #16
 8003488:	bd80      	pop	{r7, pc}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	ffff00ff 	.word	0xffff00ff

08003490 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d01e      	beq.n	80034e2 <HAL_TIM_ReadCapturedValue+0x52>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d820      	bhi.n	80034ec <HAL_TIM_ReadCapturedValue+0x5c>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d013      	beq.n	80034d8 <HAL_TIM_ReadCapturedValue+0x48>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d81a      	bhi.n	80034ec <HAL_TIM_ReadCapturedValue+0x5c>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_TIM_ReadCapturedValue+0x34>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d005      	beq.n	80034ce <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80034c2:	e013      	b.n	80034ec <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ca:	60fb      	str	r3, [r7, #12]
      break;
 80034cc:	e00f      	b.n	80034ee <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d4:	60fb      	str	r3, [r7, #12]
      break;
 80034d6:	e00a      	b.n	80034ee <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034de:	60fb      	str	r3, [r7, #12]
      break;
 80034e0:	e005      	b.n	80034ee <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e8:	60fb      	str	r3, [r7, #12]
      break;
 80034ea:	e000      	b.n	80034ee <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80034ec:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 80034ee:	68fb      	ldr	r3, [r7, #12]
}
 80034f0:	0018      	movs	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b004      	add	sp, #16
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003500:	46c0      	nop			@ (mov r8, r8)
 8003502:	46bd      	mov	sp, r7
 8003504:	b002      	add	sp, #8
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003510:	46c0      	nop			@ (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	b002      	add	sp, #8
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003520:	46c0      	nop			@ (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003530:	46c0      	nop			@ (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	b002      	add	sp, #8
 8003536:	bd80      	pop	{r7, pc}

08003538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	2380      	movs	r3, #128	@ 0x80
 800354c:	05db      	lsls	r3, r3, #23
 800354e:	429a      	cmp	r2, r3
 8003550:	d007      	beq.n	8003562 <TIM_Base_SetConfig+0x2a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a22      	ldr	r2, [pc, #136]	@ (80035e0 <TIM_Base_SetConfig+0xa8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d003      	beq.n	8003562 <TIM_Base_SetConfig+0x2a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a21      	ldr	r2, [pc, #132]	@ (80035e4 <TIM_Base_SetConfig+0xac>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d108      	bne.n	8003574 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2270      	movs	r2, #112	@ 0x70
 8003566:	4393      	bics	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	2380      	movs	r3, #128	@ 0x80
 8003578:	05db      	lsls	r3, r3, #23
 800357a:	429a      	cmp	r2, r3
 800357c:	d007      	beq.n	800358e <TIM_Base_SetConfig+0x56>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a17      	ldr	r2, [pc, #92]	@ (80035e0 <TIM_Base_SetConfig+0xa8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <TIM_Base_SetConfig+0x56>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a16      	ldr	r2, [pc, #88]	@ (80035e4 <TIM_Base_SetConfig+0xac>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d108      	bne.n	80035a0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	4a15      	ldr	r2, [pc, #84]	@ (80035e8 <TIM_Base_SetConfig+0xb0>)
 8003592:	4013      	ands	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2280      	movs	r2, #128	@ 0x80
 80035a4:	4393      	bics	r3, r2
 80035a6:	001a      	movs	r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2204      	movs	r2, #4
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	601a      	str	r2, [r3, #0]
}
 80035d8:	46c0      	nop			@ (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b004      	add	sp, #16
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40010800 	.word	0x40010800
 80035e4:	40011400 	.word	0x40011400
 80035e8:	fffffcff 	.word	0xfffffcff

080035ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	2201      	movs	r2, #1
 8003602:	4393      	bics	r3, r2
 8003604:	001a      	movs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2270      	movs	r2, #112	@ 0x70
 800361a:	4393      	bics	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2203      	movs	r2, #3
 8003622:	4393      	bics	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2202      	movs	r2, #2
 8003634:	4393      	bics	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4313      	orrs	r3, r2
 8003640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	621a      	str	r2, [r3, #32]
}
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b006      	add	sp, #24
 8003662:	bd80      	pop	{r7, pc}

08003664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	2210      	movs	r2, #16
 800367a:	4393      	bics	r3, r2
 800367c:	001a      	movs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a13      	ldr	r2, [pc, #76]	@ (80036e0 <TIM_OC2_SetConfig+0x7c>)
 8003692:	4013      	ands	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4a12      	ldr	r2, [pc, #72]	@ (80036e4 <TIM_OC2_SetConfig+0x80>)
 800369a:	4013      	ands	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2220      	movs	r2, #32
 80036ae:	4393      	bics	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	46c0      	nop			@ (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b006      	add	sp, #24
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	ffff8fff 	.word	0xffff8fff
 80036e4:	fffffcff 	.word	0xfffffcff

080036e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	4a18      	ldr	r2, [pc, #96]	@ (8003760 <TIM_OC3_SetConfig+0x78>)
 80036fe:	401a      	ands	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2270      	movs	r2, #112	@ 0x70
 8003714:	4393      	bics	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2203      	movs	r2, #3
 800371c:	4393      	bics	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	4a0d      	ldr	r2, [pc, #52]	@ (8003764 <TIM_OC3_SetConfig+0x7c>)
 800372e:	4013      	ands	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	621a      	str	r2, [r3, #32]
}
 8003758:	46c0      	nop			@ (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b006      	add	sp, #24
 800375e:	bd80      	pop	{r7, pc}
 8003760:	fffffeff 	.word	0xfffffeff
 8003764:	fffffdff 	.word	0xfffffdff

08003768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4a19      	ldr	r2, [pc, #100]	@ (80037e4 <TIM_OC4_SetConfig+0x7c>)
 800377e:	401a      	ands	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a15      	ldr	r2, [pc, #84]	@ (80037e8 <TIM_OC4_SetConfig+0x80>)
 8003794:	4013      	ands	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4a14      	ldr	r2, [pc, #80]	@ (80037ec <TIM_OC4_SetConfig+0x84>)
 800379c:	4013      	ands	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	4a10      	ldr	r2, [pc, #64]	@ (80037f0 <TIM_OC4_SetConfig+0x88>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	031b      	lsls	r3, r3, #12
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	621a      	str	r2, [r3, #32]
}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b006      	add	sp, #24
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	ffffefff 	.word	0xffffefff
 80037e8:	ffff8fff 	.word	0xffff8fff
 80037ec:	fffffcff 	.word	0xfffffcff
 80037f0:	ffffdfff 	.word	0xffffdfff

080037f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	2201      	movs	r2, #1
 800380e:	4393      	bics	r3, r2
 8003810:	001a      	movs	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	2380      	movs	r3, #128	@ 0x80
 8003820:	05db      	lsls	r3, r3, #23
 8003822:	429a      	cmp	r2, r3
 8003824:	d007      	beq.n	8003836 <TIM_TI1_SetConfig+0x42>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a1b      	ldr	r2, [pc, #108]	@ (8003898 <TIM_TI1_SetConfig+0xa4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d003      	beq.n	8003836 <TIM_TI1_SetConfig+0x42>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a1a      	ldr	r2, [pc, #104]	@ (800389c <TIM_TI1_SetConfig+0xa8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d101      	bne.n	800383a <TIM_TI1_SetConfig+0x46>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <TIM_TI1_SetConfig+0x48>
 800383a:	2300      	movs	r3, #0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2203      	movs	r2, #3
 8003844:	4393      	bics	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4313      	orrs	r3, r2
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	e003      	b.n	800385a <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2201      	movs	r2, #1
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	22f0      	movs	r2, #240	@ 0xf0
 800385e:	4393      	bics	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	22ff      	movs	r2, #255	@ 0xff
 8003868:	4013      	ands	r3, r2
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	220a      	movs	r2, #10
 8003874:	4393      	bics	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	220a      	movs	r2, #10
 800387c:	4013      	ands	r3, r2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	621a      	str	r2, [r3, #32]
}
 8003890:	46c0      	nop			@ (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	b006      	add	sp, #24
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40010800 	.word	0x40010800
 800389c:	40011400 	.word	0x40011400

080038a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	2201      	movs	r2, #1
 80038b8:	4393      	bics	r3, r2
 80038ba:	001a      	movs	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	22f0      	movs	r2, #240	@ 0xf0
 80038ca:	4393      	bics	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	220a      	movs	r2, #10
 80038dc:	4393      	bics	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	621a      	str	r2, [r3, #32]
}
 80038f4:	46c0      	nop			@ (mov r8, r8)
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b006      	add	sp, #24
 80038fa:	bd80      	pop	{r7, pc}

080038fc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	2210      	movs	r2, #16
 8003916:	4393      	bics	r3, r2
 8003918:	001a      	movs	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4a14      	ldr	r2, [pc, #80]	@ (8003978 <TIM_TI2_SetConfig+0x7c>)
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	021b      	lsls	r3, r3, #8
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4a10      	ldr	r2, [pc, #64]	@ (800397c <TIM_TI2_SetConfig+0x80>)
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	031b      	lsls	r3, r3, #12
 8003942:	041b      	lsls	r3, r3, #16
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	22a0      	movs	r2, #160	@ 0xa0
 8003950:	4393      	bics	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	22a0      	movs	r2, #160	@ 0xa0
 800395a:	4013      	ands	r3, r2
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	621a      	str	r2, [r3, #32]
}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	46bd      	mov	sp, r7
 8003972:	b006      	add	sp, #24
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	fffffcff 	.word	0xfffffcff
 800397c:	ffff0fff 	.word	0xffff0fff

08003980 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	2210      	movs	r2, #16
 8003998:	4393      	bics	r3, r2
 800399a:	001a      	movs	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4a0d      	ldr	r2, [pc, #52]	@ (80039e0 <TIM_TI2_ConfigInputStage+0x60>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	031b      	lsls	r3, r3, #12
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	22a0      	movs	r2, #160	@ 0xa0
 80039bc:	4393      	bics	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	621a      	str	r2, [r3, #32]
}
 80039d6:	46c0      	nop			@ (mov r8, r8)
 80039d8:	46bd      	mov	sp, r7
 80039da:	b006      	add	sp, #24
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	ffff0fff 	.word	0xffff0fff

080039e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	4a17      	ldr	r2, [pc, #92]	@ (8003a5c <TIM_TI3_SetConfig+0x78>)
 80039fe:	401a      	ands	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	4393      	bics	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	22f0      	movs	r2, #240	@ 0xf0
 8003a1e:	4393      	bics	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	22ff      	movs	r2, #255	@ 0xff
 8003a28:	4013      	ands	r3, r2
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	4a0b      	ldr	r2, [pc, #44]	@ (8003a60 <TIM_TI3_SetConfig+0x7c>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	021a      	lsls	r2, r3, #8
 8003a3c:	23a0      	movs	r3, #160	@ 0xa0
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	4013      	ands	r3, r2
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	621a      	str	r2, [r3, #32]
}
 8003a54:	46c0      	nop			@ (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b006      	add	sp, #24
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	fffffeff 	.word	0xfffffeff
 8003a60:	fffff5ff 	.word	0xfffff5ff

08003a64 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	4a18      	ldr	r2, [pc, #96]	@ (8003ae0 <TIM_TI4_SetConfig+0x7c>)
 8003a7e:	401a      	ands	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4a15      	ldr	r2, [pc, #84]	@ (8003ae4 <TIM_TI4_SetConfig+0x80>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	021b      	lsls	r3, r3, #8
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4a12      	ldr	r2, [pc, #72]	@ (8003ae8 <TIM_TI4_SetConfig+0x84>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	031b      	lsls	r3, r3, #12
 8003aa8:	041b      	lsls	r3, r3, #16
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8003aec <TIM_TI4_SetConfig+0x88>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	031a      	lsls	r2, r3, #12
 8003abe:	23a0      	movs	r3, #160	@ 0xa0
 8003ac0:	021b      	lsls	r3, r3, #8
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b006      	add	sp, #24
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	ffffefff 	.word	0xffffefff
 8003ae4:	fffffcff 	.word	0xfffffcff
 8003ae8:	ffff0fff 	.word	0xffff0fff
 8003aec:	ffff5fff 	.word	0xffff5fff

08003af0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2270      	movs	r2, #112	@ 0x70
 8003b04:	4393      	bics	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	2207      	movs	r2, #7
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	609a      	str	r2, [r3, #8]
}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	b004      	add	sp, #16
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	4a09      	ldr	r2, [pc, #36]	@ (8003b60 <TIM_ETR_SetConfig+0x3c>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	021a      	lsls	r2, r3, #8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	609a      	str	r2, [r3, #8]
}
 8003b58:	46c0      	nop			@ (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b006      	add	sp, #24
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	ffff00ff 	.word	0xffff00ff

08003b64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	221f      	movs	r2, #31
 8003b74:	4013      	ands	r3, r2
 8003b76:	2201      	movs	r2, #1
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	0013      	movs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	43d2      	mvns	r2, r2
 8003b86:	401a      	ands	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a1a      	ldr	r2, [r3, #32]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	211f      	movs	r1, #31
 8003b94:	400b      	ands	r3, r1
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4099      	lsls	r1, r3
 8003b9a:	000b      	movs	r3, r1
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	46c0      	nop			@ (mov r8, r8)
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b006      	add	sp, #24
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2238      	movs	r2, #56	@ 0x38
 8003bba:	5c9b      	ldrb	r3, [r3, r2]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e042      	b.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2238      	movs	r2, #56	@ 0x38
 8003bc8:	2101      	movs	r1, #1
 8003bca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2239      	movs	r2, #57	@ 0x39
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2270      	movs	r2, #112	@ 0x70
 8003be8:	4393      	bics	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	2380      	movs	r3, #128	@ 0x80
 8003c04:	05db      	lsls	r3, r3, #23
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d009      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a11      	ldr	r2, [pc, #68]	@ (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0f      	ldr	r2, [pc, #60]	@ (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d10c      	bne.n	8003c38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2280      	movs	r2, #128	@ 0x80
 8003c22:	4393      	bics	r3, r2
 8003c24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2239      	movs	r2, #57	@ 0x39
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2238      	movs	r2, #56	@ 0x38
 8003c44:	2100      	movs	r1, #0
 8003c46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b004      	add	sp, #16
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	40010800 	.word	0x40010800
 8003c58:	40011400 	.word	0x40011400

08003c5c <memset>:
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	1882      	adds	r2, r0, r2
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d100      	bne.n	8003c66 <memset+0xa>
 8003c64:	4770      	bx	lr
 8003c66:	7019      	strb	r1, [r3, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	e7f9      	b.n	8003c60 <memset+0x4>

08003c6c <__libc_init_array>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	2600      	movs	r6, #0
 8003c70:	4c0c      	ldr	r4, [pc, #48]	@ (8003ca4 <__libc_init_array+0x38>)
 8003c72:	4d0d      	ldr	r5, [pc, #52]	@ (8003ca8 <__libc_init_array+0x3c>)
 8003c74:	1b64      	subs	r4, r4, r5
 8003c76:	10a4      	asrs	r4, r4, #2
 8003c78:	42a6      	cmp	r6, r4
 8003c7a:	d109      	bne.n	8003c90 <__libc_init_array+0x24>
 8003c7c:	2600      	movs	r6, #0
 8003c7e:	f000 f819 	bl	8003cb4 <_init>
 8003c82:	4c0a      	ldr	r4, [pc, #40]	@ (8003cac <__libc_init_array+0x40>)
 8003c84:	4d0a      	ldr	r5, [pc, #40]	@ (8003cb0 <__libc_init_array+0x44>)
 8003c86:	1b64      	subs	r4, r4, r5
 8003c88:	10a4      	asrs	r4, r4, #2
 8003c8a:	42a6      	cmp	r6, r4
 8003c8c:	d105      	bne.n	8003c9a <__libc_init_array+0x2e>
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}
 8003c90:	00b3      	lsls	r3, r6, #2
 8003c92:	58eb      	ldr	r3, [r5, r3]
 8003c94:	4798      	blx	r3
 8003c96:	3601      	adds	r6, #1
 8003c98:	e7ee      	b.n	8003c78 <__libc_init_array+0xc>
 8003c9a:	00b3      	lsls	r3, r6, #2
 8003c9c:	58eb      	ldr	r3, [r5, r3]
 8003c9e:	4798      	blx	r3
 8003ca0:	3601      	adds	r6, #1
 8003ca2:	e7f2      	b.n	8003c8a <__libc_init_array+0x1e>
 8003ca4:	08003d28 	.word	0x08003d28
 8003ca8:	08003d28 	.word	0x08003d28
 8003cac:	08003d2c 	.word	0x08003d2c
 8003cb0:	08003d28 	.word	0x08003d28

08003cb4 <_init>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cba:	bc08      	pop	{r3}
 8003cbc:	469e      	mov	lr, r3
 8003cbe:	4770      	bx	lr

08003cc0 <_fini>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc6:	bc08      	pop	{r3}
 8003cc8:	469e      	mov	lr, r3
 8003cca:	4770      	bx	lr

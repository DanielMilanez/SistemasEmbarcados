
Projeto Teclado Musical.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002918  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080029d8  080029d8  000039d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a14  08002a14  0000401c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a14  08002a14  00003a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a1c  08002a1c  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a1c  08002a1c  00003a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a20  08002a20  00003a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08002a24  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000001c  08002a40  0000401c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002a40  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ac8  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001401  00000000  00000000  0000ab0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  0000bf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fb  00000000  00000000  0000c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012d02  00000000  00000000  0000cceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a4e  00000000  00000000  0001f9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007628b  00000000  00000000  0002843b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009e6c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c04  00000000  00000000  0009e70c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  000a0310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029c0 	.word	0x080029c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	080029c0 	.word	0x080029c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fc96 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f80e 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f8de 	bl	8000674 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004b8:	f000 f85a 	bl	8000570 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004bc:	4b03      	ldr	r3, [pc, #12]	@ (80004cc <main+0x24>)
 80004be:	2100      	movs	r1, #0
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 fdbd 	bl	8002040 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Keyboard_check();
 80004c6:	f000 f971 	bl	80007ac <Keyboard_check>
 80004ca:	e7fc      	b.n	80004c6 <main+0x1e>
 80004cc:	20000038 	.word	0x20000038

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b095      	sub	sp, #84	@ 0x54
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	2418      	movs	r4, #24
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2338      	movs	r3, #56	@ 0x38
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f002 fa41 	bl	8002968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	0018      	movs	r0, r3
 80004ea:	2314      	movs	r3, #20
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f002 fa3a 	bl	8002968 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000568 <SystemClock_Config+0x98>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a1c      	ldr	r2, [pc, #112]	@ (800056c <SystemClock_Config+0x9c>)
 80004fa:	401a      	ands	r2, r3
 80004fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <SystemClock_Config+0x98>)
 80004fe:	2180      	movs	r1, #128	@ 0x80
 8000500:	0109      	lsls	r1, r1, #4
 8000502:	430a      	orrs	r2, r1
 8000504:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000506:	0021      	movs	r1, r4
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2202      	movs	r2, #2
 800050c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2201      	movs	r2, #1
 8000512:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2210      	movs	r2, #16
 8000518:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2200      	movs	r2, #0
 800051e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000520:	187b      	adds	r3, r7, r1
 8000522:	0018      	movs	r0, r3
 8000524:	f000 ff52 	bl	80013cc <HAL_RCC_OscConfig>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800052c:	f000 fba2 	bl	8000c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	220f      	movs	r2, #15
 8000534:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2201      	movs	r2, #1
 800053a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2280      	movs	r2, #128	@ 0x80
 8000540:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2100      	movs	r1, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f001 fafe 	bl	8001b54 <HAL_RCC_ClockConfig>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800055c:	f000 fb8a 	bl	8000c74 <Error_Handler>
  }
}
 8000560:	46c0      	nop			@ (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b015      	add	sp, #84	@ 0x54
 8000566:	bd90      	pop	{r4, r7, pc}
 8000568:	40007000 	.word	0x40007000
 800056c:	ffffe7ff 	.word	0xffffe7ff

08000570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	@ 0x28
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000576:	2318      	movs	r3, #24
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	0018      	movs	r0, r3
 800057c:	2310      	movs	r3, #16
 800057e:	001a      	movs	r2, r3
 8000580:	2100      	movs	r1, #0
 8000582:	f002 f9f1 	bl	8002968 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000586:	2310      	movs	r3, #16
 8000588:	18fb      	adds	r3, r7, r3
 800058a:	0018      	movs	r0, r3
 800058c:	2308      	movs	r3, #8
 800058e:	001a      	movs	r2, r3
 8000590:	2100      	movs	r1, #0
 8000592:	f002 f9e9 	bl	8002968 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000596:	003b      	movs	r3, r7
 8000598:	0018      	movs	r0, r3
 800059a:	2310      	movs	r3, #16
 800059c:	001a      	movs	r2, r3
 800059e:	2100      	movs	r1, #0
 80005a0:	f002 f9e2 	bl	8002968 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005a4:	4b30      	ldr	r3, [pc, #192]	@ (8000668 <MX_TIM2_Init+0xf8>)
 80005a6:	2280      	movs	r2, #128	@ 0x80
 80005a8:	05d2      	lsls	r2, r2, #23
 80005aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80005ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000668 <MX_TIM2_Init+0xf8>)
 80005ae:	2207      	movs	r2, #7
 80005b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <MX_TIM2_Init+0xf8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3788-1;
 80005b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000668 <MX_TIM2_Init+0xf8>)
 80005ba:	4a2c      	ldr	r2, [pc, #176]	@ (800066c <MX_TIM2_Init+0xfc>)
 80005bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005be:	4b2a      	ldr	r3, [pc, #168]	@ (8000668 <MX_TIM2_Init+0xf8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	4b28      	ldr	r3, [pc, #160]	@ (8000668 <MX_TIM2_Init+0xf8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <MX_TIM2_Init+0xf8>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fcaf 	bl	8001f30 <HAL_TIM_Base_Init>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80005d6:	f000 fb4d 	bl	8000c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005da:	2118      	movs	r1, #24
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2280      	movs	r2, #128	@ 0x80
 80005e0:	0152      	lsls	r2, r2, #5
 80005e2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005e4:	187a      	adds	r2, r7, r1
 80005e6:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <MX_TIM2_Init+0xf8>)
 80005e8:	0011      	movs	r1, r2
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fe7a 	bl	80022e4 <HAL_TIM_ConfigClockSource>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80005f4:	f000 fb3e 	bl	8000c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <MX_TIM2_Init+0xf8>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f001 fcd8 	bl	8001fb0 <HAL_TIM_PWM_Init>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000604:	f000 fb36 	bl	8000c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000608:	2110      	movs	r1, #16
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000616:	187a      	adds	r2, r7, r1
 8000618:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <MX_TIM2_Init+0xf8>)
 800061a:	0011      	movs	r1, r2
 800061c:	0018      	movs	r0, r3
 800061e:	f002 f94b 	bl	80028b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000626:	f000 fb25 	bl	8000c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800062a:	003b      	movs	r3, r7
 800062c:	2260      	movs	r2, #96	@ 0x60
 800062e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1894-1;
 8000630:	003b      	movs	r3, r7
 8000632:	4a0f      	ldr	r2, [pc, #60]	@ (8000670 <MX_TIM2_Init+0x100>)
 8000634:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000636:	003b      	movs	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800063c:	003b      	movs	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000642:	0039      	movs	r1, r7
 8000644:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <MX_TIM2_Init+0xf8>)
 8000646:	2200      	movs	r2, #0
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fd85 	bl	8002158 <HAL_TIM_PWM_ConfigChannel>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000652:	f000 fb0f 	bl	8000c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000656:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <MX_TIM2_Init+0xf8>)
 8000658:	0018      	movs	r0, r3
 800065a:	f000 fb3b 	bl	8000cd4 <HAL_TIM_MspPostInit>

}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b00a      	add	sp, #40	@ 0x28
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	20000038 	.word	0x20000038
 800066c:	00000ecb 	.word	0x00000ecb
 8000670:	00000765 	.word	0x00000765

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b089      	sub	sp, #36	@ 0x24
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	240c      	movs	r4, #12
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	2314      	movs	r3, #20
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f002 f96f 	bl	8002968 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b45      	ldr	r3, [pc, #276]	@ (80007a0 <MX_GPIO_Init+0x12c>)
 800068c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800068e:	4b44      	ldr	r3, [pc, #272]	@ (80007a0 <MX_GPIO_Init+0x12c>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000696:	4b42      	ldr	r3, [pc, #264]	@ (80007a0 <MX_GPIO_Init+0x12c>)
 8000698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b3f      	ldr	r3, [pc, #252]	@ (80007a0 <MX_GPIO_Init+0x12c>)
 80006a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006a6:	4b3e      	ldr	r3, [pc, #248]	@ (80007a0 <MX_GPIO_Init+0x12c>)
 80006a8:	2104      	movs	r1, #4
 80006aa:	430a      	orrs	r2, r1
 80006ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ae:	4b3c      	ldr	r3, [pc, #240]	@ (80007a0 <MX_GPIO_Init+0x12c>)
 80006b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006b2:	2204      	movs	r2, #4
 80006b4:	4013      	ands	r3, r2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b39      	ldr	r3, [pc, #228]	@ (80007a0 <MX_GPIO_Init+0x12c>)
 80006bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006be:	4b38      	ldr	r3, [pc, #224]	@ (80007a0 <MX_GPIO_Init+0x12c>)
 80006c0:	2102      	movs	r1, #2
 80006c2:	430a      	orrs	r2, r1
 80006c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006c6:	4b36      	ldr	r3, [pc, #216]	@ (80007a0 <MX_GPIO_Init+0x12c>)
 80006c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ca:	2202      	movs	r2, #2
 80006cc:	4013      	ands	r3, r2
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, GPIO_PIN_RESET);
 80006d2:	23a0      	movs	r3, #160	@ 0xa0
 80006d4:	05db      	lsls	r3, r3, #23
 80006d6:	2200      	movs	r2, #0
 80006d8:	2120      	movs	r1, #32
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fe59 	bl	8001392 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COLUMN_01_Pin|COLUMN_02_Pin, GPIO_PIN_RESET);
 80006e0:	23c0      	movs	r3, #192	@ 0xc0
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	482f      	ldr	r0, [pc, #188]	@ (80007a4 <MX_GPIO_Init+0x130>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	0019      	movs	r1, r3
 80006ea:	f000 fe52 	bl	8001392 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : COLUMN_03_Pin */
  GPIO_InitStruct.Pin = COLUMN_03_Pin;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2220      	movs	r2, #32
 80006f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2201      	movs	r2, #1
 80006f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(COLUMN_03_GPIO_Port, &GPIO_InitStruct);
 8000706:	193a      	adds	r2, r7, r4
 8000708:	23a0      	movs	r3, #160	@ 0xa0
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	0011      	movs	r1, r2
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fcac 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : LINE_01_Pin LINE_02_Pin */
  GPIO_InitStruct.Pin = LINE_01_Pin|LINE_02_Pin;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	22c0      	movs	r2, #192	@ 0xc0
 8000718:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2201      	movs	r2, #1
 8000724:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	193a      	adds	r2, r7, r4
 8000728:	23a0      	movs	r3, #160	@ 0xa0
 800072a:	05db      	lsls	r3, r3, #23
 800072c:	0011      	movs	r1, r2
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fc9c 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : LINE_04_Pin */
  GPIO_InitStruct.Pin = LINE_04_Pin;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2200      	movs	r2, #0
 800073e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2201      	movs	r2, #1
 8000744:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LINE_04_GPIO_Port, &GPIO_InitStruct);
 8000746:	193b      	adds	r3, r7, r4
 8000748:	4a17      	ldr	r2, [pc, #92]	@ (80007a8 <MX_GPIO_Init+0x134>)
 800074a:	0019      	movs	r1, r3
 800074c:	0010      	movs	r0, r2
 800074e:	f000 fc8d 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pin : LINE_03_Pin */
  GPIO_InitStruct.Pin = LINE_03_Pin;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2240      	movs	r2, #64	@ 0x40
 8000756:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000758:	193b      	adds	r3, r7, r4
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2201      	movs	r2, #1
 8000762:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LINE_03_GPIO_Port, &GPIO_InitStruct);
 8000764:	193b      	adds	r3, r7, r4
 8000766:	4a0f      	ldr	r2, [pc, #60]	@ (80007a4 <MX_GPIO_Init+0x130>)
 8000768:	0019      	movs	r1, r3
 800076a:	0010      	movs	r0, r2
 800076c:	f000 fc7e 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN_01_Pin COLUMN_02_Pin */
  GPIO_InitStruct.Pin = COLUMN_01_Pin|COLUMN_02_Pin;
 8000770:	0021      	movs	r1, r4
 8000772:	187b      	adds	r3, r7, r1
 8000774:	22c0      	movs	r2, #192	@ 0xc0
 8000776:	0092      	lsls	r2, r2, #2
 8000778:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2201      	movs	r2, #1
 800077e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	187b      	adds	r3, r7, r1
 800078e:	4a05      	ldr	r2, [pc, #20]	@ (80007a4 <MX_GPIO_Init+0x130>)
 8000790:	0019      	movs	r1, r3
 8000792:	0010      	movs	r0, r2
 8000794:	f000 fc6a 	bl	800106c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b009      	add	sp, #36	@ 0x24
 800079e:	bd90      	pop	{r4, r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	50000400 	.word	0x50000400
 80007a8:	50000800 	.word	0x50000800

080007ac <Keyboard_check>:

/* USER CODE BEGIN 4 */
void Keyboard_check(void){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	switch (atual_column){
 80007b0:	4b2e      	ldr	r3, [pc, #184]	@ (800086c <Keyboard_check+0xc0>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d03b      	beq.n	8000830 <Keyboard_check+0x84>
 80007b8:	dc55      	bgt.n	8000866 <Keyboard_check+0xba>
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d002      	beq.n	80007c4 <Keyboard_check+0x18>
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d01b      	beq.n	80007fa <Keyboard_check+0x4e>
			Line_verify();

			atual_column = 0;
			break;
	}
}
 80007c2:	e050      	b.n	8000866 <Keyboard_check+0xba>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, GPIO_PIN_RESET);
 80007c4:	2380      	movs	r3, #128	@ 0x80
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	4829      	ldr	r0, [pc, #164]	@ (8000870 <Keyboard_check+0xc4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	0019      	movs	r1, r3
 80007ce:	f000 fde0 	bl	8001392 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, GPIO_PIN_SET);
 80007d2:	2380      	movs	r3, #128	@ 0x80
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4826      	ldr	r0, [pc, #152]	@ (8000870 <Keyboard_check+0xc4>)
 80007d8:	2201      	movs	r2, #1
 80007da:	0019      	movs	r1, r3
 80007dc:	f000 fdd9 	bl	8001392 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, GPIO_PIN_SET);
 80007e0:	23a0      	movs	r3, #160	@ 0xa0
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	2201      	movs	r2, #1
 80007e6:	2120      	movs	r1, #32
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fdd2 	bl	8001392 <HAL_GPIO_WritePin>
			Line_verify();
 80007ee:	f000 f841 	bl	8000874 <Line_verify>
			atual_column = 1;
 80007f2:	4b1e      	ldr	r3, [pc, #120]	@ (800086c <Keyboard_check+0xc0>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
			break;
 80007f8:	e035      	b.n	8000866 <Keyboard_check+0xba>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, GPIO_PIN_SET);
 80007fa:	2380      	movs	r3, #128	@ 0x80
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	481c      	ldr	r0, [pc, #112]	@ (8000870 <Keyboard_check+0xc4>)
 8000800:	2201      	movs	r2, #1
 8000802:	0019      	movs	r1, r3
 8000804:	f000 fdc5 	bl	8001392 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, GPIO_PIN_RESET);
 8000808:	2380      	movs	r3, #128	@ 0x80
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4818      	ldr	r0, [pc, #96]	@ (8000870 <Keyboard_check+0xc4>)
 800080e:	2200      	movs	r2, #0
 8000810:	0019      	movs	r1, r3
 8000812:	f000 fdbe 	bl	8001392 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, GPIO_PIN_SET);
 8000816:	23a0      	movs	r3, #160	@ 0xa0
 8000818:	05db      	lsls	r3, r3, #23
 800081a:	2201      	movs	r2, #1
 800081c:	2120      	movs	r1, #32
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fdb7 	bl	8001392 <HAL_GPIO_WritePin>
			Line_verify();
 8000824:	f000 f826 	bl	8000874 <Line_verify>
			atual_column = 2;
 8000828:	4b10      	ldr	r3, [pc, #64]	@ (800086c <Keyboard_check+0xc0>)
 800082a:	2202      	movs	r2, #2
 800082c:	701a      	strb	r2, [r3, #0]
			break;
 800082e:	e01a      	b.n	8000866 <Keyboard_check+0xba>
			HAL_GPIO_WritePin(COLUMN_01_GPIO_Port, COLUMN_01_Pin, GPIO_PIN_SET);
 8000830:	2380      	movs	r3, #128	@ 0x80
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	480e      	ldr	r0, [pc, #56]	@ (8000870 <Keyboard_check+0xc4>)
 8000836:	2201      	movs	r2, #1
 8000838:	0019      	movs	r1, r3
 800083a:	f000 fdaa 	bl	8001392 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_02_GPIO_Port, COLUMN_02_Pin, GPIO_PIN_SET);
 800083e:	2380      	movs	r3, #128	@ 0x80
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	480b      	ldr	r0, [pc, #44]	@ (8000870 <Keyboard_check+0xc4>)
 8000844:	2201      	movs	r2, #1
 8000846:	0019      	movs	r1, r3
 8000848:	f000 fda3 	bl	8001392 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(COLUMN_03_GPIO_Port, COLUMN_03_Pin, GPIO_PIN_RESET);
 800084c:	23a0      	movs	r3, #160	@ 0xa0
 800084e:	05db      	lsls	r3, r3, #23
 8000850:	2200      	movs	r2, #0
 8000852:	2120      	movs	r1, #32
 8000854:	0018      	movs	r0, r3
 8000856:	f000 fd9c 	bl	8001392 <HAL_GPIO_WritePin>
			Line_verify();
 800085a:	f000 f80b 	bl	8000874 <Line_verify>
			atual_column = 0;
 800085e:	4b03      	ldr	r3, [pc, #12]	@ (800086c <Keyboard_check+0xc0>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
			break;
 8000864:	46c0      	nop			@ (mov r8, r8)
}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000079 	.word	0x20000079
 8000870:	50000400 	.word	0x50000400

08000874 <Line_verify>:

void Line_verify(void){
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
	uint8_t bline1 = HAL_GPIO_ReadPin(LINE_01_GPIO_Port, LINE_01_Pin),
 800087a:	1dfc      	adds	r4, r7, #7
 800087c:	23a0      	movs	r3, #160	@ 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	2140      	movs	r1, #64	@ 0x40
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fd68 	bl	8001358 <HAL_GPIO_ReadPin>
 8000888:	0003      	movs	r3, r0
 800088a:	7023      	strb	r3, [r4, #0]
			bline2 = HAL_GPIO_ReadPin(LINE_02_GPIO_Port, LINE_02_Pin),
 800088c:	1dbc      	adds	r4, r7, #6
 800088e:	23a0      	movs	r3, #160	@ 0xa0
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	0018      	movs	r0, r3
 8000896:	f000 fd5f 	bl	8001358 <HAL_GPIO_ReadPin>
 800089a:	0003      	movs	r3, r0
 800089c:	7023      	strb	r3, [r4, #0]
			bline3 = HAL_GPIO_ReadPin(LINE_03_GPIO_Port, LINE_03_Pin),
 800089e:	1d7c      	adds	r4, r7, #5
 80008a0:	4bcd      	ldr	r3, [pc, #820]	@ (8000bd8 <Line_verify+0x364>)
 80008a2:	2140      	movs	r1, #64	@ 0x40
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 fd57 	bl	8001358 <HAL_GPIO_ReadPin>
 80008aa:	0003      	movs	r3, r0
 80008ac:	7023      	strb	r3, [r4, #0]
			bline4 = HAL_GPIO_ReadPin(LINE_04_GPIO_Port, LINE_04_Pin);
 80008ae:	1d3c      	adds	r4, r7, #4
 80008b0:	4bca      	ldr	r3, [pc, #808]	@ (8000bdc <Line_verify+0x368>)
 80008b2:	2180      	movs	r1, #128	@ 0x80
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 fd4f 	bl	8001358 <HAL_GPIO_ReadPin>
 80008ba:	0003      	movs	r3, r0
 80008bc:	7023      	strb	r3, [r4, #0]

	if (!bline1) response = Tmap[0][atual_column];
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d107      	bne.n	80008d6 <Line_verify+0x62>
 80008c6:	4bc6      	ldr	r3, [pc, #792]	@ (8000be0 <Line_verify+0x36c>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	001a      	movs	r2, r3
 80008cc:	4bc5      	ldr	r3, [pc, #788]	@ (8000be4 <Line_verify+0x370>)
 80008ce:	5c9a      	ldrb	r2, [r3, r2]
 80008d0:	4bc5      	ldr	r3, [pc, #788]	@ (8000be8 <Line_verify+0x374>)
 80008d2:	701a      	strb	r2, [r3, #0]
 80008d4:	e025      	b.n	8000922 <Line_verify+0xae>
	else if (!bline2) response = Tmap[1][atual_column];
 80008d6:	1dbb      	adds	r3, r7, #6
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d108      	bne.n	80008f0 <Line_verify+0x7c>
 80008de:	4bc0      	ldr	r3, [pc, #768]	@ (8000be0 <Line_verify+0x36c>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	001a      	movs	r2, r3
 80008e4:	4bbf      	ldr	r3, [pc, #764]	@ (8000be4 <Line_verify+0x370>)
 80008e6:	189b      	adds	r3, r3, r2
 80008e8:	78da      	ldrb	r2, [r3, #3]
 80008ea:	4bbf      	ldr	r3, [pc, #764]	@ (8000be8 <Line_verify+0x374>)
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	e018      	b.n	8000922 <Line_verify+0xae>
	else if (!bline3) response = Tmap[2][atual_column];
 80008f0:	1d7b      	adds	r3, r7, #5
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d108      	bne.n	800090a <Line_verify+0x96>
 80008f8:	4bb9      	ldr	r3, [pc, #740]	@ (8000be0 <Line_verify+0x36c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	001a      	movs	r2, r3
 80008fe:	4bb9      	ldr	r3, [pc, #740]	@ (8000be4 <Line_verify+0x370>)
 8000900:	189b      	adds	r3, r3, r2
 8000902:	799a      	ldrb	r2, [r3, #6]
 8000904:	4bb8      	ldr	r3, [pc, #736]	@ (8000be8 <Line_verify+0x374>)
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e00b      	b.n	8000922 <Line_verify+0xae>
	else if (!bline4) response = Tmap[3][atual_column];
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d107      	bne.n	8000922 <Line_verify+0xae>
 8000912:	4bb3      	ldr	r3, [pc, #716]	@ (8000be0 <Line_verify+0x36c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	001a      	movs	r2, r3
 8000918:	4bb2      	ldr	r3, [pc, #712]	@ (8000be4 <Line_verify+0x370>)
 800091a:	189b      	adds	r3, r3, r2
 800091c:	7a5a      	ldrb	r2, [r3, #9]
 800091e:	4bb2      	ldr	r3, [pc, #712]	@ (8000be8 <Line_verify+0x374>)
 8000920:	701a      	strb	r2, [r3, #0]

	switch(response){
 8000922:	4bb1      	ldr	r3, [pc, #708]	@ (8000be8 <Line_verify+0x374>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	3b31      	subs	r3, #49	@ 0x31
 8000928:	2b07      	cmp	r3, #7
 800092a:	d900      	bls.n	800092e <Line_verify+0xba>
 800092c:	e109      	b.n	8000b42 <Line_verify+0x2ce>
 800092e:	009a      	lsls	r2, r3, #2
 8000930:	4bae      	ldr	r3, [pc, #696]	@ (8000bec <Line_verify+0x378>)
 8000932:	18d3      	adds	r3, r2, r3
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	469f      	mov	pc, r3
		case '1':
			count_period = DO; // DO
 8000938:	4bad      	ldr	r3, [pc, #692]	@ (8000bf0 <Line_verify+0x37c>)
 800093a:	4aae      	ldr	r2, [pc, #696]	@ (8000bf4 <Line_verify+0x380>)
 800093c:	801a      	strh	r2, [r3, #0]
			break;
 800093e:	e104      	b.n	8000b4a <Line_verify+0x2d6>

		case '2':
			count_period = RE; // RE
 8000940:	4bab      	ldr	r3, [pc, #684]	@ (8000bf0 <Line_verify+0x37c>)
 8000942:	4aad      	ldr	r2, [pc, #692]	@ (8000bf8 <Line_verify+0x384>)
 8000944:	801a      	strh	r2, [r3, #0]
			break;
 8000946:	e100      	b.n	8000b4a <Line_verify+0x2d6>

		case '3':
			count_period = MI; // MI
 8000948:	4ba9      	ldr	r3, [pc, #676]	@ (8000bf0 <Line_verify+0x37c>)
 800094a:	4aac      	ldr	r2, [pc, #688]	@ (8000bfc <Line_verify+0x388>)
 800094c:	801a      	strh	r2, [r3, #0]
			break;
 800094e:	e0fc      	b.n	8000b4a <Line_verify+0x2d6>

		case '4':
			count_period = FA; // FA
 8000950:	4ba7      	ldr	r3, [pc, #668]	@ (8000bf0 <Line_verify+0x37c>)
 8000952:	4aab      	ldr	r2, [pc, #684]	@ (8000c00 <Line_verify+0x38c>)
 8000954:	801a      	strh	r2, [r3, #0]
			break;
 8000956:	e0f8      	b.n	8000b4a <Line_verify+0x2d6>

		case '5':
			count_period = SOL; // SOL
 8000958:	4ba5      	ldr	r3, [pc, #660]	@ (8000bf0 <Line_verify+0x37c>)
 800095a:	4aaa      	ldr	r2, [pc, #680]	@ (8000c04 <Line_verify+0x390>)
 800095c:	801a      	strh	r2, [r3, #0]
			break;
 800095e:	e0f4      	b.n	8000b4a <Line_verify+0x2d6>

		case '6':
			count_period = LA; // LA
 8000960:	4ba3      	ldr	r3, [pc, #652]	@ (8000bf0 <Line_verify+0x37c>)
 8000962:	4aa9      	ldr	r2, [pc, #676]	@ (8000c08 <Line_verify+0x394>)
 8000964:	801a      	strh	r2, [r3, #0]
			break;
 8000966:	e0f0      	b.n	8000b4a <Line_verify+0x2d6>

		case '7':
			count_period = SI; // SI
 8000968:	4ba1      	ldr	r3, [pc, #644]	@ (8000bf0 <Line_verify+0x37c>)
 800096a:	4aa8      	ldr	r2, [pc, #672]	@ (8000c0c <Line_verify+0x398>)
 800096c:	801a      	strh	r2, [r3, #0]
			break;
 800096e:	e0ec      	b.n	8000b4a <Line_verify+0x2d6>

		case '8':
			Note_tone(DO, DELAY);
 8000970:	4ba0      	ldr	r3, [pc, #640]	@ (8000bf4 <Line_verify+0x380>)
 8000972:	21fa      	movs	r1, #250	@ 0xfa
 8000974:	0018      	movs	r0, r3
 8000976:	f000 f966 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 800097a:	207d      	movs	r0, #125	@ 0x7d
 800097c:	f000 fa9e 	bl	8000ebc <HAL_Delay>

			Note_tone(DO, DELAY);
 8000980:	4b9c      	ldr	r3, [pc, #624]	@ (8000bf4 <Line_verify+0x380>)
 8000982:	21fa      	movs	r1, #250	@ 0xfa
 8000984:	0018      	movs	r0, r3
 8000986:	f000 f95e 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 800098a:	207d      	movs	r0, #125	@ 0x7d
 800098c:	f000 fa96 	bl	8000ebc <HAL_Delay>

			Note_tone(SOL, DELAY);
 8000990:	4b9c      	ldr	r3, [pc, #624]	@ (8000c04 <Line_verify+0x390>)
 8000992:	21fa      	movs	r1, #250	@ 0xfa
 8000994:	0018      	movs	r0, r3
 8000996:	f000 f956 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 800099a:	207d      	movs	r0, #125	@ 0x7d
 800099c:	f000 fa8e 	bl	8000ebc <HAL_Delay>

			Note_tone(SOL, DELAY);
 80009a0:	4b98      	ldr	r3, [pc, #608]	@ (8000c04 <Line_verify+0x390>)
 80009a2:	21fa      	movs	r1, #250	@ 0xfa
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 f94e 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 80009aa:	207d      	movs	r0, #125	@ 0x7d
 80009ac:	f000 fa86 	bl	8000ebc <HAL_Delay>

			Note_tone(LA, DELAY);
 80009b0:	4b95      	ldr	r3, [pc, #596]	@ (8000c08 <Line_verify+0x394>)
 80009b2:	21fa      	movs	r1, #250	@ 0xfa
 80009b4:	0018      	movs	r0, r3
 80009b6:	f000 f946 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 80009ba:	207d      	movs	r0, #125	@ 0x7d
 80009bc:	f000 fa7e 	bl	8000ebc <HAL_Delay>

			Note_tone(LA, DELAY);
 80009c0:	4b91      	ldr	r3, [pc, #580]	@ (8000c08 <Line_verify+0x394>)
 80009c2:	21fa      	movs	r1, #250	@ 0xfa
 80009c4:	0018      	movs	r0, r3
 80009c6:	f000 f93e 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 80009ca:	207d      	movs	r0, #125	@ 0x7d
 80009cc:	f000 fa76 	bl	8000ebc <HAL_Delay>

			Note_tone(SOL, DELAY);
 80009d0:	4b8c      	ldr	r3, [pc, #560]	@ (8000c04 <Line_verify+0x390>)
 80009d2:	21fa      	movs	r1, #250	@ 0xfa
 80009d4:	0018      	movs	r0, r3
 80009d6:	f000 f936 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 80009da:	207d      	movs	r0, #125	@ 0x7d
 80009dc:	f000 fa6e 	bl	8000ebc <HAL_Delay>

			Note_tone(SOL, DELAY);
 80009e0:	4b88      	ldr	r3, [pc, #544]	@ (8000c04 <Line_verify+0x390>)
 80009e2:	21fa      	movs	r1, #250	@ 0xfa
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 f92e 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 80009ea:	207d      	movs	r0, #125	@ 0x7d
 80009ec:	f000 fa66 	bl	8000ebc <HAL_Delay>

			Note_tone(FA, DELAY);
 80009f0:	4b83      	ldr	r3, [pc, #524]	@ (8000c00 <Line_verify+0x38c>)
 80009f2:	21fa      	movs	r1, #250	@ 0xfa
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 f926 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 80009fa:	207d      	movs	r0, #125	@ 0x7d
 80009fc:	f000 fa5e 	bl	8000ebc <HAL_Delay>

			Note_tone(FA, DELAY);
 8000a00:	4b7f      	ldr	r3, [pc, #508]	@ (8000c00 <Line_verify+0x38c>)
 8000a02:	21fa      	movs	r1, #250	@ 0xfa
 8000a04:	0018      	movs	r0, r3
 8000a06:	f000 f91e 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000a0a:	207d      	movs	r0, #125	@ 0x7d
 8000a0c:	f000 fa56 	bl	8000ebc <HAL_Delay>

			Note_tone(MI, DELAY);
 8000a10:	4b7a      	ldr	r3, [pc, #488]	@ (8000bfc <Line_verify+0x388>)
 8000a12:	21fa      	movs	r1, #250	@ 0xfa
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 f916 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000a1a:	207d      	movs	r0, #125	@ 0x7d
 8000a1c:	f000 fa4e 	bl	8000ebc <HAL_Delay>

			Note_tone(MI, DELAY);
 8000a20:	4b76      	ldr	r3, [pc, #472]	@ (8000bfc <Line_verify+0x388>)
 8000a22:	21fa      	movs	r1, #250	@ 0xfa
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 f90e 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000a2a:	207d      	movs	r0, #125	@ 0x7d
 8000a2c:	f000 fa46 	bl	8000ebc <HAL_Delay>

			Note_tone(RE, DELAY);
 8000a30:	4b71      	ldr	r3, [pc, #452]	@ (8000bf8 <Line_verify+0x384>)
 8000a32:	21fa      	movs	r1, #250	@ 0xfa
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 f906 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000a3a:	207d      	movs	r0, #125	@ 0x7d
 8000a3c:	f000 fa3e 	bl	8000ebc <HAL_Delay>

			Note_tone(RE, DELAY);
 8000a40:	4b6d      	ldr	r3, [pc, #436]	@ (8000bf8 <Line_verify+0x384>)
 8000a42:	21fa      	movs	r1, #250	@ 0xfa
 8000a44:	0018      	movs	r0, r3
 8000a46:	f000 f8fe 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000a4a:	207d      	movs	r0, #125	@ 0x7d
 8000a4c:	f000 fa36 	bl	8000ebc <HAL_Delay>

			Note_tone(DO, DELAY);
 8000a50:	4b68      	ldr	r3, [pc, #416]	@ (8000bf4 <Line_verify+0x380>)
 8000a52:	21fa      	movs	r1, #250	@ 0xfa
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 f8f6 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY);
 8000a5a:	20fa      	movs	r0, #250	@ 0xfa
 8000a5c:	f000 fa2e 	bl	8000ebc <HAL_Delay>

			Note_tone(FA, DELAY);
 8000a60:	4b67      	ldr	r3, [pc, #412]	@ (8000c00 <Line_verify+0x38c>)
 8000a62:	21fa      	movs	r1, #250	@ 0xfa
 8000a64:	0018      	movs	r0, r3
 8000a66:	f000 f8ee 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000a6a:	207d      	movs	r0, #125	@ 0x7d
 8000a6c:	f000 fa26 	bl	8000ebc <HAL_Delay>

			Note_tone(FA, DELAY);
 8000a70:	4b63      	ldr	r3, [pc, #396]	@ (8000c00 <Line_verify+0x38c>)
 8000a72:	21fa      	movs	r1, #250	@ 0xfa
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 f8e6 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000a7a:	207d      	movs	r0, #125	@ 0x7d
 8000a7c:	f000 fa1e 	bl	8000ebc <HAL_Delay>

			Note_tone(MI, DELAY);
 8000a80:	4b5e      	ldr	r3, [pc, #376]	@ (8000bfc <Line_verify+0x388>)
 8000a82:	21fa      	movs	r1, #250	@ 0xfa
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 f8de 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000a8a:	207d      	movs	r0, #125	@ 0x7d
 8000a8c:	f000 fa16 	bl	8000ebc <HAL_Delay>

			Note_tone(MI, DELAY);
 8000a90:	4b5a      	ldr	r3, [pc, #360]	@ (8000bfc <Line_verify+0x388>)
 8000a92:	21fa      	movs	r1, #250	@ 0xfa
 8000a94:	0018      	movs	r0, r3
 8000a96:	f000 f8d6 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000a9a:	207d      	movs	r0, #125	@ 0x7d
 8000a9c:	f000 fa0e 	bl	8000ebc <HAL_Delay>

			Note_tone(RE, DELAY);
 8000aa0:	4b55      	ldr	r3, [pc, #340]	@ (8000bf8 <Line_verify+0x384>)
 8000aa2:	21fa      	movs	r1, #250	@ 0xfa
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 f8ce 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000aaa:	207d      	movs	r0, #125	@ 0x7d
 8000aac:	f000 fa06 	bl	8000ebc <HAL_Delay>

			Note_tone(RE, DELAY);
 8000ab0:	4b51      	ldr	r3, [pc, #324]	@ (8000bf8 <Line_verify+0x384>)
 8000ab2:	21fa      	movs	r1, #250	@ 0xfa
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f000 f8c6 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000aba:	207d      	movs	r0, #125	@ 0x7d
 8000abc:	f000 f9fe 	bl	8000ebc <HAL_Delay>

			Note_tone(DO, DELAY);
 8000ac0:	4b4c      	ldr	r3, [pc, #304]	@ (8000bf4 <Line_verify+0x380>)
 8000ac2:	21fa      	movs	r1, #250	@ 0xfa
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f000 f8be 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000aca:	207d      	movs	r0, #125	@ 0x7d
 8000acc:	f000 f9f6 	bl	8000ebc <HAL_Delay>

			Note_tone(SOL, DELAY);
 8000ad0:	4b4c      	ldr	r3, [pc, #304]	@ (8000c04 <Line_verify+0x390>)
 8000ad2:	21fa      	movs	r1, #250	@ 0xfa
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 f8b6 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000ada:	207d      	movs	r0, #125	@ 0x7d
 8000adc:	f000 f9ee 	bl	8000ebc <HAL_Delay>

			Note_tone(SOL, DELAY);
 8000ae0:	4b48      	ldr	r3, [pc, #288]	@ (8000c04 <Line_verify+0x390>)
 8000ae2:	21fa      	movs	r1, #250	@ 0xfa
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f000 f8ae 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000aea:	207d      	movs	r0, #125	@ 0x7d
 8000aec:	f000 f9e6 	bl	8000ebc <HAL_Delay>

			Note_tone(FA, DELAY);
 8000af0:	4b43      	ldr	r3, [pc, #268]	@ (8000c00 <Line_verify+0x38c>)
 8000af2:	21fa      	movs	r1, #250	@ 0xfa
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 f8a6 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000afa:	207d      	movs	r0, #125	@ 0x7d
 8000afc:	f000 f9de 	bl	8000ebc <HAL_Delay>

			Note_tone(FA, DELAY);
 8000b00:	4b3f      	ldr	r3, [pc, #252]	@ (8000c00 <Line_verify+0x38c>)
 8000b02:	21fa      	movs	r1, #250	@ 0xfa
 8000b04:	0018      	movs	r0, r3
 8000b06:	f000 f89e 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000b0a:	207d      	movs	r0, #125	@ 0x7d
 8000b0c:	f000 f9d6 	bl	8000ebc <HAL_Delay>

			Note_tone(MI, DELAY);
 8000b10:	4b3a      	ldr	r3, [pc, #232]	@ (8000bfc <Line_verify+0x388>)
 8000b12:	21fa      	movs	r1, #250	@ 0xfa
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 f896 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000b1a:	207d      	movs	r0, #125	@ 0x7d
 8000b1c:	f000 f9ce 	bl	8000ebc <HAL_Delay>

			Note_tone(MI, DELAY);
 8000b20:	4b36      	ldr	r3, [pc, #216]	@ (8000bfc <Line_verify+0x388>)
 8000b22:	21fa      	movs	r1, #250	@ 0xfa
 8000b24:	0018      	movs	r0, r3
 8000b26:	f000 f88e 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000b2a:	207d      	movs	r0, #125	@ 0x7d
 8000b2c:	f000 f9c6 	bl	8000ebc <HAL_Delay>

			Note_tone(RE, DELAY);
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <Line_verify+0x384>)
 8000b32:	21fa      	movs	r1, #250	@ 0xfa
 8000b34:	0018      	movs	r0, r3
 8000b36:	f000 f886 	bl	8000c46 <Note_tone>
			HAL_Delay(DELAY / 2);
 8000b3a:	207d      	movs	r0, #125	@ 0x7d
 8000b3c:	f000 f9be 	bl	8000ebc <HAL_Delay>
			break;
 8000b40:	e003      	b.n	8000b4a <Line_verify+0x2d6>

		default:
			count_period = 0;
 8000b42:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf0 <Line_verify+0x37c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	801a      	strh	r2, [r3, #0]
			break;
 8000b48:	46c0      	nop			@ (mov r8, r8)
	}
	while (!bline1 || !bline2 || !bline3 || !bline4){
 8000b4a:	e026      	b.n	8000b9a <Line_verify+0x326>
		Note_define(count_period);
 8000b4c:	4b28      	ldr	r3, [pc, #160]	@ (8000bf0 <Line_verify+0x37c>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	0018      	movs	r0, r3
 8000b52:	f000 f85d 	bl	8000c10 <Note_define>
		bline1 = HAL_GPIO_ReadPin(LINE_01_GPIO_Port, LINE_01_Pin),
 8000b56:	1dfc      	adds	r4, r7, #7
 8000b58:	23a0      	movs	r3, #160	@ 0xa0
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	2140      	movs	r1, #64	@ 0x40
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f000 fbfa 	bl	8001358 <HAL_GPIO_ReadPin>
 8000b64:	0003      	movs	r3, r0
 8000b66:	7023      	strb	r3, [r4, #0]
		bline2 = HAL_GPIO_ReadPin(LINE_02_GPIO_Port, LINE_02_Pin),
 8000b68:	1dbc      	adds	r4, r7, #6
 8000b6a:	23a0      	movs	r3, #160	@ 0xa0
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	2180      	movs	r1, #128	@ 0x80
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 fbf1 	bl	8001358 <HAL_GPIO_ReadPin>
 8000b76:	0003      	movs	r3, r0
 8000b78:	7023      	strb	r3, [r4, #0]
		bline3 = HAL_GPIO_ReadPin(LINE_03_GPIO_Port, LINE_03_Pin),
 8000b7a:	1d7c      	adds	r4, r7, #5
 8000b7c:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <Line_verify+0x364>)
 8000b7e:	2140      	movs	r1, #64	@ 0x40
 8000b80:	0018      	movs	r0, r3
 8000b82:	f000 fbe9 	bl	8001358 <HAL_GPIO_ReadPin>
 8000b86:	0003      	movs	r3, r0
 8000b88:	7023      	strb	r3, [r4, #0]
		bline4 = HAL_GPIO_ReadPin(LINE_04_GPIO_Port, LINE_04_Pin);
 8000b8a:	1d3c      	adds	r4, r7, #4
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <Line_verify+0x368>)
 8000b8e:	2180      	movs	r1, #128	@ 0x80
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 fbe1 	bl	8001358 <HAL_GPIO_ReadPin>
 8000b96:	0003      	movs	r3, r0
 8000b98:	7023      	strb	r3, [r4, #0]
	while (!bline1 || !bline2 || !bline3 || !bline4){
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0d4      	beq.n	8000b4c <Line_verify+0x2d8>
 8000ba2:	1dbb      	adds	r3, r7, #6
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0d0      	beq.n	8000b4c <Line_verify+0x2d8>
 8000baa:	1d7b      	adds	r3, r7, #5
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0cc      	beq.n	8000b4c <Line_verify+0x2d8>
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d0c8      	beq.n	8000b4c <Line_verify+0x2d8>
	}
	Note_define(count_period);
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <Line_verify+0x37c>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 f826 	bl	8000c10 <Note_define>
	HAL_Delay(10);
 8000bc4:	200a      	movs	r0, #10
 8000bc6:	f000 f979 	bl	8000ebc <HAL_Delay>
	response = 0;
 8000bca:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <Line_verify+0x374>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
}
 8000bd0:	46c0      	nop			@ (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b003      	add	sp, #12
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	50000400 	.word	0x50000400
 8000bdc:	50000800 	.word	0x50000800
 8000be0:	20000079 	.word	0x20000079
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000078 	.word	0x20000078
 8000bec:	080029d8 	.word	0x080029d8
 8000bf0:	2000000c 	.word	0x2000000c
 8000bf4:	00000ed1 	.word	0x00000ed1
 8000bf8:	00000d4d 	.word	0x00000d4d
 8000bfc:	00000bda 	.word	0x00000bda
 8000c00:	00000b2f 	.word	0x00000b2f
 8000c04:	000009f7 	.word	0x000009f7
 8000c08:	000008e1 	.word	0x000008e1
 8000c0c:	000007d6 	.word	0x000007d6

08000c10 <Note_define>:

void Note_define(uint16_t note){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	1dbb      	adds	r3, r7, #6
 8000c1a:	801a      	strh	r2, [r3, #0]
	uint8_t dc = note / 2;
 8000c1c:	1dbb      	adds	r3, r7, #6
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	085b      	lsrs	r3, r3, #1
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	210f      	movs	r1, #15
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	701a      	strb	r2, [r3, #0]
	TIM2 -> CCR1 = dc;
 8000c2a:	2380      	movs	r3, #128	@ 0x80
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	187a      	adds	r2, r7, r1
 8000c30:	7812      	ldrb	r2, [r2, #0]
 8000c32:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2 -> ARR  = note;
 8000c34:	2380      	movs	r3, #128	@ 0x80
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	1dba      	adds	r2, r7, #6
 8000c3a:	8812      	ldrh	r2, [r2, #0]
 8000c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b004      	add	sp, #16
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <Note_tone>:

void Note_tone(uint16_t note, uint32_t delay_active){
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	0002      	movs	r2, r0
 8000c4e:	6039      	str	r1, [r7, #0]
 8000c50:	1dbb      	adds	r3, r7, #6
 8000c52:	801a      	strh	r2, [r3, #0]
	Note_define(note);
 8000c54:	1dbb      	adds	r3, r7, #6
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff ffd9 	bl	8000c10 <Note_define>
	HAL_Delay(delay_active);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 f92b 	bl	8000ebc <HAL_Delay>
	Note_define(0);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff ffd2 	bl	8000c10 <Note_define>
}
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	e7fd      	b.n	8000c7c <Error_Handler+0x8>

08000c80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <HAL_MspInit+0x24>)
 8000c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_MspInit+0x24>)
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <HAL_MspInit+0x24>)
 8000c92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <HAL_MspInit+0x24>)
 8000c96:	2180      	movs	r1, #128	@ 0x80
 8000c98:	0549      	lsls	r1, r1, #21
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2380      	movs	r3, #128	@ 0x80
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d105      	bne.n	8000cc8 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <HAL_TIM_Base_MspInit+0x28>)
 8000cbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cc0:	4b03      	ldr	r3, [pc, #12]	@ (8000cd0 <HAL_TIM_Base_MspInit+0x28>)
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000cc8:	46c0      	nop			@ (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b002      	add	sp, #8
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b089      	sub	sp, #36	@ 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	240c      	movs	r4, #12
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	2314      	movs	r3, #20
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	f001 fe3e 	bl	8002968 <memset>
  if(htim->Instance==TIM2)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	05db      	lsls	r3, r3, #23
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d122      	bne.n	8000d3e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <HAL_TIM_MspPostInit+0x74>)
 8000cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_TIM_MspPostInit+0x74>)
 8000cfe:	2101      	movs	r1, #1
 8000d00:	430a      	orrs	r2, r1
 8000d02:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d04:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <HAL_TIM_MspPostInit+0x74>)
 8000d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d10:	0021      	movs	r1, r4
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2201      	movs	r2, #1
 8000d16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	187a      	adds	r2, r7, r1
 8000d32:	23a0      	movs	r3, #160	@ 0xa0
 8000d34:	05db      	lsls	r3, r3, #23
 8000d36:	0011      	movs	r1, r2
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f000 f997 	bl	800106c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b009      	add	sp, #36	@ 0x24
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	40021000 	.word	0x40021000

08000d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	e7fd      	b.n	8000d50 <NMI_Handler+0x4>

08000d54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	e7fd      	b.n	8000d58 <HardFault_Handler+0x4>

08000d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d74:	f000 f886 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d78:	46c0      	nop			@ (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000d88:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d8c:	f7ff fff7 	bl	8000d7e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <LoopForever+0xe>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <LoopForever+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f001 fddf 	bl	8002978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fb75 	bl	80004a8 <main>

08000dbe <LoopForever>:

LoopForever:
    b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   r0, =_estack
 8000dc0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000dcc:	08002a24 	.word	0x08002a24
  ldr r2, =_sbss
 8000dd0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000dd4:	20000080 	.word	0x20000080

08000dd8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_COMP_IRQHandler>
	...

08000ddc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <HAL_Init+0x3c>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_Init+0x3c>)
 8000dee:	2140      	movs	r1, #64	@ 0x40
 8000df0:	430a      	orrs	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 f811 	bl	8000e1c <HAL_InitTick>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
 8000e04:	e001      	b.n	8000e0a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e06:	f7ff ff3b 	bl	8000c80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b002      	add	sp, #8
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	40022000 	.word	0x40022000

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e24:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <HAL_InitTick+0x5c>)
 8000e26:	681c      	ldr	r4, [r3, #0]
 8000e28:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <HAL_InitTick+0x60>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	23fa      	movs	r3, #250	@ 0xfa
 8000e30:	0098      	lsls	r0, r3, #2
 8000e32:	f7ff f969 	bl	8000108 <__udivsi3>
 8000e36:	0003      	movs	r3, r0
 8000e38:	0019      	movs	r1, r3
 8000e3a:	0020      	movs	r0, r4
 8000e3c:	f7ff f964 	bl	8000108 <__udivsi3>
 8000e40:	0003      	movs	r3, r0
 8000e42:	0018      	movs	r0, r3
 8000e44:	f000 f905 	bl	8001052 <HAL_SYSTICK_Config>
 8000e48:	1e03      	subs	r3, r0, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e00f      	b.n	8000e70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d80b      	bhi.n	8000e6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	425b      	negs	r3, r3
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 f8e2 	bl	8001028 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <HAL_InitTick+0x64>)
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b003      	add	sp, #12
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	20000010 	.word	0x20000010
 8000e7c:	20000018 	.word	0x20000018
 8000e80:	20000014 	.word	0x20000014

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <HAL_IncTick+0x1c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <HAL_IncTick+0x20>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	18d2      	adds	r2, r2, r3
 8000e94:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <HAL_IncTick+0x20>)
 8000e96:	601a      	str	r2, [r3, #0]
}
 8000e98:	46c0      	nop			@ (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	20000018 	.word	0x20000018
 8000ea4:	2000007c 	.word	0x2000007c

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b02      	ldr	r3, [pc, #8]	@ (8000eb8 <HAL_GetTick+0x10>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	2000007c 	.word	0x2000007c

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff fff0 	bl	8000ea8 <HAL_GetTick>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_Delay+0x44>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	001a      	movs	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	189b      	adds	r3, r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	f7ff ffe0 	bl	8000ea8 <HAL_GetTick>
 8000ee8:	0002      	movs	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	46c0      	nop			@ (mov r8, r8)
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b004      	add	sp, #16
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	20000018 	.word	0x20000018

08000f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f18:	d828      	bhi.n	8000f6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd8 <__NVIC_SetPriority+0xd4>)
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	33c0      	adds	r3, #192	@ 0xc0
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	589b      	ldr	r3, [r3, r2]
 8000f2a:	1dfa      	adds	r2, r7, #7
 8000f2c:	7812      	ldrb	r2, [r2, #0]
 8000f2e:	0011      	movs	r1, r2
 8000f30:	2203      	movs	r2, #3
 8000f32:	400a      	ands	r2, r1
 8000f34:	00d2      	lsls	r2, r2, #3
 8000f36:	21ff      	movs	r1, #255	@ 0xff
 8000f38:	4091      	lsls	r1, r2
 8000f3a:	000a      	movs	r2, r1
 8000f3c:	43d2      	mvns	r2, r2
 8000f3e:	401a      	ands	r2, r3
 8000f40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	019b      	lsls	r3, r3, #6
 8000f46:	22ff      	movs	r2, #255	@ 0xff
 8000f48:	401a      	ands	r2, r3
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	0018      	movs	r0, r3
 8000f50:	2303      	movs	r3, #3
 8000f52:	4003      	ands	r3, r0
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f58:	481f      	ldr	r0, [pc, #124]	@ (8000fd8 <__NVIC_SetPriority+0xd4>)
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	430a      	orrs	r2, r1
 8000f64:	33c0      	adds	r3, #192	@ 0xc0
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f6a:	e031      	b.n	8000fd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fdc <__NVIC_SetPriority+0xd8>)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	0019      	movs	r1, r3
 8000f74:	230f      	movs	r3, #15
 8000f76:	400b      	ands	r3, r1
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3306      	adds	r3, #6
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	18d3      	adds	r3, r2, r3
 8000f82:	3304      	adds	r3, #4
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	1dfa      	adds	r2, r7, #7
 8000f88:	7812      	ldrb	r2, [r2, #0]
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	400a      	ands	r2, r1
 8000f90:	00d2      	lsls	r2, r2, #3
 8000f92:	21ff      	movs	r1, #255	@ 0xff
 8000f94:	4091      	lsls	r1, r2
 8000f96:	000a      	movs	r2, r1
 8000f98:	43d2      	mvns	r2, r2
 8000f9a:	401a      	ands	r2, r3
 8000f9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	019b      	lsls	r3, r3, #6
 8000fa2:	22ff      	movs	r2, #255	@ 0xff
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	0018      	movs	r0, r3
 8000fac:	2303      	movs	r3, #3
 8000fae:	4003      	ands	r3, r0
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb4:	4809      	ldr	r0, [pc, #36]	@ (8000fdc <__NVIC_SetPriority+0xd8>)
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	001c      	movs	r4, r3
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	4023      	ands	r3, r4
 8000fc0:	3b08      	subs	r3, #8
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	3306      	adds	r3, #6
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	18c3      	adds	r3, r0, r3
 8000fcc:	3304      	adds	r3, #4
 8000fce:	601a      	str	r2, [r3, #0]
}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b003      	add	sp, #12
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	1e5a      	subs	r2, r3, #1
 8000fec:	2380      	movs	r3, #128	@ 0x80
 8000fee:	045b      	lsls	r3, r3, #17
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d301      	bcc.n	8000ff8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e010      	b.n	800101a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <SysTick_Config+0x44>)
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	3a01      	subs	r2, #1
 8000ffe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001000:	2301      	movs	r3, #1
 8001002:	425b      	negs	r3, r3
 8001004:	2103      	movs	r1, #3
 8001006:	0018      	movs	r0, r3
 8001008:	f7ff ff7c 	bl	8000f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <SysTick_Config+0x44>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <SysTick_Config+0x44>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	0018      	movs	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	210f      	movs	r1, #15
 8001034:	187b      	adds	r3, r7, r1
 8001036:	1c02      	adds	r2, r0, #0
 8001038:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	187b      	adds	r3, r7, r1
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b25b      	sxtb	r3, r3
 8001042:	0011      	movs	r1, r2
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff ff5d 	bl	8000f04 <__NVIC_SetPriority>
}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff ffbf 	bl	8000fe0 <SysTick_Config>
 8001062:	0003      	movs	r3, r0
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001082:	e14f      	b.n	8001324 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4091      	lsls	r1, r2
 800108e:	000a      	movs	r2, r1
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d100      	bne.n	800109c <HAL_GPIO_Init+0x30>
 800109a:	e140      	b.n	800131e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d005      	beq.n	80010b4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d130      	bne.n	8001116 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	409a      	lsls	r2, r3
 80010c2:	0013      	movs	r3, r2
 80010c4:	43da      	mvns	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	409a      	lsls	r2, r3
 80010d6:	0013      	movs	r3, r2
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ea:	2201      	movs	r2, #1
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	091b      	lsrs	r3, r3, #4
 8001100:	2201      	movs	r2, #1
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2203      	movs	r2, #3
 800111c:	4013      	ands	r3, r2
 800111e:	2b03      	cmp	r3, #3
 8001120:	d017      	beq.n	8001152 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	43da      	mvns	r2, r3
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	409a      	lsls	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2203      	movs	r2, #3
 8001158:	4013      	ands	r3, r2
 800115a:	2b02      	cmp	r3, #2
 800115c:	d123      	bne.n	80011a6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	58d3      	ldr	r3, [r2, r3]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2207      	movs	r2, #7
 8001170:	4013      	ands	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	409a      	lsls	r2, r3
 8001178:	0013      	movs	r3, r2
 800117a:	43da      	mvns	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2107      	movs	r1, #7
 800118a:	400b      	ands	r3, r1
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	6939      	ldr	r1, [r7, #16]
 80011a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2203      	movs	r2, #3
 80011c4:	401a      	ands	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	23c0      	movs	r3, #192	@ 0xc0
 80011e0:	029b      	lsls	r3, r3, #10
 80011e2:	4013      	ands	r3, r2
 80011e4:	d100      	bne.n	80011e8 <HAL_GPIO_Init+0x17c>
 80011e6:	e09a      	b.n	800131e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e8:	4b54      	ldr	r3, [pc, #336]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 80011ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011ec:	4b53      	ldr	r3, [pc, #332]	@ (800133c <HAL_GPIO_Init+0x2d0>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f4:	4a52      	ldr	r2, [pc, #328]	@ (8001340 <HAL_GPIO_Init+0x2d4>)
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	3302      	adds	r3, #2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	589b      	ldr	r3, [r3, r2]
 8001200:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2203      	movs	r2, #3
 8001206:	4013      	ands	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	409a      	lsls	r2, r3
 800120e:	0013      	movs	r3, r2
 8001210:	43da      	mvns	r2, r3
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	23a0      	movs	r3, #160	@ 0xa0
 800121c:	05db      	lsls	r3, r3, #23
 800121e:	429a      	cmp	r2, r3
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x1ea>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a47      	ldr	r2, [pc, #284]	@ (8001344 <HAL_GPIO_Init+0x2d8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x1e6>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a46      	ldr	r2, [pc, #280]	@ (8001348 <HAL_GPIO_Init+0x2dc>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x1e2>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a45      	ldr	r2, [pc, #276]	@ (800134c <HAL_GPIO_Init+0x2e0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x1de>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a44      	ldr	r2, [pc, #272]	@ (8001350 <HAL_GPIO_Init+0x2e4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x1da>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x1ec>
 8001246:	2306      	movs	r3, #6
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x1ec>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x1ec>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x1ec>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x1ec>
 8001256:	2300      	movs	r3, #0
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	2103      	movs	r1, #3
 800125c:	400a      	ands	r2, r1
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	@ (8001340 <HAL_GPIO_Init+0x2d4>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001276:	4b37      	ldr	r3, [pc, #220]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43da      	mvns	r2, r3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	035b      	lsls	r3, r3, #13
 800128e:	4013      	ands	r3, r2
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800129a:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43da      	mvns	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	039b      	lsls	r3, r3, #14
 80012b8:	4013      	ands	r3, r2
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012c4:	4b23      	ldr	r3, [pc, #140]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80012ca:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43da      	mvns	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	2380      	movs	r3, #128	@ 0x80
 80012e0:	029b      	lsls	r3, r3, #10
 80012e2:	4013      	ands	r3, r2
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f4:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43da      	mvns	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	2380      	movs	r3, #128	@ 0x80
 800130a:	025b      	lsls	r3, r3, #9
 800130c:	4013      	ands	r3, r2
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001318:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <HAL_GPIO_Init+0x2e8>)
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	40da      	lsrs	r2, r3
 800132c:	1e13      	subs	r3, r2, #0
 800132e:	d000      	beq.n	8001332 <HAL_GPIO_Init+0x2c6>
 8001330:	e6a8      	b.n	8001084 <HAL_GPIO_Init+0x18>
  }
}
 8001332:	46c0      	nop			@ (mov r8, r8)
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b006      	add	sp, #24
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000
 8001344:	50000400 	.word	0x50000400
 8001348:	50000800 	.word	0x50000800
 800134c:	50000c00 	.word	0x50000c00
 8001350:	50001c00 	.word	0x50001c00
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	000a      	movs	r2, r1
 8001362:	1cbb      	adds	r3, r7, #2
 8001364:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	1cba      	adds	r2, r7, #2
 800136c:	8812      	ldrh	r2, [r2, #0]
 800136e:	4013      	ands	r3, r2
 8001370:	d004      	beq.n	800137c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001372:	230f      	movs	r3, #15
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	e003      	b.n	8001384 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800137c:	230f      	movs	r3, #15
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001384:	230f      	movs	r3, #15
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	781b      	ldrb	r3, [r3, #0]
}
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	0008      	movs	r0, r1
 800139c:	0011      	movs	r1, r2
 800139e:	1cbb      	adds	r3, r7, #2
 80013a0:	1c02      	adds	r2, r0, #0
 80013a2:	801a      	strh	r2, [r3, #0]
 80013a4:	1c7b      	adds	r3, r7, #1
 80013a6:	1c0a      	adds	r2, r1, #0
 80013a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013aa:	1c7b      	adds	r3, r7, #1
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b2:	1cbb      	adds	r3, r7, #2
 80013b4:	881a      	ldrh	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013ba:	e003      	b.n	80013c4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80013bc:	1cbb      	adds	r3, r7, #2
 80013be:	881a      	ldrh	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013c4:	46c0      	nop			@ (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013cc:	b5b0      	push	{r4, r5, r7, lr}
 80013ce:	b08a      	sub	sp, #40	@ 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	f000 fbaf 	bl	8001b3e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e0:	4bcf      	ldr	r3, [pc, #828]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	220c      	movs	r2, #12
 80013e6:	4013      	ands	r3, r2
 80013e8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ea:	4bcd      	ldr	r3, [pc, #820]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	2380      	movs	r3, #128	@ 0x80
 80013f0:	025b      	lsls	r3, r3, #9
 80013f2:	4013      	ands	r3, r2
 80013f4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2201      	movs	r2, #1
 80013fc:	4013      	ands	r3, r2
 80013fe:	d100      	bne.n	8001402 <HAL_RCC_OscConfig+0x36>
 8001400:	e07e      	b.n	8001500 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2b08      	cmp	r3, #8
 8001406:	d007      	beq.n	8001418 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	2b0c      	cmp	r3, #12
 800140c:	d112      	bne.n	8001434 <HAL_RCC_OscConfig+0x68>
 800140e:	69fa      	ldr	r2, [r7, #28]
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	025b      	lsls	r3, r3, #9
 8001414:	429a      	cmp	r2, r3
 8001416:	d10d      	bne.n	8001434 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	4bc1      	ldr	r3, [pc, #772]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	@ 0x80
 800141e:	029b      	lsls	r3, r3, #10
 8001420:	4013      	ands	r3, r2
 8001422:	d100      	bne.n	8001426 <HAL_RCC_OscConfig+0x5a>
 8001424:	e06b      	b.n	80014fe <HAL_RCC_OscConfig+0x132>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d167      	bne.n	80014fe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	f000 fb85 	bl	8001b3e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	429a      	cmp	r2, r3
 800143e:	d107      	bne.n	8001450 <HAL_RCC_OscConfig+0x84>
 8001440:	4bb7      	ldr	r3, [pc, #732]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4bb6      	ldr	r3, [pc, #728]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001446:	2180      	movs	r1, #128	@ 0x80
 8001448:	0249      	lsls	r1, r1, #9
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e027      	b.n	80014a0 <HAL_RCC_OscConfig+0xd4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	23a0      	movs	r3, #160	@ 0xa0
 8001456:	02db      	lsls	r3, r3, #11
 8001458:	429a      	cmp	r2, r3
 800145a:	d10e      	bne.n	800147a <HAL_RCC_OscConfig+0xae>
 800145c:	4bb0      	ldr	r3, [pc, #704]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4baf      	ldr	r3, [pc, #700]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001462:	2180      	movs	r1, #128	@ 0x80
 8001464:	02c9      	lsls	r1, r1, #11
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	4bad      	ldr	r3, [pc, #692]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4bac      	ldr	r3, [pc, #688]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001470:	2180      	movs	r1, #128	@ 0x80
 8001472:	0249      	lsls	r1, r1, #9
 8001474:	430a      	orrs	r2, r1
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e012      	b.n	80014a0 <HAL_RCC_OscConfig+0xd4>
 800147a:	4ba9      	ldr	r3, [pc, #676]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4ba8      	ldr	r3, [pc, #672]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001480:	49a8      	ldr	r1, [pc, #672]	@ (8001724 <HAL_RCC_OscConfig+0x358>)
 8001482:	400a      	ands	r2, r1
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	4ba6      	ldr	r3, [pc, #664]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	2380      	movs	r3, #128	@ 0x80
 800148c:	025b      	lsls	r3, r3, #9
 800148e:	4013      	ands	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4ba2      	ldr	r3, [pc, #648]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4ba1      	ldr	r3, [pc, #644]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 800149a:	49a3      	ldr	r1, [pc, #652]	@ (8001728 <HAL_RCC_OscConfig+0x35c>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d015      	beq.n	80014d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fcfe 	bl	8000ea8 <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014b0:	e009      	b.n	80014c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b2:	f7ff fcf9 	bl	8000ea8 <HAL_GetTick>
 80014b6:	0002      	movs	r2, r0
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b64      	cmp	r3, #100	@ 0x64
 80014be:	d902      	bls.n	80014c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	f000 fb3c 	bl	8001b3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014c6:	4b96      	ldr	r3, [pc, #600]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	029b      	lsls	r3, r3, #10
 80014ce:	4013      	ands	r3, r2
 80014d0:	d0ef      	beq.n	80014b2 <HAL_RCC_OscConfig+0xe6>
 80014d2:	e015      	b.n	8001500 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fce8 	bl	8000ea8 <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014de:	f7ff fce3 	bl	8000ea8 <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b64      	cmp	r3, #100	@ 0x64
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e326      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014f0:	4b8b      	ldr	r3, [pc, #556]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2380      	movs	r3, #128	@ 0x80
 80014f6:	029b      	lsls	r3, r3, #10
 80014f8:	4013      	ands	r3, r2
 80014fa:	d1f0      	bne.n	80014de <HAL_RCC_OscConfig+0x112>
 80014fc:	e000      	b.n	8001500 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2202      	movs	r2, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d100      	bne.n	800150c <HAL_RCC_OscConfig+0x140>
 800150a:	e08b      	b.n	8001624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	2b04      	cmp	r3, #4
 8001516:	d005      	beq.n	8001524 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	2b0c      	cmp	r3, #12
 800151c:	d13e      	bne.n	800159c <HAL_RCC_OscConfig+0x1d0>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d13b      	bne.n	800159c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001524:	4b7e      	ldr	r3, [pc, #504]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2204      	movs	r2, #4
 800152a:	4013      	ands	r3, r2
 800152c:	d004      	beq.n	8001538 <HAL_RCC_OscConfig+0x16c>
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e302      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001538:	4b79      	ldr	r3, [pc, #484]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4a7b      	ldr	r2, [pc, #492]	@ (800172c <HAL_RCC_OscConfig+0x360>)
 800153e:	4013      	ands	r3, r2
 8001540:	0019      	movs	r1, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	021a      	lsls	r2, r3, #8
 8001548:	4b75      	ldr	r3, [pc, #468]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800154e:	4b74      	ldr	r3, [pc, #464]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2209      	movs	r2, #9
 8001554:	4393      	bics	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	4b71      	ldr	r3, [pc, #452]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	430a      	orrs	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001560:	f000 fc40 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001564:	0001      	movs	r1, r0
 8001566:	4b6e      	ldr	r3, [pc, #440]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	220f      	movs	r2, #15
 800156e:	4013      	ands	r3, r2
 8001570:	4a6f      	ldr	r2, [pc, #444]	@ (8001730 <HAL_RCC_OscConfig+0x364>)
 8001572:	5cd3      	ldrb	r3, [r2, r3]
 8001574:	000a      	movs	r2, r1
 8001576:	40da      	lsrs	r2, r3
 8001578:	4b6e      	ldr	r3, [pc, #440]	@ (8001734 <HAL_RCC_OscConfig+0x368>)
 800157a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800157c:	4b6e      	ldr	r3, [pc, #440]	@ (8001738 <HAL_RCC_OscConfig+0x36c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2513      	movs	r5, #19
 8001582:	197c      	adds	r4, r7, r5
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff fc49 	bl	8000e1c <HAL_InitTick>
 800158a:	0003      	movs	r3, r0
 800158c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800158e:	197b      	adds	r3, r7, r5
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d046      	beq.n	8001624 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001596:	197b      	adds	r3, r7, r5
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	e2d0      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d027      	beq.n	80015f2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2209      	movs	r2, #9
 80015a8:	4393      	bics	r3, r2
 80015aa:	0019      	movs	r1, r3
 80015ac:	4b5c      	ldr	r3, [pc, #368]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fc78 	bl	8000ea8 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff fc73 	bl	8000ea8 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e2b6      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015d0:	4b53      	ldr	r3, [pc, #332]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2204      	movs	r2, #4
 80015d6:	4013      	ands	r3, r2
 80015d8:	d0f1      	beq.n	80015be <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015da:	4b51      	ldr	r3, [pc, #324]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4a53      	ldr	r2, [pc, #332]	@ (800172c <HAL_RCC_OscConfig+0x360>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	0019      	movs	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	021a      	lsls	r2, r3, #8
 80015ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80015ec:	430a      	orrs	r2, r1
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	e018      	b.n	8001624 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80015f8:	2101      	movs	r1, #1
 80015fa:	438a      	bics	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fc53 	bl	8000ea8 <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001608:	f7ff fc4e 	bl	8000ea8 <HAL_GetTick>
 800160c:	0002      	movs	r2, r0
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e291      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800161a:	4b41      	ldr	r3, [pc, #260]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2204      	movs	r2, #4
 8001620:	4013      	ands	r3, r2
 8001622:	d1f1      	bne.n	8001608 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2210      	movs	r2, #16
 800162a:	4013      	ands	r3, r2
 800162c:	d100      	bne.n	8001630 <HAL_RCC_OscConfig+0x264>
 800162e:	e0a1      	b.n	8001774 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d140      	bne.n	80016b8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001636:	4b3a      	ldr	r3, [pc, #232]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	2380      	movs	r3, #128	@ 0x80
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d005      	beq.n	800164e <HAL_RCC_OscConfig+0x282>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e277      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800164e:	4b34      	ldr	r3, [pc, #208]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	4a3a      	ldr	r2, [pc, #232]	@ (800173c <HAL_RCC_OscConfig+0x370>)
 8001654:	4013      	ands	r3, r2
 8001656:	0019      	movs	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800165c:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001662:	4b2f      	ldr	r3, [pc, #188]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	0a19      	lsrs	r1, r3, #8
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	061a      	lsls	r2, r3, #24
 8001670:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001672:	430a      	orrs	r2, r1
 8001674:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167a:	0b5b      	lsrs	r3, r3, #13
 800167c:	3301      	adds	r3, #1
 800167e:	2280      	movs	r2, #128	@ 0x80
 8001680:	0212      	lsls	r2, r2, #8
 8001682:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001684:	4b26      	ldr	r3, [pc, #152]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	091b      	lsrs	r3, r3, #4
 800168a:	210f      	movs	r1, #15
 800168c:	400b      	ands	r3, r1
 800168e:	4928      	ldr	r1, [pc, #160]	@ (8001730 <HAL_RCC_OscConfig+0x364>)
 8001690:	5ccb      	ldrb	r3, [r1, r3]
 8001692:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001694:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <HAL_RCC_OscConfig+0x368>)
 8001696:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001698:	4b27      	ldr	r3, [pc, #156]	@ (8001738 <HAL_RCC_OscConfig+0x36c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2513      	movs	r5, #19
 800169e:	197c      	adds	r4, r7, r5
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff fbbb 	bl	8000e1c <HAL_InitTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80016aa:	197b      	adds	r3, r7, r5
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d060      	beq.n	8001774 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80016b2:	197b      	adds	r3, r7, r5
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	e242      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d03f      	beq.n	8001740 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016c0:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b16      	ldr	r3, [pc, #88]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	0049      	lsls	r1, r1, #1
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff fbeb 	bl	8000ea8 <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016d8:	f7ff fbe6 	bl	8000ea8 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e229      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	@ 0x80
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a10      	ldr	r2, [pc, #64]	@ (800173c <HAL_RCC_OscConfig+0x370>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	0019      	movs	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 8001706:	430a      	orrs	r2, r1
 8001708:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800170a:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	0a19      	lsrs	r1, r3, #8
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	061a      	lsls	r2, r3, #24
 8001718:	4b01      	ldr	r3, [pc, #4]	@ (8001720 <HAL_RCC_OscConfig+0x354>)
 800171a:	430a      	orrs	r2, r1
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	e029      	b.n	8001774 <HAL_RCC_OscConfig+0x3a8>
 8001720:	40021000 	.word	0x40021000
 8001724:	fffeffff 	.word	0xfffeffff
 8001728:	fffbffff 	.word	0xfffbffff
 800172c:	ffffe0ff 	.word	0xffffe0ff
 8001730:	080029f8 	.word	0x080029f8
 8001734:	20000010 	.word	0x20000010
 8001738:	20000014 	.word	0x20000014
 800173c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001740:	4bbd      	ldr	r3, [pc, #756]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4bbc      	ldr	r3, [pc, #752]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001746:	49bd      	ldr	r1, [pc, #756]	@ (8001a3c <HAL_RCC_OscConfig+0x670>)
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fbac 	bl	8000ea8 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001756:	f7ff fba7 	bl	8000ea8 <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1ea      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001768:	4bb3      	ldr	r3, [pc, #716]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4013      	ands	r3, r2
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2208      	movs	r2, #8
 800177a:	4013      	ands	r3, r2
 800177c:	d036      	beq.n	80017ec <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d019      	beq.n	80017ba <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001786:	4bac      	ldr	r3, [pc, #688]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001788:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800178a:	4bab      	ldr	r3, [pc, #684]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 800178c:	2101      	movs	r1, #1
 800178e:	430a      	orrs	r2, r1
 8001790:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001792:	f7ff fb89 	bl	8000ea8 <HAL_GetTick>
 8001796:	0003      	movs	r3, r0
 8001798:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179c:	f7ff fb84 	bl	8000ea8 <HAL_GetTick>
 80017a0:	0002      	movs	r2, r0
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1c7      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017ae:	4ba2      	ldr	r3, [pc, #648]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80017b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017b2:	2202      	movs	r2, #2
 80017b4:	4013      	ands	r3, r2
 80017b6:	d0f1      	beq.n	800179c <HAL_RCC_OscConfig+0x3d0>
 80017b8:	e018      	b.n	80017ec <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ba:	4b9f      	ldr	r3, [pc, #636]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80017bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017be:	4b9e      	ldr	r3, [pc, #632]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80017c0:	2101      	movs	r1, #1
 80017c2:	438a      	bics	r2, r1
 80017c4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fb6f 	bl	8000ea8 <HAL_GetTick>
 80017ca:	0003      	movs	r3, r0
 80017cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d0:	f7ff fb6a 	bl	8000ea8 <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e1ad      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017e2:	4b95      	ldr	r3, [pc, #596]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80017e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017e6:	2202      	movs	r2, #2
 80017e8:	4013      	ands	r3, r2
 80017ea:	d1f1      	bne.n	80017d0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2204      	movs	r2, #4
 80017f2:	4013      	ands	r3, r2
 80017f4:	d100      	bne.n	80017f8 <HAL_RCC_OscConfig+0x42c>
 80017f6:	e0ae      	b.n	8001956 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f8:	2027      	movs	r0, #39	@ 0x27
 80017fa:	183b      	adds	r3, r7, r0
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001800:	4b8d      	ldr	r3, [pc, #564]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	055b      	lsls	r3, r3, #21
 8001808:	4013      	ands	r3, r2
 800180a:	d109      	bne.n	8001820 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	4b8a      	ldr	r3, [pc, #552]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 800180e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001810:	4b89      	ldr	r3, [pc, #548]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001812:	2180      	movs	r1, #128	@ 0x80
 8001814:	0549      	lsls	r1, r1, #21
 8001816:	430a      	orrs	r2, r1
 8001818:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800181a:	183b      	adds	r3, r7, r0
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	4b87      	ldr	r3, [pc, #540]	@ (8001a40 <HAL_RCC_OscConfig+0x674>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4013      	ands	r3, r2
 800182a:	d11a      	bne.n	8001862 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182c:	4b84      	ldr	r3, [pc, #528]	@ (8001a40 <HAL_RCC_OscConfig+0x674>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b83      	ldr	r3, [pc, #524]	@ (8001a40 <HAL_RCC_OscConfig+0x674>)
 8001832:	2180      	movs	r1, #128	@ 0x80
 8001834:	0049      	lsls	r1, r1, #1
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183a:	f7ff fb35 	bl	8000ea8 <HAL_GetTick>
 800183e:	0003      	movs	r3, r0
 8001840:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001844:	f7ff fb30 	bl	8000ea8 <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	@ 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e173      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b7a      	ldr	r3, [pc, #488]	@ (8001a40 <HAL_RCC_OscConfig+0x674>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	2380      	movs	r3, #128	@ 0x80
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4013      	ands	r3, r2
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	2380      	movs	r3, #128	@ 0x80
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	429a      	cmp	r2, r3
 800186c:	d107      	bne.n	800187e <HAL_RCC_OscConfig+0x4b2>
 800186e:	4b72      	ldr	r3, [pc, #456]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001870:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001872:	4b71      	ldr	r3, [pc, #452]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001874:	2180      	movs	r1, #128	@ 0x80
 8001876:	0049      	lsls	r1, r1, #1
 8001878:	430a      	orrs	r2, r1
 800187a:	651a      	str	r2, [r3, #80]	@ 0x50
 800187c:	e031      	b.n	80018e2 <HAL_RCC_OscConfig+0x516>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4d4>
 8001886:	4b6c      	ldr	r3, [pc, #432]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001888:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800188a:	4b6b      	ldr	r3, [pc, #428]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 800188c:	496b      	ldr	r1, [pc, #428]	@ (8001a3c <HAL_RCC_OscConfig+0x670>)
 800188e:	400a      	ands	r2, r1
 8001890:	651a      	str	r2, [r3, #80]	@ 0x50
 8001892:	4b69      	ldr	r3, [pc, #420]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001894:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001896:	4b68      	ldr	r3, [pc, #416]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001898:	496a      	ldr	r1, [pc, #424]	@ (8001a44 <HAL_RCC_OscConfig+0x678>)
 800189a:	400a      	ands	r2, r1
 800189c:	651a      	str	r2, [r3, #80]	@ 0x50
 800189e:	e020      	b.n	80018e2 <HAL_RCC_OscConfig+0x516>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	23a0      	movs	r3, #160	@ 0xa0
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d10e      	bne.n	80018ca <HAL_RCC_OscConfig+0x4fe>
 80018ac:	4b62      	ldr	r3, [pc, #392]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80018ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018b0:	4b61      	ldr	r3, [pc, #388]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80018b2:	2180      	movs	r1, #128	@ 0x80
 80018b4:	00c9      	lsls	r1, r1, #3
 80018b6:	430a      	orrs	r2, r1
 80018b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80018ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80018bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018be:	4b5e      	ldr	r3, [pc, #376]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80018c0:	2180      	movs	r1, #128	@ 0x80
 80018c2:	0049      	lsls	r1, r1, #1
 80018c4:	430a      	orrs	r2, r1
 80018c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80018c8:	e00b      	b.n	80018e2 <HAL_RCC_OscConfig+0x516>
 80018ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80018cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018ce:	4b5a      	ldr	r3, [pc, #360]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80018d0:	495a      	ldr	r1, [pc, #360]	@ (8001a3c <HAL_RCC_OscConfig+0x670>)
 80018d2:	400a      	ands	r2, r1
 80018d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80018d6:	4b58      	ldr	r3, [pc, #352]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80018d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018da:	4b57      	ldr	r3, [pc, #348]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80018dc:	4959      	ldr	r1, [pc, #356]	@ (8001a44 <HAL_RCC_OscConfig+0x678>)
 80018de:	400a      	ands	r2, r1
 80018e0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d015      	beq.n	8001916 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ea:	f7ff fadd 	bl	8000ea8 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018f2:	e009      	b.n	8001908 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff fad8 	bl	8000ea8 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	4a52      	ldr	r2, [pc, #328]	@ (8001a48 <HAL_RCC_OscConfig+0x67c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e11a      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001908:	4b4b      	ldr	r3, [pc, #300]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 800190a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800190c:	2380      	movs	r3, #128	@ 0x80
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4013      	ands	r3, r2
 8001912:	d0ef      	beq.n	80018f4 <HAL_RCC_OscConfig+0x528>
 8001914:	e014      	b.n	8001940 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001916:	f7ff fac7 	bl	8000ea8 <HAL_GetTick>
 800191a:	0003      	movs	r3, r0
 800191c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800191e:	e009      	b.n	8001934 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f7ff fac2 	bl	8000ea8 <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	4a47      	ldr	r2, [pc, #284]	@ (8001a48 <HAL_RCC_OscConfig+0x67c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e104      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001934:	4b40      	ldr	r3, [pc, #256]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001936:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001938:	2380      	movs	r3, #128	@ 0x80
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4013      	ands	r3, r2
 800193e:	d1ef      	bne.n	8001920 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001940:	2327      	movs	r3, #39	@ 0x27
 8001942:	18fb      	adds	r3, r7, r3
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d105      	bne.n	8001956 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 800194c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800194e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001950:	493e      	ldr	r1, [pc, #248]	@ (8001a4c <HAL_RCC_OscConfig+0x680>)
 8001952:	400a      	ands	r2, r1
 8001954:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2220      	movs	r2, #32
 800195c:	4013      	ands	r3, r2
 800195e:	d049      	beq.n	80019f4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d026      	beq.n	80019b6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001968:	4b33      	ldr	r3, [pc, #204]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	4b32      	ldr	r3, [pc, #200]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 800196e:	2101      	movs	r1, #1
 8001970:	430a      	orrs	r2, r1
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	4b30      	ldr	r3, [pc, #192]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001976:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001978:	4b2f      	ldr	r3, [pc, #188]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 800197a:	2101      	movs	r1, #1
 800197c:	430a      	orrs	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001980:	4b33      	ldr	r3, [pc, #204]	@ (8001a50 <HAL_RCC_OscConfig+0x684>)
 8001982:	6a1a      	ldr	r2, [r3, #32]
 8001984:	4b32      	ldr	r3, [pc, #200]	@ (8001a50 <HAL_RCC_OscConfig+0x684>)
 8001986:	2180      	movs	r1, #128	@ 0x80
 8001988:	0189      	lsls	r1, r1, #6
 800198a:	430a      	orrs	r2, r1
 800198c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff fa8b 	bl	8000ea8 <HAL_GetTick>
 8001992:	0003      	movs	r3, r0
 8001994:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001998:	f7ff fa86 	bl	8000ea8 <HAL_GetTick>
 800199c:	0002      	movs	r2, r0
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e0c9      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019aa:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2202      	movs	r2, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	d0f1      	beq.n	8001998 <HAL_RCC_OscConfig+0x5cc>
 80019b4:	e01e      	b.n	80019f4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80019b6:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80019bc:	2101      	movs	r1, #1
 80019be:	438a      	bics	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <HAL_RCC_OscConfig+0x684>)
 80019c4:	6a1a      	ldr	r2, [r3, #32]
 80019c6:	4b22      	ldr	r3, [pc, #136]	@ (8001a50 <HAL_RCC_OscConfig+0x684>)
 80019c8:	4922      	ldr	r1, [pc, #136]	@ (8001a54 <HAL_RCC_OscConfig+0x688>)
 80019ca:	400a      	ands	r2, r1
 80019cc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7ff fa6b 	bl	8000ea8 <HAL_GetTick>
 80019d2:	0003      	movs	r3, r0
 80019d4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019d8:	f7ff fa66 	bl	8000ea8 <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0a9      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019ea:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2202      	movs	r2, #2
 80019f0:	4013      	ands	r3, r2
 80019f2:	d1f1      	bne.n	80019d8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d100      	bne.n	80019fe <HAL_RCC_OscConfig+0x632>
 80019fc:	e09e      	b.n	8001b3c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	d100      	bne.n	8001a06 <HAL_RCC_OscConfig+0x63a>
 8001a04:	e077      	b.n	8001af6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d158      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_RCC_OscConfig+0x66c>)
 8001a14:	4910      	ldr	r1, [pc, #64]	@ (8001a58 <HAL_RCC_OscConfig+0x68c>)
 8001a16:	400a      	ands	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fa45 	bl	8000ea8 <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a22:	e01b      	b.n	8001a5c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff fa40 	bl	8000ea8 <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d914      	bls.n	8001a5c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e083      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	fffffeff 	.word	0xfffffeff
 8001a40:	40007000 	.word	0x40007000
 8001a44:	fffffbff 	.word	0xfffffbff
 8001a48:	00001388 	.word	0x00001388
 8001a4c:	efffffff 	.word	0xefffffff
 8001a50:	40010000 	.word	0x40010000
 8001a54:	ffffdfff 	.word	0xffffdfff
 8001a58:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b48 <HAL_RCC_OscConfig+0x77c>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	@ 0x80
 8001a62:	049b      	lsls	r3, r3, #18
 8001a64:	4013      	ands	r3, r2
 8001a66:	d1dd      	bne.n	8001a24 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a68:	4b37      	ldr	r3, [pc, #220]	@ (8001b48 <HAL_RCC_OscConfig+0x77c>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4a37      	ldr	r2, [pc, #220]	@ (8001b4c <HAL_RCC_OscConfig+0x780>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a80:	431a      	orrs	r2, r3
 8001a82:	4b31      	ldr	r3, [pc, #196]	@ (8001b48 <HAL_RCC_OscConfig+0x77c>)
 8001a84:	430a      	orrs	r2, r1
 8001a86:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a88:	4b2f      	ldr	r3, [pc, #188]	@ (8001b48 <HAL_RCC_OscConfig+0x77c>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001b48 <HAL_RCC_OscConfig+0x77c>)
 8001a8e:	2180      	movs	r1, #128	@ 0x80
 8001a90:	0449      	lsls	r1, r1, #17
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7ff fa07 	bl	8000ea8 <HAL_GetTick>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff fa02 	bl	8000ea8 <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e045      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ab2:	4b25      	ldr	r3, [pc, #148]	@ (8001b48 <HAL_RCC_OscConfig+0x77c>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2380      	movs	r3, #128	@ 0x80
 8001ab8:	049b      	lsls	r3, r3, #18
 8001aba:	4013      	ands	r3, r2
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x6d4>
 8001abe:	e03d      	b.n	8001b3c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac0:	4b21      	ldr	r3, [pc, #132]	@ (8001b48 <HAL_RCC_OscConfig+0x77c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4b20      	ldr	r3, [pc, #128]	@ (8001b48 <HAL_RCC_OscConfig+0x77c>)
 8001ac6:	4922      	ldr	r1, [pc, #136]	@ (8001b50 <HAL_RCC_OscConfig+0x784>)
 8001ac8:	400a      	ands	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff f9ec 	bl	8000ea8 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff f9e7 	bl	8000ea8 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e02a      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ae8:	4b17      	ldr	r3, [pc, #92]	@ (8001b48 <HAL_RCC_OscConfig+0x77c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	049b      	lsls	r3, r3, #18
 8001af0:	4013      	ands	r3, r2
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x70a>
 8001af4:	e022      	b.n	8001b3c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e01d      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b02:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <HAL_RCC_OscConfig+0x77c>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	2380      	movs	r3, #128	@ 0x80
 8001b0c:	025b      	lsls	r3, r3, #9
 8001b0e:	401a      	ands	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d10f      	bne.n	8001b38 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	23f0      	movs	r3, #240	@ 0xf0
 8001b1c:	039b      	lsls	r3, r3, #14
 8001b1e:	401a      	ands	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	23c0      	movs	r3, #192	@ 0xc0
 8001b2c:	041b      	lsls	r3, r3, #16
 8001b2e:	401a      	ands	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b00a      	add	sp, #40	@ 0x28
 8001b44:	bdb0      	pop	{r4, r5, r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	ff02ffff 	.word	0xff02ffff
 8001b50:	feffffff 	.word	0xfeffffff

08001b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b54:	b5b0      	push	{r4, r5, r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e128      	b.n	8001dba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b68:	4b96      	ldr	r3, [pc, #600]	@ (8001dc4 <HAL_RCC_ClockConfig+0x270>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4013      	ands	r3, r2
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d91e      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b93      	ldr	r3, [pc, #588]	@ (8001dc4 <HAL_RCC_ClockConfig+0x270>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4393      	bics	r3, r2
 8001b7e:	0019      	movs	r1, r3
 8001b80:	4b90      	ldr	r3, [pc, #576]	@ (8001dc4 <HAL_RCC_ClockConfig+0x270>)
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b88:	f7ff f98e 	bl	8000ea8 <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b90:	e009      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b92:	f7ff f989 	bl	8000ea8 <HAL_GetTick>
 8001b96:	0002      	movs	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	4a8a      	ldr	r2, [pc, #552]	@ (8001dc8 <HAL_RCC_ClockConfig+0x274>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e109      	b.n	8001dba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b87      	ldr	r3, [pc, #540]	@ (8001dc4 <HAL_RCC_ClockConfig+0x270>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	4013      	ands	r3, r2
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1ee      	bne.n	8001b92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bbe:	4b83      	ldr	r3, [pc, #524]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	22f0      	movs	r2, #240	@ 0xf0
 8001bc4:	4393      	bics	r3, r2
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	4b7f      	ldr	r3, [pc, #508]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d100      	bne.n	8001bde <HAL_RCC_ClockConfig+0x8a>
 8001bdc:	e089      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001be6:	4b79      	ldr	r3, [pc, #484]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	029b      	lsls	r3, r3, #10
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d120      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0e1      	b.n	8001dba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bfe:	4b73      	ldr	r3, [pc, #460]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	2380      	movs	r3, #128	@ 0x80
 8001c04:	049b      	lsls	r3, r3, #18
 8001c06:	4013      	ands	r3, r2
 8001c08:	d114      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e0d5      	b.n	8001dba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d106      	bne.n	8001c24 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c16:	4b6d      	ldr	r3, [pc, #436]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d109      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0ca      	b.n	8001dba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c24:	4b69      	ldr	r3, [pc, #420]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d101      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0c2      	b.n	8001dba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c34:	4b65      	ldr	r3, [pc, #404]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2203      	movs	r2, #3
 8001c3a:	4393      	bics	r3, r2
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	4b62      	ldr	r3, [pc, #392]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001c44:	430a      	orrs	r2, r1
 8001c46:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c48:	f7ff f92e 	bl	8000ea8 <HAL_GetTick>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d111      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c58:	e009      	b.n	8001c6e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5a:	f7ff f925 	bl	8000ea8 <HAL_GetTick>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	4a58      	ldr	r2, [pc, #352]	@ (8001dc8 <HAL_RCC_ClockConfig+0x274>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0a5      	b.n	8001dba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c6e:	4b57      	ldr	r3, [pc, #348]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	220c      	movs	r2, #12
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d1ef      	bne.n	8001c5a <HAL_RCC_ClockConfig+0x106>
 8001c7a:	e03a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d111      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c84:	e009      	b.n	8001c9a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c86:	f7ff f90f 	bl	8000ea8 <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	4a4d      	ldr	r2, [pc, #308]	@ (8001dc8 <HAL_RCC_ClockConfig+0x274>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e08f      	b.n	8001dba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9a:	4b4c      	ldr	r3, [pc, #304]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b0c      	cmp	r3, #12
 8001ca4:	d1ef      	bne.n	8001c86 <HAL_RCC_ClockConfig+0x132>
 8001ca6:	e024      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d11b      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb0:	e009      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb2:	f7ff f8f9 	bl	8000ea8 <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	4a42      	ldr	r2, [pc, #264]	@ (8001dc8 <HAL_RCC_ClockConfig+0x274>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e079      	b.n	8001dba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cc6:	4b41      	ldr	r3, [pc, #260]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	220c      	movs	r2, #12
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d1ef      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0x15e>
 8001cd2:	e00e      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd4:	f7ff f8e8 	bl	8000ea8 <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	4a3a      	ldr	r2, [pc, #232]	@ (8001dc8 <HAL_RCC_ClockConfig+0x274>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e068      	b.n	8001dba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ce8:	4b38      	ldr	r3, [pc, #224]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	220c      	movs	r2, #12
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf2:	4b34      	ldr	r3, [pc, #208]	@ (8001dc4 <HAL_RCC_ClockConfig+0x270>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d21e      	bcs.n	8001d3e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d00:	4b30      	ldr	r3, [pc, #192]	@ (8001dc4 <HAL_RCC_ClockConfig+0x270>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4393      	bics	r3, r2
 8001d08:	0019      	movs	r1, r3
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc4 <HAL_RCC_ClockConfig+0x270>)
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d12:	f7ff f8c9 	bl	8000ea8 <HAL_GetTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1a:	e009      	b.n	8001d30 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff f8c4 	bl	8000ea8 <HAL_GetTick>
 8001d20:	0002      	movs	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	4a28      	ldr	r2, [pc, #160]	@ (8001dc8 <HAL_RCC_ClockConfig+0x274>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e044      	b.n	8001dba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d30:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <HAL_RCC_ClockConfig+0x270>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d1ee      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2204      	movs	r2, #4
 8001d44:	4013      	ands	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d48:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a20      	ldr	r2, [pc, #128]	@ (8001dd0 <HAL_RCC_ClockConfig+0x27c>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	0019      	movs	r1, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	4b1d      	ldr	r3, [pc, #116]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2208      	movs	r2, #8
 8001d62:	4013      	ands	r3, r2
 8001d64:	d00a      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d66:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd4 <HAL_RCC_ClockConfig+0x280>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	0019      	movs	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	00da      	lsls	r2, r3, #3
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7c:	f000 f832 	bl	8001de4 <HAL_RCC_GetSysClockFreq>
 8001d80:	0001      	movs	r1, r0
 8001d82:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_RCC_ClockConfig+0x278>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	220f      	movs	r2, #15
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <HAL_RCC_ClockConfig+0x284>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	000a      	movs	r2, r1
 8001d92:	40da      	lsrs	r2, r3
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <HAL_RCC_ClockConfig+0x288>)
 8001d96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <HAL_RCC_ClockConfig+0x28c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	250b      	movs	r5, #11
 8001d9e:	197c      	adds	r4, r7, r5
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff f83b 	bl	8000e1c <HAL_InitTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001daa:	197b      	adds	r3, r7, r5
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001db2:	197b      	adds	r3, r7, r5
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	e000      	b.n	8001dba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	0018      	movs	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b004      	add	sp, #16
 8001dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc2:	46c0      	nop			@ (mov r8, r8)
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	00001388 	.word	0x00001388
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	fffff8ff 	.word	0xfffff8ff
 8001dd4:	ffffc7ff 	.word	0xffffc7ff
 8001dd8:	080029f8 	.word	0x080029f8
 8001ddc:	20000010 	.word	0x20000010
 8001de0:	20000014 	.word	0x20000014

08001de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de4:	b5b0      	push	{r4, r5, r7, lr}
 8001de6:	b08e      	sub	sp, #56	@ 0x38
 8001de8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001dea:	4b4c      	ldr	r3, [pc, #304]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001df2:	230c      	movs	r3, #12
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b0c      	cmp	r3, #12
 8001df8:	d014      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x40>
 8001dfa:	d900      	bls.n	8001dfe <HAL_RCC_GetSysClockFreq+0x1a>
 8001dfc:	e07b      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x112>
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d002      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x24>
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d00b      	beq.n	8001e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e06:	e076      	b.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e08:	4b44      	ldr	r3, [pc, #272]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d002      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e12:	4b43      	ldr	r3, [pc, #268]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e14:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e16:	e07c      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001e18:	4b42      	ldr	r3, [pc, #264]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e1a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001e1c:	e079      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e1e:	4b42      	ldr	r3, [pc, #264]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e20:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001e22:	e076      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e26:	0c9a      	lsrs	r2, r3, #18
 8001e28:	230f      	movs	r3, #15
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0x148>)
 8001e2e:	5c9b      	ldrb	r3, [r3, r2]
 8001e30:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e34:	0d9a      	lsrs	r2, r3, #22
 8001e36:	2303      	movs	r3, #3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e3e:	4b37      	ldr	r3, [pc, #220]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	2380      	movs	r3, #128	@ 0x80
 8001e44:	025b      	lsls	r3, r3, #9
 8001e46:	4013      	ands	r3, r2
 8001e48:	d01a      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	4a35      	ldr	r2, [pc, #212]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e54:	2300      	movs	r3, #0
 8001e56:	69b8      	ldr	r0, [r7, #24]
 8001e58:	69f9      	ldr	r1, [r7, #28]
 8001e5a:	f7fe fa01 	bl	8000260 <__aeabi_lmul>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	000b      	movs	r3, r1
 8001e62:	0010      	movs	r0, r2
 8001e64:	0019      	movs	r1, r3
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f7fe f9d5 	bl	8000220 <__aeabi_uldivmod>
 8001e76:	0002      	movs	r2, r0
 8001e78:	000b      	movs	r3, r1
 8001e7a:	0013      	movs	r3, r2
 8001e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e7e:	e037      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e80:	4b26      	ldr	r3, [pc, #152]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2210      	movs	r2, #16
 8001e86:	4013      	ands	r3, r2
 8001e88:	d01a      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4a23      	ldr	r2, [pc, #140]	@ (8001f20 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e94:	2300      	movs	r3, #0
 8001e96:	68b8      	ldr	r0, [r7, #8]
 8001e98:	68f9      	ldr	r1, [r7, #12]
 8001e9a:	f7fe f9e1 	bl	8000260 <__aeabi_lmul>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	000b      	movs	r3, r1
 8001ea2:	0010      	movs	r0, r2
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f7fe f9b5 	bl	8000220 <__aeabi_uldivmod>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	000b      	movs	r3, r1
 8001eba:	0013      	movs	r3, r2
 8001ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ebe:	e017      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	4a16      	ldr	r2, [pc, #88]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0x140>)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f7fe f9c8 	bl	8000260 <__aeabi_lmul>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	000b      	movs	r3, r1
 8001ed4:	0010      	movs	r0, r2
 8001ed6:	0019      	movs	r1, r3
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eda:	001c      	movs	r4, r3
 8001edc:	2300      	movs	r3, #0
 8001ede:	001d      	movs	r5, r3
 8001ee0:	0022      	movs	r2, r4
 8001ee2:	002b      	movs	r3, r5
 8001ee4:	f7fe f99c 	bl	8000220 <__aeabi_uldivmod>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	000b      	movs	r3, r1
 8001eec:	0013      	movs	r3, r2
 8001eee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ef2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001ef4:	e00d      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ef6:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0x138>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0b5b      	lsrs	r3, r3, #13
 8001efc:	2207      	movs	r2, #7
 8001efe:	4013      	ands	r3, r2
 8001f00:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	3301      	adds	r3, #1
 8001f06:	2280      	movs	r2, #128	@ 0x80
 8001f08:	0212      	lsls	r2, r2, #8
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f10:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b00e      	add	sp, #56	@ 0x38
 8001f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	003d0900 	.word	0x003d0900
 8001f24:	00f42400 	.word	0x00f42400
 8001f28:	007a1200 	.word	0x007a1200
 8001f2c:	08002a08 	.word	0x08002a08

08001f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e032      	b.n	8001fa8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2239      	movs	r2, #57	@ 0x39
 8001f46:	5c9b      	ldrb	r3, [r3, r2]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d107      	bne.n	8001f5e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2238      	movs	r2, #56	@ 0x38
 8001f52:	2100      	movs	r1, #0
 8001f54:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7fe fea5 	bl	8000ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2239      	movs	r2, #57	@ 0x39
 8001f62:	2102      	movs	r1, #2
 8001f64:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	0019      	movs	r1, r3
 8001f70:	0010      	movs	r0, r2
 8001f72:	f000 fa8b 	bl	800248c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	223e      	movs	r2, #62	@ 0x3e
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	223a      	movs	r2, #58	@ 0x3a
 8001f82:	2101      	movs	r1, #1
 8001f84:	5499      	strb	r1, [r3, r2]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	223b      	movs	r2, #59	@ 0x3b
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	5499      	strb	r1, [r3, r2]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	223c      	movs	r2, #60	@ 0x3c
 8001f92:	2101      	movs	r1, #1
 8001f94:	5499      	strb	r1, [r3, r2]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	223d      	movs	r2, #61	@ 0x3d
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2239      	movs	r2, #57	@ 0x39
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e032      	b.n	8002028 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2239      	movs	r2, #57	@ 0x39
 8001fc6:	5c9b      	ldrb	r3, [r3, r2]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d107      	bne.n	8001fde <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2238      	movs	r2, #56	@ 0x38
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f000 f829 	bl	8002030 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2239      	movs	r2, #57	@ 0x39
 8001fe2:	2102      	movs	r1, #2
 8001fe4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3304      	adds	r3, #4
 8001fee:	0019      	movs	r1, r3
 8001ff0:	0010      	movs	r0, r2
 8001ff2:	f000 fa4b 	bl	800248c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	223e      	movs	r2, #62	@ 0x3e
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	223a      	movs	r2, #58	@ 0x3a
 8002002:	2101      	movs	r1, #1
 8002004:	5499      	strb	r1, [r3, r2]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	223b      	movs	r2, #59	@ 0x3b
 800200a:	2101      	movs	r1, #1
 800200c:	5499      	strb	r1, [r3, r2]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	223c      	movs	r2, #60	@ 0x3c
 8002012:	2101      	movs	r1, #1
 8002014:	5499      	strb	r1, [r3, r2]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	223d      	movs	r2, #61	@ 0x3d
 800201a:	2101      	movs	r1, #1
 800201c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2239      	movs	r2, #57	@ 0x39
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002038:	46c0      	nop			@ (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d108      	bne.n	8002062 <HAL_TIM_PWM_Start+0x22>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	223a      	movs	r2, #58	@ 0x3a
 8002054:	5c9b      	ldrb	r3, [r3, r2]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	1e5a      	subs	r2, r3, #1
 800205c:	4193      	sbcs	r3, r2
 800205e:	b2db      	uxtb	r3, r3
 8002060:	e01f      	b.n	80020a2 <HAL_TIM_PWM_Start+0x62>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d108      	bne.n	800207a <HAL_TIM_PWM_Start+0x3a>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	223b      	movs	r2, #59	@ 0x3b
 800206c:	5c9b      	ldrb	r3, [r3, r2]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	1e5a      	subs	r2, r3, #1
 8002074:	4193      	sbcs	r3, r2
 8002076:	b2db      	uxtb	r3, r3
 8002078:	e013      	b.n	80020a2 <HAL_TIM_PWM_Start+0x62>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2b08      	cmp	r3, #8
 800207e:	d108      	bne.n	8002092 <HAL_TIM_PWM_Start+0x52>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	223c      	movs	r2, #60	@ 0x3c
 8002084:	5c9b      	ldrb	r3, [r3, r2]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	1e5a      	subs	r2, r3, #1
 800208c:	4193      	sbcs	r3, r2
 800208e:	b2db      	uxtb	r3, r3
 8002090:	e007      	b.n	80020a2 <HAL_TIM_PWM_Start+0x62>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	223d      	movs	r2, #61	@ 0x3d
 8002096:	5c9b      	ldrb	r3, [r3, r2]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	1e5a      	subs	r2, r3, #1
 800209e:	4193      	sbcs	r3, r2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e04d      	b.n	8002146 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d104      	bne.n	80020ba <HAL_TIM_PWM_Start+0x7a>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	223a      	movs	r2, #58	@ 0x3a
 80020b4:	2102      	movs	r1, #2
 80020b6:	5499      	strb	r1, [r3, r2]
 80020b8:	e013      	b.n	80020e2 <HAL_TIM_PWM_Start+0xa2>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d104      	bne.n	80020ca <HAL_TIM_PWM_Start+0x8a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	223b      	movs	r2, #59	@ 0x3b
 80020c4:	2102      	movs	r1, #2
 80020c6:	5499      	strb	r1, [r3, r2]
 80020c8:	e00b      	b.n	80020e2 <HAL_TIM_PWM_Start+0xa2>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d104      	bne.n	80020da <HAL_TIM_PWM_Start+0x9a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	223c      	movs	r2, #60	@ 0x3c
 80020d4:	2102      	movs	r1, #2
 80020d6:	5499      	strb	r1, [r3, r2]
 80020d8:	e003      	b.n	80020e2 <HAL_TIM_PWM_Start+0xa2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	223d      	movs	r2, #61	@ 0x3d
 80020de:	2102      	movs	r1, #2
 80020e0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6839      	ldr	r1, [r7, #0]
 80020e8:	2201      	movs	r2, #1
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 fbc0 	bl	8002870 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	05db      	lsls	r3, r3, #23
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d009      	beq.n	8002110 <HAL_TIM_PWM_Start+0xd0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a13      	ldr	r2, [pc, #76]	@ (8002150 <HAL_TIM_PWM_Start+0x110>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d004      	beq.n	8002110 <HAL_TIM_PWM_Start+0xd0>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a12      	ldr	r2, [pc, #72]	@ (8002154 <HAL_TIM_PWM_Start+0x114>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d111      	bne.n	8002134 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2207      	movs	r2, #7
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b06      	cmp	r3, #6
 8002120:	d010      	beq.n	8002144 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2101      	movs	r1, #1
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002132:	e007      	b.n	8002144 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2101      	movs	r1, #1
 8002140:	430a      	orrs	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b004      	add	sp, #16
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	40010800 	.word	0x40010800
 8002154:	40011400 	.word	0x40011400

08002158 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2317      	movs	r3, #23
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2238      	movs	r2, #56	@ 0x38
 8002170:	5c9b      	ldrb	r3, [r3, r2]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002176:	2302      	movs	r3, #2
 8002178:	e0ad      	b.n	80022d6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2238      	movs	r2, #56	@ 0x38
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0c      	cmp	r3, #12
 8002186:	d100      	bne.n	800218a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002188:	e076      	b.n	8002278 <HAL_TIM_PWM_ConfigChannel+0x120>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b0c      	cmp	r3, #12
 800218e:	d900      	bls.n	8002192 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002190:	e095      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0x166>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b08      	cmp	r3, #8
 8002196:	d04e      	beq.n	8002236 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b08      	cmp	r3, #8
 800219c:	d900      	bls.n	80021a0 <HAL_TIM_PWM_ConfigChannel+0x48>
 800219e:	e08e      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0x166>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_TIM_PWM_ConfigChannel+0x56>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d021      	beq.n	80021f0 <HAL_TIM_PWM_ConfigChannel+0x98>
 80021ac:	e087      	b.n	80022be <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	0011      	movs	r1, r2
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 f9bc 	bl	8002534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2108      	movs	r1, #8
 80021c8:	430a      	orrs	r2, r1
 80021ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2104      	movs	r1, #4
 80021d8:	438a      	bics	r2, r1
 80021da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6999      	ldr	r1, [r3, #24]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	619a      	str	r2, [r3, #24]
      break;
 80021ee:	e06b      	b.n	80022c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	0011      	movs	r1, r2
 80021f8:	0018      	movs	r0, r3
 80021fa:	f000 f9d7 	bl	80025ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2180      	movs	r1, #128	@ 0x80
 800220a:	0109      	lsls	r1, r1, #4
 800220c:	430a      	orrs	r2, r1
 800220e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699a      	ldr	r2, [r3, #24]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4931      	ldr	r1, [pc, #196]	@ (80022e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800221c:	400a      	ands	r2, r1
 800221e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6999      	ldr	r1, [r3, #24]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	021a      	lsls	r2, r3, #8
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	619a      	str	r2, [r3, #24]
      break;
 8002234:	e048      	b.n	80022c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	0011      	movs	r1, r2
 800223e:	0018      	movs	r0, r3
 8002240:	f000 f9f6 	bl	8002630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2108      	movs	r1, #8
 8002250:	430a      	orrs	r2, r1
 8002252:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69da      	ldr	r2, [r3, #28]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2104      	movs	r1, #4
 8002260:	438a      	bics	r2, r1
 8002262:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	69d9      	ldr	r1, [r3, #28]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	61da      	str	r2, [r3, #28]
      break;
 8002276:	e027      	b.n	80022c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	0011      	movs	r1, r2
 8002280:	0018      	movs	r0, r3
 8002282:	f000 fa15 	bl	80026b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2180      	movs	r1, #128	@ 0x80
 8002292:	0109      	lsls	r1, r1, #4
 8002294:	430a      	orrs	r2, r1
 8002296:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	490f      	ldr	r1, [pc, #60]	@ (80022e0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80022a4:	400a      	ands	r2, r1
 80022a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69d9      	ldr	r1, [r3, #28]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	021a      	lsls	r2, r3, #8
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	61da      	str	r2, [r3, #28]
      break;
 80022bc:	e004      	b.n	80022c8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80022be:	2317      	movs	r3, #23
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
      break;
 80022c6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2238      	movs	r2, #56	@ 0x38
 80022cc:	2100      	movs	r1, #0
 80022ce:	5499      	strb	r1, [r3, r2]

  return status;
 80022d0:	2317      	movs	r3, #23
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	781b      	ldrb	r3, [r3, #0]
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b006      	add	sp, #24
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			@ (mov r8, r8)
 80022e0:	fffffbff 	.word	0xfffffbff

080022e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ee:	230f      	movs	r3, #15
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2238      	movs	r2, #56	@ 0x38
 80022fa:	5c9b      	ldrb	r3, [r3, r2]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_TIM_ConfigClockSource+0x20>
 8002300:	2302      	movs	r3, #2
 8002302:	e0bc      	b.n	800247e <HAL_TIM_ConfigClockSource+0x19a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2238      	movs	r2, #56	@ 0x38
 8002308:	2101      	movs	r1, #1
 800230a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2239      	movs	r2, #57	@ 0x39
 8002310:	2102      	movs	r1, #2
 8002312:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2277      	movs	r2, #119	@ 0x77
 8002320:	4393      	bics	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4a58      	ldr	r2, [pc, #352]	@ (8002488 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002328:	4013      	ands	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2280      	movs	r2, #128	@ 0x80
 800233a:	0192      	lsls	r2, r2, #6
 800233c:	4293      	cmp	r3, r2
 800233e:	d040      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0xde>
 8002340:	2280      	movs	r2, #128	@ 0x80
 8002342:	0192      	lsls	r2, r2, #6
 8002344:	4293      	cmp	r3, r2
 8002346:	d900      	bls.n	800234a <HAL_TIM_ConfigClockSource+0x66>
 8002348:	e088      	b.n	800245c <HAL_TIM_ConfigClockSource+0x178>
 800234a:	2280      	movs	r2, #128	@ 0x80
 800234c:	0152      	lsls	r2, r2, #5
 800234e:	4293      	cmp	r3, r2
 8002350:	d100      	bne.n	8002354 <HAL_TIM_ConfigClockSource+0x70>
 8002352:	e088      	b.n	8002466 <HAL_TIM_ConfigClockSource+0x182>
 8002354:	2280      	movs	r2, #128	@ 0x80
 8002356:	0152      	lsls	r2, r2, #5
 8002358:	4293      	cmp	r3, r2
 800235a:	d900      	bls.n	800235e <HAL_TIM_ConfigClockSource+0x7a>
 800235c:	e07e      	b.n	800245c <HAL_TIM_ConfigClockSource+0x178>
 800235e:	2b70      	cmp	r3, #112	@ 0x70
 8002360:	d018      	beq.n	8002394 <HAL_TIM_ConfigClockSource+0xb0>
 8002362:	d900      	bls.n	8002366 <HAL_TIM_ConfigClockSource+0x82>
 8002364:	e07a      	b.n	800245c <HAL_TIM_ConfigClockSource+0x178>
 8002366:	2b60      	cmp	r3, #96	@ 0x60
 8002368:	d04f      	beq.n	800240a <HAL_TIM_ConfigClockSource+0x126>
 800236a:	d900      	bls.n	800236e <HAL_TIM_ConfigClockSource+0x8a>
 800236c:	e076      	b.n	800245c <HAL_TIM_ConfigClockSource+0x178>
 800236e:	2b50      	cmp	r3, #80	@ 0x50
 8002370:	d03b      	beq.n	80023ea <HAL_TIM_ConfigClockSource+0x106>
 8002372:	d900      	bls.n	8002376 <HAL_TIM_ConfigClockSource+0x92>
 8002374:	e072      	b.n	800245c <HAL_TIM_ConfigClockSource+0x178>
 8002376:	2b40      	cmp	r3, #64	@ 0x40
 8002378:	d057      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x146>
 800237a:	d900      	bls.n	800237e <HAL_TIM_ConfigClockSource+0x9a>
 800237c:	e06e      	b.n	800245c <HAL_TIM_ConfigClockSource+0x178>
 800237e:	2b30      	cmp	r3, #48	@ 0x30
 8002380:	d063      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x166>
 8002382:	d86b      	bhi.n	800245c <HAL_TIM_ConfigClockSource+0x178>
 8002384:	2b20      	cmp	r3, #32
 8002386:	d060      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x166>
 8002388:	d868      	bhi.n	800245c <HAL_TIM_ConfigClockSource+0x178>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d05d      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x166>
 800238e:	2b10      	cmp	r3, #16
 8002390:	d05b      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x166>
 8002392:	e063      	b.n	800245c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023a4:	f000 fa44 	bl	8002830 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2277      	movs	r2, #119	@ 0x77
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	609a      	str	r2, [r3, #8]
      break;
 80023c0:	e052      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023d2:	f000 fa2d 	bl	8002830 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2180      	movs	r1, #128	@ 0x80
 80023e2:	01c9      	lsls	r1, r1, #7
 80023e4:	430a      	orrs	r2, r1
 80023e6:	609a      	str	r2, [r3, #8]
      break;
 80023e8:	e03e      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023f6:	001a      	movs	r2, r3
 80023f8:	f000 f9a0 	bl	800273c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2150      	movs	r1, #80	@ 0x50
 8002402:	0018      	movs	r0, r3
 8002404:	f000 f9fa 	bl	80027fc <TIM_ITRx_SetConfig>
      break;
 8002408:	e02e      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002416:	001a      	movs	r2, r3
 8002418:	f000 f9be 	bl	8002798 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2160      	movs	r1, #96	@ 0x60
 8002422:	0018      	movs	r0, r3
 8002424:	f000 f9ea 	bl	80027fc <TIM_ITRx_SetConfig>
      break;
 8002428:	e01e      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002436:	001a      	movs	r2, r3
 8002438:	f000 f980 	bl	800273c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2140      	movs	r1, #64	@ 0x40
 8002442:	0018      	movs	r0, r3
 8002444:	f000 f9da 	bl	80027fc <TIM_ITRx_SetConfig>
      break;
 8002448:	e00e      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0019      	movs	r1, r3
 8002454:	0010      	movs	r0, r2
 8002456:	f000 f9d1 	bl	80027fc <TIM_ITRx_SetConfig>
      break;
 800245a:	e005      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800245c:	230f      	movs	r3, #15
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
      break;
 8002464:	e000      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002466:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2239      	movs	r2, #57	@ 0x39
 800246c:	2101      	movs	r1, #1
 800246e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2238      	movs	r2, #56	@ 0x38
 8002474:	2100      	movs	r1, #0
 8002476:	5499      	strb	r1, [r3, r2]

  return status;
 8002478:	230f      	movs	r3, #15
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	781b      	ldrb	r3, [r3, #0]
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b004      	add	sp, #16
 8002484:	bd80      	pop	{r7, pc}
 8002486:	46c0      	nop			@ (mov r8, r8)
 8002488:	ffff00ff 	.word	0xffff00ff

0800248c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	2380      	movs	r3, #128	@ 0x80
 80024a0:	05db      	lsls	r3, r3, #23
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d007      	beq.n	80024b6 <TIM_Base_SetConfig+0x2a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002528 <TIM_Base_SetConfig+0x9c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d003      	beq.n	80024b6 <TIM_Base_SetConfig+0x2a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a1e      	ldr	r2, [pc, #120]	@ (800252c <TIM_Base_SetConfig+0xa0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d108      	bne.n	80024c8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2270      	movs	r2, #112	@ 0x70
 80024ba:	4393      	bics	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	2380      	movs	r3, #128	@ 0x80
 80024cc:	05db      	lsls	r3, r3, #23
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d007      	beq.n	80024e2 <TIM_Base_SetConfig+0x56>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a14      	ldr	r2, [pc, #80]	@ (8002528 <TIM_Base_SetConfig+0x9c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d003      	beq.n	80024e2 <TIM_Base_SetConfig+0x56>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a13      	ldr	r2, [pc, #76]	@ (800252c <TIM_Base_SetConfig+0xa0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d108      	bne.n	80024f4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <TIM_Base_SetConfig+0xa4>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2280      	movs	r2, #128	@ 0x80
 80024f8:	4393      	bics	r3, r2
 80024fa:	001a      	movs	r2, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	615a      	str	r2, [r3, #20]
}
 8002520:	46c0      	nop			@ (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b004      	add	sp, #16
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40010800 	.word	0x40010800
 800252c:	40011400 	.word	0x40011400
 8002530:	fffffcff 	.word	0xfffffcff

08002534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	2201      	movs	r2, #1
 8002544:	4393      	bics	r3, r2
 8002546:	001a      	movs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2270      	movs	r2, #112	@ 0x70
 8002562:	4393      	bics	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2203      	movs	r2, #3
 800256a:	4393      	bics	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2202      	movs	r2, #2
 800257c:	4393      	bics	r3, r2
 800257e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	4313      	orrs	r3, r2
 8002588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	621a      	str	r2, [r3, #32]
}
 80025a4:	46c0      	nop			@ (mov r8, r8)
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b006      	add	sp, #24
 80025aa:	bd80      	pop	{r7, pc}

080025ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	2210      	movs	r2, #16
 80025bc:	4393      	bics	r3, r2
 80025be:	001a      	movs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4a13      	ldr	r2, [pc, #76]	@ (8002628 <TIM_OC2_SetConfig+0x7c>)
 80025da:	4013      	ands	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4a12      	ldr	r2, [pc, #72]	@ (800262c <TIM_OC2_SetConfig+0x80>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2220      	movs	r2, #32
 80025f6:	4393      	bics	r3, r2
 80025f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	621a      	str	r2, [r3, #32]
}
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b006      	add	sp, #24
 8002626:	bd80      	pop	{r7, pc}
 8002628:	ffff8fff 	.word	0xffff8fff
 800262c:	fffffcff 	.word	0xfffffcff

08002630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a1a      	ldr	r2, [pc, #104]	@ (80026a8 <TIM_OC3_SetConfig+0x78>)
 8002640:	401a      	ands	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2270      	movs	r2, #112	@ 0x70
 800265c:	4393      	bics	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2203      	movs	r2, #3
 8002664:	4393      	bics	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	4a0d      	ldr	r2, [pc, #52]	@ (80026ac <TIM_OC3_SetConfig+0x7c>)
 8002676:	4013      	ands	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	621a      	str	r2, [r3, #32]
}
 80026a0:	46c0      	nop			@ (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b006      	add	sp, #24
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	fffffeff 	.word	0xfffffeff
 80026ac:	fffffdff 	.word	0xfffffdff

080026b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4a1b      	ldr	r2, [pc, #108]	@ (800272c <TIM_OC4_SetConfig+0x7c>)
 80026c0:	401a      	ands	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a15      	ldr	r2, [pc, #84]	@ (8002730 <TIM_OC4_SetConfig+0x80>)
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4a14      	ldr	r2, [pc, #80]	@ (8002734 <TIM_OC4_SetConfig+0x84>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	4a10      	ldr	r2, [pc, #64]	@ (8002738 <TIM_OC4_SetConfig+0x88>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	031b      	lsls	r3, r3, #12
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	621a      	str	r2, [r3, #32]
}
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	b006      	add	sp, #24
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			@ (mov r8, r8)
 800272c:	ffffefff 	.word	0xffffefff
 8002730:	ffff8fff 	.word	0xffff8fff
 8002734:	fffffcff 	.word	0xfffffcff
 8002738:	ffffdfff 	.word	0xffffdfff

0800273c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a1b      	ldr	r3, [r3, #32]
 8002752:	2201      	movs	r2, #1
 8002754:	4393      	bics	r3, r2
 8002756:	001a      	movs	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	22f0      	movs	r2, #240	@ 0xf0
 8002766:	4393      	bics	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	220a      	movs	r2, #10
 8002778:	4393      	bics	r3, r2
 800277a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	621a      	str	r2, [r3, #32]
}
 8002790:	46c0      	nop			@ (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b006      	add	sp, #24
 8002796:	bd80      	pop	{r7, pc}

08002798 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	2210      	movs	r2, #16
 80027aa:	4393      	bics	r3, r2
 80027ac:	001a      	movs	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	4a0d      	ldr	r2, [pc, #52]	@ (80027f8 <TIM_TI2_ConfigInputStage+0x60>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	031b      	lsls	r3, r3, #12
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	22a0      	movs	r2, #160	@ 0xa0
 80027d4:	4393      	bics	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	621a      	str	r2, [r3, #32]
}
 80027ee:	46c0      	nop			@ (mov r8, r8)
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b006      	add	sp, #24
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	ffff0fff 	.word	0xffff0fff

080027fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2270      	movs	r2, #112	@ 0x70
 8002810:	4393      	bics	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	2207      	movs	r2, #7
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	609a      	str	r2, [r3, #8]
}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	b004      	add	sp, #16
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	4a09      	ldr	r2, [pc, #36]	@ (800286c <TIM_ETR_SetConfig+0x3c>)
 8002848:	4013      	ands	r3, r2
 800284a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	021a      	lsls	r2, r3, #8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	431a      	orrs	r2, r3
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4313      	orrs	r3, r2
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	4313      	orrs	r3, r2
 800285c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	609a      	str	r2, [r3, #8]
}
 8002864:	46c0      	nop			@ (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	b006      	add	sp, #24
 800286a:	bd80      	pop	{r7, pc}
 800286c:	ffff00ff 	.word	0xffff00ff

08002870 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	221f      	movs	r2, #31
 8002880:	4013      	ands	r3, r2
 8002882:	2201      	movs	r2, #1
 8002884:	409a      	lsls	r2, r3
 8002886:	0013      	movs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	43d2      	mvns	r2, r2
 8002892:	401a      	ands	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a1a      	ldr	r2, [r3, #32]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	211f      	movs	r1, #31
 80028a0:	400b      	ands	r3, r1
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4099      	lsls	r1, r3
 80028a6:	000b      	movs	r3, r1
 80028a8:	431a      	orrs	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	621a      	str	r2, [r3, #32]
}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b006      	add	sp, #24
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2238      	movs	r2, #56	@ 0x38
 80028c6:	5c9b      	ldrb	r3, [r3, r2]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e042      	b.n	8002956 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2238      	movs	r2, #56	@ 0x38
 80028d4:	2101      	movs	r1, #1
 80028d6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2239      	movs	r2, #57	@ 0x39
 80028dc:	2102      	movs	r1, #2
 80028de:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2270      	movs	r2, #112	@ 0x70
 80028f4:	4393      	bics	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2380      	movs	r3, #128	@ 0x80
 8002910:	05db      	lsls	r3, r3, #23
 8002912:	429a      	cmp	r2, r3
 8002914:	d009      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a11      	ldr	r2, [pc, #68]	@ (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d004      	beq.n	800292a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0f      	ldr	r2, [pc, #60]	@ (8002964 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d10c      	bne.n	8002944 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2280      	movs	r2, #128	@ 0x80
 800292e:	4393      	bics	r3, r2
 8002930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	4313      	orrs	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2239      	movs	r2, #57	@ 0x39
 8002948:	2101      	movs	r1, #1
 800294a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2238      	movs	r2, #56	@ 0x38
 8002950:	2100      	movs	r1, #0
 8002952:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b004      	add	sp, #16
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	40010800 	.word	0x40010800
 8002964:	40011400 	.word	0x40011400

08002968 <memset>:
 8002968:	0003      	movs	r3, r0
 800296a:	1882      	adds	r2, r0, r2
 800296c:	4293      	cmp	r3, r2
 800296e:	d100      	bne.n	8002972 <memset+0xa>
 8002970:	4770      	bx	lr
 8002972:	7019      	strb	r1, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	e7f9      	b.n	800296c <memset+0x4>

08002978 <__libc_init_array>:
 8002978:	b570      	push	{r4, r5, r6, lr}
 800297a:	2600      	movs	r6, #0
 800297c:	4c0c      	ldr	r4, [pc, #48]	@ (80029b0 <__libc_init_array+0x38>)
 800297e:	4d0d      	ldr	r5, [pc, #52]	@ (80029b4 <__libc_init_array+0x3c>)
 8002980:	1b64      	subs	r4, r4, r5
 8002982:	10a4      	asrs	r4, r4, #2
 8002984:	42a6      	cmp	r6, r4
 8002986:	d109      	bne.n	800299c <__libc_init_array+0x24>
 8002988:	2600      	movs	r6, #0
 800298a:	f000 f819 	bl	80029c0 <_init>
 800298e:	4c0a      	ldr	r4, [pc, #40]	@ (80029b8 <__libc_init_array+0x40>)
 8002990:	4d0a      	ldr	r5, [pc, #40]	@ (80029bc <__libc_init_array+0x44>)
 8002992:	1b64      	subs	r4, r4, r5
 8002994:	10a4      	asrs	r4, r4, #2
 8002996:	42a6      	cmp	r6, r4
 8002998:	d105      	bne.n	80029a6 <__libc_init_array+0x2e>
 800299a:	bd70      	pop	{r4, r5, r6, pc}
 800299c:	00b3      	lsls	r3, r6, #2
 800299e:	58eb      	ldr	r3, [r5, r3]
 80029a0:	4798      	blx	r3
 80029a2:	3601      	adds	r6, #1
 80029a4:	e7ee      	b.n	8002984 <__libc_init_array+0xc>
 80029a6:	00b3      	lsls	r3, r6, #2
 80029a8:	58eb      	ldr	r3, [r5, r3]
 80029aa:	4798      	blx	r3
 80029ac:	3601      	adds	r6, #1
 80029ae:	e7f2      	b.n	8002996 <__libc_init_array+0x1e>
 80029b0:	08002a1c 	.word	0x08002a1c
 80029b4:	08002a1c 	.word	0x08002a1c
 80029b8:	08002a20 	.word	0x08002a20
 80029bc:	08002a1c 	.word	0x08002a1c

080029c0 <_init>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c6:	bc08      	pop	{r3}
 80029c8:	469e      	mov	lr, r3
 80029ca:	4770      	bx	lr

080029cc <_fini>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029d2:	bc08      	pop	{r3}
 80029d4:	469e      	mov	lr, r3
 80029d6:	4770      	bx	lr


Projeto sensor de temperatura.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018a8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001968  08001968  00002968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001984  08001984  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001984  08001984  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001984  08001984  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001984  08001984  00002984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001988  08001988  00002988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800198c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  08001998  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  08001998  0000308c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003bc9  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f79  00000000  00000000  00006bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000478  00000000  00000000  00007b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000348  00000000  00000000  00007ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001286f  00000000  00000000  00008338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000057ff  00000000  00000000  0001aba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073968  00000000  00000000  000203a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00093d0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ebc  00000000  00000000  00093d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  00094c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001950 	.word	0x08001950

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001950 	.word	0x08001950

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 f994 	bl	8000724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f82e 	bl	800045c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ADC_Init();
 8000400:	f000 f87c 	bl	80004fc <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  ADC1 -> CFGR2 &= ~ADC_CFGR2_CKMODE;
 8000404:	4b12      	ldr	r3, [pc, #72]	@ (8000450 <main+0x5c>)
 8000406:	691a      	ldr	r2, [r3, #16]
 8000408:	4b11      	ldr	r3, [pc, #68]	@ (8000450 <main+0x5c>)
 800040a:	0092      	lsls	r2, r2, #2
 800040c:	0892      	lsrs	r2, r2, #2
 800040e:	611a      	str	r2, [r3, #16]

  ADC1 -> CFGR1 |= ADC_CFGR1_CONT;
 8000410:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <main+0x5c>)
 8000412:	68da      	ldr	r2, [r3, #12]
 8000414:	4b0e      	ldr	r3, [pc, #56]	@ (8000450 <main+0x5c>)
 8000416:	2180      	movs	r1, #128	@ 0x80
 8000418:	0189      	lsls	r1, r1, #6
 800041a:	430a      	orrs	r2, r1
 800041c:	60da      	str	r2, [r3, #12]
  ADC1 -> CHSELR = ADC_CHSELR_CHSEL18;
 800041e:	4b0c      	ldr	r3, [pc, #48]	@ (8000450 <main+0x5c>)
 8000420:	2280      	movs	r2, #128	@ 0x80
 8000422:	02d2      	lsls	r2, r2, #11
 8000424:	629a      	str	r2, [r3, #40]	@ 0x28
  ADC1 -> SMPR |= ADC_SMPR_SMP;
 8000426:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <main+0x5c>)
 8000428:	695a      	ldr	r2, [r3, #20]
 800042a:	4b09      	ldr	r3, [pc, #36]	@ (8000450 <main+0x5c>)
 800042c:	2107      	movs	r1, #7
 800042e:	430a      	orrs	r2, r1
 8000430:	615a      	str	r2, [r3, #20]
  ADC  -> CCR |= ADC_CCR_TSEN;
 8000432:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <main+0x60>)
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	4b07      	ldr	r3, [pc, #28]	@ (8000454 <main+0x60>)
 8000438:	2180      	movs	r1, #128	@ 0x80
 800043a:	0409      	lsls	r1, r1, #16
 800043c:	430a      	orrs	r2, r1
 800043e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  graus = ComputeTemperature(25);
 8000440:	2019      	movs	r0, #25
 8000442:	f000 f8c1 	bl	80005c8 <ComputeTemperature>
 8000446:	0002      	movs	r2, r0
 8000448:	4b03      	ldr	r3, [pc, #12]	@ (8000458 <main+0x64>)
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	e7f8      	b.n	8000440 <main+0x4c>
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	40012400 	.word	0x40012400
 8000454:	40012708 	.word	0x40012708
 8000458:	20000084 	.word	0x20000084

0800045c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b095      	sub	sp, #84	@ 0x54
 8000460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000462:	2418      	movs	r4, #24
 8000464:	193b      	adds	r3, r7, r4
 8000466:	0018      	movs	r0, r3
 8000468:	2338      	movs	r3, #56	@ 0x38
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f001 fa43 	bl	80018f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	0018      	movs	r0, r3
 8000476:	2314      	movs	r3, #20
 8000478:	001a      	movs	r2, r3
 800047a:	2100      	movs	r1, #0
 800047c:	f001 fa3c 	bl	80018f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000480:	4b1c      	ldr	r3, [pc, #112]	@ (80004f4 <SystemClock_Config+0x98>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a1c      	ldr	r2, [pc, #112]	@ (80004f8 <SystemClock_Config+0x9c>)
 8000486:	401a      	ands	r2, r3
 8000488:	4b1a      	ldr	r3, [pc, #104]	@ (80004f4 <SystemClock_Config+0x98>)
 800048a:	2180      	movs	r1, #128	@ 0x80
 800048c:	0109      	lsls	r1, r1, #4
 800048e:	430a      	orrs	r2, r1
 8000490:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000492:	0021      	movs	r1, r4
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2202      	movs	r2, #2
 8000498:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2201      	movs	r2, #1
 800049e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2210      	movs	r2, #16
 80004a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2200      	movs	r2, #0
 80004aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	0018      	movs	r0, r3
 80004b0:	f000 fc90 	bl	8000dd4 <HAL_RCC_OscConfig>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x60>
  {
    Error_Handler();
 80004b8:	f000 f8ba 	bl	8000630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004bc:	1d3b      	adds	r3, r7, #4
 80004be:	220f      	movs	r2, #15
 80004c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2201      	movs	r2, #1
 80004c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2200      	movs	r2, #0
 80004d2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 f83c 	bl	800155c <HAL_RCC_ClockConfig>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004e8:	f000 f8a2 	bl	8000630 <Error_Handler>
  }
}
 80004ec:	46c0      	nop			@ (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b015      	add	sp, #84	@ 0x54
 80004f2:	bd90      	pop	{r4, r7, pc}
 80004f4:	40007000 	.word	0x40007000
 80004f8:	ffffe7ff 	.word	0xffffe7ff

080004fc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000502:	003b      	movs	r3, r7
 8000504:	0018      	movs	r0, r3
 8000506:	2308      	movs	r3, #8
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f001 f9f4 	bl	80018f8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000510:	4b2a      	ldr	r3, [pc, #168]	@ (80005bc <MX_ADC_Init+0xc0>)
 8000512:	4a2b      	ldr	r2, [pc, #172]	@ (80005c0 <MX_ADC_Init+0xc4>)
 8000514:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000516:	4b29      	ldr	r3, [pc, #164]	@ (80005bc <MX_ADC_Init+0xc0>)
 8000518:	2200      	movs	r2, #0
 800051a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800051c:	4b27      	ldr	r3, [pc, #156]	@ (80005bc <MX_ADC_Init+0xc0>)
 800051e:	22c0      	movs	r2, #192	@ 0xc0
 8000520:	0612      	lsls	r2, r2, #24
 8000522:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000524:	4b25      	ldr	r3, [pc, #148]	@ (80005bc <MX_ADC_Init+0xc0>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800052a:	4b24      	ldr	r3, [pc, #144]	@ (80005bc <MX_ADC_Init+0xc0>)
 800052c:	2200      	movs	r2, #0
 800052e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000530:	4b22      	ldr	r3, [pc, #136]	@ (80005bc <MX_ADC_Init+0xc0>)
 8000532:	2201      	movs	r2, #1
 8000534:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000536:	4b21      	ldr	r3, [pc, #132]	@ (80005bc <MX_ADC_Init+0xc0>)
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800053c:	4b1f      	ldr	r3, [pc, #124]	@ (80005bc <MX_ADC_Init+0xc0>)
 800053e:	2220      	movs	r2, #32
 8000540:	2100      	movs	r1, #0
 8000542:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000544:	4b1d      	ldr	r3, [pc, #116]	@ (80005bc <MX_ADC_Init+0xc0>)
 8000546:	2221      	movs	r2, #33	@ 0x21
 8000548:	2100      	movs	r1, #0
 800054a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800054c:	4b1b      	ldr	r3, [pc, #108]	@ (80005bc <MX_ADC_Init+0xc0>)
 800054e:	2200      	movs	r2, #0
 8000550:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000552:	4b1a      	ldr	r3, [pc, #104]	@ (80005bc <MX_ADC_Init+0xc0>)
 8000554:	22c2      	movs	r2, #194	@ 0xc2
 8000556:	32ff      	adds	r2, #255	@ 0xff
 8000558:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800055a:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <MX_ADC_Init+0xc0>)
 800055c:	222c      	movs	r2, #44	@ 0x2c
 800055e:	2100      	movs	r1, #0
 8000560:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000562:	4b16      	ldr	r3, [pc, #88]	@ (80005bc <MX_ADC_Init+0xc0>)
 8000564:	2204      	movs	r2, #4
 8000566:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000568:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <MX_ADC_Init+0xc0>)
 800056a:	2200      	movs	r2, #0
 800056c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800056e:	4b13      	ldr	r3, [pc, #76]	@ (80005bc <MX_ADC_Init+0xc0>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000574:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <MX_ADC_Init+0xc0>)
 8000576:	2200      	movs	r2, #0
 8000578:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800057a:	4b10      	ldr	r3, [pc, #64]	@ (80005bc <MX_ADC_Init+0xc0>)
 800057c:	2200      	movs	r2, #0
 800057e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000580:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <MX_ADC_Init+0xc0>)
 8000582:	0018      	movs	r0, r3
 8000584:	f000 f93e 	bl	8000804 <HAL_ADC_Init>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800058c:	f000 f850 	bl	8000630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000590:	003b      	movs	r3, r7
 8000592:	4a0c      	ldr	r2, [pc, #48]	@ (80005c4 <MX_ADC_Init+0xc8>)
 8000594:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000596:	003b      	movs	r3, r7
 8000598:	2280      	movs	r2, #128	@ 0x80
 800059a:	0152      	lsls	r2, r2, #5
 800059c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800059e:	003a      	movs	r2, r7
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <MX_ADC_Init+0xc0>)
 80005a2:	0011      	movs	r1, r2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 faa1 	bl	8000aec <HAL_ADC_ConfigChannel>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80005ae:	f000 f83f 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b002      	add	sp, #8
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	20000028 	.word	0x20000028
 80005c0:	40012400 	.word	0x40012400
 80005c4:	48040000 	.word	0x48040000

080005c8 <ComputeTemperature>:

/* USER CODE BEGIN 4 */
int32_t ComputeTemperature(uint32_t measure){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	int32_t temperature;
	temperature = ((measure * VDD_APPLI / VDD_CALIB) - (int32_t) * TEMP30_CAL_ADDR);
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	0013      	movs	r3, r2
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	189b      	adds	r3, r3, r2
 80005d8:	015a      	lsls	r2, r3, #5
 80005da:	189b      	adds	r3, r3, r2
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	001a      	movs	r2, r3
 80005e0:	2396      	movs	r3, #150	@ 0x96
 80005e2:	0059      	lsls	r1, r3, #1
 80005e4:	0010      	movs	r0, r2
 80005e6:	f7ff fd8f 	bl	8000108 <__udivsi3>
 80005ea:	0003      	movs	r3, r0
 80005ec:	001a      	movs	r2, r3
 80005ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <ComputeTemperature+0x60>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	60fb      	str	r3, [r7, #12]
	temperature = temperature * (int32_t) (130 - 30);
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2264      	movs	r2, #100	@ 0x64
 80005fa:	4353      	muls	r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]
	temperature = temperature / (int32_t) (*TEMP130_CAL_ADDR - *TEMP30_CAL_ADDR);
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <ComputeTemperature+0x64>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	001a      	movs	r2, r3
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <ComputeTemperature+0x60>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	0019      	movs	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f7ff fe05 	bl	800021c <__divsi3>
 8000612:	0003      	movs	r3, r0
 8000614:	60fb      	str	r3, [r7, #12]
	temperature += 30;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	331e      	adds	r3, #30
 800061a:	60fb      	str	r3, [r7, #12]
	return temperature;
 800061c:	68fb      	ldr	r3, [r7, #12]
}
 800061e:	0018      	movs	r0, r3
 8000620:	46bd      	mov	sp, r7
 8000622:	b004      	add	sp, #16
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	1ff8007a 	.word	0x1ff8007a
 800062c:	1ff8007e 	.word	0x1ff8007e

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	e7fd      	b.n	8000638 <Error_Handler+0x8>

0800063c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000640:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <HAL_MspInit+0x24>)
 8000642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <HAL_MspInit+0x24>)
 8000646:	2101      	movs	r1, #1
 8000648:	430a      	orrs	r2, r1
 800064a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	4b04      	ldr	r3, [pc, #16]	@ (8000660 <HAL_MspInit+0x24>)
 800064e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <HAL_MspInit+0x24>)
 8000652:	2180      	movs	r1, #128	@ 0x80
 8000654:	0549      	lsls	r1, r1, #21
 8000656:	430a      	orrs	r2, r1
 8000658:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a06      	ldr	r2, [pc, #24]	@ (800068c <HAL_ADC_MspInit+0x28>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d106      	bne.n	8000684 <HAL_ADC_MspInit+0x20>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <HAL_ADC_MspInit+0x2c>)
 8000678:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800067a:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <HAL_ADC_MspInit+0x2c>)
 800067c:	2180      	movs	r1, #128	@ 0x80
 800067e:	0089      	lsls	r1, r1, #2
 8000680:	430a      	orrs	r2, r1
 8000682:	635a      	str	r2, [r3, #52]	@ 0x34

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b002      	add	sp, #8
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40012400 	.word	0x40012400
 8000690:	40021000 	.word	0x40021000

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	e7fd      	b.n	8000698 <NMI_Handler+0x4>

0800069c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	e7fd      	b.n	80006a0 <HardFault_Handler+0x4>

080006a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b2:	46c0      	nop			@ (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006bc:	f000 f886 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c0:	46c0      	nop			@ (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80006d0:	480d      	ldr	r0, [pc, #52]	@ (8000708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006d4:	f7ff fff7 	bl	80006c6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480c      	ldr	r0, [pc, #48]	@ (800070c <LoopForever+0x6>)
  ldr r1, =_edata
 80006da:	490d      	ldr	r1, [pc, #52]	@ (8000710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000714 <LoopForever+0xe>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f0:	4c0a      	ldr	r4, [pc, #40]	@ (800071c <LoopForever+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fe:	f001 f903 	bl	8001908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000702:	f7ff fe77 	bl	80003f4 <main>

08000706 <LoopForever>:

LoopForever:
    b LoopForever
 8000706:	e7fe      	b.n	8000706 <LoopForever>
  ldr   r0, =_estack
 8000708:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000714:	0800198c 	.word	0x0800198c
  ldr r2, =_sbss
 8000718:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800071c:	2000008c 	.word	0x2000008c

08000720 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC1_COMP_IRQHandler>
	...

08000724 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800072a:	1dfb      	adds	r3, r7, #7
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000730:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <HAL_Init+0x3c>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <HAL_Init+0x3c>)
 8000736:	2140      	movs	r1, #64	@ 0x40
 8000738:	430a      	orrs	r2, r1
 800073a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800073c:	2000      	movs	r0, #0
 800073e:	f000 f811 	bl	8000764 <HAL_InitTick>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d003      	beq.n	800074e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
 800074c:	e001      	b.n	8000752 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800074e:	f7ff ff75 	bl	800063c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000752:	1dfb      	adds	r3, r7, #7
 8000754:	781b      	ldrb	r3, [r3, #0]
}
 8000756:	0018      	movs	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	40022000 	.word	0x40022000

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800076c:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <HAL_InitTick+0x5c>)
 800076e:	681c      	ldr	r4, [r3, #0]
 8000770:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <HAL_InitTick+0x60>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	0019      	movs	r1, r3
 8000776:	23fa      	movs	r3, #250	@ 0xfa
 8000778:	0098      	lsls	r0, r3, #2
 800077a:	f7ff fcc5 	bl	8000108 <__udivsi3>
 800077e:	0003      	movs	r3, r0
 8000780:	0019      	movs	r1, r3
 8000782:	0020      	movs	r0, r4
 8000784:	f7ff fcc0 	bl	8000108 <__udivsi3>
 8000788:	0003      	movs	r3, r0
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fb15 	bl	8000dba <HAL_SYSTICK_Config>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	e00f      	b.n	80007b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b03      	cmp	r3, #3
 800079c:	d80b      	bhi.n	80007b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	2301      	movs	r3, #1
 80007a2:	425b      	negs	r3, r3
 80007a4:	2200      	movs	r2, #0
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 faf2 	bl	8000d90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <HAL_InitTick+0x64>)
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e000      	b.n	80007b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b003      	add	sp, #12
 80007be:	bd90      	pop	{r4, r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <HAL_IncTick+0x1c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	001a      	movs	r2, r3
 80007d6:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <HAL_IncTick+0x20>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	18d2      	adds	r2, r2, r3
 80007dc:	4b03      	ldr	r3, [pc, #12]	@ (80007ec <HAL_IncTick+0x20>)
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			@ (mov r8, r8)
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000088 	.word	0x20000088

080007f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return uwTick;
 80007f4:	4b02      	ldr	r3, [pc, #8]	@ (8000800 <HAL_GetTick+0x10>)
 80007f6:	681b      	ldr	r3, [r3, #0]
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	20000088 	.word	0x20000088

08000804 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d101      	bne.n	8000816 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e159      	b.n	8000aca <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800081a:	2b00      	cmp	r3, #0
 800081c:	d10a      	bne.n	8000834 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2250      	movs	r2, #80	@ 0x50
 8000828:	2100      	movs	r1, #0
 800082a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	0018      	movs	r0, r3
 8000830:	f7ff ff18 	bl	8000664 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000838:	2210      	movs	r2, #16
 800083a:	4013      	ands	r3, r2
 800083c:	2b10      	cmp	r3, #16
 800083e:	d005      	beq.n	800084c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	2204      	movs	r2, #4
 8000848:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800084a:	d00b      	beq.n	8000864 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000850:	2210      	movs	r2, #16
 8000852:	431a      	orrs	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2250      	movs	r2, #80	@ 0x50
 800085c:	2100      	movs	r1, #0
 800085e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e132      	b.n	8000aca <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000868:	4a9a      	ldr	r2, [pc, #616]	@ (8000ad4 <HAL_ADC_Init+0x2d0>)
 800086a:	4013      	ands	r3, r2
 800086c:	2202      	movs	r2, #2
 800086e:	431a      	orrs	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	2203      	movs	r2, #3
 800087c:	4013      	ands	r3, r2
 800087e:	2b01      	cmp	r3, #1
 8000880:	d108      	bne.n	8000894 <HAL_ADC_Init+0x90>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2201      	movs	r2, #1
 800088a:	4013      	ands	r3, r2
 800088c:	2b01      	cmp	r3, #1
 800088e:	d101      	bne.n	8000894 <HAL_ADC_Init+0x90>
 8000890:	2301      	movs	r3, #1
 8000892:	e000      	b.n	8000896 <HAL_ADC_Init+0x92>
 8000894:	2300      	movs	r3, #0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d149      	bne.n	800092e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	685a      	ldr	r2, [r3, #4]
 800089e:	23c0      	movs	r3, #192	@ 0xc0
 80008a0:	061b      	lsls	r3, r3, #24
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d00b      	beq.n	80008be <HAL_ADC_Init+0xba>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	685a      	ldr	r2, [r3, #4]
 80008aa:	2380      	movs	r3, #128	@ 0x80
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d005      	beq.n	80008be <HAL_ADC_Init+0xba>
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	685a      	ldr	r2, [r3, #4]
 80008b6:	2380      	movs	r3, #128	@ 0x80
 80008b8:	061b      	lsls	r3, r3, #24
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d111      	bne.n	80008e2 <HAL_ADC_Init+0xde>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	691a      	ldr	r2, [r3, #16]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	0092      	lsls	r2, r2, #2
 80008ca:	0892      	lsrs	r2, r2, #2
 80008cc:	611a      	str	r2, [r3, #16]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6919      	ldr	r1, [r3, #16]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	430a      	orrs	r2, r1
 80008de:	611a      	str	r2, [r3, #16]
 80008e0:	e014      	b.n	800090c <HAL_ADC_Init+0x108>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	691a      	ldr	r2, [r3, #16]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	0092      	lsls	r2, r2, #2
 80008ee:	0892      	lsrs	r2, r2, #2
 80008f0:	611a      	str	r2, [r3, #16]
 80008f2:	4b79      	ldr	r3, [pc, #484]	@ (8000ad8 <HAL_ADC_Init+0x2d4>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4b78      	ldr	r3, [pc, #480]	@ (8000ad8 <HAL_ADC_Init+0x2d4>)
 80008f8:	4978      	ldr	r1, [pc, #480]	@ (8000adc <HAL_ADC_Init+0x2d8>)
 80008fa:	400a      	ands	r2, r1
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	4b76      	ldr	r3, [pc, #472]	@ (8000ad8 <HAL_ADC_Init+0x2d4>)
 8000900:	6819      	ldr	r1, [r3, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685a      	ldr	r2, [r3, #4]
 8000906:	4b74      	ldr	r3, [pc, #464]	@ (8000ad8 <HAL_ADC_Init+0x2d4>)
 8000908:	430a      	orrs	r2, r1
 800090a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2118      	movs	r1, #24
 8000918:	438a      	bics	r2, r1
 800091a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	68d9      	ldr	r1, [r3, #12]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689a      	ldr	r2, [r3, #8]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	430a      	orrs	r2, r1
 800092c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800092e:	4b6a      	ldr	r3, [pc, #424]	@ (8000ad8 <HAL_ADC_Init+0x2d4>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4b69      	ldr	r3, [pc, #420]	@ (8000ad8 <HAL_ADC_Init+0x2d4>)
 8000934:	496a      	ldr	r1, [pc, #424]	@ (8000ae0 <HAL_ADC_Init+0x2dc>)
 8000936:	400a      	ands	r2, r1
 8000938:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800093a:	4b67      	ldr	r3, [pc, #412]	@ (8000ad8 <HAL_ADC_Init+0x2d4>)
 800093c:	6819      	ldr	r1, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000942:	065a      	lsls	r2, r3, #25
 8000944:	4b64      	ldr	r3, [pc, #400]	@ (8000ad8 <HAL_ADC_Init+0x2d4>)
 8000946:	430a      	orrs	r2, r1
 8000948:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	689a      	ldr	r2, [r3, #8]
 8000950:	2380      	movs	r3, #128	@ 0x80
 8000952:	055b      	lsls	r3, r3, #21
 8000954:	4013      	ands	r3, r2
 8000956:	d108      	bne.n	800096a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2180      	movs	r1, #128	@ 0x80
 8000964:	0549      	lsls	r1, r1, #21
 8000966:	430a      	orrs	r2, r1
 8000968:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	68da      	ldr	r2, [r3, #12]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	495b      	ldr	r1, [pc, #364]	@ (8000ae4 <HAL_ADC_Init+0x2e0>)
 8000976:	400a      	ands	r2, r1
 8000978:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	68d9      	ldr	r1, [r3, #12]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	691b      	ldr	r3, [r3, #16]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d101      	bne.n	8000990 <HAL_ADC_Init+0x18c>
 800098c:	2304      	movs	r3, #4
 800098e:	e000      	b.n	8000992 <HAL_ADC_Init+0x18e>
 8000990:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000992:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2020      	movs	r0, #32
 8000998:	5c1b      	ldrb	r3, [r3, r0]
 800099a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800099c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	202c      	movs	r0, #44	@ 0x2c
 80009a2:	5c1b      	ldrb	r3, [r3, r0]
 80009a4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80009a6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80009ac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80009b4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80009bc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	430a      	orrs	r2, r1
 80009c4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80009ca:	23c2      	movs	r3, #194	@ 0xc2
 80009cc:	33ff      	adds	r3, #255	@ 0xff
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d00b      	beq.n	80009ea <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	68d9      	ldr	r1, [r3, #12]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80009e0:	431a      	orrs	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	430a      	orrs	r2, r1
 80009e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2221      	movs	r2, #33	@ 0x21
 80009ee:	5c9b      	ldrb	r3, [r3, r2]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d11a      	bne.n	8000a2a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2220      	movs	r2, #32
 80009f8:	5c9b      	ldrb	r3, [r3, r2]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d109      	bne.n	8000a12 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	68da      	ldr	r2, [r3, #12]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2180      	movs	r1, #128	@ 0x80
 8000a0a:	0249      	lsls	r1, r1, #9
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	e00b      	b.n	8000a2a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a16:	2220      	movs	r2, #32
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a22:	2201      	movs	r2, #1
 8000a24:	431a      	orrs	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d11f      	bne.n	8000a72 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	691a      	ldr	r2, [r3, #16]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	492a      	ldr	r1, [pc, #168]	@ (8000ae8 <HAL_ADC_Init+0x2e4>)
 8000a3e:	400a      	ands	r2, r1
 8000a40:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6919      	ldr	r1, [r3, #16]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000a50:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000a56:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	691a      	ldr	r2, [r3, #16]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	e00e      	b.n	8000a90 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d107      	bne.n	8000a90 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	691a      	ldr	r2, [r3, #16]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	438a      	bics	r2, r1
 8000a8e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	695a      	ldr	r2, [r3, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2107      	movs	r1, #7
 8000a9c:	438a      	bics	r2, r1
 8000a9e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	6959      	ldr	r1, [r3, #20]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000abc:	2203      	movs	r2, #3
 8000abe:	4393      	bics	r3, r2
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	0018      	movs	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	fffffefd 	.word	0xfffffefd
 8000ad8:	40012708 	.word	0x40012708
 8000adc:	ffc3ffff 	.word	0xffc3ffff
 8000ae0:	fdffffff 	.word	0xfdffffff
 8000ae4:	fffe0219 	.word	0xfffe0219
 8000ae8:	fffffc03 	.word	0xfffffc03

08000aec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2250      	movs	r2, #80	@ 0x50
 8000afa:	5c9b      	ldrb	r3, [r3, r2]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d101      	bne.n	8000b04 <HAL_ADC_ConfigChannel+0x18>
 8000b00:	2302      	movs	r3, #2
 8000b02:	e085      	b.n	8000c10 <HAL_ADC_ConfigChannel+0x124>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2250      	movs	r2, #80	@ 0x50
 8000b08:	2101      	movs	r1, #1
 8000b0a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	2204      	movs	r2, #4
 8000b14:	4013      	ands	r3, r2
 8000b16:	d00b      	beq.n	8000b30 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b1c:	2220      	movs	r2, #32
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2250      	movs	r2, #80	@ 0x50
 8000b28:	2100      	movs	r1, #0
 8000b2a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	e06f      	b.n	8000c10 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	4a38      	ldr	r2, [pc, #224]	@ (8000c18 <HAL_ADC_ConfigChannel+0x12c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d035      	beq.n	8000ba6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	035b      	lsls	r3, r3, #13
 8000b46:	0b5a      	lsrs	r2, r3, #13
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	2380      	movs	r3, #128	@ 0x80
 8000b56:	02db      	lsls	r3, r3, #11
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d009      	beq.n	8000b70 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8000b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c1c <HAL_ADC_ConfigChannel+0x130>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b2e      	ldr	r3, [pc, #184]	@ (8000c1c <HAL_ADC_ConfigChannel+0x130>)
 8000b62:	2180      	movs	r1, #128	@ 0x80
 8000b64:	0409      	lsls	r1, r1, #16
 8000b66:	430a      	orrs	r2, r1
 8000b68:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000b6a:	200a      	movs	r0, #10
 8000b6c:	f000 f85e 	bl	8000c2c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	2380      	movs	r3, #128	@ 0x80
 8000b76:	029b      	lsls	r3, r3, #10
 8000b78:	4013      	ands	r3, r2
 8000b7a:	d006      	beq.n	8000b8a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8000b7c:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <HAL_ADC_ConfigChannel+0x130>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <HAL_ADC_ConfigChannel+0x130>)
 8000b82:	2180      	movs	r1, #128	@ 0x80
 8000b84:	03c9      	lsls	r1, r1, #15
 8000b86:	430a      	orrs	r2, r1
 8000b88:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	2380      	movs	r3, #128	@ 0x80
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	4013      	ands	r3, r2
 8000b94:	d037      	beq.n	8000c06 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8000b96:	4b21      	ldr	r3, [pc, #132]	@ (8000c1c <HAL_ADC_ConfigChannel+0x130>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	4b20      	ldr	r3, [pc, #128]	@ (8000c1c <HAL_ADC_ConfigChannel+0x130>)
 8000b9c:	2180      	movs	r1, #128	@ 0x80
 8000b9e:	0449      	lsls	r1, r1, #17
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	e02f      	b.n	8000c06 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	035b      	lsls	r3, r3, #13
 8000bb2:	0b5b      	lsrs	r3, r3, #13
 8000bb4:	43d9      	mvns	r1, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	400a      	ands	r2, r1
 8000bbc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	2380      	movs	r3, #128	@ 0x80
 8000bc4:	02db      	lsls	r3, r3, #11
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d005      	beq.n	8000bd6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <HAL_ADC_ConfigChannel+0x130>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <HAL_ADC_ConfigChannel+0x130>)
 8000bd0:	4913      	ldr	r1, [pc, #76]	@ (8000c20 <HAL_ADC_ConfigChannel+0x134>)
 8000bd2:	400a      	ands	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	2380      	movs	r3, #128	@ 0x80
 8000bdc:	029b      	lsls	r3, r3, #10
 8000bde:	4013      	ands	r3, r2
 8000be0:	d005      	beq.n	8000bee <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <HAL_ADC_ConfigChannel+0x130>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <HAL_ADC_ConfigChannel+0x130>)
 8000be8:	490e      	ldr	r1, [pc, #56]	@ (8000c24 <HAL_ADC_ConfigChannel+0x138>)
 8000bea:	400a      	ands	r2, r1
 8000bec:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	2380      	movs	r3, #128	@ 0x80
 8000bf4:	025b      	lsls	r3, r3, #9
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	d005      	beq.n	8000c06 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <HAL_ADC_ConfigChannel+0x130>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <HAL_ADC_ConfigChannel+0x130>)
 8000c00:	4909      	ldr	r1, [pc, #36]	@ (8000c28 <HAL_ADC_ConfigChannel+0x13c>)
 8000c02:	400a      	ands	r2, r1
 8000c04:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2250      	movs	r2, #80	@ 0x50
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	0018      	movs	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b002      	add	sp, #8
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	00001001 	.word	0x00001001
 8000c1c:	40012708 	.word	0x40012708
 8000c20:	ff7fffff 	.word	0xff7fffff
 8000c24:	ffbfffff 	.word	0xffbfffff
 8000c28:	feffffff 	.word	0xfeffffff

08000c2c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <ADC_DelayMicroSecond+0x38>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	490b      	ldr	r1, [pc, #44]	@ (8000c68 <ADC_DelayMicroSecond+0x3c>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff fa64 	bl	8000108 <__udivsi3>
 8000c40:	0003      	movs	r3, r0
 8000c42:	001a      	movs	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4353      	muls	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8000c4a:	e002      	b.n	8000c52 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f9      	bne.n	8000c4c <ADC_DelayMicroSecond+0x20>
  }
}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b004      	add	sp, #16
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	20000000 	.word	0x20000000
 8000c68:	000f4240 	.word	0x000f4240

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	0002      	movs	r2, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c80:	d828      	bhi.n	8000cd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c82:	4a2f      	ldr	r2, [pc, #188]	@ (8000d40 <__NVIC_SetPriority+0xd4>)
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	089b      	lsrs	r3, r3, #2
 8000c8c:	33c0      	adds	r3, #192	@ 0xc0
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	589b      	ldr	r3, [r3, r2]
 8000c92:	1dfa      	adds	r2, r7, #7
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	0011      	movs	r1, r2
 8000c98:	2203      	movs	r2, #3
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	00d2      	lsls	r2, r2, #3
 8000c9e:	21ff      	movs	r1, #255	@ 0xff
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	000a      	movs	r2, r1
 8000ca4:	43d2      	mvns	r2, r2
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	019b      	lsls	r3, r3, #6
 8000cae:	22ff      	movs	r2, #255	@ 0xff
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	2303      	movs	r3, #3
 8000cba:	4003      	ands	r3, r0
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc0:	481f      	ldr	r0, [pc, #124]	@ (8000d40 <__NVIC_SetPriority+0xd4>)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	33c0      	adds	r3, #192	@ 0xc0
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cd2:	e031      	b.n	8000d38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d44 <__NVIC_SetPriority+0xd8>)
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	0019      	movs	r1, r3
 8000cdc:	230f      	movs	r3, #15
 8000cde:	400b      	ands	r3, r1
 8000ce0:	3b08      	subs	r3, #8
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3306      	adds	r3, #6
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	18d3      	adds	r3, r2, r3
 8000cea:	3304      	adds	r3, #4
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	1dfa      	adds	r2, r7, #7
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	00d2      	lsls	r2, r2, #3
 8000cfa:	21ff      	movs	r1, #255	@ 0xff
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	000a      	movs	r2, r1
 8000d00:	43d2      	mvns	r2, r2
 8000d02:	401a      	ands	r2, r3
 8000d04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	019b      	lsls	r3, r3, #6
 8000d0a:	22ff      	movs	r2, #255	@ 0xff
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	0018      	movs	r0, r3
 8000d14:	2303      	movs	r3, #3
 8000d16:	4003      	ands	r3, r0
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1c:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <__NVIC_SetPriority+0xd8>)
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	001c      	movs	r4, r3
 8000d24:	230f      	movs	r3, #15
 8000d26:	4023      	ands	r3, r4
 8000d28:	3b08      	subs	r3, #8
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	3306      	adds	r3, #6
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	18c3      	adds	r3, r0, r3
 8000d34:	3304      	adds	r3, #4
 8000d36:	601a      	str	r2, [r3, #0]
}
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b003      	add	sp, #12
 8000d3e:	bd90      	pop	{r4, r7, pc}
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	1e5a      	subs	r2, r3, #1
 8000d54:	2380      	movs	r3, #128	@ 0x80
 8000d56:	045b      	lsls	r3, r3, #17
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d301      	bcc.n	8000d60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e010      	b.n	8000d82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d60:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <SysTick_Config+0x44>)
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	3a01      	subs	r2, #1
 8000d66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d68:	2301      	movs	r3, #1
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	2103      	movs	r1, #3
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff ff7c 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <SysTick_Config+0x44>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <SysTick_Config+0x44>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	0018      	movs	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	1c02      	adds	r2, r0, #0
 8000da0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b004      	add	sp, #16
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff ffbf 	bl	8000d48 <SysTick_Config>
 8000dca:	0003      	movs	r3, r0
}
 8000dcc:	0018      	movs	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b002      	add	sp, #8
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	f000 fbaf 	bl	8001546 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000de8:	4bcf      	ldr	r3, [pc, #828]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	220c      	movs	r2, #12
 8000dee:	4013      	ands	r3, r2
 8000df0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000df2:	4bcd      	ldr	r3, [pc, #820]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	2380      	movs	r3, #128	@ 0x80
 8000df8:	025b      	lsls	r3, r3, #9
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2201      	movs	r2, #1
 8000e04:	4013      	ands	r3, r2
 8000e06:	d100      	bne.n	8000e0a <HAL_RCC_OscConfig+0x36>
 8000e08:	e07e      	b.n	8000f08 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	2b08      	cmp	r3, #8
 8000e0e:	d007      	beq.n	8000e20 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	2b0c      	cmp	r3, #12
 8000e14:	d112      	bne.n	8000e3c <HAL_RCC_OscConfig+0x68>
 8000e16:	69fa      	ldr	r2, [r7, #28]
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	025b      	lsls	r3, r3, #9
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d10d      	bne.n	8000e3c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e20:	4bc1      	ldr	r3, [pc, #772]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	2380      	movs	r3, #128	@ 0x80
 8000e26:	029b      	lsls	r3, r3, #10
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d100      	bne.n	8000e2e <HAL_RCC_OscConfig+0x5a>
 8000e2c:	e06b      	b.n	8000f06 <HAL_RCC_OscConfig+0x132>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d167      	bne.n	8000f06 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	f000 fb85 	bl	8001546 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	2380      	movs	r3, #128	@ 0x80
 8000e42:	025b      	lsls	r3, r3, #9
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d107      	bne.n	8000e58 <HAL_RCC_OscConfig+0x84>
 8000e48:	4bb7      	ldr	r3, [pc, #732]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4bb6      	ldr	r3, [pc, #728]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000e4e:	2180      	movs	r1, #128	@ 0x80
 8000e50:	0249      	lsls	r1, r1, #9
 8000e52:	430a      	orrs	r2, r1
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e027      	b.n	8000ea8 <HAL_RCC_OscConfig+0xd4>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	23a0      	movs	r3, #160	@ 0xa0
 8000e5e:	02db      	lsls	r3, r3, #11
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d10e      	bne.n	8000e82 <HAL_RCC_OscConfig+0xae>
 8000e64:	4bb0      	ldr	r3, [pc, #704]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4baf      	ldr	r3, [pc, #700]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000e6a:	2180      	movs	r1, #128	@ 0x80
 8000e6c:	02c9      	lsls	r1, r1, #11
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	4bad      	ldr	r3, [pc, #692]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4bac      	ldr	r3, [pc, #688]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000e78:	2180      	movs	r1, #128	@ 0x80
 8000e7a:	0249      	lsls	r1, r1, #9
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e012      	b.n	8000ea8 <HAL_RCC_OscConfig+0xd4>
 8000e82:	4ba9      	ldr	r3, [pc, #676]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4ba8      	ldr	r3, [pc, #672]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000e88:	49a8      	ldr	r1, [pc, #672]	@ (800112c <HAL_RCC_OscConfig+0x358>)
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	4ba6      	ldr	r3, [pc, #664]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	2380      	movs	r3, #128	@ 0x80
 8000e94:	025b      	lsls	r3, r3, #9
 8000e96:	4013      	ands	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4ba2      	ldr	r3, [pc, #648]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4ba1      	ldr	r3, [pc, #644]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000ea2:	49a3      	ldr	r1, [pc, #652]	@ (8001130 <HAL_RCC_OscConfig+0x35c>)
 8000ea4:	400a      	ands	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d015      	beq.n	8000edc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fc9e 	bl	80007f0 <HAL_GetTick>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000eb8:	e009      	b.n	8000ece <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eba:	f7ff fc99 	bl	80007f0 <HAL_GetTick>
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b64      	cmp	r3, #100	@ 0x64
 8000ec6:	d902      	bls.n	8000ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	f000 fb3c 	bl	8001546 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ece:	4b96      	ldr	r3, [pc, #600]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	2380      	movs	r3, #128	@ 0x80
 8000ed4:	029b      	lsls	r3, r3, #10
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	d0ef      	beq.n	8000eba <HAL_RCC_OscConfig+0xe6>
 8000eda:	e015      	b.n	8000f08 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000edc:	f7ff fc88 	bl	80007f0 <HAL_GetTick>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee6:	f7ff fc83 	bl	80007f0 <HAL_GetTick>
 8000eea:	0002      	movs	r2, r0
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b64      	cmp	r3, #100	@ 0x64
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e326      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ef8:	4b8b      	ldr	r3, [pc, #556]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2380      	movs	r3, #128	@ 0x80
 8000efe:	029b      	lsls	r3, r3, #10
 8000f00:	4013      	ands	r3, r2
 8000f02:	d1f0      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x112>
 8000f04:	e000      	b.n	8000f08 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f06:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d100      	bne.n	8000f14 <HAL_RCC_OscConfig+0x140>
 8000f12:	e08b      	b.n	800102c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f1a:	6a3b      	ldr	r3, [r7, #32]
 8000f1c:	2b04      	cmp	r3, #4
 8000f1e:	d005      	beq.n	8000f2c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f20:	6a3b      	ldr	r3, [r7, #32]
 8000f22:	2b0c      	cmp	r3, #12
 8000f24:	d13e      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x1d0>
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d13b      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000f2c:	4b7e      	ldr	r3, [pc, #504]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2204      	movs	r2, #4
 8000f32:	4013      	ands	r3, r2
 8000f34:	d004      	beq.n	8000f40 <HAL_RCC_OscConfig+0x16c>
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e302      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f40:	4b79      	ldr	r3, [pc, #484]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4a7b      	ldr	r2, [pc, #492]	@ (8001134 <HAL_RCC_OscConfig+0x360>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	0019      	movs	r1, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	691b      	ldr	r3, [r3, #16]
 8000f4e:	021a      	lsls	r2, r3, #8
 8000f50:	4b75      	ldr	r3, [pc, #468]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000f52:	430a      	orrs	r2, r1
 8000f54:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000f56:	4b74      	ldr	r3, [pc, #464]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2209      	movs	r2, #9
 8000f5c:	4393      	bics	r3, r2
 8000f5e:	0019      	movs	r1, r3
 8000f60:	4b71      	ldr	r3, [pc, #452]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f68:	f000 fc40 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 8000f6c:	0001      	movs	r1, r0
 8000f6e:	4b6e      	ldr	r3, [pc, #440]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	091b      	lsrs	r3, r3, #4
 8000f74:	220f      	movs	r2, #15
 8000f76:	4013      	ands	r3, r2
 8000f78:	4a6f      	ldr	r2, [pc, #444]	@ (8001138 <HAL_RCC_OscConfig+0x364>)
 8000f7a:	5cd3      	ldrb	r3, [r2, r3]
 8000f7c:	000a      	movs	r2, r1
 8000f7e:	40da      	lsrs	r2, r3
 8000f80:	4b6e      	ldr	r3, [pc, #440]	@ (800113c <HAL_RCC_OscConfig+0x368>)
 8000f82:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8000f84:	4b6e      	ldr	r3, [pc, #440]	@ (8001140 <HAL_RCC_OscConfig+0x36c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2513      	movs	r5, #19
 8000f8a:	197c      	adds	r4, r7, r5
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff fbe9 	bl	8000764 <HAL_InitTick>
 8000f92:	0003      	movs	r3, r0
 8000f94:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8000f96:	197b      	adds	r3, r7, r5
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d046      	beq.n	800102c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8000f9e:	197b      	adds	r3, r7, r5
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	e2d0      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d027      	beq.n	8000ffa <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000faa:	4b5f      	ldr	r3, [pc, #380]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2209      	movs	r2, #9
 8000fb0:	4393      	bics	r3, r2
 8000fb2:	0019      	movs	r1, r3
 8000fb4:	4b5c      	ldr	r3, [pc, #368]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fc18 	bl	80007f0 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc6:	f7ff fc13 	bl	80007f0 <HAL_GetTick>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e2b6      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fd8:	4b53      	ldr	r3, [pc, #332]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2204      	movs	r2, #4
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d0f1      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe2:	4b51      	ldr	r3, [pc, #324]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	4a53      	ldr	r2, [pc, #332]	@ (8001134 <HAL_RCC_OscConfig+0x360>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	0019      	movs	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	021a      	lsls	r2, r3, #8
 8000ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	e018      	b.n	800102c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8001000:	2101      	movs	r1, #1
 8001002:	438a      	bics	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001006:	f7ff fbf3 	bl	80007f0 <HAL_GetTick>
 800100a:	0003      	movs	r3, r0
 800100c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001010:	f7ff fbee 	bl	80007f0 <HAL_GetTick>
 8001014:	0002      	movs	r2, r0
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e291      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001022:	4b41      	ldr	r3, [pc, #260]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2204      	movs	r2, #4
 8001028:	4013      	ands	r3, r2
 800102a:	d1f1      	bne.n	8001010 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2210      	movs	r2, #16
 8001032:	4013      	ands	r3, r2
 8001034:	d100      	bne.n	8001038 <HAL_RCC_OscConfig+0x264>
 8001036:	e0a1      	b.n	800117c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d140      	bne.n	80010c0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800103e:	4b3a      	ldr	r3, [pc, #232]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	2380      	movs	r3, #128	@ 0x80
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4013      	ands	r3, r2
 8001048:	d005      	beq.n	8001056 <HAL_RCC_OscConfig+0x282>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e277      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001056:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	4a3a      	ldr	r2, [pc, #232]	@ (8001144 <HAL_RCC_OscConfig+0x370>)
 800105c:	4013      	ands	r3, r2
 800105e:	0019      	movs	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001064:	4b30      	ldr	r3, [pc, #192]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8001066:	430a      	orrs	r2, r1
 8001068:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800106a:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	0a19      	lsrs	r1, r3, #8
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	061a      	lsls	r2, r3, #24
 8001078:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 800107a:	430a      	orrs	r2, r1
 800107c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001082:	0b5b      	lsrs	r3, r3, #13
 8001084:	3301      	adds	r3, #1
 8001086:	2280      	movs	r2, #128	@ 0x80
 8001088:	0212      	lsls	r2, r2, #8
 800108a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800108c:	4b26      	ldr	r3, [pc, #152]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	210f      	movs	r1, #15
 8001094:	400b      	ands	r3, r1
 8001096:	4928      	ldr	r1, [pc, #160]	@ (8001138 <HAL_RCC_OscConfig+0x364>)
 8001098:	5ccb      	ldrb	r3, [r1, r3]
 800109a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <HAL_RCC_OscConfig+0x368>)
 800109e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80010a0:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <HAL_RCC_OscConfig+0x36c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2513      	movs	r5, #19
 80010a6:	197c      	adds	r4, r7, r5
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff fb5b 	bl	8000764 <HAL_InitTick>
 80010ae:	0003      	movs	r3, r0
 80010b0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80010b2:	197b      	adds	r3, r7, r5
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d060      	beq.n	800117c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80010ba:	197b      	adds	r3, r7, r5
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	e242      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d03f      	beq.n	8001148 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 80010ce:	2180      	movs	r1, #128	@ 0x80
 80010d0:	0049      	lsls	r1, r1, #1
 80010d2:	430a      	orrs	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fb8b 	bl	80007f0 <HAL_GetTick>
 80010da:	0003      	movs	r3, r0
 80010dc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010e0:	f7ff fb86 	bl	80007f0 <HAL_GetTick>
 80010e4:	0002      	movs	r2, r0
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e229      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80010f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4013      	ands	r3, r2
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4a10      	ldr	r2, [pc, #64]	@ (8001144 <HAL_RCC_OscConfig+0x370>)
 8001104:	4013      	ands	r3, r2
 8001106:	0019      	movs	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 800110e:	430a      	orrs	r2, r1
 8001110:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001112:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	0a19      	lsrs	r1, r3, #8
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	061a      	lsls	r2, r3, #24
 8001120:	4b01      	ldr	r3, [pc, #4]	@ (8001128 <HAL_RCC_OscConfig+0x354>)
 8001122:	430a      	orrs	r2, r1
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	e029      	b.n	800117c <HAL_RCC_OscConfig+0x3a8>
 8001128:	40021000 	.word	0x40021000
 800112c:	fffeffff 	.word	0xfffeffff
 8001130:	fffbffff 	.word	0xfffbffff
 8001134:	ffffe0ff 	.word	0xffffe0ff
 8001138:	08001968 	.word	0x08001968
 800113c:	20000000 	.word	0x20000000
 8001140:	20000004 	.word	0x20000004
 8001144:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001148:	4bbd      	ldr	r3, [pc, #756]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4bbc      	ldr	r3, [pc, #752]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 800114e:	49bd      	ldr	r1, [pc, #756]	@ (8001444 <HAL_RCC_OscConfig+0x670>)
 8001150:	400a      	ands	r2, r1
 8001152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fb4c 	bl	80007f0 <HAL_GetTick>
 8001158:	0003      	movs	r3, r0
 800115a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800115e:	f7ff fb47 	bl	80007f0 <HAL_GetTick>
 8001162:	0002      	movs	r2, r0
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e1ea      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001170:	4bb3      	ldr	r3, [pc, #716]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2380      	movs	r3, #128	@ 0x80
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4013      	ands	r3, r2
 800117a:	d1f0      	bne.n	800115e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2208      	movs	r2, #8
 8001182:	4013      	ands	r3, r2
 8001184:	d036      	beq.n	80011f4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d019      	beq.n	80011c2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118e:	4bac      	ldr	r3, [pc, #688]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001190:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001192:	4bab      	ldr	r3, [pc, #684]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001194:	2101      	movs	r1, #1
 8001196:	430a      	orrs	r2, r1
 8001198:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119a:	f7ff fb29 	bl	80007f0 <HAL_GetTick>
 800119e:	0003      	movs	r3, r0
 80011a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fb24 	bl	80007f0 <HAL_GetTick>
 80011a8:	0002      	movs	r2, r0
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e1c7      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011b6:	4ba2      	ldr	r3, [pc, #648]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80011b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ba:	2202      	movs	r2, #2
 80011bc:	4013      	ands	r3, r2
 80011be:	d0f1      	beq.n	80011a4 <HAL_RCC_OscConfig+0x3d0>
 80011c0:	e018      	b.n	80011f4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c2:	4b9f      	ldr	r3, [pc, #636]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80011c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80011c6:	4b9e      	ldr	r3, [pc, #632]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80011c8:	2101      	movs	r1, #1
 80011ca:	438a      	bics	r2, r1
 80011cc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ce:	f7ff fb0f 	bl	80007f0 <HAL_GetTick>
 80011d2:	0003      	movs	r3, r0
 80011d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d8:	f7ff fb0a 	bl	80007f0 <HAL_GetTick>
 80011dc:	0002      	movs	r2, r0
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1ad      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011ea:	4b95      	ldr	r3, [pc, #596]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80011ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ee:	2202      	movs	r2, #2
 80011f0:	4013      	ands	r3, r2
 80011f2:	d1f1      	bne.n	80011d8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2204      	movs	r2, #4
 80011fa:	4013      	ands	r3, r2
 80011fc:	d100      	bne.n	8001200 <HAL_RCC_OscConfig+0x42c>
 80011fe:	e0ae      	b.n	800135e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001200:	2027      	movs	r0, #39	@ 0x27
 8001202:	183b      	adds	r3, r7, r0
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001208:	4b8d      	ldr	r3, [pc, #564]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 800120a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800120c:	2380      	movs	r3, #128	@ 0x80
 800120e:	055b      	lsls	r3, r3, #21
 8001210:	4013      	ands	r3, r2
 8001212:	d109      	bne.n	8001228 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	4b8a      	ldr	r3, [pc, #552]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001216:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001218:	4b89      	ldr	r3, [pc, #548]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 800121a:	2180      	movs	r1, #128	@ 0x80
 800121c:	0549      	lsls	r1, r1, #21
 800121e:	430a      	orrs	r2, r1
 8001220:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001222:	183b      	adds	r3, r7, r0
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001228:	4b87      	ldr	r3, [pc, #540]	@ (8001448 <HAL_RCC_OscConfig+0x674>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4013      	ands	r3, r2
 8001232:	d11a      	bne.n	800126a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001234:	4b84      	ldr	r3, [pc, #528]	@ (8001448 <HAL_RCC_OscConfig+0x674>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b83      	ldr	r3, [pc, #524]	@ (8001448 <HAL_RCC_OscConfig+0x674>)
 800123a:	2180      	movs	r1, #128	@ 0x80
 800123c:	0049      	lsls	r1, r1, #1
 800123e:	430a      	orrs	r2, r1
 8001240:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001242:	f7ff fad5 	bl	80007f0 <HAL_GetTick>
 8001246:	0003      	movs	r3, r0
 8001248:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124c:	f7ff fad0 	bl	80007f0 <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	@ 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e173      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125e:	4b7a      	ldr	r3, [pc, #488]	@ (8001448 <HAL_RCC_OscConfig+0x674>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	2380      	movs	r3, #128	@ 0x80
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4013      	ands	r3, r2
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	2380      	movs	r3, #128	@ 0x80
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	429a      	cmp	r2, r3
 8001274:	d107      	bne.n	8001286 <HAL_RCC_OscConfig+0x4b2>
 8001276:	4b72      	ldr	r3, [pc, #456]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001278:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800127a:	4b71      	ldr	r3, [pc, #452]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 800127c:	2180      	movs	r1, #128	@ 0x80
 800127e:	0049      	lsls	r1, r1, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	651a      	str	r2, [r3, #80]	@ 0x50
 8001284:	e031      	b.n	80012ea <HAL_RCC_OscConfig+0x516>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10c      	bne.n	80012a8 <HAL_RCC_OscConfig+0x4d4>
 800128e:	4b6c      	ldr	r3, [pc, #432]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001290:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001292:	4b6b      	ldr	r3, [pc, #428]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001294:	496b      	ldr	r1, [pc, #428]	@ (8001444 <HAL_RCC_OscConfig+0x670>)
 8001296:	400a      	ands	r2, r1
 8001298:	651a      	str	r2, [r3, #80]	@ 0x50
 800129a:	4b69      	ldr	r3, [pc, #420]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 800129c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800129e:	4b68      	ldr	r3, [pc, #416]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80012a0:	496a      	ldr	r1, [pc, #424]	@ (800144c <HAL_RCC_OscConfig+0x678>)
 80012a2:	400a      	ands	r2, r1
 80012a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80012a6:	e020      	b.n	80012ea <HAL_RCC_OscConfig+0x516>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	23a0      	movs	r3, #160	@ 0xa0
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d10e      	bne.n	80012d2 <HAL_RCC_OscConfig+0x4fe>
 80012b4:	4b62      	ldr	r3, [pc, #392]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80012b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012b8:	4b61      	ldr	r3, [pc, #388]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80012ba:	2180      	movs	r1, #128	@ 0x80
 80012bc:	00c9      	lsls	r1, r1, #3
 80012be:	430a      	orrs	r2, r1
 80012c0:	651a      	str	r2, [r3, #80]	@ 0x50
 80012c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80012c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012c6:	4b5e      	ldr	r3, [pc, #376]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80012c8:	2180      	movs	r1, #128	@ 0x80
 80012ca:	0049      	lsls	r1, r1, #1
 80012cc:	430a      	orrs	r2, r1
 80012ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80012d0:	e00b      	b.n	80012ea <HAL_RCC_OscConfig+0x516>
 80012d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80012d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80012d8:	495a      	ldr	r1, [pc, #360]	@ (8001444 <HAL_RCC_OscConfig+0x670>)
 80012da:	400a      	ands	r2, r1
 80012dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80012de:	4b58      	ldr	r3, [pc, #352]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80012e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80012e2:	4b57      	ldr	r3, [pc, #348]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80012e4:	4959      	ldr	r1, [pc, #356]	@ (800144c <HAL_RCC_OscConfig+0x678>)
 80012e6:	400a      	ands	r2, r1
 80012e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d015      	beq.n	800131e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f2:	f7ff fa7d 	bl	80007f0 <HAL_GetTick>
 80012f6:	0003      	movs	r3, r0
 80012f8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012fa:	e009      	b.n	8001310 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012fc:	f7ff fa78 	bl	80007f0 <HAL_GetTick>
 8001300:	0002      	movs	r2, r0
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	4a52      	ldr	r2, [pc, #328]	@ (8001450 <HAL_RCC_OscConfig+0x67c>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e11a      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001310:	4b4b      	ldr	r3, [pc, #300]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001312:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4013      	ands	r3, r2
 800131a:	d0ef      	beq.n	80012fc <HAL_RCC_OscConfig+0x528>
 800131c:	e014      	b.n	8001348 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131e:	f7ff fa67 	bl	80007f0 <HAL_GetTick>
 8001322:	0003      	movs	r3, r0
 8001324:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001326:	e009      	b.n	800133c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001328:	f7ff fa62 	bl	80007f0 <HAL_GetTick>
 800132c:	0002      	movs	r2, r0
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	4a47      	ldr	r2, [pc, #284]	@ (8001450 <HAL_RCC_OscConfig+0x67c>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e104      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800133c:	4b40      	ldr	r3, [pc, #256]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 800133e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001340:	2380      	movs	r3, #128	@ 0x80
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4013      	ands	r3, r2
 8001346:	d1ef      	bne.n	8001328 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001348:	2327      	movs	r3, #39	@ 0x27
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d105      	bne.n	800135e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001352:	4b3b      	ldr	r3, [pc, #236]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001356:	4b3a      	ldr	r3, [pc, #232]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001358:	493e      	ldr	r1, [pc, #248]	@ (8001454 <HAL_RCC_OscConfig+0x680>)
 800135a:	400a      	ands	r2, r1
 800135c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2220      	movs	r2, #32
 8001364:	4013      	ands	r3, r2
 8001366:	d049      	beq.n	80013fc <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d026      	beq.n	80013be <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001370:	4b33      	ldr	r3, [pc, #204]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	4b32      	ldr	r3, [pc, #200]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001376:	2101      	movs	r1, #1
 8001378:	430a      	orrs	r2, r1
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	4b30      	ldr	r3, [pc, #192]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 800137e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001380:	4b2f      	ldr	r3, [pc, #188]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001382:	2101      	movs	r1, #1
 8001384:	430a      	orrs	r2, r1
 8001386:	635a      	str	r2, [r3, #52]	@ 0x34
 8001388:	4b33      	ldr	r3, [pc, #204]	@ (8001458 <HAL_RCC_OscConfig+0x684>)
 800138a:	6a1a      	ldr	r2, [r3, #32]
 800138c:	4b32      	ldr	r3, [pc, #200]	@ (8001458 <HAL_RCC_OscConfig+0x684>)
 800138e:	2180      	movs	r1, #128	@ 0x80
 8001390:	0189      	lsls	r1, r1, #6
 8001392:	430a      	orrs	r2, r1
 8001394:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fa2b 	bl	80007f0 <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013a0:	f7ff fa26 	bl	80007f0 <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e0c9      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80013b2:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d0f1      	beq.n	80013a0 <HAL_RCC_OscConfig+0x5cc>
 80013bc:	e01e      	b.n	80013fc <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	438a      	bics	r2, r1
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <HAL_RCC_OscConfig+0x684>)
 80013cc:	6a1a      	ldr	r2, [r3, #32]
 80013ce:	4b22      	ldr	r3, [pc, #136]	@ (8001458 <HAL_RCC_OscConfig+0x684>)
 80013d0:	4922      	ldr	r1, [pc, #136]	@ (800145c <HAL_RCC_OscConfig+0x688>)
 80013d2:	400a      	ands	r2, r1
 80013d4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fa0b 	bl	80007f0 <HAL_GetTick>
 80013da:	0003      	movs	r3, r0
 80013dc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013e0:	f7ff fa06 	bl	80007f0 <HAL_GetTick>
 80013e4:	0002      	movs	r2, r0
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e0a9      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013f2:	4b13      	ldr	r3, [pc, #76]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2202      	movs	r2, #2
 80013f8:	4013      	ands	r3, r2
 80013fa:	d1f1      	bne.n	80013e0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001400:	2b00      	cmp	r3, #0
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x632>
 8001404:	e09e      	b.n	8001544 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	2b0c      	cmp	r3, #12
 800140a:	d100      	bne.n	800140e <HAL_RCC_OscConfig+0x63a>
 800140c:	e077      	b.n	80014fe <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001412:	2b02      	cmp	r3, #2
 8001414:	d158      	bne.n	80014c8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <HAL_RCC_OscConfig+0x66c>)
 800141c:	4910      	ldr	r1, [pc, #64]	@ (8001460 <HAL_RCC_OscConfig+0x68c>)
 800141e:	400a      	ands	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff f9e5 	bl	80007f0 <HAL_GetTick>
 8001426:	0003      	movs	r3, r0
 8001428:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800142a:	e01b      	b.n	8001464 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff f9e0 	bl	80007f0 <HAL_GetTick>
 8001430:	0002      	movs	r2, r0
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d914      	bls.n	8001464 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e083      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	40021000 	.word	0x40021000
 8001444:	fffffeff 	.word	0xfffffeff
 8001448:	40007000 	.word	0x40007000
 800144c:	fffffbff 	.word	0xfffffbff
 8001450:	00001388 	.word	0x00001388
 8001454:	efffffff 	.word	0xefffffff
 8001458:	40010000 	.word	0x40010000
 800145c:	ffffdfff 	.word	0xffffdfff
 8001460:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001464:	4b3a      	ldr	r3, [pc, #232]	@ (8001550 <HAL_RCC_OscConfig+0x77c>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	049b      	lsls	r3, r3, #18
 800146c:	4013      	ands	r3, r2
 800146e:	d1dd      	bne.n	800142c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001470:	4b37      	ldr	r3, [pc, #220]	@ (8001550 <HAL_RCC_OscConfig+0x77c>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	4a37      	ldr	r2, [pc, #220]	@ (8001554 <HAL_RCC_OscConfig+0x780>)
 8001476:	4013      	ands	r3, r2
 8001478:	0019      	movs	r1, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001488:	431a      	orrs	r2, r3
 800148a:	4b31      	ldr	r3, [pc, #196]	@ (8001550 <HAL_RCC_OscConfig+0x77c>)
 800148c:	430a      	orrs	r2, r1
 800148e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001490:	4b2f      	ldr	r3, [pc, #188]	@ (8001550 <HAL_RCC_OscConfig+0x77c>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b2e      	ldr	r3, [pc, #184]	@ (8001550 <HAL_RCC_OscConfig+0x77c>)
 8001496:	2180      	movs	r1, #128	@ 0x80
 8001498:	0449      	lsls	r1, r1, #17
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff f9a7 	bl	80007f0 <HAL_GetTick>
 80014a2:	0003      	movs	r3, r0
 80014a4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff f9a2 	bl	80007f0 <HAL_GetTick>
 80014ac:	0002      	movs	r2, r0
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e045      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014ba:	4b25      	ldr	r3, [pc, #148]	@ (8001550 <HAL_RCC_OscConfig+0x77c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	2380      	movs	r3, #128	@ 0x80
 80014c0:	049b      	lsls	r3, r3, #18
 80014c2:	4013      	ands	r3, r2
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x6d4>
 80014c6:	e03d      	b.n	8001544 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c8:	4b21      	ldr	r3, [pc, #132]	@ (8001550 <HAL_RCC_OscConfig+0x77c>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b20      	ldr	r3, [pc, #128]	@ (8001550 <HAL_RCC_OscConfig+0x77c>)
 80014ce:	4922      	ldr	r1, [pc, #136]	@ (8001558 <HAL_RCC_OscConfig+0x784>)
 80014d0:	400a      	ands	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff f98c 	bl	80007f0 <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014de:	f7ff f987 	bl	80007f0 <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e02a      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80014f0:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <HAL_RCC_OscConfig+0x77c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2380      	movs	r3, #128	@ 0x80
 80014f6:	049b      	lsls	r3, r3, #18
 80014f8:	4013      	ands	r3, r2
 80014fa:	d1f0      	bne.n	80014de <HAL_RCC_OscConfig+0x70a>
 80014fc:	e022      	b.n	8001544 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e01d      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <HAL_RCC_OscConfig+0x77c>)
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001510:	69fa      	ldr	r2, [r7, #28]
 8001512:	2380      	movs	r3, #128	@ 0x80
 8001514:	025b      	lsls	r3, r3, #9
 8001516:	401a      	ands	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151c:	429a      	cmp	r2, r3
 800151e:	d10f      	bne.n	8001540 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	23f0      	movs	r3, #240	@ 0xf0
 8001524:	039b      	lsls	r3, r3, #14
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d107      	bne.n	8001540 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	23c0      	movs	r3, #192	@ 0xc0
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	401a      	ands	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800153c:	429a      	cmp	r2, r3
 800153e:	d001      	beq.n	8001544 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b00a      	add	sp, #40	@ 0x28
 800154c:	bdb0      	pop	{r4, r5, r7, pc}
 800154e:	46c0      	nop			@ (mov r8, r8)
 8001550:	40021000 	.word	0x40021000
 8001554:	ff02ffff 	.word	0xff02ffff
 8001558:	feffffff 	.word	0xfeffffff

0800155c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e128      	b.n	80017c2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001570:	4b96      	ldr	r3, [pc, #600]	@ (80017cc <HAL_RCC_ClockConfig+0x270>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2201      	movs	r2, #1
 8001576:	4013      	ands	r3, r2
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d91e      	bls.n	80015bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b93      	ldr	r3, [pc, #588]	@ (80017cc <HAL_RCC_ClockConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2201      	movs	r2, #1
 8001584:	4393      	bics	r3, r2
 8001586:	0019      	movs	r1, r3
 8001588:	4b90      	ldr	r3, [pc, #576]	@ (80017cc <HAL_RCC_ClockConfig+0x270>)
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001590:	f7ff f92e 	bl	80007f0 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001598:	e009      	b.n	80015ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159a:	f7ff f929 	bl	80007f0 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	4a8a      	ldr	r2, [pc, #552]	@ (80017d0 <HAL_RCC_ClockConfig+0x274>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e109      	b.n	80017c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b87      	ldr	r3, [pc, #540]	@ (80017cc <HAL_RCC_ClockConfig+0x270>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2201      	movs	r2, #1
 80015b4:	4013      	ands	r3, r2
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d1ee      	bne.n	800159a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2202      	movs	r2, #2
 80015c2:	4013      	ands	r3, r2
 80015c4:	d009      	beq.n	80015da <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c6:	4b83      	ldr	r3, [pc, #524]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	22f0      	movs	r2, #240	@ 0xf0
 80015cc:	4393      	bics	r3, r2
 80015ce:	0019      	movs	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	4b7f      	ldr	r3, [pc, #508]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 80015d6:	430a      	orrs	r2, r1
 80015d8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2201      	movs	r2, #1
 80015e0:	4013      	ands	r3, r2
 80015e2:	d100      	bne.n	80015e6 <HAL_RCC_ClockConfig+0x8a>
 80015e4:	e089      	b.n	80016fa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015ee:	4b79      	ldr	r3, [pc, #484]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	4013      	ands	r3, r2
 80015f8:	d120      	bne.n	800163c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e0e1      	b.n	80017c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001606:	4b73      	ldr	r3, [pc, #460]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	049b      	lsls	r3, r3, #18
 800160e:	4013      	ands	r3, r2
 8001610:	d114      	bne.n	800163c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e0d5      	b.n	80017c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d106      	bne.n	800162c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800161e:	4b6d      	ldr	r3, [pc, #436]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2204      	movs	r2, #4
 8001624:	4013      	ands	r3, r2
 8001626:	d109      	bne.n	800163c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0ca      	b.n	80017c2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800162c:	4b69      	ldr	r3, [pc, #420]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4013      	ands	r3, r2
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0c2      	b.n	80017c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163c:	4b65      	ldr	r3, [pc, #404]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2203      	movs	r2, #3
 8001642:	4393      	bics	r3, r2
 8001644:	0019      	movs	r1, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4b62      	ldr	r3, [pc, #392]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 800164c:	430a      	orrs	r2, r1
 800164e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001650:	f7ff f8ce 	bl	80007f0 <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d111      	bne.n	8001684 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001660:	e009      	b.n	8001676 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001662:	f7ff f8c5 	bl	80007f0 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	4a58      	ldr	r2, [pc, #352]	@ (80017d0 <HAL_RCC_ClockConfig+0x274>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e0a5      	b.n	80017c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001676:	4b57      	ldr	r3, [pc, #348]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	220c      	movs	r2, #12
 800167c:	4013      	ands	r3, r2
 800167e:	2b08      	cmp	r3, #8
 8001680:	d1ef      	bne.n	8001662 <HAL_RCC_ClockConfig+0x106>
 8001682:	e03a      	b.n	80016fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d111      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168c:	e009      	b.n	80016a2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800168e:	f7ff f8af 	bl	80007f0 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	4a4d      	ldr	r2, [pc, #308]	@ (80017d0 <HAL_RCC_ClockConfig+0x274>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e08f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a2:	4b4c      	ldr	r3, [pc, #304]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	220c      	movs	r2, #12
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	d1ef      	bne.n	800168e <HAL_RCC_ClockConfig+0x132>
 80016ae:	e024      	b.n	80016fa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d11b      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b8:	e009      	b.n	80016ce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ba:	f7ff f899 	bl	80007f0 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	4a42      	ldr	r2, [pc, #264]	@ (80017d0 <HAL_RCC_ClockConfig+0x274>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e079      	b.n	80017c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ce:	4b41      	ldr	r3, [pc, #260]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	220c      	movs	r2, #12
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	d1ef      	bne.n	80016ba <HAL_RCC_ClockConfig+0x15e>
 80016da:	e00e      	b.n	80016fa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016dc:	f7ff f888 	bl	80007f0 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	4a3a      	ldr	r2, [pc, #232]	@ (80017d0 <HAL_RCC_ClockConfig+0x274>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e068      	b.n	80017c2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80016f0:	4b38      	ldr	r3, [pc, #224]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	220c      	movs	r2, #12
 80016f6:	4013      	ands	r3, r2
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016fa:	4b34      	ldr	r3, [pc, #208]	@ (80017cc <HAL_RCC_ClockConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2201      	movs	r2, #1
 8001700:	4013      	ands	r3, r2
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d21e      	bcs.n	8001746 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001708:	4b30      	ldr	r3, [pc, #192]	@ (80017cc <HAL_RCC_ClockConfig+0x270>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2201      	movs	r2, #1
 800170e:	4393      	bics	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	4b2e      	ldr	r3, [pc, #184]	@ (80017cc <HAL_RCC_ClockConfig+0x270>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800171a:	f7ff f869 	bl	80007f0 <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001722:	e009      	b.n	8001738 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001724:	f7ff f864 	bl	80007f0 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	4a28      	ldr	r2, [pc, #160]	@ (80017d0 <HAL_RCC_ClockConfig+0x274>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e044      	b.n	80017c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001738:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <HAL_RCC_ClockConfig+0x270>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2201      	movs	r2, #1
 800173e:	4013      	ands	r3, r2
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d1ee      	bne.n	8001724 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2204      	movs	r2, #4
 800174c:	4013      	ands	r3, r2
 800174e:	d009      	beq.n	8001764 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001750:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4a20      	ldr	r2, [pc, #128]	@ (80017d8 <HAL_RCC_ClockConfig+0x27c>)
 8001756:	4013      	ands	r3, r2
 8001758:	0019      	movs	r1, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 8001760:	430a      	orrs	r2, r1
 8001762:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2208      	movs	r2, #8
 800176a:	4013      	ands	r3, r2
 800176c:	d00a      	beq.n	8001784 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800176e:	4b19      	ldr	r3, [pc, #100]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	4a1a      	ldr	r2, [pc, #104]	@ (80017dc <HAL_RCC_ClockConfig+0x280>)
 8001774:	4013      	ands	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	00da      	lsls	r2, r3, #3
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 8001780:	430a      	orrs	r2, r1
 8001782:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001784:	f000 f832 	bl	80017ec <HAL_RCC_GetSysClockFreq>
 8001788:	0001      	movs	r1, r0
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_RCC_ClockConfig+0x278>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	220f      	movs	r2, #15
 8001792:	4013      	ands	r3, r2
 8001794:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <HAL_RCC_ClockConfig+0x284>)
 8001796:	5cd3      	ldrb	r3, [r2, r3]
 8001798:	000a      	movs	r2, r1
 800179a:	40da      	lsrs	r2, r3
 800179c:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <HAL_RCC_ClockConfig+0x288>)
 800179e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <HAL_RCC_ClockConfig+0x28c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	250b      	movs	r5, #11
 80017a6:	197c      	adds	r4, r7, r5
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7fe ffdb 	bl	8000764 <HAL_InitTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80017b2:	197b      	adds	r3, r7, r5
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80017ba:	197b      	adds	r3, r7, r5
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	e000      	b.n	80017c2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b004      	add	sp, #16
 80017c8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ca:	46c0      	nop			@ (mov r8, r8)
 80017cc:	40022000 	.word	0x40022000
 80017d0:	00001388 	.word	0x00001388
 80017d4:	40021000 	.word	0x40021000
 80017d8:	fffff8ff 	.word	0xfffff8ff
 80017dc:	ffffc7ff 	.word	0xffffc7ff
 80017e0:	08001968 	.word	0x08001968
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000004 	.word	0x20000004

080017ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80017f2:	4b3c      	ldr	r3, [pc, #240]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	220c      	movs	r2, #12
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b0c      	cmp	r3, #12
 8001800:	d013      	beq.n	800182a <HAL_RCC_GetSysClockFreq+0x3e>
 8001802:	d85c      	bhi.n	80018be <HAL_RCC_GetSysClockFreq+0xd2>
 8001804:	2b04      	cmp	r3, #4
 8001806:	d002      	beq.n	800180e <HAL_RCC_GetSysClockFreq+0x22>
 8001808:	2b08      	cmp	r3, #8
 800180a:	d00b      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x38>
 800180c:	e057      	b.n	80018be <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800180e:	4b35      	ldr	r3, [pc, #212]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2210      	movs	r2, #16
 8001814:	4013      	ands	r3, r2
 8001816:	d002      	beq.n	800181e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001818:	4b33      	ldr	r3, [pc, #204]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800181a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800181c:	e05d      	b.n	80018da <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800181e:	4b33      	ldr	r3, [pc, #204]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x100>)
 8001820:	613b      	str	r3, [r7, #16]
      break;
 8001822:	e05a      	b.n	80018da <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001824:	4b32      	ldr	r3, [pc, #200]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001826:	613b      	str	r3, [r7, #16]
      break;
 8001828:	e057      	b.n	80018da <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	0c9b      	lsrs	r3, r3, #18
 800182e:	220f      	movs	r2, #15
 8001830:	4013      	ands	r3, r2
 8001832:	4a30      	ldr	r2, [pc, #192]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001834:	5cd3      	ldrb	r3, [r2, r3]
 8001836:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	0d9b      	lsrs	r3, r3, #22
 800183c:	2203      	movs	r2, #3
 800183e:	4013      	ands	r3, r2
 8001840:	3301      	adds	r3, #1
 8001842:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001844:	4b27      	ldr	r3, [pc, #156]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	2380      	movs	r3, #128	@ 0x80
 800184a:	025b      	lsls	r3, r3, #9
 800184c:	4013      	ands	r3, r2
 800184e:	d00f      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	000a      	movs	r2, r1
 8001854:	0152      	lsls	r2, r2, #5
 8001856:	1a52      	subs	r2, r2, r1
 8001858:	0193      	lsls	r3, r2, #6
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	185b      	adds	r3, r3, r1
 8001860:	025b      	lsls	r3, r3, #9
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	0018      	movs	r0, r3
 8001866:	f7fe fc4f 	bl	8000108 <__udivsi3>
 800186a:	0003      	movs	r3, r0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e023      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001870:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2210      	movs	r2, #16
 8001876:	4013      	ands	r3, r2
 8001878:	d00f      	beq.n	800189a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	000a      	movs	r2, r1
 800187e:	0152      	lsls	r2, r2, #5
 8001880:	1a52      	subs	r2, r2, r1
 8001882:	0193      	lsls	r3, r2, #6
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	185b      	adds	r3, r3, r1
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	0018      	movs	r0, r3
 8001890:	f7fe fc3a 	bl	8000108 <__udivsi3>
 8001894:	0003      	movs	r3, r0
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	e00e      	b.n	80018b8 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800189a:	68b9      	ldr	r1, [r7, #8]
 800189c:	000a      	movs	r2, r1
 800189e:	0152      	lsls	r2, r2, #5
 80018a0:	1a52      	subs	r2, r2, r1
 80018a2:	0193      	lsls	r3, r2, #6
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	185b      	adds	r3, r3, r1
 80018aa:	029b      	lsls	r3, r3, #10
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7fe fc2a 	bl	8000108 <__udivsi3>
 80018b4:	0003      	movs	r3, r0
 80018b6:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	613b      	str	r3, [r7, #16]
      break;
 80018bc:	e00d      	b.n	80018da <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80018be:	4b09      	ldr	r3, [pc, #36]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	0b5b      	lsrs	r3, r3, #13
 80018c4:	2207      	movs	r2, #7
 80018c6:	4013      	ands	r3, r2
 80018c8:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	2280      	movs	r2, #128	@ 0x80
 80018d0:	0212      	lsls	r2, r2, #8
 80018d2:	409a      	lsls	r2, r3
 80018d4:	0013      	movs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
      break;
 80018d8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80018da:	693b      	ldr	r3, [r7, #16]
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b006      	add	sp, #24
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40021000 	.word	0x40021000
 80018e8:	003d0900 	.word	0x003d0900
 80018ec:	00f42400 	.word	0x00f42400
 80018f0:	007a1200 	.word	0x007a1200
 80018f4:	08001978 	.word	0x08001978

080018f8 <memset>:
 80018f8:	0003      	movs	r3, r0
 80018fa:	1882      	adds	r2, r0, r2
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d100      	bne.n	8001902 <memset+0xa>
 8001900:	4770      	bx	lr
 8001902:	7019      	strb	r1, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	e7f9      	b.n	80018fc <memset+0x4>

08001908 <__libc_init_array>:
 8001908:	b570      	push	{r4, r5, r6, lr}
 800190a:	2600      	movs	r6, #0
 800190c:	4c0c      	ldr	r4, [pc, #48]	@ (8001940 <__libc_init_array+0x38>)
 800190e:	4d0d      	ldr	r5, [pc, #52]	@ (8001944 <__libc_init_array+0x3c>)
 8001910:	1b64      	subs	r4, r4, r5
 8001912:	10a4      	asrs	r4, r4, #2
 8001914:	42a6      	cmp	r6, r4
 8001916:	d109      	bne.n	800192c <__libc_init_array+0x24>
 8001918:	2600      	movs	r6, #0
 800191a:	f000 f819 	bl	8001950 <_init>
 800191e:	4c0a      	ldr	r4, [pc, #40]	@ (8001948 <__libc_init_array+0x40>)
 8001920:	4d0a      	ldr	r5, [pc, #40]	@ (800194c <__libc_init_array+0x44>)
 8001922:	1b64      	subs	r4, r4, r5
 8001924:	10a4      	asrs	r4, r4, #2
 8001926:	42a6      	cmp	r6, r4
 8001928:	d105      	bne.n	8001936 <__libc_init_array+0x2e>
 800192a:	bd70      	pop	{r4, r5, r6, pc}
 800192c:	00b3      	lsls	r3, r6, #2
 800192e:	58eb      	ldr	r3, [r5, r3]
 8001930:	4798      	blx	r3
 8001932:	3601      	adds	r6, #1
 8001934:	e7ee      	b.n	8001914 <__libc_init_array+0xc>
 8001936:	00b3      	lsls	r3, r6, #2
 8001938:	58eb      	ldr	r3, [r5, r3]
 800193a:	4798      	blx	r3
 800193c:	3601      	adds	r6, #1
 800193e:	e7f2      	b.n	8001926 <__libc_init_array+0x1e>
 8001940:	08001984 	.word	0x08001984
 8001944:	08001984 	.word	0x08001984
 8001948:	08001988 	.word	0x08001988
 800194c:	08001984 	.word	0x08001984

08001950 <_init>:
 8001950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001952:	46c0      	nop			@ (mov r8, r8)
 8001954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001956:	bc08      	pop	{r3}
 8001958:	469e      	mov	lr, r3
 800195a:	4770      	bx	lr

0800195c <_fini>:
 800195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195e:	46c0      	nop			@ (mov r8, r8)
 8001960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001962:	bc08      	pop	{r3}
 8001964:	469e      	mov	lr, r3
 8001966:	4770      	bx	lr

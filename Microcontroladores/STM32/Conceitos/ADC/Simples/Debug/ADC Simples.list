
ADC Simples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002708  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080027c8  080027c8  000037c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027e4  080027e4  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080027e4  080027e4  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080027e4  080027e4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e4  080027e4  000037e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027e8  080027e8  000037e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080027ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  080027f8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080027f8  0000408c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044b9  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000117d  00000000  00000000  000084ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004d0  00000000  00000000  00009670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000388  00000000  00000000  00009b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a18  00000000  00000000  00009ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000062fc  00000000  00000000  0001c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073a03  00000000  00000000  00022bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000965df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000106c  00000000  00000000  00096624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00097690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080027b0 	.word	0x080027b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080027b0 	.word	0x080027b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_ui2f>:
 8000220:	b510      	push	{r4, lr}
 8000222:	1e04      	subs	r4, r0, #0
 8000224:	d00d      	beq.n	8000242 <__aeabi_ui2f+0x22>
 8000226:	f000 fbf1 	bl	8000a0c <__clzsi2>
 800022a:	239e      	movs	r3, #158	@ 0x9e
 800022c:	1a1b      	subs	r3, r3, r0
 800022e:	2b96      	cmp	r3, #150	@ 0x96
 8000230:	dc0c      	bgt.n	800024c <__aeabi_ui2f+0x2c>
 8000232:	2808      	cmp	r0, #8
 8000234:	d034      	beq.n	80002a0 <__aeabi_ui2f+0x80>
 8000236:	3808      	subs	r0, #8
 8000238:	4084      	lsls	r4, r0
 800023a:	0264      	lsls	r4, r4, #9
 800023c:	0a64      	lsrs	r4, r4, #9
 800023e:	b2d8      	uxtb	r0, r3
 8000240:	e001      	b.n	8000246 <__aeabi_ui2f+0x26>
 8000242:	2000      	movs	r0, #0
 8000244:	2400      	movs	r4, #0
 8000246:	05c0      	lsls	r0, r0, #23
 8000248:	4320      	orrs	r0, r4
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2b99      	cmp	r3, #153	@ 0x99
 800024e:	dc13      	bgt.n	8000278 <__aeabi_ui2f+0x58>
 8000250:	1f42      	subs	r2, r0, #5
 8000252:	4094      	lsls	r4, r2
 8000254:	4a14      	ldr	r2, [pc, #80]	@ (80002a8 <__aeabi_ui2f+0x88>)
 8000256:	4022      	ands	r2, r4
 8000258:	0761      	lsls	r1, r4, #29
 800025a:	d01c      	beq.n	8000296 <__aeabi_ui2f+0x76>
 800025c:	210f      	movs	r1, #15
 800025e:	4021      	ands	r1, r4
 8000260:	2904      	cmp	r1, #4
 8000262:	d018      	beq.n	8000296 <__aeabi_ui2f+0x76>
 8000264:	3204      	adds	r2, #4
 8000266:	08d4      	lsrs	r4, r2, #3
 8000268:	0152      	lsls	r2, r2, #5
 800026a:	d515      	bpl.n	8000298 <__aeabi_ui2f+0x78>
 800026c:	239f      	movs	r3, #159	@ 0x9f
 800026e:	0264      	lsls	r4, r4, #9
 8000270:	1a18      	subs	r0, r3, r0
 8000272:	0a64      	lsrs	r4, r4, #9
 8000274:	b2c0      	uxtb	r0, r0
 8000276:	e7e6      	b.n	8000246 <__aeabi_ui2f+0x26>
 8000278:	0002      	movs	r2, r0
 800027a:	0021      	movs	r1, r4
 800027c:	321b      	adds	r2, #27
 800027e:	4091      	lsls	r1, r2
 8000280:	000a      	movs	r2, r1
 8000282:	1e51      	subs	r1, r2, #1
 8000284:	418a      	sbcs	r2, r1
 8000286:	2105      	movs	r1, #5
 8000288:	1a09      	subs	r1, r1, r0
 800028a:	40cc      	lsrs	r4, r1
 800028c:	4314      	orrs	r4, r2
 800028e:	4a06      	ldr	r2, [pc, #24]	@ (80002a8 <__aeabi_ui2f+0x88>)
 8000290:	4022      	ands	r2, r4
 8000292:	0761      	lsls	r1, r4, #29
 8000294:	d1e2      	bne.n	800025c <__aeabi_ui2f+0x3c>
 8000296:	08d4      	lsrs	r4, r2, #3
 8000298:	0264      	lsls	r4, r4, #9
 800029a:	0a64      	lsrs	r4, r4, #9
 800029c:	b2d8      	uxtb	r0, r3
 800029e:	e7d2      	b.n	8000246 <__aeabi_ui2f+0x26>
 80002a0:	0264      	lsls	r4, r4, #9
 80002a2:	0a64      	lsrs	r4, r4, #9
 80002a4:	308e      	adds	r0, #142	@ 0x8e
 80002a6:	e7ce      	b.n	8000246 <__aeabi_ui2f+0x26>
 80002a8:	fbffffff 	.word	0xfbffffff

080002ac <__aeabi_dmul>:
 80002ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ae:	4657      	mov	r7, sl
 80002b0:	464e      	mov	r6, r9
 80002b2:	46de      	mov	lr, fp
 80002b4:	4645      	mov	r5, r8
 80002b6:	b5e0      	push	{r5, r6, r7, lr}
 80002b8:	001f      	movs	r7, r3
 80002ba:	030b      	lsls	r3, r1, #12
 80002bc:	0b1b      	lsrs	r3, r3, #12
 80002be:	0016      	movs	r6, r2
 80002c0:	469a      	mov	sl, r3
 80002c2:	0fca      	lsrs	r2, r1, #31
 80002c4:	004b      	lsls	r3, r1, #1
 80002c6:	0004      	movs	r4, r0
 80002c8:	4691      	mov	r9, r2
 80002ca:	b085      	sub	sp, #20
 80002cc:	0d5b      	lsrs	r3, r3, #21
 80002ce:	d100      	bne.n	80002d2 <__aeabi_dmul+0x26>
 80002d0:	e1cf      	b.n	8000672 <__aeabi_dmul+0x3c6>
 80002d2:	4acd      	ldr	r2, [pc, #820]	@ (8000608 <__aeabi_dmul+0x35c>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d055      	beq.n	8000384 <__aeabi_dmul+0xd8>
 80002d8:	4651      	mov	r1, sl
 80002da:	0f42      	lsrs	r2, r0, #29
 80002dc:	00c9      	lsls	r1, r1, #3
 80002de:	430a      	orrs	r2, r1
 80002e0:	2180      	movs	r1, #128	@ 0x80
 80002e2:	0409      	lsls	r1, r1, #16
 80002e4:	4311      	orrs	r1, r2
 80002e6:	00c2      	lsls	r2, r0, #3
 80002e8:	4690      	mov	r8, r2
 80002ea:	4ac8      	ldr	r2, [pc, #800]	@ (800060c <__aeabi_dmul+0x360>)
 80002ec:	468a      	mov	sl, r1
 80002ee:	4693      	mov	fp, r2
 80002f0:	449b      	add	fp, r3
 80002f2:	2300      	movs	r3, #0
 80002f4:	2500      	movs	r5, #0
 80002f6:	9302      	str	r3, [sp, #8]
 80002f8:	033c      	lsls	r4, r7, #12
 80002fa:	007b      	lsls	r3, r7, #1
 80002fc:	0ffa      	lsrs	r2, r7, #31
 80002fe:	9601      	str	r6, [sp, #4]
 8000300:	0b24      	lsrs	r4, r4, #12
 8000302:	0d5b      	lsrs	r3, r3, #21
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	d100      	bne.n	800030a <__aeabi_dmul+0x5e>
 8000308:	e188      	b.n	800061c <__aeabi_dmul+0x370>
 800030a:	4abf      	ldr	r2, [pc, #764]	@ (8000608 <__aeabi_dmul+0x35c>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d100      	bne.n	8000312 <__aeabi_dmul+0x66>
 8000310:	e092      	b.n	8000438 <__aeabi_dmul+0x18c>
 8000312:	4abe      	ldr	r2, [pc, #760]	@ (800060c <__aeabi_dmul+0x360>)
 8000314:	4694      	mov	ip, r2
 8000316:	4463      	add	r3, ip
 8000318:	449b      	add	fp, r3
 800031a:	2d0a      	cmp	r5, #10
 800031c:	dc42      	bgt.n	80003a4 <__aeabi_dmul+0xf8>
 800031e:	00e4      	lsls	r4, r4, #3
 8000320:	0f73      	lsrs	r3, r6, #29
 8000322:	4323      	orrs	r3, r4
 8000324:	2480      	movs	r4, #128	@ 0x80
 8000326:	4649      	mov	r1, r9
 8000328:	0424      	lsls	r4, r4, #16
 800032a:	431c      	orrs	r4, r3
 800032c:	00f3      	lsls	r3, r6, #3
 800032e:	9301      	str	r3, [sp, #4]
 8000330:	9b00      	ldr	r3, [sp, #0]
 8000332:	2000      	movs	r0, #0
 8000334:	4059      	eors	r1, r3
 8000336:	b2cb      	uxtb	r3, r1
 8000338:	9303      	str	r3, [sp, #12]
 800033a:	2d02      	cmp	r5, #2
 800033c:	dc00      	bgt.n	8000340 <__aeabi_dmul+0x94>
 800033e:	e094      	b.n	800046a <__aeabi_dmul+0x1be>
 8000340:	2301      	movs	r3, #1
 8000342:	40ab      	lsls	r3, r5
 8000344:	001d      	movs	r5, r3
 8000346:	23a6      	movs	r3, #166	@ 0xa6
 8000348:	002a      	movs	r2, r5
 800034a:	00db      	lsls	r3, r3, #3
 800034c:	401a      	ands	r2, r3
 800034e:	421d      	tst	r5, r3
 8000350:	d000      	beq.n	8000354 <__aeabi_dmul+0xa8>
 8000352:	e229      	b.n	80007a8 <__aeabi_dmul+0x4fc>
 8000354:	2390      	movs	r3, #144	@ 0x90
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	421d      	tst	r5, r3
 800035a:	d100      	bne.n	800035e <__aeabi_dmul+0xb2>
 800035c:	e24d      	b.n	80007fa <__aeabi_dmul+0x54e>
 800035e:	2300      	movs	r3, #0
 8000360:	2480      	movs	r4, #128	@ 0x80
 8000362:	4699      	mov	r9, r3
 8000364:	0324      	lsls	r4, r4, #12
 8000366:	4ba8      	ldr	r3, [pc, #672]	@ (8000608 <__aeabi_dmul+0x35c>)
 8000368:	0010      	movs	r0, r2
 800036a:	464a      	mov	r2, r9
 800036c:	051b      	lsls	r3, r3, #20
 800036e:	4323      	orrs	r3, r4
 8000370:	07d2      	lsls	r2, r2, #31
 8000372:	4313      	orrs	r3, r2
 8000374:	0019      	movs	r1, r3
 8000376:	b005      	add	sp, #20
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	46bb      	mov	fp, r7
 800037c:	46b2      	mov	sl, r6
 800037e:	46a9      	mov	r9, r5
 8000380:	46a0      	mov	r8, r4
 8000382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000384:	4652      	mov	r2, sl
 8000386:	4302      	orrs	r2, r0
 8000388:	4690      	mov	r8, r2
 800038a:	d000      	beq.n	800038e <__aeabi_dmul+0xe2>
 800038c:	e1ac      	b.n	80006e8 <__aeabi_dmul+0x43c>
 800038e:	469b      	mov	fp, r3
 8000390:	2302      	movs	r3, #2
 8000392:	4692      	mov	sl, r2
 8000394:	2508      	movs	r5, #8
 8000396:	9302      	str	r3, [sp, #8]
 8000398:	e7ae      	b.n	80002f8 <__aeabi_dmul+0x4c>
 800039a:	9b00      	ldr	r3, [sp, #0]
 800039c:	46a2      	mov	sl, r4
 800039e:	4699      	mov	r9, r3
 80003a0:	9b01      	ldr	r3, [sp, #4]
 80003a2:	4698      	mov	r8, r3
 80003a4:	9b02      	ldr	r3, [sp, #8]
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d100      	bne.n	80003ac <__aeabi_dmul+0x100>
 80003aa:	e1ca      	b.n	8000742 <__aeabi_dmul+0x496>
 80003ac:	2b03      	cmp	r3, #3
 80003ae:	d100      	bne.n	80003b2 <__aeabi_dmul+0x106>
 80003b0:	e192      	b.n	80006d8 <__aeabi_dmul+0x42c>
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	d110      	bne.n	80003d8 <__aeabi_dmul+0x12c>
 80003b6:	2300      	movs	r3, #0
 80003b8:	2400      	movs	r4, #0
 80003ba:	2200      	movs	r2, #0
 80003bc:	e7d4      	b.n	8000368 <__aeabi_dmul+0xbc>
 80003be:	2201      	movs	r2, #1
 80003c0:	087b      	lsrs	r3, r7, #1
 80003c2:	403a      	ands	r2, r7
 80003c4:	4313      	orrs	r3, r2
 80003c6:	4652      	mov	r2, sl
 80003c8:	07d2      	lsls	r2, r2, #31
 80003ca:	4313      	orrs	r3, r2
 80003cc:	4698      	mov	r8, r3
 80003ce:	4653      	mov	r3, sl
 80003d0:	085b      	lsrs	r3, r3, #1
 80003d2:	469a      	mov	sl, r3
 80003d4:	9b03      	ldr	r3, [sp, #12]
 80003d6:	4699      	mov	r9, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	1c58      	adds	r0, r3, #1
 80003dc:	2380      	movs	r3, #128	@ 0x80
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	445b      	add	r3, fp
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	dc00      	bgt.n	80003e8 <__aeabi_dmul+0x13c>
 80003e6:	e1b1      	b.n	800074c <__aeabi_dmul+0x4a0>
 80003e8:	4642      	mov	r2, r8
 80003ea:	0752      	lsls	r2, r2, #29
 80003ec:	d00b      	beq.n	8000406 <__aeabi_dmul+0x15a>
 80003ee:	220f      	movs	r2, #15
 80003f0:	4641      	mov	r1, r8
 80003f2:	400a      	ands	r2, r1
 80003f4:	2a04      	cmp	r2, #4
 80003f6:	d006      	beq.n	8000406 <__aeabi_dmul+0x15a>
 80003f8:	4642      	mov	r2, r8
 80003fa:	1d11      	adds	r1, r2, #4
 80003fc:	4541      	cmp	r1, r8
 80003fe:	4192      	sbcs	r2, r2
 8000400:	4688      	mov	r8, r1
 8000402:	4252      	negs	r2, r2
 8000404:	4492      	add	sl, r2
 8000406:	4652      	mov	r2, sl
 8000408:	01d2      	lsls	r2, r2, #7
 800040a:	d506      	bpl.n	800041a <__aeabi_dmul+0x16e>
 800040c:	4652      	mov	r2, sl
 800040e:	4b80      	ldr	r3, [pc, #512]	@ (8000610 <__aeabi_dmul+0x364>)
 8000410:	401a      	ands	r2, r3
 8000412:	2380      	movs	r3, #128	@ 0x80
 8000414:	4692      	mov	sl, r2
 8000416:	00db      	lsls	r3, r3, #3
 8000418:	18c3      	adds	r3, r0, r3
 800041a:	4a7e      	ldr	r2, [pc, #504]	@ (8000614 <__aeabi_dmul+0x368>)
 800041c:	4293      	cmp	r3, r2
 800041e:	dd00      	ble.n	8000422 <__aeabi_dmul+0x176>
 8000420:	e18f      	b.n	8000742 <__aeabi_dmul+0x496>
 8000422:	4642      	mov	r2, r8
 8000424:	08d1      	lsrs	r1, r2, #3
 8000426:	4652      	mov	r2, sl
 8000428:	0752      	lsls	r2, r2, #29
 800042a:	430a      	orrs	r2, r1
 800042c:	4651      	mov	r1, sl
 800042e:	055b      	lsls	r3, r3, #21
 8000430:	024c      	lsls	r4, r1, #9
 8000432:	0b24      	lsrs	r4, r4, #12
 8000434:	0d5b      	lsrs	r3, r3, #21
 8000436:	e797      	b.n	8000368 <__aeabi_dmul+0xbc>
 8000438:	4b73      	ldr	r3, [pc, #460]	@ (8000608 <__aeabi_dmul+0x35c>)
 800043a:	4326      	orrs	r6, r4
 800043c:	469c      	mov	ip, r3
 800043e:	44e3      	add	fp, ip
 8000440:	2e00      	cmp	r6, #0
 8000442:	d100      	bne.n	8000446 <__aeabi_dmul+0x19a>
 8000444:	e16f      	b.n	8000726 <__aeabi_dmul+0x47a>
 8000446:	2303      	movs	r3, #3
 8000448:	4649      	mov	r1, r9
 800044a:	431d      	orrs	r5, r3
 800044c:	9b00      	ldr	r3, [sp, #0]
 800044e:	4059      	eors	r1, r3
 8000450:	b2cb      	uxtb	r3, r1
 8000452:	9303      	str	r3, [sp, #12]
 8000454:	2d0a      	cmp	r5, #10
 8000456:	dd00      	ble.n	800045a <__aeabi_dmul+0x1ae>
 8000458:	e133      	b.n	80006c2 <__aeabi_dmul+0x416>
 800045a:	2301      	movs	r3, #1
 800045c:	40ab      	lsls	r3, r5
 800045e:	001d      	movs	r5, r3
 8000460:	2303      	movs	r3, #3
 8000462:	9302      	str	r3, [sp, #8]
 8000464:	2288      	movs	r2, #136	@ 0x88
 8000466:	422a      	tst	r2, r5
 8000468:	d197      	bne.n	800039a <__aeabi_dmul+0xee>
 800046a:	4642      	mov	r2, r8
 800046c:	4643      	mov	r3, r8
 800046e:	0412      	lsls	r2, r2, #16
 8000470:	0c12      	lsrs	r2, r2, #16
 8000472:	0016      	movs	r6, r2
 8000474:	9801      	ldr	r0, [sp, #4]
 8000476:	0c1d      	lsrs	r5, r3, #16
 8000478:	0c03      	lsrs	r3, r0, #16
 800047a:	0400      	lsls	r0, r0, #16
 800047c:	0c00      	lsrs	r0, r0, #16
 800047e:	4346      	muls	r6, r0
 8000480:	46b4      	mov	ip, r6
 8000482:	001e      	movs	r6, r3
 8000484:	436e      	muls	r6, r5
 8000486:	9600      	str	r6, [sp, #0]
 8000488:	0016      	movs	r6, r2
 800048a:	0007      	movs	r7, r0
 800048c:	435e      	muls	r6, r3
 800048e:	4661      	mov	r1, ip
 8000490:	46b0      	mov	r8, r6
 8000492:	436f      	muls	r7, r5
 8000494:	0c0e      	lsrs	r6, r1, #16
 8000496:	44b8      	add	r8, r7
 8000498:	4446      	add	r6, r8
 800049a:	42b7      	cmp	r7, r6
 800049c:	d905      	bls.n	80004aa <__aeabi_dmul+0x1fe>
 800049e:	2180      	movs	r1, #128	@ 0x80
 80004a0:	0249      	lsls	r1, r1, #9
 80004a2:	4688      	mov	r8, r1
 80004a4:	9f00      	ldr	r7, [sp, #0]
 80004a6:	4447      	add	r7, r8
 80004a8:	9700      	str	r7, [sp, #0]
 80004aa:	4661      	mov	r1, ip
 80004ac:	0409      	lsls	r1, r1, #16
 80004ae:	0c09      	lsrs	r1, r1, #16
 80004b0:	0c37      	lsrs	r7, r6, #16
 80004b2:	0436      	lsls	r6, r6, #16
 80004b4:	468c      	mov	ip, r1
 80004b6:	0031      	movs	r1, r6
 80004b8:	4461      	add	r1, ip
 80004ba:	9101      	str	r1, [sp, #4]
 80004bc:	0011      	movs	r1, r2
 80004be:	0c26      	lsrs	r6, r4, #16
 80004c0:	0424      	lsls	r4, r4, #16
 80004c2:	0c24      	lsrs	r4, r4, #16
 80004c4:	4361      	muls	r1, r4
 80004c6:	468c      	mov	ip, r1
 80004c8:	0021      	movs	r1, r4
 80004ca:	4369      	muls	r1, r5
 80004cc:	4689      	mov	r9, r1
 80004ce:	4661      	mov	r1, ip
 80004d0:	0c09      	lsrs	r1, r1, #16
 80004d2:	4688      	mov	r8, r1
 80004d4:	4372      	muls	r2, r6
 80004d6:	444a      	add	r2, r9
 80004d8:	4442      	add	r2, r8
 80004da:	4375      	muls	r5, r6
 80004dc:	4591      	cmp	r9, r2
 80004de:	d903      	bls.n	80004e8 <__aeabi_dmul+0x23c>
 80004e0:	2180      	movs	r1, #128	@ 0x80
 80004e2:	0249      	lsls	r1, r1, #9
 80004e4:	4688      	mov	r8, r1
 80004e6:	4445      	add	r5, r8
 80004e8:	0c11      	lsrs	r1, r2, #16
 80004ea:	4688      	mov	r8, r1
 80004ec:	4661      	mov	r1, ip
 80004ee:	0409      	lsls	r1, r1, #16
 80004f0:	0c09      	lsrs	r1, r1, #16
 80004f2:	468c      	mov	ip, r1
 80004f4:	0412      	lsls	r2, r2, #16
 80004f6:	4462      	add	r2, ip
 80004f8:	18b9      	adds	r1, r7, r2
 80004fa:	9102      	str	r1, [sp, #8]
 80004fc:	4651      	mov	r1, sl
 80004fe:	0c09      	lsrs	r1, r1, #16
 8000500:	468c      	mov	ip, r1
 8000502:	4651      	mov	r1, sl
 8000504:	040f      	lsls	r7, r1, #16
 8000506:	0c3f      	lsrs	r7, r7, #16
 8000508:	0039      	movs	r1, r7
 800050a:	4341      	muls	r1, r0
 800050c:	4445      	add	r5, r8
 800050e:	4688      	mov	r8, r1
 8000510:	4661      	mov	r1, ip
 8000512:	4341      	muls	r1, r0
 8000514:	468a      	mov	sl, r1
 8000516:	4641      	mov	r1, r8
 8000518:	4660      	mov	r0, ip
 800051a:	0c09      	lsrs	r1, r1, #16
 800051c:	4689      	mov	r9, r1
 800051e:	4358      	muls	r0, r3
 8000520:	437b      	muls	r3, r7
 8000522:	4453      	add	r3, sl
 8000524:	444b      	add	r3, r9
 8000526:	459a      	cmp	sl, r3
 8000528:	d903      	bls.n	8000532 <__aeabi_dmul+0x286>
 800052a:	2180      	movs	r1, #128	@ 0x80
 800052c:	0249      	lsls	r1, r1, #9
 800052e:	4689      	mov	r9, r1
 8000530:	4448      	add	r0, r9
 8000532:	0c19      	lsrs	r1, r3, #16
 8000534:	4689      	mov	r9, r1
 8000536:	4641      	mov	r1, r8
 8000538:	0409      	lsls	r1, r1, #16
 800053a:	0c09      	lsrs	r1, r1, #16
 800053c:	4688      	mov	r8, r1
 800053e:	0039      	movs	r1, r7
 8000540:	4361      	muls	r1, r4
 8000542:	041b      	lsls	r3, r3, #16
 8000544:	4443      	add	r3, r8
 8000546:	4688      	mov	r8, r1
 8000548:	4661      	mov	r1, ip
 800054a:	434c      	muls	r4, r1
 800054c:	4371      	muls	r1, r6
 800054e:	468c      	mov	ip, r1
 8000550:	4641      	mov	r1, r8
 8000552:	4377      	muls	r7, r6
 8000554:	0c0e      	lsrs	r6, r1, #16
 8000556:	193f      	adds	r7, r7, r4
 8000558:	19f6      	adds	r6, r6, r7
 800055a:	4448      	add	r0, r9
 800055c:	42b4      	cmp	r4, r6
 800055e:	d903      	bls.n	8000568 <__aeabi_dmul+0x2bc>
 8000560:	2180      	movs	r1, #128	@ 0x80
 8000562:	0249      	lsls	r1, r1, #9
 8000564:	4689      	mov	r9, r1
 8000566:	44cc      	add	ip, r9
 8000568:	9902      	ldr	r1, [sp, #8]
 800056a:	9f00      	ldr	r7, [sp, #0]
 800056c:	4689      	mov	r9, r1
 800056e:	0431      	lsls	r1, r6, #16
 8000570:	444f      	add	r7, r9
 8000572:	4689      	mov	r9, r1
 8000574:	4641      	mov	r1, r8
 8000576:	4297      	cmp	r7, r2
 8000578:	4192      	sbcs	r2, r2
 800057a:	040c      	lsls	r4, r1, #16
 800057c:	0c24      	lsrs	r4, r4, #16
 800057e:	444c      	add	r4, r9
 8000580:	18ff      	adds	r7, r7, r3
 8000582:	4252      	negs	r2, r2
 8000584:	1964      	adds	r4, r4, r5
 8000586:	18a1      	adds	r1, r4, r2
 8000588:	429f      	cmp	r7, r3
 800058a:	419b      	sbcs	r3, r3
 800058c:	4688      	mov	r8, r1
 800058e:	4682      	mov	sl, r0
 8000590:	425b      	negs	r3, r3
 8000592:	4699      	mov	r9, r3
 8000594:	4590      	cmp	r8, r2
 8000596:	4192      	sbcs	r2, r2
 8000598:	42ac      	cmp	r4, r5
 800059a:	41a4      	sbcs	r4, r4
 800059c:	44c2      	add	sl, r8
 800059e:	44d1      	add	r9, sl
 80005a0:	4252      	negs	r2, r2
 80005a2:	4264      	negs	r4, r4
 80005a4:	4314      	orrs	r4, r2
 80005a6:	4599      	cmp	r9, r3
 80005a8:	419b      	sbcs	r3, r3
 80005aa:	4582      	cmp	sl, r0
 80005ac:	4192      	sbcs	r2, r2
 80005ae:	425b      	negs	r3, r3
 80005b0:	4252      	negs	r2, r2
 80005b2:	4313      	orrs	r3, r2
 80005b4:	464a      	mov	r2, r9
 80005b6:	0c36      	lsrs	r6, r6, #16
 80005b8:	19a4      	adds	r4, r4, r6
 80005ba:	18e3      	adds	r3, r4, r3
 80005bc:	4463      	add	r3, ip
 80005be:	025b      	lsls	r3, r3, #9
 80005c0:	0dd2      	lsrs	r2, r2, #23
 80005c2:	431a      	orrs	r2, r3
 80005c4:	9901      	ldr	r1, [sp, #4]
 80005c6:	4692      	mov	sl, r2
 80005c8:	027a      	lsls	r2, r7, #9
 80005ca:	430a      	orrs	r2, r1
 80005cc:	1e50      	subs	r0, r2, #1
 80005ce:	4182      	sbcs	r2, r0
 80005d0:	0dff      	lsrs	r7, r7, #23
 80005d2:	4317      	orrs	r7, r2
 80005d4:	464a      	mov	r2, r9
 80005d6:	0252      	lsls	r2, r2, #9
 80005d8:	4317      	orrs	r7, r2
 80005da:	46b8      	mov	r8, r7
 80005dc:	01db      	lsls	r3, r3, #7
 80005de:	d500      	bpl.n	80005e2 <__aeabi_dmul+0x336>
 80005e0:	e6ed      	b.n	80003be <__aeabi_dmul+0x112>
 80005e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <__aeabi_dmul+0x36c>)
 80005e4:	9a03      	ldr	r2, [sp, #12]
 80005e6:	445b      	add	r3, fp
 80005e8:	4691      	mov	r9, r2
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	dc00      	bgt.n	80005f0 <__aeabi_dmul+0x344>
 80005ee:	e0ac      	b.n	800074a <__aeabi_dmul+0x49e>
 80005f0:	003a      	movs	r2, r7
 80005f2:	0752      	lsls	r2, r2, #29
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dmul+0x34c>
 80005f6:	e710      	b.n	800041a <__aeabi_dmul+0x16e>
 80005f8:	220f      	movs	r2, #15
 80005fa:	4658      	mov	r0, fp
 80005fc:	403a      	ands	r2, r7
 80005fe:	2a04      	cmp	r2, #4
 8000600:	d000      	beq.n	8000604 <__aeabi_dmul+0x358>
 8000602:	e6f9      	b.n	80003f8 <__aeabi_dmul+0x14c>
 8000604:	e709      	b.n	800041a <__aeabi_dmul+0x16e>
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	000007ff 	.word	0x000007ff
 800060c:	fffffc01 	.word	0xfffffc01
 8000610:	feffffff 	.word	0xfeffffff
 8000614:	000007fe 	.word	0x000007fe
 8000618:	000003ff 	.word	0x000003ff
 800061c:	0022      	movs	r2, r4
 800061e:	4332      	orrs	r2, r6
 8000620:	d06f      	beq.n	8000702 <__aeabi_dmul+0x456>
 8000622:	2c00      	cmp	r4, #0
 8000624:	d100      	bne.n	8000628 <__aeabi_dmul+0x37c>
 8000626:	e0c2      	b.n	80007ae <__aeabi_dmul+0x502>
 8000628:	0020      	movs	r0, r4
 800062a:	f000 f9ef 	bl	8000a0c <__clzsi2>
 800062e:	0002      	movs	r2, r0
 8000630:	0003      	movs	r3, r0
 8000632:	3a0b      	subs	r2, #11
 8000634:	201d      	movs	r0, #29
 8000636:	1a82      	subs	r2, r0, r2
 8000638:	0030      	movs	r0, r6
 800063a:	0019      	movs	r1, r3
 800063c:	40d0      	lsrs	r0, r2
 800063e:	3908      	subs	r1, #8
 8000640:	408c      	lsls	r4, r1
 8000642:	0002      	movs	r2, r0
 8000644:	4322      	orrs	r2, r4
 8000646:	0034      	movs	r4, r6
 8000648:	408c      	lsls	r4, r1
 800064a:	4659      	mov	r1, fp
 800064c:	1acb      	subs	r3, r1, r3
 800064e:	4986      	ldr	r1, [pc, #536]	@ (8000868 <__aeabi_dmul+0x5bc>)
 8000650:	468b      	mov	fp, r1
 8000652:	449b      	add	fp, r3
 8000654:	2d0a      	cmp	r5, #10
 8000656:	dd00      	ble.n	800065a <__aeabi_dmul+0x3ae>
 8000658:	e6a4      	b.n	80003a4 <__aeabi_dmul+0xf8>
 800065a:	4649      	mov	r1, r9
 800065c:	9b00      	ldr	r3, [sp, #0]
 800065e:	9401      	str	r4, [sp, #4]
 8000660:	4059      	eors	r1, r3
 8000662:	b2cb      	uxtb	r3, r1
 8000664:	0014      	movs	r4, r2
 8000666:	2000      	movs	r0, #0
 8000668:	9303      	str	r3, [sp, #12]
 800066a:	2d02      	cmp	r5, #2
 800066c:	dd00      	ble.n	8000670 <__aeabi_dmul+0x3c4>
 800066e:	e667      	b.n	8000340 <__aeabi_dmul+0x94>
 8000670:	e6fb      	b.n	800046a <__aeabi_dmul+0x1be>
 8000672:	4653      	mov	r3, sl
 8000674:	4303      	orrs	r3, r0
 8000676:	4698      	mov	r8, r3
 8000678:	d03c      	beq.n	80006f4 <__aeabi_dmul+0x448>
 800067a:	4653      	mov	r3, sl
 800067c:	2b00      	cmp	r3, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_dmul+0x3d6>
 8000680:	e0a3      	b.n	80007ca <__aeabi_dmul+0x51e>
 8000682:	4650      	mov	r0, sl
 8000684:	f000 f9c2 	bl	8000a0c <__clzsi2>
 8000688:	230b      	movs	r3, #11
 800068a:	425b      	negs	r3, r3
 800068c:	469c      	mov	ip, r3
 800068e:	0002      	movs	r2, r0
 8000690:	4484      	add	ip, r0
 8000692:	0011      	movs	r1, r2
 8000694:	4650      	mov	r0, sl
 8000696:	3908      	subs	r1, #8
 8000698:	4088      	lsls	r0, r1
 800069a:	231d      	movs	r3, #29
 800069c:	4680      	mov	r8, r0
 800069e:	4660      	mov	r0, ip
 80006a0:	1a1b      	subs	r3, r3, r0
 80006a2:	0020      	movs	r0, r4
 80006a4:	40d8      	lsrs	r0, r3
 80006a6:	0003      	movs	r3, r0
 80006a8:	4640      	mov	r0, r8
 80006aa:	4303      	orrs	r3, r0
 80006ac:	469a      	mov	sl, r3
 80006ae:	0023      	movs	r3, r4
 80006b0:	408b      	lsls	r3, r1
 80006b2:	4698      	mov	r8, r3
 80006b4:	4b6c      	ldr	r3, [pc, #432]	@ (8000868 <__aeabi_dmul+0x5bc>)
 80006b6:	2500      	movs	r5, #0
 80006b8:	1a9b      	subs	r3, r3, r2
 80006ba:	469b      	mov	fp, r3
 80006bc:	2300      	movs	r3, #0
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	e61a      	b.n	80002f8 <__aeabi_dmul+0x4c>
 80006c2:	2d0f      	cmp	r5, #15
 80006c4:	d000      	beq.n	80006c8 <__aeabi_dmul+0x41c>
 80006c6:	e0c9      	b.n	800085c <__aeabi_dmul+0x5b0>
 80006c8:	2380      	movs	r3, #128	@ 0x80
 80006ca:	4652      	mov	r2, sl
 80006cc:	031b      	lsls	r3, r3, #12
 80006ce:	421a      	tst	r2, r3
 80006d0:	d002      	beq.n	80006d8 <__aeabi_dmul+0x42c>
 80006d2:	421c      	tst	r4, r3
 80006d4:	d100      	bne.n	80006d8 <__aeabi_dmul+0x42c>
 80006d6:	e092      	b.n	80007fe <__aeabi_dmul+0x552>
 80006d8:	2480      	movs	r4, #128	@ 0x80
 80006da:	4653      	mov	r3, sl
 80006dc:	0324      	lsls	r4, r4, #12
 80006de:	431c      	orrs	r4, r3
 80006e0:	0324      	lsls	r4, r4, #12
 80006e2:	4642      	mov	r2, r8
 80006e4:	0b24      	lsrs	r4, r4, #12
 80006e6:	e63e      	b.n	8000366 <__aeabi_dmul+0xba>
 80006e8:	469b      	mov	fp, r3
 80006ea:	2303      	movs	r3, #3
 80006ec:	4680      	mov	r8, r0
 80006ee:	250c      	movs	r5, #12
 80006f0:	9302      	str	r3, [sp, #8]
 80006f2:	e601      	b.n	80002f8 <__aeabi_dmul+0x4c>
 80006f4:	2300      	movs	r3, #0
 80006f6:	469a      	mov	sl, r3
 80006f8:	469b      	mov	fp, r3
 80006fa:	3301      	adds	r3, #1
 80006fc:	2504      	movs	r5, #4
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	e5fa      	b.n	80002f8 <__aeabi_dmul+0x4c>
 8000702:	2101      	movs	r1, #1
 8000704:	430d      	orrs	r5, r1
 8000706:	2d0a      	cmp	r5, #10
 8000708:	dd00      	ble.n	800070c <__aeabi_dmul+0x460>
 800070a:	e64b      	b.n	80003a4 <__aeabi_dmul+0xf8>
 800070c:	4649      	mov	r1, r9
 800070e:	9800      	ldr	r0, [sp, #0]
 8000710:	4041      	eors	r1, r0
 8000712:	b2c9      	uxtb	r1, r1
 8000714:	9103      	str	r1, [sp, #12]
 8000716:	2d02      	cmp	r5, #2
 8000718:	dc00      	bgt.n	800071c <__aeabi_dmul+0x470>
 800071a:	e096      	b.n	800084a <__aeabi_dmul+0x59e>
 800071c:	2300      	movs	r3, #0
 800071e:	2400      	movs	r4, #0
 8000720:	2001      	movs	r0, #1
 8000722:	9301      	str	r3, [sp, #4]
 8000724:	e60c      	b.n	8000340 <__aeabi_dmul+0x94>
 8000726:	4649      	mov	r1, r9
 8000728:	2302      	movs	r3, #2
 800072a:	9a00      	ldr	r2, [sp, #0]
 800072c:	432b      	orrs	r3, r5
 800072e:	4051      	eors	r1, r2
 8000730:	b2ca      	uxtb	r2, r1
 8000732:	9203      	str	r2, [sp, #12]
 8000734:	2b0a      	cmp	r3, #10
 8000736:	dd00      	ble.n	800073a <__aeabi_dmul+0x48e>
 8000738:	e634      	b.n	80003a4 <__aeabi_dmul+0xf8>
 800073a:	2d00      	cmp	r5, #0
 800073c:	d157      	bne.n	80007ee <__aeabi_dmul+0x542>
 800073e:	9b03      	ldr	r3, [sp, #12]
 8000740:	4699      	mov	r9, r3
 8000742:	2400      	movs	r4, #0
 8000744:	2200      	movs	r2, #0
 8000746:	4b49      	ldr	r3, [pc, #292]	@ (800086c <__aeabi_dmul+0x5c0>)
 8000748:	e60e      	b.n	8000368 <__aeabi_dmul+0xbc>
 800074a:	4658      	mov	r0, fp
 800074c:	2101      	movs	r1, #1
 800074e:	1ac9      	subs	r1, r1, r3
 8000750:	2938      	cmp	r1, #56	@ 0x38
 8000752:	dd00      	ble.n	8000756 <__aeabi_dmul+0x4aa>
 8000754:	e62f      	b.n	80003b6 <__aeabi_dmul+0x10a>
 8000756:	291f      	cmp	r1, #31
 8000758:	dd56      	ble.n	8000808 <__aeabi_dmul+0x55c>
 800075a:	221f      	movs	r2, #31
 800075c:	4654      	mov	r4, sl
 800075e:	4252      	negs	r2, r2
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	40dc      	lsrs	r4, r3
 8000764:	2920      	cmp	r1, #32
 8000766:	d007      	beq.n	8000778 <__aeabi_dmul+0x4cc>
 8000768:	4b41      	ldr	r3, [pc, #260]	@ (8000870 <__aeabi_dmul+0x5c4>)
 800076a:	4642      	mov	r2, r8
 800076c:	469c      	mov	ip, r3
 800076e:	4653      	mov	r3, sl
 8000770:	4460      	add	r0, ip
 8000772:	4083      	lsls	r3, r0
 8000774:	431a      	orrs	r2, r3
 8000776:	4690      	mov	r8, r2
 8000778:	4642      	mov	r2, r8
 800077a:	2107      	movs	r1, #7
 800077c:	1e53      	subs	r3, r2, #1
 800077e:	419a      	sbcs	r2, r3
 8000780:	000b      	movs	r3, r1
 8000782:	4322      	orrs	r2, r4
 8000784:	4013      	ands	r3, r2
 8000786:	2400      	movs	r4, #0
 8000788:	4211      	tst	r1, r2
 800078a:	d009      	beq.n	80007a0 <__aeabi_dmul+0x4f4>
 800078c:	230f      	movs	r3, #15
 800078e:	4013      	ands	r3, r2
 8000790:	2b04      	cmp	r3, #4
 8000792:	d05d      	beq.n	8000850 <__aeabi_dmul+0x5a4>
 8000794:	1d11      	adds	r1, r2, #4
 8000796:	4291      	cmp	r1, r2
 8000798:	419b      	sbcs	r3, r3
 800079a:	000a      	movs	r2, r1
 800079c:	425b      	negs	r3, r3
 800079e:	075b      	lsls	r3, r3, #29
 80007a0:	08d2      	lsrs	r2, r2, #3
 80007a2:	431a      	orrs	r2, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e5df      	b.n	8000368 <__aeabi_dmul+0xbc>
 80007a8:	9b03      	ldr	r3, [sp, #12]
 80007aa:	4699      	mov	r9, r3
 80007ac:	e5fa      	b.n	80003a4 <__aeabi_dmul+0xf8>
 80007ae:	9801      	ldr	r0, [sp, #4]
 80007b0:	f000 f92c 	bl	8000a0c <__clzsi2>
 80007b4:	0002      	movs	r2, r0
 80007b6:	0003      	movs	r3, r0
 80007b8:	3215      	adds	r2, #21
 80007ba:	3320      	adds	r3, #32
 80007bc:	2a1c      	cmp	r2, #28
 80007be:	dc00      	bgt.n	80007c2 <__aeabi_dmul+0x516>
 80007c0:	e738      	b.n	8000634 <__aeabi_dmul+0x388>
 80007c2:	9a01      	ldr	r2, [sp, #4]
 80007c4:	3808      	subs	r0, #8
 80007c6:	4082      	lsls	r2, r0
 80007c8:	e73f      	b.n	800064a <__aeabi_dmul+0x39e>
 80007ca:	f000 f91f 	bl	8000a0c <__clzsi2>
 80007ce:	2315      	movs	r3, #21
 80007d0:	469c      	mov	ip, r3
 80007d2:	4484      	add	ip, r0
 80007d4:	0002      	movs	r2, r0
 80007d6:	4663      	mov	r3, ip
 80007d8:	3220      	adds	r2, #32
 80007da:	2b1c      	cmp	r3, #28
 80007dc:	dc00      	bgt.n	80007e0 <__aeabi_dmul+0x534>
 80007de:	e758      	b.n	8000692 <__aeabi_dmul+0x3e6>
 80007e0:	2300      	movs	r3, #0
 80007e2:	4698      	mov	r8, r3
 80007e4:	0023      	movs	r3, r4
 80007e6:	3808      	subs	r0, #8
 80007e8:	4083      	lsls	r3, r0
 80007ea:	469a      	mov	sl, r3
 80007ec:	e762      	b.n	80006b4 <__aeabi_dmul+0x408>
 80007ee:	001d      	movs	r5, r3
 80007f0:	2300      	movs	r3, #0
 80007f2:	2400      	movs	r4, #0
 80007f4:	2002      	movs	r0, #2
 80007f6:	9301      	str	r3, [sp, #4]
 80007f8:	e5a2      	b.n	8000340 <__aeabi_dmul+0x94>
 80007fa:	9002      	str	r0, [sp, #8]
 80007fc:	e632      	b.n	8000464 <__aeabi_dmul+0x1b8>
 80007fe:	431c      	orrs	r4, r3
 8000800:	9b00      	ldr	r3, [sp, #0]
 8000802:	9a01      	ldr	r2, [sp, #4]
 8000804:	4699      	mov	r9, r3
 8000806:	e5ae      	b.n	8000366 <__aeabi_dmul+0xba>
 8000808:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <__aeabi_dmul+0x5c8>)
 800080a:	4652      	mov	r2, sl
 800080c:	18c3      	adds	r3, r0, r3
 800080e:	4640      	mov	r0, r8
 8000810:	409a      	lsls	r2, r3
 8000812:	40c8      	lsrs	r0, r1
 8000814:	4302      	orrs	r2, r0
 8000816:	4640      	mov	r0, r8
 8000818:	4098      	lsls	r0, r3
 800081a:	0003      	movs	r3, r0
 800081c:	1e58      	subs	r0, r3, #1
 800081e:	4183      	sbcs	r3, r0
 8000820:	4654      	mov	r4, sl
 8000822:	431a      	orrs	r2, r3
 8000824:	40cc      	lsrs	r4, r1
 8000826:	0753      	lsls	r3, r2, #29
 8000828:	d009      	beq.n	800083e <__aeabi_dmul+0x592>
 800082a:	230f      	movs	r3, #15
 800082c:	4013      	ands	r3, r2
 800082e:	2b04      	cmp	r3, #4
 8000830:	d005      	beq.n	800083e <__aeabi_dmul+0x592>
 8000832:	1d13      	adds	r3, r2, #4
 8000834:	4293      	cmp	r3, r2
 8000836:	4192      	sbcs	r2, r2
 8000838:	4252      	negs	r2, r2
 800083a:	18a4      	adds	r4, r4, r2
 800083c:	001a      	movs	r2, r3
 800083e:	0223      	lsls	r3, r4, #8
 8000840:	d508      	bpl.n	8000854 <__aeabi_dmul+0x5a8>
 8000842:	2301      	movs	r3, #1
 8000844:	2400      	movs	r4, #0
 8000846:	2200      	movs	r2, #0
 8000848:	e58e      	b.n	8000368 <__aeabi_dmul+0xbc>
 800084a:	4689      	mov	r9, r1
 800084c:	2400      	movs	r4, #0
 800084e:	e58b      	b.n	8000368 <__aeabi_dmul+0xbc>
 8000850:	2300      	movs	r3, #0
 8000852:	e7a5      	b.n	80007a0 <__aeabi_dmul+0x4f4>
 8000854:	0763      	lsls	r3, r4, #29
 8000856:	0264      	lsls	r4, r4, #9
 8000858:	0b24      	lsrs	r4, r4, #12
 800085a:	e7a1      	b.n	80007a0 <__aeabi_dmul+0x4f4>
 800085c:	9b00      	ldr	r3, [sp, #0]
 800085e:	46a2      	mov	sl, r4
 8000860:	4699      	mov	r9, r3
 8000862:	9b01      	ldr	r3, [sp, #4]
 8000864:	4698      	mov	r8, r3
 8000866:	e737      	b.n	80006d8 <__aeabi_dmul+0x42c>
 8000868:	fffffc0d 	.word	0xfffffc0d
 800086c:	000007ff 	.word	0x000007ff
 8000870:	0000043e 	.word	0x0000043e
 8000874:	0000041e 	.word	0x0000041e

08000878 <__aeabi_f2d>:
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	0242      	lsls	r2, r0, #9
 800087c:	0043      	lsls	r3, r0, #1
 800087e:	0fc4      	lsrs	r4, r0, #31
 8000880:	20fe      	movs	r0, #254	@ 0xfe
 8000882:	0e1b      	lsrs	r3, r3, #24
 8000884:	1c59      	adds	r1, r3, #1
 8000886:	0a55      	lsrs	r5, r2, #9
 8000888:	4208      	tst	r0, r1
 800088a:	d00c      	beq.n	80008a6 <__aeabi_f2d+0x2e>
 800088c:	21e0      	movs	r1, #224	@ 0xe0
 800088e:	0089      	lsls	r1, r1, #2
 8000890:	468c      	mov	ip, r1
 8000892:	076d      	lsls	r5, r5, #29
 8000894:	0b12      	lsrs	r2, r2, #12
 8000896:	4463      	add	r3, ip
 8000898:	051b      	lsls	r3, r3, #20
 800089a:	4313      	orrs	r3, r2
 800089c:	07e4      	lsls	r4, r4, #31
 800089e:	4323      	orrs	r3, r4
 80008a0:	0028      	movs	r0, r5
 80008a2:	0019      	movs	r1, r3
 80008a4:	bd70      	pop	{r4, r5, r6, pc}
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d114      	bne.n	80008d4 <__aeabi_f2d+0x5c>
 80008aa:	2d00      	cmp	r5, #0
 80008ac:	d01b      	beq.n	80008e6 <__aeabi_f2d+0x6e>
 80008ae:	0028      	movs	r0, r5
 80008b0:	f000 f8ac 	bl	8000a0c <__clzsi2>
 80008b4:	280a      	cmp	r0, #10
 80008b6:	dc1c      	bgt.n	80008f2 <__aeabi_f2d+0x7a>
 80008b8:	230b      	movs	r3, #11
 80008ba:	002a      	movs	r2, r5
 80008bc:	1a1b      	subs	r3, r3, r0
 80008be:	40da      	lsrs	r2, r3
 80008c0:	0003      	movs	r3, r0
 80008c2:	3315      	adds	r3, #21
 80008c4:	409d      	lsls	r5, r3
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <__aeabi_f2d+0x88>)
 80008c8:	0312      	lsls	r2, r2, #12
 80008ca:	1a1b      	subs	r3, r3, r0
 80008cc:	055b      	lsls	r3, r3, #21
 80008ce:	0b12      	lsrs	r2, r2, #12
 80008d0:	0d5b      	lsrs	r3, r3, #21
 80008d2:	e7e1      	b.n	8000898 <__aeabi_f2d+0x20>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d009      	beq.n	80008ec <__aeabi_f2d+0x74>
 80008d8:	0b13      	lsrs	r3, r2, #12
 80008da:	2280      	movs	r2, #128	@ 0x80
 80008dc:	0312      	lsls	r2, r2, #12
 80008de:	431a      	orrs	r2, r3
 80008e0:	076d      	lsls	r5, r5, #29
 80008e2:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <__aeabi_f2d+0x8c>)
 80008e4:	e7d8      	b.n	8000898 <__aeabi_f2d+0x20>
 80008e6:	2300      	movs	r3, #0
 80008e8:	2200      	movs	r2, #0
 80008ea:	e7d5      	b.n	8000898 <__aeabi_f2d+0x20>
 80008ec:	2200      	movs	r2, #0
 80008ee:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <__aeabi_f2d+0x8c>)
 80008f0:	e7d2      	b.n	8000898 <__aeabi_f2d+0x20>
 80008f2:	0003      	movs	r3, r0
 80008f4:	002a      	movs	r2, r5
 80008f6:	3b0b      	subs	r3, #11
 80008f8:	409a      	lsls	r2, r3
 80008fa:	2500      	movs	r5, #0
 80008fc:	e7e3      	b.n	80008c6 <__aeabi_f2d+0x4e>
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	00000389 	.word	0x00000389
 8000904:	000007ff 	.word	0x000007ff

08000908 <__aeabi_d2f>:
 8000908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090a:	004b      	lsls	r3, r1, #1
 800090c:	030f      	lsls	r7, r1, #12
 800090e:	0d5b      	lsrs	r3, r3, #21
 8000910:	4c3a      	ldr	r4, [pc, #232]	@ (80009fc <__aeabi_d2f+0xf4>)
 8000912:	0f45      	lsrs	r5, r0, #29
 8000914:	b083      	sub	sp, #12
 8000916:	0a7f      	lsrs	r7, r7, #9
 8000918:	1c5e      	adds	r6, r3, #1
 800091a:	432f      	orrs	r7, r5
 800091c:	9000      	str	r0, [sp, #0]
 800091e:	9101      	str	r1, [sp, #4]
 8000920:	0fca      	lsrs	r2, r1, #31
 8000922:	00c5      	lsls	r5, r0, #3
 8000924:	4226      	tst	r6, r4
 8000926:	d00b      	beq.n	8000940 <__aeabi_d2f+0x38>
 8000928:	4935      	ldr	r1, [pc, #212]	@ (8000a00 <__aeabi_d2f+0xf8>)
 800092a:	185c      	adds	r4, r3, r1
 800092c:	2cfe      	cmp	r4, #254	@ 0xfe
 800092e:	dd13      	ble.n	8000958 <__aeabi_d2f+0x50>
 8000930:	20ff      	movs	r0, #255	@ 0xff
 8000932:	2300      	movs	r3, #0
 8000934:	05c0      	lsls	r0, r0, #23
 8000936:	4318      	orrs	r0, r3
 8000938:	07d2      	lsls	r2, r2, #31
 800093a:	4310      	orrs	r0, r2
 800093c:	b003      	add	sp, #12
 800093e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000940:	433d      	orrs	r5, r7
 8000942:	2b00      	cmp	r3, #0
 8000944:	d101      	bne.n	800094a <__aeabi_d2f+0x42>
 8000946:	2000      	movs	r0, #0
 8000948:	e7f4      	b.n	8000934 <__aeabi_d2f+0x2c>
 800094a:	2d00      	cmp	r5, #0
 800094c:	d0f0      	beq.n	8000930 <__aeabi_d2f+0x28>
 800094e:	2380      	movs	r3, #128	@ 0x80
 8000950:	03db      	lsls	r3, r3, #15
 8000952:	20ff      	movs	r0, #255	@ 0xff
 8000954:	433b      	orrs	r3, r7
 8000956:	e7ed      	b.n	8000934 <__aeabi_d2f+0x2c>
 8000958:	2c00      	cmp	r4, #0
 800095a:	dd0c      	ble.n	8000976 <__aeabi_d2f+0x6e>
 800095c:	9b00      	ldr	r3, [sp, #0]
 800095e:	00ff      	lsls	r7, r7, #3
 8000960:	019b      	lsls	r3, r3, #6
 8000962:	1e58      	subs	r0, r3, #1
 8000964:	4183      	sbcs	r3, r0
 8000966:	0f69      	lsrs	r1, r5, #29
 8000968:	433b      	orrs	r3, r7
 800096a:	430b      	orrs	r3, r1
 800096c:	0759      	lsls	r1, r3, #29
 800096e:	d127      	bne.n	80009c0 <__aeabi_d2f+0xb8>
 8000970:	08db      	lsrs	r3, r3, #3
 8000972:	b2e0      	uxtb	r0, r4
 8000974:	e7de      	b.n	8000934 <__aeabi_d2f+0x2c>
 8000976:	0021      	movs	r1, r4
 8000978:	3117      	adds	r1, #23
 800097a:	db31      	blt.n	80009e0 <__aeabi_d2f+0xd8>
 800097c:	2180      	movs	r1, #128	@ 0x80
 800097e:	201e      	movs	r0, #30
 8000980:	0409      	lsls	r1, r1, #16
 8000982:	4339      	orrs	r1, r7
 8000984:	1b00      	subs	r0, r0, r4
 8000986:	281f      	cmp	r0, #31
 8000988:	dd2d      	ble.n	80009e6 <__aeabi_d2f+0xde>
 800098a:	2602      	movs	r6, #2
 800098c:	4276      	negs	r6, r6
 800098e:	1b34      	subs	r4, r6, r4
 8000990:	000e      	movs	r6, r1
 8000992:	40e6      	lsrs	r6, r4
 8000994:	0034      	movs	r4, r6
 8000996:	2820      	cmp	r0, #32
 8000998:	d004      	beq.n	80009a4 <__aeabi_d2f+0x9c>
 800099a:	481a      	ldr	r0, [pc, #104]	@ (8000a04 <__aeabi_d2f+0xfc>)
 800099c:	4684      	mov	ip, r0
 800099e:	4463      	add	r3, ip
 80009a0:	4099      	lsls	r1, r3
 80009a2:	430d      	orrs	r5, r1
 80009a4:	002b      	movs	r3, r5
 80009a6:	1e59      	subs	r1, r3, #1
 80009a8:	418b      	sbcs	r3, r1
 80009aa:	4323      	orrs	r3, r4
 80009ac:	0759      	lsls	r1, r3, #29
 80009ae:	d003      	beq.n	80009b8 <__aeabi_d2f+0xb0>
 80009b0:	210f      	movs	r1, #15
 80009b2:	4019      	ands	r1, r3
 80009b4:	2904      	cmp	r1, #4
 80009b6:	d10b      	bne.n	80009d0 <__aeabi_d2f+0xc8>
 80009b8:	019b      	lsls	r3, r3, #6
 80009ba:	2000      	movs	r0, #0
 80009bc:	0a5b      	lsrs	r3, r3, #9
 80009be:	e7b9      	b.n	8000934 <__aeabi_d2f+0x2c>
 80009c0:	210f      	movs	r1, #15
 80009c2:	4019      	ands	r1, r3
 80009c4:	2904      	cmp	r1, #4
 80009c6:	d104      	bne.n	80009d2 <__aeabi_d2f+0xca>
 80009c8:	019b      	lsls	r3, r3, #6
 80009ca:	0a5b      	lsrs	r3, r3, #9
 80009cc:	b2e0      	uxtb	r0, r4
 80009ce:	e7b1      	b.n	8000934 <__aeabi_d2f+0x2c>
 80009d0:	2400      	movs	r4, #0
 80009d2:	3304      	adds	r3, #4
 80009d4:	0159      	lsls	r1, r3, #5
 80009d6:	d5f7      	bpl.n	80009c8 <__aeabi_d2f+0xc0>
 80009d8:	3401      	adds	r4, #1
 80009da:	2300      	movs	r3, #0
 80009dc:	b2e0      	uxtb	r0, r4
 80009de:	e7a9      	b.n	8000934 <__aeabi_d2f+0x2c>
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e7a6      	b.n	8000934 <__aeabi_d2f+0x2c>
 80009e6:	4c08      	ldr	r4, [pc, #32]	@ (8000a08 <__aeabi_d2f+0x100>)
 80009e8:	191c      	adds	r4, r3, r4
 80009ea:	002b      	movs	r3, r5
 80009ec:	40a5      	lsls	r5, r4
 80009ee:	40c3      	lsrs	r3, r0
 80009f0:	40a1      	lsls	r1, r4
 80009f2:	1e68      	subs	r0, r5, #1
 80009f4:	4185      	sbcs	r5, r0
 80009f6:	4329      	orrs	r1, r5
 80009f8:	430b      	orrs	r3, r1
 80009fa:	e7d7      	b.n	80009ac <__aeabi_d2f+0xa4>
 80009fc:	000007fe 	.word	0x000007fe
 8000a00:	fffffc80 	.word	0xfffffc80
 8000a04:	fffffca2 	.word	0xfffffca2
 8000a08:	fffffc82 	.word	0xfffffc82

08000a0c <__clzsi2>:
 8000a0c:	211c      	movs	r1, #28
 8000a0e:	2301      	movs	r3, #1
 8000a10:	041b      	lsls	r3, r3, #16
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d301      	bcc.n	8000a1a <__clzsi2+0xe>
 8000a16:	0c00      	lsrs	r0, r0, #16
 8000a18:	3910      	subs	r1, #16
 8000a1a:	0a1b      	lsrs	r3, r3, #8
 8000a1c:	4298      	cmp	r0, r3
 8000a1e:	d301      	bcc.n	8000a24 <__clzsi2+0x18>
 8000a20:	0a00      	lsrs	r0, r0, #8
 8000a22:	3908      	subs	r1, #8
 8000a24:	091b      	lsrs	r3, r3, #4
 8000a26:	4298      	cmp	r0, r3
 8000a28:	d301      	bcc.n	8000a2e <__clzsi2+0x22>
 8000a2a:	0900      	lsrs	r0, r0, #4
 8000a2c:	3904      	subs	r1, #4
 8000a2e:	a202      	add	r2, pc, #8	@ (adr r2, 8000a38 <__clzsi2+0x2c>)
 8000a30:	5c10      	ldrb	r0, [r2, r0]
 8000a32:	1840      	adds	r0, r0, r1
 8000a34:	4770      	bx	lr
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	02020304 	.word	0x02020304
 8000a3c:	01010101 	.word	0x01010101
	...

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4c:	f000 f9a8 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a50:	f000 f83e 	bl	8000ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a54:	f000 f8f0 	bl	8000c38 <MX_GPIO_Init>
  MX_ADC_Init();
 8000a58:	f000 f88a 	bl	8000b70 <MX_ADC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc);
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <main+0x78>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 fba6 	bl	80011b0 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 100);
 8000a64:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <main+0x78>)
 8000a66:	2164      	movs	r1, #100	@ 0x64
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f000 fc35 	bl	80012d8 <HAL_ADC_PollForConversion>

	  adc_result = HAL_ADC_GetValue(&hadc);
 8000a6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ac0 <main+0x78>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f000 fccd 	bl	8001410 <HAL_ADC_GetValue>
 8000a76:	0003      	movs	r3, r0
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff fbd1 	bl	8000220 <__aeabi_ui2f>
 8000a7e:	1c02      	adds	r2, r0, #0
 8000a80:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <main+0x7c>)
 8000a82:	601a      	str	r2, [r3, #0]
	  adc_result *= 0.0008058629150390625;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <main+0x7c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	1c18      	adds	r0, r3, #0
 8000a8a:	f7ff fef5 	bl	8000878 <__aeabi_f2d>
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac8 <main+0x80>)
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <main+0x84>)
 8000a92:	f7ff fc0b 	bl	80002ac <__aeabi_dmul>
 8000a96:	0002      	movs	r2, r0
 8000a98:	000b      	movs	r3, r1
 8000a9a:	0010      	movs	r0, r2
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	f7ff ff33 	bl	8000908 <__aeabi_d2f>
 8000aa2:	1c02      	adds	r2, r0, #0
 8000aa4:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <main+0x7c>)
 8000aa6:	601a      	str	r2, [r3, #0]
	  HAL_Delay(500);
 8000aa8:	23fa      	movs	r3, #250	@ 0xfa
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 f9e7 	bl	8000e80 <HAL_Delay>

	  HAL_ADC_Stop(&hadc);
 8000ab2:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <main+0x78>)
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f000 fbcf 	bl	8001258 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc);
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	e7ce      	b.n	8000a5c <main+0x14>
 8000abe:	46c0      	nop			@ (mov r8, r8)
 8000ac0:	20000028 	.word	0x20000028
 8000ac4:	20000084 	.word	0x20000084
 8000ac8:	6ebd4cfd 	.word	0x6ebd4cfd
 8000acc:	3f4a6811 	.word	0x3f4a6811

08000ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b095      	sub	sp, #84	@ 0x54
 8000ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad6:	2418      	movs	r4, #24
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	0018      	movs	r0, r3
 8000adc:	2338      	movs	r3, #56	@ 0x38
 8000ade:	001a      	movs	r2, r3
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f001 fe39 	bl	8002758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	0018      	movs	r0, r3
 8000aea:	2314      	movs	r3, #20
 8000aec:	001a      	movs	r2, r3
 8000aee:	2100      	movs	r1, #0
 8000af0:	f001 fe32 	bl	8002758 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b68 <SystemClock_Config+0x98>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b6c <SystemClock_Config+0x9c>)
 8000afa:	401a      	ands	r2, r3
 8000afc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <SystemClock_Config+0x98>)
 8000afe:	2180      	movs	r1, #128	@ 0x80
 8000b00:	0109      	lsls	r1, r1, #4
 8000b02:	430a      	orrs	r2, r1
 8000b04:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b06:	0021      	movs	r1, r4
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2201      	movs	r2, #1
 8000b12:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2210      	movs	r2, #16
 8000b18:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	0018      	movs	r0, r3
 8000b24:	f001 f886 	bl	8001c34 <HAL_RCC_OscConfig>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000b2c:	f000 f89a 	bl	8000c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	220f      	movs	r2, #15
 8000b34:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2201      	movs	r2, #1
 8000b3a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2100      	movs	r1, #0
 8000b52:	0018      	movs	r0, r3
 8000b54:	f001 fc32 	bl	80023bc <HAL_RCC_ClockConfig>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b5c:	f000 f882 	bl	8000c64 <Error_Handler>
  }
}
 8000b60:	46c0      	nop			@ (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b015      	add	sp, #84	@ 0x54
 8000b66:	bd90      	pop	{r4, r7, pc}
 8000b68:	40007000 	.word	0x40007000
 8000b6c:	ffffe7ff 	.word	0xffffe7ff

08000b70 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b76:	003b      	movs	r3, r7
 8000b78:	0018      	movs	r0, r3
 8000b7a:	2308      	movs	r3, #8
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f001 fdea 	bl	8002758 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000b84:	4b2a      	ldr	r3, [pc, #168]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000b86:	4a2b      	ldr	r2, [pc, #172]	@ (8000c34 <MX_ADC_Init+0xc4>)
 8000b88:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000b8a:	4b29      	ldr	r3, [pc, #164]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000b90:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000b92:	22c0      	movs	r2, #192	@ 0xc0
 8000b94:	0612      	lsls	r2, r2, #24
 8000b96:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b98:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000b9e:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000bb2:	2220      	movs	r2, #32
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000bba:	2221      	movs	r2, #33	@ 0x21
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000bc8:	22c2      	movs	r2, #194	@ 0xc2
 8000bca:	32ff      	adds	r2, #255	@ 0xff
 8000bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000bce:	4b18      	ldr	r3, [pc, #96]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000bd0:	222c      	movs	r2, #44	@ 0x2c
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000bd8:	2204      	movs	r2, #4
 8000bda:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 f966 	bl	8000ec8 <HAL_ADC_Init>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000c00:	f000 f830 	bl	8000c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c04:	003b      	movs	r3, r7
 8000c06:	2201      	movs	r2, #1
 8000c08:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	2280      	movs	r2, #128	@ 0x80
 8000c0e:	0152      	lsls	r2, r2, #5
 8000c10:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c12:	003a      	movs	r2, r7
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_ADC_Init+0xc0>)
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f000 fc05 	bl	8001428 <HAL_ADC_ConfigChannel>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000c22:	f000 f81f 	bl	8000c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	20000028 	.word	0x20000028
 8000c34:	40012400 	.word	0x40012400

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <MX_GPIO_Init+0x28>)
 8000c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <MX_GPIO_Init+0x28>)
 8000c44:	2101      	movs	r1, #1
 8000c46:	430a      	orrs	r2, r1
 8000c48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c4a:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <MX_GPIO_Init+0x28>)
 8000c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4013      	ands	r3, r2
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	40021000 	.word	0x40021000

08000c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c68:	b672      	cpsid	i
}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	e7fd      	b.n	8000c6c <Error_Handler+0x8>

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c74:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <HAL_MspInit+0x24>)
 8000c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_MspInit+0x24>)
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	4b04      	ldr	r3, [pc, #16]	@ (8000c94 <HAL_MspInit+0x24>)
 8000c82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c84:	4b03      	ldr	r3, [pc, #12]	@ (8000c94 <HAL_MspInit+0x24>)
 8000c86:	2180      	movs	r1, #128	@ 0x80
 8000c88:	0549      	lsls	r1, r1, #21
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b089      	sub	sp, #36	@ 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	240c      	movs	r4, #12
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	2314      	movs	r3, #20
 8000ca8:	001a      	movs	r2, r3
 8000caa:	2100      	movs	r1, #0
 8000cac:	f001 fd54 	bl	8002758 <memset>
  if(hadc->Instance==ADC1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a14      	ldr	r2, [pc, #80]	@ (8000d08 <HAL_ADC_MspInit+0x70>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d122      	bne.n	8000d00 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <HAL_ADC_MspInit+0x74>)
 8000cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <HAL_ADC_MspInit+0x74>)
 8000cc0:	2180      	movs	r1, #128	@ 0x80
 8000cc2:	0089      	lsls	r1, r1, #2
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <HAL_ADC_MspInit+0x74>)
 8000cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <HAL_ADC_MspInit+0x74>)
 8000cce:	2101      	movs	r1, #1
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <HAL_ADC_MspInit+0x74>)
 8000cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4013      	ands	r3, r2
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	2203      	movs	r2, #3
 8000cea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	193a      	adds	r2, r7, r4
 8000cf4:	23a0      	movs	r3, #160	@ 0xa0
 8000cf6:	05db      	lsls	r3, r3, #23
 8000cf8:	0011      	movs	r1, r2
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fe24 	bl	8001948 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d00:	46c0      	nop			@ (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b009      	add	sp, #36	@ 0x24
 8000d06:	bd90      	pop	{r4, r7, pc}
 8000d08:	40012400 	.word	0x40012400
 8000d0c:	40021000 	.word	0x40021000

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d14:	46c0      	nop			@ (mov r8, r8)
 8000d16:	e7fd      	b.n	8000d14 <NMI_Handler+0x4>

08000d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	e7fd      	b.n	8000d1c <HardFault_Handler+0x4>

08000d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 f886 	bl	8000e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	46c0      	nop			@ (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000d4c:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d50:	f7ff fff7 	bl	8000d42 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	@ (8000d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <LoopForever+0xe>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d98 <LoopForever+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f001 fcf5 	bl	8002768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f7ff fe63 	bl	8000a48 <main>

08000d82 <LoopForever>:

LoopForever:
    b LoopForever
 8000d82:	e7fe      	b.n	8000d82 <LoopForever>
  ldr   r0, =_estack
 8000d84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d90:	080027ec 	.word	0x080027ec
  ldr r2, =_sbss
 8000d94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d98:	2000008c 	.word	0x2000008c

08000d9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC1_COMP_IRQHandler>
	...

08000da0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000dac:	4b0b      	ldr	r3, [pc, #44]	@ (8000ddc <HAL_Init+0x3c>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_Init+0x3c>)
 8000db2:	2140      	movs	r1, #64	@ 0x40
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 f811 	bl	8000de0 <HAL_InitTick>
 8000dbe:	1e03      	subs	r3, r0, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	e001      	b.n	8000dce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dca:	f7ff ff51 	bl	8000c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
}
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	40022000 	.word	0x40022000

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de8:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <HAL_InitTick+0x5c>)
 8000dea:	681c      	ldr	r4, [r3, #0]
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <HAL_InitTick+0x60>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	0019      	movs	r1, r3
 8000df2:	23fa      	movs	r3, #250	@ 0xfa
 8000df4:	0098      	lsls	r0, r3, #2
 8000df6:	f7ff f987 	bl	8000108 <__udivsi3>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff f982 	bl	8000108 <__udivsi3>
 8000e04:	0003      	movs	r3, r0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 fd91 	bl	800192e <HAL_SYSTICK_Config>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e00f      	b.n	8000e34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d80b      	bhi.n	8000e32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	425b      	negs	r3, r3
 8000e20:	2200      	movs	r2, #0
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 fd6e 	bl	8001904 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_InitTick+0x64>)
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e000      	b.n	8000e34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b003      	add	sp, #12
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000004 	.word	0x20000004

08000e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <HAL_IncTick+0x1c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	001a      	movs	r2, r3
 8000e52:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <HAL_IncTick+0x20>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	18d2      	adds	r2, r2, r3
 8000e58:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <HAL_IncTick+0x20>)
 8000e5a:	601a      	str	r2, [r3, #0]
}
 8000e5c:	46c0      	nop			@ (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000088 	.word	0x20000088

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b02      	ldr	r3, [pc, #8]	@ (8000e7c <HAL_GetTick+0x10>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	20000088 	.word	0x20000088

08000e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff fff0 	bl	8000e6c <HAL_GetTick>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3301      	adds	r3, #1
 8000e98:	d005      	beq.n	8000ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_Delay+0x44>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	189b      	adds	r3, r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	f7ff ffe0 	bl	8000e6c <HAL_GetTick>
 8000eac:	0002      	movs	r2, r0
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d8f7      	bhi.n	8000ea8 <HAL_Delay+0x28>
  {
  }
}
 8000eb8:	46c0      	nop			@ (mov r8, r8)
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	20000008 	.word	0x20000008

08000ec8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e159      	b.n	800118e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10a      	bne.n	8000ef8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2250      	movs	r2, #80	@ 0x50
 8000eec:	2100      	movs	r1, #0
 8000eee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff fed0 	bl	8000c98 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000efc:	2210      	movs	r2, #16
 8000efe:	4013      	ands	r3, r2
 8000f00:	2b10      	cmp	r3, #16
 8000f02:	d005      	beq.n	8000f10 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000f0e:	d00b      	beq.n	8000f28 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f14:	2210      	movs	r2, #16
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2250      	movs	r2, #80	@ 0x50
 8000f20:	2100      	movs	r1, #0
 8000f22:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e132      	b.n	800118e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f2c:	4a9a      	ldr	r2, [pc, #616]	@ (8001198 <HAL_ADC_Init+0x2d0>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2202      	movs	r2, #2
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2203      	movs	r2, #3
 8000f40:	4013      	ands	r3, r2
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d108      	bne.n	8000f58 <HAL_ADC_Init+0x90>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4013      	ands	r3, r2
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d101      	bne.n	8000f58 <HAL_ADC_Init+0x90>
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <HAL_ADC_Init+0x92>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d149      	bne.n	8000ff2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	23c0      	movs	r3, #192	@ 0xc0
 8000f64:	061b      	lsls	r3, r3, #24
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d00b      	beq.n	8000f82 <HAL_ADC_Init+0xba>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	2380      	movs	r3, #128	@ 0x80
 8000f70:	05db      	lsls	r3, r3, #23
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d005      	beq.n	8000f82 <HAL_ADC_Init+0xba>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	2380      	movs	r3, #128	@ 0x80
 8000f7c:	061b      	lsls	r3, r3, #24
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d111      	bne.n	8000fa6 <HAL_ADC_Init+0xde>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	0892      	lsrs	r2, r2, #2
 8000f90:	611a      	str	r2, [r3, #16]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6919      	ldr	r1, [r3, #16]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	611a      	str	r2, [r3, #16]
 8000fa4:	e014      	b.n	8000fd0 <HAL_ADC_Init+0x108>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	0892      	lsrs	r2, r2, #2
 8000fb4:	611a      	str	r2, [r3, #16]
 8000fb6:	4b79      	ldr	r3, [pc, #484]	@ (800119c <HAL_ADC_Init+0x2d4>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4b78      	ldr	r3, [pc, #480]	@ (800119c <HAL_ADC_Init+0x2d4>)
 8000fbc:	4978      	ldr	r1, [pc, #480]	@ (80011a0 <HAL_ADC_Init+0x2d8>)
 8000fbe:	400a      	ands	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	4b76      	ldr	r3, [pc, #472]	@ (800119c <HAL_ADC_Init+0x2d4>)
 8000fc4:	6819      	ldr	r1, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	4b74      	ldr	r3, [pc, #464]	@ (800119c <HAL_ADC_Init+0x2d4>)
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2118      	movs	r1, #24
 8000fdc:	438a      	bics	r2, r1
 8000fde:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68d9      	ldr	r1, [r3, #12]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000ff2:	4b6a      	ldr	r3, [pc, #424]	@ (800119c <HAL_ADC_Init+0x2d4>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b69      	ldr	r3, [pc, #420]	@ (800119c <HAL_ADC_Init+0x2d4>)
 8000ff8:	496a      	ldr	r1, [pc, #424]	@ (80011a4 <HAL_ADC_Init+0x2dc>)
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000ffe:	4b67      	ldr	r3, [pc, #412]	@ (800119c <HAL_ADC_Init+0x2d4>)
 8001000:	6819      	ldr	r1, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001006:	065a      	lsls	r2, r3, #25
 8001008:	4b64      	ldr	r3, [pc, #400]	@ (800119c <HAL_ADC_Init+0x2d4>)
 800100a:	430a      	orrs	r2, r1
 800100c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	055b      	lsls	r3, r3, #21
 8001018:	4013      	ands	r3, r2
 800101a:	d108      	bne.n	800102e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2180      	movs	r1, #128	@ 0x80
 8001028:	0549      	lsls	r1, r1, #21
 800102a:	430a      	orrs	r2, r1
 800102c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	495b      	ldr	r1, [pc, #364]	@ (80011a8 <HAL_ADC_Init+0x2e0>)
 800103a:	400a      	ands	r2, r1
 800103c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	68d9      	ldr	r1, [r3, #12]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d101      	bne.n	8001054 <HAL_ADC_Init+0x18c>
 8001050:	2304      	movs	r3, #4
 8001052:	e000      	b.n	8001056 <HAL_ADC_Init+0x18e>
 8001054:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001056:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2020      	movs	r0, #32
 800105c:	5c1b      	ldrb	r3, [r3, r0]
 800105e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001060:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	202c      	movs	r0, #44	@ 0x2c
 8001066:	5c1b      	ldrb	r3, [r3, r0]
 8001068:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800106a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001070:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001078:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001080:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	430a      	orrs	r2, r1
 8001088:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800108e:	23c2      	movs	r3, #194	@ 0xc2
 8001090:	33ff      	adds	r3, #255	@ 0xff
 8001092:	429a      	cmp	r2, r3
 8001094:	d00b      	beq.n	80010ae <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68d9      	ldr	r1, [r3, #12]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2221      	movs	r2, #33	@ 0x21
 80010b2:	5c9b      	ldrb	r3, [r3, r2]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d11a      	bne.n	80010ee <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2220      	movs	r2, #32
 80010bc:	5c9b      	ldrb	r3, [r3, r2]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d109      	bne.n	80010d6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2180      	movs	r1, #128	@ 0x80
 80010ce:	0249      	lsls	r1, r1, #9
 80010d0:	430a      	orrs	r2, r1
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	e00b      	b.n	80010ee <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010da:	2220      	movs	r2, #32
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e6:	2201      	movs	r2, #1
 80010e8:	431a      	orrs	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d11f      	bne.n	8001136 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	492a      	ldr	r1, [pc, #168]	@ (80011ac <HAL_ADC_Init+0x2e4>)
 8001102:	400a      	ands	r2, r1
 8001104:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6919      	ldr	r1, [r3, #16]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001114:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800111a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	430a      	orrs	r2, r1
 8001122:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2101      	movs	r1, #1
 8001130:	430a      	orrs	r2, r1
 8001132:	611a      	str	r2, [r3, #16]
 8001134:	e00e      	b.n	8001154 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	2201      	movs	r2, #1
 800113e:	4013      	ands	r3, r2
 8001140:	2b01      	cmp	r3, #1
 8001142:	d107      	bne.n	8001154 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	691a      	ldr	r2, [r3, #16]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2101      	movs	r1, #1
 8001150:	438a      	bics	r2, r1
 8001152:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2107      	movs	r1, #7
 8001160:	438a      	bics	r2, r1
 8001162:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6959      	ldr	r1, [r3, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	430a      	orrs	r2, r1
 8001174:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001180:	2203      	movs	r2, #3
 8001182:	4393      	bics	r3, r2
 8001184:	2201      	movs	r2, #1
 8001186:	431a      	orrs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	fffffefd 	.word	0xfffffefd
 800119c:	40012708 	.word	0x40012708
 80011a0:	ffc3ffff 	.word	0xffc3ffff
 80011a4:	fdffffff 	.word	0xfdffffff
 80011a8:	fffe0219 	.word	0xfffe0219
 80011ac:	fffffc03 	.word	0xfffffc03

080011b0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b8:	230f      	movs	r3, #15
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2204      	movs	r2, #4
 80011c8:	4013      	ands	r3, r2
 80011ca:	d138      	bne.n	800123e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2250      	movs	r2, #80	@ 0x50
 80011d0:	5c9b      	ldrb	r3, [r3, r2]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d101      	bne.n	80011da <HAL_ADC_Start+0x2a>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e038      	b.n	800124c <HAL_ADC_Start+0x9c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2250      	movs	r2, #80	@ 0x50
 80011de:	2101      	movs	r1, #1
 80011e0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d007      	beq.n	80011fa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80011ea:	230f      	movs	r3, #15
 80011ec:	18fc      	adds	r4, r7, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f000 f9b9 	bl	8001568 <ADC_Enable>
 80011f6:	0003      	movs	r3, r0
 80011f8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011fa:	230f      	movs	r3, #15
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d120      	bne.n	8001246 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001208:	4a12      	ldr	r2, [pc, #72]	@ (8001254 <HAL_ADC_Start+0xa4>)
 800120a:	4013      	ands	r3, r2
 800120c:	2280      	movs	r2, #128	@ 0x80
 800120e:	0052      	lsls	r2, r2, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2250      	movs	r2, #80	@ 0x50
 8001220:	2100      	movs	r1, #0
 8001222:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	221c      	movs	r2, #28
 800122a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2104      	movs	r1, #4
 8001238:	430a      	orrs	r2, r1
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	e003      	b.n	8001246 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800123e:	230f      	movs	r3, #15
 8001240:	18fb      	adds	r3, r7, r3
 8001242:	2202      	movs	r2, #2
 8001244:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001246:	230f      	movs	r3, #15
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	781b      	ldrb	r3, [r3, #0]
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b005      	add	sp, #20
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	fffff0fe 	.word	0xfffff0fe

08001258 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001260:	230f      	movs	r3, #15
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	2200      	movs	r2, #0
 8001266:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2250      	movs	r2, #80	@ 0x50
 800126c:	5c9b      	ldrb	r3, [r3, r2]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d101      	bne.n	8001276 <HAL_ADC_Stop+0x1e>
 8001272:	2302      	movs	r3, #2
 8001274:	e029      	b.n	80012ca <HAL_ADC_Stop+0x72>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2250      	movs	r2, #80	@ 0x50
 800127a:	2101      	movs	r1, #1
 800127c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800127e:	250f      	movs	r5, #15
 8001280:	197c      	adds	r4, r7, r5
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	0018      	movs	r0, r3
 8001286:	f000 fa3e 	bl	8001706 <ADC_ConversionStop>
 800128a:	0003      	movs	r3, r0
 800128c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800128e:	197b      	adds	r3, r7, r5
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d112      	bne.n	80012bc <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001296:	197c      	adds	r4, r7, r5
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	0018      	movs	r0, r3
 800129c:	f000 f9cc 	bl	8001638 <ADC_Disable>
 80012a0:	0003      	movs	r3, r0
 80012a2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80012a4:	197b      	adds	r3, r7, r5
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012b0:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <HAL_ADC_Stop+0x7c>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	2201      	movs	r2, #1
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2250      	movs	r2, #80	@ 0x50
 80012c0:	2100      	movs	r1, #0
 80012c2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80012c4:	230f      	movs	r3, #15
 80012c6:	18fb      	adds	r3, r7, r3
 80012c8:	781b      	ldrb	r3, [r3, #0]
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b004      	add	sp, #16
 80012d0:	bdb0      	pop	{r4, r5, r7, pc}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	fffffefe 	.word	0xfffffefe

080012d8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d102      	bne.n	80012f8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80012f2:	2308      	movs	r3, #8
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	e014      	b.n	8001322 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2201      	movs	r2, #1
 8001300:	4013      	ands	r3, r2
 8001302:	2b01      	cmp	r3, #1
 8001304:	d10b      	bne.n	800131e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800130a:	2220      	movs	r2, #32
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2250      	movs	r2, #80	@ 0x50
 8001316:	2100      	movs	r1, #0
 8001318:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e072      	b.n	8001404 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800131e:	230c      	movs	r3, #12
 8001320:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001322:	f7ff fda3 	bl	8000e6c <HAL_GetTick>
 8001326:	0003      	movs	r3, r0
 8001328:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800132a:	e01f      	b.n	800136c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	d01c      	beq.n	800136c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <HAL_ADC_PollForConversion+0x70>
 8001338:	f7ff fd98 	bl	8000e6c <HAL_GetTick>
 800133c:	0002      	movs	r2, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d211      	bcs.n	800136c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	4013      	ands	r3, r2
 8001352:	d10b      	bne.n	800136c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001358:	2204      	movs	r2, #4
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2250      	movs	r2, #80	@ 0x50
 8001364:	2100      	movs	r1, #0
 8001366:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e04b      	b.n	8001404 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	4013      	ands	r3, r2
 8001376:	d0d9      	beq.n	800132c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800137c:	2280      	movs	r2, #128	@ 0x80
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	431a      	orrs	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	23c0      	movs	r3, #192	@ 0xc0
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4013      	ands	r3, r2
 8001392:	d12e      	bne.n	80013f2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2220      	movs	r2, #32
 8001398:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800139a:	2b00      	cmp	r3, #0
 800139c:	d129      	bne.n	80013f2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2208      	movs	r2, #8
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d122      	bne.n	80013f2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2204      	movs	r2, #4
 80013b4:	4013      	ands	r3, r2
 80013b6:	d110      	bne.n	80013da <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	210c      	movs	r1, #12
 80013c4:	438a      	bics	r2, r1
 80013c6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013cc:	4a0f      	ldr	r2, [pc, #60]	@ (800140c <HAL_ADC_PollForConversion+0x134>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	2201      	movs	r2, #1
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80013d8:	e00b      	b.n	80013f2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013de:	2220      	movs	r2, #32
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ea:	2201      	movs	r2, #1
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d103      	bne.n	8001402 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	220c      	movs	r2, #12
 8001400:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	b004      	add	sp, #16
 800140a:	bd80      	pop	{r7, pc}
 800140c:	fffffefe 	.word	0xfffffefe

08001410 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800141e:	0018      	movs	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2250      	movs	r2, #80	@ 0x50
 8001436:	5c9b      	ldrb	r3, [r3, r2]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x18>
 800143c:	2302      	movs	r3, #2
 800143e:	e085      	b.n	800154c <HAL_ADC_ConfigChannel+0x124>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2250      	movs	r2, #80	@ 0x50
 8001444:	2101      	movs	r1, #1
 8001446:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2204      	movs	r2, #4
 8001450:	4013      	ands	r3, r2
 8001452:	d00b      	beq.n	800146c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001458:	2220      	movs	r2, #32
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2250      	movs	r2, #80	@ 0x50
 8001464:	2100      	movs	r1, #0
 8001466:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e06f      	b.n	800154c <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a38      	ldr	r2, [pc, #224]	@ (8001554 <HAL_ADC_ConfigChannel+0x12c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d035      	beq.n	80014e2 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	035b      	lsls	r3, r3, #13
 8001482:	0b5a      	lsrs	r2, r3, #13
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	@ 0x80
 8001492:	02db      	lsls	r3, r3, #11
 8001494:	4013      	ands	r3, r2
 8001496:	d009      	beq.n	80014ac <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001498:	4b2f      	ldr	r3, [pc, #188]	@ (8001558 <HAL_ADC_ConfigChannel+0x130>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b2e      	ldr	r3, [pc, #184]	@ (8001558 <HAL_ADC_ConfigChannel+0x130>)
 800149e:	2180      	movs	r1, #128	@ 0x80
 80014a0:	0409      	lsls	r1, r1, #16
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80014a6:	200a      	movs	r0, #10
 80014a8:	f000 f97a 	bl	80017a0 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	2380      	movs	r3, #128	@ 0x80
 80014b2:	029b      	lsls	r3, r3, #10
 80014b4:	4013      	ands	r3, r2
 80014b6:	d006      	beq.n	80014c6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80014b8:	4b27      	ldr	r3, [pc, #156]	@ (8001558 <HAL_ADC_ConfigChannel+0x130>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b26      	ldr	r3, [pc, #152]	@ (8001558 <HAL_ADC_ConfigChannel+0x130>)
 80014be:	2180      	movs	r1, #128	@ 0x80
 80014c0:	03c9      	lsls	r1, r1, #15
 80014c2:	430a      	orrs	r2, r1
 80014c4:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	025b      	lsls	r3, r3, #9
 80014ce:	4013      	ands	r3, r2
 80014d0:	d037      	beq.n	8001542 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80014d2:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <HAL_ADC_ConfigChannel+0x130>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <HAL_ADC_ConfigChannel+0x130>)
 80014d8:	2180      	movs	r1, #128	@ 0x80
 80014da:	0449      	lsls	r1, r1, #17
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	e02f      	b.n	8001542 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	035b      	lsls	r3, r3, #13
 80014ee:	0b5b      	lsrs	r3, r3, #13
 80014f0:	43d9      	mvns	r1, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	400a      	ands	r2, r1
 80014f8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	2380      	movs	r3, #128	@ 0x80
 8001500:	02db      	lsls	r3, r3, #11
 8001502:	4013      	ands	r3, r2
 8001504:	d005      	beq.n	8001512 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001506:	4b14      	ldr	r3, [pc, #80]	@ (8001558 <HAL_ADC_ConfigChannel+0x130>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <HAL_ADC_ConfigChannel+0x130>)
 800150c:	4913      	ldr	r1, [pc, #76]	@ (800155c <HAL_ADC_ConfigChannel+0x134>)
 800150e:	400a      	ands	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	2380      	movs	r3, #128	@ 0x80
 8001518:	029b      	lsls	r3, r3, #10
 800151a:	4013      	ands	r3, r2
 800151c:	d005      	beq.n	800152a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <HAL_ADC_ConfigChannel+0x130>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <HAL_ADC_ConfigChannel+0x130>)
 8001524:	490e      	ldr	r1, [pc, #56]	@ (8001560 <HAL_ADC_ConfigChannel+0x138>)
 8001526:	400a      	ands	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	2380      	movs	r3, #128	@ 0x80
 8001530:	025b      	lsls	r3, r3, #9
 8001532:	4013      	ands	r3, r2
 8001534:	d005      	beq.n	8001542 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001536:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <HAL_ADC_ConfigChannel+0x130>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <HAL_ADC_ConfigChannel+0x130>)
 800153c:	4909      	ldr	r1, [pc, #36]	@ (8001564 <HAL_ADC_ConfigChannel+0x13c>)
 800153e:	400a      	ands	r2, r1
 8001540:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2250      	movs	r2, #80	@ 0x50
 8001546:	2100      	movs	r1, #0
 8001548:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}
 8001554:	00001001 	.word	0x00001001
 8001558:	40012708 	.word	0x40012708
 800155c:	ff7fffff 	.word	0xff7fffff
 8001560:	ffbfffff 	.word	0xffbfffff
 8001564:	feffffff 	.word	0xfeffffff

08001568 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2203      	movs	r2, #3
 800157c:	4013      	ands	r3, r2
 800157e:	2b01      	cmp	r3, #1
 8001580:	d108      	bne.n	8001594 <ADC_Enable+0x2c>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2201      	movs	r2, #1
 800158a:	4013      	ands	r3, r2
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <ADC_Enable+0x2c>
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <ADC_Enable+0x2e>
 8001594:	2300      	movs	r3, #0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d146      	bne.n	8001628 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4a24      	ldr	r2, [pc, #144]	@ (8001634 <ADC_Enable+0xcc>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	d00d      	beq.n	80015c2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015aa:	2210      	movs	r2, #16
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	2201      	movs	r2, #1
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e033      	b.n	800162a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2101      	movs	r1, #1
 80015ce:	430a      	orrs	r2, r1
 80015d0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f000 f8e4 	bl	80017a0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80015d8:	f7ff fc48 	bl	8000e6c <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015e0:	e01b      	b.n	800161a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015e2:	f7ff fc43 	bl	8000e6c <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b0a      	cmp	r3, #10
 80015ee:	d914      	bls.n	800161a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2201      	movs	r2, #1
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d00d      	beq.n	800161a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001602:	2210      	movs	r2, #16
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	2201      	movs	r2, #1
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e007      	b.n	800162a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2201      	movs	r2, #1
 8001622:	4013      	ands	r3, r2
 8001624:	2b01      	cmp	r3, #1
 8001626:	d1dc      	bne.n	80015e2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b004      	add	sp, #16
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	80000017 	.word	0x80000017

08001638 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2203      	movs	r2, #3
 800164c:	4013      	ands	r3, r2
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <ADC_Disable+0x2c>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2201      	movs	r2, #1
 800165a:	4013      	ands	r3, r2
 800165c:	2b01      	cmp	r3, #1
 800165e:	d101      	bne.n	8001664 <ADC_Disable+0x2c>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <ADC_Disable+0x2e>
 8001664:	2300      	movs	r3, #0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d048      	beq.n	80016fc <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2205      	movs	r2, #5
 8001672:	4013      	ands	r3, r2
 8001674:	2b01      	cmp	r3, #1
 8001676:	d110      	bne.n	800169a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689a      	ldr	r2, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2102      	movs	r1, #2
 8001684:	430a      	orrs	r2, r1
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2203      	movs	r2, #3
 800168e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001690:	f7ff fbec 	bl	8000e6c <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001698:	e029      	b.n	80016ee <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169e:	2210      	movs	r2, #16
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016aa:	2201      	movs	r2, #1
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e023      	b.n	80016fe <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016b6:	f7ff fbd9 	bl	8000e6c <HAL_GetTick>
 80016ba:	0002      	movs	r2, r0
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b0a      	cmp	r3, #10
 80016c2:	d914      	bls.n	80016ee <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2201      	movs	r2, #1
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10d      	bne.n	80016ee <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d6:	2210      	movs	r2, #16
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e2:	2201      	movs	r2, #1
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e007      	b.n	80016fe <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2201      	movs	r2, #1
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d0dc      	beq.n	80016b6 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b004      	add	sp, #16
 8001704:	bd80      	pop	{r7, pc}

08001706 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2204      	movs	r2, #4
 800171a:	4013      	ands	r3, r2
 800171c:	d03a      	beq.n	8001794 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2204      	movs	r2, #4
 8001726:	4013      	ands	r3, r2
 8001728:	2b04      	cmp	r3, #4
 800172a:	d10d      	bne.n	8001748 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2202      	movs	r2, #2
 8001734:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8001736:	d107      	bne.n	8001748 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2110      	movs	r1, #16
 8001744:	430a      	orrs	r2, r1
 8001746:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001748:	f7ff fb90 	bl	8000e6c <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001750:	e01a      	b.n	8001788 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001752:	f7ff fb8b 	bl	8000e6c <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b0a      	cmp	r3, #10
 800175e:	d913      	bls.n	8001788 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2204      	movs	r2, #4
 8001768:	4013      	ands	r3, r2
 800176a:	d00d      	beq.n	8001788 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001770:	2210      	movs	r2, #16
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177c:	2201      	movs	r2, #1
 800177e:	431a      	orrs	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e006      	b.n	8001796 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2204      	movs	r2, #4
 8001790:	4013      	ands	r3, r2
 8001792:	d1de      	bne.n	8001752 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b004      	add	sp, #16
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80017a8:	4b0b      	ldr	r3, [pc, #44]	@ (80017d8 <ADC_DelayMicroSecond+0x38>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	490b      	ldr	r1, [pc, #44]	@ (80017dc <ADC_DelayMicroSecond+0x3c>)
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7fe fcaa 	bl	8000108 <__udivsi3>
 80017b4:	0003      	movs	r3, r0
 80017b6:	001a      	movs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4353      	muls	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80017be:	e002      	b.n	80017c6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1f9      	bne.n	80017c0 <ADC_DelayMicroSecond+0x20>
  }
}
 80017cc:	46c0      	nop			@ (mov r8, r8)
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b004      	add	sp, #16
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	20000000 	.word	0x20000000
 80017dc:	000f4240 	.word	0x000f4240

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	0002      	movs	r2, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	1dfb      	adds	r3, r7, #7
 80017ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80017f4:	d828      	bhi.n	8001848 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f6:	4a2f      	ldr	r2, [pc, #188]	@ (80018b4 <__NVIC_SetPriority+0xd4>)
 80017f8:	1dfb      	adds	r3, r7, #7
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b25b      	sxtb	r3, r3
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	33c0      	adds	r3, #192	@ 0xc0
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	589b      	ldr	r3, [r3, r2]
 8001806:	1dfa      	adds	r2, r7, #7
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	0011      	movs	r1, r2
 800180c:	2203      	movs	r2, #3
 800180e:	400a      	ands	r2, r1
 8001810:	00d2      	lsls	r2, r2, #3
 8001812:	21ff      	movs	r1, #255	@ 0xff
 8001814:	4091      	lsls	r1, r2
 8001816:	000a      	movs	r2, r1
 8001818:	43d2      	mvns	r2, r2
 800181a:	401a      	ands	r2, r3
 800181c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	019b      	lsls	r3, r3, #6
 8001822:	22ff      	movs	r2, #255	@ 0xff
 8001824:	401a      	ands	r2, r3
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	0018      	movs	r0, r3
 800182c:	2303      	movs	r3, #3
 800182e:	4003      	ands	r3, r0
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001834:	481f      	ldr	r0, [pc, #124]	@ (80018b4 <__NVIC_SetPriority+0xd4>)
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b25b      	sxtb	r3, r3
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	430a      	orrs	r2, r1
 8001840:	33c0      	adds	r3, #192	@ 0xc0
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001846:	e031      	b.n	80018ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001848:	4a1b      	ldr	r2, [pc, #108]	@ (80018b8 <__NVIC_SetPriority+0xd8>)
 800184a:	1dfb      	adds	r3, r7, #7
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	0019      	movs	r1, r3
 8001850:	230f      	movs	r3, #15
 8001852:	400b      	ands	r3, r1
 8001854:	3b08      	subs	r3, #8
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3306      	adds	r3, #6
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	18d3      	adds	r3, r2, r3
 800185e:	3304      	adds	r3, #4
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	1dfa      	adds	r2, r7, #7
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	0011      	movs	r1, r2
 8001868:	2203      	movs	r2, #3
 800186a:	400a      	ands	r2, r1
 800186c:	00d2      	lsls	r2, r2, #3
 800186e:	21ff      	movs	r1, #255	@ 0xff
 8001870:	4091      	lsls	r1, r2
 8001872:	000a      	movs	r2, r1
 8001874:	43d2      	mvns	r2, r2
 8001876:	401a      	ands	r2, r3
 8001878:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	019b      	lsls	r3, r3, #6
 800187e:	22ff      	movs	r2, #255	@ 0xff
 8001880:	401a      	ands	r2, r3
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	0018      	movs	r0, r3
 8001888:	2303      	movs	r3, #3
 800188a:	4003      	ands	r3, r0
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001890:	4809      	ldr	r0, [pc, #36]	@ (80018b8 <__NVIC_SetPriority+0xd8>)
 8001892:	1dfb      	adds	r3, r7, #7
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	001c      	movs	r4, r3
 8001898:	230f      	movs	r3, #15
 800189a:	4023      	ands	r3, r4
 800189c:	3b08      	subs	r3, #8
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	430a      	orrs	r2, r1
 80018a2:	3306      	adds	r3, #6
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	18c3      	adds	r3, r0, r3
 80018a8:	3304      	adds	r3, #4
 80018aa:	601a      	str	r2, [r3, #0]
}
 80018ac:	46c0      	nop			@ (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b003      	add	sp, #12
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	1e5a      	subs	r2, r3, #1
 80018c8:	2380      	movs	r3, #128	@ 0x80
 80018ca:	045b      	lsls	r3, r3, #17
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d301      	bcc.n	80018d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d0:	2301      	movs	r3, #1
 80018d2:	e010      	b.n	80018f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <SysTick_Config+0x44>)
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	3a01      	subs	r2, #1
 80018da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018dc:	2301      	movs	r3, #1
 80018de:	425b      	negs	r3, r3
 80018e0:	2103      	movs	r1, #3
 80018e2:	0018      	movs	r0, r3
 80018e4:	f7ff ff7c 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <SysTick_Config+0x44>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	@ (8001900 <SysTick_Config+0x44>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b002      	add	sp, #8
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	210f      	movs	r1, #15
 8001910:	187b      	adds	r3, r7, r1
 8001912:	1c02      	adds	r2, r0, #0
 8001914:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	187b      	adds	r3, r7, r1
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b25b      	sxtb	r3, r3
 800191e:	0011      	movs	r1, r2
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff ff5d 	bl	80017e0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	b004      	add	sp, #16
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	0018      	movs	r0, r3
 800193a:	f7ff ffbf 	bl	80018bc <SysTick_Config>
 800193e:	0003      	movs	r3, r0
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b002      	add	sp, #8
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800195e:	e14f      	b.n	8001c00 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2101      	movs	r1, #1
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4091      	lsls	r1, r2
 800196a:	000a      	movs	r2, r1
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d100      	bne.n	8001978 <HAL_GPIO_Init+0x30>
 8001976:	e140      	b.n	8001bfa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2203      	movs	r2, #3
 800197e:	4013      	ands	r3, r2
 8001980:	2b01      	cmp	r3, #1
 8001982:	d005      	beq.n	8001990 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2203      	movs	r2, #3
 800198a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800198c:	2b02      	cmp	r3, #2
 800198e:	d130      	bne.n	80019f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	409a      	lsls	r2, r3
 800199e:	0013      	movs	r3, r2
 80019a0:	43da      	mvns	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	409a      	lsls	r2, r3
 80019b2:	0013      	movs	r3, r2
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c6:	2201      	movs	r2, #1
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	43da      	mvns	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	2201      	movs	r2, #1
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2203      	movs	r2, #3
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d017      	beq.n	8001a2e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	0013      	movs	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2203      	movs	r2, #3
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d123      	bne.n	8001a82 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	0092      	lsls	r2, r2, #2
 8001a44:	58d3      	ldr	r3, [r2, r3]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	409a      	lsls	r2, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	43da      	mvns	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2107      	movs	r1, #7
 8001a66:	400b      	ands	r3, r1
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	08da      	lsrs	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3208      	adds	r2, #8
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	6939      	ldr	r1, [r7, #16]
 8001a80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	0013      	movs	r3, r2
 8001a92:	43da      	mvns	r2, r3
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	23c0      	movs	r3, #192	@ 0xc0
 8001abc:	029b      	lsls	r3, r3, #10
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d100      	bne.n	8001ac4 <HAL_GPIO_Init+0x17c>
 8001ac2:	e09a      	b.n	8001bfa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac4:	4b54      	ldr	r3, [pc, #336]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ac8:	4b53      	ldr	r3, [pc, #332]	@ (8001c18 <HAL_GPIO_Init+0x2d0>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	430a      	orrs	r2, r1
 8001ace:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad0:	4a52      	ldr	r2, [pc, #328]	@ (8001c1c <HAL_GPIO_Init+0x2d4>)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	589b      	ldr	r3, [r3, r2]
 8001adc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	0013      	movs	r3, r2
 8001aec:	43da      	mvns	r2, r3
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	23a0      	movs	r3, #160	@ 0xa0
 8001af8:	05db      	lsls	r3, r3, #23
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d019      	beq.n	8001b32 <HAL_GPIO_Init+0x1ea>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a47      	ldr	r2, [pc, #284]	@ (8001c20 <HAL_GPIO_Init+0x2d8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d013      	beq.n	8001b2e <HAL_GPIO_Init+0x1e6>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a46      	ldr	r2, [pc, #280]	@ (8001c24 <HAL_GPIO_Init+0x2dc>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d00d      	beq.n	8001b2a <HAL_GPIO_Init+0x1e2>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a45      	ldr	r2, [pc, #276]	@ (8001c28 <HAL_GPIO_Init+0x2e0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d007      	beq.n	8001b26 <HAL_GPIO_Init+0x1de>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a44      	ldr	r2, [pc, #272]	@ (8001c2c <HAL_GPIO_Init+0x2e4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d101      	bne.n	8001b22 <HAL_GPIO_Init+0x1da>
 8001b1e:	2305      	movs	r3, #5
 8001b20:	e008      	b.n	8001b34 <HAL_GPIO_Init+0x1ec>
 8001b22:	2306      	movs	r3, #6
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x1ec>
 8001b26:	2303      	movs	r3, #3
 8001b28:	e004      	b.n	8001b34 <HAL_GPIO_Init+0x1ec>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e002      	b.n	8001b34 <HAL_GPIO_Init+0x1ec>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_GPIO_Init+0x1ec>
 8001b32:	2300      	movs	r3, #0
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	2103      	movs	r1, #3
 8001b38:	400a      	ands	r2, r1
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b44:	4935      	ldr	r1, [pc, #212]	@ (8001c1c <HAL_GPIO_Init+0x2d4>)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b52:	4b37      	ldr	r3, [pc, #220]	@ (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	035b      	lsls	r3, r3, #13
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b76:	4b2e      	ldr	r3, [pc, #184]	@ (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43da      	mvns	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	039b      	lsls	r3, r3, #14
 8001b94:	4013      	ands	r3, r2
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ba0:	4b23      	ldr	r3, [pc, #140]	@ (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001ba6:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	2380      	movs	r3, #128	@ 0x80
 8001bbc:	029b      	lsls	r3, r3, #10
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bca:	4b19      	ldr	r3, [pc, #100]	@ (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd0:	4b17      	ldr	r3, [pc, #92]	@ (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	025b      	lsls	r3, r3, #9
 8001be8:	4013      	ands	r3, r2
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_GPIO_Init+0x2e8>)
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	40da      	lsrs	r2, r3
 8001c08:	1e13      	subs	r3, r2, #0
 8001c0a:	d000      	beq.n	8001c0e <HAL_GPIO_Init+0x2c6>
 8001c0c:	e6a8      	b.n	8001960 <HAL_GPIO_Init+0x18>
  }
}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	46c0      	nop			@ (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b006      	add	sp, #24
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	50000400 	.word	0x50000400
 8001c24:	50000800 	.word	0x50000800
 8001c28:	50000c00 	.word	0x50000c00
 8001c2c:	50001c00 	.word	0x50001c00
 8001c30:	40010400 	.word	0x40010400

08001c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b5b0      	push	{r4, r5, r7, lr}
 8001c36:	b08a      	sub	sp, #40	@ 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d102      	bne.n	8001c48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f000 fbaf 	bl	80023a6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c48:	4bcf      	ldr	r3, [pc, #828]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	4013      	ands	r3, r2
 8001c50:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c52:	4bcd      	ldr	r3, [pc, #820]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	2380      	movs	r3, #128	@ 0x80
 8001c58:	025b      	lsls	r3, r3, #9
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	d100      	bne.n	8001c6a <HAL_RCC_OscConfig+0x36>
 8001c68:	e07e      	b.n	8001d68 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d007      	beq.n	8001c80 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d112      	bne.n	8001c9c <HAL_RCC_OscConfig+0x68>
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	2380      	movs	r3, #128	@ 0x80
 8001c7a:	025b      	lsls	r3, r3, #9
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10d      	bne.n	8001c9c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	4bc1      	ldr	r3, [pc, #772]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	029b      	lsls	r3, r3, #10
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d100      	bne.n	8001c8e <HAL_RCC_OscConfig+0x5a>
 8001c8c:	e06b      	b.n	8001d66 <HAL_RCC_OscConfig+0x132>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d167      	bne.n	8001d66 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f000 fb85 	bl	80023a6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	025b      	lsls	r3, r3, #9
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x84>
 8001ca8:	4bb7      	ldr	r3, [pc, #732]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4bb6      	ldr	r3, [pc, #728]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001cae:	2180      	movs	r1, #128	@ 0x80
 8001cb0:	0249      	lsls	r1, r1, #9
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e027      	b.n	8001d08 <HAL_RCC_OscConfig+0xd4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	23a0      	movs	r3, #160	@ 0xa0
 8001cbe:	02db      	lsls	r3, r3, #11
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d10e      	bne.n	8001ce2 <HAL_RCC_OscConfig+0xae>
 8001cc4:	4bb0      	ldr	r3, [pc, #704]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4baf      	ldr	r3, [pc, #700]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001cca:	2180      	movs	r1, #128	@ 0x80
 8001ccc:	02c9      	lsls	r1, r1, #11
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	4bad      	ldr	r3, [pc, #692]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4bac      	ldr	r3, [pc, #688]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001cd8:	2180      	movs	r1, #128	@ 0x80
 8001cda:	0249      	lsls	r1, r1, #9
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	e012      	b.n	8001d08 <HAL_RCC_OscConfig+0xd4>
 8001ce2:	4ba9      	ldr	r3, [pc, #676]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4ba8      	ldr	r3, [pc, #672]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001ce8:	49a8      	ldr	r1, [pc, #672]	@ (8001f8c <HAL_RCC_OscConfig+0x358>)
 8001cea:	400a      	ands	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	4ba6      	ldr	r3, [pc, #664]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2380      	movs	r3, #128	@ 0x80
 8001cf4:	025b      	lsls	r3, r3, #9
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4ba2      	ldr	r3, [pc, #648]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4ba1      	ldr	r3, [pc, #644]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001d02:	49a3      	ldr	r1, [pc, #652]	@ (8001f90 <HAL_RCC_OscConfig+0x35c>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d015      	beq.n	8001d3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff f8ac 	bl	8000e6c <HAL_GetTick>
 8001d14:	0003      	movs	r3, r0
 8001d16:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d18:	e009      	b.n	8001d2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1a:	f7ff f8a7 	bl	8000e6c <HAL_GetTick>
 8001d1e:	0002      	movs	r2, r0
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b64      	cmp	r3, #100	@ 0x64
 8001d26:	d902      	bls.n	8001d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f000 fb3c 	bl	80023a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d2e:	4b96      	ldr	r3, [pc, #600]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	@ 0x80
 8001d34:	029b      	lsls	r3, r3, #10
 8001d36:	4013      	ands	r3, r2
 8001d38:	d0ef      	beq.n	8001d1a <HAL_RCC_OscConfig+0xe6>
 8001d3a:	e015      	b.n	8001d68 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f896 	bl	8000e6c <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d46:	f7ff f891 	bl	8000e6c <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b64      	cmp	r3, #100	@ 0x64
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e326      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d58:	4b8b      	ldr	r3, [pc, #556]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	029b      	lsls	r3, r3, #10
 8001d60:	4013      	ands	r3, r2
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x112>
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d66:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d100      	bne.n	8001d74 <HAL_RCC_OscConfig+0x140>
 8001d72:	e08b      	b.n	8001e8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d13e      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1d0>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d13b      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d8c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2204      	movs	r2, #4
 8001d92:	4013      	ands	r3, r2
 8001d94:	d004      	beq.n	8001da0 <HAL_RCC_OscConfig+0x16c>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e302      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b79      	ldr	r3, [pc, #484]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4a7b      	ldr	r2, [pc, #492]	@ (8001f94 <HAL_RCC_OscConfig+0x360>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	021a      	lsls	r2, r3, #8
 8001db0:	4b75      	ldr	r3, [pc, #468]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001db6:	4b74      	ldr	r3, [pc, #464]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2209      	movs	r2, #9
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	4b71      	ldr	r3, [pc, #452]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dc8:	f000 fc40 	bl	800264c <HAL_RCC_GetSysClockFreq>
 8001dcc:	0001      	movs	r1, r0
 8001dce:	4b6e      	ldr	r3, [pc, #440]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	4a6f      	ldr	r2, [pc, #444]	@ (8001f98 <HAL_RCC_OscConfig+0x364>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	000a      	movs	r2, r1
 8001dde:	40da      	lsrs	r2, r3
 8001de0:	4b6e      	ldr	r3, [pc, #440]	@ (8001f9c <HAL_RCC_OscConfig+0x368>)
 8001de2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001de4:	4b6e      	ldr	r3, [pc, #440]	@ (8001fa0 <HAL_RCC_OscConfig+0x36c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2513      	movs	r5, #19
 8001dea:	197c      	adds	r4, r7, r5
 8001dec:	0018      	movs	r0, r3
 8001dee:	f7fe fff7 	bl	8000de0 <HAL_InitTick>
 8001df2:	0003      	movs	r3, r0
 8001df4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001df6:	197b      	adds	r3, r7, r5
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d046      	beq.n	8001e8c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001dfe:	197b      	adds	r3, r7, r5
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	e2d0      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d027      	beq.n	8001e5a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2209      	movs	r2, #9
 8001e10:	4393      	bics	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	4b5c      	ldr	r3, [pc, #368]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f826 	bl	8000e6c <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e26:	f7ff f821 	bl	8000e6c <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e2b6      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e38:	4b53      	ldr	r3, [pc, #332]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d0f1      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	4b51      	ldr	r3, [pc, #324]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4a53      	ldr	r2, [pc, #332]	@ (8001f94 <HAL_RCC_OscConfig+0x360>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	021a      	lsls	r2, r3, #8
 8001e52:	4b4d      	ldr	r3, [pc, #308]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	e018      	b.n	8001e8c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001e60:	2101      	movs	r1, #1
 8001e62:	438a      	bics	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff f801 	bl	8000e6c <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e70:	f7fe fffc 	bl	8000e6c <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e291      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e82:	4b41      	ldr	r3, [pc, #260]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2204      	movs	r2, #4
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d1f1      	bne.n	8001e70 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2210      	movs	r2, #16
 8001e92:	4013      	ands	r3, r2
 8001e94:	d100      	bne.n	8001e98 <HAL_RCC_OscConfig+0x264>
 8001e96:	e0a1      	b.n	8001fdc <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d140      	bne.n	8001f20 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d005      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x282>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e277      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb6:	4b34      	ldr	r3, [pc, #208]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4a3a      	ldr	r2, [pc, #232]	@ (8001fa4 <HAL_RCC_OscConfig+0x370>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ec4:	4b30      	ldr	r3, [pc, #192]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eca:	4b2f      	ldr	r3, [pc, #188]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	0a19      	lsrs	r1, r3, #8
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	061a      	lsls	r2, r3, #24
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001eda:	430a      	orrs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	0b5b      	lsrs	r3, r3, #13
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	0212      	lsls	r2, r2, #8
 8001eea:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001eec:	4b26      	ldr	r3, [pc, #152]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	400b      	ands	r3, r1
 8001ef6:	4928      	ldr	r1, [pc, #160]	@ (8001f98 <HAL_RCC_OscConfig+0x364>)
 8001ef8:	5ccb      	ldrb	r3, [r1, r3]
 8001efa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001efc:	4b27      	ldr	r3, [pc, #156]	@ (8001f9c <HAL_RCC_OscConfig+0x368>)
 8001efe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001f00:	4b27      	ldr	r3, [pc, #156]	@ (8001fa0 <HAL_RCC_OscConfig+0x36c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2513      	movs	r5, #19
 8001f06:	197c      	adds	r4, r7, r5
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7fe ff69 	bl	8000de0 <HAL_InitTick>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f12:	197b      	adds	r3, r7, r5
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d060      	beq.n	8001fdc <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001f1a:	197b      	adds	r3, r7, r5
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	e242      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d03f      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f28:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b16      	ldr	r3, [pc, #88]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001f2e:	2180      	movs	r1, #128	@ 0x80
 8001f30:	0049      	lsls	r1, r1, #1
 8001f32:	430a      	orrs	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7fe ff99 	bl	8000e6c <HAL_GetTick>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f40:	f7fe ff94 	bl	8000e6c <HAL_GetTick>
 8001f44:	0002      	movs	r2, r0
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e229      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f52:	4b0d      	ldr	r3, [pc, #52]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	2380      	movs	r3, #128	@ 0x80
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4a10      	ldr	r2, [pc, #64]	@ (8001fa4 <HAL_RCC_OscConfig+0x370>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f72:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	0a19      	lsrs	r1, r3, #8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	061a      	lsls	r2, r3, #24
 8001f80:	4b01      	ldr	r3, [pc, #4]	@ (8001f88 <HAL_RCC_OscConfig+0x354>)
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	e029      	b.n	8001fdc <HAL_RCC_OscConfig+0x3a8>
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	fffeffff 	.word	0xfffeffff
 8001f90:	fffbffff 	.word	0xfffbffff
 8001f94:	ffffe0ff 	.word	0xffffe0ff
 8001f98:	080027c8 	.word	0x080027c8
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fa8:	4bbd      	ldr	r3, [pc, #756]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4bbc      	ldr	r3, [pc, #752]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8001fae:	49bd      	ldr	r1, [pc, #756]	@ (80022a4 <HAL_RCC_OscConfig+0x670>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe ff5a 	bl	8000e6c <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fbe:	f7fe ff55 	bl	8000e6c <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1ea      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fd0:	4bb3      	ldr	r3, [pc, #716]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d036      	beq.n	8002054 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d019      	beq.n	8002022 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fee:	4bac      	ldr	r3, [pc, #688]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8001ff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ff2:	4bab      	ldr	r3, [pc, #684]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe ff37 	bl	8000e6c <HAL_GetTick>
 8001ffe:	0003      	movs	r3, r0
 8002000:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002004:	f7fe ff32 	bl	8000e6c <HAL_GetTick>
 8002008:	0002      	movs	r2, r0
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e1c7      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002016:	4ba2      	ldr	r3, [pc, #648]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	d0f1      	beq.n	8002004 <HAL_RCC_OscConfig+0x3d0>
 8002020:	e018      	b.n	8002054 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002022:	4b9f      	ldr	r3, [pc, #636]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002024:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002026:	4b9e      	ldr	r3, [pc, #632]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002028:	2101      	movs	r1, #1
 800202a:	438a      	bics	r2, r1
 800202c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202e:	f7fe ff1d 	bl	8000e6c <HAL_GetTick>
 8002032:	0003      	movs	r3, r0
 8002034:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002038:	f7fe ff18 	bl	8000e6c <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1ad      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800204a:	4b95      	ldr	r3, [pc, #596]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 800204c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800204e:	2202      	movs	r2, #2
 8002050:	4013      	ands	r3, r2
 8002052:	d1f1      	bne.n	8002038 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2204      	movs	r2, #4
 800205a:	4013      	ands	r3, r2
 800205c:	d100      	bne.n	8002060 <HAL_RCC_OscConfig+0x42c>
 800205e:	e0ae      	b.n	80021be <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002060:	2027      	movs	r0, #39	@ 0x27
 8002062:	183b      	adds	r3, r7, r0
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002068:	4b8d      	ldr	r3, [pc, #564]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 800206a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	055b      	lsls	r3, r3, #21
 8002070:	4013      	ands	r3, r2
 8002072:	d109      	bne.n	8002088 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4b8a      	ldr	r3, [pc, #552]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002078:	4b89      	ldr	r3, [pc, #548]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 800207a:	2180      	movs	r1, #128	@ 0x80
 800207c:	0549      	lsls	r1, r1, #21
 800207e:	430a      	orrs	r2, r1
 8002080:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002082:	183b      	adds	r3, r7, r0
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	4b87      	ldr	r3, [pc, #540]	@ (80022a8 <HAL_RCC_OscConfig+0x674>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2380      	movs	r3, #128	@ 0x80
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4013      	ands	r3, r2
 8002092:	d11a      	bne.n	80020ca <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002094:	4b84      	ldr	r3, [pc, #528]	@ (80022a8 <HAL_RCC_OscConfig+0x674>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b83      	ldr	r3, [pc, #524]	@ (80022a8 <HAL_RCC_OscConfig+0x674>)
 800209a:	2180      	movs	r1, #128	@ 0x80
 800209c:	0049      	lsls	r1, r1, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a2:	f7fe fee3 	bl	8000e6c <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ac:	f7fe fede 	bl	8000e6c <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	@ 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e173      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b7a      	ldr	r3, [pc, #488]	@ (80022a8 <HAL_RCC_OscConfig+0x674>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4013      	ands	r3, r2
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	2380      	movs	r3, #128	@ 0x80
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_OscConfig+0x4b2>
 80020d6:	4b72      	ldr	r3, [pc, #456]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 80020d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020da:	4b71      	ldr	r3, [pc, #452]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 80020dc:	2180      	movs	r1, #128	@ 0x80
 80020de:	0049      	lsls	r1, r1, #1
 80020e0:	430a      	orrs	r2, r1
 80020e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80020e4:	e031      	b.n	800214a <HAL_RCC_OscConfig+0x516>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x4d4>
 80020ee:	4b6c      	ldr	r3, [pc, #432]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 80020f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020f2:	4b6b      	ldr	r3, [pc, #428]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 80020f4:	496b      	ldr	r1, [pc, #428]	@ (80022a4 <HAL_RCC_OscConfig+0x670>)
 80020f6:	400a      	ands	r2, r1
 80020f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80020fa:	4b69      	ldr	r3, [pc, #420]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 80020fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020fe:	4b68      	ldr	r3, [pc, #416]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002100:	496a      	ldr	r1, [pc, #424]	@ (80022ac <HAL_RCC_OscConfig+0x678>)
 8002102:	400a      	ands	r2, r1
 8002104:	651a      	str	r2, [r3, #80]	@ 0x50
 8002106:	e020      	b.n	800214a <HAL_RCC_OscConfig+0x516>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	23a0      	movs	r3, #160	@ 0xa0
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	429a      	cmp	r2, r3
 8002112:	d10e      	bne.n	8002132 <HAL_RCC_OscConfig+0x4fe>
 8002114:	4b62      	ldr	r3, [pc, #392]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002116:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002118:	4b61      	ldr	r3, [pc, #388]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 800211a:	2180      	movs	r1, #128	@ 0x80
 800211c:	00c9      	lsls	r1, r1, #3
 800211e:	430a      	orrs	r2, r1
 8002120:	651a      	str	r2, [r3, #80]	@ 0x50
 8002122:	4b5f      	ldr	r3, [pc, #380]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002124:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002126:	4b5e      	ldr	r3, [pc, #376]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002128:	2180      	movs	r1, #128	@ 0x80
 800212a:	0049      	lsls	r1, r1, #1
 800212c:	430a      	orrs	r2, r1
 800212e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002130:	e00b      	b.n	800214a <HAL_RCC_OscConfig+0x516>
 8002132:	4b5b      	ldr	r3, [pc, #364]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002134:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002136:	4b5a      	ldr	r3, [pc, #360]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002138:	495a      	ldr	r1, [pc, #360]	@ (80022a4 <HAL_RCC_OscConfig+0x670>)
 800213a:	400a      	ands	r2, r1
 800213c:	651a      	str	r2, [r3, #80]	@ 0x50
 800213e:	4b58      	ldr	r3, [pc, #352]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002140:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002142:	4b57      	ldr	r3, [pc, #348]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002144:	4959      	ldr	r1, [pc, #356]	@ (80022ac <HAL_RCC_OscConfig+0x678>)
 8002146:	400a      	ands	r2, r1
 8002148:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d015      	beq.n	800217e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7fe fe8b 	bl	8000e6c <HAL_GetTick>
 8002156:	0003      	movs	r3, r0
 8002158:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800215a:	e009      	b.n	8002170 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7fe fe86 	bl	8000e6c <HAL_GetTick>
 8002160:	0002      	movs	r2, r0
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	4a52      	ldr	r2, [pc, #328]	@ (80022b0 <HAL_RCC_OscConfig+0x67c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e11a      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002170:	4b4b      	ldr	r3, [pc, #300]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002172:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002174:	2380      	movs	r3, #128	@ 0x80
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4013      	ands	r3, r2
 800217a:	d0ef      	beq.n	800215c <HAL_RCC_OscConfig+0x528>
 800217c:	e014      	b.n	80021a8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217e:	f7fe fe75 	bl	8000e6c <HAL_GetTick>
 8002182:	0003      	movs	r3, r0
 8002184:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002186:	e009      	b.n	800219c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7fe fe70 	bl	8000e6c <HAL_GetTick>
 800218c:	0002      	movs	r2, r0
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	4a47      	ldr	r2, [pc, #284]	@ (80022b0 <HAL_RCC_OscConfig+0x67c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e104      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800219c:	4b40      	ldr	r3, [pc, #256]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 800219e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	d1ef      	bne.n	8002188 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021a8:	2327      	movs	r3, #39	@ 0x27
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b2:	4b3b      	ldr	r3, [pc, #236]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 80021b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021b6:	4b3a      	ldr	r3, [pc, #232]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 80021b8:	493e      	ldr	r1, [pc, #248]	@ (80022b4 <HAL_RCC_OscConfig+0x680>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2220      	movs	r2, #32
 80021c4:	4013      	ands	r3, r2
 80021c6:	d049      	beq.n	800225c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d026      	beq.n	800221e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80021d0:	4b33      	ldr	r3, [pc, #204]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	4b32      	ldr	r3, [pc, #200]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 80021d6:	2101      	movs	r1, #1
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	4b30      	ldr	r3, [pc, #192]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 80021de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021e0:	4b2f      	ldr	r3, [pc, #188]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 80021e2:	2101      	movs	r1, #1
 80021e4:	430a      	orrs	r2, r1
 80021e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80021e8:	4b33      	ldr	r3, [pc, #204]	@ (80022b8 <HAL_RCC_OscConfig+0x684>)
 80021ea:	6a1a      	ldr	r2, [r3, #32]
 80021ec:	4b32      	ldr	r3, [pc, #200]	@ (80022b8 <HAL_RCC_OscConfig+0x684>)
 80021ee:	2180      	movs	r1, #128	@ 0x80
 80021f0:	0189      	lsls	r1, r1, #6
 80021f2:	430a      	orrs	r2, r1
 80021f4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7fe fe39 	bl	8000e6c <HAL_GetTick>
 80021fa:	0003      	movs	r3, r0
 80021fc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002200:	f7fe fe34 	bl	8000e6c <HAL_GetTick>
 8002204:	0002      	movs	r2, r0
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e0c9      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002212:	4b23      	ldr	r3, [pc, #140]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2202      	movs	r2, #2
 8002218:	4013      	ands	r3, r2
 800221a:	d0f1      	beq.n	8002200 <HAL_RCC_OscConfig+0x5cc>
 800221c:	e01e      	b.n	800225c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800221e:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	4b1f      	ldr	r3, [pc, #124]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002224:	2101      	movs	r1, #1
 8002226:	438a      	bics	r2, r1
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <HAL_RCC_OscConfig+0x684>)
 800222c:	6a1a      	ldr	r2, [r3, #32]
 800222e:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <HAL_RCC_OscConfig+0x684>)
 8002230:	4922      	ldr	r1, [pc, #136]	@ (80022bc <HAL_RCC_OscConfig+0x688>)
 8002232:	400a      	ands	r2, r1
 8002234:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7fe fe19 	bl	8000e6c <HAL_GetTick>
 800223a:	0003      	movs	r3, r0
 800223c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002240:	f7fe fe14 	bl	8000e6c <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0a9      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002252:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2202      	movs	r2, #2
 8002258:	4013      	ands	r3, r2
 800225a:	d1f1      	bne.n	8002240 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	d100      	bne.n	8002266 <HAL_RCC_OscConfig+0x632>
 8002264:	e09e      	b.n	80023a4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	2b0c      	cmp	r3, #12
 800226a:	d100      	bne.n	800226e <HAL_RCC_OscConfig+0x63a>
 800226c:	e077      	b.n	800235e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002272:	2b02      	cmp	r3, #2
 8002274:	d158      	bne.n	8002328 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	4b0a      	ldr	r3, [pc, #40]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <HAL_RCC_OscConfig+0x66c>)
 800227c:	4910      	ldr	r1, [pc, #64]	@ (80022c0 <HAL_RCC_OscConfig+0x68c>)
 800227e:	400a      	ands	r2, r1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7fe fdf3 	bl	8000e6c <HAL_GetTick>
 8002286:	0003      	movs	r3, r0
 8002288:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800228a:	e01b      	b.n	80022c4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800228c:	f7fe fdee 	bl	8000e6c <HAL_GetTick>
 8002290:	0002      	movs	r2, r0
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d914      	bls.n	80022c4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e083      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	40021000 	.word	0x40021000
 80022a4:	fffffeff 	.word	0xfffffeff
 80022a8:	40007000 	.word	0x40007000
 80022ac:	fffffbff 	.word	0xfffffbff
 80022b0:	00001388 	.word	0x00001388
 80022b4:	efffffff 	.word	0xefffffff
 80022b8:	40010000 	.word	0x40010000
 80022bc:	ffffdfff 	.word	0xffffdfff
 80022c0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80022c4:	4b3a      	ldr	r3, [pc, #232]	@ (80023b0 <HAL_RCC_OscConfig+0x77c>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	@ 0x80
 80022ca:	049b      	lsls	r3, r3, #18
 80022cc:	4013      	ands	r3, r2
 80022ce:	d1dd      	bne.n	800228c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d0:	4b37      	ldr	r3, [pc, #220]	@ (80023b0 <HAL_RCC_OscConfig+0x77c>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a37      	ldr	r2, [pc, #220]	@ (80023b4 <HAL_RCC_OscConfig+0x780>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e8:	431a      	orrs	r2, r3
 80022ea:	4b31      	ldr	r3, [pc, #196]	@ (80023b0 <HAL_RCC_OscConfig+0x77c>)
 80022ec:	430a      	orrs	r2, r1
 80022ee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f0:	4b2f      	ldr	r3, [pc, #188]	@ (80023b0 <HAL_RCC_OscConfig+0x77c>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b2e      	ldr	r3, [pc, #184]	@ (80023b0 <HAL_RCC_OscConfig+0x77c>)
 80022f6:	2180      	movs	r1, #128	@ 0x80
 80022f8:	0449      	lsls	r1, r1, #17
 80022fa:	430a      	orrs	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fe:	f7fe fdb5 	bl	8000e6c <HAL_GetTick>
 8002302:	0003      	movs	r3, r0
 8002304:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002308:	f7fe fdb0 	bl	8000e6c <HAL_GetTick>
 800230c:	0002      	movs	r2, r0
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e045      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800231a:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <HAL_RCC_OscConfig+0x77c>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	049b      	lsls	r3, r3, #18
 8002322:	4013      	ands	r3, r2
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x6d4>
 8002326:	e03d      	b.n	80023a4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002328:	4b21      	ldr	r3, [pc, #132]	@ (80023b0 <HAL_RCC_OscConfig+0x77c>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b20      	ldr	r3, [pc, #128]	@ (80023b0 <HAL_RCC_OscConfig+0x77c>)
 800232e:	4922      	ldr	r1, [pc, #136]	@ (80023b8 <HAL_RCC_OscConfig+0x784>)
 8002330:	400a      	ands	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002334:	f7fe fd9a 	bl	8000e6c <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233e:	f7fe fd95 	bl	8000e6c <HAL_GetTick>
 8002342:	0002      	movs	r2, r0
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e02a      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002350:	4b17      	ldr	r3, [pc, #92]	@ (80023b0 <HAL_RCC_OscConfig+0x77c>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2380      	movs	r3, #128	@ 0x80
 8002356:	049b      	lsls	r3, r3, #18
 8002358:	4013      	ands	r3, r2
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x70a>
 800235c:	e022      	b.n	80023a4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002362:	2b01      	cmp	r3, #1
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e01d      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800236a:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <HAL_RCC_OscConfig+0x77c>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	025b      	lsls	r3, r3, #9
 8002376:	401a      	ands	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237c:	429a      	cmp	r2, r3
 800237e:	d10f      	bne.n	80023a0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	23f0      	movs	r3, #240	@ 0xf0
 8002384:	039b      	lsls	r3, r3, #14
 8002386:	401a      	ands	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238c:	429a      	cmp	r2, r3
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	23c0      	movs	r3, #192	@ 0xc0
 8002394:	041b      	lsls	r3, r3, #16
 8002396:	401a      	ands	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b00a      	add	sp, #40	@ 0x28
 80023ac:	bdb0      	pop	{r4, r5, r7, pc}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	40021000 	.word	0x40021000
 80023b4:	ff02ffff 	.word	0xff02ffff
 80023b8:	feffffff 	.word	0xfeffffff

080023bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b5b0      	push	{r4, r5, r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e128      	b.n	8002622 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b96      	ldr	r3, [pc, #600]	@ (800262c <HAL_RCC_ClockConfig+0x270>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d91e      	bls.n	800241c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b93      	ldr	r3, [pc, #588]	@ (800262c <HAL_RCC_ClockConfig+0x270>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2201      	movs	r2, #1
 80023e4:	4393      	bics	r3, r2
 80023e6:	0019      	movs	r1, r3
 80023e8:	4b90      	ldr	r3, [pc, #576]	@ (800262c <HAL_RCC_ClockConfig+0x270>)
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023f0:	f7fe fd3c 	bl	8000e6c <HAL_GetTick>
 80023f4:	0003      	movs	r3, r0
 80023f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f8:	e009      	b.n	800240e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fa:	f7fe fd37 	bl	8000e6c <HAL_GetTick>
 80023fe:	0002      	movs	r2, r0
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	4a8a      	ldr	r2, [pc, #552]	@ (8002630 <HAL_RCC_ClockConfig+0x274>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e109      	b.n	8002622 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	4b87      	ldr	r3, [pc, #540]	@ (800262c <HAL_RCC_ClockConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	4013      	ands	r3, r2
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d1ee      	bne.n	80023fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2202      	movs	r2, #2
 8002422:	4013      	ands	r3, r2
 8002424:	d009      	beq.n	800243a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002426:	4b83      	ldr	r3, [pc, #524]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	22f0      	movs	r2, #240	@ 0xf0
 800242c:	4393      	bics	r3, r2
 800242e:	0019      	movs	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	4b7f      	ldr	r3, [pc, #508]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 8002436:	430a      	orrs	r2, r1
 8002438:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2201      	movs	r2, #1
 8002440:	4013      	ands	r3, r2
 8002442:	d100      	bne.n	8002446 <HAL_RCC_ClockConfig+0x8a>
 8002444:	e089      	b.n	800255a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800244e:	4b79      	ldr	r3, [pc, #484]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	@ 0x80
 8002454:	029b      	lsls	r3, r3, #10
 8002456:	4013      	ands	r3, r2
 8002458:	d120      	bne.n	800249c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e0e1      	b.n	8002622 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002466:	4b73      	ldr	r3, [pc, #460]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	2380      	movs	r3, #128	@ 0x80
 800246c:	049b      	lsls	r3, r3, #18
 800246e:	4013      	ands	r3, r2
 8002470:	d114      	bne.n	800249c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0d5      	b.n	8002622 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d106      	bne.n	800248c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800247e:	4b6d      	ldr	r3, [pc, #436]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2204      	movs	r2, #4
 8002484:	4013      	ands	r3, r2
 8002486:	d109      	bne.n	800249c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0ca      	b.n	8002622 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800248c:	4b69      	ldr	r3, [pc, #420]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	2380      	movs	r3, #128	@ 0x80
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4013      	ands	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0c2      	b.n	8002622 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249c:	4b65      	ldr	r3, [pc, #404]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	2203      	movs	r2, #3
 80024a2:	4393      	bics	r3, r2
 80024a4:	0019      	movs	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4b62      	ldr	r3, [pc, #392]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 80024ac:	430a      	orrs	r2, r1
 80024ae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b0:	f7fe fcdc 	bl	8000e6c <HAL_GetTick>
 80024b4:	0003      	movs	r3, r0
 80024b6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d111      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c0:	e009      	b.n	80024d6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c2:	f7fe fcd3 	bl	8000e6c <HAL_GetTick>
 80024c6:	0002      	movs	r2, r0
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	4a58      	ldr	r2, [pc, #352]	@ (8002630 <HAL_RCC_ClockConfig+0x274>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e0a5      	b.n	8002622 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80024d6:	4b57      	ldr	r3, [pc, #348]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	220c      	movs	r2, #12
 80024dc:	4013      	ands	r3, r2
 80024de:	2b08      	cmp	r3, #8
 80024e0:	d1ef      	bne.n	80024c2 <HAL_RCC_ClockConfig+0x106>
 80024e2:	e03a      	b.n	800255a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d111      	bne.n	8002510 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ec:	e009      	b.n	8002502 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ee:	f7fe fcbd 	bl	8000e6c <HAL_GetTick>
 80024f2:	0002      	movs	r2, r0
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002630 <HAL_RCC_ClockConfig+0x274>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e08f      	b.n	8002622 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002502:	4b4c      	ldr	r3, [pc, #304]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	220c      	movs	r2, #12
 8002508:	4013      	ands	r3, r2
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d1ef      	bne.n	80024ee <HAL_RCC_ClockConfig+0x132>
 800250e:	e024      	b.n	800255a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d11b      	bne.n	8002550 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002518:	e009      	b.n	800252e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251a:	f7fe fca7 	bl	8000e6c <HAL_GetTick>
 800251e:	0002      	movs	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	4a42      	ldr	r2, [pc, #264]	@ (8002630 <HAL_RCC_ClockConfig+0x274>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e079      	b.n	8002622 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800252e:	4b41      	ldr	r3, [pc, #260]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	220c      	movs	r2, #12
 8002534:	4013      	ands	r3, r2
 8002536:	2b04      	cmp	r3, #4
 8002538:	d1ef      	bne.n	800251a <HAL_RCC_ClockConfig+0x15e>
 800253a:	e00e      	b.n	800255a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253c:	f7fe fc96 	bl	8000e6c <HAL_GetTick>
 8002540:	0002      	movs	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	4a3a      	ldr	r2, [pc, #232]	@ (8002630 <HAL_RCC_ClockConfig+0x274>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e068      	b.n	8002622 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002550:	4b38      	ldr	r3, [pc, #224]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	220c      	movs	r2, #12
 8002556:	4013      	ands	r3, r2
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800255a:	4b34      	ldr	r3, [pc, #208]	@ (800262c <HAL_RCC_ClockConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2201      	movs	r2, #1
 8002560:	4013      	ands	r3, r2
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d21e      	bcs.n	80025a6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002568:	4b30      	ldr	r3, [pc, #192]	@ (800262c <HAL_RCC_ClockConfig+0x270>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2201      	movs	r2, #1
 800256e:	4393      	bics	r3, r2
 8002570:	0019      	movs	r1, r3
 8002572:	4b2e      	ldr	r3, [pc, #184]	@ (800262c <HAL_RCC_ClockConfig+0x270>)
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800257a:	f7fe fc77 	bl	8000e6c <HAL_GetTick>
 800257e:	0003      	movs	r3, r0
 8002580:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	e009      	b.n	8002598 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002584:	f7fe fc72 	bl	8000e6c <HAL_GetTick>
 8002588:	0002      	movs	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	4a28      	ldr	r2, [pc, #160]	@ (8002630 <HAL_RCC_ClockConfig+0x274>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e044      	b.n	8002622 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002598:	4b24      	ldr	r3, [pc, #144]	@ (800262c <HAL_RCC_ClockConfig+0x270>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	4013      	ands	r3, r2
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d1ee      	bne.n	8002584 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2204      	movs	r2, #4
 80025ac:	4013      	ands	r3, r2
 80025ae:	d009      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b0:	4b20      	ldr	r3, [pc, #128]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a20      	ldr	r2, [pc, #128]	@ (8002638 <HAL_RCC_ClockConfig+0x27c>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68da      	ldr	r2, [r3, #12]
 80025be:	4b1d      	ldr	r3, [pc, #116]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 80025c0:	430a      	orrs	r2, r1
 80025c2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2208      	movs	r2, #8
 80025ca:	4013      	ands	r3, r2
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ce:	4b19      	ldr	r3, [pc, #100]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	4a1a      	ldr	r2, [pc, #104]	@ (800263c <HAL_RCC_ClockConfig+0x280>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	00da      	lsls	r2, r3, #3
 80025de:	4b15      	ldr	r3, [pc, #84]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 80025e0:	430a      	orrs	r2, r1
 80025e2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025e4:	f000 f832 	bl	800264c <HAL_RCC_GetSysClockFreq>
 80025e8:	0001      	movs	r1, r0
 80025ea:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <HAL_RCC_ClockConfig+0x278>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	220f      	movs	r2, #15
 80025f2:	4013      	ands	r3, r2
 80025f4:	4a12      	ldr	r2, [pc, #72]	@ (8002640 <HAL_RCC_ClockConfig+0x284>)
 80025f6:	5cd3      	ldrb	r3, [r2, r3]
 80025f8:	000a      	movs	r2, r1
 80025fa:	40da      	lsrs	r2, r3
 80025fc:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <HAL_RCC_ClockConfig+0x288>)
 80025fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002600:	4b11      	ldr	r3, [pc, #68]	@ (8002648 <HAL_RCC_ClockConfig+0x28c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	250b      	movs	r5, #11
 8002606:	197c      	adds	r4, r7, r5
 8002608:	0018      	movs	r0, r3
 800260a:	f7fe fbe9 	bl	8000de0 <HAL_InitTick>
 800260e:	0003      	movs	r3, r0
 8002610:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002612:	197b      	adds	r3, r7, r5
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800261a:	197b      	adds	r3, r7, r5
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	e000      	b.n	8002622 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	0018      	movs	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	b004      	add	sp, #16
 8002628:	bdb0      	pop	{r4, r5, r7, pc}
 800262a:	46c0      	nop			@ (mov r8, r8)
 800262c:	40022000 	.word	0x40022000
 8002630:	00001388 	.word	0x00001388
 8002634:	40021000 	.word	0x40021000
 8002638:	fffff8ff 	.word	0xfffff8ff
 800263c:	ffffc7ff 	.word	0xffffc7ff
 8002640:	080027c8 	.word	0x080027c8
 8002644:	20000000 	.word	0x20000000
 8002648:	20000004 	.word	0x20000004

0800264c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002652:	4b3c      	ldr	r3, [pc, #240]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	220c      	movs	r2, #12
 800265c:	4013      	ands	r3, r2
 800265e:	2b0c      	cmp	r3, #12
 8002660:	d013      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0x3e>
 8002662:	d85c      	bhi.n	800271e <HAL_RCC_GetSysClockFreq+0xd2>
 8002664:	2b04      	cmp	r3, #4
 8002666:	d002      	beq.n	800266e <HAL_RCC_GetSysClockFreq+0x22>
 8002668:	2b08      	cmp	r3, #8
 800266a:	d00b      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x38>
 800266c:	e057      	b.n	800271e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800266e:	4b35      	ldr	r3, [pc, #212]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2210      	movs	r2, #16
 8002674:	4013      	ands	r3, r2
 8002676:	d002      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002678:	4b33      	ldr	r3, [pc, #204]	@ (8002748 <HAL_RCC_GetSysClockFreq+0xfc>)
 800267a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800267c:	e05d      	b.n	800273a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800267e:	4b33      	ldr	r3, [pc, #204]	@ (800274c <HAL_RCC_GetSysClockFreq+0x100>)
 8002680:	613b      	str	r3, [r7, #16]
      break;
 8002682:	e05a      	b.n	800273a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002684:	4b32      	ldr	r3, [pc, #200]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x104>)
 8002686:	613b      	str	r3, [r7, #16]
      break;
 8002688:	e057      	b.n	800273a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	0c9b      	lsrs	r3, r3, #18
 800268e:	220f      	movs	r2, #15
 8002690:	4013      	ands	r3, r2
 8002692:	4a30      	ldr	r2, [pc, #192]	@ (8002754 <HAL_RCC_GetSysClockFreq+0x108>)
 8002694:	5cd3      	ldrb	r3, [r2, r3]
 8002696:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	0d9b      	lsrs	r3, r3, #22
 800269c:	2203      	movs	r2, #3
 800269e:	4013      	ands	r3, r2
 80026a0:	3301      	adds	r3, #1
 80026a2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a4:	4b27      	ldr	r3, [pc, #156]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	2380      	movs	r3, #128	@ 0x80
 80026aa:	025b      	lsls	r3, r3, #9
 80026ac:	4013      	ands	r3, r2
 80026ae:	d00f      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	000a      	movs	r2, r1
 80026b4:	0152      	lsls	r2, r2, #5
 80026b6:	1a52      	subs	r2, r2, r1
 80026b8:	0193      	lsls	r3, r2, #6
 80026ba:	1a9b      	subs	r3, r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	185b      	adds	r3, r3, r1
 80026c0:	025b      	lsls	r3, r3, #9
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7fd fd1f 	bl	8000108 <__udivsi3>
 80026ca:	0003      	movs	r3, r0
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	e023      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2210      	movs	r2, #16
 80026d6:	4013      	ands	r3, r2
 80026d8:	d00f      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	000a      	movs	r2, r1
 80026de:	0152      	lsls	r2, r2, #5
 80026e0:	1a52      	subs	r2, r2, r1
 80026e2:	0193      	lsls	r3, r2, #6
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	185b      	adds	r3, r3, r1
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	0018      	movs	r0, r3
 80026f0:	f7fd fd0a 	bl	8000108 <__udivsi3>
 80026f4:	0003      	movs	r3, r0
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	e00e      	b.n	8002718 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	000a      	movs	r2, r1
 80026fe:	0152      	lsls	r2, r2, #5
 8002700:	1a52      	subs	r2, r2, r1
 8002702:	0193      	lsls	r3, r2, #6
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	185b      	adds	r3, r3, r1
 800270a:	029b      	lsls	r3, r3, #10
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	0018      	movs	r0, r3
 8002710:	f7fd fcfa 	bl	8000108 <__udivsi3>
 8002714:	0003      	movs	r3, r0
 8002716:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	613b      	str	r3, [r7, #16]
      break;
 800271c:	e00d      	b.n	800273a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800271e:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	0b5b      	lsrs	r3, r3, #13
 8002724:	2207      	movs	r2, #7
 8002726:	4013      	ands	r3, r2
 8002728:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	2280      	movs	r2, #128	@ 0x80
 8002730:	0212      	lsls	r2, r2, #8
 8002732:	409a      	lsls	r2, r3
 8002734:	0013      	movs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
      break;
 8002738:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800273a:	693b      	ldr	r3, [r7, #16]
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b006      	add	sp, #24
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000
 8002748:	003d0900 	.word	0x003d0900
 800274c:	00f42400 	.word	0x00f42400
 8002750:	007a1200 	.word	0x007a1200
 8002754:	080027d8 	.word	0x080027d8

08002758 <memset>:
 8002758:	0003      	movs	r3, r0
 800275a:	1882      	adds	r2, r0, r2
 800275c:	4293      	cmp	r3, r2
 800275e:	d100      	bne.n	8002762 <memset+0xa>
 8002760:	4770      	bx	lr
 8002762:	7019      	strb	r1, [r3, #0]
 8002764:	3301      	adds	r3, #1
 8002766:	e7f9      	b.n	800275c <memset+0x4>

08002768 <__libc_init_array>:
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	2600      	movs	r6, #0
 800276c:	4c0c      	ldr	r4, [pc, #48]	@ (80027a0 <__libc_init_array+0x38>)
 800276e:	4d0d      	ldr	r5, [pc, #52]	@ (80027a4 <__libc_init_array+0x3c>)
 8002770:	1b64      	subs	r4, r4, r5
 8002772:	10a4      	asrs	r4, r4, #2
 8002774:	42a6      	cmp	r6, r4
 8002776:	d109      	bne.n	800278c <__libc_init_array+0x24>
 8002778:	2600      	movs	r6, #0
 800277a:	f000 f819 	bl	80027b0 <_init>
 800277e:	4c0a      	ldr	r4, [pc, #40]	@ (80027a8 <__libc_init_array+0x40>)
 8002780:	4d0a      	ldr	r5, [pc, #40]	@ (80027ac <__libc_init_array+0x44>)
 8002782:	1b64      	subs	r4, r4, r5
 8002784:	10a4      	asrs	r4, r4, #2
 8002786:	42a6      	cmp	r6, r4
 8002788:	d105      	bne.n	8002796 <__libc_init_array+0x2e>
 800278a:	bd70      	pop	{r4, r5, r6, pc}
 800278c:	00b3      	lsls	r3, r6, #2
 800278e:	58eb      	ldr	r3, [r5, r3]
 8002790:	4798      	blx	r3
 8002792:	3601      	adds	r6, #1
 8002794:	e7ee      	b.n	8002774 <__libc_init_array+0xc>
 8002796:	00b3      	lsls	r3, r6, #2
 8002798:	58eb      	ldr	r3, [r5, r3]
 800279a:	4798      	blx	r3
 800279c:	3601      	adds	r6, #1
 800279e:	e7f2      	b.n	8002786 <__libc_init_array+0x1e>
 80027a0:	080027e4 	.word	0x080027e4
 80027a4:	080027e4 	.word	0x080027e4
 80027a8:	080027e8 	.word	0x080027e8
 80027ac:	080027e4 	.word	0x080027e4

080027b0 <_init>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr

080027bc <_fini>:
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c2:	bc08      	pop	{r3}
 80027c4:	469e      	mov	lr, r3
 80027c6:	4770      	bx	lr
